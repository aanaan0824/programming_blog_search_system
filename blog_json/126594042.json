{"blogid": "126594042", "writerAge": "码龄2年", "writerBlogNum": "172", "writerCollect": "502", "writerComment": "160", "writerFan": "2412", "writerGrade": "5级", "writerIntegral": "2489", "writerName": "小花皮猪", "writerProfileAdress": "writer_image\\profile_126594042.jpg", "writerRankTotal": "7557", "writerRankWeekly": "563", "writerThumb": "276", "writerVisitNum": "536675", "blog_read_count": "518", "blog_time": "于 2022-08-29 22:38:03 发布", "blog_title": "Java简单使用EasyExcel操作读写excel", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>前言</h2>\n<p>EasyExcel是一个基于Java的、快速、简洁、解决大文件内存溢出的Excel处理工具。</p>\n<p>他能让你在不用考虑性能、内存的等因素的情况下，快速完成Excel的读、写等功能。</p>\n<p>EasyExcel基于POI进行封装优化，降低内存使用，再大的excel也不会出现内存溢出，让使用更加简单方便。</p>\n<blockquote>\n<p>官网： https://easyexcel.opensource.alibaba.com/<br/> github: https://github.com/alibaba/easyexcel</p>\n</blockquote>\n<p>特点:阿里巴巴开源的工具,代码简化,占用内存少,优化OOM(内存溢出异常)</p>\n<h2><a id=\"EasyExcel_11\"></a>引入EasyExcel依赖</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>easyExcel依赖<span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>dependency<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>groupId<span class=\"token operator\">&gt;</span>com<span class=\"token punctuation\">.</span>alibaba<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>artifactId<span class=\"token operator\">&gt;</span>easyexcel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>version<span class=\"token operator\">&gt;</span><span class=\"token number\">2.2</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token operator\">-</span>beta2<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h2><a id=\"easyExcel_22\"></a>easyExcel写</h2>\n<p>准备一个实体类 因为easyexcel根据实体类自动生成的表 效率非常的高</p>\n<pre><code class=\"prism language-cpp\">package com<span class=\"token punctuation\">.</span>wyh<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>ExcelIgnore</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>ExcelProperty</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">lombok<span class=\"token punctuation\">.</span>Data</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token module\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Date</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @program: JavaExecl\n * @description: easyExcel实体类 可以用它生成excel\n * @author: 魏一鹤\n * @createDate: 2021-12-18 23:03\n **/</span>\n@Data\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoData</span> <span class=\"token punctuation\">{<!-- --></span>\n    @<span class=\"token function\">ExcelProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字符串标题\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> String string<span class=\"token punctuation\">;</span>\n    @<span class=\"token function\">ExcelProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"日期标题\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> Date date<span class=\"token punctuation\">;</span>\n    @<span class=\"token function\">ExcelProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数字标题\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> Double doubleData<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 忽略这个字段\n     */</span>\n    @ExcelIgnore\n    <span class=\"token keyword\">private</span> String ignore<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>它对应生成的就是这样<br/> <img alt=\"在这里插入图片描述\" src=\"image\\fc85bc19b9c94d018d35336d5337e21f.png\"/></p>\n<p>写一个基本的写入操作</p>\n<pre><code class=\"prism language-cpp\">  \n<span class=\"token comment\">//根据list写入excel</span>\n@Test\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">simpleWrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 写法1 JDK8+</span>\n    <span class=\"token comment\">// since: 3.0.0-beta1</span>\n    <span class=\"token comment\">//生成的文件名和文件所在位置</span>\n    String fileName <span class=\"token operator\">=</span>path<span class=\"token operator\">+</span><span class=\"token string\">\"easyExcel.xlsx\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//开始写入 这里说下几个参数</span>\n    <span class=\"token comment\">//1 fileName 是一个io流 自动生成excel</span>\n    <span class=\"token comment\">//2 DemoData.class根据哪个类的规则去生成excel</span>\n    <span class=\"token comment\">//3 sheetName 生成的表的名字</span>\n    <span class=\"token comment\">//4 进行写出,写入到规则就是我们上面定义的方法循环</span>\n    EasyExcel<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span>DemoData<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sheet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"模板\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doWrite</span><span class=\"token punctuation\">(</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>完整的代码</p>\n<pre><code class=\"prism language-cpp\">package com<span class=\"token punctuation\">.</span>wyh<span class=\"token punctuation\">.</span>Test<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>EasyExcel</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>ExcelWriter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">.</span>WriteSheet</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>wyh<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span>DemoData</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>collections4<span class=\"token punctuation\">.</span>ListUtils</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>Test</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token module\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Date</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @program: JavaExecl\n * @description: easyExcel写操作\n * @author: 魏一鹤\n * @createDate: 2021-12-18 23:08\n **/</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EasyExcelWrite</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//全局路径,供我们操作使用方便</span>\n    <span class=\"token keyword\">static</span> String path<span class=\"token operator\">=</span><span class=\"token string\">\"D:\\\\Tools\\\\JavaWorkSpace\\\\JavaExecl\\\\\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>DemoData<span class=\"token operator\">&gt;</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        List<span class=\"token operator\">&lt;</span>DemoData<span class=\"token operator\">&gt;</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-function\"><span class=\"token function\">ArrayList</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>DemoData<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            DemoData data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">DemoData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            data<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字符串\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            data<span class=\"token punctuation\">.</span><span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            data<span class=\"token punctuation\">.</span><span class=\"token function\">setDoubleData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.56</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//根据list写入excel</span>\n    @Test\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">simpleWrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 写法1 JDK8+</span>\n        <span class=\"token comment\">// since: 3.0.0-beta1</span>\n        <span class=\"token comment\">//生成的文件名和文件所在位置</span>\n        String fileName <span class=\"token operator\">=</span>path<span class=\"token operator\">+</span><span class=\"token string\">\"easyExcel.xlsx\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//开始写入 这里说下几个参数</span>\n        <span class=\"token comment\">//1 fileName 是一个io流 自动生成excel</span>\n        <span class=\"token comment\">//2 DemoData.class根据哪个类的规则去生成excel</span>\n        <span class=\"token comment\">//3 sheetName 生成的表的名字</span>\n        <span class=\"token comment\">//4 进行写出,写入到规则就是我们上面定义的方法循环</span>\n        EasyExcel<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span>DemoData<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sheet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"模板\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doWrite</span><span class=\"token punctuation\">(</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行完毕之后发现已经生成了,而且和我们想要的数据格式是一样的<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d4a4c9bcc4874d308cd6cc387076b10b.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a0886af9776b42c0a36a788b292a11ce.png\"/></p>\n<h2><a id=\"easyExcel_140\"></a>easyExcel读</h2>\n<p>需要一个实体,我们已经有了,可以直接用上面的DemoData</p>\n<pre><code class=\"prism language-cpp\">\n\npackage com<span class=\"token punctuation\">.</span>wyh<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>ExcelIgnore</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>ExcelProperty</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">lombok<span class=\"token punctuation\">.</span>Data</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token module\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Date</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @program: JavaExecl\n * @description: easyExcel实体类 可以用它生成excel\n * @author: 魏一鹤\n * @createDate: 2021-12-18 23:03\n **/</span>\n@Data\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoData</span> <span class=\"token punctuation\">{<!-- --></span>\n    @<span class=\"token function\">ExcelProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字符串标题\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> String string<span class=\"token punctuation\">;</span>\n    @<span class=\"token function\">ExcelProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"日期标题\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> Date date<span class=\"token punctuation\">;</span>\n    @<span class=\"token function\">ExcelProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数字标题\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> Double doubleData<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 忽略这个字段\n     */</span>\n    @ExcelIgnore\n    <span class=\"token keyword\">private</span> String ignore<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>需要一个监听器</p>\n<pre><code class=\"prism language-cpp\">\npackage com<span class=\"token punctuation\">.</span>wyh<span class=\"token punctuation\">.</span>Test<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>AnalysisContext</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span>AnalysisEventListener</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">.</span>CellData</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">.</span>CellExtra</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">.</span>listener<span class=\"token punctuation\">.</span>ReadListener</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span>JSON</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>wyh<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span>DemoData</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span>Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>collections4<span class=\"token punctuation\">.</span>ListUtils</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span>Logger</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span>LoggerFactory</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token module\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>List</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Map</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @program: JavaExecl\n * @description: easyExcel监听器\n * @author: 魏一鹤\n * @createDate: 2021-12-18 23:30\n **/</span>\n<span class=\"token comment\">// 有个很重要的点 DemoDataListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoDataListener</span> extends AnalysisEventListener<span class=\"token operator\">&lt;</span>DemoData<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> Logger LOGGER <span class=\"token operator\">=</span> LoggerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span>DemoDataListener<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> BATCH_COUNT <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    List<span class=\"token operator\">&lt;</span>DemoData<span class=\"token operator\">&gt;</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-function\"><span class=\"token function\">ArrayList</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>DemoData<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。\n     */</span>\n    <span class=\"token keyword\">private</span> DemoDAO demoDAO<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">DemoDataListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 这里是demo，所以随便new一个。实际使用如果到了spring,请使用下面的有参构造函数</span>\n        demoDAO <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">DemoDAO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * 如果使用了spring,请使用这个构造方法。每次创建Listener的时候需要把spring管理的类传进来\n     *\n     * @param demoDAO\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">DemoDataListener</span><span class=\"token punctuation\">(</span>DemoDAO demoDAO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>demoDAO <span class=\"token operator\">=</span> demoDAO<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * 这个每一条数据解析都会来调用\n     *\n     * @param data\n     *            one row value. Is is same as {@link AnalysisContext#readRowHolder()}\n     * @param context\n     */</span>\n    @Override\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>DemoData data<span class=\"token punctuation\">,</span> AnalysisContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> BATCH_COUNT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 存储完成清理 list</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * 所有数据解析完成了 都会来调用\n     *\n     * @param context\n     */</span>\n    @Override\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doAfterAllAnalysed</span><span class=\"token punctuation\">(</span>AnalysisContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 这里也要保存数据，确保最后遗留的数据也存储到数据库</span>\n        <span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"所有数据解析完成！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * 加上存储数据库\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        demoDAO<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>然后写一个基本的读操作</p>\n<pre><code class=\"prism language-cpp\">package com<span class=\"token punctuation\">.</span>wyh<span class=\"token punctuation\">.</span>Test<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>EasyExcel</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>ExcelReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>AnalysisContext</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">.</span>listener<span class=\"token punctuation\">.</span>ReadListener</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">.</span>ReadSheet</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span>JSON</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">com<span class=\"token punctuation\">.</span>wyh<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span>DemoData</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>collections4<span class=\"token punctuation\">.</span>ListUtils</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>Test</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token module\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @program: JavaExecl\n * @description: excel读数据\n * @author: 魏一鹤\n * @createDate: 2021-12-18 23:38\n **/</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EasyExcelRead</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">//全局路径,供我们操作使用方便</span>\n    <span class=\"token keyword\">static</span> String path<span class=\"token operator\">=</span><span class=\"token string\">\"D:\\\\Tools\\\\JavaWorkSpace\\\\JavaExecl\\\\\"</span><span class=\"token punctuation\">;</span>\n    @Test\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">simpleRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//文件路径</span>\n        String fileName <span class=\"token operator\">=</span> path <span class=\"token operator\">+</span> <span class=\"token string\">\"easyExcel.xlsx\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//重点注意监听器读取的逻辑</span>\n        <span class=\"token comment\">//fileName 文件</span>\n        <span class=\"token comment\">//DemoData 类规则</span>\n        <span class=\"token comment\">//DemoDataListener 监听器</span>\n        <span class=\"token comment\">//sheet().doRead() 表的读取</span>\n        EasyExcel<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span>DemoData<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token function\">DemoDataListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>启动发现全部数据被正常读取到</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\15e2071530fb4bb285c0813b57f9ba26.png\"/></p>\n<h2><a id=\"easyExcel_317\"></a>总结下easyExcel的步骤和要点</h2>\n<p>1 写入 根据固定的类格式进行写入</p>\n<p>2 读取 根据监听器设置规则进行读取</p>\n<p>要点:尽量提前准备好模板</p>\n<h2><a id=\"_324\"></a>结语</h2>\n<p>EasyExcel真的比POI要强大太多，先不说防止OOM,就代码量，前者就已经赢太多了</p>\n<p>本次只是带来了Java简单操作EasyExcel入门案例,也是官方的一个demo</p>\n<p>后续自己做网站,打算导出导入Excel技术选型就用它了,后续更新实战代码</p>\n<p>临近中秋提前祝大家中秋快乐:献上程序中最高祝福礼仪：无BUG不加班！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}