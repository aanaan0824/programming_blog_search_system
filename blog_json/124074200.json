{"blogid": "124074200", "writerAge": "码龄15年", "writerBlogNum": "103", "writerCollect": "318", "writerComment": "49", "writerFan": "129", "writerGrade": "5级", "writerIntegral": "2300", "writerName": "乱世刀疤", "writerProfileAdress": "writer_image\\profile_124074200.jpg", "writerRankTotal": "17279", "writerRankWeekly": "17321", "writerThumb": "97", "writerVisitNum": "206825", "blog_read_count": "2623", "blog_time": "已于 2022-04-10 11:46:49 修改", "blog_title": "实例：用C#.NET手把手教你做微信公众号开发（1）--接入", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>今天开始打算写一个系列，帮助.NET小白一步步实现自己的微信公众号开发。在这里首先感谢一个至铁的朋友，这么多年来免费为我提供私人学习实验环境（单位虽然也有条件做这些事，但是公私要分明，个人爱好坚决不能使用任何一点公司资源，也坚决不占用任何一点上班时间），作为回报，本系列技术类文章也是通过介绍为他免费开发的一个微信公众号支撑服务而展开的，如果觉得本系列文章对您有所触动和帮助，烦请帮关注一下该公众号（本贴左侧或文章尾部位置），算是对我这个朋友的支持，也算是对我坚持写作的鼓励，当然公众号上面确实也有很多实实在在的生活优惠。</p>\n<p>正式讲解公众号开发之前先声明一点：为了更好的帮助初学者快速上手，本系列文章重在了解业务流程，没有采用复杂的框架来实现，不然光接口、继承就容易把人搞晕了，实现业务还是面向过程的思维更容易被理解，所以虽然写的过程中也用到了不少类，但基本都是单层的，没有多重继承，源代码都公开，拿去就可以用。</p>\n<p>今天讲第一篇：如何接入微信公众号。以前发过一篇帖子，不过只有代码，没有详细的关联步骤讲解，今天用图文并茂的方式来做全面细致的讲解。</p>\n<p><strong>一、准备服务器</strong><br/> 1.准备一台可以互联网接入的服务器，配置好IIS和.NET运行环境，我这里用的是win2008 server，IIS 7.0，.NET 4.5，记得要用80端口，微信公众号接口只认80端口。<br/> 2.准备一个已经备案过的域名，并指向上面的web服务器地址。</p>\n<p><strong>二、申请公众号</strong><br/> 1.申请<br/> 建议申请服务号，因为开放的接口多，侧重于线上服务，这里用的就是服务号。打开https://mp.weixin.qq.com/，点击“立即注册”进入注册页面，类型选择服务号，按提示完成公众号注册，如下图：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\f862d15a97a74da994f4afb6dfa557af.png\"/></p>\n<p></p>\n<p>2.认证<br/> 注册后进行一下微信认证，可以获取更多的服务接口，也是后续的微信支付的基本条件，登录后在下面图示位置可以进行认证，每年300元认证费，需要一周左右时间能完成，如下图：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\2ac5f2bab81e4defa714c94d09758457.png\"/></p>\n<p></p>\n<p>3.配置<br/> 准备好以上手续后，现在可以配置和获取公众号开发必须的参数了。首先是域名信息，在获取各类公众号信息时如果没有这个前提会提示没有权限。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\f21c8b449dde4eb4b146e3ca5c12ceaf.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\db259e1a5b6f475ca981dab7d8f95aec.png\"/></p>\n<p></p>\n<p>通过上图的配置和查询，我们可以获取到以下几个重要参数，在后面所有开发中都会用到：<br/><span style=\"color:#fe2c24;\"><strong>Token <br/> AppId <br/> AppSecret <br/> EncodingAESKey </strong></span>，这个如果使用明文方式来开发则用不到。</p>\n<p>.查看接口权限</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\fd0df4a9fe85481dac2e41896c0c9871.png\"/></p>\n<p></p>\n<p><br/><strong>三、接入公众号后台</strong><br/> 1.架设web服务目录<br/> 上面有两个目录是固定名字不能改变的，一个是App_Code目录，用来存放你写的所有类的源码，一个是Bin目录，用来存放你写的类的编译后的.dll文件，同一个类要么用源码，要么用编译后的.dll文件，不能重复存放，为了便于查看和修改，我这里对自己写的类没有使用.dll，都是用源码方式放在App_Code目录中。<br/> wx目录主要用于微信接口开发的各类页面和源码。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\c0cb3d9c7d854cefbc4f5ded13f7a1ed.png\"/></p>\n<p></p>\n<p>2.把必须用到的微信接口参数写入配置文件，我这里用的是一个类的静态成员变量来实现，如果将来编译了，这些关键信息就可以起到很好的保密效果。我用的数据库是sql server，因为在windows系统上，和操作系统、IIS搭配起来效率最好的就是它了，凡事都要评价效率。<br/> QinMingConfig.cs文件内容如下：</p>\n<pre><code class=\"language-cs\">using System;\n\nnamespace QinMing.Config\n{\n    /// &lt;summary&gt;\n    /// Config 的摘要说明\n    /// &lt;/summary&gt;\n    public class QinMingConfig\n    {\n        public QinMingConfig()\n        {\n            //\n            // TODO: 在此处添加构造函数逻辑\n            //\n        }\n\n        /// &lt;summary&gt;\n        /// Sql Server 数据库连接串\n        /// &lt;/summary&gt;\n        public const string DatabaseConnStr = \"Data Source=sql server source;Initial Catalog=your database name;User ID=username;Password=password\"; \n\n        /// &lt;summary&gt;\n        /// 微信公众号接入参数\n        /// &lt;/summary&gt;\n        public const string Weixin_Token = \"yourtoken\";\n        public const string Weixin_AppId = \"wx.........\";\n        public const string Weixin_AppSecret = \"e5xxxxxxxxxxxxxxxxxxx\";\n        public const string EncodingAESKey = \"J1vxxxxxxxxxxxxxxxxxxxxxxx\";\n\n        /// &lt;summary&gt;\n        /// 请求超时设置（以毫秒为单位），默认为10秒。\n        /// 说明：此处常量专为提供给方法的参数的默认值，不是方法内所有请求的默认超时时间。\n        /// &lt;/summary&gt;\n        public const int TIME_OUT = 10000;\n\n        //以后用到的参数以后补上\n\n    }\n\n}\n</code></pre>\n<p><br/> 3.现在进入最重要的一个环节，与微信公众号对接，首先继续看之前的公众号开发基本设置页面，在你的接口代码没有写好并且能正常工作之前，这个网址是配置不成功的。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\85aae689331c416d97c5d0566b741998.png\"/></p>\n<p>接口页面很简单，如下：</p>\n<p>AccessWx.aspx源码</p>\n<pre><code class=\"language-html\">&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\"  CodeFile=\"AccessWx.aspx.cs\" Inherits=\"Jjlm.AccessWx\" %&gt;</code></pre>\n<p><br/> AccessWx.aspx.cs源码</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Web;\nusing System.Web.Security;\nusing System.IO;\nusing System.Xml;\nusing System.Text;\nusing QinMing.Config;\n//using QinMing.WeixinMessageHandler;\n//using QinMing.Tools;\n\nnamespace Jjlm\n{\n\t\n\tpublic partial class AccessWx: System.Web.UI.Page\n\t{\n\t\tprotected void Page_Load(object sender, EventArgs e)\n\t\t{\n\t\t\tResponse.ContentEncoding = System.Text.Encoding.GetEncoding(\"utf-8\");\n\t\t\tstring postStr = \"\";\n\n\t\t\tif (Request.HttpMethod.ToLower() == \"get\")\n\t\t\t{\n\t\t\t    Valid();  //首次接入时会验证你的服务器是否能对接上\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tStream s = System.Web.HttpContext.Current.Request.InputStream;\n\t\t\t\tbyte[] b = new byte[s.Length];\n\t\t\t\ts.Read(b, 0, (int)s.Length);\n\t\t\t\tpostStr = Encoding.UTF8.GetString(b);\n\t\t\t\tif (!string.IsNullOrEmpty(postStr))\n\t\t\t\t{\n\t\t\t\t\tResponseMsg(postStr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// &lt;summary&gt;\n\t\t/// 返回信息结果(微信信息返回)\n\t\t/// &lt;/summary&gt;\n\t\t/// &lt;param name=\"weixinXML\"&gt;&lt;/param&gt;\n\t\tprivate void ResponseMsg(string weixinXML)\n\t\t{\n\t\t   //回复消息的部分:你的代码写在这里\n\t\t\tXmlDocument doc = new XmlDocument();\n\t\t\tdoc.LoadXml(weixinXML);\n\t\t\tXmlNodeList list = doc.GetElementsByTagName(\"xml\");\n\t\t\tXmlNode xn = list[0];\n\t\t\tstring FromUserName = xn.SelectSingleNode(\"//FromUserName\").InnerText;   //关注用户的加密后openid\n\t\t\tstring ToUserName = xn.SelectSingleNode(\"//ToUserName\").InnerText;       //公众微信号原始ID\n\t\t\tstring MsgType=xn.SelectSingleNode(\"//MsgType\").InnerText;\n\t\t\t\n\t\t\t//将微信服务器推送的信息保存到log文件中，以便跟踪分析问题\n\t\t\t//QinMingTools.WriteLog(\"公众号推送内容\", ConvertXmlToString(doc));\n\t\t\t\n\t\t\tif(MsgType == \"text\")\n\t\t\t{\n\t\t\t\t//文本消息处理部分\n\t\t\t}\n\t\t\telse if(MsgType == \"image\")\n\t\t\t{\n\t\t\t\t//图片消息处理部分\n\t\t\t}\n\t\t\telse if(MsgType == \"voice\")\n\t\t\t{\n\t\t\t\t//语音消息处理部分\n\t\t\t}\n\t\t\telse if(MsgType == \"video\")\n\t\t\t{\n\t\t\t\t//视频消息处理部分\n\t\t\t}\n\t\t\telse if(MsgType == \"shortvideo\")\n\t\t\t{\n\t\t\t\t//小视频消息处理部分\n\t\t\t}\n\t\t\telse if(MsgType == \"location\")\n\t\t\t{\n\t\t\t\t//位置消息处理部分，与事件中的位置消息不同，是指用户主动向公众号发送位置，专门篇章讲解\t\t\n\t\t\t}\n\t\t\telse if(MsgType == \"link\")\n\t\t\t{\n\t\t\t\t//链接消息处理部分\n\t\t\t}\n\t\t\telse if(MsgType == \"event\")  \n\t\t\t{\n\t\t\t\t//事件消息处理部分\n\n                string Event = xn.SelectSingleNode(\"//Event\").InnerText;\n\t\t\t\tif(Event == \"LOCATION\")\n\t\t\t\t{\n\t\t\t\t\t//位置消息处理\n\t\t\t\t}\n\t\t\t\telse if(Event == \"CLICK\")\n\t\t\t\t{\n                    //点击菜单消息处理\n\t\t\t\t}\n\t\t\t\telse if(Event == \"VIEW\")\n\t\t\t\t{\n                    //打开菜单链接时触发的动作处理\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n                    //其他类型消息处理，如关注公众号、取消关注、扫描带参数的二维码\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t \n\t\t/// &lt;summary&gt;\n        /// 将XmlDocument转化为string\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"xmlDoc\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public string ConvertXmlToString(XmlDocument xmlDoc)\n        {\n            MemoryStream stream = new MemoryStream();\n            XmlTextWriter writer = new XmlTextWriter(stream, null);\n            writer.Formatting = Formatting.Indented;\n            xmlDoc.Save(writer); \n\t        StreamReader sr = new StreamReader(stream, System.Text.Encoding.UTF8);\n            stream.Position = 0;\n            string xmlString = sr.ReadToEnd();\n            sr.Close();\n            stream.Close(); \n\t        return xmlString;\n\t\t}\n \n\t\t/// &lt;summary&gt;\n\t\t/// 验证微信签名\n\t\t/// &lt;/summary&gt;\n\t\t/// * 将token、timestamp、nonce三个参数进行字典序排序\n\t\t/// * 将三个参数字符串拼接成一个字符串进行sha1加密\n\t\t/// * 开发者获得加密后的字符串可与signature对比，标识该请求来源于微信。\n\t\t/// &lt;returns&gt;&lt;/returns&gt;\n\t\tprivate bool CheckSignature()\n\t\t{\n\t\t\tstring signature = Request.QueryString[\"signature\"].ToString();\n\t\t\tstring timestamp = Request.QueryString[\"timestamp\"].ToString();\n\t\t\tstring nonce = Request.QueryString[\"nonce\"].ToString();\n\t\t\tstring[] ArrTmp = { QinMingConfig.Weixin_Token, timestamp, nonce };\n\t\t\tArray.Sort(ArrTmp);     //字典排序\n\t\t\tstring tmpStr = string.Join(\"\", ArrTmp);\n\t\t\ttmpStr = FormsAuthentication.HashPasswordForStoringInConfigFile(tmpStr, \"SHA1\");\n\t\t\ttmpStr = tmpStr.ToLower();\n\t\t\tif (tmpStr.Equals(signature))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t/// &lt;summary&gt;\n\t\t/// 首次接入微信后台时验证\n\t\t/// &lt;/summary&gt;\n\t\tprivate void Valid()\n\t\t{\n\t\t\tstring echoStr = Request.QueryString[\"echoStr\"].ToString();\n\t\t\tif (CheckSignature())\n\t\t\t{\n\t\t\t\tif (!string.IsNullOrEmpty(echoStr))\n\t\t\t\t{\n\t\t\t\t\tResponse.Write(echoStr);\n\t\t\t\t\tResponse.End();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}</code></pre>\n<p>至此，你的服务器与微信公众号的后台就完成了对接，可以使用很多的接口功能了，你GET到了么，如果感觉有收获，请来个赞。下篇介绍文本消息处理，敬请关注。</p>\n</div>\n</div>"}