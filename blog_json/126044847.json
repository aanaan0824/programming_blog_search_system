{"blogid": "126044847", "writerAge": "码龄1年", "writerBlogNum": "137", "writerCollect": "839", "writerComment": "719", "writerFan": "746", "writerGrade": "5级", "writerIntegral": "3411", "writerName": "梦想new的出来", "writerProfileAdress": "writer_image\\profile_126044847.jpg", "writerRankTotal": "5624", "writerRankWeekly": "1721", "writerThumb": "942", "writerVisitNum": "37731", "blog_read_count": "147", "blog_time": "于 2022-08-09 13:27:29 发布", "blog_title": "【C++】多态中虚函数的底层理解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"emspemspfont_colorredfont_2\"></a>  👉<font color=\"red\">引言💎</font></h2>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/cbb6468f0f6340498374353697dbc0cd.gif#pic_center#pic_center\"/></p>\n<table><thead><tr><th></th><th><font color=\"red\">铭记于心</font></th><th></th></tr></thead><tbody><tr><td></td><td>🎉✨🎉<font color=\"red\"><strong>我唯一知道的，便是我一无所知</strong></font>🎉✨🎉</td><td></td></tr></tbody></table>\n<hr/>\n<h2><a id=\"1__8\"></a>1 <strong>多态的基本概念</strong></h2>\n<h3><a id=\"11__10\"></a>1.1 什么是多态?</h3>\n<ul><li>多态是在不同继承关系的类对象，去调用同一函数，产生了不同的行为，通常是父类调用子类的重写函数，在C++中就是 父类指针指向子类对象，此时父类指针的向下引用就可以实现多态</li><li>比如看下面的代码：</li></ul>\n<pre><code class=\"prism language-c\">class Animal\n<span class=\"token punctuation\">{<!-- --></span>\npublic<span class=\"token operator\">:</span>\n  <span class=\"token comment\">//虚函数</span>\n  virtual <span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"动物在说话\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  virtual <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"动物在吃饭\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nclass Cat <span class=\"token operator\">:</span>public Animal\n<span class=\"token punctuation\">{<!-- --></span>\npublic<span class=\"token operator\">:</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"小猫在说话\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"小猫在吃饭\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nclass Dog <span class=\"token operator\">:</span>public Animal\n<span class=\"token punctuation\">{<!-- --></span>\npublic<span class=\"token operator\">:</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"小狗在说话\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>这两个类实现集成关系，简单来说就是 Animal是父类，Cat是子类，通过父类引用调用子类函数，这就是多态（字面意思就是一个对象多个状态）,这样就 符合** 高内聚低耦合** 的设计原则，更容易 后期维护与修改</p>\n<h3><a id=\"12__57\"></a>1.2 怎么实现多态</h3>\n<p><strong>说了这么多，那么多态到底怎么实现呢？</strong></p>\n<ul><li>想必上面代码中也已经透露出了一些信息，并且十分关键。没错，就是virtual，字面意思是 虚拟的，而也的确如此，这个关键字修饰的 函数，叫做虚函数，拥有虚函数的 类，被称为 抽象类（虚类），virtual是实现多态的必要不充分条件</li><li>同时 ，子类要重写父类的虚函数，什么叫重写？就是函数类型，函数名，参数列表完全相同。</li><li>并且父类指针还要指向子类对象，正如下所示：</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">doSpeak</span><span class=\"token punctuation\">(</span>Animal <span class=\"token operator\">&amp;</span> animal<span class=\"token punctuation\">)</span> <span class=\"token comment\">//Animal &amp; animal = cat;</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  animal<span class=\"token punctuation\">.</span><span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  Cat cat<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">doSpeak</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Dog dog<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">doSpeak</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>如此方能满足实现多态的三个条件</p>\n<ul><li>注：如果没有多态，那么父类指向子类时就无法调用子类函数，也就是此时该函数地址早就绑定好了，只能是animal说话，属于静态联编；如果想调用小猫说话，这个时候函数的地址就不能早就绑定好，而是在运行阶段再去绑定函数地址，属于地址晚绑定，叫动态联编，多态的实现就是依靠动态联编。</li></ul>\n<h2><a id=\"2__85\"></a>2 虚函数的底层原理</h2>\n<ul><li><strong>那么虚函数到底是怎么工作的呢?</strong></li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  Animal <span class=\"token operator\">*</span> animal <span class=\"token operator\">=</span> new Cat<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span> __stdcall <span class=\"token operator\">*</span>FUNPOINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">FUNPOINT</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>animal <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>就是<code>animal-&gt;speak();</code></li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>这里 <code>*(int *)animal</code> 解引用到虚函数表中,先将animal类型的指针强转为<code>int *</code>，然后解引用得到int类型的值放到虚函数表中，然后偏移相应位置指向<code>speak()</code></li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4eb8863c0b1a4b2eb1be4d034aefc3e4.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d15e795a48b0470b9e84f64e000ed49f.png\"/></p>\n<ul><li>调用猫说话,因为C/C++默认调用惯例 <code> __cdecl</code>,而用下列调用时 是<code>__stdcall</code></li></ul>\n<pre><code class=\"prism language-C\">typedef void( __stdcall *FUNPOINT)(int);\n</code></pre>\n<pre><code class=\"prism language-C\">Animal * animal = new Cat;\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2c51250560734578bf144732f63c712e.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\5f5d6a1dcdcf4f01898e724faf39a566.png\"/></p>\n<blockquote>\n<p><strong>🌹写在最后💖</strong>：<br/> 路漫漫其修远兮，吾将上下而求索！伙伴们，再见！🌹🌹🌹<img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/686cabced4fc4656aff5d0e33632c590.gif#pic_center\"/></p>\n</blockquote>\n<hr/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}