{"blogid": "125519843", "writerAge": "码龄5年", "writerBlogNum": "246", "writerCollect": "552", "writerComment": "48", "writerFan": "227", "writerGrade": "6级", "writerIntegral": "4772", "writerName": "况祥彬", "writerProfileAdress": "writer_image\\profile_125519843.jpg", "writerRankTotal": "4464", "writerRankWeekly": "9010", "writerThumb": "138", "writerVisitNum": "122662", "blog_read_count": "4841", "blog_time": "已于 2022-07-09 12:21:53 修改", "blog_title": "C++——static详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"static_1\"></a><strong>什么是static?</strong></h1>\n<p>static 是C++中很常用的修饰符，它被用来控制变量的存储方式和可见性。</p>\n<h1><a id=\"vs_4\"></a><strong>静态局部变量vs局部变量</strong></h1>\n<ul><li> <p>该变量在全局数据区(静态区)分配内存（局部变量在栈区分配内存）</p> </li><li> <p>静态局部变量一般在声明处初始化，如果没有显式初始化，会被程序自动初始化为0（局部变量不会被初始化）</p> </li><li> <p><strong>最大的优点：</strong><br/> 可以和全局变量一样只初始化一次，可以将值保存至下一次函数调用时，而访问范围限定在函数内，不被其他地方访问到（局部变量在栈区，在函数结束后立即释放内存，所以局部变量在每次函数调用时都会被初始化）</p> </li></ul>\n<h1><a id=\"_12\"></a><strong>静态全局变量：</strong></h1>\n<p>使得该变量在静态存储区分配内存;在声明该变量的整个文件中都是可见的，而在文件外是不可见的——<strong>文件隔离，避免命名冲突</strong></p>\n<h1><a id=\"_15\"></a><strong>静态函数：</strong></h1>\n<p>在声明该函数的整个文件中都是可见的，而在文件外是不可见的，从而可以在多人协作时避免同名的函数冲突;</p>\n<h1><a id=\"_18\"></a><strong>静态成员变量：</strong></h1>\n<p>所有的对象都只维持一份拷贝，可以实现不同对象间的数据共享;不需要实例化对象即可访问;不能在类内部初始化，一般在类外部初始化，并且初始化时不加static;</p>\n<p><strong>静态成员函数 VS 普通成员函数</strong><br/> 普通成员函数有 this 指针，可以访问类中的任意成员；而静态成员函数没有 this 指针，不知道指向哪个对象，所以无法访问对象的成员变量,只能访问静态成员（包括静态成员变量和静态成员函数）<br/> 那非要让静态函数去访问非静态成员变量呢，怎么做？——在静态函数的形参表里手动加上对象的地址；</p>\n<h1><a id=\"_25\"></a>静态全局变量、静态局部变量、全局变量、局部变量的特点，以及他们的应用场景</h1>\n<p>各自存储的位置：</p>\n<ul><li> <p>全局变量，存储在静态存储区</p> </li><li> <p>局部变量, 存储在栈区。</p> </li><li> <p>静态变量，存储在静态存储区</p> </li></ul>\n<p>各自初始化的值：</p>\n<ul><li> <p>局部变量需要手动初始化，否则随机分配未知值</p> </li><li> <p>全局变量和静态变量，都是初始化为0的</p> </li><li> <p>如果是类变量，会调用默认构造函数初始化。</p> </li></ul>\n<p>从作用域来考虑：</p>\n<p>我们知道，C++里作用域可分为6种：全局，局部，类，语句，命名空间和文件作用域</p>\n<ul><li> <p>全局变量： 全局作用域，可以通过extern(引入C的那个)作用于其他非定义的源文件；都会一直存在，直到程序结束。</p> </li><li> <p>静态全局变量 ： 全局作用域+文件作用域，所以无法在其他文件中使用。</p> </li><li> <p>局部变量： 局部作用域，它从进入作用域遇到该变量的时候开始出现，在离开的时候销毁。</p> </li><li> <p>静态局部变量 ： 局部作用域，只被初始化一次，直到程 序结束。</p> </li></ul>\n<p>各自的应用场景：</p>\n<ul><li> <p>局部变量就是我们经常用的，进入函数，逐个构造，最后统一销毁。</p> </li><li> <p>全局变量主要是用来给不同的文件之间进行通信。</p> </li><li> <p>静态变量：只在本文件中使用，局部静态变量在函数内起作用，可以作为一个计数器。</p> </li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}