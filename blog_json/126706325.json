{"blogid": "126706325", "writerAge": "码龄5年", "writerBlogNum": "71", "writerCollect": "35", "writerComment": "32", "writerFan": "34", "writerGrade": "3级", "writerIntegral": "786", "writerName": "周周写不完的代码", "writerProfileAdress": "writer_image\\profile_126706325.jpg", "writerRankTotal": "26525", "writerRankWeekly": "17023", "writerThumb": "29", "writerVisitNum": "26197", "blog_read_count": "137", "blog_time": "已于 2022-09-05 15:32:20 修改", "blog_title": "renren分离版api开发爬坑", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_1\"></a>前言</h2>\n<p>最近做的的一个系统，被内部人员恶意调用api攻击了几次，也算有了些经验（被甲方领导骂了很多次，然后加班了好几个晚上），这块之前一直是空白，出了线上事故后才对接口安全这块有了更多的认识</p>\n<h2><a id=\"_5\"></a>原有实现思路</h2>\n<h3><a id=\"_7\"></a>过滤器路由配置</h3>\n<p>我们来简单看下 人人 前后端分离版对 第三方接口开发的实现</p>\n<p>整个接口根据 /admin 和 /app 分为两个部分，/admin 这块走的是 shiro 的权限判断，对于第三方接口，我们不放在 shiro 中进行处理</p>\n<p><img alt=\"image-20220905141044856\" src=\"image\\71a62d63810e3d7bd0e3a0210004e64c.png\"/></p>\n<p>shiro 过滤器这块是写在这里的，可以印证这一点，对 app 前端请求，给的 anno</p>\n<h3><a id=\"app__17\"></a>app 接口层以及注解</h3>\n<p><img alt=\"image-20220905141304437\" src=\"image\\77b8471fdafa035c5a302677c407f2d7.png\"/></p>\n<p>我们已开源版本中提供的 AppTestController 为例简单看看</p>\n<p>一共涉及到两个注解 @Login 和 @LoginUser ，理解了这两个注解的思路，这块基本上就没多大问题了，下面我们来分别讲解</p>\n<h3><a id=\"Login_25\"></a>@Login</h3>\n<p>提到这个注解，我们需要看 AuthorizationInterceptor</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorizationInterceptor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HandlerInterceptorAdapter</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JwtUtils</span> jwtUtils<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USER_KEY <span class=\"token operator\">=</span> <span class=\"token string\">\"userId\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Login</span> annotation<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handler <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HandlerMethod</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            annotation <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HandlerMethod</span><span class=\"token punctuation\">)</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethodAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Login</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>annotation <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//获取用户凭证</span>\n        <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span>jwtUtils<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token: \"</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            token <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span>jwtUtils<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//凭证为空</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RRException</span><span class=\"token punctuation\">(</span>jwtUtils<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"不能为空\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>UNAUTHORIZED<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Claims</span> claims <span class=\"token operator\">=</span> jwtUtils<span class=\"token punctuation\">.</span><span class=\"token function\">getClaimByToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>claims <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> jwtUtils<span class=\"token punctuation\">.</span><span class=\"token function\">isTokenExpired</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">.</span><span class=\"token function\">getExpiration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RRException</span><span class=\"token punctuation\">(</span>jwtUtils<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"失效，请重新登录\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>UNAUTHORIZED<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//设置userId到request里，后续根据userId，获取用户信息</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>USER_KEY<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">.</span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>重写的HandlerInterceptorAdapter实现拦截器，重写preHandle方法，</p>\n<ol><li>扫描是非带有 @Login 注解，过滤条件</li><li>拿到 header 中的 token ,没有则抛出异常</li><li>通过 jwtUtils 校验 token 是否有效，粘在了下面，这块有风险，后面详细说，jwt 的思路这块介绍文章很多，jwt 就是无状态权限的思路，还有一种有状态存储的实现，存储介质一般可选 redis 或者 数据库，可以参考 ruoyi</li></ol>\n<p><a href=\"https://www.iocoder.cn/Spring-Boot/Spring-Security/?self\">芋道 Spring Boot 安全框架 Spring Security 入门 | 芋道源码 —— 纯源码解析博客 (iocoder.cn)</a> 芋大佬的文章，这篇文章我看过调试过无数次，太经典，权限这块无巧，多看多调试，尚硅谷的 SpingSecurity 也可以，敲过一遍，还讲到了 微服务场景下的实现，Gateway下做的，后面有时间也写篇博客记录下，应该是把谷粒学院的这块单独拿出来了，谷粒商城实现就不太一样了，基于 SpringSession 做的，有空也写写</p>\n<ol start=\"4\"><li>解析出来的 claims 对象，拿到里面储存的 userId 信息，放到 request 的 Attribute，这块 SpringMvc 练过，Controller 中可以用 @RequestAttribute(“userId”) Integer userId 取到，这块实现很方便也是我为什么采用这块轻量级实现的原因</li></ol>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Claims</span> <span class=\"token function\">getClaimByToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Jwts</span><span class=\"token punctuation\">.</span><span class=\"token function\">parser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">setSigningKey</span><span class=\"token punctuation\">(</span>secret<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">parseClaimsJws</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"validate is token error \"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"LoginUser_99\"></a>@LoginUser</h3>\n<p>这个注解的前提是需要先加上 @Login ，相关实现类是 LoginUserHandlerMethodArgumentResolver</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * 有@LoginUser注解的方法参数，注入当前登录用户\n *\n * @author Mark sunlightcs@gmail.com\n */</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginUserHandlerMethodArgumentResolver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerMethodArgumentResolver</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">GarageService</span> garageService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supportsParameter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> parameter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GarageEntity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">hasParameterAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginUser</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">resolveArgument</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> parameter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ModelAndViewContainer</span> container<span class=\"token punctuation\">,</span>\n                                  <span class=\"token class-name\">NativeWebRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WebDataBinderFactory</span> factory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//获取用户ID</span>\n        <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizationInterceptor</span><span class=\"token punctuation\">.</span>USER_KEY<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestAttributes</span><span class=\"token punctuation\">.</span>SCOPE_REQUEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>object <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//获取用户信息</span>\n        <span class=\"token class-name\">GarageEntity</span> user <span class=\"token operator\">=</span> garageService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">)</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这块其实是需要自己去扩展的，注入第三方用户类的Service ，根据@Login注解注入的 userId，拿到实体类，个人很少用，就不赘述了</p>\n<h2><a id=\"_139\"></a>存在的问题（为了整理方便我们按照时间线来列，主要突出时间纬度的还原，后面总结时在提出整体性的方案）</h2>\n<h3><a id=\"1__api__token__141\"></a>1. 用户使用 api 工具，使用自己的 token ，查看，修改其他人的单据</h3>\n<p>问题描述：我们的详情查询api接口设置， xxx?id=1 来做的，查询参数是 单据主键，单据主键使用默认自增，查询和操作时没有校验用户和单据的权限匹配关系，列表查询我们做了校验，但是详情查询这块没有做处理</p>\n<p>解决：详情查询接口，操作接口添加校验，校验单据里的userId与登录用户token中取出来的 id 是否匹配</p>\n<h3><a id=\"2_147\"></a>2.查询接口未做过滤，敏感数据部分泄露</h3>\n<p>问题描述：一个 下拉框的选择接口，没有do层与vo层没做过滤，返回了某些敏感数据</p>\n<p>解决：查询接口创建单独 vo，做 do 与 vo 转换，只返回需要返回的数据</p>\n<h3><a id=\"3__153\"></a>3. 某个只能精确查询的接口，在用户模拟输入空字符串时，会返回全量数据</h3>\n<p>问题描述：mapper 层的xml拼接如下</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>where</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a.name != null and a.name != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        and c.name = #{a.name}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>where</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>我们正常用代码生成器生成的代码都是这个样子的，但其实这里根据需求理解我们不应该允许传入空字符串以及null（当然这块相等绝不可以用 like）</p>\n<p>解决：这里有多种方案</p>\n<ol><li>查询参数参数校验 @NotBlank</li><li>查询前 使用 StringUtils.isNotEmpty 手动判断</li><li>mapper 中去掉为空的 if 动态 sql</li></ol>\n<h3><a id=\"4api_173\"></a>4.用户使用api工具，修改结算总金额，以及操作已提交的历史单据</h3>\n<p>问题描述：这块同样是用户使用 api 工具，篡改提交的 json，并且由于我们的单据没有做状态判断，用户使用修改接口修改已经提交过的单据（篡改他人单据这块已经处理）</p>\n<p>解决：根据问题描述分为三步</p>\n<ol><li> <p>添加单据修改时的状态校验</p> </li><li> <p>添加加签验签（根本上解决 使用 api 工具修改单据问题，原则上敏感接口都需要使用这种方式）</p> <p>(目前的实现可参考上一篇博客，<a href=\"https://blog.csdn.net/qq_39007838/article/details/126653120\">若依升级小记05-加签验签加强安全防护_周周写不完的代码的博客-CSDN博客</a> 这块后面也有优化，可参考文章 https://mp.weixin.qq.com/s/B9wL2xGvN5lI0dc-OEy_Jg)</p> </li><li> <p>总和计算，以及冗余数据写入，金额处理都应该放在后端处理，前端只返回对应id（id是否为正常可操作性的id后端也要校验）</p> </li></ol>\n<h3><a id=\"5_Token__187\"></a>5. Token 过期时间设置的太久，导致禁用用户后，凭证仍然有效</h3>\n<p>问题描述： 前期这块估计不足，这块 renren 实现也有 bug，我们把 token 过期时间设置成了 两周，导致在临时禁用用户后用户仍然可访问系统</p>\n<p>解决：也是分为几步</p>\n<p>简单的修改用户的账号只能防止用户再次登录（生成新的 token），但是由于 jwt 的秘钥没有修改，所以拦截器仍然会放行，并且我们只修改了账号，用户的 userId 仍然可以查询到，相当于用户仍可以正常操作自己的单据。</p>\n<ol><li>受制于jwt方案，我们如果需要作废 token ，只有修改配置文件中的 jwt 秘钥，才能做到作废</li><li>缩短 token 有效时间，目前设置成两个小时</li><li>使用有状态存储替代完全无状态的jwt</li></ol>\n<h2><a id=\"_199\"></a>后续展望</h2>\n<p>目前先写到这里，后面再补充</p>\n<p>参考 https://mp.weixin.qq.com/s/B9wL2xGvN5lI0dc-OEy_Jg)</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}