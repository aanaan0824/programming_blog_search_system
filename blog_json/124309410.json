{"blogid": "124309410", "writerAge": "码龄8年", "writerBlogNum": "441", "writerCollect": "5349", "writerComment": "418", "writerFan": "2809", "writerGrade": "7级", "writerIntegral": "13091", "writerName": "仙魁XAN", "writerProfileAdress": "writer_image\\profile_124309410.jpg", "writerRankTotal": "1027", "writerRankWeekly": "2884", "writerThumb": "1266", "writerVisitNum": "1281774", "blog_read_count": "3312", "blog_time": "于 2022-04-20 23:14:32 发布", "blog_title": "Three 之 three.js （webgl）模型的删除/场景的清空/内存的释放 的简单整理", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1 id=\"Three%20%E4%B9%8B%20three.js%20%EF%BC%88webgl%EF%BC%89%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%88%A0%E9%99%A4%2F%E5%9C%BA%E6%99%AF%E7%9A%84%E6%B8%85%E7%A9%BA%2F%E5%86%85%E5%AD%98%E7%9A%84%E9%87%8A%E6%94%BE%20%E7%9A%84%E7%AE%80%E5%8D%95%E6%95%B4%E7%90%86\">Three 之 three.js （webgl）模型的删除/场景的清空/内存的释放 的简单整理</h1>\n<p></p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"Three%20%E4%B9%8B%20three.js%20%EF%BC%88webgl%EF%BC%89%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%88%A0%E9%99%A4%2F%E5%9C%BA%E6%99%AF%E7%9A%84%E6%B8%85%E7%A9%BA%2F%E5%86%85%E5%AD%98%E7%9A%84%E9%87%8A%E6%94%BE%20%E7%9A%84%E7%AE%80%E5%8D%95%E6%95%B4%E7%90%86-toc\" style=\"margin-left:0px;\"><a href=\"#Three%20%E4%B9%8B%20three.js%20%EF%BC%88webgl%EF%BC%89%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%88%A0%E9%99%A4%2F%E5%9C%BA%E6%99%AF%E7%9A%84%E6%B8%85%E7%A9%BA%2F%E5%86%85%E5%AD%98%E7%9A%84%E9%87%8A%E6%94%BE%20%E7%9A%84%E7%AE%80%E5%8D%95%E6%95%B4%E7%90%86\">Three 之 three.js （webgl）模型的删除/场景的清空/内存的释放 的简单整理</a></p>\n<p id=\"%E4%B8%80%E3%80%81%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%80%E3%80%81%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D\">一、简单介绍</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BA%8C%E3%80%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">二、实现原理</a></p>\n<p id=\"%E4%B8%89%E3%80%81%E5%9C%BA%E6%99%AF%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B%20group%20(mesh)-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%89%E3%80%81%E5%9C%BA%E6%99%AF%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B%20group%20%28mesh%29\">三、场景中的模型 group (mesh)</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E6%B8%85%E7%A9%BA%20scene%20%E5%9C%BA%E6%99%AF%EF%BC%8C%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%9B%9B%E3%80%81%E6%B8%85%E7%A9%BA%20scene%20%E5%9C%BA%E6%99%AF%EF%BC%8C%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98\">四、清空 scene 场景，释放内存</a></p>\n<p id=\"%E4%BA%94%E3%80%81%E5%8F%82%E8%80%83%E8%A1%A5%E5%85%85%EF%BC%9AThree.js%20%E5%86%85%E5%AD%98%E9%87%8A%E6%94%BE%E9%97%AE%E9%A2%98%EF%BC%88%E5%A6%82%E6%9E%9C%E4%B8%8D%E6%AD%A3%E7%A1%AE%E5%A4%84%E7%90%86%EF%BC%8C%E5%8F%AF%E8%83%BD%E5%B9%B6%E6%9C%AA%E9%87%8A%E6%94%BE%EF%BC%8C%E8%BF%98%E4%BC%9A%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BA%94%E3%80%81%E5%8F%82%E8%80%83%E8%A1%A5%E5%85%85%EF%BC%9AThree.js%20%E5%86%85%E5%AD%98%E9%87%8A%E6%94%BE%E9%97%AE%E9%A2%98%EF%BC%88%E5%A6%82%E6%9E%9C%E4%B8%8D%E6%AD%A3%E7%A1%AE%E5%A4%84%E7%90%86%EF%BC%8C%E5%8F%AF%E8%83%BD%E5%B9%B6%E6%9C%AA%E9%87%8A%E6%94%BE%EF%BC%8C%E8%BF%98%E4%BC%9A%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%EF%BC%89\">五、参考补充：Three.js 内存释放问题（如果不正确处理，可能并未释放，还会占用内存）</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h2 id=\"%E4%B8%80%E3%80%81%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D\">一、简单介绍</h2>\n<p>Three js 开发的一些知识整理，方便后期遇到类似的问题，能够及时查阅使用。</p>\n<p>本节介绍， three.js （webgl）模型的删除/场景的清空/内存的释放 的简单整理，供大家一个优化思考的方向，如果有不足之处，欢迎指出，或者你有更好的方法，欢迎留言。</p>\n<blockquote>\n<p>通过Threejs开发Web3D应用的时候，可能需要删除场景中的模型对象，如果想从一个场景<code>Scene</code>或组对象<code>Group</code>删除一个三维模型对象，不仅仅只是<code>.remove()</code>，记得必要时还要<code>·dispose()</code>。</p>\n<p>在开发3D场景时，若遇到需要动态添加删改模型、场景，页面切换重渲染时，为避免内存叠加占用，需要手动清除场景所占用的内存，避免溢出与资源浪费。</p>\n</blockquote>\n<p></p>\n<h2 id=\"%E4%BA%8C%E3%80%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">二、实现原理</h2>\n<p>1、一般的模型记住，要对 geometry 和 material 进行 dispose()，在对 模型 mesh 进行 remove()</p>\n<p>2、清空 scene 场景，释放内存，关键以下</p>\n<ul><li>使用 dispose() 清除所有网格模型几何体的顶点缓冲区占用内存</li><li>使用 object.clear() 销毁模型对象，清除页面内存</li><li>暂停 requestAnimationFrame() 方法，避免无意义运行</li><li>清空 canvas画布，置空dom与相关元素</li></ul>\n<p></p>\n<h2 id=\"%E4%B8%89%E3%80%81%E5%9C%BA%E6%99%AF%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B%20group%20(mesh)\">三、场景中的模型 group (mesh)</h2>\n<p>1、删除场景对象中<code>Scene</code>一个子对象<code>Group</code>，并释放组对象<code>Group</code>中所有网格模型几何体的顶点缓冲区占用内存</p>\n<pre><code class=\"language-javascript\">deleteObject(group) {\n    // 递归遍历组对象group释放所有后代网格模型绑定几何体占用内存\n    group.traverse(function(obj) {\n        if (obj.type === 'Mesh') {\n        obj.geometry.dispose();\n        obj.material.dispose();\n      }\n    })\n\n    // 删除场景对象scene的子对象group\n    scene.remove(group);\n}</code></pre>\n<p>2、另一种方法，清除Group</p>\n<pre><code class=\"language-javascript\"> clearGroup(group) {\n    // 释放 几何体 和 材质\n    const clearCache = (item) =&gt; {\n      item.geometry.dispose();\n      item.material.dispose();\n    };\n    \n    // 递归释放物体下的 几何体 和 材质\n    const removeObj = (obj) =&gt; {\n      let arr = obj.children.filter((x) =&gt; x);\n      arr.forEach((item) =&gt; {\n        if (item.children.length) {\n          removeObj(item);\n        } else {\n          clearCache(item);\n          item.clear();\n        }\n      });\n      obj.clear();\n      arr = null;\n    };\n\n    // 移除 group\n    removeObj(group);\n  }\n\n记得：\n1）如果是场景中\nscene.remove(group); // 删除组\n\n2）如果是 组中\ngroups.remove(group);// 删除模型\n</code></pre>\n<p></p>\n<h2 id=\"%E5%9B%9B%E3%80%81%E6%B8%85%E7%A9%BA%20scene%20%E5%9C%BA%E6%99%AF%EF%BC%8C%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98\">四、清空 scene 场景，释放内存</h2>\n<pre><code class=\"language-javascript\"> // 清空场景，包括 scene 场景下的动画，子物体，renderer,camera,control，以及自己使用过的变量置空处理 等\n clearScene() {\n\n    cancelAnimationFrame(this.animationId);\n\n    this.scene.traverse((child) =&gt; {\n      if (child.material) {\n        child.material.dispose();\n      }\n      if (child.geometry) {\n        child.geometry.dispose();\n      }\n      child = null;\n    });\n\n    // 场景中的参数释放清理或者置空等\n    this.sceneDomElement.innerHTML = '';\n    this.renderer.forceContextLoss();\n    this.renderer.dispose();\n    this.scene.clear();\n    this.flows = [];\n    this.scene = null;\n    this.camera = null;\n    this.controls = null;\n    this.renderer.domElement = null;\n    this.renderer = null;\n    this.sceneDomElement = null;\n    console.log('clearScene');\n  }\n</code></pre>\n<p></p>\n<p></p>\n<h2 id=\"%E4%BA%94%E3%80%81%E5%8F%82%E8%80%83%E8%A1%A5%E5%85%85%EF%BC%9AThree.js%20%E5%86%85%E5%AD%98%E9%87%8A%E6%94%BE%E9%97%AE%E9%A2%98%EF%BC%88%E5%A6%82%E6%9E%9C%E4%B8%8D%E6%AD%A3%E7%A1%AE%E5%A4%84%E7%90%86%EF%BC%8C%E5%8F%AF%E8%83%BD%E5%B9%B6%E6%9C%AA%E9%87%8A%E6%94%BE%EF%BC%8C%E8%BF%98%E4%BC%9A%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%EF%BC%89\">五、参考补充：Three.js 内存释放问题（如果不正确处理，可能并未释放，还会占用内存）</h2>\n<p>参考博文：<a href=\"https://blog.csdn.net/jiaweimin123/article/details/115325191?spm=1001.2101.3001.6650.4&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4.pc_relevant_default&amp;utm_relevant_index=9\" title=\"Three.js 内存释放问题\">Three.js 内存释放问题</a></p>\n<p>1、常规方法不能彻底清除掉scene场景内的一些geometry、texture等，而且就算页面离开也不会自动释放内存。打开任务管理器，可能看到CPU一直被占用，切换页面时越来越高。</p>\n<pre><code class=\"language-javascript\">//注意： 这里释放场景，并未处理必要的scene子物体的 geometry 、material 等\nbeforeDestroy() {\n\ttry {\n\t\tscene.clear();\n\t\trenderer.dispose();\n\t\trenderer.forceContextLoss();\n\t\trenderer.content = null;\n\t\tcancelAnimationFrame(animationID) // 去除animationFrame\n\t\tlet gl = renderer.domElement.getContext(\"webgl\");\n\t\tgl &amp;&amp; gl.getExtension(\"WEBGL_lose_context\").loseContext();\n\t}catch (e) {\n\t\tconsole.log(e)\n\t}\n}\n</code></pre>\n<p>2、这边封装了一个track方法，来管理释放场景中的 mesh、geometry、texture、object3D、外部加载的obj模型、gltf模型等 的释放</p>\n<p>1）TrackResource 方法：</p>\n<pre><code class=\"language-javascript\">import * as THREE from 'three/build/three.module'\nexport default class ResourceTracker {\n   constructor() {\n   \tthis.resources = new Set();\n   }\n   track(resource) {\n   \tif (!resource) {\n   \t\treturn resource;\n   \t}\n\n   \t// handle children and when material is an array of materials or\n   \t// uniform is array of textures\n   \tif (Array.isArray(resource)) {\n   \t\tresource.forEach(resource =&gt; this.track(resource));\n   \t\treturn resource;\n   \t}\n\n   \tif (resource.dispose || resource instanceof THREE.Object3D) {\n   \t\tthis.resources.add(resource);\n   \t}\n   \tif (resource instanceof THREE.Object3D) {\n   \t\tthis.track(resource.geometry);\n   \t\tthis.track(resource.material);\n   \t\tthis.track(resource.children);\n   \t} else if (resource instanceof THREE.Material) {\n   \t\t// We have to check if there are any textures on the material\n   \t\tfor (const value of Object.values(resource)) {\n   \t\t\tif (value instanceof THREE.Texture) {\n   \t\t\t\tthis.track(value);\n   \t\t\t}\n   \t\t}\n   \t\t// We also have to check if any uniforms reference textures or arrays of textures\n   \t\tif (resource.uniforms) {\n   \t\t\tfor (const value of Object.values(resource.uniforms)) {\n   \t\t\t\tif (value) {\n   \t\t\t\t\tconst uniformValue = value.value;\n   \t\t\t\t\tif (uniformValue instanceof THREE.Texture ||\n   \t\t\t\t\t\tArray.isArray(uniformValue)) {\n   \t\t\t\t\t\tthis.track(uniformValue);\n   \t\t\t\t\t}\n   \t\t\t\t}\n   \t\t\t}\n   \t\t}\n   \t}\n   \treturn resource;\n   }\n   untrack(resource) {\n   \tthis.resources.delete(resource);\n   }\n   dispose() {\n   \tfor (const resource of this.resources) {\n   \t\tif (resource instanceof THREE.Object3D) {\n   \t\t\tif (resource.parent) {\n   \t\t\t\tresource.parent.remove(resource);\n   \t\t\t}\n   \t\t}\n   \t\tif (resource.dispose) {\n   \t\t\tresource.dispose();\n   \t\t}\n   \t}\n   \tthis.resources.clear();\n   }\n}\n\n</code></pre>\n<p>2）引入track，初始化</p>\n<pre><code class=\"language-javascript\">\timport ResourceTracker from \"../../../common/3D/dispose\";\n\t// 在外层定义resMgr和track\n\tlet resMgr = new ResourceTracker();\n\tconst track = resMgr.track.bind(resMgr);\n</code></pre>\n<p>3）将所有的mesh、geometry、texture、object3D、外部加载的obj模型、gltf模型等等需要add to scene的物体，全部调用一下track方法</p>\n<pre><code class=\"language-javascript\">let xxx = track(new Three.Vector3());\nobj.geometry.computeBoundingBox();\nobj.geometry.boundingBox.getCenter(center);\nlet wrapper = track(new Three.Object3D());\nwrapper.position.set(center.x,center.y,center.z);\nobj.position.set(-center.x,-center.y,-center.z);\nwrapper.add(obj);\nscene.add(wrapper);\nreturn warpper;</code></pre>\n<p></p>\n<p>4）track到的3D物体内存释放</p>\n<pre><code class=\"language-javascript\">beforeDestroy() {\n\ttry {\n\t\tscene.clear();\n\t\tresMgr &amp;&amp; resMgr.dispose()\n\t\trenderer.dispose();\n\t\trenderer.forceContextLoss();\n\t\trenderer.content = null;\n\t\tcancelAnimationFrame(animationID)\n\t\tlet gl = renderer.domElement.getContext(\"webgl\");\n\t\tgl &amp;&amp; gl.getExtension(\"WEBGL_lose_context\").loseContext();\n\t\tconsole.log(renderer.info)   //查看memery字段即可\n\t}catch (e) {\n\t\tconsole.log(e)\n\t}\n}\n</code></pre>\n</div>\n</div>"}