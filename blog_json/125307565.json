{"blogid": "125307565", "writerAge": "码龄4年", "writerBlogNum": "473", "writerCollect": "6881", "writerComment": "11736", "writerFan": "24966", "writerGrade": "7级", "writerIntegral": "23733", "writerName": "不渴望力量的哈士奇", "writerProfileAdress": "writer_image\\profile_125307565.jpg", "writerRankTotal": "307", "writerRankWeekly": "33", "writerThumb": "7931", "writerVisitNum": "1020250", "blog_read_count": "4426", "blog_time": "已于 2022-07-09 10:55:35 修改", "blog_title": "〖Python WEB 自动化测试实战篇⑮〗 实战 - 自动化测试的持续集成", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<table><thead><tr><th align=\"center\"><font color=\"red\">万叶集</font></th></tr></thead><tbody><tr><td align=\"center\"><font color=\"red\">🎉 隐约雷鸣，阴霾天空。 🎉</font></td></tr><tr><td align=\"center\"><font color=\"red\">🎉 但盼风雨来，能留你在此。 🎉</font></td></tr></tbody></table>\n<p><a href=\"https://bbs.csdn.net/topics/606826583\"><img src=\"image\\baf2832b240e45e38a8b4c116f6c94e7.png\"/></a></p>\n<hr/>\n<blockquote>\n<p><strong>前言</strong>：<br/> ✌ 作者简介：<a href=\"https://blog.csdn.net/weixin_42250835?type=blog\">渴望力量的哈士奇</a> ✌，大家可以叫我 🐶哈士奇🐶 ，一位致力于 <font color=\"red\">TFS</font> 赋能的博主 ✌<br/> 🏆 <font color=\"red\" size=\"3\">CSDN博客专家认证、新星计划第三季全栈赛道 top_1 、华为云享专家、阿里云专家博主 🏆 </font><br/> 📫 如果文章知识点有错误的地方，请指正！和大家一起学习，一起进步👀<br/> 💬 人生格言：优于别人,并不高贵,真正的高贵应该是优于过去的自己。💬<br/> <font color=\"red\" size=\"3\">🔥 如果感觉博主的文章还不错的话，还请👍关注、点赞、收藏三连支持👍一下博主哦</font></p>\n<hr/>\n<table><tbody><tr align=\"center\"><th>专栏系列（点击解锁）</th><th>学习路线指引</th><th>知识定位</th></tr><tr><td align=\"center\" rowspan=\"10\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11631906.html\"> <font color=\"red\" size=\"4.5\">🔥Python全栈白皮书🔥</font> </a> </td><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11631913.html\"> <font color=\"#ff6984\" size=\"3\"> 零基础入门篇 </font> </a> </td><td>以浅显易懂的方式轻松入门，让你彻底爱上Python的魅力。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11631928.html\"> <font color=\"#ff6984\" size=\"3\"> 语法进阶篇 </font> </a> </td><td>主要围绕多线程编程、正则表达式学习、含贴近实战的项目练习 。 </td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11798104.html\"> <font color=\"#ff6984\" size=\"3\"> 自动化办公篇 </font> </a> </td><td>实现日常办公软件的自动化操作，节省时间、提高办公效率。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11834532.html\"> <font color=\"#ff6984\" size=\"3\"> 自动化测试实战篇 </font> </a> </td><td>从实战的角度出发，先人一步，快速转型测试开发工程师。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11840815.html\"> <font color=\"#ff6984\" size=\"3\"> 数据库开发实战篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11840958.html\"> <font color=\"#ff6984\" size=\"3\"> 爬虫入门与实战</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841010.html\"> <font color=\"#ff6984\" size=\"3\">数据分析篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841028.html\"> <font color=\"#ff6984\" size=\"3\">前端入门+flask 全栈篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841035.html\"> <font color=\"#ff6984\" size=\"3\">django+vue全栈篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841157.html\"> <font color=\"#ff6984\" size=\"3\">拓展-人工智能入门</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\" rowspan=\"6\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11123904.html\"> <font color=\"red\" size=\"4.5\">网络安全之路</font> </a> </td><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11170008.html\"> <font color=\"#ff6984\" size=\"3\"> 踩坑篇 </font> </a> </td><td>记录学习及演练过程中遇到的坑，便于后来居上者</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11123907.html\"> <font color=\"#ff6984\" size=\"3\"> 网安知识扫盲篇 </font> </a> </td><td>三天打鱼，不深入了解原理，只会让你成为脚本小子。 </td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11366695.html\"> <font color=\"#ff6984\" size=\"3\"> vulhub靶场漏洞复现 </font> </a> </td><td>让漏洞复现变得简单，让安全研究者更加专注于漏洞原理本身。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11324653.html\"> <font color=\"#ff6984\" size=\"3\"> shell编程篇 </font> </a> </td><td>不涉及linux基础，最终案例会偏向于安全加固方向。 <font color=\"red\">[待完结]</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11134620.html\"> <font color=\"#ff6984\" size=\"3\"> WEB漏洞攻防篇</font> </a> </td><td><font color=\"red\">2021年9月3日停止更新，转战先知社区等安全社区及小密圈</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_10675569.html\"> <font color=\"#ff6984\" size=\"3\"> 渗透工具使用集锦</font> </a> </td><td><font color=\"red\">2021年9月3日停止更新，转战先知社区等安全社区及小密圈</font></td></tr><tr><td align=\"center\" rowspan=\"6\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11366983.html\"> <font color=\"red\" size=\"4.5\">点点点工程师</font> </a> </td><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11563688.html\"> <font color=\"#ff6984\" size=\"3\"> 测试神器 - Charles </font> </a> </td><td>软件测试数据包抓包分析神器</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11393389.html\"> <font color=\"#ff6984\" size=\"3\"> 测试神器 - Fiddler </font> </a> </td><td>一文学会 fiddle ，学不会倒立吃翔，<font color=\"red\">稀得！</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11393395.html\"> <font color=\"#ff6984\" size=\"3\"> 测试神器 - Jmeter </font> </a> </td><td>不仅是性能测试神器，更可用于搭建轻量级接口自动化测试框架。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11462996.html\"> <font color=\"#ff6984\" size=\"3\"> RobotFrameWork</font> </a> </td><td><font color=\"blue\">Python实现的自动化测试利器，该篇章仅介绍UI自动化部分。</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11411882.html\"> <font color=\"#ff6984\" size=\"3\"> Java实现UI自动化</font> </a> </td><td><font color=\"blue\">文档写于2016年，Java实现的UI自动化，仍有借鉴意义。</font></td></tr><tr><td align=\"center\"> <a href=\"#\"> <font color=\"#ff6984\" size=\"3\"> MonkeyRunner</font> </a> </td><td><font color=\"blue\">该工具目前的应用场景已不多，文档已删，为了排版好看才留着。</font></td></tr></tbody></table>\n</blockquote>\n<hr/>\n<div align=\"center\">\n<img src=\"https://img-blog.csdnimg.cn/1c11651055dc45f58606951689560969.gif#pic_center\" width=\"1000\"/>\n</div>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#__243\">🐳 持续集成思想</a></li><li><a href=\"#_Jenkins__296\">🐳 Jenkins 介绍</a></li><li><a href=\"#__Jenkins__331\">🐳 利用 Jenkins 配置部署自动化测试的集成环境</a></li><li><ul><li><a href=\"#___build_periodically_405\">🐬 定时构建任务 - build periodically</a></li><li><a href=\"#_____build_after_other_projects_are_built_480\">🐬 持续集成（其他工程构建后触发 ） - build after other projects are built</a></li><li><a href=\"#__498\">🐬 构建环境</a></li><li><a href=\"#__520\">🐬 构建</a></li></ul>\n</li><li><a href=\"#__Jenkins__596\">🐳 如何让 Jenkins 拥有一个属于自己的报告</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<p>今天要和大家来聊聊关于自动化测试的持续集成，通过前文的学习，我们的自动化测试框架、测试的思想已经融入到了整体的代码编写过程中了。接下里的下一步就是如何让自动化测试能够像开发一样、敏捷思想一样，能够持续集成的跑起来。可能大家对持续集成还不是太了解，那就先简单的了解一下持续集成的思想吧。</p>\n<h2><a id=\"__243\"></a>🐳 持续集成思想</h2>\n<p>现如今的互联网软件的开发与发布，已经形成了一套标准流程，最重要的组成部分就是持续集成。（简称 <code>CI</code> ，其实就是 <code>Continuous integration</code>）</p>\n<p>见下图：（这个图的描述的就是持续集成在不断的开发、发布、测试… 这样的轮回的一个过程 ，快速的进行迭代。这就是持续集成的一个核心概念。）</p>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\a69ca5a492bf4d0ba8544af4416981e2.png\" width=\"1000\"/>\n</div>\n<hr/>\n<p>所以，持续集成指的就是 <code>\"频繁的（一天多次）将代码集成到骨干\"</code>；</p>\n<p>集成的好处主要有以下几点：</p>\n<blockquote>\n<ul><li> <p>1、<code>快速发现错误；</code>定位错误也比较容易，精确的知道是哪次提交导致了这个错误。</p> </li><li> <p>2、<code>防止分支大幅偏离主干；</code>如果像是以前的瀑布式开发，大家都在自己的本地进行开发。当开发的差不多的时候 ，在推到主干上去（此时经常已经过去了一个比较长的周期）。如果不是这样的经常集成，会导致以后的集成难度越来越大，设置会出现太多的错误导致难以集成的情况。</p> </li></ul>\n</blockquote>\n<p>持续集成的目的：<code>让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</code></p>\n<p><code>Martin Fowler 说过：\"持续集成并不能消除Bug，而是让它们非常容易发现和改正。\"</code></p>\n<p>持续集成的前提是能够做到完善的自动化测试、能够自动的构建部署，所以这里面就有了自动化测试的集成。其实准确来说，自动化测试的持续集成也分为两个方向：</p>\n<blockquote>\n<ul><li>1、<code>针对代码</code>:就像开发人员一样，开发每次提交代码，都会开始自动部署、自动化测试。自动化代码也是一样的，当每次进行提交的时候，可以让其自动的执行自动化测试。自动的跑一遍，来验证我们的代码。（当然了这不是我们的目的，我们的主要目的是下面的第二种）</li><li>2、<code>验证最新版本的代码</code>：当开发进行最新的代码的部署之后，我们利用最新版本的自动化代码去验证开发部署的代码是否有问题。这是自动化测试的集成非常重要的一点，所以才在这一章节中带着大家一起去了解怎么样将前面写好的自动化测试脚本，做成持续集成的样子。</li></ul>\n<hr/>\n<p><code>ps：要使用集成，必然要有对应的工具，这里我们使用的是最常用的工具 ---&gt; \"Jenkins\" </code></p>\n</blockquote>\n<h2><a id=\"_Jenkins__296\"></a>🐳 Jenkins 介绍</h2>\n<blockquote>\n<p>Jenkins 简单介绍及优点:</p>\n<ul><li><code>Jenkins</code> 是一款 非常简单、非常好用、也是非常通用化的持续集成引擎，即使是如今国内的一线大厂自己研发的集成工具，本质而言底层使用的也依然是 <code>Jenkins</code> ；<code>所以我们也说 \"Jenkins\" 是一款可以扩展的持续集成引擎。</code></li><li><code>Jenkins</code> 是所有 CI 产品中在安装和配置上最简单的</li><li>基于 WEB 访问， 用户界面非常友好、直观、灵活。</li></ul>\n<hr/>\n<p>Jenkins 主要应用场景：</p>\n<ul><li>持续、自动地构建 / 测试软件项目</li><li>监控一些定时执行的任务</li></ul>\n<hr/>\n<p>Jenkins 特点：</p>\n<ul><li>是基于 Java 开发的（这首先就代表着其拥有很强的扩展性）</li><li>不仅限于构建基于 JAVA 的软件，所以它又拥有着强大的通配性</li><li><code>Jenkins 拥有大量的插件，这些插件极大的扩展了 Jenkins 的功能，可以直接通过 WEB 界面来进行安装与管理，使用起来非常的快捷和迅速。</code></li><li>可以和现有的代码库：git、ant、maven 等快速的集成，并且能很好的执行自动化测试。</li></ul>\n</blockquote>\n<p>关于安装、配置、搭建 Jenkins 继承环境的场景参考下面两篇文章：</p>\n<blockquote>\n<ul><li><a href=\"https://blog.csdn.net/weixin_42250835/article/details/125283299\">Mac 安装 homebrew 详细教程</a></li><li><a href=\"https://blog.csdn.net/weixin_42250835/article/details/125287564\">Mac 利用 homebrew 安装部署 Jenkins 持续集成环境</a></li></ul>\n</blockquote>\n<h2><a id=\"__Jenkins__331\"></a>🐳 利用 Jenkins 配置部署自动化测试的集成环境</h2>\n<blockquote>\n<ul><li>1、新建项目，选择自由风格。</li></ul>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\1b4efe6d92a84994b4cdadb006858094.png\" width=\"800\"/>\n</div>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\cc9027e586954ac9ac19a9e0ef117449.png\" width=\"800\"/>\n</div>\n<hr/>\n<ul><li> <p>2、进入集成项目的配置页面</p>\n<ul><li>2.1、general 【描述这里随便填写，一般填写项目的简述】</li></ul>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\8aed420cd6b343e1acd3de94304dd1a0.png\" width=\"800\"/>\n</div>\n<hr/>\n<ul><li>2.2、源码管理 \n     <ul><li>如果有SVN、Git 的情况下，选择 Subversion ，然后填写我们的SVN、Git 地址</li><li>这里因为我们没有SVN，所以我们选择 None</li></ul> </li></ul>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\b87c500102524618bfc703636c1a6fb9.png\" width=\"800\"/>\n</div>\n<hr/>\n<ul><li> <p>2.3、构建触发器（比较重要的是 【其他 \"工程构建后触发 \" - “build after other projects are built” 与 “定时构建” - “build periodically”】）</p>\n<ul><li>触发远程构建</li><li>其他工程构建后触发 —&gt; 英文为 “build after other projects are built” ，其实也就是<code>持续集成</code>。</li><li>定时构建 —&gt; 英文为 “build periodically”</li><li>GitHub hook trigger for GITScm polling</li><li>轮询 SCM —&gt; 英文为 “poll scm”</li></ul>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\b2b023046b044484954f28bce66fe8f4.png\" width=\"800\"/>\n</div>\n<hr/> </li></ul> </li></ul>\n</blockquote>\n<h3><a id=\"___build_periodically_405\"></a>🐬 定时构建任务 - build periodically</h3>\n<blockquote>\n<p>这里我们先来介绍一下 <code>定时构建</code> 的任务（主要有5个参数，见下图）</p>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\07c22fc0ee05490d8f18b39b3bc47590.png\" width=\"800\"/>\n</div>\n<p>定时构建语法如下：</p>\n<pre><code class=\"prism language-shell\">* * * * *  注意：五个“*”之间有空格，从左到右分别是\n分钟\t小时内的分钟数（0-59）\n小时\t一天中的小时（0-23）\nDOM\t每月的一天（1-31）\n月\t月份（1-12）\nDOW\t星期几（0-7），其中0和7是星期日。\n</code></pre>\n<p>要为一个字段指定多个值，可以使用以下运算符。按照优先顺序</p>\n<pre><code class=\"prism language-shell\">* 指定所有有效值\nM-N 指定一个值的范围\nM-N/X或者*/X在整个指定范围或整个有效范围内以X为间隔步进\nA,B,<span class=\"token punctuation\">..</span>.,Z 枚举多个值\n</code></pre>\n<p>为了允许定期安排的任务在系统上产生均匀负载，H应尽可能使用符号（对于\"散列\"）。例如，使用 <code>0 0 * * *</code> 十几份日常工作将会在午夜造成大量高峰。相比之下，使用 <code>H H * * *</code> 仍然会每天执行一次，但并非全部同时执行，而是使用 有限的资源。</p>\n<p>所述H符号可以与范围内使用。例如，<code>H H(0-7) * * * </code>意味着在凌晨12:00（午 夜）至上午7:59之间的某段时间。您也可以使用H带或不带范围的步距。</p>\n<p>该H符号可以被认为是一个范围内的随机值，但它实际上是作业名称的散列， 而不是随机函数，因此对于任何给定的项目，该值都保持稳定。</p>\n<p>请注意，对于月份日的字段，由于月份长度可变，因此短周期（例如<code>*/3</code>或<code>H/3</code> 不会在大多数月份结束时保持一致）。例如，<code>*/3</code>将在一个月的第<code>1,4</code>和<code>31</code>天运行，然后再在下个月的第二天运行。哈希总是选在<code>1-28</code>范围内，所以<code>H/3</code> 在一个月的月底之间会产生3到6天的间隔。（更长的周期也会有不一致的长度，但效果可能相对较不明显。）</p>\n<p>以空格开头的空行和#行将被忽略为注释。</p>\n<p>此外，<code>@yearly</code>，<code>@annually</code>，<code>@monthly</code>， <code>@weekly</code>，<code>@daily</code>，<code>@midnight</code>，并且<code>@hourly</code>也支持方便的别名。这些使用散列系统进行自动平衡。例如，在一小时内的任何时间 <code>@hourly</code> 都是相同的 <code>H * * * *</code> ,并且可能意味着 <code>@midnight</code> 实际上是指从凌晨12:00到凌晨2:59之间的某段时间。<code>（怎么读都感觉这里有些不通顺，但是又想不出来怎么组织语言）</code></p>\n<p>例子：</p>\n<pre><code class=\"prism language-shell\">＃每十五分钟一次（可能在：07，：22，：37，：52）\nH / <span class=\"token number\">15</span> * * * * \n\n＃每小时上半场每十分钟一次（三次，也许是：04，：14， <span class=\"token number\">24</span>）\nH（0-29）/ <span class=\"token number\">10</span> * * * * \n\n＃从上午9:45开始每小时45分钟，每个工作日下午3:45结束，每两小时一次。\n<span class=\"token number\">45</span> <span class=\"token number\">9</span>-16 / <span class=\"token number\">2</span> * * <span class=\"token number\">1</span>-5 \n\n＃每周工作日上午9点至下午5点每隔两小时一次（可能在上午10:38，下午12:38，下午2:38，下午4:38）\nHH （9-16）/ <span class=\"token number\">2</span> * * <span class=\"token number\">1</span>-5 \n\n＃每月1号和15号每天一次（12月除外）\nHH <span class=\"token number\">1,15</span> <span class=\"token number\">1</span>-11 *\n</code></pre>\n<hr/>\n</blockquote>\n<h3><a id=\"_____build_after_other_projects_are_built_480\"></a>🐬 持续集成（其他工程构建后触发 ） - build after other projects are built</h3>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\b81695b9cf1345e283c6ca031816387f.png\" width=\"1000\"/>\n</div>\n<hr/>\n<h3><a id=\"__498\"></a>🐬 构建环境</h3>\n<p>PS：关于 <code>构建环境</code> ， 根据需要选择（可不选）</p>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\842b51cddeb542c1b3866c501a1b156d.png\" width=\"1000\"/>\n</div>\n<hr/>\n<h3><a id=\"__520\"></a>🐬 构建</h3>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\5ec11fb1ba04457aa81aae18bcfa6993.png\" width=\"1000\"/>\n</div>\n<hr/>\n<p><s><code>MAC 配置环境遇到了个问题卡住了，明天补上。</code></s></p>\n<p>这里因为我使用的是 Mac ，所以我选择的就是 <code>Execute shell</code> ，然后输入 启动、运行脚本命令</p>\n<pre><code class=\"prism language-shell\"><span class=\"token builtin class-name\">cd</span> /Users/caoke/PycharmProjects/test\npython3 test_login_suite.py\n</code></pre>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\822a8fef2df942c7ab9cff687c419edf.png\" width=\"1000\"/>\n</div>\n<div align=\"center\">\n<img src=\"image\\87c6b8e9fb1b447ba2adfeb7200d1b92.png\" width=\"1000\"/>\n</div>\n<hr/>\n<p>这里构建会遇到各种稀奇古怪的问题，我就记录下来两个，参考如下：</p>\n<p><a href=\"https://blog.csdn.net/weixin_42250835/article/details/125324695\">Mac环境下Jenkins部署Python报错 - ModuleNotFoundError: No module named ‘selenium‘ (已完美解决)</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_42250835/article/details/125325167\">Jenkins部署Python报错 - selenium.common.exceptions.WebDriverException: Message: ‘chromedriver‘ executabl</a></p>\n<p>运行结果如下：</p>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\7c7e9695230a4a78b646482b8ee05660.png\" width=\"1000\"/>\n</div>\n<hr/>\n<p>OKK，搞定！太难受了啊！</p>\n<h2><a id=\"__Jenkins__596\"></a>🐳 如何让 Jenkins 拥有一个属于自己的报告</h2>\n<p>接下来我们想要做的更多一些，比如想要 <code>Jenkins</code> 完成构建之后生成一份属于自己的报告。OK，那么久进入 <code>配置</code> 里面配置一下我们的报告吧。</p>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\16535a80fe574deca1798c2958805603.png\" width=\"1000\"/>\n</div>\n<hr/>\n<p>进入配置页面后选择 <code>构建后操作</code> （也就是最后一个）</p>\n<div align=\"center\">\n<img src=\"image\\e04a131d4ad2488a95671283366b8548.png\" width=\"1000\"/>\n</div>\n<p>选择 <code>Publish JUnit test result report</code> 。</p>\n<hr/>\n<div align=\"center\">\n<img src=\"image\\a69af5ebbaa1442e9fe19382537d43c3.png\" width=\"1000\"/>\n</div>\n<p>需要注意的地方哈，其实我们的脚本里并没有生成 “.xml” 格式的报告，所以即使保存了也不会生成。</p>\n<p>所以这个时候，我们需要回到我们的脚本中，将我们的代码修改为生成 <code>\".xml\"</code> 格式的测试报告。</p>\n<hr/>\n<p>修改脚本之前，需要安装一个第三方模块 <code>xmlrunner</code> ，安装命令 <code>pip install xmlrunner</code> ，或者直接在设置中心安装。</p>\n<div align=\"center\">\n<img src=\"image\\68b33a71254c4b36a5c547338c997c1b.png\" width=\"1000\"/>\n</div>\n<hr/>\n<p><code>test_login_suite.py</code> 模块的脚本修改如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># coding:utf-8</span>\n\n\n<span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"/Users/caoke/PycharmProjects/test\"</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> travel_login_ddt <span class=\"token keyword\">import</span> TestTravel\n<span class=\"token keyword\">from</span> HTMLTestReportCN <span class=\"token keyword\">import</span> HTMLTestRunner\n<span class=\"token keyword\">from</span> xmlrunner <span class=\"token keyword\">import</span> xmlrunner\n\n\nsuite <span class=\"token operator\">=</span> unittest<span class=\"token punctuation\">.</span>TestSuite<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsuite <span class=\"token operator\">=</span> unittest<span class=\"token punctuation\">.</span>TestLoader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>loadTestsFromTestCase<span class=\"token punctuation\">(</span>TestTravel<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># file = open(\"result.html\", \"wb\")</span>\n<span class=\"token comment\"># HTMLTestRunner(stream=file, title=\"UI自动化测试报告\", description=\"User:Husky\\nCase:test_login\").run(suite)</span>\nxmlrunner<span class=\"token punctuation\">.</span>XMLTestRunner<span class=\"token punctuation\">(</span>verbosity<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> output<span class=\"token operator\">=</span><span class=\"token string\">'测试报告'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>suite<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 这里的\"outout\"的值要与 Jenkins 设置的报告名称路径一致</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><s>此时，再次重新构建回生成一个 <code>XML</code> 格式的报告，可以在 <code>Jenkins</code> 中查看，但是这里因为我配置的路径有问题，始终无法在 Jenkins 查看到，但是目前我也不想解决了，耽搁我太多时间了。报错内容如下，就是配置的报告路径的问题。（<code>后续解决了我会回来把这个坑埋了的，哪位大佬如果知道如何解决的话，还请不吝赐教。</code>）</s></p>\n<p>错误信息如下：</p>\n<p><font color=\"red\">ERROR: Step ‘Publish JUnit test result report’ failed: No test report files were found. Configuration error?</font></p>\n<hr/>\n<p><font color=\"red\">如果哪位在运维领域有涉足，知道如何解决这个问题的话，还望不吝赐教。后续如果我解决了的话，我也会更新上来！</font></p>\n<div align=\"center\">\n<img src=\"image\\1fe36d8d35bd4616a2c7a3cd78110d71.png\" width=\"1000\"/>\n</div>\n<hr/>\n<div align=\"center\">\n<img src=\"https://img-blog.csdnimg.cn/975ef72a4a20472c83cab3dff3a2cbb4.gif#pic_center\" width=\"1000\"/>\n</div>\n<hr/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}