{"blogid": "126415091", "writerAge": "码龄1年", "writerBlogNum": "452", "writerCollect": "2371", "writerComment": "2969", "writerFan": "1317", "writerGrade": "7级", "writerIntegral": "11359", "writerName": "YZL40514131", "writerProfileAdress": "writer_image\\profile_126415091.jpg", "writerRankTotal": "1160", "writerRankWeekly": "98", "writerThumb": "2634", "writerVisitNum": "208920", "blog_read_count": "522", "blog_time": "已于 2022-08-21 18:18:36 修改", "blog_title": "python面试题——抽象基类和接口", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/265297853ef347d4884d26b9d6df6553.webp#pic_center\"/></p>\n<h1><a id=\"_2\"></a>一、抽象基类与接口</h1>\n<h2><a id=\"1abstract_base_classABC_4\"></a>1、抽象基类(abstract base class,ABC)</h2>\n<p>提到这个概念,我们应该会马上联想到面向对象、继承。作为继承的一种，它拥有继承中代码共享、提高代码的重用性等优点。例如:</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'吃饭'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\nanimal<span class=\"token operator\">=</span>Animal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nanimal<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ndog<span class=\"token operator\">=</span>Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndog<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ncat<span class=\"token operator\">=</span>Cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncat<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出：<br/> 吃饭<br/> 吃饭<br/> 吃饭</p>\n<p>狗(Dog)和猫(Cat)都属于动物(Animal)，它们有很多类似的属性和动作，我们可以在父类中实现这些方法，在子类中直接继承或者重写父类中的方法，这样减少了代码的重复性，提高了代码的复用能力。</p>\n<p><strong><font color=\"#FF0000\" size=\"4\">作为继承的一种，抽象基类有用继承的上述这些优点，但是它与普通的继承也有不同之处，<br/> 抽象基类不能实例化<br/> 子类需要实现基类指定的抽象方法</font></strong></p>\n<p>看到这里，我们会感觉抽象基类有一种接口的感觉。</p>\n<p>抽象基类的主要是功能就是类似于Java等编程语言中的接口。但是需要明确一点，Python语言中没有interface这个概念，这只是一种约定俗成的编程规范，就如同Python也没有真实意义上的私有变量，我们在编程中可以规范的使用下划线来表示某个变量为私有变量。</p>\n<h2><a id=\"2_46\"></a>2、接口</h2>\n<p>接口(Interface)是对象公开方法的一种集合，在Java中通常以interface关键字来定义，接口虽然实现过程中和类相似，但是却具有不同的概念。具体而言，类与接口主要有以下几点不同之处：</p>\n<blockquote>\n<p><strong><font color=\"#FF0000\" size=\"4\">类实现了对象的属性和方法，而接口指定了使用该接口需要实现哪些方法<br/> 类可以实例化，而接口不可以被实例化<br/> 类中的方法可以是实现，接口中的方法都是抽象方法</font></strong></p>\n</blockquote>\n<h2><a id=\"3_54\"></a>3、抽象基类的实现</h2>\n<p><strong><font color=\"#1E90FF\" size=\"4\">Python标准库中有一个模块abc可以实现抽象基类和抽象方法，它们的实现方式如下：</font></strong></p>\n<h2><a id=\"4_58\"></a>4、特别注意</h2>\n<blockquote>\n<p><strong><font color=\"#FF0000\" size=\"4\">抽象基类 ：通过继承abc模块中的ABC类来实现抽象基类。<br/> 抽象方法 ：通过装饰器abstractmethod来声明抽象方法。</font></strong><br/> <strong><font color=\"#FF0000\" size=\"4\">含有abstractmethod的类不能被实例化，集成了含abstractmethod方法的子类必须包含（重写）abstractmethod装饰的方法，没有被装饰的可以不重写。</font></strong></p>\n</blockquote>\n<h3><a id=\"1_65\"></a>1、例如，定义一个飞机的抽象基类</h3>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> abc <span class=\"token keyword\">import</span> ABC<span class=\"token punctuation\">,</span>abstractmethod\n\n\n<span class=\"token comment\">#定义一个飞机的抽象基类</span>\n<span class=\"token comment\">#抽象基类是不能直接被实例化的</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AirPlane</span><span class=\"token punctuation\">(</span>ABC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token decorator annotation punctuation\">@abstractmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token decorator annotation punctuation\">@abstractmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">oil</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FightPlane</span><span class=\"token punctuation\">(</span>AirPlane<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">shoot</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">'攻击'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TransPlane</span><span class=\"token punctuation\">(</span>AirPlane<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">'攻击'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\n\n    plane_b<span class=\"token operator\">=</span>FightPlane<span class=\"token punctuation\">(</span><span class=\"token string\">'战斗机'</span><span class=\"token punctuation\">)</span>\n    plane_b<span class=\"token punctuation\">.</span>shoot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n    plane_c<span class=\"token operator\">=</span>TransPlane<span class=\"token punctuation\">(</span><span class=\"token string\">'运输机'</span><span class=\"token punctuation\">)</span>\n    plane_c<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>报错：</p>\n<pre><code>plane_a=AirPlane()\nTypeError: Can't instantiate abstract class AirPlane with abstract methods fly, oil\n</code></pre>\n<h3><a id=\"2_113\"></a>2、例如，定义战斗机和运输机并且继承飞机的抽象基类</h3>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> abc <span class=\"token keyword\">import</span> ABC<span class=\"token punctuation\">,</span>abstractmethod\n\n\n<span class=\"token comment\">#定义一个飞机的抽象基类</span>\n<span class=\"token comment\">#抽象基类是不能直接被实例化的</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AirPlane</span><span class=\"token punctuation\">(</span>ABC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token decorator annotation punctuation\">@abstractmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token decorator annotation punctuation\">@abstractmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">oil</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FightPlane</span><span class=\"token punctuation\">(</span>AirPlane<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TransPlane</span><span class=\"token punctuation\">(</span>AirPlane<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\n\n    plane_b<span class=\"token operator\">=</span>FightPlane<span class=\"token punctuation\">(</span><span class=\"token string\">'战斗机'</span><span class=\"token punctuation\">)</span>\n    plane_b<span class=\"token punctuation\">.</span>shoot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    plane_c<span class=\"token operator\">=</span>TransPlane<span class=\"token punctuation\">(</span><span class=\"token string\">'运输机'</span><span class=\"token punctuation\">)</span>\n    plane_c<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>执行结果：</p>\n<pre><code>plane_b=FightPlane('战斗机')\nTypeError: Can't instantiate abstract class FightPlane with abstract methods fly, oil\n</code></pre>\n<h3><a id=\"3_153\"></a>3、例如，定义战斗机和运输机重写基类中的抽象方法并且继承飞机的抽象基类</h3>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> abc <span class=\"token keyword\">import</span> ABC<span class=\"token punctuation\">,</span>abstractmethod\n\n\n<span class=\"token comment\">#定义一个飞机的抽象基类</span>\n<span class=\"token comment\">#抽象基类是不能直接被实例化的</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AirPlane</span><span class=\"token punctuation\">(</span>ABC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token decorator annotation punctuation\">@abstractmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token decorator annotation punctuation\">@abstractmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">oil</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FightPlane</span><span class=\"token punctuation\">(</span>AirPlane<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name\n\t<span class=\"token comment\"># 必须要实现抽象基类的抽象方法，不然实例化会报错</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'飞行'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\"># 必须要实现抽象基类的抽象方法，不然实例化会报错</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">oil</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'加油'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">#自己的方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">shoot</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">'攻击'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TransPlane</span><span class=\"token punctuation\">(</span>AirPlane<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name\n\t<span class=\"token comment\"># 必须要实现抽象基类的抽象方法，不然实例化会报错</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'飞行'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\"># 必须要实现抽象基类的抽象方法，不然实例化会报错</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">oil</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'加油'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">#自己的方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">'攻击'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\n\n    plane_b<span class=\"token operator\">=</span>FightPlane<span class=\"token punctuation\">(</span><span class=\"token string\">'战斗机'</span><span class=\"token punctuation\">)</span>\n    plane_b<span class=\"token punctuation\">.</span>shoot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n    plane_c<span class=\"token operator\">=</span>TransPlane<span class=\"token punctuation\">(</span><span class=\"token string\">'运输机'</span><span class=\"token punctuation\">)</span>\n    plane_c<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出：</p>\n<pre><code>战斗机 攻击\n运输机 攻击\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\db41b1f70e154f4ab41f67f6c50196a3.jpeg\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/715e83d09231487caf6c68a185e74410.gif#pic_center\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}