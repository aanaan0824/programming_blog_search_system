{"blogid": "124515088", "writerAge": "码龄1年", "writerBlogNum": "112", "writerCollect": "2666", "writerComment": "3494", "writerFan": "14959", "writerGrade": "7级", "writerIntegral": "9325", "writerName": "原来45", "writerProfileAdress": "writer_image\\profile_124515088.jpg", "writerRankTotal": "1471", "writerRankWeekly": "1231", "writerThumb": "3622", "writerVisitNum": "118167", "blog_read_count": "1042", "blog_time": "于 2022-05-06 05:30:00 发布", "blog_title": "C&&C++如何互相调用（静态库）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><strong>目录</strong></p>\n<p id=\"1.%20C%2B%2B%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8C%C2%A0%F0%9F%9A%80%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#1.%20C%2B%2B%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8C%C2%A0%F0%9F%9A%80%C2%A0\">1. C++如何调用C 🚀 </a></p>\n<p id=\"%E7%9B%B4%E6%8E%A5%E6%83%B3%E7%9C%8B%E8%A7%A3%E5%86%B3%E7%9A%84%E5%8F%AF%E4%BB%A5%E7%82%B9%E8%BF%99%E9%87%8C%C2%A0%F0%9F%9A%80%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%9B%B4%E6%8E%A5%E6%83%B3%E7%9C%8B%E8%A7%A3%E5%86%B3%E7%9A%84%E5%8F%AF%E4%BB%A5%E7%82%B9%E8%BF%99%E9%87%8C%C2%A0%F0%9F%9A%80%C2%A0\">直接想看解决的可以点这里 🚀 </a></p>\n<p id=\"2.%20C%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8C%2B%2B%C2%A0%F0%9F%9A%80%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#2.%20C%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8C%2B%2B%C2%A0%F0%9F%9A%80%C2%A0\">2. C如何调用C++ 🚀 </a></p>\n<p id=\"%E7%9B%B4%E6%8E%A5%E6%83%B3%E7%9C%8B%E8%A7%A3%E5%86%B3%E7%9A%84%E5%8F%AF%E4%BB%A5%E7%82%B9%E8%BF%99%E9%87%8C%C2%A0%F0%9F%9A%80%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%9B%B4%E6%8E%A5%E6%83%B3%E7%9C%8B%E8%A7%A3%E5%86%B3%E7%9A%84%E5%8F%AF%E4%BB%A5%E7%82%B9%E8%BF%99%E9%87%8C%C2%A0%F0%9F%9A%80%C2%A0\">直接想看解决的可以点这里 🚀 </a></p>\n<p id=\"%E6%80%BB%E7%BB%93%C2%A0%F0%9F%9A%80%C2%A0%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%80%BB%E7%BB%93%C2%A0%F0%9F%9A%80%C2%A0%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B\">总结 🚀 </a></p>\n<p></p>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>C语言</strong></span>的<span style=\"color:#fe2c24;\"><strong>总结</strong></span>都整理在<strong><a class=\"link-info\" href=\"https://blog.csdn.net/weixin_62700590/article/details/122200337\" title=\"这里\">这里</a></strong>了哈。然后<strong><a class=\"link-info\" href=\"https://blog.csdn.net/weixin_62700590?spm=1011.2415.3001.5343\" title=\"这里\">这里</a></strong>是<span style=\"color:#fe2c24;\"><strong>个人主页</strong></span>，比点头像<span style=\"color:#fe2c24;\"><strong>更好找文章哈。</strong></span></p>\n<hr/>\n<p><span style=\"color:#faa572;\"><strong>作者和朋友建立的社区：</strong></span><a href=\"https://bbs.csdn.net/forums/FKBZM?typeId=22226\" title=\"非科班转码社区-CSDN社区云\">非科班转码社区-CSDN社区云</a>💖💛💙</p>\n<p><img alt=\"\" height=\"89\" src=\"image\\fa75bcd33e2344ffbf2d1f91521a6d89.png\" width=\"302\"/></p>\n<p><span style=\"color:#fe2c24;\"><strong>敲重点！！！</strong></span></p>\n<p><a class=\"link-info\" href=\"https://kaihei.co/OIs4Ee\" title=\"这里为社区成员提供一个好的交流平台，平时可以一起聊技术，或者去问答，还可以一起连麦一起开黑，快来加入我们吧！\">这里为社区成员提供一个好的交流平台，平时可以一起聊技术，或者去问答，还可以一起连麦一起开黑，快来加入我们吧！</a></p>\n<p><strong><span style=\"color:#956fe7;\">期待hxd的支持哈🎉 🎉 🎉</span></strong></p>\n<hr/>\n<p><strong>最后是打鸡血环节：</strong><span style=\"color:#4da8ee;\">改变的确很难，但结果值得冒险，拿出点勇气来。路还很长，现在才刚开始而已。过去无可挽回，未来可以改变。🚀 🚀 🚀 </span></p>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>PS:文章里面介绍了怎么生成和添加静态库哈，就是不好做目录就没做</strong></span></p>\n</blockquote>\n<h1 id=\"1.%20C%2B%2B%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8C%C2%A0%F0%9F%9A%80%C2%A0\">1. C++如何调用C <span style=\"color:#4da8ee;\">🚀 </span></h1>\n<blockquote>\n<p>首先添加空项目Queue_C_lib 然后把Queue.c 和Queue.h 添加进去</p>\n<p>我们发现此时是<strong>编译不过去</strong>的（没有调用接口main函数）</p>\n<p><img alt=\"\" height=\"939\" src=\"image\\923a18f7eb374206a0eb29a0e825e5c7.png\" width=\"1200\"/></p>\n<p>但是改为静态库了之后就可以<strong>编译</strong>过了</p>\n<p><img alt=\"\" height=\"819\" src=\"image\\5597c5de96f243e786a8a35e8d0406df.png\" width=\"1200\"/></p>\n<p><strong>并且发现以前是生成.exe现在是生成.lib</strong></p>\n<p><img alt=\"\" height=\"229\" src=\"image\\1d8ec56020af488fa509dfa7c6d23f79.png\" width=\"1059\"/></p>\n<p>然后我们的静态库就在下面这个位置（后面要用哈）</p>\n<p><img alt=\"\" height=\"493\" src=\"image\\38ff301b1246437e91d0c37062a052c4.png\" width=\"1200\"/></p>\n<p><strong>然后现在用一个C++的程序 如何去调用刚刚的C写的静态库（.lib）呢？</strong></p>\n<p>现在我们有这么一个.cpp文件 </p>\n<p><img alt=\"\" height=\"624\" src=\"image\\d0a429e4367c4325a4a4f5d478971079.png\" width=\"1200\"/></p>\n<p>先来看看两文件的位置</p>\n<p><img alt=\"\" height=\"92\" src=\"image\\238a81df57934d38852b66131a0ea912.png\" width=\"853\"/>然后用两个文件的相对位置去包含.h(..是上级目录)</p>\n<p><img alt=\"\" height=\"366\" src=\"image\\4dc83154d0bc42e0bf99a80bd90b5ec8.png\" width=\"1132\"/>编译就会发现，编译可以过，但是生成一堆<strong>链接错误</strong></p>\n<p><img alt=\"\" height=\"211\" src=\"image\\56a24378608940cb8c8615311b6fd860.png\" width=\"1200\"/><strong>怎么解决呢？ </strong></p>\n<p><strong>首先</strong></p>\n<p><img alt=\"\" height=\"772\" src=\"image\\1a9c224874ca4be8b43f6756f0cabbc1.png\" width=\"1200\"/><strong>然后</strong></p>\n<p><img alt=\"\" height=\"724\" src=\"image\\58e5d7a4e39e493db1b541376c02a84f.png\" width=\"1200\"/>现在连接器在链接的时候就会去链接静态库<br/> 但是我们发现还是过不了，是为什么呢？ </p>\n<p><img alt=\"\" height=\"855\" src=\"image\\6d8077550c8d42b9ad839722d9248d1d.png\" width=\"1200\"/>现在我们只改一个地方（<strong>Queue.c-&gt;Queue.cpp</strong>）</p>\n<p><img alt=\"\" height=\"630\" src=\"image\\c8db70cfffa7467d8cfde28b5dcd8bfb.png\" width=\"1200\"/>现在就过了哈</p>\n<p><img alt=\"\" height=\"654\" src=\"image\\da8fdd7fcf994e82ac25cfc2ac5f7fdd.png\" width=\"1200\"/></p>\n<h2 id=\"%E7%9B%B4%E6%8E%A5%E6%83%B3%E7%9C%8B%E8%A7%A3%E5%86%B3%E7%9A%84%E5%8F%AF%E4%BB%A5%E7%82%B9%E8%BF%99%E9%87%8C%C2%A0%F0%9F%9A%80%C2%A0\"><strong>直接想看解决的可以点这里 </strong><span style=\"color:#4da8ee;\">🚀 </span></h2>\n<p>上面的原理就是：先去我们添加的目录库里面找我们添加的依赖项，然后连接器去链接找到符号表，就可以了哈。</p>\n<p>至于把C改为C++能过的原因就是上一篇文章说的C，C++对于函数名的解释是不一样的，C++在汇编指令里面会带上大小函数名参数类型什么的，而C只有函数名，所以用C++去调用C的时候去链接符号表时，是对应不上的，所以还是会有链接错误。而我们改成C++就是C++调C++就没问题了哈。但是我们现在就是要用C++去调用C，那么很简单只需要：（同时把之前的 .cpp 改为.c） </p>\n<p><img alt=\"\" height=\"265\" src=\"image\\a1b04ca18541464db9f2891ab851a719.png\" width=\"1200\"/>就发现也能过了哈 </p>\n<p><img alt=\"\" height=\"650\" src=\"image\\e4d64a3583b44ff6beeae43f034f5328.png\" width=\"1200\"/></p>\n</blockquote>\n<h1 id=\"2.%20C%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8C%2B%2B%C2%A0%F0%9F%9A%80%C2%A0\">2. C如何调用C++ <span style=\"color:#4da8ee;\">🚀 </span></h1>\n<blockquote>\n<p>现在我们来另一个，C如何调C++，不是extern”C++“哈，C是没有这个语法的，这是C++专属的，这个就麻烦一点了</p>\n<p>先准备环境，和之前的相反的（cpp变成c,c变成cpp） </p>\n<p><img alt=\"\" height=\"696\" src=\"image\\779d0deb9a5d4f189c53a6adb66c761b.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"669\" src=\"image\\c1ca2eb41c1f464490f47162eb3fdfda.png\" width=\"1200\"/><img alt=\"\" height=\"657\" src=\"image\\158f6d5a27ef47ffa75e5c1ca6cb88d1.png\" width=\"1200\"/><img alt=\"\" height=\"681\" src=\"image\\40a00b4a639f43d5a43cfcfff8e7af13.png\" width=\"1200\"/></p>\n<p><strong>然后发现过了，其实不是哈，是因为我们刚刚用C++调用C时已经改了链接，是链接的C的，我们现在其实是C调用C，肯定是能通过的 </strong></p>\n<p><img alt=\"\" height=\"662\" src=\"image\\c04a3d7f123a4a6ba7e0ab6eee2e7cb0.png\" width=\"1200\"/></p>\n<p>然后我们改成链接CPP的，也就是上面生成的</p>\n<p><img alt=\"\" height=\"315\" src=\"image\\400f3ee8b27e4ca29abdbd8acc473358.png\" width=\"1030\"/><img alt=\"\" height=\"685\" src=\"image\\62fd806c9bfa43ca810e8da8e74a353f.png\" width=\"1098\"/>再次编译发现<strong>链接错误</strong></p>\n<p><img alt=\"\" height=\"224\" src=\"image\\819c1ce49acc4c33ad035ac69b356dc5.png\" width=\"1200\"/>链接错误原因还是一样的，因为C和C++在汇编指令中对函数名的解释不同，所以链接时符号表的查询会失败。</p>\n<h2><strong>直接想看解决的可以点这里 </strong><span style=\"color:#4da8ee;\">🚀 </span></h2>\n<p><strong>解决办法：我们用条件编译，条件编译不会的<a class=\"link-info\" href=\"https://blog.csdn.net/weixin_62700590/article/details/121984633\" title=\"点我\">点我</a>哈</strong><br/><img alt=\"\" height=\"584\" src=\"image\\f952a2891263423d92f592094f91e11e.png\" width=\"947\"/><br/><strong>或者</strong><img alt=\"\" height=\"601\" src=\"image\\20216dc6bcd44f85bba31f6a9842e96e.png\" width=\"986\"/><strong>就过了哈</strong></p>\n<p><img alt=\"\" height=\"714\" src=\"image\\25ccdff4e6a74919823ae662aedce293.png\" width=\"1200\"/></p>\n</blockquote>\n<blockquote>\n<h1 id=\"%E6%80%BB%E7%BB%93%C2%A0%F0%9F%9A%80%C2%A0%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B\">总结 <span style=\"color:#4da8ee;\">🚀 </span></h1>\n<p>其实还是简单的，只不过刚开始接触会让人感觉很厉害，就是用条件编译去解决C和C++函数名修饰不同的问题（PS: .o 文件和静态库里面都有符号表，里面有函数名和地址的映射）（静态库目前可以当成 .o ，原理是差不多的，但是细节有所不同，后面会细讲静态库哈）</p>\n<p></p>\n<p>PS:还有朋友可能会有问题，为什么extern ”C“ 只修饰声明，那定义不修饰吗？其实是都修饰了的，因为定义里面也会包含头文件，头文件展开后，编译器是先看见 extern ”C“ 再看见定义的哈 。</p>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#956fe7;\">最后的最后，创作不易，希望读者三连支持💖</span></p>\n<p><span style=\"color:#956fe7;\">赠人玫瑰，手有余香💖</span></p>\n</blockquote>\n</div>\n</div>"}