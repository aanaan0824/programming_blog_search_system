{"blogid": "124728822", "writerAge": "码龄2年", "writerBlogNum": "79", "writerCollect": "206", "writerComment": "24", "writerFan": "120", "writerGrade": "4级", "writerIntegral": "1050", "writerName": "是啦啦啦呀", "writerProfileAdress": "writer_image\\profile_124728822.jpg", "writerRankTotal": "41631", "writerRankWeekly": "32201", "writerThumb": "73", "writerVisitNum": "75435", "blog_read_count": "4139", "blog_time": "于 2022-05-12 13:05:17 发布", "blog_title": "jdk1.8 的新特性", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#jdk18__6\">jdk1.8 的新特性</a></li><li><a href=\"#_Lambda__12\">一、 Lambda 表达式</a></li><li><a href=\"#__20\">二、 方法引用</a></li><li><a href=\"#_30\">三、函数式接口</a></li><li><a href=\"#__32\">四、 接口允许定义默认方法和静态方法</a></li><li><a href=\"#Stream_API_34\">五、Stream API</a></li><li><a href=\"#_46\">六、日期/时间类改进</a></li><li><a href=\"#Optional__50\">七、Optional 类</a></li><li><a href=\"#_Java8_Base64__62\">八、 Java8 Base64 实现</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"jdk18__6\"></a>jdk1.8 的新特性</h1>\n<hr/>\n<h1><a id=\"_Lambda__12\"></a>一、 Lambda 表达式</h1>\n<p>Lambda 允许把函数作为一个方法的参数。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">new</span> <span class=\"token function\">Thread</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h1><a id=\"__20\"></a>二、 方法引用</h1>\n<p>方法引用允许直接引用已有 Java 类或对象的方法或构造方法。</p>\n<pre><code class=\"prism language-cpp\">Arraylist<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-function\"><span class=\"token function\">ArrayList</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>out<span class=\"token double-colon punctuation\">::</span>println<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//将 System.out::println 方法作为静态方法来引用。</span>\n</code></pre>\n<h1><a id=\"_30\"></a>三、函数式接口</h1>\n<p>有且仅有一个抽象方法的接口叫做函数式接口，函数式接口可以被隐式转换为Lambda 表达式。通常函数式接口上会添加@FunctionalInterface 注解</p>\n<h1><a id=\"__32\"></a>四、 接口允许定义默认方法和静态方法</h1>\n<p>从 JDK8 开始，允许接口中存在一个或多个默认非抽象方法和静态方法。</p>\n<h1><a id=\"Stream_API_34\"></a>五、Stream API</h1>\n<p>新添加的 Stream API（java.util.stream）把真正的函数式编程风格引入到 Java中。这种风格将要处理的元素集<br/> 合看作一种流，流在管道中传输，并且可以在管道的节点上进行处理，比如筛选，排序，聚合等。</p>\n<pre><code class=\"prism language-cpp\">List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span> list <span class=\"token operator\">=</span> Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"wqer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//获取集合的流对象</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">-&gt;</span> <span class=\"token operator\">!</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//对数据进行过滤操作，过滤掉空字符串</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//去重</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-&gt;</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"_46\"></a>六、日期/时间类改进</h1>\n<p>之前的 JDK 自带的日期处理类非常不方便，我们处理的时候经常是使用的第三方工具包，比如 commons-lang<br/> 包等。不过 JDK8 出现之后这个改观了很多，比如日期时间的创建、比较、调整、格式化、时间间隔等。<br/> 这些类都在 java.time 包下，LocalDate/LocalTime/LocalDateTime。</p>\n<h1><a id=\"Optional__50\"></a>七、Optional 类</h1>\n<p>Optional 类是一个可以为 null 的容器对象。如果值存在则 isPresent()方法会返回 true，调用 get()方法会返回该对象。</p>\n<pre><code class=\"prism language-cpp\">String string <span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>\n\nOptional<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span> optional <span class=\"token operator\">=</span> Optional<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nboolean present <span class=\"token operator\">=</span> optional<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nString value <span class=\"token operator\">=</span> optional<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>present<span class=\"token operator\">+</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">+</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"_Java8_Base64__62\"></a>八、 Java8 Base64 实现</h1>\n<p>Java 8 内置了 Base64 编码的编码器和解码器。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}