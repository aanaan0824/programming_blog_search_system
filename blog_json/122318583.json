{"blogid": "122318583", "writerAge": "码龄3年", "writerBlogNum": "319", "writerCollect": "37797", "writerComment": "30431", "writerFan": "55922", "writerGrade": "9级", "writerIntegral": "94977", "writerName": "孤寒者", "writerProfileAdress": "writer_image\\profile_122318583.jpg", "writerRankTotal": "18", "writerRankWeekly": "96", "writerThumb": "20032", "writerVisitNum": "4649139", "blog_read_count": "5615", "blog_time": "已于 2022-09-01 15:14:32 修改", "blog_title": "二战MySQL数据库【升华篇】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>MYSQL入门系列——第二篇</h3>\n<ul><li><a href=\"#_1\">每篇前言：</a></li><li><a href=\"#1_8\">1.筛选条件：</a></li><li><ul><li><a href=\"#1_10\">(1)比较运算符：</a></li><li><a href=\"#2_31\">(2)逻辑运算符：</a></li><li><a href=\"#3_43\">(3)其他操作：</a></li><li><ul><li><a href=\"#1_45\">1.排序：</a></li><li><a href=\"#2_61\">2.限制：</a></li><li><ul><li><a href=\"#_75\">拓展：</a></li></ul>\n</li><li><a href=\"#3_87\">3.去重：</a></li><li><a href=\"#4_like__104\">4.模糊查询： (like '%')</a></li><li><a href=\"#5_129\">5.范围查询：</a></li></ul>\n</li></ul>\n</li><li><a href=\"#2_163\">2.聚合与分组（重点哦！）：</a></li><li><ul><li><a href=\"#1_171\">(1)常用聚合函数：</a></li><li><a href=\"#2_201\">(2)分组查询：</a></li><li><a href=\"#3having_223\">(3)聚合筛选：(having)</a></li></ul>\n</li><li><a href=\"#3_248\">3.子查询：</a></li><li><a href=\"#4_290\">4.连接查询：</a></li><li><ul><li><a href=\"#1inner_join_298\">(1)内连接(inner join)</a></li><li><a href=\"#2__left__right__join__321\">(2)外连接( left / right join )</a></li><li><ul><li><a href=\"#_342\">拓展：</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>每篇前言：</h1>\n<blockquote>\n<ul><li>\n<div class=\"table-box\">\n<table><tbody><tr><td bgcolor=\"black\"><p align=\"left\"><font color=\"#FFD700\" size=\"4\">🏆🏆作者介绍：【孤寒者】—CSDN全栈领域优质创作者、HDZ核心组成员、华为云享专家Python全栈领域博主、CSDN原力计划作者</font></p></td></tr></tbody></table>\n</div> </li><li><font color=\"red\" size=\"4\">🔥🔥<strong>本文已收录于三大数据库深入讲解专栏</strong>：<a href=\"https://blog.csdn.net/qq_44907926/category_9734109\">《三大数据库深入讲解》</a></font></li><li><font color=\"red\" size=\"4\">🔥🔥<strong>热门专栏推荐</strong>：<a href=\"https://blog.csdn.net/qq_44907926/category_11297606.html?spm=1001.2014.3001.5482\">《Django框架从入门到实战》、</a><a href=\"https://blog.csdn.net/qq_44907926/category_10567569.html?spm=1001.2014.3001.5482\">《爬虫从入门到精通系列教程》、</a><a href=\"https://blog.csdn.net/qq_44907926/category_10311371.html?spm=1001.2014.3001.5482\">《爬虫高级》、</a><a href=\"https://blog.csdn.net/qq_44907926/category_9792483.html?spm=1001.2014.3001.5482\">《前端系列教程》、</a><a href=\"https://blog.csdn.net/qq_44907926/category_10772668.html?spm=1001.2014.3001.5482\">《tornado一条龙+一个完整版项目》。</a></font></li><li><font color=\"black\" size=\"4\">📝​📝本专栏面向广大程序猿，为的是大家入门并精通开发python项目常用的三大数据库：MySql，Redis，MongoDB。</font></li><li><font color=\"#8A2BE2\" size=\"4\"><strong>🎉🎉订阅专栏后</strong></font><font color=\"orange\" size=\"4\"><strong>可私聊进一千多人Python全栈交流群</strong></font><font color=\"black\" size=\"4\">（手把手教学，问题解答）；</font> <font color=\"#0099ff\" size=\"4\"><strong>进群可领取Python全栈教程视频 + 多得数不过来的计算机书籍</strong></font><font color=\"black\" size=\"4\">：基础、Web、爬虫、数据分析、可视化、机器学习、深度学习、人工智能、算法、面试题等。</font></li><li><font color=\"black\" size=\"4\">🚀🚀加入我一起学习进步，一个人可以走的很快，一群人才能走的更远！</font></li></ul>\n<hr/>\n<img alt=\"在这里插入图片描述\" src=\"image\\bab8418a78f54a57858a6af55f97fcf7.png\"/>\n</blockquote>\n<h1><a id=\"1_8\"></a>1.筛选条件：</h1>\n<h2><a id=\"1_10\"></a>(1)比较运算符：</h2>\n<table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td>=</td><td>等于（注意：不是==）</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>!=或&lt;&gt;</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>IS NULL</td><td>为空</td></tr><tr><td>IS NOT NULL</td><td>不为空</td></tr></tbody></table>\n<p><strong>知识点补给站：</strong><br/> 关于IS NULL和IS NOT NULL如何使用？</p>\n<p><code>select * from tb_name where 字段名 IS NULL;</code><br/> 查询tb_name表中指定字段名为空的所有数据。</p>\n<h2><a id=\"2_31\"></a>(2)逻辑运算符：</h2>\n<table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td>AND</td><td>与</td></tr><tr><td>OR</td><td>或</td></tr><tr><td>NOT</td><td>非</td></tr></tbody></table>\n<center>\n<font color=\"red\">【运算顺序：not &gt;and&gt;or】</font>\n</center>\n<h2><a id=\"3_43\"></a>(3)其他操作：</h2>\n<h3><a id=\"1_45\"></a>1.排序：</h3>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span>  name1 <span class=\"token keyword\">from</span> tb2_name <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> tb3_name <span class=\"token punctuation\">[</span><span class=\"token keyword\">asc</span><span class=\"token operator\">/</span><span class=\"token keyword\">desc</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li> <p>第一个name是指定查询的数据，即显示出来的数据；</p> </li><li> <p>第二个tb2_name是表的名字；</p> </li><li> <p>第三个tb3_name是表中排序的那一列的字段； （一般都是数字排序，如果是字母，按首字母顺序排序）</p> </li><li> <p>asc是正序（默认，不输入也是正序）；desc(descend降序排列)是倒序。</p> </li></ul>\n<h3><a id=\"2_61\"></a>2.限制：</h3>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> name1 <span class=\"token keyword\">from</span> tb_name <span class=\"token keyword\">limit</span> <span class=\"token keyword\">start</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li> <p>第一个name1是指定查询的数据，即显示出来的数据；</p> </li><li> <p>第二个tb_name表的名字；</p> </li><li> <p>第三个start是限制的表中开始的行数，count是要显示出来的行的个数。（表中行数以0开始。如果start没有数据，默认从第零行开始）</p> </li></ul>\n<h4><a id=\"_75\"></a>拓展：</h4>\n<p>带条件的限制（where）：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> name1 <span class=\"token keyword\">from</span> tb_name <span class=\"token keyword\">where</span> 条件语句 <span class=\"token keyword\">limit</span> <span class=\"token keyword\">start</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>会从name1中筛选出符合where的且满足限制条件start,count的数据。</li></ul>\n<h3><a id=\"3_87\"></a>3.去重：</h3>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> <span class=\"token keyword\">distinct</span> name1 <span class=\"token keyword\">from</span> tb_name<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li> <p>第一个name1是指定查询的数据，即显示出来的数据。这是指定去重的数据。</p> </li><li> <p>第二个tb_name是表名。</p> </li></ul>\n<p><strong>注意：</strong><br/>  如果name1是*，则把整张表里行中一模一样的去重；如果name1是字段名，则把对应的字段值里一样的去重.</p>\n<h3><a id=\"4_like__104\"></a>4.模糊查询： (like ‘%’)</h3>\n<ol><li> <p>任意多个字符： %<br/> 模糊查询和范围查询都是和where一起用。</p> </li><li> <p>任意一个字符：_</p> </li></ol>\n<p>例子：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> name1 <span class=\"token keyword\">from</span> tb_name <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'h%'</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<ul><li> <p>查询表中满足name为h开头的对应name1字段下的字段值。</p> </li><li> <p>如果’h%'换为’h_'则只能查询以h开头且h后面只有一个字符的name。</p> </li><li> <p>如果’h%‘换为’%h%'则只能查询name中间有h的任意name</p> </li></ul>\n<h3><a id=\"5_129\"></a>5.范围查询：</h3>\n<ol><li>连续范围：between a and b<br/> a &lt;= value &lt;= b（包括a和b）</li></ol>\n<p>例子：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> name1 <span class=\"token keyword\">from</span> tb_name <span class=\"token keyword\">where</span> id <span class=\"token operator\">between</span> a <span class=\"token operator\">and</span> b<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>查询表中id在a和b之间的（包括a和b）name1字段下的字段值。</li></ul>\n<ol start=\"2\"><li>间隔范围：in()<br/> 括号里可以写任意值，包括表里没有的也不会报错，只查询括号里指定的值</li></ol>\n<p>例子：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> name1 <span class=\"token keyword\">from</span> tb_name  <span class=\"token keyword\">where</span> id <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<ul><li>只查询表中的id为1和7的对应name1字段下的字段值，里面可以写表里没有的也不会报错 。</li></ul>\n<h1><a id=\"2_163\"></a>2.聚合与分组（重点哦！）：</h1>\n<p>数据表准备（为了讲解更容易理解，会配套上实操演示效果）：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\acddddc6fe33484a97ef8ed9d497232e.png\"/><img alt=\"在这里插入图片描述\" src=\"image\\c918928cc7a14523a005b5839b2db6b7.png\"/></p>\n<h2><a id=\"1_171\"></a>(1)常用聚合函数：</h2>\n<table><thead><tr><th>聚合函数</th><th>作用</th></tr></thead><tbody><tr><td>count(column)</td><td>统计个数</td></tr><tr><td>sum(column)</td><td>求和</td></tr><tr><td>max(column)</td><td>最大值</td></tr><tr><td>avg(column)</td><td>平均值</td></tr><tr><td>min(column)</td><td>最小值</td></tr><tr><td>group_concat(column)</td><td>列出字段全部值</td></tr></tbody></table>\n<p>用法：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> 聚合函数<span class=\"token punctuation\">(</span>字段<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> 表<span class=\"token punctuation\">;</span> \n</code></pre>\n<p>（其实你也可能感觉到了，这些聚合函数单独使用没啥子实际作用，其实聚合函数一般都是和分组结合使用才能发挥其作用哦~）</p>\n<p>重点：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>字段<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> 表<span class=\"token punctuation\">;</span>   \n</code></pre>\n<ul><li>列出指定字段的全部值 （在分组后可以列出每组指定字段的所有值。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\dfca08dae1ee46a1beb47e2d6089b428.png\"/></p>\n<h2><a id=\"2_201\"></a>(2)分组查询：</h2>\n<p><code>select 字段 from 表 group by 字段;</code><br/> （注意：这里的两个字段必须一致，否则会报错）</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\88dec36f848e40c1913f12823967752e.png\"/></p>\n<p><code>select 字段，count(*) from 表 group by 字段;</code><br/> 配合聚合函数使用，例如—显示count，即个数。</p>\n<table><tbody><tr><td bgcolor=\"yellow\">注意：在分组的情况下，只能够出现分组字段（即分组的那个字段）和聚合字段,其他的字段没有意义，会报错！</td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\75183ae2fa4a4b31a767c4128a0a6df2.png\"/></p>\n<p><strong>小注意：</strong><br/>  如果要加入where筛选，where语句要放在分组查询grou by的前面哦~</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\261eab0f1de748249ddfed4f0a32fb1e.png\"/></p>\n<h2><a id=\"3having_223\"></a>(3)聚合筛选：(having)</h2>\n<ol><li><code>select 字段1 from 表名 group by 字段1，字段2 having 字段2&gt;=80;</code></li></ol>\n<p>(加having条件表达式，可以对输出的结果做出限制。是不是想到了where，别急，我也想到了~)</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6712e5ce0c0e4de3a7366e58c2b003c2.png\"/></p>\n<p>假如说一个查询语句中同时包含了别名(as)，聚合函数， where, having那么他们的执行顺序是：</p>\n<ul><li>先是执行：where 这次是在整个表的前提下筛选</li><li>然后执行：聚合函数和别名</li><li>最后执行：having，这次是在字段里筛选<br/> (where比having执行要快！所以多用where)</li></ul>\n<p>注意：一般where写的条件筛选，都可以用having筛选表示。</p>\n<p>小tips：最后加having class = ‘first’ 跟在前面用where都可以 ，代码执行结果一致。</p>\n<p><strong>但是要注意where是在整表中进行筛选；而having是在聚合及分组操作之后产生的一张虚表中进行筛选。（即Where是在聚合分组之前对数据进行筛选<br/> having是在聚合之后再进行筛选）二者使用哪个看场景~</strong></p>\n<h1><a id=\"3_248\"></a>3.子查询：</h1>\n<p>将一个查询的结果留下来用于下一次查询 ( select 中嵌套 select )</p>\n<p>要求：</p>\n<ol><li> <p>嵌套在查询内部</p> </li><li> <p>必须始终出现在圆括号内</p> </li></ol>\n<p>例子：</p>\n<ul><li>求出学生的平均年龄</li></ul>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> students<span class=\"token punctuation\">;</span>\n</code></pre>\n<ol><li>查找出大于平均年龄的数据</li></ol>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student <span class=\"token keyword\">where</span> age <span class=\"token operator\">&gt;</span> <span class=\"token number\">19.7273</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"2\"><li>将求出的平均年龄的SQL语句用于查找大于平均年龄的语句中</li></ol>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> students <span class=\"token keyword\">where</span> age <span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"4_290\"></a>4.连接查询：</h1>\n<p>再创建一个表，结合上面创建的那张表演示效果：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\87c0c1d428894e9d8eb95a96b08d41b1.png\"/></p>\n<h2><a id=\"1inner_join_298\"></a>(1)内连接(inner join)</h2>\n<ul><li>无条件内连接：<br/> 无条件内连接，又名交叉连接/笛卡尔连接,第一张表中的每一项会和另一张表的每一项依次组合</li></ul>\n<p><code>select * from 表1 [inner] join 表2;</code><br/> inner可写可不写，没影响。</p>\n<p> 比如第一张表有6条数据，第二张表有2条数据，那么内连接查询则有12条数据，第一张表的每一条数据分别和第二张表的两张数据组合。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\143e4fce305d477982ed21cd9927978f.png\"/></p>\n<ul><li>有条件内连接：<br/> 在无条件内链接的基础上，加上一个on子句,当连接的时候，筛选出那些有实际意义的记录来进行组合<br/> <code>select * from 表1 inner join 表2 on 条件</code><br/> （比如：表1.id = 表2.id）;</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2d5d7265b55c479780b0950373e91025.png\"/></p>\n<h2><a id=\"2__left__right__join__321\"></a>(2)外连接( left / right join )</h2>\n<ul><li>左外连接： （以左表为基准）<br/> 两张表做连接的时候，在连接条件不匹配的时候留下左表中的数据，而右表中的数据以NULL填充<br/> <code>select * from 表1 left join 表2 on 条件;</code><br/> 条件里面可以写 表1.字段=表2.字段。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\cf6e33ad376c48628a1fe1e48ed81e74.png\"/></p>\n<ul><li>右外连接： （以右表为基准）<br/> 对两张表做连接的时候，在连接条件不匹配的时候留下右表中的数据，而左表中的数据以NULL填充</li></ul>\n<pre><code class=\"prism language-sql\"> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span>  表<span class=\"token number\">1</span> <span class=\"token keyword\">right</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 条件<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8b5624276e074830803ba01113ff6f8b.png\"/></p>\n<h3><a id=\"_342\"></a>拓展：</h3>\n<p>三连接：</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span> <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 条件<span class=\"token number\">1</span> <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">3</span> <span class=\"token keyword\">on</span> 条件<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>表1和表2，然后和表3连接，表1是主表。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}