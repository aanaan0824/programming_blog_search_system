{"blogid": "126185347", "writerAge": "码龄1年", "writerBlogNum": "287", "writerCollect": "3114", "writerComment": "225", "writerFan": "2122", "writerGrade": "5级", "writerIntegral": "3757", "writerName": "代码输入中...", "writerProfileAdress": "writer_image\\profile_126185347.jpg", "writerRankTotal": "4409", "writerRankWeekly": "881", "writerThumb": "537", "writerVisitNum": "224585", "blog_read_count": "1730", "blog_time": "于 2022-08-05 20:49:05 发布", "blog_title": "整理了27个Python人工智能库，建议收藏~", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>超级无敌干货，第一时间送达！！！</p>\n<p>为了大家能够对人工智能常用的 <code>Python</code> 库有一个初步的了解，以选择能够满足自己需求的库进行学习，对目前较为常见的人工智能库进行简要全面的介绍。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\4dd231667dc87aab5dba17007600e7e0.png\"/></p>\n<p>1、Numpy</p>\n<p><code>NumPy(Numerical Python)</code> 是  <code>Python</code> 的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库， <code>Numpy</code> 底层使用 <code>C语言</code> 编写，数组中直接存储对象，而不是存储对象指针，所以其运算效率远高于 <code>纯Python代</code> 码。</p>\n<p>我们可以在示例中对比下 <code>纯Python</code> 与使用 <code>Numpy库</code> 在计算列表sin值的速度对比：</p>\n<pre><code>import numpy as np\nimport math\nimport random\nimport time\n\nstart = time.time()\nfor i in range(10):\n    list_1 = list(range(1,10000))\n    for j in range(len(list_1)):\n        list_1[j] = math.sin(list_1[j])\nprint(\"使用纯Python用时{}s\".format(time.time()-start))\n\nstart = time.time()\nfor i in range(10):\n    list_1 = np.array(np.arange(1,10000))\n    list_1 = np.sin(list_1)\nprint(\"使用Numpy用时{}s\".format(time.time()-start))\n</code></pre>\n<p>从如下运行结果，可以看到使用 <code>Numpy</code> 库的速度快于纯 Python 编写的代码：</p>\n<pre><code>使用纯Python用时0.017444372177124023s\n使用Numpy用时0.001619577407836914s\n</code></pre>\n<p>2、OpenCV</p>\n<p><code>OpenCV</code> 是一个的跨平台计算机视觉库，可以运行在 Linux、Windows 和 Mac OS 操作系统上。它轻量级而且高效——由一系列 C 函数和少量 C++ 类构成，同时也提供了  <code>Python</code> 接口，实现了图像处理和计算机视觉方面的很多通用算法。</p>\n<p>下面代码尝试使用一些简单的滤镜，包括图片的平滑处理、高斯模糊等：</p>\n<pre><code>import numpy as np\nimport cv2 as cv\nfrom matplotlib import pyplot as plt\nimg = cv.imread('h89817032p0.png')\nkernel = np.ones((5,5),np.float32)/25\ndst = cv.filter2D(img,-1,kernel)\nblur_1 = cv.GaussianBlur(img,(5,5),0)\nblur_2 = cv.bilateralFilter(img,9,75,75)\nplt.figure(figsize=(10,10))\nplt.subplot(221),plt.imshow(img[:,:,::-1]),plt.title('Original')\nplt.xticks([]), plt.yticks([])\nplt.subplot(222),plt.imshow(dst[:,:,::-1]),plt.title('Averaging')\nplt.xticks([]), plt.yticks([])\nplt.subplot(223),plt.imshow(blur_1[:,:,::-1]),plt.title('Gaussian')\nplt.xticks([]), plt.yticks([])\nplt.subplot(224),plt.imshow(blur_1[:,:,::-1]),plt.title('Bilateral')\nplt.xticks([]), plt.yticks([])\nplt.show()\n</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\57a52749245451281979c82acc76cbe9.png\"/></p>\n<p>3、Scikit-image</p>\n<p><code>scikit-image</code> 是基于 <code>scipy</code> 的图像处理库，它将图片作为 <code>numpy</code> 数组进行处理。</p>\n<p>例如，可以利用 <code>scikit-image</code> 改变图片比例， <code>scikit-image</code> 提供了 <code>rescale</code> 、 <code>resize</code> 以及 <code>downscale_local_mean</code> 等函数。</p>\n<pre><code>from skimage import data, color, io\nfrom skimage.transform import rescale, resize, downscale_local_mean\n\nimage = color.rgb2gray(io.imread('h89817032p0.png'))\n\nimage_rescaled = rescale(image, 0.25, anti_aliasing=False)\nimage_resized = resize(image, (image.shape[0] // 4, image.shape[1] // 4),\n                       anti_aliasing=True)\nimage_downscaled = downscale_local_mean(image, (4, 3))\nplt.figure(figsize=(20,20))\nplt.subplot(221),plt.imshow(image, cmap='gray'),plt.title('Original')\nplt.xticks([]), plt.yticks([])\nplt.subplot(222),plt.imshow(image_rescaled, cmap='gray'),plt.title('Rescaled')\nplt.xticks([]), plt.yticks([])\nplt.subplot(223),plt.imshow(image_resized, cmap='gray'),plt.title('Resized')\nplt.xticks([]), plt.yticks([])\nplt.subplot(224),plt.imshow(image_downscaled, cmap='gray'),plt.title('Downscaled')\nplt.xticks([]), plt.yticks([])\nplt.show()\n</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\c3dc7dfde42123e600f10dbdb2faed41.png\"/></p>\n<p>Scikit-image</p>\n<p><code>Python Imaging Library(PIL)</code> 已经成为  <code>Python</code> 事实上的图像处理标准库了，这是由于， <code>PIL</code> 功能非常强大，但API却非常简单易用。</p>\n<p>但是由于PIL仅支持到  <code>Python 2.7</code> ，再加上年久失修，于是一群志愿者在  <code>PIL</code> 的基础上创建了兼容的版本，名字叫  <code>Pillow</code> ，支持最新  <code>Python 3.x</code> ，又加入了许多新特性，因此，我们可以跳过  <code>PIL</code> ，直接安装使用  <code>Pillow</code> 。</p>\n<p>5、Pillow</p>\n<p>使用 <code>Pillow</code> 生成字母验证码图片：</p>\n<pre><code>from PIL import Image, ImageDraw, ImageFont, ImageFilter\n\nimport random\n\n# 随机字母:\ndef rndChar():\n    return chr(random.randint(65, 90))\n\n# 随机颜色1:\ndef rndColor():\n    return (random.randint(64, 255), random.randint(64, 255), random.randint(64, 255))\n\n# 随机颜色2:\ndef rndColor2():\n    return (random.randint(32, 127), random.randint(32, 127), random.randint(32, 127))\n\n# 240 x 60:\nwidth = 60 * 6\nheight = 60 * 6\nimage = Image.new('RGB', (width, height), (255, 255, 255))\n# 创建Font对象:\nfont = ImageFont.truetype('/usr/share/fonts/wps-office/simhei.ttf', 60)\n# 创建Draw对象:\ndraw = ImageDraw.Draw(image)\n# 填充每个像素:\nfor x in range(width):\n    for y in range(height):\n        draw.point((x, y), fill=rndColor())\n# 输出文字:\nfor t in range(6):\n    draw.text((60 * t + 10, 150), rndChar(), font=font, fill=rndColor2())\n# 模糊:\nimage = image.filter(ImageFilter.BLUR)\nimage.save('code.jpg', 'jpeg')\n</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\3ba11a28518ae1af4d34b74e8a6354ed.jpeg\"/></p>\n<p>6、SimpleCV</p>\n<p><code>SimpleCV</code> 是一个用于构建计算机视觉应用程序的开源框架。使用它，可以访问高性能的计算机视觉库，如 OpenCV，而不必首先了解位深度、文件格式、颜色空间、缓冲区管理、特征值或矩阵等术语。但其对于 Python3 的支持很差很差，在 Python3.7 中使用如下代码：</p>\n<pre><code>from SimpleCV import Image, Color, Display\n# load an image from imgur\nimg = Image('http://i.imgur.com/lfAeZ4n.png')\n# use a keypoint detector to find areas of interest\nfeats = img.findKeypoints()\n# draw the list of keypoints\nfeats.draw(color=Color.RED)\n# show the  resulting image. \nimg.show()\n# apply the stuff we found to the image.\noutput = img.applyLayers()\n# save the results.\noutput.save('juniperfeats.png')\n</code></pre>\n<p>会报如下错误，因此不建议在 <code>Python3</code> 中使用：</p>\n<pre><code>SyntaxError: Missing parentheses in call to 'print'. Did you mean print('unit test')?\n</code></pre>\n<p>7、Mahotas</p>\n<p><code>Mahotas</code> 是一个快速计算机视觉算法库，其构建在  <code>Numpy</code> 之上，目前拥有超过100种图像处理和计算机视觉功能，并在不断增长。</p>\n<p>使用  <code>Mahotas</code> 加载图像，并对像素进行操作：</p>\n<pre><code>import numpy as np\nimport mahotas\nimport mahotas.demos\n\nfrom mahotas.thresholding import soft_threshold\nfrom matplotlib import pyplot as plt\nfrom os import path\nf = mahotas.demos.load('lena', as_grey=True)\nf = f[128:,128:]\nplt.gray()\n# Show the data:\nprint(\"Fraction of zeros in original image: {0}\".format(np.mean(f==0)))\nplt.imshow(f)\nplt.show()\n</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\58fac0af4c230b60f8a9debc30611ac4.png\"/></p>\n<p>Mahotas</p>\n<p>8、Ilastik</p>\n<p><code>Ilastik</code> 能够给用户提供良好的基于机器学习的生物信息图像分析服务，利用机器学习算法，轻松地分割，分类，跟踪和计数细胞或其他实验数据。大多数操作都是交互式的，并不需要机器学习专业知识。</p>\n<p>9、Scikit-learn</p>\n<p><code>Scikit-learn</code> 是针对  <code>Python</code> 编程语言的免费软件机器学习库。它具有各种分类，回归和聚类算法，包括支持向量机，随机森林，梯度提升，k均值和 DBSCAN 等多种机器学习算法。</p>\n<p>使用 <code>Scikit-learn</code> 实现 <code>KMeans</code> 算法：</p>\n<pre><code>import time\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.cluster import MiniBatchKMeans, KMeans\nfrom sklearn.metrics.pairwise import pairwise_distances_argmin\nfrom sklearn.datasets import make_blobs\n\n# Generate sample data\nnp.random.seed(0)\n\nbatch_size = 45\ncenters = [[1, 1], [-1, -1], [1, -1]]\nn_clusters = len(centers)\nX, labels_true = make_blobs(n_samples=3000, centers=centers, cluster_std=0.7)\n\n# Compute clustering with Means\n\nk_means = KMeans(init='k-means++', n_clusters=3, n_init=10)\nt0 = time.time()\nk_means.fit(X)\nt_batch = time.time() - t0\n\n# Compute clustering with MiniBatchKMeans\n\nmbk = MiniBatchKMeans(init='k-means++', n_clusters=3, batch_size=batch_size,\n                      n_init=10, max_no_improvement=10, verbose=0)\nt0 = time.time()\nmbk.fit(X)\nt_mini_batch = time.time() - t0\n\n# Plot result\nfig = plt.figure(figsize=(8, 3))\nfig.subplots_adjust(left=0.02, right=0.98, bottom=0.05, top=0.9)\ncolors = ['#4EACC5', '#FF9C34', '#4E9A06']\n\n# We want to have the same colors for the same cluster from the\n# MiniBatchKMeans and the KMeans algorithm. Let's pair the cluster centers per\n# closest one.\nk_means_cluster_centers = k_means.cluster_centers_\norder = pairwise_distances_argmin(k_means.cluster_centers_,\n                                  mbk.cluster_centers_)\nmbk_means_cluster_centers = mbk.cluster_centers_[order]\n\nk_means_labels = pairwise_distances_argmin(X, k_means_cluster_centers)\nmbk_means_labels = pairwise_distances_argmin(X, mbk_means_cluster_centers)\n\n# KMeans\nfor k, col in zip(range(n_clusters), colors):\n    my_members = k_means_labels == k\n    cluster_center = k_means_cluster_centers[k]\n    plt.plot(X[my_members, 0], X[my_members, 1], 'w',\n            markerfacecolor=col, marker='.')\n    plt.plot(cluster_center[0], cluster_center[1], 'o', markerfacecolor=col,\n            markeredgecolor='k', markersize=6)\nplt.title('KMeans')\nplt.xticks(())\nplt.yticks(())\n\nplt.show()\n</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\db72230601fd5e6fbd02b6639c1e8092.png\"/></p>\n<p>10、SciPy</p>\n<p><code>SciPy</code> 库提供了许多用户友好和高效的数值计算，如数值积分、插值、优化、线性代数等。</p>\n<p><code>SciPy</code> 库定义了许多数学物理的特殊函数，包括椭圆函数、贝塞尔函数、伽马函数、贝塔函数、超几何函数、抛物线圆柱函数等等。</p>\n<pre><code>from scipy import special\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef drumhead_height(n, k, distance, angle, t):\n    kth_zero = special.jn_zeros(n, k)[-1]\n    return np.cos(t) * np.cos(n*angle) * special.jn(n, distance*kth_zero)\n\ntheta = np.r_[0:2*np.pi:50j]\nradius = np.r_[0:1:50j]\nx = np.array([r * np.cos(theta) for r in radius])\ny = np.array([r * np.sin(theta) for r in radius])\nz = np.array([drumhead_height(1, 1, r, theta, 0.5) for r in radius])\n\n\nfig = plt.figure()\nax = fig.add_axes(rect=(0, 0.05, 0.95, 0.95), projection='3d')\nax.plot_surface(x, y, z, rstride=1, cstride=1, cmap='RdBu_r', vmin=-0.5, vmax=0.5)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_xticks(np.arange(-1, 1.1, 0.5))\nax.set_yticks(np.arange(-1, 1.1, 0.5))\nax.set_zlabel('Z')\nplt.show()\n</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\48073ecf32b3b9ed096b6435d8d682e9.png\"/></p>\n<p>11、NLTK</p>\n<p><code>NLTK</code> 是构建Python程序以处理自然语言的库。它为50多个语料库和词汇资源(如  <code>WordNet</code> )提供了易于使用的接口，以及一套用于分类、分词、词干、标记、解析和语义推理的文本处理库、工业级自然语言处理  <code>(Natural Language Processing, NLP)</code> 库的包装器。</p>\n<p>NLTK被称为  <code>“a wonderful tool for teaching, and working in, computational linguistics using Python”</code> 。</p>\n<pre><code>import nltk\nfrom nltk.corpus import treebank\n\n# 首次使用需要下载\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\nnltk.download('maxent_ne_chunker')\nnltk.download('words')\nnltk.download('treebank')\n\nsentence = \"\"\"At eight o'clock on Thursday morning Arthur didn't feel very good.\"\"\"\n# Tokenize\ntokens = nltk.word_tokenize(sentence)\ntagged = nltk.pos_tag(tokens)\n\n# Identify named entities\nentities = nltk.chunk.ne_chunk(tagged)\n\n# Display a parse tree\nt = treebank.parsed_sents('wsj_0001.mrg')[0]\nt.draw()\n</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\8929f04fe36dd073da87fce9cf5c55a1.jpeg\"/></p>\n<p>12、spaCy</p>\n<p><code>spaCy</code> 是一个免费的开源库，用于  <code>Python</code> 中的高级 NLP。它可以用于构建处理大量文本的应用程序；也可以用来构建信息提取或自然语言理解系统，或者对文本进行预处理以进行深度学习。</p>\n<pre><code>  import spacy\n\n  texts = [\n      \"Net income was $9.4 million compared to the prior year of $2.7 million.\",\n      \"Revenue exceeded twelve billion dollars, with a loss of $1b.\",\n  ]\n\n  nlp = spacy.load(\"en_core_web_sm\")\n  for doc in nlp.pipe(texts, disable=[\"tok2vec\", \"tagger\", \"parser\", \"attribute_ruler\", \"lemmatizer\"]):\n      # Do something with the doc here\n      print([(ent.text, ent.label_) for ent in doc.ents])\n</code></pre>\n<p><code>nlp.pipe</code> 生成 Doc 对象，因此我们可以对它们进行迭代并访问命名实体预测：</p>\n<pre><code>[('$9.4 million', 'MONEY'), ('the prior year', 'DATE'), ('$2.7 million', 'MONEY')]\n[('twelve billion dollars', 'MONEY'), ('1b', 'MONEY')]</code></pre>\n<p> 代码量太大了，偷个懒就不写啦~ 全部已经打包好了，需要的点击下载拿走哦！！！↓</p>\n<p><a class=\"has-card\" href=\"https://docs.qq.com/doc/DT1p2Q2JvbXhZTU9P\" title=\"人工智能库与资料\"><span class=\"link-card-box\"><span class=\"link-title\">人工智能库与资料</span><span class=\"link-desc\">腾讯文档-在线文档</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"image\\file_web_doc_16@2x-445bfd69f0.png\"/>https://docs.qq.com/doc/DT1p2Q2JvbXhZTU9P</span></span></a></p>\n</div>\n</div>"}