{"blogid": "122688940", "writerAge": "码龄4年", "writerBlogNum": "36", "writerCollect": "213", "writerComment": "14", "writerFan": "14", "writerGrade": "3级", "writerIntegral": "579", "writerName": "一只小程序员啊", "writerProfileAdress": "writer_image\\profile_122688940.jpg", "writerRankTotal": "124905", "writerRankWeekly": "381499", "writerThumb": "38", "writerVisitNum": "51315", "blog_read_count": "20164", "blog_time": "已于 2022-01-25 17:25:47 修改", "blog_title": "全网最全Linux 运行jar包的几种方式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h3><a id=\"Linux_jar_0\"></a>一、Linux 运行jar包的几种方式</h3>\n<ul><li><strong>方式一： java -jar xxx.jar</strong></li></ul>\n<p>最常用的启动jar包命令，特点：当前ssh窗口被锁定，可按CTRL + C打断程序运行，或直接关闭窗口，程序退出</p>\n<ul><li><strong>方式二： java -jar xxx.jar &amp;</strong></li></ul>\n<p>&amp;代表在后台运行 ，<code>ctrl+c</code> 后程序也会继续运行</p>\n<ul><li><strong>方式三： nohup java -jar xxx.jar &amp;</strong></li></ul>\n<p>nohup 即 no hang up 不挂断 ，关闭SSH客户端连接，程序不会中止运行</p>\n<p>缺省情况下该作业的所有输出被重定向到nohup.out的文件中，如何让输出的内容重定向到指定的文件呢？</p>\n<ul><li><strong>方式四：nohup java -jar xxx.jar &gt;aaa.log &amp;</strong></li></ul>\n<p>command &gt;out.file 是将commandd 输出重定向到out.flie文件，即输出内容不打印到屏幕上，而是输出到out.file文件中</p>\n<ul><li><strong>方式五：nohup java -jar spring-boot-demo.jar &gt; springboot.log 2&gt;&amp;1 &amp;</strong></li></ul>\n<p><img alt=\"363c896c36dec3783bb93a3ebe312a58.png\" src=\"image\\363c896c36dec3783bb93a3ebe312a58.png\"/></p>\n<ul><li><strong>方式六：nohup java -jar spring-boot-demo.jar &gt; /dev/null 2&gt;&amp;1 &amp;</strong></li></ul>\n<p>​ 不输出日志</p>\n<h3><a id=\"nohup___28\"></a>二、nohup 和 &amp;</h3>\n<h6><a id=\"_30\"></a>使用<code>&amp;</code>后台运行程序：</h6>\n<ul><li>结果会输出到终端</li><li>使用<code>Ctrl + C</code>，程序免疫</li><li>关闭<code>session</code>，程序关闭</li></ul>\n<h6><a id=\"nohup_36\"></a>使用<code>nohup</code>运行程序：</h6>\n<ul><li>结果默认会输出到<code>nohup.out</code></li><li>使用<code>Ctrl + C</code>，程序关闭</li><li>关闭<code>session</code>，程序免疫</li></ul>\n<p>平日线上经常使用<code>nohup</code>和<code>&amp;</code>配合来启动程序</p>\n<h3><a id=\"_devnull_21_44\"></a>三、&gt; /dev/null 2&gt;&amp;1</h3>\n<ul><li> <p>​ <code>&gt;</code> 标准重定向符，允许我们创建一个 0KB 的空文件。它通常用于重定向一个命令的输出到一个新文件中。在没有命令的情况下使用重定向符号时，它会创建一个文件。</p> </li><li> <p>​ <code>/dev/null</code> 可以看作<code>黑洞</code>，等价于一个只写文件。所有写入它的内容都会永远丢失，尝试从它那儿读取内容则什么也读不到。也就是将所有产生的日志将被丢弃</p> </li><li> <p>​ <code>2&gt;&amp;1</code> 符号<code>&gt;&amp;</code>是一个整体代表将标准错误2重定向到标准输出1,如果是<code>2&gt;1</code>的话，代表将标准错误输出到文件1，而不是重定向到标准输出流</p> </li></ul>\n<p>​ 先了解下1和2在Linux中代表什么</p>\n<p>​ 当Linux执行一个程序时，会自动打开三个流</p>\n<p>​ <code>0</code>：标准输入流（默认是键盘）<br/> ​ <code>1</code>：标准输出流（默认是屏幕）<br/> ​ <code>2</code>：标准错误流（默认是屏幕）</p>\n<table><thead><tr><th>名称</th><th>代码</th><th>操作符</th><th>java中表示</th><th>Linux中文件描述符</th></tr></thead><tbody><tr><td>标准输入(stdin)</td><td>0</td><td>&lt; 或 &lt;&lt;</td><td>System.in</td><td>/dev/stdin -&gt; /proc/self/fd/0 -&gt; /dev/pts/0</td></tr><tr><td>标准输出(stdout)</td><td>1</td><td>&gt;, &gt;&gt;, 1&gt; 或 1&gt;&gt;</td><td>System.out</td><td>/dev/stdout -&gt; /proc/self/fd/1 -&gt; /dev/pts/0</td></tr><tr><td>标准错误输出(stderr)</td><td>2</td><td>2&gt; 或 2&gt;&gt;</td><td>System.err</td><td>/dev/stderr -&gt; /proc/self/fd/2 -&gt; /dev/pts/0</td></tr></tbody></table>\n<p>​ 从上表看出，平常使用的 <code>echo 'hello' &gt; a.log</code> 可以写成 <code>echo 'hello' 1&gt; a.log</code></p>\n<p>​ 为什么2&gt;&amp;1要放在后面 ? 如下一条shell命令 <code>nohup java -jar app.jar &gt;log 2&gt;&amp;1 &amp;</code> 我们不妨把1和2都理解是一个指针,然后来看上面的语句就是这样的：</p>\n<p>​ 本来1-----&gt;屏幕 （1指向屏幕）<br/> ​ 执行&gt;log后， 1-----&gt;log (1指向log)<br/> ​ 执行2&gt;&amp;1后， 2-----&gt;1 (2指向1，而1指向log,因此2也指向了log)</p>\n<p>​ 再来分析下<code>nohup java -jar app.jar 2&gt;&amp;1 &gt;log &amp;</code><br/> ​ 本来1-----&gt;屏幕 （1指向屏幕）<br/> ​ 执行2&gt;&amp;1后， 2-----&gt;1 (2指向1，而1指向屏幕,因此2也指向了屏幕)<br/> ​ 执行&gt;log后， 1-----&gt;log (1指向log，2还是指向屏幕)<br/> ​ 所以这就不是我们想要的结果。</p>\n<p>​ 每次都写\"&gt;log 2&gt;&amp;1\"太麻烦，能简写吗？可以简写成 <code>&amp;&gt;log</code> 或 <code>&gt;&amp;log</code></p>\n<p>​ <code>nohup java -jar app.jar 2&gt;&amp;1 &gt;log &amp;</code> 简写成：<code>nohup java -jar app.jar &amp;&gt;log &amp;</code></p>\n<p>​</p>\n<p>​</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}