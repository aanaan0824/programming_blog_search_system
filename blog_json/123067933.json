{"blogid": "123067933", "writerAge": "码龄9年", "writerBlogNum": "34", "writerCollect": "524", "writerComment": "34", "writerFan": "74", "writerGrade": "3级", "writerIntegral": "751", "writerName": "网安小小白", "writerProfileAdress": "writer_image\\profile_123067933.jpg", "writerRankTotal": "54189", "writerRankWeekly": "84866", "writerThumb": "115", "writerVisitNum": "56107", "blog_read_count": "1254", "blog_time": "于 2022-02-22 14:43:22 发布", "blog_title": "Rust 语言入门", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"Rust_0\"></a>Rust</h1>\n<h2><a id=\"_2\"></a>安装</h2>\n<p>略</p>\n<h2><a id=\"Hello_world_6\"></a>Hello world</h2>\n<ol><li> <p>新建一个文件夹</p> </li><li> <p>创建main.rs文件</p> </li><li> <p>编写代码</p> <pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>编译运行</p> <pre><code>rustc main.rs\n</code></pre> </li></ol>\n<h2><a id=\"cargo_28\"></a>cargo</h2>\n<p>cargo是一个依赖管理和编译集成工具。</p>\n<pre><code>cargo --version\n</code></pre>\n<h3><a id=\"cargo__36\"></a>cargo 创建工程</h3>\n<pre><code>cargo new hello_cargo\n</code></pre>\n<p>cargo.toml是依赖管理文件</p>\n<p>编译</p>\n<pre><code>cargo build\n</code></pre>\n<p>运行</p>\n<pre><code>.\\target\\debug\\hello_cargo.exe\nor \ncargo run\n</code></pre>\n<p>发布</p>\n<pre><code>cargo build --release\n</code></pre>\n<h2><a id=\"Guessing_Game_64\"></a>Guessing Game</h2>\n<ol><li> <p>创建新项目</p> <pre><code>cargo new gassing_game\n</code></pre> </li><li> <p>运行一下</p> <pre><code>cargo run\n</code></pre> </li><li> <p>输入输出</p> <pre><code class=\"prism language-rust\"><span class=\"token comment\">//使用标准库，不需要外部依赖的库</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input a number!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//定义一个字符串变量</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> guess <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//获取标准输入</span>\n    <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to read line\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//打印变量</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"your input is {}\"</span><span class=\"token punctuation\">,</span>guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre> </li><li> <p>导入随机数库</p> <pre><code>//cargo.toml\n\n[dependencies]\nrand = \"0.8.3\"\n</code></pre> </li><li> <p>更新镜像源</p> <pre><code>在user/.cargo/config\n[source.crates-io]\nregistry = \"https://github.com/rust-lang/crates.io-index\"\nreplace-with = 'ustc'\n[source.ustc]\nregistry = \"git://mirrors.ustc.edu.cn/crates.io-index\"\n</code></pre> </li><li> <p>编译,下载依赖</p> <pre><code>cargo build\n</code></pre> </li><li> <p>使用随机数</p> <pre><code class=\"prism language-rust\">\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">rand<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Rng</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> secret_number <span class=\"token operator\">=</span> <span class=\"token namespace\">rand<span class=\"token punctuation\">::</span></span><span class=\"token function\">thread_rng</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gen_range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secret number is {}\"</span><span class=\"token punctuation\">,</span>secret_number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>比较</p> <pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">rand<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Rng</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>cmp<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> secret_number <span class=\"token operator\">=</span> <span class=\"token namespace\">rand<span class=\"token punctuation\">::</span></span><span class=\"token function\">thread_rng</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gen_range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secret number is {}\"</span><span class=\"token punctuation\">,</span>secret_number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input a number!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> guess <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to read line\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> guess<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span> <span class=\"token operator\">=</span> guess<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please input a number!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You guessed {}\"</span><span class=\"token punctuation\">,</span>guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">match</span> guess<span class=\"token punctuation\">.</span><span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>secret_number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Less</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"too small!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Greater</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"too big!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Equal</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You win!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre> </li><li> <p>循环</p> <pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">rand<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Rng</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>cmp<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> secret_number <span class=\"token operator\">=</span> <span class=\"token namespace\">rand<span class=\"token punctuation\">::</span></span><span class=\"token function\">thread_rng</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gen_range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// println!(\"secret number is {}\",secret_number);a</span>\n    <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input a number:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> guess <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to read line\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> guess<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span> <span class=\"token operator\">=</span> guess<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please input a number!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You guessed {}\"</span><span class=\"token punctuation\">,</span>guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">match</span> guess<span class=\"token punctuation\">.</span><span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>secret_number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Less</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"too small!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Greater</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"too big!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Equal</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You win!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre> </li></ol>\n<h2><a id=\"_190\"></a>变量</h2>\n<ol><li> <p>创建变量项目</p> <pre><code>cargo new variables\n</code></pre> </li><li> <p>未加mut的变量不可修改值</p> <pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> x <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is {}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    x<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is {}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre> </li><li> <p>常量</p> <pre><code class=\"prism language-rust\">    <span class=\"token keyword\">const</span> <span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"max value is {}\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>shadow</p> <pre><code class=\"prism language-rust\">    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y is {}\"</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//7</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y is {}\"</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//9</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y is {}\"</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//7</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str's len is {}\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li></ol>\n<h2><a id=\"Data_Types_239\"></a>Data Types</h2>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"46\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not a number!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//illegal</span>\n <span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"46\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not a number!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"integer_246\"></a>integer</h3>\n<p><img alt=\"image-20220129120123860\" src=\"image\\ecb7cdc2573802d400cdf3db0c8c96e0.png\"/></p>\n<h3><a id=\"float_250\"></a>float</h3>\n<p>默认64位</p>\n<h3><a id=\"bool_256\"></a>bool</h3>\n<h3><a id=\"char_260\"></a>char</h3>\n<p>可以有表情</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> em <span class=\"token operator\">=</span> '🆒'<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"Tuple_270\"></a>Tuple</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> tup <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.3</span><span class=\"token punctuation\">,</span><span class=\"token char string\">'h'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> tup<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x:{},y:{},z:{}\"</span><span class=\"token punctuation\">,</span>tup<span class=\"token number\">.0</span><span class=\"token punctuation\">,</span>tup<span class=\"token number\">.1</span><span class=\"token punctuation\">,</span>tup<span class=\"token number\">.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"Array_278\"></a>Array</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//100 个 0</span>\n</code></pre>\n<h3><a id=\"Never_286\"></a>Never</h3>\n<p>一种数据类型，使用！表示，用于永远不可能有返回值的函数；</p>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#![feature(never_type)]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">123</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_301\"></a>动态类型</h3>\n<h3><a id=\"_305\"></a>零类型</h3>\n<p>大小为零ZST，空</p>\n<h4><a id=\"_309\"></a>底类型</h4>\n<p>Never的实现，无</p>\n<h2><a id=\"Function_313\"></a>Function</h2>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    a\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"control_flow_327\"></a>control flow</h2>\n<h3><a id=\"if_329\"></a>if</h3>\n<p>类型一致；</p>\n<p>condition只能是bool值</p>\n<p>多于2个else if 使用match代替</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> condition <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"condition is true!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"condition is false!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<pre><code>let x = if condition { 6 } else {\"six\"};//类型不一样，编译错误\nlet x = if condition { 6 } else {7};\n</code></pre>\n<h3><a id=\"loop_359\"></a>loop</h3>\n<p>loop前面可以有标号</p>\n<p>break只跳出一层、</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test_loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token lifetime-annotation symbol\">'flag</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count is {}\"</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> remainder <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"remainder = {}\"</span><span class=\"token punctuation\">,</span>remainder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> remainder <span class=\"token operator\">==</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span><span class=\"token number\">2</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">break</span> <span class=\"token lifetime-annotation symbol\">'flag</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            remainder <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n        count<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end count is {}\"</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"while_390\"></a>while</h3>\n<p>while true不行,控制流分析。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">while_true</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    x<span class=\"token comment\">//resolve</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test_while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> iter <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> iter <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iter is {}\"</span><span class=\"token punctuation\">,</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        iter <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"for_415\"></a>for</h3>\n<p>本质是一个迭代器。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test_for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span>  a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> e <span class=\"token keyword\">in</span> a <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n \n    <span class=\"token keyword\">for</span> e <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"ownership_432\"></a>ownership</h2>\n<p>拥有权是针对堆区的数据来说的。</p>\n<p>对于基本数据类型都是存在栈上，所以无关拥有权</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}{}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> flag1 <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>对于堆上的数据，赋值、传参都会移交拥有权，对于这种操作叫做move， 。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">string_onwership</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token comment\">//s1,s2都不可用了</span>\n    <span class=\"token keyword\">let</span> s3 <span class=\"token operator\">=</span> <span class=\"token function\">gives_onwership</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//s3借用了hello的拥有权</span>\n    <span class=\"token function\">get_onwership</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//s3move给了函数</span>\n    <span class=\"token comment\">//s3不可用了</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">gives_onwership</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_onwership</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_473\"></a>引用</h3>\n<p>不移交拥有权</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">get_len</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">{<!-- --></span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">get_len</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s1 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">change</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">push_str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可变引用只能有一次。</p>\n<p>不可变引用可以有无限次。</p>\n<pre><code class=\"prism language-rust\">\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">quote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//错误</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}{}\"</span><span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">,</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">quote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}{}\"</span><span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">,</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可变变量不能同时存在可变引用和不可变引用，可以有多个不可变引用。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">quote1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> my_str <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A mutable string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> first_unmutable_reference <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>my_str<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> second_unmutable_reference <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>my_str<span class=\"token punctuation\">;</span>\n     <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} {}\"</span><span class=\"token punctuation\">,</span> first_unmutable_reference<span class=\"token punctuation\">,</span> second_unmutable_reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可变变量不能同时存在多个可变引用。</p>\n<p>可变引用移交所有权。</p>\n<p>引用的传递叫借用。</p>\n<h3><a id=\"_546\"></a>切片</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"Struct_557\"></a>Struct</h2>\n<p>三种</p>\n<ul><li> <p>正常具名结构体</p> </li><li> <p>元组</p>\n<ul><li> <p>NewType</p> <pre><code>一个元组结构体只有一个字段的时候，我们称之为New Type 模式\nstruct Interger(i32);\ntype Int = i32;\n</code></pre> </li><li> <p>也可以使用type 关键字为一个类型创建别名</p> </li></ul> </li><li> <p>单元结构体：没有任何子段的结构体</p> </li></ul>\n<p>define</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Student</span> <span class=\"token punctuation\">{<!-- --></span>\n    email<span class=\"token punctuation\">:</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token punctuation\">:</span><span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i16</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>initial</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">{<!-- --></span>\n    email<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123@163.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gre\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token punctuation\">:</span><span class=\"token number\">23.1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">{<!-- --></span>\n        name<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">..</span>a\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//此方法会move</span>\n</code></pre>\n<p>访问</p>\n<pre><code class=\"prism language-rust\"><span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>c<span class=\"token number\">.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_614\"></a>方法</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Rectangle</span><span class=\"token punctuation\">{<!-- --></span>\n    width<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n    height<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">area</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>height\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> rect <span class=\"token operator\">=</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">{<!-- --></span>\n    width<span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    height<span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> squ <span class=\"token operator\">=</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">::</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>squ<span class=\"token punctuation\">.</span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"Enums_641\"></a>Enums</h2>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">IpAddr</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token constant\">V4</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">V6</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> four <span class=\"token operator\">=</span> <span class=\"token class-name\">IpAddr</span><span class=\"token punctuation\">::</span><span class=\"token constant\">V4</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// println!(\"{}\",four);</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"option_655\"></a>option</h3>\n<p>Rust没有null</p>\n<p>提供了Option，预导入了，可以直接使用。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/// No value</span>\n    <span class=\"token attribute attr-name\">#[lang = <span class=\"token string\">\"None\"</span>]</span>\n    <span class=\"token attribute attr-name\">#[stable(feature = <span class=\"token string\">\"rust1\"</span>, since = <span class=\"token string\">\"1.0.0\"</span>)]</span>\n    <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/// Some value `T`</span>\n    <span class=\"token attribute attr-name\">#[lang = <span class=\"token string\">\"Some\"</span>]</span>\n    <span class=\"token attribute attr-name\">#[stable(feature = <span class=\"token string\">\"rust1\"</span>, since = <span class=\"token string\">\"1.0.0\"</span>)]</span>\n    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token attribute attr-name\">#[stable(feature = <span class=\"token string\">\"rust1\"</span>, since = <span class=\"token string\">\"1.0.0\"</span>)]</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\">    <span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span><span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> b<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//error 类型不同</span>\n</code></pre>\n<h3><a id=\"match_680\"></a>match</h3>\n<p>if let</p>\n<p>while let</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Coin</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Penny</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Nickel</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Dime</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Quarter</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">value_in_cents</span><span class=\"token punctuation\">(</span>coin<span class=\"token punctuation\">:</span><span class=\"token class-name\">Coin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">match</span> coin <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Penny</span><span class=\"token operator\">=&gt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Nickel</span><span class=\"token operator\">=&gt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Dime</span><span class=\"token operator\">=&gt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Quarter</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token number\">20</span><span class=\"token operator\">+</span><span class=\"token number\">5</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">plus_one</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span><span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">match</span> x <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">None</span> <span class=\"token operator\">=&gt;</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">value_in_cents</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Nickel</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token function\">plus_one</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token number\">0u8</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">match</span> v <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token number\">1</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _ <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">0u8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_736\"></a>指针</h2>\n<ul><li>原生指针</li><li>引用</li><li>函数指针</li><li>智能指针</li></ul>\n<h3><a id=\"_743\"></a>原生指针</h3>\n<p>原生指针不安全，需要使用unsafe，两种</p>\n<pre><code>*const T\n*mut T\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> ptr_x <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> x <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> ptr_y <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">*</span>y <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsafe</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">*</span>ptr_x <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span>ptr_y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x: {}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Box是在堆上创建内容。</p>\n<h3><a id=\"_767\"></a>智能指针</h3>\n<p>非Rust独有，借鉴于C++</p>\n<p>Rust默认将变量分配到栈空间，使用Box可以分配到堆空间，并且可以自动析构。</p>\n<p>Box,可以通过<code>*</code> 解引用获取T</p>\n<p>智能指针不止Box</p>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#[derive(Debug)]</span>\n <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>\n     x<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n     y<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> origin <span class=\"token operator\">=</span> <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> p2 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>origin<span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"PackageCrateModule_794\"></a>Package,Crate,Module</h2>\n<h2><a id=\"_798\"></a>集合</h2>\n<ul><li>线性：向量，双端队列，链表</li><li>Key-Value:无序哈希表，有序哈希表</li><li>集合类型：无序集合，有序集合</li><li>优先队列：二叉堆（优先队列）</li></ul>\n<h3><a id=\"vector_805\"></a>vector</h3>\n<ul><li>标准库提供</li><li>可以存储多个值</li><li>只能存储相同数据类型</li><li>值在内存中连续存放</li></ul>\n<p>创建</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> v<span class=\"token punctuation\">:</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>更新</p>\n<p>要么读，要么写</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \nv<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>获取</p>\n<pre><code class=\"prism language-rust\">    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n    v<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> third<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The third element is {}\"</span><span class=\"token punctuation\">,</span>third<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">match</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>third<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The third element is {}\"</span><span class=\"token punctuation\">,</span>third<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">None</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"None\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">let</span> third<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//panic</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The third element is {}\"</span><span class=\"token punctuation\">,</span>third<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">match</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//ok</span>\n        <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>third<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The third element is {}\"</span><span class=\"token punctuation\">,</span>third<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">None</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"None\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>遍历</p>\n<pre><code class=\"prism language-rust\">    <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> ele <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span>v <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> v <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> ele <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> v<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">*</span>ele <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>删除</p>\n<ul><li>出作用域就会删除</li></ul>\n<pre><code>\n</code></pre>\n<p>方不同数据类型</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">SpreadsheetCell</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Float</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">f64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span>\n        <span class=\"token class-name\">SpreadsheetCell</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">SpreadsheetCell</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Float</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">SpreadsheetCell</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"String_893\"></a>String</h3>\n<ul><li>Byte的集合</li><li>一些方法 \n  <ul><li>将byte解析为文本</li></ul> </li><li>UTF-8</li></ul>\n<h4><a id=\"str_900\"></a>str</h4>\n<p>切片形式str</p>\n<h4><a id=\"_904\"></a>创建</h4>\n<pre><code>fn create(){\n    let mut  s = String::new();\n    let data = \"initial contents\";\n    let s = data.to_string();\n    let s1 = String::from(\"initial contents\");\n    let utf_char = String::from(\"こんにちは、世界!\");\n    \n}\n</code></pre>\n<h4><a id=\"_917\"></a>更新</h4>\n<p>类比vector</p>\n<p>使用+类似add方法</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">::</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">push_str</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char string\">'l'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_933\"></a>拼接</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s3 <span class=\"token operator\">=</span> s1 <span class=\"token operator\">+</span> <span class=\"token operator\">&amp;</span>s2<span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s4 <span class=\"token operator\">=</span> <span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}-{}\"</span><span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">,</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>s4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_946\"></a>访问</h4>\n<p>字符簇</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//error</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// let a = s[1];</span>\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4</span>\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ᖃᐅᔨᒪᒻᒪᕆᑦᑐᓄᑦ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//33</span>\n    <span class=\"token comment\">//Unicode 标量值</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">type_check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"शुभाः दुनिया!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_980\"></a>切割</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> hello <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"शुभाः दुनिया!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>hello<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4 panic, each char 3 bytes</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"hashmap_990\"></a>hashmap</h3>\n<ul><li>HashMap&lt;K,V&gt;</li></ul>\n<h4><a id=\"_994\"></a>创建</h4>\n<ul><li>堆上</li></ul>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>collections<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> scores<span class=\"token punctuation\">:</span><span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> scores <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    scores<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">create2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> teams <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> initial_score <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> scores<span class=\"token punctuation\">:</span><span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span>_<span class=\"token punctuation\">,</span>_<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> teams<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>initial_score<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_1017\"></a>所有权</h4>\n<ul><li> <p>对于实现了copy trait的类型，值会被复制到HashMap中</p> </li><li> <p>对于拥有所有权的值（String),值会移动（move），所有权归HashMap</p> <pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">ownership</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"32\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> person <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// person.insert(key, value);</span>\n    <span class=\"token comment\">// println!(\"{}{}\",key,value);//error </span>\n    person<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>key<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}{}\"</span><span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ok</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li></ul>\n<h4><a id=\"_1035\"></a>获取</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> scores <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    scores<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    scores<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> team_name <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> score <span class=\"token operator\">=</span> scores<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>team_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">match</span> score <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"score is {}\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">None</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"team not exist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_1051\"></a>遍历</h4>\n<pre><code class=\"prism language-rust\">\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> scores <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    scores<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    scores<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span>scores<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}-{}\"</span><span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_1065\"></a>更新</h4>\n<ul><li>HashMap大小可变</li><li>每个k对应一个v</li><li>更新 \n  <ul><li>存在，替换，保留，合并</li><li>不存在，添加</li></ul> </li></ul>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> scores <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    scores<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    scores<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span>scores<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    scores<span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or_insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    scores<span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or_insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span>scores<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//{\"blue\": 25, \"yellow\": 50}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_1085\"></a>错误处理</h2>\n<ul><li>编译错误并处理</li><li>错误分类 \n  <ul><li>可恢复，文件未找到</li><li>不可恢复，超出index</li></ul> </li><li>Rust没有异常处理机制 \n  <ul><li>可恢复，Result</li><li>不可恢复：panic！宏</li></ul> </li></ul>\n<h3><a id=\"panic_1095\"></a>panic！</h3>\n<p>当panic！宏执行时：</p>\n<ul><li>程序打印错误信息</li><li>展开unwind，清理调用栈Stack</li><li>退出程序</li></ul>\n<p>可以选择终止调用栈：</p>\n<ul><li>不清理，直接退出</li><li>内存需要os进行清理</li></ul>\n<p>让程序文件更小，可以把展开改为终止：</p>\n<p>cargo.toml的profile</p>\n<ul><li>panic = ‘abort’</li></ul>\n<pre><code class=\"prism language-toml\">[profile.release]\npanic = 'abort'\n</code></pre>\n<p>错误信息</p>\n<pre><code>RUST_BACKTRACE=1\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// panic!(\"crash and burn\");</span>\n    <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    v<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>不带–release</p>\n<h3><a id=\"Result_1139\"></a>Result</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token attribute attr-name\">#[stable(feature = <span class=\"token string\">\"rust1\"</span>, since = <span class=\"token string\">\"1.0.0\"</span>)]</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token attribute attr-name\">#[stable(feature = <span class=\"token string\">\"rust1\"</span>, since = <span class=\"token string\">\"1.0.0\"</span>)]</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span>  <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>fs<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> f <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> file<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error opening file {:?}\"</span><span class=\"token punctuation\">,</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">ErrorKind</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">example2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> f <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> file<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">match</span> error<span class=\"token punctuation\">.</span><span class=\"token function\">kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">ErrorKind</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">NotFound</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">match</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>fc<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> fc<span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error creating file {:?}\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            other_error <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error opening the file {:?}\"</span><span class=\"token punctuation\">,</span>other_error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>闭包</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">closure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_else</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>error<span class=\"token closure-punctuation punctuation\">|</span></span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> error<span class=\"token punctuation\">.</span><span class=\"token function\">kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">ErrorKind</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">NotFound</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_else</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>error<span class=\"token closure-punctuation punctuation\">|</span></span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error create file:{:?}\"</span><span class=\"token punctuation\">,</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error opening file {:?}\"</span><span class=\"token punctuation\">,</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"unwrap_1197\"></a>unwrap</h4>\n<p>match表达式的一个快捷方法；</p>\n<ul><li>如果是ok就返回ok的结果</li><li>err返回panic！宏</li></ul>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">example3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"expect_1210\"></a>expect</h4>\n<p>可以指定错误信息</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">example4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无法打开文件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_1222\"></a>传播错误</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token function\">example5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Read</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">example5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span>  f <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> f <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>f<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">match</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>？错误传播快捷方式</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">example6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> s<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>？与from函数，可以有错误转换。</p>\n<p>优化</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">example7</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> s<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"panic_1265\"></a>什么时候用panic</h4>\n<p>原则</p>\n<ul><li>在定义一个可能失败的函数是优先考虑Result</li><li>否则panic</li></ul>\n<p>场景</p>\n<ul><li>演示概念</li><li>原型代码：unwrap、expect</li><li>测试</li></ul>\n<p>一定是ok时可以使用unwrap</p>\n<ul><li>传入无意义参数时</li><li>调用外部不可控代码</li><li>可预期的用Result</li><li>值验证</li></ul>\n<h2><a id=\"Trait_1287\"></a>泛型，Trait,生命周期</h2>\n<p>提取函数消除重复代码</p>\n<h3><a id=\"_1291\"></a>泛型</h3>\n<p>提高复用能力</p>\n<p>相对于模板</p>\n<h4><a id=\"_1297\"></a>泛型函数</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">largest</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> largest <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token operator\">&amp;</span>item <span class=\"token keyword\">in</span> list<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> item <span class=\"token operator\">&gt;</span> largest<span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// todo </span>\n            largest <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    largest\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"struct_1311\"></a>struct泛型</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Point</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> int_type <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> float_type <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">:</span><span class=\"token number\">4.1</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span><span class=\"token number\">4.5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>单态化</p>\n<h3><a id=\"Trait_1327\"></a>Trait</h3>\n<p>零成本抽象。</p>\n<p>抽象的定义共享的行为</p>\n<p>类似接口。</p>\n<h4><a id=\"_1335\"></a>定义</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token class-name\">Summary</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_1343\"></a>实现</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">NewsArticle</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> headline<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> location<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> author<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> content<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Summary</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">NewsArticle</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{},by {} ({})\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>headline<span class=\"token punctuation\">,</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_1359\"></a>默认实现</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token class-name\">Summary</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// fn summarize(&amp;self)-&gt;String;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Read more ..\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_1370\"></a>作为参数</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">notify</span><span class=\"token punctuation\">(</span>item <span class=\"token punctuation\">:</span> <span class=\"token keyword\">impl</span> <span class=\"token class-name\">Summary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"news:{}\"</span><span class=\"token punctuation\">,</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">notify1</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">impl</span> <span class=\"token class-name\">Summary</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Display</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"news:{}\"</span><span class=\"token punctuation\">,</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">notify2</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">U</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">:</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">String</span> \n<span class=\"token keyword\">where</span>\n    <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">Summary</span><span class=\"token operator\">+</span><span class=\"token class-name\">Display</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">U</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">Clone</span><span class=\"token operator\">+</span><span class=\"token class-name\">Debug</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"news:{}\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_1391\"></a>作为返回</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">notify</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">impl</span> <span class=\"token class-name\">Summary</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">NewsArticle</span><span class=\"token punctuation\">{<!-- --></span>\n        headline<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"震惊！一男子竟独自玩恐怖游戏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        location<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"四川\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        author<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        content<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ssssss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">largest</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">PartialOrd</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Copy</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> largest <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token operator\">&amp;</span>item <span class=\"token keyword\">in</span> list<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> item <span class=\"token operator\">&gt;</span> largest<span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// todo </span>\n            largest <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    largest\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_1418\"></a>生命周期</h3>\n<ul><li>每个引用都有生命周期</li><li>大多数情况是隐式的，可被推断的</li><li>手动标志</li></ul>\n<p>借用检查器</p>\n<h4><a id=\"_1426\"></a>标注</h4>\n<p>不影响原生命周期</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> str1 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"adbcd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">longest</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">as_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">longest</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        x\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        y\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"_1449\"></a>测试</h2>\n<p>测试是一个函数，另开一个线程，如果没有panic就通过</p>\n<p>3A操作：</p>\n<ul><li>准备数据</li><li>运行代码</li><li>断言结果</li></ul>\n<h3><a id=\"_1461\"></a>测试函数</h3>\n<p>加上标志</p>\n<p>cargo test进行测试</p>\n<p>创建</p>\n<pre><code>cargo new add –lib\n</code></pre>\n<p>代码</p>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#[cfg(test)]</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">tests</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">it_works</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>运行</p>\n<pre><code>cargo test\n</code></pre>\n<p>失败测试样例</p>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#[test]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">another</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eeeeerror\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_1502\"></a>断言</h3>\n<p>assert！判断状态是否为空</p>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#[test]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">is_true</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">assert!</span><span class=\"token punctuation\">(</span><span class=\"token function\">ret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>assert_eq!</p>\n<p>assert_nq!</p>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#[test]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test_add_two</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token function\">add_two</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"should_panic_1524\"></a>should_panic</h3>\n<p>发送恐慌通过测试</p>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#[test]</span>\n<span class=\"token attribute attr-name\">#[should_panic(expected = <span class=\"token string\">\"aa\"</span>)]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">another</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aba\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"Result_1536\"></a>测试使用Result</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#[test]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"testthread_1550\"></a>test-thread</h3>\n<h3><a id=\"_1552\"></a>显示输出</h3>\n<p>失败println会打印，否则不会。</p>\n<p>可以使用</p>\n<pre><code>--show-output\n</code></pre>\n<h3><a id=\"_1562\"></a>按名称运行测试</h3>\n<pre><code>cargo test add_two\ncargo test add\n</code></pre>\n<h3><a id=\"_1569\"></a>忽略测试</h3>\n<pre><code>#[ingore]\n</code></pre>\n<pre><code>cargo test --ingored\n</code></pre>\n<h3><a id=\"_1579\"></a>测试分类</h3>\n<ul><li>单元测试</li><li>集成测试</li></ul>\n<h4><a id=\"_1584\"></a>单元测试</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#[cfg(test)]</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">tests</span> <span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>测试私有函数</p>\n<pre><code>引入\nuse super::*\n\n</code></pre>\n<h4><a id=\"_1601\"></a>集成测试</h4>\n<p>创建tests目录</p>\n<p>目录下的文件被特殊对待。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> adder<span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[test]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">it_add_two</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token namespace\">adder<span class=\"token punctuation\">::</span></span><span class=\"token function\">add_two</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>其中的帮助函数</p>\n<p>创建一个common文件夹</p>\n<p>文件夹下面方帮助函数。</p>\n<h2><a id=\"_1624\"></a>实例-命令行程序</h2>\n<p>grep工具</p>\n<h3><a id=\"_1628\"></a>接受参数</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>env<span class=\"token punctuation\">;</span> <span class=\"token comment\">//collect</span>\n\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> args<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> filename <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worlds: {:?}\"</span><span class=\"token punctuation\">,</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file: {:?}\"</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"_1644\"></a>读取文件</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>env<span class=\"token punctuation\">;</span> <span class=\"token comment\">//collect</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>fs<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> args<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> filename <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worlds: {:?}\"</span><span class=\"token punctuation\">,</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file: {:?}\"</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token namespace\">fs<span class=\"token punctuation\">::</span></span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Something went wrong reading the file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"_1663\"></a>重构：改进模块和错误处理</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>env<span class=\"token punctuation\">;</span> <span class=\"token comment\">//collect</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>fs<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> args<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token namespace\">fs<span class=\"token punctuation\">::</span></span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Something went wrong reading the file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Config</span><span class=\"token punctuation\">{<!-- --></span>\n    query<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> filename <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Config</span><span class=\"token punctuation\">{<!-- --></span>query<span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>创建lib.rs</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>fs<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Config</span><span class=\"token punctuation\">{<!-- --></span>\n    query<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'static</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span>  <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not enough aruguments\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> filename <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">{<!-- --></span>query<span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">:</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token namespace\">fs<span class=\"token punctuation\">::</span></span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file contents {}\"</span><span class=\"token punctuation\">,</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>main.rs</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>env<span class=\"token punctuation\">;</span> <span class=\"token comment\">//collect</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>process<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> grep_project<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> args<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token namespace\">grep_project<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_else</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>error<span class=\"token closure-punctuation punctuation\">|</span></span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Problem parsing arguments:{}\"</span><span class=\"token punctuation\">,</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">process<span class=\"token punctuation\">::</span></span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">grep_project<span class=\"token punctuation\">::</span></span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Application error:{}\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">process<span class=\"token punctuation\">::</span></span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"TDD_1740\"></a>使用TDD开发库功能</h3>\n<p>Test Driven Development</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>fs<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Config</span><span class=\"token punctuation\">{<!-- --></span>\n    query<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'static</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span>  <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not enough aruguments\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> filename <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">{<!-- --></span>query<span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">:</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token namespace\">fs<span class=\"token punctuation\">::</span></span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">search</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span>contents<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> results <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> contents<span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    results\n<span class=\"token punctuation\">}</span>\n<span class=\"token attribute attr-name\">#[cfg(test)]</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">tests</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">use</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">on_result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token string\">\"duct\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\nRust:\nsafe,fast,productive.\nPick three\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"safe,fast,productive.\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_1797\"></a>使用环境变量</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>fs<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>env<span class=\"token punctuation\">;</span> <span class=\"token comment\">//collect</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Config</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> query<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> filename<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> case_sensitive<span class=\"token punctuation\">:</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'static</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span>  <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not enough aruguments\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> filename <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> case_sensitive <span class=\"token operator\">=</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CASE_INSENSITIVE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">is_err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">{<!-- --></span>query<span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">,</span>case_sensitive<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">:</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token namespace\">fs<span class=\"token punctuation\">::</span></span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>case_sensitive<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> <span class=\"token function\">search_case_insensitive</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">search</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span>contents<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> results <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> contents<span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    results\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">search_case_insensitive</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span>contents<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> results <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">to_lowercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> contents<span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">to_lowercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    results\n<span class=\"token punctuation\">}</span>\n<span class=\"token attribute attr-name\">#[cfg(test)]</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">tests</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">use</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">case_sensitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token string\">\"duct\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\nRust:\nsafe,fast,productive.\nPick three\nDuck tape\"</span>\n<span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"safe,fast,productive.\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">case_insensitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token string\">\"rUsT\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\nRust:\nsafe,fast,productive.\nPick three\nDuck tape\nTrust me\"</span>\n<span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Rust:\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Trust me\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token function\">search_case_insensitive</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_1885\"></a>将错误消息写入标准错误</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>env<span class=\"token punctuation\">;</span> <span class=\"token comment\">//collect</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>process<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> grep_project<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> args<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token namespace\">grep_project<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_else</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>error<span class=\"token closure-punctuation punctuation\">|</span></span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">eprintln!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Problem parsing arguments:{}\"</span><span class=\"token punctuation\">,</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">process<span class=\"token punctuation\">::</span></span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">grep_project<span class=\"token punctuation\">::</span></span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">eprintln!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Application error:{}\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">process<span class=\"token punctuation\">::</span></span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n   \n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<h2><a id=\"_1912\"></a>闭包</h2>\n<p>也叫匿名函数；</p>\n<p>可以作为返回值、参数；</p>\n<p>可以捕获环境变量；</p>\n<p>可以推断输入类型，输出类型；</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>thread<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>time<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">get_schdule</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_schdule</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> compute <span class=\"token operator\">=</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>args<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token closure-punctuation punctuation\">|</span></span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slowly ....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_secs</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        args\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> time<span class=\"token operator\">&gt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done  .. {}\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">compute</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done .. {}\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">compute</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>类型推断。</p>\n<h3><a id=\"_1946\"></a>结构体闭包</h3>\n<p>Fn Trait由标准库提供</p>\n<p>所有闭包得实现以下之一：</p>\n<ul><li>Fn</li><li>FnMut</li><li>FnOnce</li></ul>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>thread<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>time<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">get_schdule</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span>  <span class=\"token type-definition class-name\">Cacher</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">i32</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    calculation<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span><span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token class-name\">Cacher</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">i32</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>calculation<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Cacher</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Cacher</span><span class=\"token punctuation\">{<!-- --></span>\n            calculation<span class=\"token punctuation\">,</span>\n            value<span class=\"token punctuation\">:</span><span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">value</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>arg<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">match</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>v<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">None</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>calculation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                v\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_schdule</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    \n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> compute <span class=\"token operator\">=</span> <span class=\"token class-name\">Cacher</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>args<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token closure-punctuation punctuation\">|</span></span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slowly ....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_secs</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        args\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> time<span class=\"token operator\">&gt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done  .. {}\"</span><span class=\"token punctuation\">,</span>compute<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done .. {}\"</span><span class=\"token punctuation\">,</span>compute<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Cache限制：只能保留一个值，类型问题</p>\n<p>使用哈希map解决；使用模板</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>thread<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>time<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>collections<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">get_schdule</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> compute <span class=\"token operator\">=</span> <span class=\"token class-name\">Cacher</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>args<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token closure-punctuation punctuation\">|</span></span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> compute<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> compute<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span>  <span class=\"token type-definition class-name\">Cacher</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">i32</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    calculation<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span><span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token class-name\">Cacher</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">i32</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>calculation<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Cacher</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Cacher</span><span class=\"token punctuation\">{<!-- --></span>\n            calculation<span class=\"token punctuation\">,</span>\n            value<span class=\"token punctuation\">:</span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">value</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>arg<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">match</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">*</span>v<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">None</span> <span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>calculation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                v\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"_2053\"></a>环境捕获</h3>\n<p>函数不能捕获环境，捕获需要消耗内存。</p>\n<ul><li> <p>取得所有权：FnOnce</p> <pre><code class=\"prism language-rust\">\n</code></pre> </li><li> <p>取得可变借用：FnMute</p> <pre><code class=\"prism language-rust\">\n</code></pre> </li><li> <p>不可变借用：Fn</p> <pre><code class=\"prism language-rust\">\n</code></pre> </li></ul>\n<p>使用move可以移动所有权，多用于多线程</p>\n<h4><a id=\"filter_2079\"></a>filter</h4>\n<p>过滤条件为false的值。</p>\n<p>保留条件为true的值。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#[derive(Debug)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Shoe</span><span class=\"token punctuation\">{<!-- --></span>\n    size<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n    style<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">shoes_in_my_szie</span><span class=\"token punctuation\">(</span>shoes<span class=\"token punctuation\">:</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Shoe</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>shoe_size<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Shoe</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    shoes<span class=\"token punctuation\">.</span><span class=\"token function\">into_iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> shoe_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span>\n        <span class=\"token class-name\">Shoe</span><span class=\"token punctuation\">{<!-- --></span>\n            size<span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n            style<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sport\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Shoe</span><span class=\"token punctuation\">{<!-- --></span>\n            size<span class=\"token punctuation\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n            style<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"releax\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Shoe</span><span class=\"token punctuation\">{<!-- --></span>\n            size<span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n            style<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> in_my_size <span class=\"token operator\">=</span> <span class=\"token function\">shoes_in_my_szie</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> e <span class=\"token keyword\">in</span> in_my_size<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:#?}\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_2118\"></a>迭代器</h2>\n<ul><li>惰性的</li></ul>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> v1 <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> v1_iter <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> val <span class=\"token keyword\">in</span> v1_iter<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"Iterator_trait_2130\"></a>Iterator trait</h3>\n<p>所有迭代器都实现了 Iterator trait</p>\n<p>要有：</p>\n<ul><li>返回，item</li><li>实现，next-&gt;元素的不可变引用</li></ul>\n<p>into_iter，取得所有权</p>\n<p>iter_mut，可变引用</p>\n<h3><a id=\"_2145\"></a>迭代器的产生与消费</h3>\n<p>必须实现next，是消耗型的。例如：sum</p>\n<p>迭代器适配器，是生产型的。例如map</p>\n<h3><a id=\"_2153\"></a>自定义</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Counter</span><span class=\"token punctuation\">{<!-- --></span>\n    count<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Counter</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Counter</span><span class=\"token punctuation\">{<!-- --></span>\n            count<span class=\"token punctuation\">:</span><span class=\"token number\">0</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Iterator</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">type</span> <span class=\"token class-name\">Item</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">next</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Item</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">None</span>                          \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test_diy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> counter <span class=\"token operator\">=</span> <span class=\"token class-name\">Counter</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_2185\"></a>循环与迭代器</h3>\n<p>迭代器会更快一点。</p>\n<p>不产生额外开销。</p>\n<h2><a id=\"_2193\"></a>发布</h2>\n<h2><a id=\"_2199\"></a>智能指针</h2>\n<p>指针：指向变量在内存中的地址</p>\n<p>Rust中常用的指针是引用</p>\n<ul><li>使用&amp;</li><li>借用它指向的值</li><li>没有额外开销</li></ul>\n<h3><a id=\"_2209\"></a>引用计数智能指针</h3>\n<ul><li>记录引用者的数量，让一份数据多个人同时持有</li><li>没有使用者自动清理。</li></ul>\n<p>String和Vec</p>\n<p>使用结构体实现，</p>\n<p>Deraf</p>\n<p>Drop</p>\n<h3><a id=\"BoxT_2222\"></a>Box</h3>\n<p>实现了</p>\n<p>Deraf</p>\n<p>Drop</p>\n<p>允许在heap上存储数据</p>\n<p>在Stack有一点内存，指向heap</p>\n<p>可使用与递归</p>\n<p>无限大小</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">::</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Nil</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">List</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Nil</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">box_test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Box解决</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">::</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Nil</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">List</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Nil</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">box_test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"Deraf_2267\"></a>Deraf</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test_drefe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>ops<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Deref</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">MyBox</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">impl</span> <span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token class-name\">MyBox</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">MyBox</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">MyBox</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token class-name\">Deref</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">MyBox</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">type</span> <span class=\"token class-name\">Target</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">deref</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test_drefe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token class-name\">MyBox</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"Drop_2303\"></a>Drop</h3>\n<p>网络，文件资源释放</p>\n<p>不能手动调用</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">CustomSmartPointer</span><span class=\"token punctuation\">{<!-- --></span>\n    data<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Drop</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">CustomSmartPointer</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">drop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Droping data: {}\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test_drop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">CustomSmartPointer</span><span class=\"token punctuation\">{<!-- --></span>\n        data<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CustomSmartPointer constructed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可以用标准库的drop，来丢弃。</p>\n<pre><code class=\"prism language-rust\"> <span class=\"token function\">drop</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"RcT_2332\"></a>Rc</h3>\n<p>引用计数智能指针</p>\n<ul><li>多重所有权</li><li>单线程</li><li>不在预导入</li><li>Rc::clone只拷贝引用，不克隆数据</li><li>不可变引用</li></ul>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>rc<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">List</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Nil</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test_rc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> a  <span class=\"token operator\">=</span> <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count after creating {}\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">strong_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count after creating {}\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">strong_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count after creating {}\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">strong_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"RefCell_2362\"></a>RefCell</h3>\n<ul><li>唯一所有权。</li><li>可变、不可变借用，在运行时检查。</li></ul>\n<h4><a id=\"weak_2369\"></a>weak防止内存泄漏</h4>\n<h2><a id=\"_2375\"></a>并发</h2>\n<p>Concurrent:程序的不同部分之间独立的运行</p>\n<p>Parallel:程序的不同部分同时运行</p>\n<p>Rust无畏并发</p>\n<h3><a id=\"_2383\"></a>多线程</h3>\n<p>问题</p>\n<ul><li>竞争状态</li><li>死锁</li></ul>\n<p>使用OS，1：1模型，运行时小</p>\n<p>语言自己的线程，M:N模型，运行时大</p>\n<p>Rust权衡运行时的支持，标准库只提供了1：1模型。</p>\n<p>使用spawn创建线程</p>\n<p>主线程结束，另一个线程也结束。提供joinhandle等待线程结束才结束。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>thread<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>time<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> handle <span class=\"token operator\">=</span> <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1, number {} from the spawned thread!\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_millis</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// handle.join().unwrap();</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1, number {} from the main thread\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_millis</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    handle<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h4><a id=\"move_2422\"></a>move闭包</h4>\n<p>可以使用其他线程的数据。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">spawn_move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> handle <span class=\"token operator\">=</span> <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"here's a vector {:?}\"</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    handle<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_2436\"></a>消息传递</h3>\n<p>Channel</p>\n<p>包含：发送端，接受端</p>\n<h4><a id=\"_2442\"></a>创建</h4>\n<p>mpsc(多生产者，单消费者)</p>\n<p>mpsc::channel</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>sync<span class=\"token punctuation\">::</span></span>mpsc<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>thread<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">create_channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span>rx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">mpsc<span class=\"token punctuation\">::</span></span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> val <span class=\"token operator\">=</span> <span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tx<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> received <span class=\"token operator\">=</span> rx<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//block</span>\n    <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got {}\"</span><span class=\"token punctuation\">,</span>received<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>try_recv非阻塞。</p>\n<h3><a id=\"_2464\"></a>所有权</h3>\n<ul><li>send后所有权就移动了。</li></ul>\n<h3><a id=\"_2468\"></a>克隆创建多个发送者</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>sync<span class=\"token punctuation\">::</span></span>mpsc<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>thread<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>time<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">clone_sender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span>rx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">mpsc<span class=\"token punctuation\">::</span></span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> tx1  <span class=\"token operator\">=</span> <span class=\"token namespace\">mpsc<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Sender</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> vals <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1: hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1: from\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1: the\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1: thread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> val <span class=\"token keyword\">in</span> vals<span class=\"token punctuation\">{<!-- --></span>\n            tx1<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_millis</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> vals <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2: hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2: from\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2: the\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2: thread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> val <span class=\"token keyword\">in</span> vals<span class=\"token punctuation\">{<!-- --></span>\n            tx<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_millis</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> received <span class=\"token keyword\">in</span> rx<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got: {}\"</span><span class=\"token punctuation\">,</span>received<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_2509\"></a>共享内存并发</h3>\n<p>channel是单所有权，共享是多所有权</p>\n<p>Mutex只允许一个线程来访问某些数据。</p>\n<p>通过lock，和unlock来使用</p>\n<pre><code>use std::sync::Mutex;\nfn create_mutex(){\n    let m = Mutex::new(5);\n    {\n        let mut num = m.lock().unwrap();\n        *num = 6;\n    }//unlock\n    println!(\"m = {:?}\",m);\n\n}\n</code></pre>\n<h4><a id=\"_2530\"></a>多线程多所有权</h4>\n<p>Rc要实现send</p>\n<p>Arc，原子Rc</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>sync<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Arc</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>rc<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">create_mutex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> num <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>num <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token comment\">//unlock</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m = {:?}\"</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">mutex_thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token class-name\">Arc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> handles <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token class-name\">Arc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> handle <span class=\"token operator\">=</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> num <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        handles<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> handle <span class=\"token keyword\">in</span> handles<span class=\"token punctuation\">{<!-- --></span>\n        handle<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result {}\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"Send_Sync_trait_2569\"></a>Send Sync trait</h3>\n<p>send 转移所有权。</p>\n<p>几乎所有类型都实现了send</p>\n<p>Sync允许多个线程访问</p>\n<p>Rc，未实现，Mutex实现了。</p>\n<h2><a id=\"_2581\"></a>面向对象</h2>\n<p>封装、继承、多态</p>\n<p>Rust，封装；没有继承，trait可以复用；多态，泛型和trait约束；</p>\n<h3><a id=\"_2587\"></a>实现面向对象的设计模式</h3>\n<h3><a id=\"_2589\"></a>状态模式</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Post</span><span class=\"token punctuation\">{<!-- --></span>\n    state<span class=\"token punctuation\">:</span><span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Post</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Post</span><span class=\"token punctuation\">{<!-- --></span>\n            state<span class=\"token punctuation\">:</span><span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Draft</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            content<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add_text</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">push_str</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">content</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">as_ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">request_review</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">request_review</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">trait</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">request_review</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">content</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>post<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string\">\"\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Draft</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">State</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Draft</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">request_review</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PendingReview</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">self</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">PendingReview</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">State</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">PendingReview</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">request_review</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">self</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Published</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Published</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">State</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Published</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">request_review</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">self</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">self</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">content</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>post<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">&amp;</span>post<span class=\"token punctuation\">.</span>content\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token class-name\">Blog</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> post  <span class=\"token operator\">=</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    post<span class=\"token punctuation\">.</span><span class=\"token function\">add_text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I ate a salad for lunch today\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    post<span class=\"token punctuation\">.</span><span class=\"token function\">request_review</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    post<span class=\"token punctuation\">.</span><span class=\"token function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"_2680\"></a>模式</h2>\n<p>模式匹配</p>\n<p>有，字面值，数值、结构体、枚举、变量、通配符、占位符</p>\n<p>使用模式</p>\n<ul><li>match</li><li>if let</li><li>while let</li><li>for</li><li>let</li><li>函数参数</li></ul>\n<h3><a id=\"_2695\"></a>可辩驳型</h3>\n<p>无可辩驳的，let x = 5;</p>\n<p>可辩驳的 ， if let some(v) = a_value;</p>\n<pre><code>- 忽略\n_x 不会警告\n_ 不会绑定\n{x,..}\n(x,..,y)\n</code></pre>\n<p>match + if</p>\n<pre><code>match v{\n\t4|5|6|7|8 if ..\n}\n</code></pre>\n<h2><a id=\"_2721\"></a>高级特效</h2>\n<h3><a id=\"Rust_2723\"></a>不安全Rust</h3>\n<p>不保证内存安全</p>\n<ul><li>解引用原始指针</li><li>调用unsafe函数或方法</li><li>访问或修改可变静态变量</li><li>实现unsafe trait</li></ul>\n<p>unsafe仍会检查借用</p>\n<h4><a id=\"_2734\"></a>解引用原始指针</h4>\n<p>与c交换</p>\n<pre><code>*mut T\n*const T,这里是类型名的一部分\n\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> num <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> r1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>num <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> r2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> num <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsafe</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r1:{}\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>r1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r2:{}\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>r2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> address <span class=\"token operator\">=</span> <span class=\"token number\">0x012345usize</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> address <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsafe</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r:{}\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"Trait_2763\"></a>高级Trait</h3>\n<pre><code>pub trait Iterator {\n    type Item;\n    fn next(&amp;mut self) -&gt;Option&lt;Self::Item&gt;;\n}\n</code></pre>\n<p>使用不同的参数可以为一个struct多次实现</p>\n<p>重载</p>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#[derive(Debug)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>ops<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Add</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Add</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">type</span> <span class=\"token class-name\">Output</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>other<span class=\"token punctuation\">:</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>\n            x<span class=\"token punctuation\">:</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> other<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>\n            y<span class=\"token punctuation\">:</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> other<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test_ops</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>\n        x<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        y<span class=\"token punctuation\">:</span><span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> p2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>\n        x<span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        y<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span>p1<span class=\"token operator\">+</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>完全限定语法</p>\n<pre><code>&lt;Type as Trait&gt;::function(receiver_if_method,next_arg,..);\n</code></pre>\n<p>类型别名</p>\n<pre><code>type elem = i32;//此后elem表示i32类型\n</code></pre>\n<p>函数指针</p>\n<pre><code>Fn,FnMut,FnOnce\n</code></pre>\n<h2><a id=\"_2825\"></a>宏</h2>\n<p>宏是元编程。</p>\n<p>声明宏，快弃用了</p>\n<p>过程宏，</p>\n<ul><li>自定义派生</li><li>属性宏</li><li>函数宏</li></ul>\n<h2><a id=\"_2839\"></a>结课项目</h2>\n<p>单线程</p>\n<pre><code class=\"prism language-rust\">\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>net<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">TcpListener</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">TcpStream</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">Read</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Write</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>fs<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> listener <span class=\"token operator\">=</span> <span class=\"token class-name\">TcpListener</span><span class=\"token punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1:7878\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> stream <span class=\"token keyword\">in</span> listener<span class=\"token punctuation\">.</span><span class=\"token function\">incoming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> stream <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connection established!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">handle_connection</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">handle_connection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">mut</span> stream<span class=\"token punctuation\">:</span><span class=\"token class-name\">TcpStream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span>  buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// println!(\"Request: {}\",String::from_utf8_lossy(&amp;buffer[..]));</span>\n    <span class=\"token keyword\">let</span> get <span class=\"token operator\">=</span> <span class=\"token string\">b\"GET / HTTP/1.1\\r\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>status_line<span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">starts_with</span><span class=\"token punctuation\">(</span>get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"HTTP/1.1 200 OK\\r\\n\\r\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello.html\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"404.html\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}{}\"</span><span class=\"token punctuation\">,</span>status_line<span class=\"token punctuation\">,</span><span class=\"token namespace\">fs<span class=\"token punctuation\">::</span></span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>完整</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>net<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">TcpListener</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">TcpStream</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">Read</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Write</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>fs<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span>prelude<span class=\"token punctuation\">::</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>thread<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>time<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">server<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">ThreadPool</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> listener <span class=\"token operator\">=</span> <span class=\"token class-name\">TcpListener</span><span class=\"token punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1:7878\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> pool <span class=\"token operator\">=</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> stream <span class=\"token keyword\">in</span> listener<span class=\"token punctuation\">.</span><span class=\"token function\">incoming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> stream <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pool<span class=\"token punctuation\">.</span><span class=\"token function\">excute</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">handle_connection</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">handle_connection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">mut</span> stream<span class=\"token punctuation\">:</span><span class=\"token class-name\">TcpStream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span>  buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// println!(\"Request: {}\",String::from_utf8_lossy(&amp;buffer[..]));</span>\n    <span class=\"token keyword\">let</span> get <span class=\"token operator\">=</span> <span class=\"token string\">b\"GET / HTTP/1.1\\r\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>status_line<span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">starts_with</span><span class=\"token punctuation\">(</span>get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"HTTP/1.1 200 OK\\r\\n\\r\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello.html\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"404.html\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}{}\"</span><span class=\"token punctuation\">,</span>status_line<span class=\"token punctuation\">,</span><span class=\"token namespace\">fs<span class=\"token punctuation\">::</span></span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>thread<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>sync<span class=\"token punctuation\">::</span></span>mpsc<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>sync<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Arc</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>sync<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Message</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">NewJob</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Job</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Terminate</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">ThreadPool</span><span class=\"token punctuation\">{<!-- --></span>\n    workers<span class=\"token punctuation\">:</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Worker</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>    \n    sender<span class=\"token punctuation\">:</span><span class=\"token namespace\">mpsc<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Sender</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Message</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">ThreadPool</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">:</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">ThreadPool</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">assert!</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span>receiver<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">mpsc<span class=\"token punctuation\">::</span></span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> receiver <span class=\"token operator\">=</span> <span class=\"token class-name\">Arc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>receiver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> workers <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">with_capacity</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> id <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>size<span class=\"token punctuation\">{<!-- --></span>\n            workers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Worker</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span><span class=\"token class-name\">Arc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>receiver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">ThreadPool</span> <span class=\"token punctuation\">{<!-- --></span>workers<span class=\"token punctuation\">,</span>sender<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">excute</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">F</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">:</span><span class=\"token class-name\">F</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">where</span> \n        <span class=\"token class-name\">F</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">FnOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span><span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> job <span class=\"token operator\">=</span> <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">NewJob</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Drop</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">ThreadPool</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">drop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sending terminate message to all workers.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>workers<span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Terminate</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shutting down all workers.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">for</span> worker <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>workers<span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shutting down worker {}\"</span><span class=\"token punctuation\">,</span>worker<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> worker<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                thread<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n        <span class=\"token punctuation\">}</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// struct Job;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Job</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">FnBox</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span>  <span class=\"token type-definition class-name\">Worker</span><span class=\"token punctuation\">{<!-- --></span>\n    id<span class=\"token punctuation\">:</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span>\n    thread<span class=\"token punctuation\">:</span><span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">JoinHandle</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">trait</span> <span class=\"token class-name\">FnBox</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">call_box</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token operator\">&lt;</span><span class=\"token class-name\">F</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">FnOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token class-name\">FnBox</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">F</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">call_box</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Worker</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span>receiver<span class=\"token punctuation\">:</span><span class=\"token class-name\">Arc</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Mutex</span><span class=\"token operator\">&lt;</span><span class=\"token namespace\">mpsc<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Receiver</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Message</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Worker</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> thread <span class=\"token operator\">=</span>  <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token keyword\">loop</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">let</span> message  <span class=\"token operator\">=</span> receiver<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">match</span> message<span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">NewJob</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Worker {} got a job;executing\"</span><span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    job<span class=\"token punctuation\">.</span><span class=\"token function\">call_box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Terminate</span> <span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Worker {} was told to terminate\"</span><span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">{<!-- --></span>id<span class=\"token punctuation\">,</span>thread<span class=\"token punctuation\">:</span><span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_3001\"></a>构建脚本</h2>\n<p>有c库,链接c库等,生成rust模块</p>\n<ol><li> <p>添加依赖</p> <pre><code>[package]\nname = \"script_learning\"\nversion = \"0.1.0\"\nedition = \"2021\"\nbuild = \"build.rs\"\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n\n</code></pre> </li><li> <p>编写build.rs</p> <pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>env<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>fs<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Write</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>path<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Path</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> out_dir <span class=\"token operator\">=</span> <span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OUT_DIR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> dest_path <span class=\"token operator\">=</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>out_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.rs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dest_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">write_all</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"\n        pub fn say_hello() -&gt; &amp;'static str{\n            \\\"hello\\\"\n        }\n    \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>调用</p> <pre><code class=\"prism language-rust\">\n<span class=\"token macro property\">include!</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token macro property\">concat!</span><span class=\"token punctuation\">(</span><span class=\"token macro property\">env!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OUT_DIR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/hello.rs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">say_hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre> </li></ol>\n<p>外部</p>\n<ol><li> <p>依赖</p> <pre><code>[build-dependencies]\ncc = '1.0'\n\n</code></pre> </li><li> <p>build.rs</p> <pre><code class=\"prism language-rust\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">crate</span> <span class=\"token module-declaration namespace\">cc</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token namespace\">cc<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Build</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/hello.c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>hello.c</p> <pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world 11\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>main.rs</p> <pre><code class=\"prism language-rust\">\n<span class=\"token comment\">// include!{concat!(env!(\"OUT_DIR\"),\"/hello.rs\")}</span>\n<span class=\"token keyword\">extern</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// println!(\"{}\",say_hello());</span>\n    <span class=\"token keyword\">unsafe</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre> </li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}