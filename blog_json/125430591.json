{"blogid": "125430591", "writerAge": "码龄2年", "writerBlogNum": "244", "writerCollect": "49", "writerComment": "7", "writerFan": "5", "writerGrade": "5级", "writerIntegral": "2501", "writerName": "我为杰伦代言", "writerProfileAdress": "writer_image\\profile_125430591.jpg", "writerRankTotal": "9674", "writerRankWeekly": "7589", "writerThumb": "54", "writerVisitNum": "34897", "blog_read_count": "5775", "blog_time": "已于 2022-06-28 08:35:46 修改", "blog_title": "Java枚举详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"Java%E6%9E%9A%E4%B8%BE%E8%AF%A6%E8%A7%A3-toc\" style=\"margin-left:40px;\"><a href=\"#Java%E6%9E%9A%E4%B8%BE%E8%AF%A6%E8%A7%A3\">Java枚举详解</a></p>\n<p id=\"%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D\">基本介绍</a></p>\n<p id=\"1.%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%AE%9E%E7%8E%B0%E6%9E%9A%E4%B8%BE-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%AE%9E%E7%8E%B0%E6%9E%9A%E4%B8%BE\">1.自定义类实现枚举</a></p>\n<p id=\"2.%E4%BD%BF%E7%94%A8enum%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9E%E7%8E%B0%E6%9E%9A%E4%B8%BE-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E4%BD%BF%E7%94%A8enum%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9E%E7%8E%B0%E6%9E%9A%E4%B8%BE\">2.使用enum关键字实现枚举</a></p>\n<p id=\"%E4%BD%BF%E7%94%A8enum%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9E%E7%8E%B0%E6%9E%9A%E4%B8%BE%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BD%BF%E7%94%A8enum%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9E%E7%8E%B0%E6%9E%9A%E4%B8%BE%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">使用enum关键字实现枚举的注意事项</a></p>\n<p id=\"enum%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:80px;\"><a href=\"#enum%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\">enum的常用方法</a></p>\n<p id=\"enum%E7%9A%84%E4%BD%BF%E7%94%A8%E7%BB%86%E8%8A%82-toc\" style=\"margin-left:80px;\"><a href=\"#enum%E7%9A%84%E4%BD%BF%E7%94%A8%E7%BB%86%E8%8A%82\">enum的使用细节</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h2>Java枚举详解</h2>\n<h2 id=\"%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D\">基本介绍</h2>\n<ul><li> <p>枚举对应英文(enumeration,简写 enum)</p> </li><li> <p>枚举是一组常量的集合</p> </li><li> <p>枚举属于一种特殊的类，里面只包含一组有限的特定的对象</p> </li></ul>\n<ul><li> <p>不需要提供 setXxxx() 方法，因为枚举对象值通常为只读</p> </li><li> <p>对枚举对象/属性使用 <strong>static+final</strong> 共同修饰</p> </li></ul>\n<blockquote>\n<p><strong>static+final</strong> 只有修饰基本数据类型、String类型才不会加载类，修饰对象或者方法还是会加载类</p>\n<p>final 修饰对象(引用)只是保证引用的指向不变，但不能保证对象本身不变</p>\n</blockquote>\n<ul><li> <p>枚举对象名通常使用全部大写，与常量的命名规范一样</p> </li><li> <p>枚举对象根据需要，也可以有多个属性</p> </li></ul>\n<h2 id=\"1.%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%AE%9E%E7%8E%B0%E6%9E%9A%E4%B8%BE\">1.自定义类实现枚举</h2>\n<ul><li> <p>将构造器私有化，目的是防止被new出对象</p> </li><li> <p>去掉 setXxxx() 方法，防止属性被修改</p> </li><li> <p>在Season内部，直接创建固定对象</p> </li><li> <p>对外暴露对象(通过为对象添加 <strong>public static final</strong> 修饰符)</p> </li></ul>\n<pre><code class=\"language-java\">public class Demo03 {\n    public static void main(String[] args) {\n        System.out.println(Season.AUTUMN);\n        System.out.println(Season.SUMMER);\n    }\n}\nclass Season{\n    private String name;\n    private String desc;\n    //定义了四个对象\n    //加final是为了使引用不能被修改\n    public static final Season SPRING = new Season(\"春天\", \"温暖\");\n    public static final Season WINTER = new Season(\"冬天\", \"寒冷\");\n    public static final Season SUMMER = new Season(\"夏天\", \"炎热\");\n    public static final Season AUTUMN = new Season(\"秋天\", \"凉爽\");\n    \n    private Season(String name, String desc) {\n        this.name = name;\n        this.desc = desc;\n    }\n​\n    public String getName() {\n        return name;\n    }\n    public String getDesc() {\n        return desc;\n    }\n    @Override\n    public String toString() {\n        return \"Season{\" +\n                \"name='\" + name + '\\'' +\n                \", desc='\" + desc + '\\'' +\n                '}';\n    }\n}</code></pre>\n<p><img alt=\"\" height=\"190\" src=\"image\\9e4a7c60d1e4439e8fbe926537f37841.png\" width=\"641\"/></p>\n<h2 id=\"2.%E4%BD%BF%E7%94%A8enum%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9E%E7%8E%B0%E6%9E%9A%E4%B8%BE\">2.使用enum关键字实现枚举</h2>\n<ul><li> <p>使用 enum 关键字代替 class</p> </li><li> <p>常量对象名(实参列表)</p> </li><li> <p><strong>public static final</strong> Season2 SPRING = new Season2(\"春天\", \"温暖\"); <strong>等价于</strong> SPRING(\"春天\", \"温暖\");</p> </li><li> <p>如果有多个对象，需要使用 <strong>，</strong>间隔</p> </li><li> <p>如果使用 enum 关键字来实现枚举，要求将定义的常量对象写在最前面</p> </li></ul>\n<pre><code class=\"language-java\">public class Demo04 {\n    public static void main(String[] args) {\n        System.out.println(Season2.SPRING);\n        System.out.println(Season2.SUMMER);\n    }\n}\nenum  Season2{\n    SPRING(\"春天\", \"温暖\"),WINTER(\"夏天\", \"炎热\"),SUMMER(\"夏天\", \"炎热\"),AUTUMN(\"秋天\", \"凉爽\");\n​\n    private String name;\n    private String desc;\n​\n    private Season2(String name, String desc) {\n        this.name = name;\n        this.desc = desc;\n    }\n    public String getName() {\n        return name;\n    }\n    public String getDesc() {\n        return desc;\n    }\n    @Override\n    public String toString() {\n        return \"Season{\" +\n                \"name='\" + name + '\\'' +\n                \", desc='\" + desc + '\\'' +\n                '}';\n    }\n}</code></pre>\n<p><img alt=\"\" height=\"174\" src=\"image\\91fe152117b24045b00e6ac906e60273.png\" width=\"669\"/></p>\n<h3 id=\"%E4%BD%BF%E7%94%A8enum%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9E%E7%8E%B0%E6%9E%9A%E4%B8%BE%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><strong>使用enum关键字实现枚举的注意事项</strong></h3>\n<ul><li> <p>当我们使用enum关键字开发一个枚举类时，默认会继承Enum类；而且该枚举类是一个final类</p> </li></ul>\n<p><img alt=\"\" height=\"468\" src=\"image\\2d913d95573641638745d9732e62dce6.png\" width=\"794\"/></p>\n<ul><li> <p>如果使用无参构造器创建枚举对象，则可以省略小括号</p> </li><li> <p>当有多个枚举对象时，<strong>使用 ，隔开</strong>，最后以一个分号结尾</p> </li><li> <p>枚举对象必须放在枚举类的行首</p> </li></ul>\n<h3 id=\"enum%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\">enum的常用方法</h3>\n<blockquote>\n<p>使用关键字enum时，会隐式继承Enum类，这样就可以使用Enum类的相关方法</p>\n</blockquote>\n<ul><li> <p>toString()：Enum类已经重写过了，返回的是当前对象名；子类可以重写该方法，用于返回对象的属性信息</p> </li><li> <p>name()：返回当前对象名(常量名)，子类中不能重写</p> </li><li> <p>ordinal()：返回当前对象的位置号，默认从0开始</p> </li><li> <p>values()：返回当前枚举类中所有的常量对象</p> </li><li> <p>valueOf()：将字符串转换成已有的枚举对象，要求字符串必须为已有的常量名，否则报异常！</p> </li><li> <p>compareTo()：比较两个枚举常量的大小(编号),返回的结果是两个枚举常量的编号相减得到的数</p> </li></ul>\n<pre><code class=\"language-java\">public class Demo05 {\n    public static void main(String[] args) {\n        Season2 autumn = Season2.AUTUMN;\n\n        System.out.println(autumn.name());\n\n        System.out.println(autumn.ordinal());\n\n        Season2[] values = Season2.values();\n        for (Season2 season : values) {\n            System.out.println(season);\n        }\n\n        Season2 autumn1 = Season2.valueOf(\"AUTUMN\");\n        System.out.println(\"season1=\"+autumn1);\n        System.out.println(autumn == autumn1);\n\n        System.out.println(Season2.AUTUMN.compareTo(Season2.SUMMER));\n    }\n}\nenum  Season2{\n    SPRING(\"春天\", \"温暖\"),WINTER(\"冬天\", \"寒冷\"),SUMMER(\"夏天\", \"炎热\"),AUTUMN(\"秋天\", \"凉爽\");\n\n    private String name;\n    private String desc;\n\n    private Season2(String name, String desc) {\n        this.name = name;\n        this.desc = desc;\n    }\n    public String getName() {\n        return name;\n    }\n    public String getDesc() {\n        return desc;\n    }\n    @Override\n    public String toString() {\n        return \"Season{\" +\n                \"name='\" + name + '\\'' +\n                \", desc='\" + desc + '\\'' +\n                '}';\n    }\n}\n</code></pre>\n<p><img alt=\"\" height=\"341\" src=\"image\\89b9fe319ddc4fc5ac2a16e72516e446.png\" width=\"777\"/></p>\n<h3 id=\"enum%E7%9A%84%E4%BD%BF%E7%94%A8%E7%BB%86%E8%8A%82\">enum的使用细节</h3>\n<ul><li> <p>使用enum关键字创建的枚举类，就不能再继承其它类了，因为使用enum创建的枚举类会隐式的继承Enum类，而Java是单继承机制</p> </li><li> <p>枚举类和普通类一样，可以实现接口</p> </li></ul>\n<p></p>\n</div>\n</div>"}