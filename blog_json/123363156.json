{"blogid": "123363156", "writerAge": "码龄4年", "writerBlogNum": "38", "writerCollect": "65", "writerComment": "34", "writerFan": "10", "writerGrade": "3级", "writerIntegral": "456", "writerName": "墨苒孤", "writerProfileAdress": "writer_image\\profile_123363156.jpg", "writerRankTotal": "59539", "writerRankWeekly": "66929", "writerThumb": "46", "writerVisitNum": "33558", "blog_read_count": "1386", "blog_time": "已于 2022-03-16 23:48:31 修改", "blog_title": "【C#基础】ref 和 out 的区别", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>用途：<br/> 在C#中通过使用方法来获取返回值时，通常只能得到一个返回值。因此，<strong>当一个方法需要返回多个值的时候，就需要用到ref和out。</strong></p>\n<p><strong>正确的使用ref：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Program</span> pg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Program</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n            pg<span class=\"token punctuation\">.</span><span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span>  y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x={0},y={1}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            x <span class=\"token operator\">=</span> <span class=\"token number\">333</span><span class=\"token punctuation\">;</span>\n            y <span class=\"token operator\">=</span> <span class=\"token number\">444</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果为<br/> <img alt=\"x=521,y=520\" src=\"image\\e53011ee3732455fb1c28e352d43801a.png\"/></p>\n<p><strong>错误的使用ref：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Program</span> pg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Program</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//此处x,y没有进行初始化，则编译不通过。</span>\n            pg<span class=\"token punctuation\">.</span><span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span>  y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x={0},y={1}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            x <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n            y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>    \n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>总结：使用ref 必须在 <strong>调用方法前</strong> 对其进行<strong>初识化操作</strong></p>\n</blockquote>\n<p><strong>正确的使用out：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Program</span> pg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Program</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">233</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x={0},y={1}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\n        a <span class=\"token operator\">=</span> <span class=\"token number\">333</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//对a,b 在方法内进行了初识化，不会报错</span>\n        b <span class=\"token operator\">=</span> <span class=\"token number\">444</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果为<br/> <img alt=\"在这里插入图片描述\" src=\"image\\727414e11ffb4707a6560fa5e6812932.png\"/></p>\n<p><strong>错误的使用out：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Program</span> pg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Program</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">233</span><span class=\"token punctuation\">;</span>\n        pg<span class=\"token punctuation\">.</span><span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x={0},y={1}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//a,b在函数内部没有赋初值，则出现错误。</span>\n        a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>          <span class=\"token comment\">//a,b 没有进行 初始化 ，会报错</span>\n        b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>总结：out 的使用必须要在 <strong>方法内</strong> 进行 <strong>初始化</strong> ，才不会报错</p>\n</blockquote>\n<p><strong>口诀：<br/> ref有进有出，out（有出去的意思）只出不进。</strong></p>\n<p><strong>相同点：</strong><br/> 1、都能返回多个返回值。</p>\n<p>2、若要使用 ref 和out参数，则方法定义和调用方法都必须显式使用 ref和out 关键字。在方法中对参数的设置和改变将会直接影响函数调用之处(参数的初始值）。</p>\n<p><strong>不同点：</strong></p>\n<p>1、ref指定的参数在 <strong>函数调用前必须初始化</strong>，不能为空的引用。</p>\n<p>2、out指定的参数在进入函数时会清空自己，<strong>必须在函数内部（即方法中）赋初值。</strong></p>\n<p><strong>ref 和 out 本质上都是引用的传递</strong></p>\n<p><strong>out 例子</strong></p>\n<pre><code>public class Program\n    {\n        static void Main(string[] args)\n        {\n            string message = \"你好！\";  //原值\n            SendMessage(out message);\n            //使用了out，原值被更改了，\n            //使用out 必须在方法体内初始化值，在外面可以不用\n            Console.WriteLine(message); \n            Console.Read();//将当前窗体保留\n\n        }\n        public static void SendMessage(out string message) {\n\n            message = \"不好！\";\n            Console.WriteLine(message);\n           \n        }\n\n    }\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\711b08d64db647b78a51445dc699a582.png\"/></p>\n<p><strong>ref 例子</strong></p>\n<pre><code> public class Program\n    {\n        static void Main(string[] args)\n        {\n            string message = \"你好！\";  //原值\n            SendMessage(ref message);\n            //使用了ref，如果方法内进行了修改，原值就被修改了\n            //使用ref 必须在 进入 方法前初始化值。\n            Console.WriteLine(message); \n            Console.Read();//将当前窗体保留\n\n        }\n        public static void SendMessage(ref string message) {\n\n            message = \"不好！\";\n            Console.WriteLine(message);\n           \n        }\n\n    }\n    \n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8ecb349d4f3649128fe33f0a67dba033.png\"/></p>\n<p><strong>多个返回值举例（以 ref 为例）</strong></p>\n<pre><code> public class Program\n    {\n        static void Main(string[] args)\n        {\n            string message1 = \"你好！\";  \n            string message2 = \"小明！\";  \n            SendMessage(message1,ref message2);\n            Console.WriteLine(message1); //返回值1\n            Console.WriteLine(message2); //返回值2\n            Console.Read();//将当前窗体保留\n\n        }\n        public static string SendMessage(string message1,ref string message2) {\n\n            message2 = message2 + \"对message2进行处理\";\n            return message1;\n           \n        }\n\n    }\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ab9fac842cc94fcb962121a450c76c43.png\"/><br/> <strong>out 同理</strong></p>\n<p>参考博客：https://blog.csdn.net/qq373011556/article/details/81944690</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}