{"blogid": "122795839", "writerAge": "码龄5年", "writerBlogNum": "734", "writerCollect": "1463", "writerComment": "187", "writerFan": "304", "writerGrade": "6级", "writerIntegral": "8608", "writerName": "Always--Learning", "writerProfileAdress": "writer_image\\profile_122795839.jpg", "writerRankTotal": "3580", "writerRankWeekly": "30562", "writerThumb": "454", "writerVisitNum": "525458", "blog_read_count": "993", "blog_time": "于 2022-02-06 09:49:44 发布", "blog_title": "使用Python通过API对Github进行爬虫的思路", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"GitHub_AdvisoryRust_0\"></a>一、从GitHub Advisory上获取Rust漏洞数据的方法</h2>\n<blockquote>\n<p>执行下面的语句即可：</p>\n</blockquote>\n<pre><code class=\"prism language-shell\">python github_advisory_rust_vulnerability_first.py\n</code></pre>\n<h3><a id=\"_6\"></a>增量更新方法</h3>\n<blockquote>\n<p>执行下面的语句即可：</p>\n</blockquote>\n<pre><code class=\"prism language-shell\">python github_advisory_rust_update.py\n</code></pre>\n<h2><a id=\"Cargo_15\"></a>二、获取Cargo的第三方依赖数据的方法</h2>\n<blockquote>\n<p>执行下面的程序</p>\n</blockquote>\n<pre><code class=\"prism language-shell\">python3 Get_Cargo_First.py\npython3 clean_dataset.py\n</code></pre>\n<blockquote>\n<p>将cargo数据集：cargo_dependency_datasets.json</p>\n</blockquote>\n<h3><a id=\"_26\"></a>增量更新的方法</h3>\n<blockquote>\n<p>首先执行下面的语句：</p>\n</blockquote>\n<pre><code class=\"prism language-shell\">python3 Get_Cargo_First.py\n</code></pre>\n<blockquote>\n<p>接着执行下面的语句：</p>\n</blockquote>\n<pre><code class=\"prism language-shell\">python3 cargo_update.py\n</code></pre>\n<blockquote>\n<p>最后将产生这样的数据集：cargo_dependency_datasets.json 和 cargo_hashtable.json</p>\n</blockquote>\n<h2><a id=\"Rust_42\"></a>三、从Rust官方维护的漏洞数据库中获取数据的思路</h2>\n<blockquote>\n<p>下面是Rust官方维护的漏洞数据库对应的网址：</p>\n</blockquote>\n<p>https://rustsec.org/</p>\n<blockquote>\n<p>下面是Rust官方维护的漏洞数据库对应的Github仓库的地址：</p>\n</blockquote>\n<p>https://github.com/RustSec/advisory-db</p>\n<blockquote>\n<p>下面是仓库API对应的地址：</p>\n</blockquote>\n<p>https://api.github.com/repos/rustsec/advisory-db/contents</p>\n<blockquote>\n<p>下面是API使用的参考文档：</p>\n</blockquote>\n<p>https://docs.github.com/en/rest/reference/repos#get-repository-content</p>\n<p>一、找到所有的漏洞地址</p>\n<ol><li> <p>要考虑到仓库中的两个入口点：</p>\n<ul><li>crates</li><li>rust</li></ul> </li></ol>\n<blockquote>\n<p>crates对应的url是：</p>\n</blockquote>\n<p>https://api.github.com/repos/rustsec/advisory-db/contents/crates?ref=main</p>\n<blockquote>\n<p>rust对应的url是：</p>\n</blockquote>\n<p>https://api.github.com/repos/rustsec/advisory-db/contents/rust?ref=main</p>\n<ol start=\"2\"><li>找到两个入口点的所有的元素对应的md文档</li></ol>\n<blockquote>\n<p>以rust为出发点，找到的每一个元素的URL项的URL，是每一个漏洞对应的URL。</p>\n</blockquote>\n<blockquote>\n<p>以crates为出发点，找到每一个元素对应的URL项的URL，也是每一个漏洞对应的URL。</p>\n</blockquote>\n<ol start=\"3\"><li> <p>将所有的url构造一个URLS为最终的url集合。</p> </li><li> <p>向URLS中的每一个URL发起请求，将其中的content值进行base64解码，然后通过正则解析的方式获取关键信息，其中id作为key，然后整个元素作为value。</p> </li></ol>\n<h2><a id=\"RustSec_85\"></a>四、RustSec数据获取与更新</h2>\n<ol><li>爬取RustSec数据的方法，只需运行下面的语句。</li></ol>\n<pre><code class=\"prism language-py\">python3 rustsec_crawler<span class=\"token punctuation\">.</span>py\n</code></pre>\n<blockquote>\n<p>将输出 RustSec_Dataset.json 与 RustSec_HashTable.json</p>\n</blockquote>\n<ol start=\"2\"><li>增量更新的方法</li></ol>\n<pre><code class=\"prism language-py\">python3 rustsec_update<span class=\"token punctuation\">.</span>py\n</code></pre>\n<blockquote>\n<p>将更新 RustSec_Dataset.json 与 RustSec_HashTable.json</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}