{"blogid": "125252411", "writerAge": "码龄6年", "writerBlogNum": "227", "writerCollect": "2173", "writerComment": "220", "writerFan": "27918", "writerGrade": "6级", "writerIntegral": "5368", "writerName": "凌桓丶", "writerProfileAdress": "writer_image\\profile_125252411.jpg", "writerRankTotal": "5814", "writerRankWeekly": "497", "writerThumb": "1039", "writerVisitNum": "318171", "blog_read_count": "784", "blog_time": "于 2022-06-16 10:00:00 发布", "blog_title": "一文掌握谷歌 C++ 单元测试框架 GoogleTest", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_GoogleTest__4\">什么是 GoogleTest ？</a></li><li><ul><li><a href=\"#_5\">简介</a></li><li><a href=\"#_16\">单元测试</a></li><li><a href=\"#_23\">优势</a></li><li><a href=\"#_33\">环境搭建</a></li><li><ul><li><a href=\"#_GoogleTest_34\">安装 GoogleTest</a></li><li><ul><li><a href=\"#Bazel_35\">Bazel</a></li><li><a href=\"#Cmake_88\">Cmake</a></li></ul>\n</li><li><a href=\"#_159\">安装示例项目</a></li></ul>\n</li></ul>\n</li><li><a href=\"#GoogleTest__171\">GoogleTest 实战</a></li><li><ul><li><a href=\"#_173\">断言</a></li><li><ul><li><a href=\"#_175\">断言的概念</a></li><li><a href=\"#EXPECT__ASSERT_187\">EXPECT 与 ASSERT</a></li><li><a href=\"#_202\">自定义失败信息</a></li></ul>\n</li><li><a href=\"#_218\">功能测试</a></li><li><ul><li><a href=\"#TEST_220\">TEST</a></li><li><a href=\"#TEST_F_293\">TEST_F</a></li><li><a href=\"#_519\">运行测试</a></li><li><ul><li><a href=\"#_520\">调用测试</a></li><li><a href=\"#_main__539\">编写 main 函数</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_GoogleTest__4\"></a>什么是 GoogleTest ？</h1>\n<h2><a id=\"_5\"></a>简介</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e4a9c57889de48b1ab1d564eff3db625.png\"/></p>\n<center>\n GoogleTest\n</center>\n<br/> GoogleTest（简称 GTest） 是 Google 开源的一个跨平台的（Liunx、Mac OS X、Windows等）的 C++ 单元测试框架，可以帮助程序员测试 C++ 程序的结果预期。不仅如此，它还提供了丰富的断言、致命和非致命判断、参数化、”死亡测试”等等。 \n<p>GoogleTest 官网：https://google.github.io/googletest/<br/> ​GitHub 仓库：https://github.com/google/googletest</p>\n<p><br/></p>\n<h2><a id=\"_16\"></a>单元测试</h2>\n<p>单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。至于单元的大小或范围，并没有一个明确的标准，单元可以是一个函数、方法、类、功能模块或者子系统。<br/> 单元测试通常和白盒测试联系到一起，如果单从概念上来讲两者是有区别的，不过我们通常所说的单元测试和白盒测试都认为是和代码有关系的，所以在某些语境下也通常认为这两者是同一个东西。还有一种理解方式，单元测试和白盒测试就是对开发人员所编写的代码进行测试。</p>\n<p><br/></p>\n<h2><a id=\"_23\"></a>优势</h2>\n<ul><li><strong>测试是独立的和可重复的</strong>。GoogleTest 使每个测试用例运行在不同的对象上，从而使测试之间相互独立。当测试失败时，GoogleTest 允许单独运行它以进行快速调试。</li><li><strong>测试有良好的组织，可以反映被测试代码的结构。</strong> GoogleTest 将相关测试划分到一个测试组内，组内的测试能共享数据，使测试易于维护。</li><li><strong>测试是可移植的和可重复使用的。</strong> 与平台无关的代码，其测试代码也应该和平台无关，GoogleTest 能在不同的操作系统下工作，并且支持不同的编译器。</li><li><strong>当测试用例执行失败时，提供尽可能多的有效信息，以便定位问题。</strong> GoogleTest 不会在第一次测试失败时停止。相反，它只会停止当前测试并继续下一个测试。还可以设置报告非致命故障的测试，然后继续当前测试。因此，您可以在单个运行-编辑-编译周期中检测和修复多个错误。</li><li><strong>测试框架应该将测试编写者从琐事中解放出来，让他们专注于测试内容。</strong> GoogleTest 自动跟踪所有定义的测试，不需要用户为了运行它们而进行枚举。</li><li><strong>测试高效、快速</strong>。GoogleTest 能在测试用例之间复用测试资源，只需支付一次设置/拆分成本，并且不会使测试相互依赖，这样的机制使单元测试更加高效。</li></ul>\n<p><br/></p>\n<h2><a id=\"_33\"></a>环境搭建</h2>\n<h3><a id=\"_GoogleTest_34\"></a>安装 GoogleTest</h3>\n<h4><a id=\"Bazel_35\"></a>Bazel</h4>\n<p>首先创建一个工作区目录：</p>\n<pre><code class=\"prism language-shell\">$ <span class=\"token function\">mkdir</span> my_workspace <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> my_workspace\n</code></pre>\n<p>接着在工作区的根目录中创建一个 WORKSPACE 文件，并在其中引入外部依赖 GoogleTest，此时 Bazel 会自动去 Github 上拉取文件：</p>\n<pre><code class=\"prism language-shell\">load<span class=\"token punctuation\">(</span><span class=\"token string\">\"@bazel_tools//tools/build_defs/repo:http.bzl\"</span>, <span class=\"token string\">\"http_archive\"</span><span class=\"token punctuation\">)</span>\n\nhttp_archive<span class=\"token punctuation\">(</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">\"com_google_googletest\"</span>,\n  urls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https://github.com/google/googletest/archive/609281088cfefc76f9d0ce82e1ff6c30cc3591e5.zip\"</span><span class=\"token punctuation\">]</span>,\n  strip_prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"googletest-609281088cfefc76f9d0ce82e1ff6c30cc3591e5\"</span>,\n<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>接着选取一个目录作为包目录，在该目录下进行代码的编写，例如一个 hello_test.cc 文件：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;gtest/gtest.h&gt;</span></span>\n\n<span class=\"token comment\">// Demonstrate some basic assertions.</span>\n<span class=\"token function\">TEST</span><span class=\"token punctuation\">(</span>HelloTest<span class=\"token punctuation\">,</span> BasicAssertions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// Expect two strings not to be equal.</span>\n  <span class=\"token function\">EXPECT_STRNE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Expect equality.</span>\n  <span class=\"token function\">EXPECT_EQ</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span> <span class=\"token operator\">*</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在同目录下的 BUILD 文件中说明目标编译的规则：</p>\n<pre><code class=\"prism language-shell\">cc_test<span class=\"token punctuation\">(</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">\"hello_test\"</span>,\n  size <span class=\"token operator\">=</span> <span class=\"token string\">\"small\"</span>,\n  srcs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello_test.cc\"</span><span class=\"token punctuation\">]</span>,\n  deps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@com_google_googletest//:gtest_main\"</span><span class=\"token punctuation\">]</span>,\n<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>此时执行以下命令即可构建并运行测试程序：</p>\n<pre><code class=\"prism language-shell\">bazel <span class=\"token builtin class-name\">test</span> --test_output<span class=\"token operator\">=</span>all //:hello_test \n</code></pre>\n<p><br/></p>\n<h4><a id=\"Cmake_88\"></a>Cmake</h4>\n<p>首先创建一个目录：</p>\n<pre><code class=\"prism language-shell\">$ <span class=\"token function\">mkdir</span> my_project <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> my_project\n</code></pre>\n<p>接着创建 CMakeLists.txt 文件，并声明对 GoogleTest 的依赖，此时 Cmake 会自动去下载对应的库：</p>\n<pre><code class=\"prism language-cmake\">cmake_minimum_required(VERSION 3.14)\nproject(my_project)\n\n# GoogleTest requires at least C++11\nset(CMAKE_CXX_STANDARD 11)\n\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  URL https://github.com/google/googletest/archive/609281088cfefc76f9d0ce82e1ff6c30cc3591e5.zip\n)\n# For Windows: Prevent overriding the parent project's compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nFetchContent_MakeAvailable(googletest)\n</code></pre>\n<p>此时我们就可以在代码中使用 GoogleTest，我们创建一个 hello_test.cc 文件：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;gtest/gtest.h&gt;</span></span>\n\n<span class=\"token comment\">// Demonstrate some basic assertions.</span>\n<span class=\"token function\">TEST</span><span class=\"token punctuation\">(</span>HelloTest<span class=\"token punctuation\">,</span> BasicAssertions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// Expect two strings not to be equal.</span>\n  <span class=\"token function\">EXPECT_STRNE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Expect equality.</span>\n  <span class=\"token function\">EXPECT_EQ</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span> <span class=\"token operator\">*</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后在 CMakeLists.txt 的末尾加上 hello_test.cc 的构建规则：</p>\n<pre><code class=\"prism language-cmake\">enable_testing()\n\nadd_executable(\n  hello_test\n  hello_test.cc\n)\ntarget_link_libraries(\n  hello_test\n  gtest_main\n)\n\ninclude(GoogleTest)\ngtest_discover_tests(hello_test)\n</code></pre>\n<p>运行下面的命令构建并允许测试程序：</p>\n<pre><code class=\"prism language-shell\">cmake -S <span class=\"token builtin class-name\">.</span> -B build\n\ncmake --build build\n\n<span class=\"token builtin class-name\">cd</span> build <span class=\"token operator\">&amp;&amp;</span> ctest\n</code></pre>\n<p><br/></p>\n<h3><a id=\"_159\"></a>安装示例项目</h3>\n<p>从 GoogleTest 的 GitHub 中下载官方提供的示例项目：</p>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">git</span> clone https://github.com/google/googletest.git\n</code></pre>\n<p>示例项目位于 <code>googletest/googletest/samples/</code> 目录，示例内容可参考官网的说明：<a href=\"https://google.github.io/googletest/samples.html\">samples</a></p>\n<p><br/></p>\n<h1><a id=\"GoogleTest__171\"></a>GoogleTest 实战</h1>\n<h2><a id=\"_173\"></a>断言</h2>\n<h3><a id=\"_175\"></a>断言的概念</h3>\n<p>GoogleTest 中，是通过断言（Assertion）来判断代码实现的功能是否符合预期。断言的结果分为成功（success）、非致命错误（non-fatal failture）和致命错误（fatal failture）。</p>\n<ul><li><strong>成功</strong>：断言成功，程序的行为符合预期，程序允许继续向下运行。可以在代码中调用 <code>SUCCEED()</code> 来表示这个结果。</li><li><strong>非致命错误</strong>：断言失败，但是程序没有直接中止，而是继续向下运行。可以在代码中调用 <code>FAIL()</code> 来表示这个结果。</li><li><strong>致命错误</strong>：中止当前函数或者程序崩溃。可以在代码中调用 <code>ADD_FAILURE()</code> 来表示这个结果。</li></ul>\n<p>GoogleTest 的断言是类似于函数调用的宏。通过对其行为进行断言来测试一个类或函数。当断言失败时，GoogleTest 会打印断言的源文件和行号位置以及失败消息。还可以提供自定义失败消息，该消息将附加到 GoogleTest 的消息中。</p>\n<p><br/></p>\n<h3><a id=\"EXPECT__ASSERT_187\"></a>EXPECT 与 ASSERT</h3>\n<p>宏的格式有两种：</p>\n<ul><li><code>EXPECT_*</code>：在失败时会产生非致命故障，不会中止当前功能。</li><li><code>ASSERT_*</code>：在失败时会产生致命错误，并中止当前函数，同一用例后面的语句将不再执行。</li></ul>\n<blockquote>\n<p>通常 <code>EXPECT_*</code> 是首选，因为它们允许在测试中报告多个。但是如果在某条件不成立，程序就无法运行时，就应该使用 <code>ASSERT_*</code> 。</p>\n<p>另一方面，因为 <code>ASSERT_*</code> 是直接从当前函数返回的，可能会导致一些内存、文件资源没有释放，因此存在内存泄漏的问题。</p>\n</blockquote>\n<p>GoogleTest 提供了一组断言，用于以各种方式验证代码的行为。包括检查布尔条件、基于关系运算符比较值、验证字符串值、浮点值等等。甚至还有一些断言可以通过提供自定义谓词来验证更复杂的状态。有关 GoogleTest 提供的断言的完整列表，可以参考官方文档：<a href=\"https://google.github.io/googletest/reference/assertions.html\">Assertions</a>。</p>\n<p><br/></p>\n<h3><a id=\"_202\"></a>自定义失败信息</h3>\n<p>如果想要提供自定义的失败信息，只需要使用流操作符 &lt;&lt; 将这些信息流到断言宏中，例如：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">ASSERT_EQ</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Vectors x and y are of unequal length\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">EXPECT_EQ</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Vectors x and y differ at index \"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>任何可以流向 std::ostream 的东西都可以流向断言宏，特别是 C 语言的字符串（char*）和 std::string 对象。如果一个宽字符串（wchar_t*，Windows 上 UNICODE 模式下的 TCHAR*，或 std::wstring）被流向一个断言，它将在打印时被转换成 UTF-8。</p>\n<p><br/></p>\n<h2><a id=\"_218\"></a>功能测试</h2>\n<h3><a id=\"TEST_220\"></a>TEST</h3>\n<p>如果想要创建测试，可以使用宏函数 <code>TEST</code>，它具有以下特点：</p>\n<ul><li><code>TEST</code> 是一个没有返回值的宏函数。</li><li>我们可以在该函数中使用断言来检测代码是否有效，测试的结果由断言决定。如果测试中的任何断言失败（致命或非致命），或者如果测试崩溃，则整个测试失败。否则，它会成功。</li></ul>\n<p>函数定义如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">TEST</span><span class=\"token punctuation\">(</span>TestSuiteName<span class=\"token punctuation\">,</span> TestName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> test body <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>TestSuiteName 对应测试用例集名称，TestName 是归属的测试用例名称。这两个名称都必须是有效的 C++ 标识符，并且它们不应包含任何下划线。测试的全名由其包含的测试用例集及其测试名称组成。来自不同测试用例集的测试可以具有相同的名称。</p>\n<p>这里以官方提供的 Sample1 中的阶乘函数为例：</p>\n<p>sample1.cc 中的阶乘函数定义如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">Factorial</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    result <span class=\"token operator\">*=</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>sample1_unittest.cc 中即为测试代码，这里为了能够更好的组织测试用例，将数据根据正负数划分为三个测试用例集，每一个用例集中都是相同类型的测试用例。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 测试负数</span>\n<span class=\"token function\">TEST</span><span class=\"token punctuation\">(</span>FactorialTest<span class=\"token punctuation\">,</span> Negative<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">EXPECT_EQ</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Factorial</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">EXPECT_EQ</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Factorial</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">EXPECT_GT</span><span class=\"token punctuation\">(</span><span class=\"token function\">Factorial</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 测试0</span>\n<span class=\"token function\">TEST</span><span class=\"token punctuation\">(</span>FactorialTest<span class=\"token punctuation\">,</span> Zero<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token function\">EXPECT_EQ</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 测试正数</span>\n<span class=\"token function\">TEST</span><span class=\"token punctuation\">(</span>FactorialTest<span class=\"token punctuation\">,</span> Positive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">EXPECT_EQ</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">EXPECT_EQ</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">EXPECT_EQ</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">EXPECT_EQ</span><span class=\"token punctuation\">(</span><span class=\"token number\">40320</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当我们执行测试时，输出如下：</p>\n<pre><code class=\"prism language-shell\"><span class=\"token punctuation\">[</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token punctuation\">]</span> Running <span class=\"token number\">6</span> tests from <span class=\"token number\">2</span> <span class=\"token builtin class-name\">test</span> cases.\n<span class=\"token punctuation\">[</span>----------<span class=\"token punctuation\">]</span> Global <span class=\"token builtin class-name\">test</span> environment set-up.\n<span class=\"token punctuation\">[</span>----------<span class=\"token punctuation\">]</span> <span class=\"token number\">3</span> tests from FactorialTest\n<span class=\"token punctuation\">[</span> RUN      <span class=\"token punctuation\">]</span> FactorialTest.Negative\n<span class=\"token punctuation\">[</span>       OK <span class=\"token punctuation\">]</span> FactorialTest.Negative <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> ms<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span> RUN      <span class=\"token punctuation\">]</span> FactorialTest.Zero\n<span class=\"token punctuation\">[</span>       OK <span class=\"token punctuation\">]</span> FactorialTest.Zero <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> ms<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span> RUN      <span class=\"token punctuation\">]</span> FactorialTest.Positive\n<span class=\"token punctuation\">[</span>       OK <span class=\"token punctuation\">]</span> FactorialTest.Positive <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> ms<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>----------<span class=\"token punctuation\">]</span> <span class=\"token number\">3</span> tests from FactorialTest <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> ms total<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这就表示我们的代码通过了所有的测试用例。</p>\n<p><br/></p>\n<h3><a id=\"TEST_F_293\"></a>TEST_F</h3>\n<p>如果发现自己编写了两个或多个对相似数据进行操作的测试，可以使用 test fixture 来为多个测试重用这些相同的配置。</p>\n<blockquote>\n<p>fixture，其语义是固定的设施，而 test fixture 在 GoogleTest 中的作用就是为每个 TEST 都执行一些同样的操作。</p>\n</blockquote>\n<p>其对应的宏函数是 <code>TEST_F</code>，函数定义如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">TEST_F</span><span class=\"token punctuation\">(</span>TestFixtureName<span class=\"token punctuation\">,</span> TestName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> test body <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>TestFixtureName 对应一个 test fixture 类的名称。因此我们需要自己去定义一个这样的类，并让它继承 <code>testing::Test</code> 类，然后根据我们的需要实现下面这两个虚函数：</p>\n<ul><li><code>virtual void SetUp()</code>：类似于构造函数，在 <code>TEST_F</code> 之前运行；</li><li><code>virtual void TearDown()</code>：类似于析构函数，在 <code>TEST_F</code> 之后运行。</li></ul>\n<p>此外 <code>testing::Test</code> 还提供了两个 static 函数：</p>\n<ul><li><code>static void SetUpTestSuite()</code>：在第一个 <code>TEST</code> 之前运行</li><li><code>static void TearDownTestSuite()</code>：在最后一个 <code>TEST</code> 之后运行</li></ul>\n<p>除了这两种，还有一种全局事件，即继承<code>testing::Environment</code>，并实现下面两个虚函数：</p>\n<ul><li><code>virtual void SetUp()</code>：在所有用例之前运行；</li><li><code>virtual void TearDown()</code>：在所有用例之后运行。</li></ul>\n<p>这里以官方提供的 Sample3 中实现的 Queue 为例，其实现如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">GOOGLETEST_SAMPLES_SAMPLE3_INL_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GOOGLETEST_SAMPLES_SAMPLE3_INL_H_</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stddef.h&gt;</span></span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">E</span><span class=\"token operator\">&gt;</span>  <span class=\"token comment\">// E is the element type</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">E</span><span class=\"token operator\">&gt;</span>  <span class=\"token comment\">// E is the element type</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QueueNode</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span><span class=\"token operator\">&lt;</span>E<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">const</span> E<span class=\"token operator\">&amp;</span> <span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> element_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  QueueNode<span class=\"token operator\">*</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> next_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> QueueNode<span class=\"token operator\">*</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> next_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">explicit</span> <span class=\"token function\">QueueNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> E<span class=\"token operator\">&amp;</span> an_element<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> <span class=\"token function\">element_</span><span class=\"token punctuation\">(</span>an_element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    \n  <span class=\"token keyword\">const</span> QueueNode<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QueueNode<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">QueueNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QueueNode<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  E element_<span class=\"token punctuation\">;</span>\n  QueueNode<span class=\"token operator\">*</span> next_<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">E</span><span class=\"token operator\">&gt;</span>  <span class=\"token comment\">// E is the element type.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token function\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">head_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">last_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">size_</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token operator\">~</span><span class=\"token function\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size_ <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// 1. Deletes every node.</span>\n      QueueNode<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> head_<span class=\"token punctuation\">;</span>\n      QueueNode<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">delete</span> node<span class=\"token punctuation\">;</span>\n        node <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        next <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      head_ <span class=\"token operator\">=</span> last_ <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n      size_ <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  size_t <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> size_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  QueueNode<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> <span class=\"token function\">Head</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> head_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> QueueNode<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> <span class=\"token function\">Head</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> head_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  QueueNode<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> <span class=\"token function\">Last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> last_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> QueueNode<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> <span class=\"token function\">Last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> last_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> E<span class=\"token operator\">&amp;</span> element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    QueueNode<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> new_node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-function\"><span class=\"token function\">QueueNode</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>E<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size_ <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      head_ <span class=\"token operator\">=</span> last_ <span class=\"token operator\">=</span> new_node<span class=\"token punctuation\">;</span>\n      size_ <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n      last_<span class=\"token operator\">-&gt;</span>next_ <span class=\"token operator\">=</span> new_node<span class=\"token punctuation\">;</span>\n      last_ <span class=\"token operator\">=</span> new_node<span class=\"token punctuation\">;</span>\n      size_<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  E<span class=\"token operator\">*</span> <span class=\"token function\">Dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size_ <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> QueueNode<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> old_head <span class=\"token operator\">=</span> head_<span class=\"token punctuation\">;</span>\n    head_ <span class=\"token operator\">=</span> head_<span class=\"token operator\">-&gt;</span>next_<span class=\"token punctuation\">;</span>\n    size_<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size_ <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      last_ <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    E<span class=\"token operator\">*</span> element <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">E</span><span class=\"token punctuation\">(</span>old_head<span class=\"token operator\">-&gt;</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> old_head<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">F</span><span class=\"token operator\">&gt;</span>\n  Queue<span class=\"token operator\">*</span> <span class=\"token function\">Map</span><span class=\"token punctuation\">(</span>F function<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span>\n    Queue<span class=\"token operator\">*</span> new_queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QueueNode<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> head_<span class=\"token punctuation\">;</span> node <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n         node <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>next_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      new_queue<span class=\"token operator\">-&gt;</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-&gt;</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> new_queue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n  QueueNode<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> head_<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// The first node of the queue.</span>\n  QueueNode<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> last_<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// The last node of the queue.</span>\n  size_t size_<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// The number of elements in the queue.</span>\n\n  <span class=\"token function\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Queue<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> Queue<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Queue<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span>  <span class=\"token comment\">// GOOGLETEST_SAMPLES_SAMPLE3_INL_H_</span></span>\n</code></pre>\n<p>接着看看测试用例是如何编写的，首先声明了一个 test fixture 类，在这个类中实现了一些测试时用到的辅助函数，以及使用 <code>SetUp</code> 预置了一些测试数据。（除了有特殊需求，则不需要实现 <code>TearDown</code>，因为析构函数已经帮我们释放了资源）</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">QueueTestSmpl3</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> testing<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Test</span></span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span> \n    \n  <span class=\"token keyword\">void</span> <span class=\"token function\">SetUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">{<!-- --></span>\n    q1_<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    q2_<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    q2_<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 一个辅助函数</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">Double</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 测试 Queue::Map() 时用到的辅助函数</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">MapTester</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">const</span> Queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> new_q <span class=\"token operator\">=</span> q<span class=\"token operator\">-&gt;</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span>Double<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ASSERT_EQ</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-&gt;</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> new_q<span class=\"token operator\">-&gt;</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QueueNode<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span>n1 <span class=\"token operator\">=</span> q<span class=\"token operator\">-&gt;</span><span class=\"token function\">Head</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>n2 <span class=\"token operator\">=</span> new_q<span class=\"token operator\">-&gt;</span><span class=\"token function\">Head</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         n1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> n1 <span class=\"token operator\">=</span> n1<span class=\"token operator\">-&gt;</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n2 <span class=\"token operator\">=</span> n2<span class=\"token operator\">-&gt;</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">EXPECT_EQ</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> n1<span class=\"token operator\">-&gt;</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n2<span class=\"token operator\">-&gt;</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">delete</span> new_q<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  Queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> q0_<span class=\"token punctuation\">;</span>\n  Queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> q1_<span class=\"token punctuation\">;</span>\n  Queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> q2_<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>接着看看它的 <code>TEST_F</code> ：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 测试默认构造函数</span>\n<span class=\"token function\">TEST_F</span><span class=\"token punctuation\">(</span>QueueTestSmpl3<span class=\"token punctuation\">,</span> DefaultConstructor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">EXPECT_EQ</span><span class=\"token punctuation\">(</span><span class=\"token number\">0u</span><span class=\"token punctuation\">,</span> q0_<span class=\"token punctuation\">.</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 测试出队</span>\n<span class=\"token function\">TEST_F</span><span class=\"token punctuation\">(</span>QueueTestSmpl3<span class=\"token punctuation\">,</span> Dequeue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> n <span class=\"token operator\">=</span> q0_<span class=\"token punctuation\">.</span><span class=\"token function\">Dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">EXPECT_TRUE</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  n <span class=\"token operator\">=</span> q1_<span class=\"token punctuation\">.</span><span class=\"token function\">Dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ASSERT_TRUE</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">EXPECT_EQ</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">EXPECT_EQ</span><span class=\"token punctuation\">(</span><span class=\"token number\">0u</span><span class=\"token punctuation\">,</span> q1_<span class=\"token punctuation\">.</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> n<span class=\"token punctuation\">;</span>\n\n  n <span class=\"token operator\">=</span> q2_<span class=\"token punctuation\">.</span><span class=\"token function\">Dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ASSERT_TRUE</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">EXPECT_EQ</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">EXPECT_EQ</span><span class=\"token punctuation\">(</span><span class=\"token number\">1u</span><span class=\"token punctuation\">,</span> q2_<span class=\"token punctuation\">.</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 测试Map函数</span>\n<span class=\"token function\">TEST_F</span><span class=\"token punctuation\">(</span>QueueTestSmpl3<span class=\"token punctuation\">,</span> Map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">MapTester</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>q0_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">MapTester</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>q1_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">MapTester</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>q2_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>  <span class=\"token comment\">// namespace</span>\n</code></pre>\n<p>这里以 DefaultConstructor 为例，来分析一下它的执行流程：</p>\n<ol><li>QueueTestSmpl3 调用构造函数，构造对象。</li><li>QueueTestSmpl3 对象调用 <code>SetUp</code> 函数初始化测试配置。</li><li>DefaultConstructor 开始执行并结束测试。</li><li>QueueTestSmpl3 对象调用隐式生成的 <code>TearDown</code> 进行清理。</li><li>QueueTestSmpl3 调用析构函数，析构对象。</li></ol>\n<p><br/></p>\n<h3><a id=\"_519\"></a>运行测试</h3>\n<h4><a id=\"_520\"></a>调用测试</h4>\n<p>与其他 C++ 框架不同，<code>TEST</code> 和 <code>TEST_F</code> 会隐式向 GoogleTest 注册这些测试函数，因此我们不需要为了运行这些它们而进行枚举。</p>\n<p>定义完测试后，你可以用 <code>RUN_ALL_TESTS</code> 来运行它们，此时会运行所有的测试，如果全部成功则返回 0，反之则返回 1。其执行流程如下：</p>\n<ol><li>保存所有 GoogleTest 标志的状态。</li><li>为第一个测试创建一个 test fixture 对象。</li><li>通过 <code>SetUp</code> 初始化 test fixture 对象。</li><li>在 test fixture 对象上进行测试。</li><li>通过 <code>TearDown</code> 清理 test fixture。</li><li>删除 test fixture。</li><li>恢复所有 GoogleTest 标志的状态。</li><li>对下一个测试重复上述步骤，直到所有测试都运行完毕。</li></ol>\n<p><mark>如果发生致命故障，则将跳过后续步骤。</mark></p>\n<p><br/></p>\n<h4><a id=\"_main__539\"></a>编写 main 函数</h4>\n<p>用户不需要编写自己的 <code>main</code> 函数，编译器会自动将它链接到 <code>gtest_main</code>。如果用户有特殊需求，需要编写一个 <code>main</code> 函数，则需要在返回时调用 <code>RUN_ALL_TESTS()</code> 来运行所有测试，例如：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Running main() from %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  testing<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InitGoogleTest</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">RUN_ALL_TESTS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><code>testing::InitGoogleTest</code> 函数会解析 GoogleTest 标志的命令行，并删除所有识别的标志。这允许用户通过各种标志控制测试程序的行为。<mark>您必须在调用 <code>RUN_ALL_TESTS</code> 之前调用此函数 ，否则标志将无法正确初始化</mark>。</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}