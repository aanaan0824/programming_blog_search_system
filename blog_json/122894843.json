{"blogid": "122894843", "writerAge": "码龄2年", "writerBlogNum": "80", "writerCollect": "930", "writerComment": "1489", "writerFan": "2526", "writerGrade": "6级", "writerIntegral": "6616", "writerName": "The   August", "writerProfileAdress": "writer_image\\profile_122894843.jpg", "writerRankTotal": "2776", "writerRankWeekly": "1756", "writerThumb": "1880", "writerVisitNum": "69378", "blog_read_count": "586", "blog_time": "于 2022-02-23 11:41:11 发布", "blog_title": "【手撕STL】priority_queue", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>这里写目录标题</h3>\n<ul><li><a href=\"#priority_queue_1\">priority_queue的介绍和使用</a></li><li><ul><li><a href=\"#priority_queue_13\">priority_queue的使用</a></li></ul>\n</li><li><a href=\"#priority_queue_98\">priority_queue的模拟实现</a></li><li><a href=\"#_273\">仿函数</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"priority_queue_1\"></a>priority_queue的介绍和使用</h1>\n<ol><li>优先队列是一种容器适配器，根据严格的弱排序标准，它的第一个元素总是它所包含的元素中最大的。</li><li>此上下文类似于堆，在堆中可以随时插入元素，并且只能检索最大堆元素(优先队列中位于顶部的元素)。</li><li>优先队列被实现为容器适配器，容器适配器即将特定容器类封装作为其底层容器类，queue提供一组特定的成员函数来访问其元素。元素从特定容器的“尾部”弹出，其称为优先队列的顶部。</li><li>底层容器可以是任何标准容器类模板，也可以是其他特定设计的容器类。容器应该可以通过随机访问迭代器访问，并支持以下操作：</li></ol>\n<ul><li>empty()：检测容器是否为空</li><li>size()：返回容器中有效元素个数</li><li>front()：返回容器中第一个元素的引用</li><li>push_back()：在容器尾部插入元素</li><li>pop_back()：删除容器尾部元素</li></ul>\n<ol start=\"5\"><li>标准容器类vector和deque满足这些需求。默认情况下，如果没有为特定的priority_queue类实例化指定容器类，则使用vector。</li><li>需要支持随机访问迭代器，以便始终在内部保持堆结构。容器适配器通过在需要时自动调用算法函数make_heap、push_heap和pop_heap来自动完成此操作</li></ol>\n<h2><a id=\"priority_queue_13\"></a>priority_queue的使用</h2>\n<blockquote>\n<p>优先级队列默认使用vector作为其底层存储数据的容器，在vector上又使用了堆算法将vector中元素构造成堆的结构，因此priority_queue就是堆，所有需要用到堆的位置，都可以考虑使用priority_queue。<strong>注意：默认情况下priority_queue是大堆。</strong></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\190cbe0c19774ac1870aa651b1fdd319.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">test_priority_queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//priority_queue&lt;int&gt; pq;  //默认是大的优先级高 默认是大堆</span>\n\n\tpriority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> pq<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//小的优先级高 默认是小堆</span>\n\tpq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\tpq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Date</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year <span class=\"token operator\">=</span> <span class=\"token number\">1900</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> month <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> day <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span> <span class=\"token function\">_year</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_month</span><span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_day</span><span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>_year <span class=\"token operator\">&lt;</span> d<span class=\"token punctuation\">.</span>_year<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n\t\t\t<span class=\"token punctuation\">(</span>_year <span class=\"token operator\">==</span> d<span class=\"token punctuation\">.</span>_year <span class=\"token operator\">&amp;&amp;</span> _month <span class=\"token operator\">&lt;</span> d<span class=\"token punctuation\">.</span>_month<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n\t\t\t<span class=\"token punctuation\">(</span>_year <span class=\"token operator\">==</span> d<span class=\"token punctuation\">.</span>_year <span class=\"token operator\">&amp;&amp;</span> _month <span class=\"token operator\">==</span> d<span class=\"token punctuation\">.</span>_month <span class=\"token operator\">&amp;&amp;</span> _day <span class=\"token operator\">&lt;</span> d<span class=\"token punctuation\">.</span>_day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>_year <span class=\"token operator\">&gt;</span> d<span class=\"token punctuation\">.</span>_year<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n\t\t\t<span class=\"token punctuation\">(</span>_year <span class=\"token operator\">==</span> d<span class=\"token punctuation\">.</span>_year <span class=\"token operator\">&amp;&amp;</span> _month <span class=\"token operator\">&gt;</span> d<span class=\"token punctuation\">.</span>_month<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n\t\t\t<span class=\"token punctuation\">(</span>_year <span class=\"token operator\">==</span> d<span class=\"token punctuation\">.</span>_year <span class=\"token operator\">&amp;&amp;</span> _month <span class=\"token operator\">==</span> d<span class=\"token punctuation\">.</span>_month <span class=\"token operator\">&amp;&amp;</span> _day <span class=\"token operator\">&gt;</span> d<span class=\"token punctuation\">.</span>_day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">friend</span> ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> _cout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t_cout <span class=\"token operator\">&lt;&lt;</span> d<span class=\"token punctuation\">.</span>_year <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">&lt;&lt;</span> d<span class=\"token punctuation\">.</span>_month <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">&lt;&lt;</span> d<span class=\"token punctuation\">.</span>_day<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> _cout<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _year<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _month<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _day<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestPriorityQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 大堆，需要用户在自定义类型中提供&lt;的重载</span>\n\tpriority_queue<span class=\"token operator\">&lt;</span>Date<span class=\"token operator\">&gt;</span> q1<span class=\"token punctuation\">;</span>\n\tq1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tq1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tq1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> q1<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 如果要创建小堆，需要用户提供&gt;的重载</span>\n\tpriority_queue<span class=\"token operator\">&lt;</span>Date<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>Date<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span>Date<span class=\"token operator\">&gt;&gt;</span> q2<span class=\"token punctuation\">;</span>\n\tq2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tq2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tq2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> q2<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注：</p>\n<ol><li>默认情况下，priority_queue是大堆</li><li><strong>如果在priority_queue中放自定义类型的数据，用户需要在自定义类型中提供&gt; 或者&lt; 的重载</strong></li></ol>\n<h1><a id=\"priority_queue_98\"></a>priority_queue的模拟实现</h1>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;functional&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">namespace</span> lc\n<span class=\"token punctuation\">{<!-- --></span> \n     <span class=\"token comment\">//仿函数</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">less</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token comment\">//仿函数</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">greater</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Container</span><span class=\"token operator\">=</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Compare</span> <span class=\"token operator\">=</span> less<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Container</span><span class=\"token operator\">::</span>value_type<span class=\"token operator\">&gt;&gt;</span>\n  <span class=\"token comment\">//typename告知编译器，typename后面的字符串为一个类型名称，而不是成员函数或者成员变量；否编译器无法识别</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">priority_queue</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">priority_queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputIterator</span><span class=\"token operator\">&gt;</span>\n\t\t<span class=\"token function\">priority_queue</span><span class=\"token punctuation\">(</span>InputIterator first<span class=\"token punctuation\">,</span> InputIterator last<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t <span class=\"token comment\">//插入数据</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">!=</span> last<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t_con<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tfirst<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//建堆</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_con<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//堆的向上调整算法</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">AdjustUp</span><span class=\"token punctuation\">(</span>size_t child<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tCompare com<span class=\"token punctuation\">;</span>\n\t\t\tsize_t parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">com</span><span class=\"token punctuation\">(</span>_con<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> _con<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_con<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _con<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tchild <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t\t\t\tparent<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//堆的向下调整算法</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>size_t parent<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tCompare com<span class=\"token punctuation\">;</span>\n\t\t\tsize_t child <span class=\"token operator\">=</span> parent <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">&lt;</span> _con<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> _con<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>  <span class=\"token function\">com</span><span class=\"token punctuation\">(</span>_con<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _con<span class=\"token punctuation\">[</span>child<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tchild<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">com</span><span class=\"token punctuation\">(</span>_con<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _con<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_con<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _con<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tparent <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n\t\t\t\t\tchild <span class=\"token operator\">=</span> parent <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_con<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">AdjustUp</span><span class=\"token punctuation\">(</span>_con<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _con<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tsize_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _con<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _con<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_con<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _con<span class=\"token punctuation\">[</span>_con<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_con<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tContainer _con<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">//测试</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">test_priority_queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tpriority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> pq<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//默认是大的优先级高 默认是大堆</span>\n\n\t\t<span class=\"token comment\">//priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; pq;  //小的优先级高 默认是小堆</span>\n\t\tpq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tpq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tpq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tpq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tpq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tpq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t\tpq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<p>总结：</p>\n<ul><li>STL中的priority_queue使用的底层数据结构是vector，但是底层结构用的堆</li><li>priority_queue、queue、stack都是适配器，stack、queue初始化只有容器中的默认构造函数初始化，而priority_queue初始化也可以用迭代器初始化</li></ul>\n<p>补充：</p>\n<ul><li> <p>在priority_queue初始化使用迭代器时，使用任何类型的迭代器都可以（该适配器中的初始化所需迭代器是“最低的”（Input、Output类型的迭代器实际上是不存在的））<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4b5c420e29dc49eca504b2a690d0dc2b.png\"/></p> </li><li></li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\77cf22e364ae465b91cc4680a9c28e0c.png\"/><br/> <a href=\"https://www.cnblogs.com/zhangdongsheng/p/9693199.html\">详解C++的模板中typename关键字的用法</a></p>\n<h1><a id=\"_273\"></a>仿函数</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7a3253f4d2d045f3a62e781e71f0cf93.png\"/></p>\n<p>注：</p>\n<ul><li>priority_queue传入仿函数参数时是类型，因为它是类模板，传入是必须显示类型传参</li><li>sort传入仿函数参数时是对象，因为它是函数模板，传入是可以隐式类型传参</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d31b73670ae8488f913695041c94b6cb.png\"/></p>\n<p><strong>模拟实现：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//仿函数（函数对象）--自定义类型</span>\n<span class=\"token comment\">//类型的对象可以像函数一样去使用</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Less</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Greater</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tLess<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> l<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//1</span>\n\tGreater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> g<span class=\"token punctuation\">;</span>      \n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//0</span>\n \t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注：<br/> 仿函数相当于一个类（自定义类型的），成员函数中重载（），此外重载（）函数里不一定只让写比较大小，还可以写其他的（符合实际需求即可）</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7abc099e7bc54704b2c7649662db35a0.png\"/></p>\n<p>总结：</p>\n<ul><li>仿函数又称函数对象是一种自定义类型（是一种类）</li><li>仿函数比起一般函数具有很多优点：</li><li>\n<ol><li>在同一时间里，由某个仿函数所代表的单一函数，可能有不同的状态（可以根据不同的类型代表不同的状态）</li></ol> </li><li>\n<ol start=\"2\"><li>仿函数即使定义相同，也可能有不同的类型（可以有不同类型）</li></ol> </li><li>\n<ol start=\"3\"><li>仿函数使程序代码变简单（仿函数在一定程度上使代码更通用，本质上简化了代码）</li></ol> </li><li>仿函数比起一般函数具有缺点：</li><li>\n<ol><li>仿函数通常比一般函数速度慢</li></ol> </li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}