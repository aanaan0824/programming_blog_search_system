{"blogid": "125596317", "writerAge": "码龄4年", "writerBlogNum": "162", "writerCollect": "4571", "writerComment": "2514", "writerFan": "25436", "writerGrade": "6级", "writerIntegral": "8022", "writerName": "fanstuck", "writerProfileAdress": "writer_image\\profile_125596317.jpg", "writerRankTotal": "1632", "writerRankWeekly": "25", "writerThumb": "2591", "writerVisitNum": "326604", "blog_read_count": "1213", "blog_time": "已于 2022-08-03 09:32:55 修改", "blog_title": "Python正则表达式一文详解+实例代码展示", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E5%89%8D%E8%A8%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n<p id=\"%E4%B8%80%E3%80%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\">一、正则表达式</a></p>\n<p id=\"1.%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E7%AE%80%E4%BB%8B\">1.简介</a></p>\n<p id=\"2.%E6%A6%82%E5%BF%B5-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E6%A6%82%E5%BF%B5\">2.概念</a></p>\n<p id=\"3.%E7%9B%AE%E7%9A%84-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E7%9B%AE%E7%9A%84\">3.目的</a></p>\n<p id=\"4.%E7%89%B9%E7%82%B9-toc\" style=\"margin-left:40px;\"><a href=\"#4.%E7%89%B9%E7%82%B9\">4.特点</a></p>\n<p id=\"%E4%BA%8C%E3%80%81Re%E5%BA%93-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81Re%E5%BA%93\">二、Re库</a></p>\n<p id=\"1.re.match()-toc\" style=\"margin-left:40px;\"><a href=\"#1.re.match%28%29\">1.re.match()</a></p>\n<p id=\"%C2%A02.fullmatch()-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A02.fullmatch%28%29\"> 2.fullmatch()</a></p>\n<p id=\"%C2%A03.search()-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A03.search%28%29\"> 3.search()</a></p>\n<p id=\"4.%C2%A0sub()-toc\" style=\"margin-left:40px;\"><a href=\"#4.%C2%A0sub%28%29\">4. sub()</a></p>\n<p id=\"%C2%A05.subn()-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A05.subn%28%29\"> 5.subn()</a></p>\n<p id=\"6.findall()-toc\" style=\"margin-left:40px;\"><a href=\"#6.findall%28%29\">6.findall()</a></p>\n<p id=\"%C2%A07.finditer()-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A07.finditer%28%29\"> 7.finditer()</a></p>\n<p id=\"%C2%A08.compile()-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A08.compile%28%29\"> 8.compile()</a></p>\n<p id=\"9.%C2%A0splite()-toc\" style=\"margin-left:40px;\"><a href=\"#9.%C2%A0splite%28%29\">9. splite()</a></p>\n<p id=\"%C2%A010.Match%E5%AF%B9%E8%B1%A1%E5%92%8CPattern%E5%AF%B9%E8%B1%A1-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A010.Match%E5%AF%B9%E8%B1%A1%E5%92%8CPattern%E5%AF%B9%E8%B1%A1\"> 10.Match对象和Pattern对象</a></p>\n<p id=\"%E4%B8%89.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E5%8C%B9%E9%85%8D-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%89.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E5%8C%B9%E9%85%8D\">三.正则表达式语法匹配</a></p>\n<p id=\"1%20%E6%99%AE%E9%80%9A%E5%AD%97%E7%AC%A6-toc\" style=\"margin-left:40px;\"><a href=\"#1%20%E6%99%AE%E9%80%9A%E5%AD%97%E7%AC%A6\">1 普通字符</a></p>\n<p id=\"1.1alone-toc\" style=\"margin-left:80px;\"><a href=\"#1.1alone\">1.1alone</a></p>\n<p id=\"%C2%A01.2%5Balone%5D-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A01.2%5Balone%5D\"> 1.2[alone]</a></p>\n<p id=\"1.3%5B%5Ealone%5D%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#1.3%5B%5Ealone%5D%C2%A0\">1.3[^alone] </a></p>\n<p id=\"1.4%5BA-Z%5D-toc\" style=\"margin-left:80px;\"><a href=\"#1.4%5BA-Z%5D\">1.4[A-Z]</a></p>\n<p id=\"1.5%20.-toc\" style=\"margin-left:80px;\"><a href=\"#1.5%20.\">1.5 .</a></p>\n<p id=\"%C2%A01.6%5B%5Cs%5CS%5D-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A01.6%5B%5Cs%5CS%5D\"> 1.6[\\s\\S]</a></p>\n<p id=\"1.7%5Cw-toc\" style=\"margin-left:80px;\"><a href=\"#1.7%5Cw\">1.7\\w</a></p>\n<p id=\"%C2%A02.%E9%9D%9E%E6%89%93%E5%8D%B0%E5%AD%97%E7%AC%A6-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A02.%E9%9D%9E%E6%89%93%E5%8D%B0%E5%AD%97%E7%AC%A6\"> 2.非打印字符</a></p>\n<p id=\"2.1%5Ccx-toc\" style=\"margin-left:80px;\"><a href=\"#2.1%5Ccx\">2.1\\cx</a></p>\n<p id=\"2.2%5Cf-toc\" style=\"margin-left:80px;\"><a href=\"#2.2%5Cf\">2.2\\f</a></p>\n<p id=\"2.3%5Cn-toc\" style=\"margin-left:80px;\"><a href=\"#2.3%5Cn\">2.3\\n</a></p>\n<p id=\"2.4%5Cr-toc\" style=\"margin-left:80px;\"><a href=\"#2.4%5Cr\">2.4\\r</a></p>\n<p id=\"2.5%C2%A0%5Cs-toc\" style=\"margin-left:80px;\"><a href=\"#2.5%C2%A0%5Cs\">2.5 \\s</a></p>\n<p id=\"%C2%A02.6%5CS-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A02.6%5CS\"> 2.6\\S</a></p>\n<p id=\"%C2%A02.7%5Ct-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A02.7%5Ct\"> 2.7\\t</a></p>\n<p id=\"2.8%5Cv-toc\" style=\"margin-left:80px;\"><a href=\"#2.8%5Cv\">2.8\\v</a></p>\n<p id=\"3.%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6\">3.特殊字符</a></p>\n<p id=\"3.1%24-toc\" style=\"margin-left:80px;\"><a href=\"#3.1%24\">3.1$</a></p>\n<p id=\"%C2%A03.2(%20)-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A03.2%28%20%29\"> 3.2( )</a></p>\n<p id=\"%C2%A03.3*-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A03.3*\"> 3.3*</a></p>\n<p id=\"%C2%A03.4%2B-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A03.4%2B\"> 3.4+</a></p>\n<p id=\"%C2%A03.5.-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A03.5.\"> 3.5.</a></p>\n<p id=\"%C2%A03.6%5B-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A03.6%5B\"> 3.6[</a></p>\n<p id=\"3.7%3F-toc\" style=\"margin-left:80px;\"><a href=\"#3.7%3F\">3.7?</a></p>\n<p id=\"3.8%5C-toc\" style=\"margin-left:80px;\"><a href=\"#3.8%5C\">3.8\\</a></p>\n<p id=\"3.9%5E-toc\" style=\"margin-left:80px;\"><a href=\"#3.9%5E\">3.9^</a></p>\n<p id=\"%C2%A03.10%7B-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A03.10%7B\"> 3.10{<!-- --></a></p>\n<p id=\"3.11%7C-toc\" style=\"margin-left:80px;\"><a href=\"#3.11%7C\">3.11|</a></p>\n<p id=\"4.%E9%99%90%E5%AE%9A%E7%AC%A6-toc\" style=\"margin-left:40px;\"><a href=\"#4.%E9%99%90%E5%AE%9A%E7%AC%A6\">4.限定符</a></p>\n<p id=\"4.1*-toc\" style=\"margin-left:80px;\"><a href=\"#4.1*\">4.1*</a></p>\n<p id=\"4.2%2B-toc\" style=\"margin-left:80px;\"><a href=\"#4.2%2B\">4.2+</a></p>\n<p id=\"4.3%EF%BC%9F-toc\" style=\"margin-left:80px;\"><a href=\"#4.3%EF%BC%9F\">4.3？</a></p>\n<p id=\"4.4%EF%BD%9Bn%EF%BD%9D-toc\" style=\"margin-left:80px;\"><a href=\"#4.4%EF%BD%9Bn%EF%BD%9D\">4.4｛n｝</a></p>\n<p id=\"4.5%C2%A0%7Bn%2C%7D-toc\" style=\"margin-left:80px;\"><a href=\"#4.5%C2%A0%7Bn%2C%7D\">4.5 {n,}</a></p>\n<p id=\"4.6%C2%A0%7Bn%2Cm%7D-toc\" style=\"margin-left:80px;\"><a href=\"#4.6%C2%A0%7Bn%2Cm%7D\">4.6 {n,m}</a></p>\n<p id=\"5.%E5%AE%9A%E4%BD%8D%E7%AC%A6-toc\" style=\"margin-left:40px;\"><a href=\"#5.%E5%AE%9A%E4%BD%8D%E7%AC%A6\">5.定位符</a></p>\n<p id=\"5.1%5E-toc\" style=\"margin-left:80px;\"><a href=\"#5.1%5E\">5.1^</a></p>\n<p id=\"5.2%24-toc\" style=\"margin-left:80px;\"><a href=\"#5.2%24\">5.2$</a></p>\n<p id=\"5.3%5Cb-toc\" style=\"margin-left:80px;\"><a href=\"#5.3%5Cb\">5.3\\b</a></p>\n<p id=\"%C2%A05.4%5CB-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A05.4%5CB\"> 5.4\\B</a></p>\n<p id=\"-toc\" style=\"margin-left:0px;\"></p>\n<p id=\"-toc\" style=\"margin-left:40px;\"></p>\n<p id=\"%E7%82%B9%E5%85%B3%E6%B3%A8%EF%BC%8C%E9%98%B2%E8%B5%B0%E4%B8%A2%EF%BC%8C%E5%A6%82%E6%9C%89%E7%BA%B0%E6%BC%8F%E4%B9%8B%E5%A4%84%EF%BC%8C%E8%AF%B7%E7%95%99%E8%A8%80%E6%8C%87%E6%95%99%EF%BC%8C%E9%9D%9E%E5%B8%B8%E6%84%9F%E8%B0%A2-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%82%B9%E5%85%B3%E6%B3%A8%EF%BC%8C%E9%98%B2%E8%B5%B0%E4%B8%A2%EF%BC%8C%E5%A6%82%E6%9C%89%E7%BA%B0%E6%BC%8F%E4%B9%8B%E5%A4%84%EF%BC%8C%E8%AF%B7%E7%95%99%E8%A8%80%E6%8C%87%E6%95%99%EF%BC%8C%E9%9D%9E%E5%B8%B8%E6%84%9F%E8%B0%A2\">点关注，防走丢，如有纰漏之处，请留言指教，非常感谢</a></p>\n<p id=\"%E5%8F%82%E9%98%85%EF%BC%9A-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8F%82%E9%98%85%EF%BC%9A\">参阅：</a></p>\n<hr id=\"hr-toc\"/>\n<hr/>\n<h1 id=\"%E5%89%8D%E8%A8%80\"><a id=\"_7\"></a>前言</h1>\n<p>正则匹配可以说是数据检索和遍历的基础技能了。在Python我们经常会用到需要提出特定字符的场景，尤其在网络爬虫爬取的编码后杂乱网页提取数据的的时候。在数据库提取数据后或是JSON文件做二次处理都需要re库进行提取。因此学好re库和正则表达是python工程师的必修课，你可以对正则表达式掌握的不是很熟练，但是必须要了解re库中存在的各种函数功能，这将大大加速你完成项目某项需求的时间也方便进行问题搜索。本文将详细介绍Python中正则表达式功能re库的功能。</p>\n<hr/>\n<h1 id=\"%E4%B8%80%E3%80%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><a id=\"pandas_16\"></a>一、正则表达式</h1>\n<h2 id=\"1.%E7%AE%80%E4%BB%8B\">1.简介</h2>\n<p><strong>        正则表达式</strong>，又称规则表达式<strong>,</strong>（Regular Expression，在代码中常简写为regex、regexp或RE），是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为\"元字符\"），是<a href=\"https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/9132\" title=\"计算机科学\">计算机科学</a>的一个概念。正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。正则表达式是一种文本模式，该模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串，通常被用来检索、替换那些符合某个模式（规则）的文本。     </p>\n<p>        许多程序设计语言都支持利用正则表达式进行字符串操作。例如，在<a href=\"https://baike.baidu.com/item/Perl/851577\" title=\"Perl\">Perl</a>中就内建了一个功能强大的正则表达式引擎。正则表达式这个概念最初是由<a href=\"https://baike.baidu.com/item/Unix/219943\" title=\"Unix\">Unix</a>中的工具软件（例如<a href=\"https://baike.baidu.com/item/sed/7865963\" title=\"sed\">sed</a>和<a href=\"https://baike.baidu.com/item/grep/5997841\" title=\"grep\">grep</a>）普及开来的，后来在广泛运用于Scala 、PHP、C# 、Java、C++ 、Objective-c、Perl 、Swift、VBScript 、Javascript、Ruby 以及Python等等。正则表达式通常缩写成“regex”，<a href=\"https://baike.baidu.com/item/%E5%8D%95%E6%95%B0/1658633\" title=\"单数\">单数</a>有regexp、regex，<a href=\"https://baike.baidu.com/item/%E5%A4%8D%E6%95%B0/254365\" title=\"复数\">复数</a>有regexps、regexes、regexen。</p>\n<h2 id=\"2.%E6%A6%82%E5%BF%B5\">2.概念</h2>\n<p>        正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p>\n<h2 id=\"3.%E7%9B%AE%E7%9A%84\">3.目的</h2>\n<p>给定一个正则表达式和另一个字符串，我们可以达到如下的目的：</p>\n<ul><li>判断给定的字符串是否符合正则表达式的过滤逻辑（称作“匹配”）：</li><li>可以通过正则表达式，从字符串中获取我们想要的特定部分。</li></ul>\n<h2 id=\"4.%E7%89%B9%E7%82%B9\">4.特点</h2>\n<p>正则表达式的特点是：</p>\n<ul><li>灵活性、逻辑性和功能性非常强；</li><li>可以迅速地用极简单的方式达到字符串的复杂控制。</li><li>对于刚接触的人来说，比较晦涩难懂。</li></ul>\n<h1 id=\"%E4%BA%8C%E3%80%81Re%E5%BA%93\">二、Re库</h1>\n<p>re库是Python自带的标准库，不需要安装即可使用：</p>\n<p><strong>Re库默认采用贪婪匹配，即输出匹配最长的子串</strong></p>\n<pre><code>import re</code></pre>\n<p>模块常用函数：</p>\n<h2 id=\"1.re.match()\">1.re.match()</h2>\n<p>基础语法形式为：</p>\n<pre><code class=\"language-python\">re.match(pattern,string,flags=0)</code></pre>\n<p>函数功能为 ：从一个字符串的开始位置起匹配正则表达式，返回match对象。如果开始没有匹配到，不管后边有没有能符合匹配的，都打印不出结果，这是和search的区别。</p>\n<p> 参数说明：</p>\n<ul><li>pattern:匹配目标对象的正则表达式<strong>pattern</strong>或原生字符串表示</li><li>string:匹配的字符串</li><li>flags：正则表达式使用时的控制标记</li></ul>\n<p>其中flags可选参数有：</p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><td>参数</td><td>说明</td></tr><tr><td>re.l/re.IGNORECASE</td><td>忽略大小写</td></tr><tr><td>re.M/re.MULTILINE</td><td>多行模式，改变‘^'和'$'的行为</td></tr><tr><td>re.S/re.DOTALL</td><td>点'.'的任意匹配模式，改变’.‘的行为</td></tr><tr><td> <p>re.L/re.LOCALE</p> </td><td>使预定字符类\\w\\W\\b\\B\\s\\S取决于当前区域设定</td></tr><tr><td>re.U/re.UNICODE</td><td>使预定字符类\\w\\W\\b\\B\\s\\S\\d\\D取决于unicode定义的字符属性</td></tr><tr><td>re.X/re.VERBOSE</td><td>详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并且可以加入注释</td></tr></tbody></table>\n<p>我们把复杂的匹配放到第三章再写，这里我们仅简单展示一下该函数的用法和效果：</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone'\nprint(re.match('Fanstuck',strings))\n#out: &lt;re.Match object; span=(0, 8), match='Fanstuck'&gt;</code></pre>\n<p>其中span就匹配到的pattern在字符串中的位置。 </p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone'\nprint(re.match('anstuck',strings))\n#out: None</code></pre>\n<h2 id=\"%C2%A02.fullmatch()\"> 2.fullmatch()</h2>\n<p>基础语法格式为：</p>\n<pre><code class=\"language-python\">fullmatch(pattern, string, flags=0)</code></pre>\n<p> 参数说明：</p>\n<ul><li>pattern:匹配目标对象的正则表达式<strong>pattern</strong>或原生字符串表示</li><li>string:匹配的字符串</li><li>flags：正则表达式使用时的控制标记</li></ul>\n<p>函数功能为 ：尝试将正则表达式<strong>pattern</strong>应用于所有字符串<strong>string</strong>，如果匹配成功，返回匹配对象；如果找不到匹配，则为“None”。</p>\n<p>用法效果展示：</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone'\nprint(re.fullmatch('Fanstuck wants to leave alone',strings))\n#out: &lt;re.Match object; span=(0, 29), match='Fanstuck wants to leave alone'&gt;</code></pre>\n<p>该函数为贪婪规则指定的pattern都必须完全和strings长度和字符一一对应，否则就是None：</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone'\nprint(re.fullmatch('Fanstuck wants to leave alon',strings))\n#out: None</code></pre>\n<h2 id=\"%C2%A03.search()\"> 3.search()</h2>\n<p>基础语法格式为：</p>\n<pre><code class=\"language-python\">search(pattern, string, flags=0)</code></pre>\n<p> 参数说明：</p>\n<ul><li>pattern:匹配目标对象的正则表达式<strong>pattern</strong>或原生字符串表示</li><li>string:匹配的字符串</li><li>flags：正则表达式使用时的控制标记</li></ul>\n<p>函数功能为 ：扫描字符串<strong>string</strong>以查找与正则表达式<strong>pattern</strong>的匹配项，返回匹配对象；如果找不到匹配，则为“None”。 re.search 匹配整个字符串，直到找到一个匹配。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone'\nprint(re.search('alone',strings))\n#out：&lt;re.Match object; span=(24, 29), match='alone'&gt;</code></pre>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone'\nprint(re.search('die',strings))\n#out：None</code></pre>\n<h2 id=\"4.%C2%A0sub()\">4. <strong>sub()</strong></h2>\n<p>基本语法格式为:</p>\n<pre><code class=\"language-python\">sub(pattern, repl, string, count=0, flags=0)</code></pre>\n<p>参数说明：</p>\n<ul><li>pattern:匹配目标对象的正则表达式<strong>pattern</strong>或原生字符串表示</li><li>repl:将匹配到的pattern替换为<strong>repl</strong></li><li>string:匹配的字符串</li><li>count：模式匹配后替换的最大次数，默认 0 表示替换所有的匹配</li><li>flags：正则表达式使用时的控制标记</li></ul>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.sub('leave','die',strings))\n#out:Fanstuck wants to die alone alonely</code></pre>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.sub('alone','sad',strings))\n#out:Fanstuck wants to leave sad sadly</code></pre>\n<h2 id=\"%C2%A05.subn()\"> 5.<strong>subn()</strong></h2>\n<p>基础语法格式为：</p>\n<pre><code class=\"language-python\">subn(pattern, repl, string, count=0, flags=0)</code></pre>\n<p>参数说明：</p>\n<ul><li>pattern:匹配目标对象的正则表达式<strong>pattern</strong>或原生字符串表示</li><li>repl:将匹配到的pattern替换为<strong>repl</strong></li><li>string:匹配的字符串</li><li>count：模式匹配后替换的最大次数，默认 0 表示替换所有的匹配</li><li>flags：正则表达式使用时的控制标记</li></ul>\n<p>与前一个函数sub相比，无非就是增加了一个次数：</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.subn('alone','sad',strings))\n#out：('Fanstuck wants to leave sad sadly', 2)</code></pre>\n<p>但是转化为字典dict或者是用于pandas都是比较方便的，不用在统计出匹配了多少个字段。 </p>\n<h2 id=\"6.findall()\">6.findall()</h2>\n<p>基础语法格式为：</p>\n<pre><code class=\"language-python\">findall(pattern, string, flags=0)\n或\nfindall(pattern，string, pos, endpos)</code></pre>\n<p>参数说明：</p>\n<ul><li>pattern:匹配目标对象的正则表达式<strong>pattern</strong>或原生字符串表示</li><li>string:匹配的字符串</li><li>flags：正则表达式使用时的控制标记</li><li>pos:可选参数，指定字符串的起始位置，默认为 0。</li><li>endpos：可选参数，指定字符串的结束位置，默认为字符串的长度</li></ul>\n<p>函数功能为 ：在字符串<strong>string</strong>中匹配所有符合正则表达式<strong>pattern</strong>的对象，并把这些对象通过列表<strong>list</strong>的形式返回。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('alone',strings))\n#out:['alone', 'alone']</code></pre>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('alonely',strings))\n#out:['alonely']</code></pre>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\npattern=re.compile('a')\nprint(pattern.findall(strings,0,30))</code></pre>\n<h2 id=\"%C2%A07.finditer()\"> 7.finditer()</h2>\n<p>基础语法格式为：</p>\n<pre><code class=\"language-python\">finditer(pattern, string, flags=0)</code></pre>\n<p>参数说明：</p>\n<ul><li>pattern:匹配目标对象的正则表达式<strong>pattern</strong>或原生字符串表示</li><li>string:匹配的字符串</li><li>flags：正则表达式使用时的控制标记</li></ul>\n<p>函数功能为：在字符串<strong>string</strong>中匹配所有符合正则表达式<strong>pattern</strong>的对象，并把这些对象通过迭代器的形式返回。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nresult=re.finditer('alone',strings)\nfor i in result:\n    print(i)\n#out:&lt;re.Match object; span=(24, 29), match='alone'&gt;\n#out:&lt;re.Match object; span=(30, 35), match='alone'&gt;</code></pre>\n<h2 id=\"%C2%A08.compile()\"> 8.compile()</h2>\n<p>基础语法格式为：</p>\n<pre><code class=\"language-python\">compile(pattern, flags=0)</code></pre>\n<ul><li>pattern:匹配目标对象的正则表达式<strong>pattern</strong>或原生字符串表示</li><li>flags：正则表达式使用时的控制标记</li></ul>\n<p> compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\npattern=re.compile('to')\npattern.search(strings)\n#out:&lt;re.Match object; span=(15, 17), match='to'&gt;</code></pre>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\npattern=re.compile('to')\nobject_search=pattern.search(strings)\nobject_search.group()\n#out:'to'\nobject_search.start()\n#out:15\nobject_search.end()\n#out:17\nobject_search.span()\n#out:(15,17)\n</code></pre>\n<h2 id=\"9.%C2%A0splite()\">9. splite()</h2>\n<p>基础语法格式为：</p>\n<pre><code class=\"language-python\">re.splite(pattern, string, maxsplit=0, flags=0)</code></pre>\n<p> 参数说明：</p>\n<ul><li>pattern:匹配目标对象的正则表达式<strong>pattern</strong>或原生字符串表示</li><li>string:匹配的字符串</li><li>maxsplit:分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数</li><li>flags：正则表达式使用时的控制标记</li></ul>\n<p>pattern匹配的子串来分割string，如果pattern里使用了圆括号，那么被pattern匹配到的串也将作为返回值列表的一部分,maxsplit为最多被分割的字符串个数。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nre.split(r' ', strings)\n#out:['Fanstuck', 'wants', 'to', 'leave', 'alone', 'alonely']</code></pre>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nre.split(r' ', strings,maxsplit=2)\n#out:['Fanstuck', 'wants', 'to leave alone alonely']</code></pre>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nre.split(r'( )', strings,maxsplit=2)\n#out:['Fanstuck', ' ', 'wants', ' ', 'to leave alone alonely']</code></pre>\n<h2 id=\"%C2%A010.Match%E5%AF%B9%E8%B1%A1%E5%92%8CPattern%E5%AF%B9%E8%B1%A1\"> 10.Match对象和Pattern对象</h2>\n<p>re.match()、re.search()成功匹配的话都会返回一个Match对象，它包含了关于此次匹配的信息，可以使用Match提供的属性或方法来获取这些信息；Pattern对象对象由re.compile()生成，而且方法用处也是一样的。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\npattern=re.compile('to')\nobject_search=pattern.search(strings)\nobject_search.string\n#out:'Fanstuck wants to leave alone alonely'\nobject_search.re\n#out:re.compile(r'to', re.UNICODE)\nobject_search.pos\n#out:0 (开始匹配的位置)\nobject_search.endpos\n#out:37(结束匹配的位置)\nobject_search.lastindex\n#out:None\nobject_search.lastgroup\n#out:None\nobject_search.groupdict()\n#out:{}\nobject_search.group()\n#out:'to'\nobject_search.start()\n#out:15\nobject_search.end()\n#out:17\nobject_search.span()\n#out:(15,17)\n</code></pre>\n<h2 id=\"%E4%B8%89.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E5%8C%B9%E9%85%8D\">三.正则表达式语法匹配</h2>\n<p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p>\n<p>待会我们会用到re库中的函数还进行字符匹配，这里可以通过一个例子先看一下语法：</p>\n<pre><code class=\"language-python\">import re\na = \"abbbbbccccd\"\nb = re.findall('ab+c+d',a)\nprint(b)\n</code></pre>\n<pre>['abbbbbccccd']</pre>\n<p>构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</p>\n<p>正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为\"元字符\"）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p>\n<h2 id=\"1%20%E6%99%AE%E9%80%9A%E5%AD%97%E7%AC%A6\">1 普通字符</h2>\n<p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p>\n<h3 id=\"1.1alone\">1.1alone</h3>\n<p>普通字符串，上述例子基本用的都是普通字符串。这里我们用findall()函数来演示更好：</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('alone',strings))</code></pre>\n<pre>['alone', 'alone']</pre>\n<h3 id=\"%C2%A01.2%5Balone%5D\"> 1.2[alone]</h3>\n<p>匹配 [...] 中的所有字符：</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('[alone]',strings))</code></pre>\n<pre>['a', 'n', 'a', 'n', 'o', 'l', 'e', 'a', 'e', 'a', 'l', 'o', 'n', 'e', 'a', 'l', 'o', 'n', 'e', 'l']</pre>\n<h3 id=\"1.3%5B%5Ealone%5D%C2%A0\">1.3[^alone] </h3>\n<p>匹配除了 [^...] 中字符的所有字符</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('[^alone]',strings))</code></pre>\n<pre>['F', 'u', 'c', 'k', ' ', ' ', 'o', ' ', 'l', 'e', 'v', 'e', ' ', 'l', 'o', 'e', ' ', 'l', 'o', 'e', 'l', 'y']</pre>\n<h3 id=\"1.4%5BA-Z%5D\">1.4[A-Z]</h3>\n<p>[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('[^A-F]',strings))</code></pre>\n<pre>['a', 'n', 's', 't', 'u', 'c', 'k', ' ', 'w', 'a', 'n', 't', 's', ' ', 't', 'o', ' ', 'l', 'e', 'a', 'v', 'e', ' ', 'a', 'l', 'o', 'n', 'e', ' ', 'a', 'l', 'o', 'n', 'e', 'l', 'y']</pre>\n<h3 id=\"1.5%20.\">1.5 .</h3>\n<p>匹配除换行符（\\n、\\r）之外的任何单个字符，相等于 [^\\n\\r]。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('.',strings))</code></pre>\n<pre>['F', 'a', 'n', 's', 't', 'u', 'c', 'k', ' ', 'w', 'a', 'n', 't', 's', ' ', 't', 'o', ' ', 'l', 'e', 'a', 'v', 'e', ' ', 'a', 'l', 'o', 'n', 'e', ' ', 'a', 'l', 'o', 'n', 'e', 'l', 'y']</pre>\n<h3 id=\"%C2%A01.6%5B%5Cs%5CS%5D\"> 1.6[\\s\\S]</h3>\n<p>匹配所有。\\s 是匹配所有空白符，包括换行，\\S 非空白符，不包括换行。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('[\\s\\S]',strings))</code></pre>\n<pre>['F', 'a', 'n', 's', 't', 'u', 'c', 'k', ' ', 'w', 'a', 'n', 't', 's', ' ', 't', 'o', ' ', 'l', 'e', 'a', 'v', 'e', ' ', 'a', 'l', 'o', 'n', 'e', ' ', 'a', 'l', 'o', 'n', 'e', 'l', 'y']</pre>\n<h3 id=\"1.7%5Cw\">1.7\\w</h3>\n<p>匹配字母、数字、下划线。等价于 [A-Za-z0-9_]</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('\\w',strings))</code></pre>\n<pre>['F', 'a', 'n', 's', 't', 'u', 'c', 'k', 'w', 'a', 'n', 't', 's', 't', 'o', 'l', 'e', 'a', 'v', 'e', 'a', 'l', 'o', 'n', 'e', 'a', 'l', 'o', 'n', 'e', 'l', 'y']</pre>\n<h2 id=\"%C2%A02.%E9%9D%9E%E6%89%93%E5%8D%B0%E5%AD%97%E7%AC%A6\"> 2.非打印字符</h2>\n<p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p>\n<h3 id=\"2.1%5Ccx\">2.1\\cx</h3>\n<p>匹配由x指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。</p>\n<h3 id=\"2.2%5Cf\">2.2\\f</h3>\n<p>匹配一个换页符。等价于 \\x0c 和 \\cL。</p>\n<pre><code>strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('\\f',strings))</code></pre>\n<h3 id=\"2.3%5Cn\">2.3\\n</h3>\n<p>匹配一个换行符。等价于 \\x0a 和 \\cJ。</p>\n<pre><code class=\"language-python\">strings='Fanstuck \\n \\\n        wants to leave \\\n        alone alonely'\nprint(re.findall('\\n',strings))\nprint(strings)</code></pre>\n<pre>['\\n']\nFanstuck \n         wants to leave         alone alonely\n</pre>\n<h3 id=\"2.4%5Cr\">2.4\\r</h3>\n<p>匹配一个回车符。等价于 \\x0d 和 \\cM。</p>\n<pre><code class=\"language-python\">strings='\\r Fanstuck \\r \\\n        wants to leave\\r \\\n        alone alonely'\nprint(re.findall('\\r',strings))\nprint(strings)</code></pre>\n<pre>['\\r', '\\r', '\\r']\n         alone alonelye</pre>\n<h3 id=\"2.5%C2%A0%5Cs\">2.5 \\s</h3>\n<p>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。注意 Unicode 正则表达式会匹配全角空格符。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('\\s',strings))</code></pre>\n<pre>[' ', ' ', ' ', ' ', ' ']</pre>\n<h3 id=\"%C2%A02.6%5CS\"> 2.6\\S</h3>\n<p>匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('\\S',strings))</code></pre>\n<pre>['F', 'a', 'n', 's', 't', 'u', 'c', 'k', 'w', 'a', 'n', 't', 's', 't', 'o', 'l', 'e', 'a', 'v', 'e', 'a', 'l', 'o', 'n', 'e', 'a', 'l', 'o', 'n', 'e', 'l', 'y']</pre>\n<h3 id=\"%C2%A02.7%5Ct\"> 2.7\\t</h3>\n<p>匹配一个制表符。等价于 \\x09 和 \\cI。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('\\t',strings))</code></pre>\n<p>没写啥制表符固为空。</p>\n<h3 id=\"2.8%5Cv\">2.8\\v</h3>\n<p>匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</p>\n<h2 id=\"3.%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6\">3.特殊字符</h2>\n<p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的 runoo*b 中的 *，简单的说就是表示任何字符串的意思。如果要查找字符串中的 * 符号，则需要对 * 进行转义，即在其前加一个 \\，runo\\*ob 匹配字符串 <strong>runo*ob</strong>。</p>\n<p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符\"转义\"，即，将反斜杠字符\\ 放在它们前面。下表列出了正则表达式中的特殊字符：</p>\n<h3 id=\"3.1%24\">3.1$</h3>\n<p>匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \\n 或 \\r 之前的位置匹配。则 $ 也匹配 '\\n' 或 '\\r'。要匹配 $ 字符本身，请使用 \\$。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall(' alone alonely$',strings))</code></pre>\n<pre>[' alone alonely']</pre>\n<h3 id=\"%C2%A03.2(%20)\"> 3.2( )</h3>\n<p>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \\( 和 \\)。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('(Fan\\w{2,3}ck)',strings))</code></pre>\n<pre>['Fanstuck']\n</pre>\n<h3 id=\"%C2%A03.3*\"> 3.3*</h3>\n<p>匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \\*。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('(Fan\\w*ck)',strings))</code></pre>\n<pre>['Fanstuck']</pre>\n<h3 id=\"%C2%A03.4%2B\"> 3.4+</h3>\n<p>匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \\+。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('(alone)+',strings))</code></pre>\n<pre>['alone', 'alone']</pre>\n<h3 id=\"%C2%A03.5.\"> 3.5.</h3>\n<p>匹配除换行符 \\n 之外的任何单字符。要匹配 . ，请使用 \\. 。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('Fa.s.u.k',strings))</code></pre>\n<pre>['Fanstuck']</pre>\n<h3 id=\"%C2%A03.6%5B\"> 3.6[</h3>\n<p>标记一个中括号表达式的开始。要匹配 [，请使用 \\[。</p>\n<h3 id=\"3.7%3F\">3.7?</h3>\n<p>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \\?。</p>\n<p>这里要注意一下贪婪模式和非贪婪模式。</p>\n<p>贪婪模式：尽可能多的去匹配数据，表现为\\w后面加某个元字符，例如\\w*：</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('F\\w*',strings))</code></pre>\n<pre>['Fanstuck']</pre>\n<p> 非贪婪模式：尽可能少的去匹配数据，表现为\\w后面加？，例如\\w?</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('F\\w?',strings))</code></pre>\n<pre>['Fa']</pre>\n<h3 id=\"3.8%5C\">3.8\\</h3>\n<p>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， 'n' 匹配字符 'n'。'\\n' 匹配换行符。序列 '\\\\' 匹配 \"\\\"，而 '\\(' 则匹配 \"(\"。</p>\n<h3 id=\"3.9%5E\">3.9^</h3>\n<pre><code class=\"language-python\">strings='alone alonely'\nprint(re.findall('^alone',strings))</code></pre>\n<pre>['alone']</pre>\n<h3 id=\"%C2%A03.10%7B\"> 3.10{<!-- --></h3>\n<p>标记限定符表达式的开始。要匹配 {，请使用 \\{。</p>\n<h3 id=\"3.11%7C\">3.11|</h3>\n<p>指明两项之间的一个选择。要匹配 |，请使用 \\|。</p>\n<h2 id=\"4.%E9%99%90%E5%AE%9A%E7%AC%A6\">4.限定符</h2>\n<p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。</p>\n<p>正则表达式的限定符有：</p>\n<h3 id=\"4.1*\">4.1*</h3>\n<p>上述已作展示</p>\n<h3 id=\"4.2%2B\">4.2+</h3>\n<p>上述已作展示</p>\n<h3 id=\"4.3%EF%BC%9F\">4.3？</h3>\n<p>上述已作展示</p>\n<h3 id=\"4.4%EF%BD%9Bn%EF%BD%9D\">4.4｛n｝</h3>\n<p>n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 \"Bob\" 中的 'o'，但是能匹配 \"food\" 中的两个 o。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('Fan\\w{2}uck',strings))</code></pre>\n<h3 id=\"4.5%C2%A0%7Bn%2C%7D\">4.5 {n,}</h3>\n<p>n 是一个非负整数。至少匹配n 次。贪婪</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('Fan\\w{1,}uck',strings))</code></pre>\n<pre>['Fanstuck']</pre>\n<h3 id=\"4.6%C2%A0%7Bn%2Cm%7D\">4.6 {n,m}</h3>\n<p>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。贪婪</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('^(\\w{2,8}\\s*\\w{2,8})+',strings))a</code></pre>\n<pre>['Fanstuck wants']\n</pre>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('^Fanstuck[(\\w{2,8}\\s*)+]+ly',strings))</code></pre>\n<pre>['Fanstuck wants to leave alone alonely']</pre>\n<p><span style=\"color:#fe2c24;\"> <strong>* 和 + 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个 ? 就可以实现非贪婪或最小匹配。</strong></span></p>\n<h2 id=\"5.%E5%AE%9A%E4%BD%8D%E7%AC%A6\"><span style=\"color:#0d0016;\">5.定位符</span></h2>\n<h3 id=\"5.1%5E\"><span style=\"color:#0d0016;\">5.1</span>^</h3>\n<p>上述已经演示</p>\n<h3 id=\"5.2%24\">5.2$</h3>\n<p>上述已经演示</p>\n<h3 id=\"5.3%5Cb\">5.3\\b</h3>\n<p>匹配一个单词边界，即字与空格间的位置。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall(r'\\balone\\b',strings))</code></pre>\n<pre>['alone']</pre>\n<h3 id=\"%C2%A05.4%5CB\"> 5.4\\B</h3>\n<p>和 ’/b’ 相反，它只匹配非边界的字符。</p>\n<pre><code class=\"language-python\">strings='Fanstuck wants to leave alone alonely'\nprint(re.findall('alone\\\\Bly',strings))</code></pre>\n<pre>['alonely']</pre>\n<h1><a id=\"_19\"></a><code class=\"language-c\"> </code></h1>\n<h2><a id=\"2_34\"></a></h2>\n<hr/>\n<h2 id=\"%E7%82%B9%E5%85%B3%E6%B3%A8%EF%BC%8C%E9%98%B2%E8%B5%B0%E4%B8%A2%EF%BC%8C%E5%A6%82%E6%9C%89%E7%BA%B0%E6%BC%8F%E4%B9%8B%E5%A4%84%EF%BC%8C%E8%AF%B7%E7%95%99%E8%A8%80%E6%8C%87%E6%95%99%EF%BC%8C%E9%9D%9E%E5%B8%B8%E6%84%9F%E8%B0%A2\">点关注，防走丢，<strong>如有纰漏之处，请留言指教，非常感谢</strong></h2>\n<p>以上就是本期全部内容。我是fanstuck ，有问题大家随时留言讨论 ，我们下期见。</p>\n<h1 id=\"%E5%8F%82%E9%98%85%EF%BC%9A\"><a id=\"_45\"></a>参阅：</h1>\n<p><a class=\"link-info\" href=\"https://zhuanlan.zhihu.com/p/29103771\" title=\"Python标准库笔记(2) — re模块\">Python标准库笔记(2) — re模块</a></p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/qq_41817925/article/details/118786558\" title=\"python正则表达式：re库的使用\">python正则表达式：re库的使用</a></p>\n<p><a class=\"link-info\" href=\"https://wenku.baidu.com/view/1fac27ba52e79b89680203d8ce2f0066f53364ac.html\" title=\"python库详解\">python库详解</a></p>\n<p><a class=\"link-info\" href=\"https://www.runoob.com/regexp/regexp-syntax.html\" title=\"re库\">re库</a></p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/weixin_40907382/article/details/79654372?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-79654372.142%5Ev30%5Epc_rank_34,185%5Ev2%5Etag_show&amp;spm=1018.2226.3001.4187\" title=\"python | 史上最全的正则表达式\">python | 史上最全的正则表达式</a></p>\n</div>\n</div>"}