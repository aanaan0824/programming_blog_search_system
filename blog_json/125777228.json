{"blogid": "125777228", "writerAge": "码龄2年", "writerBlogNum": "48", "writerCollect": "669", "writerComment": "1135", "writerFan": "1942", "writerGrade": "5级", "writerIntegral": "2353", "writerName": "广龙宇", "writerProfileAdress": "writer_image\\profile_125777228.jpg", "writerRankTotal": "8128", "writerRankWeekly": "115", "writerThumb": "618", "writerVisitNum": "1805837", "blog_read_count": "30031", "blog_time": "于 2022-07-19 08:04:44 发布", "blog_title": "【一起学Rust】Rust包管理工具Cargo初步了解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c25d1bdfde5f45a78978e3c27a3cac87.png\"/></p>\n<blockquote>\n<p>提示：建议学习完上一节内容再学习本章内容哦，详情请订阅本专栏。</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_7\">前言</a></li><li><a href=\"#_Cargo__18\">一、使用 Cargo 创建项目</a></li><li><ul><li><a href=\"#1__27\">1. 新建项目</a></li><li><a href=\"#2__46\">2. 指定版本管理系统</a></li><li><a href=\"#3_Cargotoml_58\">3. Cargo.toml配置文件</a></li></ul>\n</li><li><a href=\"#_Cargo__83\">二、构建并运行 Cargo 项目</a></li><li><ul><li><a href=\"#1_85\">1.构建项目</a></li><li><ul><li><a href=\"#Cargolock_98\">Cargo.lock文件</a></li></ul>\n</li><li><a href=\"#2_102\">2.运行项目</a></li><li><a href=\"#3_113\">3.检查代码</a></li></ul>\n</li><li><a href=\"#_Cargo__120\">三、发布 Cargo 项目</a></li><li><a href=\"#_137\">总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_7\"></a>前言</h1>\n<p>上一篇文章我们学习了Rust的Hello World，并对其进行了详细分析，相信你已经学习到了，本节我们将使用Cargo创建一个Hello World，并对其进行详细分析。</p>\n<p>我们上次写的Hello World是最简单的程序，是没有依赖的。想想，如果你在开发大型的项目时，一定会引用到其他的库，或者管理一些文件，进行构建，这时候编译就成了个复杂的问题。Rust官方为我们提供了Cargo来管理这些项目，它可以做到上面提到的一切，使用Cargo进行管理将会使你开发变得更容易，我们以后的开发用到的就全是Cargo了。</p>\n<p>Cargo 是 Rust 的构建系统和包管理器。大多数 Rustacean 们使用 Cargo 来管理他们的 Rust 项目，因为它可以为你处理很多任务，比如构建代码、下载依赖库并编译这些库。</p>\n<blockquote>\n<p><code>Rustacean </code>指的就是电脑面前学习的大佬啦。</p>\n</blockquote>\n<hr/>\n<h1><a id=\"_Cargo__18\"></a>一、使用 Cargo 创建项目</h1>\n<p>首先需要检查你的电脑是否安装Cargo，当然，如果你正常安装的话那就必然已经安装上了。</p>\n<pre><code class=\"prism language-powershell\">cargo <span class=\"token operator\">--</span>version\n</code></pre>\n<p>如下返回，就代表安装没有问题，否则建议你重新安装Rust。<br/> <img alt=\"\" src=\"image\\4d0e4f628301493dbd6a822e7dd8e08f.png\"/></p>\n<h2><a id=\"1__27\"></a>1. 新建项目</h2>\n<p>以下命令用来新建一个项目</p>\n<pre><code class=\"prism language-bash\">cargo new hello_cargo\n</code></pre>\n<p>其中<code>hello_cargo</code>是新建项目的名字，运行后如下图就表示创建成功。<br/> <img alt=\"\" src=\"image\\5c51a4d0d2054015bfaa302859e59440.png\"/><br/> 接下来进入刚才创建的项目目录，可以看到目录结构如下，</p>\n<pre><code class=\"prism language-bash\">│  .gitignore\n│  Cargo.toml\n│\n└─src\n        main.rs\n</code></pre>\n<ul><li><strong>.gitignore</strong>是个git忽略文件列表，在上传到git时，并不是所有文件都要上传到github的。同时这也提醒我们，cargo为我们创建了一个github仓库。</li><li><strong>Cargo.toml</strong>是个项目的配置文件，其中包括项目名，依赖等内容，后面详细介绍。</li><li><strong>src/main.rs</strong>是项目创建好自带的Hello World文件。</li></ul>\n<h2><a id=\"2__46\"></a>2. 指定版本管理系统</h2>\n<p>cargo为我们默认创建了git仓库，因为git是一个常用的管理系统，除此以外，cargo还可以指定版本管理系统，使用 <code>--vcs</code> 参数指定或者切换版本管理系统，如果文件夹已经有了仓库了，那么默认就不会创建仓库了。</p>\n<pre><code class=\"prism language-bash\">cargo new --vcs<span class=\"token operator\">=</span>git\n</code></pre>\n<p><code>--vcs</code>的可选项为</p>\n<table><thead><tr><th>可选项</th></tr></thead><tbody><tr><td>git, hg, pijul, fossil, none</td></tr></tbody></table>\n<h2><a id=\"3_Cargotoml_58\"></a>3. Cargo.toml配置文件</h2>\n<p>Cargo.toml文件使用的是TOML配置格式，在TOML格式中</p>\n<ul><li><code>[section]</code> 称为一个片段标题</li><li>name = value 的形式配置标题下面的配置项</li></ul>\n<p>项目的配置文件，可以用文本编辑器打开，其中内容如下</p>\n<pre><code class=\"prism language-bash\"><span class=\"token punctuation\">[</span>package<span class=\"token punctuation\">]</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"hello_cargo\"</span>\nversion <span class=\"token operator\">=</span> <span class=\"token string\">\"0.1.0\"</span>\nedition <span class=\"token operator\">=</span> <span class=\"token string\">\"2021\"</span>\n\n<span class=\"token punctuation\">[</span>dependencies<span class=\"token punctuation\">]</span>\n</code></pre>\n<ol><li><code>[package]</code>是管理当前项目包的信息的<br/> – <code>name </code>表明了项目名字是hello_cargo<br/> – <code>version</code>表明了项目版本号是0.1.0<br/> – <code>edition </code>表明了项目使用的Rust版本号</li><li><code>[dependencies]</code>是管理当前项目包的依赖信息的。在 Rust 中，代码包被称为 <code>crates</code>。这个项目并不需要其他的 <code>crate</code>，不过在后面的项目会用到依赖，那时会用得上这个片段。</li></ol>\n<h1><a id=\"_Cargo__83\"></a>二、构建并运行 Cargo 项目</h1>\n<p>使用cargo运行程序和我们手动运行程序是不一样的，手动运行程序需要先编译，然后再运行，在cargo里面我们一步就可完成这个操作，cargo自动为我们管理了这个过程。</p>\n<h2><a id=\"1_85\"></a>1.构建项目</h2>\n<p>构建项目使用如下命令，</p>\n<pre><code class=\"prism language-bash\">cargo build\n</code></pre>\n<p>运行后，编译成功如下图，<br/> <img alt=\"\" src=\"image\\ddab3322face40afa8d79f415a768943.png\"/><br/> 此时cargo就为我们编译好了项目，找到<code>hello_cargo\\target\\debug</code>目录就可以看到我们编译好的可执行文件，这个和我们在命令行执行文件是一样的</p>\n<p><img alt=\"\" src=\"image\\37f398a5a1f3437f9228efeb504dd49c.png\"/><br/> 可执行程序运行也是和之前一样的<br/> <img alt=\"\" src=\"image\\1ea8ca92c3004e60b8381dd3d5234690.png\"/></p>\n<h3><a id=\"Cargolock_98\"></a>Cargo.lock文件</h3>\n<p>如果项目编译正常，会生成一个<code>Cargo.lock</code>文件，这个文件记录项目依赖的实际版本。你自己<code>永远</code>也不需要碰这个文件，让 Cargo 处理它就行了。</p>\n<h2><a id=\"2_102\"></a>2.运行项目</h2>\n<p>使用cargo来运行项目，使用以下命令</p>\n<pre><code class=\"prism language-bash\">cargo run\n</code></pre>\n<p>运行效果与我们手动运行是一样的，<code>run</code>会自动执行编译和运行的步骤，我们上面已经编译了，因此这里运行时就不需要再次编译了，cargo就变得很智能。<br/> <img alt=\"\" src=\"image\\01526059507749ea81dafb9c5eb744ab.png\"/><br/> 再次修改后运行就会有一个编译的过程<br/> <img alt=\"\" src=\"image\\1feef631f9fa43ffb476e049ce5d1d5e.png\"/></p>\n<h2><a id=\"3_113\"></a>3.检查代码</h2>\n<p>Cargo还提供了一个代码检查的工具，该命令快速检查代码确保其可以编译，但并不产生可执行文件：</p>\n<pre><code class=\"prism language-bash\">cargo check\n</code></pre>\n<p>当我们执行后，并没有报错，说明代码没有问题。<br/> <img alt=\"\" src=\"image\\803ca8b318ad448ea0311cbecd37f398.png\"/></p>\n<h1><a id=\"_Cargo__120\"></a>三、发布 Cargo 项目</h1>\n<p>发布项目时，我们使用以下命令来优化编译项目，以让 Rust 代码运行的更快，不过启用这些优化也需要消耗更长的编译时间。</p>\n<pre><code class=\"prism language-bash\">cargo build --release \n</code></pre>\n<ol><li>Debug是为了开发，你需要经常快速重新构建；</li><li>Release是为用户构建最终程序，它们不会经常重新构建，并且希望程序运行得越快越好。</li></ol>\n<p><img alt=\"\" src=\"image\\7fdc81b873df4ef58dd0f2142bd05bb6.png\"/></p>\n<p>最后你可以在<code>target/release</code>下找到最终的可执行文件。<br/> <img alt=\"\" src=\"image\\016b535bbf784a2b9e39fd9f2ce44cf6.png\"/></p>\n<hr/>\n<h1><a id=\"_137\"></a>总结</h1>\n<p>我们回顾下已学习的 Cargo 内容：</p>\n<ol><li>可以使用 cargo new 创建项目。</li><li>可以使用 cargo build 构建项目。</li><li>可以使用 cargo run 一步构建并运行项目。</li><li>可以使用 cargo check 在不生成二进制文件的情况下构建项目来检查错误。</li><li>有别于将构建结果放在与源码相同的目录，Cargo 会将其放到 target/debug 目录。</li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}