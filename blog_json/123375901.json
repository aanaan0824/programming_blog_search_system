{"blogid": "123375901", "writerAge": "码龄2年", "writerBlogNum": "54", "writerCollect": "249", "writerComment": "48", "writerFan": "52", "writerGrade": "3级", "writerIntegral": "726", "writerName": "ch_ccc", "writerProfileAdress": "writer_image\\profile_123375901.jpg", "writerRankTotal": "24938", "writerRankWeekly": "40793", "writerThumb": "39", "writerVisitNum": "65276", "blog_read_count": "3984", "blog_time": "已于 2022-03-09 14:10:48 修改", "blog_title": "ubuntu18.04下--CMake教程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"CMake__0\"></a>CMake 教程</h1>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#CMake__0\">CMake 教程</a></li><li><ul><li><a href=\"#0_CMake_19\">0. CMake安装及卸载</a></li><li><a href=\"#1___68\">1. 创建简单的实例</a></li><li><a href=\"#2_CMake__123\">2. CMake 重要参数</a></li><li><a href=\"#3__437\">3. 构建项目结构</a></li><li><a href=\"#4_CMakeListtxt__492\">4. CMakeList.txt 模板</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<blockquote>\n<p><code>CMake</code>是开源、跨平台的构建工具，可以让我们通过编写简单的配置文件去生成本地的<code>CMakeList.txt</code>，这个配置文件是独立于运行平台和编译器的，这样就不用亲自去编写Makefile了，而且配置文件可以直接拿到其它平台上使用，无需修改，非常方便。</p>\n</blockquote>\n<p>参考网站：</p>\n<p>[1] <a href=\"https://cmake.org/\">Cmake官网</a></p>\n<p>[2] <a href=\"https://github.com/Kitware/CMake\">Cmake github网址</a></p>\n<p>[3] <a href=\"https://cmake.org/documentation\">Cmake Documentation</a></p>\n<p>[4] <a href=\"https://blog.csdn.net/whahu1989/article/details/82078563\">Linux下CMake简明教程</a></p>\n<p>[5] <a href=\"https://modern-cmake-cn.github.io/Modern-CMake-zh_CN/\">Modern CMake 简体中文版</a></p>\n<h2><a id=\"0_CMake_19\"></a>0. CMake安装及卸载</h2>\n<ol><li>sh文件安装</li></ol>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> sh cmake-3.22.3-linux-x86_64.sh --prefix<span class=\"token operator\">=</span>/usr/local --exclude-subdir\n</code></pre>\n<ol start=\"2\"><li>apt-get 方式</li></ol>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> cmake\n</code></pre>\n<ol start=\"3\"><li>源代码方式</li></ol>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 下载 cmake-3.22.3.tar.gz</span>\n<span class=\"token function\">wget</span> https://github.com/Kitware/CMake/releases/download/v3.22.3/cmake-3.22.3.tar.gz\n\n<span class=\"token comment\"># 解压 cmake-3.21.0-rc2.tar.gz</span>\n\n<span class=\"token function\">tar</span> -zxvf cmake-3.22.3.tar.gz\n\n<span class=\"token comment\"># 切换到 CMake 源目录并执行 bootstrap 脚本</span>\n\n<span class=\"token function\">cd</span> cmake-3.22.3.tar.gz\n./bootstrap --parallel<span class=\"token operator\">=</span>32\n\n<span class=\"token comment\"># 执行 make</span>\n<span class=\"token function\">make</span> -j32\n<span class=\"token function\">make</span> <span class=\"token function\">install</span> -j32\n<span class=\"token function\">ln</span> -s /usr/local/bin/cmake /usr/bin/cmake \n<span class=\"token comment\"># 软连接 ln [original filename] [link name]</span>\n\n<span class=\"token comment\"># 查看 cmake 工具版本</span>\ncmake --version\n</code></pre>\n<ol start=\"4\"><li>CMake 卸载</li></ol>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> autoremove cmake\n</code></pre>\n<h2><a id=\"1___68\"></a>1. 创建简单的实例</h2>\n<ul><li>main.cpp</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello, World!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>CMakeList.txt</li></ul>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># cmake 最低版本需求</span>\ncmake_minimum_required<span class=\"token punctuation\">(</span>VERSION 3.13<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 工程名称</span>\nproject<span class=\"token punctuation\">(</span>cmake_study<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 设置</span>\nset<span class=\"token punctuation\">(</span>CMAKE_CXX_STANDARD 11<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 编译源码生成目标</span>\nadd_executable<span class=\"token punctuation\">(</span>cmake_study src/main.cpp<span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li> <p>文件列表<br/> <img alt=\"image-20220308201513244\" src=\"image\\846572556b4d4bb787e670f4d598aef6.png\"/></p> </li><li> <p>CMake 编译</p> </li></ul>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 创建文件夹</span>\n<span class=\"token function\">mkdir</span> build\n<span class=\"token comment\"># cd 到build 文件夹</span>\n<span class=\"token function\">cd</span> build\n<span class=\"token comment\"># cmake 编译CMakeList.txt</span>\ncmake <span class=\"token punctuation\">..</span> \n<span class=\"token comment\"># make 产生可执行文件</span>\n<span class=\"token function\">make</span>\n<span class=\"token comment\"># 运行</span>\n./cmake_study \n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d67e2f1ab6ff4041846c201fcbf7758b.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\28fc9336b63042ca9dbc24e679ef8f8c.png\"/></p>\n<h2><a id=\"2_CMake__123\"></a>2. CMake 重要参数</h2>\n<ul><li>设置项目名称 <code>project()</code></li></ul>\n<pre><code class=\"prism language-bash\">project<span class=\"token punctuation\">(</span>MyProject<span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>执行：project(MyProject)，就是定义了一个项目的名称为：MyProject，对应的就会生成两个变量：_BINARY_DIR和_SOURCE_DIR，但是cmake中其实已经有两个预定义的变量：PROJECT_BINARY_DIR和PROJECT_SOURCR_DIR ;</p>\n</blockquote>\n<ul><li>编译</li></ul>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 内部构建</span>\ncmake ./ \n<span class=\"token function\">make</span>\n\n<span class=\"token comment\"># 外部构建:外部构建的话， 中间文件和可执行文件会放在build目录</span>\n<span class=\"token function\">mkdir</span> build\n<span class=\"token function\">cd</span> ./build\ncmake <span class=\"token punctuation\">..</span>/ \n<span class=\"token function\">make</span>\n</code></pre>\n<ul><li>获取文件路径中的所有源文件</li></ul>\n<pre><code class=\"prism language-bash\">aux_sourcr_directory<span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>dir<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&lt;</span>variable<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span>\n\naux_sourcr_directory<span class=\"token punctuation\">(</span>. DIR_SRCS<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 将aux_sourcr_directory(. DIR_SRCS)当前目录下的源文件名字存放 到变量DIR_SRCS里面 ，如果源文件比较多，直接用DIR_SRCS变量即可</span>\n</code></pre>\n<ul><li>编译源码生成目标</li></ul>\n<pre><code class=\"prism language-bash\">add_executable<span class=\"token punctuation\">(</span>exename srcname<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># exename : 生成的可执行文件的名字</span>\n<span class=\"token comment\"># srcname : 源文件</span>\n\nadd_executable<span class=\"token punctuation\">(</span>Demo <span class=\"token variable\">${DIR_SRCS}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 可执行文件为 Demo </span>\n./Demo <span class=\"token comment\">#运行可执行文件</span>\n</code></pre>\n<ul><li>生成静态库dll</li></ul>\n<pre><code class=\"prism language-bash\">add_library<span class=\"token punctuation\">(</span>libname <span class=\"token punctuation\">[</span>SHARED<span class=\"token operator\">|</span>STATIC<span class=\"token operator\">|</span>MODULE<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>EXCLUDE_FROM_ALL<span class=\"token punctuation\">]</span> source1 source2 <span class=\"token punctuation\">..</span>. sourceN<span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>说明：</p>\n<p>libname : 生成的库文件的名字</p>\n<p>[SHARED|STATIC|MODULE] :生成库文件的类型（动态库|静态库|模块）</p>\n<p>[EXCLUDE_FROM_ALL] :有这个参数表示该库不会被默认构建</p>\n<p>source1 source2 … sourceN: 生成库依赖的源文件</p>\n</blockquote>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 实例1</span>\nadd_library<span class=\"token punctuation\">(</span>ALib SHARE alib.cpp<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 实例2</span>\naux_sourcr_directory<span class=\"token punctuation\">(</span>. DIR_SRCS<span class=\"token punctuation\">)</span>\nadd_library<span class=\"token punctuation\">(</span>ALib STATIC <span class=\"token variable\">${DIR_SRCS}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li> <p>添加头文件目录</p> <pre><code class=\"prism language-bash\"><span class=\"token comment\"># 方法1</span>\ntarget_include_directories<span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>target<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>SYSTEM<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>BEFORE<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>INTERFACE<span class=\"token operator\">|</span>PUBLIC<span class=\"token operator\">|</span>PRIVATE<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>items1<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>INTERFACE<span class=\"token operator\">|</span>PUBLIC<span class=\"token operator\">|</span>PRIVATE<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>items2<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 当我们添加子项目之后还需要设置一个include路径，例子： eg:target_include_directories(RigelEditor PUBLIC ./include/rgeditor)，表示给 RigelEditor 这个子项目添加一个库文件的路径</span>\n\n<span class=\"token comment\"># 方法2</span>\ninclude_directories<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>AFTER<span class=\"token operator\">|</span>BEFORE<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>SYSTEM<span class=\"token punctuation\">]</span> dir1 <span class=\"token punctuation\">[</span>dir2 …<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [AFTER|BEFORE]：指定了要添加路径是添加到原有列表之前还是之后 </span>\n<span class=\"token comment\"># [SYSTEM]：若指定了system参数，则把被包含的路径当做系统包含路径来处理</span>\n<span class=\"token comment\"># dir1 [dir2 …]把这些路径添加到CMakeLists及其子目录的CMakeLists的头文件包含项目中</span>\n</code></pre> <pre><code class=\"prism language-bash\">include_directories<span class=\"token punctuation\">(</span><span class=\"token string\">\"/opt/MATLAB/R2012a/extern/include\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>引入opencv实例</li></ul> </li></ul>\n<blockquote>\n<p>引入opencv头文件和库说明：</p>\n<p>按照此路径，cmake可以找到一个opencv的设置文件<code>OpenCVConfig.cmake</code>,其中预定义变量<code>OpenCV_INCLUDE_DIRS</code>，<code>OpenCV_VERSION</code>,<code>OpenCV_LIBS</code></p>\n</blockquote>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># ===================================================================================</span>\n<span class=\"token comment\">#  The OpenCV CMake configuration file</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\">#             ** File generated automatically, do not modify **</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\">#  Usage from an external project:</span>\n<span class=\"token comment\">#    In your CMakeLists.txt, add these lines:</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\">#    find_package(OpenCV REQUIRED)</span>\n<span class=\"token comment\">#    include_directories(${OpenCV_INCLUDE_DIRS}) # Not needed for CMake &gt;= 2.8.11</span>\n<span class=\"token comment\">#    target_link_libraries(MY_TARGET_NAME ${OpenCV_LIBS})</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\">#    Or you can search for specific OpenCV modules:</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\">#    find_package(OpenCV REQUIRED core videoio)</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\">#    You can also mark OpenCV components as optional:</span>\n\n<span class=\"token comment\">#    find_package(OpenCV REQUIRED core OPTIONAL_COMPONENTS viz)</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\">#    If the module is found then OPENCV_&lt;MODULE&gt;_FOUND is set to TRUE.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\">#    This file will define the following variables:</span>\n<span class=\"token comment\">#      - OpenCV_LIBS                     : The list of all imported targets for OpenCV modules.</span>\n<span class=\"token comment\">#      - OpenCV_INCLUDE_DIRS             : The OpenCV include directories.</span>\n<span class=\"token comment\">#      - OpenCV_COMPUTE_CAPABILITIES     : The version of compute capability.</span>\n<span class=\"token comment\">#      - OpenCV_ANDROID_NATIVE_API_LEVEL : Minimum required level of Android API.</span>\n<span class=\"token comment\">#      - OpenCV_VERSION                  : The version of this OpenCV build: \"3.4.6\"</span>\n<span class=\"token comment\">#      - OpenCV_VERSION_MAJOR            : Major version part of OpenCV_VERSION: \"3\"</span>\n<span class=\"token comment\">#      - OpenCV_VERSION_MINOR            : Minor version part of OpenCV_VERSION: \"4\"</span>\n<span class=\"token comment\">#      - OpenCV_VERSION_PATCH            : Patch version part of OpenCV_VERSION: \"6\"</span>\n<span class=\"token comment\">#      - OpenCV_VERSION_STATUS           : Development status of this build: \"\"</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\">#    Advanced variables:</span>\n<span class=\"token comment\">#      - OpenCV_SHARED                   : Use OpenCV as shared library</span>\n<span class=\"token comment\">#      - OpenCV_INSTALL_PATH             : OpenCV location</span>\n<span class=\"token comment\">#      - OpenCV_LIB_COMPONENTS           : Present OpenCV modules list</span>\n<span class=\"token comment\">#      - OpenCV_USE_MANGLED_PATHS        : Mangled OpenCV path flag</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\">#    Deprecated variables:</span>\n<span class=\"token comment\">#      - OpenCV_VERSION_TWEAK            : Always \"0\"</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># ===================================================================================</span>\n\n<span class=\"token comment\"># ======================================================</span>\n<span class=\"token comment\">#  Version variables:</span>\n<span class=\"token comment\"># ======================================================</span>\n</code></pre>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 实例：引入opencv库和头文件</span>\ncmake_minimum_required<span class=\"token punctuation\">(</span> VERSION 3.15 <span class=\"token punctuation\">)</span>\nproject<span class=\"token punctuation\">(</span> mainwindow <span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\"># 添加c++ 11标准支持</span>\nset<span class=\"token punctuation\">(</span> CMAKE_CXX_FLAGS <span class=\"token string\">\"-std=c++11\"</span> <span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\"># 寻找OpenCV库</span>\nset<span class=\"token punctuation\">(</span>OpenCV_DIR /home/ubuntu/opt/opencv-3.4.6/release<span class=\"token punctuation\">)</span>\nfind_package<span class=\"token punctuation\">(</span> OpenCV 3 REQUIRED <span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 添加头文件</span>\ninclude_directories<span class=\"token punctuation\">(</span> <span class=\"token variable\">${OpenCV_INCLUDE_DIRS}</span> <span class=\"token punctuation\">)</span>\n \nadd_executable<span class=\"token punctuation\">(</span> mainwindow mainwindow.cpp <span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 链接OpenCV库</span>\ntarget_link_libraries<span class=\"token punctuation\">(</span> mainwindow <span class=\"token variable\">${OpenCV_LIBS}</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 第一个: 添加头文件</span>\n\n<span class=\"token comment\"># 第二个:找到源文件</span>\n\n<span class=\"token comment\"># 第三个：与目标链接起来</span>\n</code></pre>\n<p><code>参考</code>：</p>\n<p><a href=\"https://blog.csdn.net/github_30605157/article/details/79839177\">使用CMake构建OpenCV项目</a></p>\n<p><a href=\"https://blog.csdn.net/sandalphon4869/article/details/100602480\">Linux 使用cmake构建OpenCV项目</a></p>\n<ul><li>添加库文件</li></ul>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 命令1:</span>\ntarget_link_libraries<span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>target<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>item1 <span class=\"token punctuation\">[</span>item2 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>debug<span class=\"token operator\">|</span>optimized<span class=\"token operator\">|</span>general<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>item<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 命令2：</span>\nlink_libraries<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 给当前工程链接需要的库文件（全路径）</span>\nlink_libraries<span class=\"token punctuation\">((</span><span class=\"token string\">\"/opt/MATLAB/R2012a/bin/glnxa64/ \"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#必须添加带名字的全路径 libeng.so</span>\n</code></pre>\n<ul><li>控制目标属性</li></ul>\n<pre><code class=\"prism language-bash\">set_target_properties<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nset_target_properties<span class=\"token punctuation\">(</span>target1 target2 <span class=\"token punctuation\">..</span>. PROPERTIES 属性名称1 值 属性名称2 值 <span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li> <p>变量与缓存</p>\n<ul><li>局部变量</li></ul>\n<blockquote>\n<p>变量的名称通常大写 ;</p>\n</blockquote> <pre><code class=\"prism language-bash\"> <span class=\"token comment\"># 设置局部变量</span>\nset<span class=\"token punctuation\">(</span>MY_VARIABLE <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 引用局部变量</span>\n<span class=\"token variable\">${MY_VARIABLE}</span>\n</code></pre>\n<ul><li>缓存</li></ul>\n<blockquote>\n<p>缓存变量就是cache变量，相当于全局变量;</p>\n</blockquote> <pre><code class=\"prism language-bash\">set<span class=\"token punctuation\">(</span>MY_CACHE_VALUE <span class=\"token string\">\"cache_value\"</span> CACHE INTERNAL <span class=\"token string\">\"THIS IS MY CACHE VALUE\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># THIS IS MY CACHE VALUE，这个字符串相当于对变量的描述说明，不能省略，但可 以自己随便定义</span>\n</code></pre>\n<ul><li> <p>环境变量</p> <pre><code class=\"prism language-bash\"><span class=\"token comment\"># 设置环境变量：</span>\nset<span class=\"token punctuation\">(</span>ENV<span class=\"token punctuation\">{<!-- --></span>variable_name<span class=\"token punctuation\">}</span> value<span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\"># 获取环境变量：</span>\n<span class=\"token variable\">$ENV</span><span class=\"token punctuation\">{<!-- --></span>variable_name<span class=\"token punctuation\">}</span> \n</code></pre> </li><li> <p>内置变量</p>\n<blockquote>\n<p>CMake里面包含大量的内置变量，和自定义的变量相同，常用的有以下：</p>\n</blockquote>\n<table><thead><tr><th>内置变量</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>CMAKE_C_COMPILER</td><td>指定C编译器</td><td></td></tr><tr><td>CMAKE_CXX_COMPILER</td><td>指定C++编译器</td><td></td></tr><tr><td>EXECUTABLE_OUTPUT_PATH</td><td>指定可执行文件的存放路径</td><td></td></tr><tr><td>LIBRARY_OUTPUT_PATH</td><td>指定库文件的放置路径</td><td></td></tr><tr><td>CMAKE_CURRENT_SOURCE_DIR</td><td>当前处理的CMakeLists.txt所在的路径</td><td></td></tr><tr><td>CMAKE_BUILD_TYPE</td><td>控制构建的时候是Debug还是Release</td><td>set(CMAKE_BUILD_TYPE Debug)</td></tr><tr><td>CMAKE_SOURCR_DIR</td><td>CMAKE_SOURCR_DIR</td><td></td></tr><tr><td>CMAKE_BINARY_DIR</td><td>CMAKE_BINARY_DIR：内部构建指的是工程顶层目录，外部构建指的是工程发生编译的目录</td><td></td></tr><tr><td>CMAKE_CURRENT_LIST_LINE</td><td>输出这个内置变量所在的行</td><td></td></tr></tbody></table></li><li> <p>缓存</p> </li></ul> <pre><code class=\"prism language-bash\"><span class=\"token comment\"># 缓存就是之前提到的CMakeCache文件，参见：CMake命令行选项的设置- &gt;CMakeCache.txt文件</span>\n</code></pre> </li><li> <p>CMake 基本语法</p> <p><code>不太完善后续补充一下</code></p>\n<ul><li>if …else…</li></ul> <pre><code class=\"prism language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span>\nCOMMAND1<span class=\"token punctuation\">(</span>ARGS <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>\nCOMMAND2<span class=\"token punctuation\">(</span>ARGS <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>. \n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span>\nCOMMAND1<span class=\"token punctuation\">(</span>ARGS <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span> \nCOMMAND2<span class=\"token punctuation\">(</span>ARGS <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>. \nendif <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>while</li></ul> <pre><code class=\"prism language-bash\">WHILE<span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span>\nCOMMAND1<span class=\"token punctuation\">(</span>ARGS <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span> \nCOMMAND2<span class=\"token punctuation\">(</span>ARGS <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">..</span>. \nENDWHILE<span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>Foreach</li></ul> <pre><code class=\"prism language-bash\">FOREACH<span class=\"token punctuation\">(</span>loop_var arg1 arg2 <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>\nCOMMAND1<span class=\"token punctuation\">(</span>ARGS <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>\nCOMMAND2<span class=\"token punctuation\">(</span>ARGS <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>. \nENDFOREACH<span class=\"token punctuation\">(</span>loop_var<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 实例</span>\nAUX_SOURCE_DIRECTORY<span class=\"token punctuation\">(</span>. SRC_LIST<span class=\"token punctuation\">)</span>\nFOREACH<span class=\"token punctuation\">(</span>F <span class=\"token variable\">${SRC_LIST}</span><span class=\"token punctuation\">)</span>\nMESSAGE<span class=\"token punctuation\">(</span><span class=\"token variable\">${F}</span><span class=\"token punctuation\">)</span>\nENDFOREACH<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">)</span>\n</code></pre> </li></ul>\n<p>​</p>\n<h2><a id=\"3__437\"></a>3. 构建项目结构</h2>\n<pre><code class=\"prism language-bash\"><span class=\"token keyword\">.</span>\n├── CMakeList.txt\n├── include/\n│   ├── CMakeList.txt\n│   ├── includeA.h\n│   └── includeB.h\n├── lib/\n│   ├── CMakeList.txt\n│   ├── libA.c\n│   └── libB.c\n└── main.cpp\n</code></pre>\n<ul><li>第一层CMakeList.txt</li></ul>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 内容如下：</span>\n<span class=\"token comment\"># 项目名称 </span>\nproject<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#需要的cmake最低版本</span>\ncmake_minium_required<span class=\"token punctuation\">(</span>VERSION 2.8<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#将当前目录下的源文件名都赋给DIR_SRC目录</span>\naux_source_directories<span class=\"token punctuation\">(</span>. DIR_SRC<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#添加include目录</span>\ninclude_directories<span class=\"token punctuation\">(</span>include<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#生成可执行文件</span>\nadd_executable<span class=\"token punctuation\">(</span>main <span class=\"token variable\">${DIR_SRC}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#添加子目录</span>\nadd_subdirectories<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#将生成的文件与动态库相连</span>\ntarget_link_libraries<span class=\"token punctuation\">(</span>main test<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#test是lib目录里面生成的</span>\n</code></pre>\n<ul><li>lib目录CMakeList.txt</li></ul>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\">#内容如下： </span>\n<span class=\"token comment\">#将当前的源文件名字都添加到DIR_LIB变量下</span>\naux_source_director<span class=\"token punctuation\">(</span>. DIR_LIB<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#生成库文件命名为test</span>\nadd_libraries<span class=\"token punctuation\">(</span>test <span class=\"token variable\">${DIR_LIB}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>include目录</li></ul>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># include目录的CMakeLists可以为空，因为我们已经将include目录包含在第一层的文件里面</span>\n</code></pre>\n<h2><a id=\"4_CMakeListtxt__492\"></a>4. CMakeList.txt 模板</h2>\n<ul><li>单个CMakeList.txt模板</li></ul>\n<pre><code class=\"prism language-bash\">cmake_minimum_required<span class=\"token punctuation\">(</span>VERSION 3.5<span class=\"token punctuation\">)</span>\n                           \nproject<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>         \n<span class=\"token comment\">## MESSAGE(FATAL_ERROR \"${CMAKE_BUILD_TYPE}\")</span>\n\nif<span class=\"token punctuation\">(</span>CMAKE_COMPILER_IS_GNUCC<span class=\"token punctuation\">)</span>\n    message<span class=\"token punctuation\">(</span><span class=\"token string\">\"COMPILER IS GNUCC\"</span><span class=\"token punctuation\">)</span>    \n    ADD_DEFINITIONS <span class=\"token punctuation\">(</span> -std<span class=\"token operator\">=</span>c++11 <span class=\"token punctuation\">)</span>  \nendif<span class=\"token punctuation\">(</span>CMAKE_COMPILER_IS_GNUCC<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 1. protobuf</span>\n<span class=\"token comment\"># 1.1. Find required protobuf package</span>\nfind_package<span class=\"token punctuation\">(</span>Protobuf REQUIRED<span class=\"token punctuation\">)</span>\nif<span class=\"token punctuation\">(</span>PROTOBUF_FOUND<span class=\"token punctuation\">)</span>\n    message<span class=\"token punctuation\">(</span>STATUS <span class=\"token string\">\"protobuf library found\"</span><span class=\"token punctuation\">)</span>\nelse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    message<span class=\"token punctuation\">(</span>FATAL_ERROR <span class=\"token string\">\"protobuf library is needed but cant be found\"</span><span class=\"token punctuation\">)</span>\nendif<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 1.2. 生成pb.h、pb.cc必须要加的指令    </span>\ninclude_directories<span class=\"token punctuation\">(</span><span class=\"token variable\">${PROTOBUF_INCLUDE_DIRS}</span><span class=\"token punctuation\">)</span>\nINCLUDE_DIRECTORIES<span class=\"token punctuation\">(</span><span class=\"token variable\">${CMAKE_CURRENT_BINARY_DIR}</span><span class=\"token punctuation\">)</span>\nPROTOBUF_GENERATE_CPP<span class=\"token punctuation\">(</span>PROTO_SRCS PROTO_HDRS <span class=\"token variable\">${CMAKE_SOURCE_DIR}</span>/include/protobuf/proto/config.proto<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 1.3. head file path，头文件目录</span>\nmessage<span class=\"token punctuation\">(</span><span class=\"token variable\">${PROTO_HDRS}</span><span class=\"token punctuation\">)</span>\nINCLUDE_DIRECTORIES<span class=\"token punctuation\">(</span><span class=\"token variable\">${CMAKE_SOURCE_DIR}</span>/include/protobuf<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. CUDA</span>\nset<span class=\"token punctuation\">(</span>CUDA_DIR <span class=\"token string\">\"/usr/local/cuda\"</span><span class=\"token punctuation\">)</span>\nfind_package<span class=\"token punctuation\">(</span>CUDA<span class=\"token punctuation\">)</span>\nSET<span class=\"token punctuation\">(</span>CUDA_NVCC_FLAGS --disable-warnings<span class=\"token punctuation\">;</span>-std<span class=\"token operator\">=</span>c++11<span class=\"token punctuation\">;</span>-O3<span class=\"token punctuation\">;</span>-gencode arch<span class=\"token operator\">=</span>compute_75,code<span class=\"token operator\">=</span>sm_75<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">##\tCUDA_ADD_LIBRARY(${PROJECT_NAME} SHARED)</span>\nmessage<span class=\"token punctuation\">(</span><span class=\"token variable\">${CUDA_NVCC_FLAGS}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3. opencv</span>\n<span class=\"token comment\">##\tset(OpenCV_DIR \"/data/wuh/open_source/opencv-3.4.6/build\")</span>\n<span class=\"token comment\">##\tfind_package(OpenCV REQUIRED)</span>\n<span class=\"token comment\">## \tinclude_directories(${OpenCV_INCLUDE_DIRS})</span>\nlink_directories<span class=\"token punctuation\">(</span><span class=\"token string\">\"/usr/local/lib\"</span><span class=\"token punctuation\">)</span>\ninclude_directories<span class=\"token punctuation\">(</span><span class=\"token string\">\"/usr/local/include/opencv4\"</span><span class=\"token punctuation\">)</span>\nlink_directories<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#message(${SOURCE_FILES})</span>\n\n<span class=\"token comment\"># 4. tensorRT</span>\ninclude_directories<span class=\"token punctuation\">(</span>/data/wuh/software/TensorRT-5.1.2.2/include<span class=\"token punctuation\">)</span>\nlink_directories<span class=\"token punctuation\">(</span>/data/wuh/software/TensorRT-5.1.2.2/lib<span class=\"token punctuation\">)</span>\nlink_directories<span class=\"token punctuation\">(</span>/data/wuh/project/test_algorithm_module/algorithm_module/build/<span class=\"token punctuation\">)</span>\nLINK_LIBRARIES<span class=\"token punctuation\">(</span>algorithm<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 5. 头文件</span>\n<span class=\"token comment\"># 5.1. 定义函数，用于递归添加头文件</span>\nfunction<span class=\"token punctuation\">(</span>include_sub_directories_recursively root_dir<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IS_DIRECTORY <span class=\"token variable\">${root_dir}</span><span class=\"token punctuation\">)</span>               <span class=\"token comment\"># 当前路径是一个目录吗，是的话就加入到包含目录</span>\n        message<span class=\"token punctuation\">(</span><span class=\"token string\">\"include dir: \"</span> <span class=\"token variable\">${root_dir}</span><span class=\"token punctuation\">)</span>\n        include_directories<span class=\"token punctuation\">(</span><span class=\"token variable\">${root_dir}</span><span class=\"token punctuation\">)</span>\n    endif<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    file<span class=\"token punctuation\">(</span>GLOB ALL_SUB RELATIVE <span class=\"token variable\">${root_dir}</span> <span class=\"token variable\">${root_dir}</span>/*<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 获得当前目录下的所有文件，让如ALL_SUB列表中</span>\n    foreach<span class=\"token punctuation\">(</span>sub <span class=\"token variable\">${ALL_SUB}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IS_DIRECTORY <span class=\"token variable\">${root_dir}</span>/<span class=\"token variable\">${sub}</span><span class=\"token punctuation\">)</span>\n            include_sub_directories_recursively<span class=\"token punctuation\">(</span><span class=\"token variable\">${root_dir}</span>/<span class=\"token variable\">${sub}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 对子目录递归调用，包含</span>\n        endif<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    endforeach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nendfunction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 5.2. 添加头文件</span>\ninclude_sub_directories_recursively<span class=\"token punctuation\">(</span><span class=\"token variable\">${CMAKE_SOURCE_DIR}</span>/include<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 对子目录递归调用，包含</span>\nMESSAGE<span class=\"token punctuation\">(</span>STATUS <span class=\"token string\">\"CMAK_SOURCE_DIR\"</span> <span class=\"token variable\">${CMAKE_SOURCE_DIR}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 6. 添加源文件</span>\nFILE<span class=\"token punctuation\">(</span>GLOB_RECURSE SOURCE_FILES <span class=\"token variable\">${CMAKE_SOURCE_DIR}</span>/src/*.cu  <span class=\"token variable\">${CMAKE_SOURCE_DIR}</span>/src/*.cpp<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#message(${SOURCE_FILES})</span>\n\n<span class=\"token comment\"># 7. 添加链接库</span>\nLINK_LIBRARIES<span class=\"token punctuation\">(</span>opencv_ml opencv_objdetect opencv_imgproc opencv_core opencv_highgui opencv_imgcodecs opencv_shape opencv_videoio opencv_video<span class=\"token punctuation\">)</span>\nLINK_LIBRARIES<span class=\"token punctuation\">(</span>nvcaffe_parser nvinfer nvinfer_plugin nvparsers<span class=\"token punctuation\">)</span>\nLINK_LIBRARIES<span class=\"token punctuation\">(</span>avcodec avformat swscale avutil<span class=\"token punctuation\">)</span>\nLINK_LIBRARIES<span class=\"token punctuation\">(</span>cuda nvcuvid<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">## LINK_LIBRARIES(algorithm)</span>\nLINK_LIBRARIES<span class=\"token punctuation\">(</span>glog<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 8.source directory，源文件目录</span>\nAUX_SOURCE_DIRECTORY<span class=\"token punctuation\">(</span>test DIR_SRCS<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 9. 设置环境变量，编译用到的源文件全部都要放到这里，否则编译能够通过，</span>\n<span class=\"token comment\"># 但是执行的时候会出现各种问题，比如\"symbol lookup error xxxxx , undefined symbol\"</span>\nSET<span class=\"token punctuation\">(</span>ALL_SRCS <span class=\"token variable\">${DIR_SRCS}</span> <span class=\"token variable\">${PROTO_SRCS}</span> <span class=\"token variable\">${SOURCE_FILES}</span> <span class=\"token variable\">${M_INCLUDE_FILES}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 10.add executable file，添加要编译的可执行文件</span>\n<span class=\"token comment\">##  ADD_EXECUTABLE(${PROJECT_NAME} ${ALL_SRCS})</span>\nCUDA_ADD_EXECUTABLE<span class=\"token punctuation\">(</span><span class=\"token variable\">${PROJECT_NAME}</span> <span class=\"token variable\">${ALL_SRCS}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 11. 链接目标文件与库文件，添加可执行文件所需要的库，比如我们用到了libm.so（命名规则：lib+name+.so），就添加该库的名称</span>\nTARGET_LINK_LIBRARIES<span class=\"token punctuation\">(</span><span class=\"token variable\">${PROJECT_NAME}</span> <span class=\"token variable\">${PROTOBUF_LIBRARIES}</span><span class=\"token punctuation\">)</span>\ntarget_link_libraries<span class=\"token punctuation\">(</span><span class=\"token variable\">${PROJECT_NAME}</span> /usr/local/cuda-10.1/lib64/libcudart.so<span class=\"token punctuation\">)</span>\ntarget_link_libraries<span class=\"token punctuation\">(</span><span class=\"token variable\">${PROJECT_NAME}</span> /usr/local/cuda-10.1/lib64/libcudnn.so<span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>多个CMakeList.txt模板</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2a0295bebd8a4462ae9fea20798a7f1f.png\"/></p>\n<ul><li>主目录</li></ul>\n<blockquote>\n<p>文件目录结构；<br/> ├── CMakeLists.txt<br/> ├── fileA/<br/> │ ├── CMakeLists.txt<br/> │ ├── fileA.cpp<br/> │ └── fileA.h<br/> ├── fileB/<br/> │ ├── CMakeLists.txt<br/> │ ├── fileB.cpp<br/> │ └── fileB.h<br/> └── main.cpp</p>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// main.cpp</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"fileA.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"fileB.h\"</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">fileA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fileB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 主目录下的CMakeLists.txt</span>\ncmake_minimum_required<span class=\"token punctuation\">(</span>VERSION 2.8.3<span class=\"token punctuation\">)</span>\n\nproject <span class=\"token punctuation\">(</span>cmake_files<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Add header file include directories</span>\ninclude_directories<span class=\"token punctuation\">(</span>./fileA ./fileB<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Add block directories</span>\nset<span class=\"token punctuation\">(</span>FILEA_SRC fileA/fileA.cpp<span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">(</span>FILEB_SRC fileB/fileB.cpp<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Target</span>\nadd_executable<span class=\"token punctuation\">(</span>cmake_files main.cpp <span class=\"token variable\">${FILEA_SRC}</span> <span class=\"token variable\">${FILEB_SRC}</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<ul><li>子目录FileA</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 子目录FileA 头文件</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> FILEA_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FILEA_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fileA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n</code></pre>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 子目录FileA 源文件</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"fileA.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fileA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    std<span class=\"token operator\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"FileA--Start\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-bash\">  <span class=\"token comment\"># 子目录FileA下的CMakeLists.txt</span>\n  aux_source_directory<span class=\"token punctuation\">(</span>. DIR_FILEA_SRCS<span class=\"token punctuation\">)</span>\n  add_library<span class=\"token punctuation\">(</span>fileA <span class=\"token variable\">${DIR_FILEA_SRCS}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>子目录FileB</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 子目录FileB 头文件</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> FILEB_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FILEB_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fileB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n</code></pre>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 子目录FileB 源文件</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"fileB.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fileB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    std<span class=\"token operator\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"FileB--Start\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-bash\">  <span class=\"token comment\"># 子目录FileB下的CMakeLists.txt</span>\n  aux_source_directory<span class=\"token punctuation\">(</span>. DIR_FILEB_SRCS<span class=\"token punctuation\">)</span>\n  add_library<span class=\"token punctuation\">(</span>fileB <span class=\"token variable\">${DIR_FILEB_SRCS}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-r28eJZw3-1646805214683)(./assets/image-20220309134148924.png)]\" src=\"image\\96737ba179c74bc5b0390c52a9ee2cce.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}