{"blogid": "123760622", "writerAge": "码龄1年", "writerBlogNum": "126", "writerCollect": "3888", "writerComment": "3714", "writerFan": "16290", "writerGrade": "7级", "writerIntegral": "14538", "writerName": "可口也可樂、", "writerProfileAdress": "writer_image\\profile_123760622.jpg", "writerRankTotal": "701", "writerRankWeekly": "203", "writerThumb": "5359", "writerVisitNum": "97143", "blog_read_count": "4311", "blog_time": "已于 2022-05-30 22:15:07 修改", "blog_title": "C++红黑树", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>C++红黑树</h3>\n<ul><li><a href=\"#_2\">零、前言</a></li><li><a href=\"#_6\">一、红黑树的概念及性质</a></li><li><a href=\"#_41\">二、红黑树结点的定义</a></li><li><a href=\"#_83\">三、红黑树的插入操作</a></li><li><ul><li><a href=\"#1_105\">1、变色处理</a></li><li><a href=\"#2_141\">2、单旋+变色</a></li><li><a href=\"#3_173\">3、双旋+变色</a></li><li><a href=\"#4_203\">4、插入实现</a></li></ul>\n</li><li><a href=\"#_406\">四、红黑树的验证</a></li><li><a href=\"#_469\">五、红黑树的删除</a></li><li><a href=\"#AVL_475\">六、红黑树与**AVL**树的比较</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>零、前言</h1>\n<blockquote>\n<p>本章继AVL树后继续讲解学习C++中另一个二叉搜索树–红黑树</p>\n</blockquote>\n<h1><a id=\"_6\"></a>一、红黑树的概念及性质</h1>\n<ul><li>概念：</li></ul>\n<blockquote>\n<ol><li> <p>红黑树，是一种二叉搜索树，但在每个结点上增加一个存储位表示结点的颜色，可以是Red或Black</p> </li><li> <p>通过对任何一条从根到叶子的路径上各个结点着色方式的限制，红黑树确保没有一条路径会比其他路径长出俩倍，因而是接近平衡的</p> </li></ol>\n</blockquote>\n<blockquote>\n<p>注：AVL树是严格平衡的二叉搜索树，左右子树高度不超过1；红黑树是近似平衡，最长路径不超过最短路径的二倍</p>\n</blockquote>\n<ul><li>示图：</li></ul>\n<img alt=\"image-20220228175734450\" src=\"image\\202202281757584.png\"/>\n<ul><li>红黑树的性质：</li></ul>\n<blockquote>\n<ol><li> <p>每个结点不是红色就是黑色</p> </li><li> <p>根节点是黑色的</p> </li><li> <p>如果一个节点是红色的，则它的两个孩子结点是黑色的</p> </li><li> <p>对于每个结点，从该结点到其所有后代叶结点的简单路径上，均包含相同数目的黑色结点</p> </li><li> <p>每个NIL结点都是黑色的(此处的结点指的是空结点)（该条规则确定了路径条数）</p> </li></ol>\n</blockquote>\n<ul><li>为什么红黑树就能保证其最长路径中节点个数不会超过最短路径节点个数的两倍：</li></ul>\n<blockquote>\n<p>红黑树第三条性质说明红黑树不能存在连续（父子相连）的红结点，可以存在连续的黑结点，又由于第四条性质每个路径上的黑结点个数都相同 ，所以对于最短路径来说一定是都是黑色结点，对于最长路径来说一定是黑色红色相间的路径，所以最长路径不超过最短路径长度的二倍</p>\n</blockquote>\n<ul><li>示图：</li></ul>\n<img alt=\"image-20220228182237198\" src=\"image\\202202281822265.png\"/>\n<h1><a id=\"_41\"></a>二、红黑树结点的定义</h1>\n<blockquote>\n<p>对于红黑树来说以颜色来代替AVL树的平衡因子的作用，除此之外在定义上没有什么区别</p>\n</blockquote>\n<ul><li>实现代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Colour</span><span class=\"token comment\">//颜色</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tRED<span class=\"token punctuation\">,</span>\n\tBLACK<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">RBTreeNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _left<span class=\"token punctuation\">;</span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _right<span class=\"token punctuation\">;</span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _parent<span class=\"token punctuation\">;</span>\n\n\tpair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span> _kv<span class=\"token punctuation\">;</span>\n\tColour _col<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">RBTreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_parent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_kv</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_col</span><span class=\"token punctuation\">(</span>RED<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>注：此处采用枚举来表示，当然也可以使用其他方式</p>\n</blockquote>\n<ul><li>在节点的定义中为什么要将节点的默认颜色给成红色的：</li></ul>\n<blockquote>\n<ol><li> <p>如果默认颜色为黑，那么在插入中插入一个黑结点一定会让该路径上的黑结点数量加1，从而与其他路径上黑结点数量造成不一致，而一定会影响该棵红黑树</p> </li><li> <p>如果默认颜色为红，那么在插入中插入一个红结点，可能新插入结点的父结点为黑色结点则没有影响，也可能新插入结点的父结点为红结点，由于不能存在连续的（父子相连的）红色结点，而对该棵树造成影响</p> </li><li> <p>所以默认为红色比较黑色来说是好的</p> </li></ol>\n</blockquote>\n<h1><a id=\"_83\"></a>三、红黑树的插入操作</h1>\n<blockquote>\n<p>红黑树是在二叉搜索树的基础上加上其平衡限制条件，当违反限制条件时就需要做出相应的调整</p>\n</blockquote>\n<ul><li>红黑树的插入可分为两步：</li></ul>\n<blockquote>\n<ol><li> <p>按照二叉搜索的树规则插入新节点</p> </li><li> <p>新节点插入后检查红黑树的性质是否造到破坏</p> </li></ol>\n</blockquote>\n<ul><li>注意：</li></ul>\n<blockquote>\n<ol><li> <p>因为新节点的默认颜色是红色，如果其父亲节点的颜色是黑色，则没有违反红黑树任何性质，则不需要调整</p> </li><li> <p>当新插入节点的父亲节点颜色为红色时，就违反了性质三不能有连在一起的红色节点，此时需要对红黑树分情况来讨论</p> </li><li> <p>因为插入结点的父结点是红色的，说明父结点不是根结点（根结点是黑色的），因此插入结点的祖父结点（父结点的父结点）就一定存在</p> </li><li> <p>红黑树调整时具体应该如何调整，主要是看插入结点的叔叔（插入结点的父结点的兄弟结点），根据插入结点叔叔的不同，可将红黑树的调整分为三种情况</p> </li></ol>\n</blockquote>\n<blockquote>\n<p>注：约定<strong>cur</strong>为当前节点，<strong>p</strong>为父节点，<strong>g</strong>为祖父节点，<strong>u</strong>为叔叔节点</p>\n</blockquote>\n<h2><a id=\"1_105\"></a>1、变色处理</h2>\n<blockquote>\n<p>情况一: <strong>cur</strong>为红，<strong>p</strong>为红，<strong>g</strong>为黑，<strong>u</strong>存在且为红</p>\n</blockquote>\n<ul><li>示图：</li></ul>\n<img alt=\"image-20220301124649974\" src=\"image\\202203011246014.png\"/>\n<ul><li>分析：</li></ul>\n<blockquote>\n<ol><li> <p>为了让该以 g 为根的子树不存在连续的红色结点，并且不增加路径上的黑色结点，我们让 g 的颜色变红，让 u 和 p 的颜色变黑，各路径上黑色结点数量没变，以此达到红黑树的性质</p> </li><li> <p>因为 p 和 u 的颜色变黑，对其子树没有影响，但是 g 的颜色变红，可能存在影响，需要继续向上判断</p> </li></ol>\n</blockquote>\n<ul><li>判断逻辑：</li></ul>\n<blockquote>\n<ol><li> <p>如果 g 就是该棵树的根那么最后需要将 g 的颜色变黑</p> </li><li> <p>如果 g 是整棵树的子树，如果 g 的父节点是是黑色结点则不用调整，如果是红色结点则需要根据具体情况来做出调整</p> </li></ol>\n</blockquote>\n<ul><li>解决方式：</li></ul>\n<blockquote>\n<p>将p,u改为黑，g改为红，然后把g当成cur，继续向上调整</p>\n</blockquote>\n<ul><li>抽象示图：</li></ul>\n<img alt=\"image-20220301123629153\" src=\"image\\202203011236222.png\"/>\n<ul><li>动图演示1：</li></ul>\n<img alt=\"红黑树变色处理\" src=\"https://typoracole.oss-cn-guangzhou.aliyuncs.com/blogimage-master/blogimage-master/https_/gitee.com/zheng-guijun/blogimage/202203011219610.gif\"/>\n<ul><li>动图演示2：</li></ul>\n<img alt=\"红黑树变色处理2\" src=\"https://typoracole.oss-cn-guangzhou.aliyuncs.com/blogimage-master/blogimage-master/https_/gitee.com/zheng-guijun/blogimage/202203011222339.gif\"/>\n<h2><a id=\"2_141\"></a>2、单旋+变色</h2>\n<blockquote>\n<p>情况二: <strong>cur</strong>为红，<strong>p</strong>为红，<strong>g</strong>为黑，<strong>u</strong>不存在**/u**为黑</p>\n</blockquote>\n<ul><li>示图：</li></ul>\n<img alt=\"image-20220301125108739\" src=\"image\\202203011251806.png\"/>\n<ul><li>分析：</li></ul>\n<blockquote>\n<ol><li> <p>当 u 节点不存在时，说明cur一定是插入节点，如果 cur 不是新插入节点，那么在插入前时 cur 一定是黑色结点（由黑色变红），则插入前就不符合路径上黑结点数量相同的性质</p> </li><li> <p>当 u 节点存在且为黑色时，说明 cur 的颜色插入前一定是黑色，进过插入后变色为红色，否则在插入前就存在连续的红色结点，不符合红黑树性质</p> </li></ol>\n</blockquote>\n<ul><li>解决方法：</li></ul>\n<blockquote>\n<ol><li> <p>如果p为g的左孩子，cur为p的左孩子，则进行右单旋转，p变黑，g变红</p> </li><li> <p>如果p为g的右孩子，cur为p的右孩子，则进行左单旋转，p变黑，g变红</p> </li></ol>\n</blockquote>\n<ul><li>抽象示图：</li></ul>\n<img alt=\"image-20220301123356450\" src=\"image\\202203011233506.png\"/>\n<ul><li>动态示图：</li></ul>\n<img alt=\"红黑树单旋处理1\" src=\"https://typoracole.oss-cn-guangzhou.aliyuncs.com/blogimage-master/blogimage-master/https_/gitee.com/zheng-guijun/blogimage/202203011348329.gif\"/>\n<ul><li>动图演示2：</li></ul>\n<img alt=\"红黑树单旋处理2\" src=\"https://typoracole.oss-cn-guangzhou.aliyuncs.com/blogimage-master/blogimage-master/https_/gitee.com/zheng-guijun/blogimage/202203011354920.gif\"/>\n<h2><a id=\"3_173\"></a>3、双旋+变色</h2>\n<blockquote>\n<p>情况三: <strong>cur</strong>为红，<strong>p</strong>为红，<strong>g</strong>为黑，<strong>u</strong>不存在**/u**为黑</p>\n</blockquote>\n<ul><li>示图：</li></ul>\n<img alt=\"image-20220301130843518\" src=\"image\\202203011308576.png\"/>\n<ul><li>分析：</li></ul>\n<blockquote>\n<p>这里显然一次旋转也无法让达到红黑树平衡，由此就需要进行两次旋转</p>\n</blockquote>\n<ul><li>解决方式：</li></ul>\n<blockquote>\n<ol><li> <p>如果p为g的左孩子，cur为p的右孩子，则针对p做左单旋转，p旋转后再对g进行右单旋，旋转后将cur变黑，g变红</p> </li><li> <p>如果p为g的右孩子，cur为p的左孩子，则针对p做右单旋转，p旋转后再对g进行左单旋，旋转后将cur变黑，g变红</p> </li></ol>\n</blockquote>\n<ul><li>抽象示图：</li></ul>\n<img alt=\"image-20220301133953237\" src=\"image\\202203011339328.png\"/>\n<ul><li>动图演示1：</li></ul>\n<img alt=\"红黑树双旋处理1\" src=\"https://typoracole.oss-cn-guangzhou.aliyuncs.com/blogimage-master/blogimage-master/https_/gitee.com/zheng-guijun/blogimage/202203011401065.gif\"/>\n<ul><li>动图演示2：</li></ul>\n<img alt=\"红黑树双旋处理2\" src=\"https://typoracole.oss-cn-guangzhou.aliyuncs.com/blogimage-master/blogimage-master/https_/gitee.com/zheng-guijun/blogimage/202203011402439.gif\"/>\n<h2><a id=\"4_203\"></a>4、插入实现</h2>\n<p>插入主体实现：</p>\n<pre><code class=\"prism language-cpp\">pair<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//空树的情况</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        _root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>_root<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//查找位置插入节点</span>\n    Node<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&gt;</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            parent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            parent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//创建链接节点</span>\n    cur <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&gt;</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        parent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        parent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cur<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//父节点存在且为红，则需要调整（不能存在连续的红色节点）</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//此时当前节点一定有祖父节点</span>\n        Node<span class=\"token operator\">*</span> granparent <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//具体调整情况主要看叔叔节点</span>\n        <span class=\"token comment\">//分左右讨论</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> granparent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Node<span class=\"token operator\">*</span> uncle <span class=\"token operator\">=</span> granparent<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//情况1：叔叔节点存在且为红</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//修改颜色，继续向上检查</span>\n                granparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n                parent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\n                cur <span class=\"token operator\">=</span> granparent<span class=\"token punctuation\">;</span>\n                parent <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span><span class=\"token comment\">//情况2和3：叔叔节点不存在 或者存在且为黑</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//单旋(三代节点为斜线)+变色</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> parent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>granparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    granparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n                    parent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span><span class=\"token comment\">//双旋(三代节点为折线)+变色</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>granparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    cur<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n                    granparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">//旋转后不需再向上调整了</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span><span class=\"token comment\">//parent=grandparent-&gt;right</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Node<span class=\"token operator\">*</span> uncle <span class=\"token operator\">=</span> granparent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                parent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n                granparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\n                cur <span class=\"token operator\">=</span> granparent<span class=\"token punctuation\">;</span>\n                parent <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> parent<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>granparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    parent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n                    granparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>granparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    cur<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n                    granparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">//确保根节点为黑</span>\n    _root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>newnode<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>旋转实现：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Node<span class=\"token operator\">*</span> subR <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> subRL <span class=\"token operator\">=</span> subR<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> parentP <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\n\n    parent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> subRL<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subRL<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        subRL<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    subR<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n    parent<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> _root<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        _root <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n        subR<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        subR<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parentP<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentP<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            parentP<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            parentP<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Node<span class=\"token operator\">*</span> subL <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> subLR <span class=\"token operator\">=</span> subL<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> parentP <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\n\n    parent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> subLR<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subLR<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        subLR<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    subL<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n    parent<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> _root<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        _root <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n        subL<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        subL<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parentP<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentP<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            parentP<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            parentP<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_406\"></a>四、红黑树的验证</h1>\n<ul><li>红黑树的检测分为两步：</li></ul>\n<blockquote>\n<ol><li> <p>检测其是否满足二叉搜索树(中序遍历是否为有序序列)</p> </li><li> <p>检测其是否满足红黑树的性质</p> </li></ol>\n</blockquote>\n<ul><li>实现代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">IsRBTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//空树</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//根节点为黑色</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"根节点为红色\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//黑色结点数量各路径上相同</span>\n    <span class=\"token comment\">//先走一条得到基准值</span>\n    <span class=\"token keyword\">int</span> Blacknum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n            Blacknum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//检查子树</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_IsRBTree</span><span class=\"token punctuation\">(</span>_root<span class=\"token punctuation\">,</span> Blacknum<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">_IsRBTree</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> blacknum<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//递归到空节点</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>blacknum <span class=\"token operator\">==</span> count<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"各路径上黑色节点个数不同\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//子节点为红则检查父节点是否为红（通过父节点检查子节点会遇到空节点）</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token operator\">-&gt;</span>_parent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"存在连续红色节点\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//计数黑结点</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//递归左右子树</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_IsRBTree</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">,</span> blacknum<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">_IsRBTree</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">,</span> blacknum<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_469\"></a>五、红黑树的删除</h1>\n<blockquote>\n<p>红黑树的删除不做讲解，有兴趣可参考：《算法导论》或者《STL源码剖析》<br/> http://www.cnblogs.com/fornever/archive/2011/12/02/2270692.html<br/> http://blog.csdn.net/chenhuajie123/article/details/11951777</p>\n</blockquote>\n<h1><a id=\"AVL_475\"></a>六、红黑树与<strong>AVL</strong>树的比较</h1>\n<ul><li>分析总结：</li></ul>\n<blockquote>\n<ol><li> <p>红黑树和<strong>AVL</strong>树都是高效的平衡二叉树，增删改查的时间复杂度都是<strong>O( )</strong></p> </li><li> <p>红黑树不追求绝对平衡，其只需保证最长路径不超过最短路径的<strong>2</strong>倍，相对而言，降低了插入和旋转的次数</p> </li><li> <p>所以在经常进行增删的结构中性能比<strong>AVL</strong>树更优，而且红黑树实现比较简单，所以实际运用中红黑树更多</p> </li></ol>\n</blockquote>\n<ul><li> <p>附上源码</p> </li><li> <p>RBTree.h:</p> </li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;assert.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//颜色</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Colour</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tRED<span class=\"token punctuation\">,</span>\n\tBLACK<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">RBTreeNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _left<span class=\"token punctuation\">;</span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _right<span class=\"token punctuation\">;</span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _parent<span class=\"token punctuation\">;</span>\n\n\tpair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span> _kv<span class=\"token punctuation\">;</span>\n\tColour _col<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">RBTreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_parent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_kv</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_col</span><span class=\"token punctuation\">(</span>RED<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RBTree</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">typedef</span> RBTreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">RBTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_root</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">_Destory</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">_Destory</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">_Destory</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">delete</span> root<span class=\"token punctuation\">;</span>\n\t\troot <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">RBTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">_Destory</span><span class=\"token punctuation\">(</span>_root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tNode<span class=\"token operator\">*</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&gt;</span> key<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> key<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tpair<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//空树的情况</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>_root<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">//查找位置插入节点</span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&gt;</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">//创建链接节点</span>\n\t\tcur <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&gt;</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tparent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tparent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcur<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">//父节点存在且为红，则需要调整（不能存在连续的红色节点）</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//此时当前节点一定有祖父节点</span>\n\t\t\tNode<span class=\"token operator\">*</span> granparent <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//具体调整情况主要看叔叔节点</span>\n\t\t\t<span class=\"token comment\">//分左右讨论</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> granparent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tNode<span class=\"token operator\">*</span> uncle <span class=\"token operator\">=</span> granparent<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">//情况1：叔叔节点存在且为红</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">//修改颜色，继续向上检查</span>\n\t\t\t\t\tgranparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\n\t\t\t\t\tcur <span class=\"token operator\">=</span> granparent<span class=\"token punctuation\">;</span>\n\t\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span><span class=\"token comment\">//情况2和3：叔叔节点不存在 或者存在且为黑</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">//单旋(三代节点为斜线)+变色</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> parent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>granparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\tgranparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token keyword\">else</span><span class=\"token comment\">//双旋(三代节点为折线)+变色</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>granparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\tcur<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tgranparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token comment\">//旋转后不需再向上调整了</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span><span class=\"token comment\">//parent=grandparent-&gt;right</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tNode<span class=\"token operator\">*</span> uncle <span class=\"token operator\">=</span> granparent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\tgranparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\n\t\t\t\t\tcur <span class=\"token operator\">=</span> granparent<span class=\"token punctuation\">;</span>\n\t\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> parent<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>granparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tgranparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>granparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\tcur<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tgranparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">//确保根节点为黑</span>\n\t\t_root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>newnode<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">IsRBTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"根节点为红色\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">int</span> Blacknum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n\t\t\t\tBlacknum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">_IsRBTree</span><span class=\"token punctuation\">(</span>_root<span class=\"token punctuation\">,</span> Blacknum<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">_IsRBTree</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> blacknum<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>blacknum <span class=\"token operator\">==</span> count<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"各路径上黑色节点个数不同\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token operator\">-&gt;</span>_parent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"存在连续红色节点\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">_IsRBTree</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">,</span> blacknum<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">_IsRBTree</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">,</span> blacknum<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tNode<span class=\"token operator\">*</span> subR <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> subRL <span class=\"token operator\">=</span> subR<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> parentP <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\n\n\t\tparent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> subRL<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subRL<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tsubRL<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tsubR<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\tparent<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> _root<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_root <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n\t\t\tsubR<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tsubR<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parentP<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentP<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparentP<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparentP<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tNode<span class=\"token operator\">*</span> subL <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> subLR <span class=\"token operator\">=</span> subL<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> parentP <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\n\n\t\tparent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> subLR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subLR<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tsubLR<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tsubL<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\tparent<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> _root<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_root <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n\t\t\tsubL<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tsubL<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parentP<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentP<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparentP<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparentP<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tNode<span class=\"token operator\">*</span> _root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>test.cpp:</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"RBTree.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h&gt;</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestRBTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//int a[] = { 16, 3, 7, 11, 9, 26, 18, 14, 15 };</span>\n\t<span class=\"token comment\">//int a[] = { 4, 2, 6, 1, 3, 5, 15, 7, 16, 14 };</span>\n\tRBTree<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> e <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//t.InOrder();</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">IsRBTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test_RBTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tRBTree<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">IsRBTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">test_RBTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">TestRBTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}