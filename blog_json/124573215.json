{"blogid": "124573215", "writerAge": "码龄2年", "writerBlogNum": "22", "writerCollect": "117", "writerComment": "8", "writerFan": "6", "writerGrade": "2级", "writerIntegral": "251", "writerName": "xiaofengxuan892", "writerProfileAdress": "writer_image\\profile_124573215.jpg", "writerRankTotal": "87737", "writerRankWeekly": "719204", "writerThumb": "12", "writerVisitNum": "71286", "blog_read_count": "3545", "blog_time": "已于 2022-05-15 20:56:52 修改", "blog_title": "Unity中如何使用Rider调试C#和lua代码", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>工作中经常需要调试lua代码，之前使用VS调试C#代码，使用Intellij Idea来调试lua代码，这样其实比较麻烦，所以查了一下，可以直接使用Rider来统一的调试C#和lua代码</p>\n<h1>Rider安装：</h1>\n<p>Rider下载：<a class=\"link-info\" href=\"https://www.jetbrains.com/zh-cn/rider/download/other.html\" title=\"Rider官网下载\">Rider官网下载</a>，根据需要选择对应的版本，建议使用Rider2020.1.0，<a class=\"link-info\" href=\"https://download.csdn.net/download/m0_47975736/85384002\" title=\"参考链接\">参考链接</a></p>\n<p></p>\n<p></p>\n<h1>使用Rider调试C#代码：</h1>\n<p>打开Unity，在preference中设置为Rider，当双击C#文件时则会自动使用Rider打开：</p>\n<p><img alt=\"\" height=\"173\" src=\"image\\bf1c54a15eea4eafa4f1de67924d1aa4.png\" width=\"524\"/>​</p>\n<p>在Rider菜单栏中选择“Attach to Unity Editor”：<br/><img alt=\"\" height=\"169\" src=\"image\\f22eaa9d8d204b4bbf77c368ae0e522a.png\" width=\"371\"/>​</p>\n<p>注意：</p>\n<p>1.一般选择“Attach to Unity Editor”，不要选择“Attach to Unity Editor &amp; Play”。后者在点击调试图标后会自动启动Unity —— 有些情况为了方便调试并不需要自动启动Unity。两者区别仅仅在于是否调试时自动启动Unity，可以根据具体情况而定</p>\n<p>2.在断点C#代码时需要先启动Rider中的调试，然后运行Unity。</p>\n<p>使用Rider断点C#代码很简单，因为在安装Rider后可以将Unity和Rider关联起来，代码调试很简单</p>\n<p></p>\n<p></p>\n<h1>使用Rider调试Lua代码：</h1>\n<h3>1.安装EmmyLua插件用于lua调试：</h3>\n<p>在Rider菜单栏“File -&gt; Settings”：</p>\n<p><img alt=\"\" height=\"237\" src=\"image\\d8fcd48b146548e1a43915f945dd9316.png\" width=\"586\"/>​</p>\n<h3></h3>\n<h3>2.配置LuaDebugger：</h3>\n<p>点击“Edit Configuration”: </p>\n<p> <img alt=\"\" height=\"169\" src=\"image\\a93058f1338240a19c81131ff5c58736.png\" width=\"288\"/>​</p>\n<p>点击左上角“+”添加LuaDebugger：<br/><img alt=\"\" height=\"366\" src=\"image\\a28e309c556d44afbe5e54eaa554307d.png\" width=\"263\"/>​</p>\n<p>设置LuaDebugger的Name以及Connection方式：</p>\n<p><img alt=\"\" height=\"219\" src=\"image\\317b7fe668354e0bbb0a95f810a77164.png\" width=\"544\"/>​</p>\n<h2></h2>\n<h2><span style=\"color:#fe2c24;\"><strong>3.LuaDebugger有两种Conection方式</strong></span></h2>\n<h3><span style=\"color:#0d0016;\">方式一：Rider充当服务器 —— Tcp (Debugger connect IDE)</span></h3>\n<p>Rider先启动调试模式，等待Unity启动后连接</p>\n<p>1.根据LuaDebugger中的设置，需要将“dbg.tcpConnect”粘贴入lua代码中：</p>\n<p><img alt=\"\" height=\"273\" src=\"image\\6fcd3e61de284797b83f4d3382864a61.png\" width=\"517\"/>​</p>\n<p>2.找到C#调用Lua代码最初始的文件，如“GameMain.lua”等，在代码顶部添加：</p>\n<p><img alt=\"\" height=\"183\" src=\"image\\7cede77f28224832a35a462ea7723a48.png\" width=\"601\"/>​</p>\n<p>或者也可以将以上拷贝的“dbg.tcpConnect”等代码放进独立的lua脚本\"EmmyLuaDebgger.lua\"中，然后在“GameMain.lua”中“Require EmmyLuaDebugger”也可以：</p>\n<p>如新建“EmmyLuaDebugger.lua”脚本：</p>\n<div>\n<pre><code class=\"language-Lua\">-- TCP (Debugger connect IDE)\npackage.cpath = package.cpath .. ';C:/Users/Frank/AppData/Roaming/JetBrains/Rider2021.3/plugins/EmmyLua/debugger/emmy/windows/x64/?.dll'\nlocal dbg = require('emmy_core')\ndbg.tcpConnect('localhost', 9966)</code></pre>\n</div>\n<p>在GameMain.lua中：</p>\n<p><img alt=\"\" height=\"108\" src=\"image\\24fe732fe3864cf686c8d901a1176f3e.png\" width=\"308\"/>​</p>\n<p>3.启动Rider调试模式：</p>\n<p><img alt=\"\" height=\"172\" src=\"image\\a99bbea4ce284e378d799ed1fbad0a13.png\" width=\"310\"/>​</p>\n<p>选择“LuaDebugger”后，点击“Debug”按钮开启调试：</p>\n<p><img alt=\"\" height=\"75\" src=\"image\\cf56edcb56094063bf00711648946a21.png\" width=\"598\"/>​</p>\n<p>然后运行Unity，自动连接成功后即可正常进行断点lua代码</p>\n<p></p>\n<p></p>\n<h3>方式二：Unity充当服务器 —— Tcp(IDE connect debugger)</h3>\n<p>先启动Unity，等待Rider连接后调试</p>\n<p>1.复制“dbg”连接代码：</p>\n<p><img alt=\"\" height=\"294\" src=\"image\\f7aef59e69d34e7d81d0dd17f9dd3610.png\" width=\"517\"/>​</p>\n<p>2.新建EmmyLuaDebugger.lua文件：</p>\n<div>\n<pre><code class=\"language-Lua\">--[[-- TCP (Debugger connect IDE)\npackage.cpath = package.cpath .. ';C:/Users/Frank/AppData/Roaming/JetBrains/Rider2021.3/plugins/EmmyLua/debugger/emmy/windows/x64/?.dll'\nlocal dbg = require('emmy_core')\ndbg.tcpConnect('localhost', 9966)]]\n\n-- TCP (IDE connect debugger)\npackage.cpath = package.cpath .. ';C:/Users/Frank/AppData/Roaming/JetBrains/Rider2021.3/plugins/EmmyLua/debugger/emmy/windows/x64/?.dll'\nlocal dbg = require('emmy_core')\ndbg.tcpListen('localhost', 9966)\ndbg.waitIDE()                       -- 这句话非常重要，否则无法确定Rider连接状态\n</code></pre>\n</div>\n<p> 3.在C#最初调用Lua代码的地方执行该脚本：</p>\n<p>在“GameManager.cs”中添加如下语句：<br/><img alt=\"\" height=\"275\" src=\"image\\80c13d334f3b4e2d83bef07e084fe8e5.png\" width=\"422\"/>​</p>\n<p>PS：</p>\n<p>1.该模式下需要在\"dbg.tcpListen\"末尾添加“dbg.waitIDE()”语句，否则启动Unity后会直接运行，并不会出现“等待Rider连接的阶段”，这样是无法正常断点调试的。</p>\n<p>“dbg.waitIDE()”执行后，Unity会直接卡住，此时只有在Rider连接成功后Unity才会继续执行</p>\n<p>2.由于执行“dbg.waitIDE”后Unity会直接卡住，等待Rider连接。此时可以添加一些解释说明以提醒启动Rider调试，例如在“GameManager.cs”中添加“OnGUI”显示，这个后面再添加具体实现方式</p>\n<p>3.启动Unity，然后在Rider端启动调试即可正常断点lua代码</p>\n<p></p>\n<p></p>\n</div>\n</div>"}