{"blogid": "126726863", "writerAge": "码龄2年", "writerBlogNum": "64", "writerCollect": "875", "writerComment": "986", "writerFan": "1319", "writerGrade": "5级", "writerIntegral": "2959", "writerName": "贤蛋大眼萌", "writerProfileAdress": "writer_image\\profile_126726863.jpg", "writerRankTotal": "6654", "writerRankWeekly": "92", "writerThumb": "716", "writerVisitNum": "34869", "blog_read_count": "28", "blog_time": "于 2022-09-07 08:00:00 发布", "blog_title": "【Typescript基础】类的使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          多一些不为什么的坚持\n         \n        \n       \n       \n        \\color{#0000FF}{多一些不为什么的坚持}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord\" style=\"color: rgb(0, 0, 255);\"><span class=\"mord cjk_fallback\" style=\"color: rgb(0, 0, 255);\">多一些不为什么的坚持</span></span></span></span></span></span> 🙊</p>\n<p><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          贤蛋🥚大眼萌，一名很普通但不想普通的程序媛\n         \n        \n       \n       \n        \\color{#FF0000}{贤蛋 🥚大眼萌 ，一名很普通但不想普通的程序媛}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord\" style=\"color: rgb(255, 0, 0);\"><span class=\"mord cjk_fallback\" style=\"color: rgb(255, 0, 0);\">贤蛋</span><span class=\"mord\" style=\"color: rgb(255, 0, 0);\">🥚</span><span class=\"mord cjk_fallback\" style=\"color: rgb(255, 0, 0);\">大眼萌，一名很普通但不想普通的程序媛</span></span></span></span></span></span>🤳</p>\n<p>📝本文章收录于专栏：<a href=\"https://blog.csdn.net/weixin_47980825/category_11989536.html\">Typescript学习</a></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>类的使用</h3>\n<ul><li><ul><li><a href=\"#__8\">⚙️ 认识类的使用</a></li><li><a href=\"#__16\">🧨 类的定义</a></li><li><a href=\"#__44\">🧬 类的继承</a></li><li><a href=\"#__52\">🎉 类的成员修饰符</a></li><li><a href=\"#_readonly_66\">🎁 只读属性readonly</a></li><li><a href=\"#_getterssetters_97\">🛒 getters/setters</a></li><li><a href=\"#__105\">⛏ 静态成员</a></li><li><a href=\"#__abstract_113\">🎈 抽象类 abstract</a></li><li><a href=\"#__126\">💊 类的类型</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"__8\"></a>⚙️ 认识类的使用</h2>\n<blockquote>\n<p>​ 在早期的JavaScript开发中（ES5）我们需要通过函数和原型链来实现类和继承，从ES6开始，引入了class关键字，可以 更加方便的定义和使用类。</p>\n<p>​ TypeScript作为JavaScript的超集，也是支持使用class关键字的，并且还可以对类的属性和方法等进行静态类型检测。</p>\n<p>​ 在封装一些业务的时候，类比函数更具有强大的封装性，所以我们需要掌握他们。</p>\n</blockquote>\n<h2><a id=\"__16\"></a>🧨 类的定义</h2>\n<p>​ 使用class 关键字来定义一个类。如果类型没有声明，默认类型是any</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">eating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" eating\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"elva\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">eating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"image-20220905152438608\" src=\"image\\30d7b8d38a73a9d47e4e39c666b3c5cc.png\"/></p>\n<h2><a id=\"__44\"></a>🧬 类的继承</h2>\n<blockquote>\n<p>类有三大特性，分别是继承、封装、多态。使用extends关键字来实现继承，子类中使用super来访问父类</p>\n</blockquote>\n<p><img alt=\"image-20220905154221928\" src=\"image\\641740f579fe5a4f060f2315291cf268.png\"/></p>\n<h2><a id=\"__52\"></a>🎉 类的成员修饰符</h2>\n<blockquote>\n<p>在TypeScript中，类的属性和方法支持三种修饰符： public、private、protected</p>\n<ul><li>public 修饰的是在任何地方可见、公有的属性或方法，默认编写的属性就是public的，可以直接访问；</li><li>private 修饰的是仅在同一类中可见、私有的属性或方法；</li><li>protected 修饰的是仅在类自身及子类中可见、受保护的属性或方法</li></ul>\n</blockquote>\n<p><img alt=\"image-20220905155019101\" src=\"image\\7911aa7843323cc3b9a57c9c90275c49.png\"/></p>\n<p><img alt=\"image-20220905155111804\" src=\"image\\b9a69b8fea4bf516fd691679584c6265.png\"/></p>\n<h2><a id=\"_readonly_66\"></a>🎁 只读属性readonly</h2>\n<p>​ 如果有一个属性我们不希望外界可以任意的修改，只希望确定值后直接使用，那么可以使用readonly.</p>\n<ul><li><em>只读属性是可以在构造器中赋值, 赋值之后就不可以修改</em></li><li><em>属性本身不能进行修改, 但是如果它是对象类型, 对象中的属性是可以修改</em></li></ul>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">readonly</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token keyword\">readonly</span> friend<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Person\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> friend<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>friend <span class=\"token operator\">=</span> friend\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"elva\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kobe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 不可以直接修改friend</span>\n<span class=\"token comment\">// p.friend = new Person(\"james\")</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  p<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<h2><a id=\"_getterssetters_97\"></a>🛒 getters/setters</h2>\n<p>​ 一些私有属性我们是不能直接访问的，或者某些属性我们想要监听它的获取(getter)和设置(setter)的过程， 这个时候我们可以使用存取器。</p>\n<p><img alt=\"image-20220905160105839\" src=\"image\\428ca335f73c9399c6cd18d3d1c80f07.png\"/></p>\n<h2><a id=\"__105\"></a>⛏ 静态成员</h2>\n<p>​ 在TypeScript中通过关键字static来定义类级别的成员和方法。</p>\n<p><img alt=\"image-20220905160254900\" src=\"image\\1f59056bba8a4485aade18c7f583b44d.png\"/></p>\n<h2><a id=\"__abstract_113\"></a>🎈 抽象类 abstract</h2>\n<p>抽象类：是使用abstract声明的类</p>\n<p>抽象方法：在TypeScript中没有具体实现的方法(没有方法体)，就是抽象方法。</p>\n<p><img alt=\"image-20220905160938591\" src=\"image\\83b60aa1707f252f7366d4a00e4cce03.png\"/></p>\n<blockquote>\n<p>抽象类有如下的特点：</p>\n<ul><li>抽象类是不能被实例的话（也就是不能通过new创建）</li><li>抽象方法必须被子类实现，否则该类必须是一个抽象类；</li></ul>\n</blockquote>\n<h2><a id=\"__126\"></a>💊 类的类型</h2>\n<blockquote>\n<p>类本身也是可以作为一种数据类型的。</p>\n</blockquote>\n<p><img alt=\"image-20220905160439485\" src=\"image\\af09c54300abe25ead63c40125dca984.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\db1fa4e8334b47f4a3f848c14112d64b.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}