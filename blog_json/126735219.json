{"blogid": "126735219", "writerAge": "码龄1年", "writerBlogNum": "567", "writerCollect": "1663", "writerComment": "136", "writerFan": "484", "writerGrade": "6级", "writerIntegral": "7100", "writerName": "测试界的飘柔", "writerProfileAdress": "writer_image\\profile_126735219.jpg", "writerRankTotal": "2309", "writerRankWeekly": "1069", "writerThumb": "352", "writerVisitNum": "216869", "blog_read_count": "170", "blog_time": "于 2022-09-06 22:27:17 发布", "blog_title": "postman｜接口测试 ｜ pre-request script 场景应用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a3e4e28c3bec44b8acdb2bb83bc4e8c4.png\"/></p>\n<h2><a id=\"prerequest_script__2\"></a>pre-request script 介绍</h2>\n<p>在过往的工作中，遇到很多测试小伙伴使用 postman 的时候都是直接通过 api 文档的描述请求，检查返回的数据是否正常，很少会用到 pre-request Script 这个功能，甚至也有不少开发的小伙伴也是很少用到这个功能。这个功能类似于 python unittest 里面的 setup 或者是 pytest 里面的 conftest 文件，在执行测试前先执行的函数。</p>\n<h2><a id=\"prerequest_script__6\"></a>pre-request script 应用</h2>\n<p>pre-request script 是 postman 执行前的前置条件功能。它能够做到 request 请求前的工作。包括：</p>\n<p>对登录验证进行加密或解密<br/> 切换环境变量<br/> 获取上一个接口的响应值并进行更新</p>\n<p>以上都是可以在 pre-request script 功能做的。</p>\n<h2><a id=\"postman__16\"></a>postman 执行顺序</h2>\n<p>首先来讲一下，postman 的执行顺序，其实这个只看一张图就够了。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\aabd931496b2498bbfcc7660eed66f7b.png\"/><br/> 从 postman 的介绍中，可以知道 postman 执行的顺序会先去到 pre-request script 检查是否有需要执行的前置条件。</p>\n<h2><a id=\"prerequest_script__23\"></a>pre-request script 场景实践</h2>\n<h2><a id=\"___25\"></a>场景一 : 登录验证加密</h2>\n<p>现在有一个我们项目中，登录接口是通过 user token 登录的。前端页面需要填写 username 以及 password，再通过 js 进行 MD5 加密处理，最后请求接口验证返回登录状态。</p>\n<pre><code>api : /api/login\nmethod : post\nheaders : \n    token: user_token\n    Content-Type: application/json\n</code></pre>\n<p>生成 user_token 方式： username&amp;psaaword 大写</p>\n<p>上面就是接口文档说明的，要通过 md5 方式对 username&amp;password 进行加密。那么在 pre-request script 里面，我们可以这样做。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6bd38518be01409e894d85451c4e7d1c.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ae1d944d4fa5446aa294b48faf2ef300.png\"/><br/> 点开环境变量会看到已经生成了 user_token 对应的加密 token 了。</p>\n<h2><a id=\"___48\"></a>场景二 : 切换环境变量</h2>\n<p>可能对应这个场景比较少人会用上，但是不得不说，这个场景确实有用。</p>\n<p>平时我们切换测试或者产线环境的时候，都是命名不同的环境名称，然后将对应环境的 HOST 填写到环境变量里面去。经常我们会命名这样的：TEST_HOST,PROD_HOST 这样的方式，当我们切换环境的时候，在 request 中改 HOST 即可。</p>\n<p>如果我们可以在请求前，可以自动切换不同的 HOST 就更好。</p>\n<p>我们可以这样做，首先在 collection 中定义不同环境的 HOST。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\24136b339c0d40328f1b74e226bee8c5.png\"/><br/> 其次，我们在 pre-request script 中定义我们的函数</p>\n<pre><code>let varbs = new Set()\npm.collectionVariables.values.each(v =&gt; {\n    varbs.add(v.key.toUpperCase())\n})\n\npm.collectionVariables.values.each(v =&gt; {\n    let envVarbKey = [pm.environment.name, v.key].join(\"_\").toUpperCase()\n    if (varbs.has(envVarbKey)) {\n        pm.collectionVariables.set(v.key, pm.collectionVariables.get(envVarbKey))\n    }\n});\n</code></pre>\n<p>这里面的意思，就是根据环境名去 variables 中寻找我们对应的 HOST</p>\n<p>最终，我们只需要在不同环境中维护 api-key 等参数即可。</p>\n<h2><a id=\"___80\"></a>场景三 : 获取另外接口的响应值并进行更新</h2>\n<p>在请求的时候，需要获取到另外一个接口的响应值，并将响应值作为当前 request 的参数。</p>\n<p>在这里，pre-request script 不仅仅能写函数，还能写请求函数。</p>\n<pre><code>// Refresh the OAuth token if necessary\nvar tokenDate = new Date(2022,9,3);\nvar tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\nif(tokenTimestamp){\n  tokenDate = Date.parse(tokenTimestamp);\n}\nvar expiresInTime = pm.environment.get(\"ExpiresInTime\");\nif(!expiresInTime){\n    expiresInTime = 300000; // Set default expiration time to 5 minutes\n}\n\nif((new Date() - tokenDate) &gt;= expiresInTime)\n{\n   pm.sendRequest({\n      url:  pm.variables.get(\"Auth_Url\"),\n      method: 'POST',\n      header: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': pm.variables.get(\"Basic_Auth\")\n      }\n  }, function (err, res) {\n      try{\n        pm.environment.set(\"OAuth_Token\", res.json().access_token);\n        pm.environment.set(\"OAuth_Timestamp\", new Date());\n\n        // Set the ExpiresInTime variable to the time given in the response if it exists\n        if(res.json().expires_in){\n            expiresInTime = res.json().expires_in * 1000;\n        }\n        pm.environment.set(\"ExpiresInTime\", expiresInTime);\n      }\n      catch(e) {\n        console.log('Unable to load access token from response);\n      }\n  });\n}\n</code></pre>\n<p>这里面的函数，主要是通过检索 token 是否过期，重新生成 token 的请求方法。比较简单理解。</p>\n<p>1、检查 token 是否过期</p>\n<p>2、如果过期，就生成新的 token</p>\n<p>3、将新的 token 设置到环境变量，然后记录设置的时间</p>\n<h2><a id=\"_135\"></a>总结</h2>\n<p>以上就是这篇文章主要讲的内容，主要是讲解 pre-request script 在工作中的应用场景，希望可以帮助到大家。</p>\n<h2><a id=\"_139\"></a>扩展</h2>\n<p>前面说到的加密方式，有很多种，不仅仅是 MD5 加密，同时还有 RSA，AES，bash64 SHA1 等等。<br/> 这几种加密方式有什么不同，在这里简单讲一下：</p>\n<p>Base64 是一种用64个字符来表示任意二进制数据的方法,这种编码规则是公开的，基本只要有程序能力都能解开，所以请勿用作加密用途，它的作用不在于安全性，而在于让内容能在网络间无错的传输。(常用语编码特殊字符，编码小型二进制文件等)</p>\n<p>AES 是对称加密算法，也就是说加密和解密都是采用同一个的密钥。当前最为流行的对称加密算法，这个没有之一。它是如此的常用，以至于很多 CPU 在硬件层面上支持 AES 的加密和解密。AES 是美国政府使用的加密标准，这意味着政府的机密文件大都是用 AES 进行加密的。https 就是使用 AES 来进行数据的加密的，因为 AES 是 TLS 和 SSL 标准的一部分。</p>\n<p>RSA 公开密钥加密（public-keycryptography），也称为非对称加密（asymmetriccryptography），一种密码学算法类型，在这种密码学方法中，需要一对密钥，一个是私人密钥，另一个则是公开密钥。这两个密钥是数学相关，用某用户公钥加密后所得的信息，只能用该用户的解密的私钥才能解密。如果知道了其中一个，并不能计算出另外一个。因此如果公开了一对密钥中的一个，并不会危害到另外一个的秘密性质。称公开的密钥为公钥；不公开的密钥为私钥。这种通常我们在 github 上会用到。</p>\n<p>MD5、SHA1 都是不可逆的，防篡改的，用来校验数据真伪的，不是用来加密数据的。</p>\n<blockquote>\n<p><strong>现在我邀请你进入我们的软件测试学习交流群：</strong>【<strong><code>746506216</code></strong>】，备注“入群”， 大家可以一起探讨交流软件测试，共同学习软件测试技术、面试等软件测试方方面面，还会有免费直播课，收获更多测试技巧，<strong><code>我们一起进阶Python自动化测试/测试开发，走向高薪之路。</code></strong></p>\n</blockquote>\n<p><strong>喜欢软件测试的小伙伴们，如果我的博客对你有帮助、如果你喜欢我的博客内容，请 “点赞” “评论” “收藏” 一 键三连哦！</strong></p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5d962e6050ba484bbfb29735de4c08d4.png\"/></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/a802f752115c475590f27ab7fca03d15.gif#pic_center\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}