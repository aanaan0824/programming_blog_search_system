{"blogid": "121445011", "writerAge": "码龄2年", "writerBlogNum": "28", "writerCollect": "14", "writerComment": "2", "writerFan": "39", "writerGrade": "2级", "writerIntegral": "290", "writerName": "yyDrifter", "writerProfileAdress": "writer_image\\profile_121445011.jpg", "writerRankTotal": "76505", "writerRankWeekly": "488678", "writerThumb": "5", "writerVisitNum": "54478", "blog_read_count": "1208", "blog_time": "于 2021-11-28 22:02:55 发布", "blog_title": "libsecp256k1比特币密码算法开源库（十一）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>2021SC@SDUSC<br/> </p>\n<div class=\"toc\">\n<h3>secp256k1的结构——公钥</h3>\n<ul><li><a href=\"#_3\">公钥解析的格式</a></li><li><ul><li><a href=\"#Raw_public_key_20\">Raw public key原始公钥</a></li><li><a href=\"#Full_length_public_key_24\">Full length public key未压缩公钥</a></li><li><a href=\"#Compressed_public_key_26\">Compressed public key压缩公钥</a></li></ul>\n</li><li><a href=\"#PublicKey_30\">公钥PublicKey</a></li><li><ul><li><a href=\"#_71\">公钥生成函数</a></li><li><a href=\"#_109\">反序列化</a></li><li><a href=\"#_331\">序列化</a></li></ul>\n</li></ul>\n</div>\n<br/> 本文将介绍secp256k1定义的公钥结构，主要介绍公钥的三种格式以及公钥相应的函数实现。\n<p></p>\n<h1><a id=\"_3\"></a>公钥解析的格式</h1>\n<p>公钥的格式下面例举了三种，分别是Compressed、Full和Raw：</p>\n<pre><code class=\"prism language-javascript\">pub <span class=\"token keyword\">enum</span> PublicKeyFormat <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/// Compressed public key, 33 bytes.</span>\n    Compressed<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/// Full length public key, 65 bytes.</span>\n    Full<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/// Raw public key, 64 bytes.</span>\n    Raw<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>下面分别介绍这个东西代表什么意思。<br/> <strong>Compressed public key</strong>即为压缩公钥；<br/> <strong>Full length public key</strong>即为未压缩公钥；<br/> <strong>Raw public key</strong>即为原始公钥。<br/> 虽然上面是这么个顺序，但是介绍的话需要反过来介绍。</p>\n<h2><a id=\"Raw_public_key_20\"></a>Raw public key原始公钥</h2>\n<p>先说Raw public key原始公钥，这其实就是最先认识的那个公钥，它用64字节即512比特表示，由于公钥点坐标的横纵坐标都是256位比特32字节，这个64字节的公钥其实就是把横纵坐标直接拼起来。</p>\n<p>这样表示公钥的话省时省力，公钥是什么样就表示成为什么样。但是有一个用于序列化ECDSA的公钥标准，称之为Standard for Efficient Cryptography（SEC高效加密标准），那么既然他说高效了，直接原样存储公钥肯定不是最高效的，于是就有了未压缩公钥和压缩公钥。</p>\n<h2><a id=\"Full_length_public_key_24\"></a>Full length public key未压缩公钥</h2>\n<p>未压缩公钥有65个字节，比原始公钥还要多一个字节，这其实是为了区分未压缩公钥和压缩公钥，给他们分别加一个一字节的前缀。未压缩公钥的一字节前缀用16进制表示为0x04，由于是16进制表示，04代表两个16进制数，共8比特，即一字节。</p>\n<h2><a id=\"Compressed_public_key_26\"></a>Compressed public key压缩公钥</h2>\n<p>压缩公钥有33字节，和未压缩公钥一样，在压缩公约前面加了一个字节的前缀来表示是压缩后的公钥，剩下的32字节就只有公钥的x坐标，y坐标不再保留，要得到公钥的y坐标需要把x坐标代入到椭圆曲线方程中得到。<br/> 但是这里就会有一个问题，有限域椭圆曲线方程关于y=p/2对称，如果只给一个x坐标会得到两个y坐标值，且这两个y坐标值的和为p。这样就需要对具体是哪个y来标记，由于两个y坐标值的和为p，那么必定有一个y是奇数，另一个是偶数。规定一字节前缀如果为0x02则表示y为偶数，0x03表示y为奇数，这样就可以使用1字节前缀+32字节x坐标来表示压缩后的33字节公钥了。</p>\n<h1><a id=\"PublicKey_30\"></a>公钥PublicKey</h1>\n<p>结构体PublicKey表示公钥，公钥就是一个仿射坐标点：</p>\n<pre><code class=\"prism language-javascript\">pub struct <span class=\"token function\">PublicKey</span><span class=\"token punctuation\">(</span>Affine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>公钥实现的函数如下图所示，相比Message而言多了很多，下文将会具体分析，这里先把细节抹掉，关注整体实现：</p>\n<pre><code class=\"prism language-javascript\">impl PublicKey <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//公钥生成：</span>\npub fn <span class=\"token function\">from_secret_key_with_context</span><span class=\"token punctuation\">(</span>seckey<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>SecretKey<span class=\"token punctuation\">,</span> \ncontext<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>ECMultGenContext<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> PublicKey <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n#<span class=\"token punctuation\">[</span><span class=\"token function\">cfg</span><span class=\"token punctuation\">(</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span>feature <span class=\"token operator\">=</span> <span class=\"token string\">\"static-context\"</span><span class=\"token punctuation\">,</span> feature <span class=\"token operator\">=</span> <span class=\"token string\">\"lazy-static-context\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\npub fn <span class=\"token function\">from_secret_key</span><span class=\"token punctuation\">(</span>seckey<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>SecretKey<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> PublicKey <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">//公钥反序列化</span>\npub fn <span class=\"token function\">parse_slice</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>u8<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> format<span class=\"token operator\">:</span> Option<span class=\"token operator\">&lt;</span>PublicKeyFormat<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Result<span class=\"token operator\">&lt;</span>PublicKey<span class=\"token punctuation\">,</span> Error<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n\npub fn <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>u8<span class=\"token punctuation\">;</span> util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">FULL_PUBLIC_KEY_SIZE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Result<span class=\"token operator\">&lt;</span>PublicKey<span class=\"token punctuation\">,</span> Error<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n     \npub fn <span class=\"token function\">parse_compressed</span><span class=\"token punctuation\">(</span>\n        p<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>u8<span class=\"token punctuation\">;</span> util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">COMPRESSED_PUBLIC_KEY_SIZE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Result<span class=\"token operator\">&lt;</span>PublicKey<span class=\"token punctuation\">,</span> Error<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">//公钥序列化</span>\npub fn <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>u8<span class=\"token punctuation\">;</span> util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">FULL_PUBLIC_KEY_SIZE</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n\npub fn <span class=\"token function\">serialize_compressed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>u8<span class=\"token punctuation\">;</span> util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">COMPRESSED_PUBLIC_KEY_SIZE</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>下面开始讲述具体的函数实现：</p>\n<h2><a id=\"_71\"></a>公钥生成函数</h2>\n<p>公钥生成过程很简单，就是根据椭圆曲线群的生成元G，与私钥进行标量乘法运算，得到的坐标点就是公钥，这里就是公钥生成函数，实现上述过程。</p>\n<p>这个函数表示根据context上下文生成公钥，这里的context上下文其实就是ECMultGenContext，即专门计算<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        a\n       \n       \n        G\n       \n      \n      \n       aG\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.68333em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">G</span></span></span></span></span>类型运算的那个impl，ecmult_gen函数应该看到比较熟悉，在<a href=\"https://blog.csdn.net/qq_50680426/article/details/121304245?spm=1001.2014.3001.5502\">libsecp256k1比特币密码算法开源库（九）</a>的ECMultGenContext部分介绍过这个函数，就是根据传入的Jacobian类型的坐标点pj和Scalar类型的标量seckey进行标量乘法运算，得到结果点坐标。由于最后结果点坐标还是Jacobian类型，需要得到的公钥是一个仿射坐标点，需要用set_gej函数将Jacobian坐标点转化为Affine仿射坐标点。</p>\n<pre><code class=\"prism language-javascript\">pub fn <span class=\"token function\">from_secret_key_with_context</span><span class=\"token punctuation\">(</span>\n        seckey<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>SecretKey<span class=\"token punctuation\">,</span>\n        context<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>ECMultGenContext<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> PublicKey <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> mut pj <span class=\"token operator\">=</span> Jacobian<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">ecmult_gen</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mut pj<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>seckey<span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> mut p <span class=\"token operator\">=</span> Affine<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token punctuation\">.</span><span class=\"token function\">set_gej</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">PublicKey</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>set_gej函数实现如下代码所示，实现的功能就是根据传入的Jacobian类型坐标点转化为Affine仿射坐标点，之前博客中提到过，Jacobian类型坐标点转化为Affine仿射坐标点的对应关系为：Jacobian射影坐标点<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        (\n       \n       \n        x\n       \n       \n        ,\n       \n       \n        y\n       \n       \n        ,\n       \n       \n        z\n       \n       \n        )\n       \n      \n      \n       (x,y,z)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span></span>对应仿射坐标中的点<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        (\n       \n       \n        \n         x\n        \n        \n         \n          z\n         \n         \n          2\n         \n        \n       \n       \n        ,\n       \n       \n        \n         y\n        \n        \n         \n          z\n         \n         \n          3\n         \n        \n       \n       \n        )\n       \n      \n      \n       (\\frac {x}{z^2},\\frac {y}{z^3})\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1.095em; vertical-align: -0.345em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.695392em;\"><span class=\"\" style=\"top: -2.655em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.746314em;\"><span class=\"\" style=\"top: -2.786em; margin-right: 0.0714286em;\"><span class=\"pstrut\" style=\"height: 2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"\" style=\"top: -3.23em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width: 0.04em;\"></span></span><span class=\"\" style=\"top: -3.394em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.345em;\"><span class=\"\"></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.7475em;\"><span class=\"\" style=\"top: -2.655em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.746314em;\"><span class=\"\" style=\"top: -2.786em; margin-right: 0.0714286em;\"><span class=\"pstrut\" style=\"height: 2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span><span class=\"\" style=\"top: -3.23em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width: 0.04em;\"></span></span><span class=\"\" style=\"top: -3.44611em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.03588em;\">y</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.345em;\"><span class=\"\"></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span></span></span></span></span>，按照这个对应关系很容易看懂下面的代码，在相应位置我给出了注释。</p>\n<pre><code class=\"prism language-javascript\">pub fn <span class=\"token function\">set_gej</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">&amp;</span>mut self<span class=\"token punctuation\">,</span> a<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>Jacobian</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        self<span class=\"token punctuation\">.</span>infinity <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>infinity<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> mut a <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">inv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//对z求逆，相当于1/z</span>\n        <span class=\"token keyword\">let</span> z2 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">sqr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//对z逆求平方</span>\n        <span class=\"token keyword\">let</span> z3 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>z <span class=\"token operator\">*</span> z2<span class=\"token punctuation\">;</span><span class=\"token comment\">//对z逆求三次方</span>\n        a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*=</span> z2<span class=\"token punctuation\">;</span><span class=\"token comment\">//a.x即为x/z^2，即为仿射坐标横坐标点</span>\n        a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*=</span> z3<span class=\"token punctuation\">;</span><span class=\"token comment\">//a.y即为y/z^3，即为Jacobian射影坐标纵坐标点</span>\n        a<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">set_int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这个函数没啥好说的，就是把上面那个函数给封装了一下，直接调用上面的那个函数from_secret_key_with_context：</p>\n<pre><code class=\"prism language-javascript\">pub fn <span class=\"token function\">from_secret_key</span><span class=\"token punctuation\">(</span>seckey<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>SecretKey<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> PublicKey <span class=\"token punctuation\">{<!-- --></span>\n        Self<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">from_secret_key_with_context</span><span class=\"token punctuation\">(</span>seckey<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token constant\">ECMULT_GEN_CONTEXT</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_109\"></a>反序列化</h2>\n<p>这个函数运行实现的就是把一个序列化的公钥给反序列化，并加入了错误处理机制。具体的反序列化函数prase（处理未压缩公钥）和parse_compressed（处理压缩公钥）的实现在这段代码的后面给出了解释。<br/> 在本文最开始的部分介绍了原始公钥、压缩公钥和未压缩公钥，这段代码的在反序列化操作前先识别传入的公钥p是哪种类型，对原始公钥做得很绝，直接返回错误了，但是在后面又把原始公钥给转化成了未压缩公钥；对于压缩公钥和未压缩公钥都是直接反序列化为PublicKey，不报错。</p>\n<pre><code class=\"prism language-javascript\">pub fn <span class=\"token function\">parse_slice</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>u8<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> format<span class=\"token operator\">:</span> Option<span class=\"token operator\">&lt;</span>PublicKeyFormat<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Result<span class=\"token operator\">&lt;</span>PublicKey<span class=\"token punctuation\">,</span> Error<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token comment\">//识别公钥类型</span>\n        <span class=\"token keyword\">let</span> format <span class=\"token operator\">=</span> <span class=\"token function\">match</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> format</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token punctuation\">(</span>util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">FULL_PUBLIC_KEY_SIZE</span><span class=\"token punctuation\">,</span> None<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">FULL_PUBLIC_KEY_SIZE</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>PublicKeyFormat<span class=\"token operator\">:</span><span class=\"token operator\">:</span>Full<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> PublicKeyFormat<span class=\"token operator\">:</span><span class=\"token operator\">:</span>Full<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">(</span>util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">COMPRESSED_PUBLIC_KEY_SIZE</span><span class=\"token punctuation\">,</span> None<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">COMPRESSED_PUBLIC_KEY_SIZE</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>PublicKeyFormat<span class=\"token operator\">:</span><span class=\"token operator\">:</span>Compressed<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                PublicKeyFormat<span class=\"token operator\">:</span><span class=\"token operator\">:</span>Compressed\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">(</span>util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">RAW_PUBLIC_KEY_SIZE</span><span class=\"token punctuation\">,</span> None<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">RAW_PUBLIC_KEY_SIZE</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>PublicKeyFormat<span class=\"token operator\">:</span><span class=\"token operator\">:</span>Raw<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> PublicKeyFormat<span class=\"token operator\">:</span><span class=\"token operator\">:</span>Raw<span class=\"token punctuation\">,</span>\n            <span class=\"token parameter\">_</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>Error<span class=\"token operator\">:</span><span class=\"token operator\">:</span>InvalidInputLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//原始公钥返回异常</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//反序列化公钥</span>\n        match format <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//未压缩公钥使用反序列化函数prase反序列化</span>\n            PublicKeyFormat<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token parameter\">Full</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">let</span> mut a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">FULL_PUBLIC_KEY_SIZE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                a<span class=\"token punctuation\">.</span><span class=\"token function\">copy_from_slice</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Self<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//将原始公钥转化为未压缩公钥并反序列化</span>\n            PublicKeyFormat<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token parameter\">Raw</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                use util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">TAG_PUBKEY_FULL</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">let</span> mut a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">FULL_PUBLIC_KEY_SIZE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">TAG_PUBKEY_FULL</span><span class=\"token punctuation\">;</span>\n                a<span class=\"token punctuation\">[</span><span class=\"token number\">1.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">copy_from_slice</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Self<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n             <span class=\"token comment\">//压缩公钥使用反序列化函数parse_compressed反序列化</span>\n            PublicKeyFormat<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token parameter\">Compressed</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">let</span> mut a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">COMPRESSED_PUBLIC_KEY_SIZE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                a<span class=\"token punctuation\">.</span><span class=\"token function\">copy_from_slice</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Self<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">parse_compressed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>下面是专门针对未压缩公钥的反序列化函数prase实现过程，主要思路就是调用set_b32函数分别将x和y进行反序列化处理，其中在代码段<br/> <code>if !x.set_b32(array_ref!(p, 1, 32))</code><br/> 中，(p, 1, 32)表示在数组p中截取下标index为1-32的部分，其中1表示index下标，32表示偏移量offset，共32个数组元素，刚好表示x坐标；同样地在代码段<br/> <code>if !y.set_b32(array_ref!(p, 33, 32))</code><br/> 中，33表示index下标，32表示偏移量offset，即截取数组下标33-64的数组元素，刚好表示y坐标。</p>\n<pre><code class=\"prism language-javascript\">pub fn <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>u8<span class=\"token punctuation\">;</span> util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">FULL_PUBLIC_KEY_SIZE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Result<span class=\"token operator\">&lt;</span>PublicKey<span class=\"token punctuation\">,</span> Error<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        use util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token constant\">TAG_PUBKEY_FULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TAG_PUBKEY_HYBRID_EVEN</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TAG_PUBKEY_HYBRID_ODD</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">TAG_PUBKEY_FULL</span>\n            <span class=\"token operator\">||</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">TAG_PUBKEY_HYBRID_EVEN</span>\n            <span class=\"token operator\">||</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">TAG_PUBKEY_HYBRID_ODD</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>Error<span class=\"token operator\">:</span><span class=\"token operator\">:</span>InvalidPublicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> mut x <span class=\"token operator\">=</span> Field<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> mut y <span class=\"token operator\">=</span> Field<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//反序列化处理x坐标和y坐标</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">set_b32</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array_ref<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>Error<span class=\"token operator\">:</span><span class=\"token operator\">:</span>InvalidPublicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//将处理结束后的坐标转换为Affine类型的变量</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">set_b32</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array_ref<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>Error<span class=\"token operator\">:</span><span class=\"token operator\">:</span>InvalidPublicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> mut elem <span class=\"token operator\">=</span> Affine<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        elem<span class=\"token punctuation\">.</span><span class=\"token function\">set_xy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">TAG_PUBKEY_HYBRID_EVEN</span> <span class=\"token operator\">||</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">TAG_PUBKEY_HYBRID_ODD</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">is_odd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">TAG_PUBKEY_HYBRID_ODD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>Error<span class=\"token operator\">:</span><span class=\"token operator\">:</span>InvalidPublicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">is_infinity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>Error<span class=\"token operator\">:</span><span class=\"token operator\">:</span>InvalidPublicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">is_valid_var</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token function\">PublicKey</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>Error<span class=\"token operator\">:</span><span class=\"token operator\">:</span>InvalidPublicKey<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>截取好对应部分后分别传入set_b32函数进行反序列化处理得到反序列化的x坐标和y坐标。注意这里的set_b32和Message那篇的set_b32虽然名字一样，但是实现不一样，这是因为Message实际上就是一个scalar（即标量），它只有256字节，因此需要8个u32数组元素；但是公钥是一个Field，在压缩前它有320字节（压缩存储之后才会变成256字节），因此需要10个u32数组元素接收。在下面的代码中你可以看到使用了 self.n[0] ~ self.n[9]共计10个数组元素。</p>\n<pre><code class=\"prism language-javascript\">#<span class=\"token punctuation\">[</span>must_use<span class=\"token punctuation\">]</span>\n    pub fn <span class=\"token function\">set_b32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mut self<span class=\"token punctuation\">,</span> a<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>u8<span class=\"token punctuation\">;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> bool <span class=\"token punctuation\">{<!-- --></span>\n        self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">31</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">29</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">28</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">28</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3f</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">27</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3f</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3f</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3f</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> u32<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x03fffff</span>\n            <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">==</span> <span class=\"token number\">0x3ffffff</span>\n            <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x40</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x3d1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0x3ffffff</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        self<span class=\"token punctuation\">.</span>magnitude <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>normalized <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        debug_assert<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最后创建一个Affine类型的变量，调用set_xy函数接收x坐标和y坐标，实现将序列化数组p转化为了一个Affine类型的变量elem，实现了反序列化的过程。</p>\n<p>set_xy函数实现如下所示，即创建一个与给定x和y坐标对应的椭圆曲线群元素，且坐标为仿射坐标。</p>\n<pre><code class=\"prism language-javascript\"> pub fn <span class=\"token function\">set_xy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">&amp;</span>mut self<span class=\"token punctuation\">,</span> x<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>Field<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>Field</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        self<span class=\"token punctuation\">.</span>infinity <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>下面是专门针对压缩公钥的反序列化函数parse_compressed实现过程，压缩的公钥没有y坐标只有x坐标，因此只对x坐标使用set_b32函数处理即可，得到反序列化的x坐标。</p>\n<p>最后创建一个Affine类型的变量，调用set_xo_var函数接收x坐标，实现将序列化数组p转化为了一个Affine类型的变量elem，实现了反序列化的过程。</p>\n<pre><code class=\"prism language-javascript\">pub fn <span class=\"token function\">parse_compressed</span><span class=\"token punctuation\">(</span>\n        p<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>u8<span class=\"token punctuation\">;</span> util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">COMPRESSED_PUBLIC_KEY_SIZE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Result<span class=\"token operator\">&lt;</span>PublicKey<span class=\"token punctuation\">,</span> Error<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        use util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token constant\">TAG_PUBKEY_EVEN</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TAG_PUBKEY_ODD</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">TAG_PUBKEY_EVEN</span> <span class=\"token operator\">||</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">TAG_PUBKEY_ODD</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>Error<span class=\"token operator\">:</span><span class=\"token operator\">:</span>InvalidPublicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> mut x <span class=\"token operator\">=</span> Field<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//反序列化处理x坐标</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">set_b32</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array_ref<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>Error<span class=\"token operator\">:</span><span class=\"token operator\">:</span>InvalidPublicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//将处理结束后的坐标转换为Affine类型的变量</span>\n        <span class=\"token keyword\">let</span> mut elem <span class=\"token operator\">=</span> Affine<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        elem<span class=\"token punctuation\">.</span><span class=\"token function\">set_xo_var</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">TAG_PUBKEY_ODD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">is_infinity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>Error<span class=\"token operator\">:</span><span class=\"token operator\">:</span>InvalidPublicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">is_valid_var</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token function\">PublicKey</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>Error<span class=\"token operator\">:</span><span class=\"token operator\">:</span>InvalidPublicKey<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在传入set_xo_var时就设置<code>p[0] == TAG_PUBKEY_ODD</code>，即公钥y坐标为奇数。<br/> 在set_xo_var函数中实现设置一个仿射坐标表示的群元素，这个群元素的x坐标与给定x坐标一致。</p>\n<p>在set_xo_var函数中调用函数set_xquad，实现群元素坐标x和y的设置，设置之外还是为了验证给定的x坐标是不是有效，即将x代入到椭圆曲线方程中能否找到一个对应的y点。</p>\n<pre><code class=\"prism language-javascript\">    pub fn <span class=\"token function\">set_xo_var</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mut self<span class=\"token punctuation\">,</span> x<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>Field<span class=\"token punctuation\">,</span> odd<span class=\"token operator\">:</span> bool<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> bool <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>self<span class=\"token punctuation\">.</span><span class=\"token function\">set_xquad</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//将在set_xquad中得到的y坐标正常化</span>\n        self<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">normalize_var</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//判断在set_xquad中得到的y坐标是否为奇数，</span>\n        <span class=\"token comment\">//如果不是奇数使用neg函数得到对应奇数坐标</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">is_odd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> odd <span class=\"token punctuation\">{<!-- --></span>\n            self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">neg</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>函数set_xquad实现设置一个仿射坐标表示的群元素，这个群元素的x坐标等于给定x坐标，并求出这个x坐标对应椭圆曲线方程的纵坐标y。如果存在一个给定x坐标的椭圆曲线群下的坐标，则返回值为真。</p>\n<pre><code class=\"prism language-javascript\">    pub fn <span class=\"token function\">set_xquad</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mut self<span class=\"token punctuation\">,</span> x<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>Field<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> bool <span class=\"token punctuation\">{<!-- --></span>\n        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> x2 <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">sqr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> x3 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x <span class=\"token operator\">*</span> x2<span class=\"token punctuation\">;</span><span class=\"token comment\">//求x的三次方</span>\n        self<span class=\"token punctuation\">.</span>infinity <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> mut c <span class=\"token operator\">=</span> Field<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">set_int</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CURVE_B</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c <span class=\"token operator\">+=</span> x3<span class=\"token punctuation\">;</span><span class=\"token comment\">//求 x的三次方 加 b</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//求平方剩余，即求一个数v，v的平方模p结果为c</span>\n        self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span><span class=\"token comment\">//求得的v即为纵坐标y</span>\n        ret\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_331\"></a>序列化</h2>\n<p>本代码实现将未压缩公钥序列化。具体的序列化实现通过调用fill_b32函数实现，对x和y分别使用fill_b32函数，将坐标序列化。</p>\n<pre><code class=\"prism language-javascript\">pub fn <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>u8<span class=\"token punctuation\">;</span> util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">FULL_PUBLIC_KEY_SIZE</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span>\n        use util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">TAG_PUBKEY_FULL</span><span class=\"token punctuation\">;</span>\n\n        debug_assert<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>self<span class=\"token punctuation\">.</span><span class=\"token number\">0.</span><span class=\"token function\">is_infinity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> mut ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span>u8<span class=\"token punctuation\">;</span> <span class=\"token number\">65</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> mut elem <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        elem<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">normalize_var</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        elem<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">normalize_var</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        elem<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">fill_b32</span><span class=\"token punctuation\">(</span>array_mut_ref<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        elem<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">fill_b32</span><span class=\"token punctuation\">(</span>array_mut_ref<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ret<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">TAG_PUBKEY_FULL</span><span class=\"token punctuation\">;</span>\n\n        ret\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>fill_b32实现过程如下所示，Field元素的公钥一个x或y坐标包括10个u32数组元素，序列化后包括32个字节，用32个u8数组元素接收，实现序列化过程。</p>\n<pre><code class=\"prism language-javascript\">pub fn <span class=\"token function\">fill_b32</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">&amp;</span>self<span class=\"token punctuation\">,</span> r<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>mut <span class=\"token punctuation\">[</span>u8<span class=\"token punctuation\">;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        debug_assert<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>normalized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        debug_assert<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">27</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">28</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">29</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">[</span><span class=\"token number\">31</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> u8<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>压缩公钥序列化实现同理，由于是压缩公钥只需序列化x坐标即可，重新调用上面的fill_b32函数实现序列化过程。最后对y坐标的奇偶性判断，加上对应的压缩前缀。</p>\n<pre><code class=\"prism language-javascript\">pub fn <span class=\"token function\">serialize_compressed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>u8<span class=\"token punctuation\">;</span> util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token constant\">COMPRESSED_PUBLIC_KEY_SIZE</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span>\n        use util<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token constant\">TAG_PUBKEY_EVEN</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TAG_PUBKEY_ODD</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        debug_assert<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>self<span class=\"token punctuation\">.</span><span class=\"token number\">0.</span><span class=\"token function\">is_infinity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> mut ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span>u8<span class=\"token punctuation\">;</span> <span class=\"token number\">33</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> mut elem <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        elem<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">normalize_var</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        elem<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">normalize_var</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        elem<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">fill_b32</span><span class=\"token punctuation\">(</span>array_mut_ref<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ret<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> elem<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">is_odd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token constant\">TAG_PUBKEY_ODD</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token constant\">TAG_PUBKEY_EVEN</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        ret\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}