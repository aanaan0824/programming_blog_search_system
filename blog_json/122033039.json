{"blogid": "122033039", "writerAge": "码龄9年", "writerBlogNum": "1073", "writerCollect": "813", "writerComment": "212", "writerFan": "8799", "writerGrade": "7级", "writerIntegral": "10921", "writerName": "Rust语言中文社区", "writerProfileAdress": "writer_image\\profile_122033039.jpg", "writerRankTotal": "1209", "writerRankWeekly": "3826", "writerThumb": "431", "writerVisitNum": "619149", "blog_read_count": "10966", "blog_time": "于 2021-12-19 23:42:33 发布", "blog_title": "【Rust日报】2021-12-19 Foundry：以太坊应用程序开发工具包", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<div id=\"js_content\">\n<h3><strong>foundry：以太坊应用程序开发工具包</strong></h3>\n<p>一个用 Rust 编写的用于以太坊应用程序开发的快速、便携和模块化的工具包。包括：</p>\n<ul><li><p>Forge：以太坊测试框架（如 Truffle、Hardhat 和 Dapptools）。</p></li><li><p>Cast：瑞士军刀，用于与 EVM 智能合约交互、发送交易和获取链数据。</p></li></ul>\n<p>特点：</p>\n<ul><li><p>快速、灵活的编译管道</p>\n<ul><li><p>Solidity 编译器版本自动检测安装</p></li><li><p>增量编译和缓存：仅重新编译更改的文件</p></li><li><p>并行编译</p></li><li><p>非标准目录结构支持</p></li></ul></li><li><p>测试是用 Solidity 编写的</p></li><li><p>使用收缩输入和打印反例的快速模糊测试</p></li><li><p>快速远程 RPC forking 模式利用 Rust 的异步基础架构</p></li><li><p>灵活的 Debug 日志</p>\n<ul><li><p>Dapptools 风格，使用 DsTest 发出的日志</p></li><li><p>Hardhat 风格，使用流行的 console.sol 合约</p></li></ul></li><li><p>便携 (5-10MB) &amp; 易于安装静态链接的二进制文件，无需 Nix 或任何其他包管理器</p></li><li><p>抽象的 EVM 实现（目前支持：Sputnik、EvmOdin）</p></li></ul>\n<p>GitHub：https://github.com/gakonst/foundry</p>\n<h3><strong>chirperjax：简单的2D游戏平台</strong></h3>\n<p>一个简单的 Rust 2D 平台游戏，使用了 Gate 和 Collider 库。</p>\n<ul><li><p>https://crates.io/crates/gate</p></li><li><p>https://crates.io/crates/collider</p></li></ul>\n<p>介绍视频：https://www.youtube.com/watch?v=SR-Yx6nTfZY</p>\n<p>在线 Demo：http://www.luduminis.com/chirperjax/</p>\n<h3><strong>vsh：UnixShell</strong></h3>\n<p>关于为什么要写一个新的 Shell，作者觉得 Nushell 对只想要一个 Shell 的人来说确实有好处，但如果只想要 Rust 写的 bash 呢。vsh 就是要将 bash 的功能都实现，人们用起来还是 bash，而不会掉到一个新的空间（说的是 Nushell）。感兴趣的同学可以关注下。</p>\n<p>GitHub：https://github.com/Vaimer9/vsh</p>\n<h3><strong>Rustacean小项目</strong></h3>\n<ul><li><p>检查地址和端口的 GUI 小工具：https://github.com/shijimasoft/netport</p></li><li><p>一个操作二叉树的小 library：https://github.com/Gabriel-Rosmart/RusTree</p>\n<ul><li><p>可以处理数字和字符串</p></li><li><p>在树上插入新数据</p></li><li><p>查找是否包含某值</p></li><li><p>获取树的深度</p></li><li><p>引用树上的数据</p></li><li><p>合并两棵树</p></li><li><p>从 vector 创建树</p></li><li><p>从树创建 vector</p></li></ul></li><li><p>检查编译的局限性：https://github.com/adam-mcdaniel/harbor</p></li></ul>\n<h3><strong>Rustacean文章推荐</strong></h3>\n<ul><li><p>How not to learn Rust：https://dystroy.org/blog/how-not-to-learn-rust/。这是一篇反向思维的文章，作者列举了一些可能导致初学者无法成功学习 Rust 的错误。</p></li><li><p>Rust Error Handling：https://www.unwoundstack.com/blog/rust-error-handling.html。这是一篇 Rust 错误处理的最佳实践。</p></li><li><p>Rust as a platform for IoT：https://blog.ysndr.de/posts/essays/2021-12-12-rust-for-iot/。这是一篇针对物联网应用的 Rust 生态系统的概述。</p></li></ul>\n<h3><strong>Rust冰山</strong></h3>\n<p style=\"text-align:center;\"><img alt=\"7b5b7ff28db105408d67cc83530f857d.png\" src=\"image\\7b5b7ff28db105408d67cc83530f857d.png\"/></p>\n<hr/>\n<p>From 日报小组 长琴</p>\n<p>社区学习交流平台订阅：</p>\n<ul><li><p>Rustcc 论坛：支持 rss</p></li><li><p>微信公众号：Rust 语言中文社区</p></li></ul>\n</div>\n</div>\n</div>"}