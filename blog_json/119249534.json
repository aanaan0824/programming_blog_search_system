{"blogid": "119249534", "writerAge": "码龄2年", "writerBlogNum": "132", "writerCollect": "14264", "writerComment": "2435", "writerFan": "5489", "writerGrade": "6级", "writerIntegral": "8830", "writerName": "生命是有光的", "writerProfileAdress": "writer_image\\profile_119249534.jpg", "writerRankTotal": "1488", "writerRankWeekly": "3713", "writerThumb": "3410", "writerVisitNum": "652811", "blog_read_count": "80766", "blog_time": "于 2021-07-31 20:26:31 发布", "blog_title": "JavaScript基础大总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"JavaScript_0\"></a>🔥JavaScript帝国之行🔥</h1>\n<table><thead><tr><th>内容</th><th>地址</th></tr></thead><tbody><tr><td>JavaScript基础大总结(一) 🔥</td><td><a href=\"https://blog.csdn.net/Augenstern_QXL/article/details/119249534\">https://blog.csdn.net/Augenstern_QXL/article/details/119249534</a></td></tr><tr><td>JavaScript基础之函数与作用域(二) 🔥</td><td><a href=\"https://blog.csdn.net/Augenstern_QXL/article/details/119250991\">https://blog.csdn.net/Augenstern_QXL/article/details/119250991</a></td></tr><tr><td>JavaScript基础之对象与内置对象(三)🔥</td><td><a href=\"https://blog.csdn.net/Augenstern_QXL/article/details/119250137\">https://blog.csdn.net/Augenstern_QXL/article/details/119250137</a></td></tr><tr><td>JavaScript进阶之DOM技术(四) 🔥</td><td><a href=\"https://blog.csdn.net/Augenstern_QXL/article/details/115416921\">https://blog.csdn.net/Augenstern_QXL/article/details/115416921</a></td></tr><tr><td>JavaScript进阶之BOM技术(五) 🔥</td><td><a href=\"https://blog.csdn.net/Augenstern_QXL/article/details/115406408\">https://blog.csdn.net/Augenstern_QXL/article/details/115406408</a></td></tr><tr><td>JavaScript提高之面向对象(六) 🔥</td><td><a href=\"https://blog.csdn.net/Augenstern_QXL/article/details/115219073\">https://blog.csdn.net/Augenstern_QXL/article/details/115219073</a></td></tr><tr><td>JavaScript提高之ES6(七) 🔥</td><td><a href=\"https://blog.csdn.net/Augenstern_QXL/article/details/115344398\">https://blog.csdn.net/Augenstern_QXL/article/details/115344398</a></td></tr></tbody></table>\n<h1><a id=\"JavaScirpt_12\"></a>✍初识JavaScirpt</h1>\n<ul><li>JavaScript 是世界上最流行的语言之一，是一种运行在客户端的脚本语言 （Script 是脚本的意思）</li><li>脚本语言：不需要编译，运行过程中由 js 解释器( js 引擎）逐行来进行解释并执行</li><li>现在也可以基于 Node.js 技术进行服务器端编程</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\575f5e51a4f644b7b315887d2f07c97d.png\"/></p>\n<h2><a id=\"JS_22\"></a>✍浏览器执行JS简介</h2>\n<p>浏览器分成两部分：渲染引擎和 JS 引擎</p>\n<ul><li>渲染引擎：用来解析HTML与CSS，俗称内核，比如 chrome 浏览器的 blink ，老版本的 webkit</li><li>JS 引擎：也称为 JS 解释器。 用来读取网页中的JavaScript代码，对其处理后运行，比如 chrome 浏览器的 V8</li></ul>\n<p>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以 JavaScript 语言归为脚本语言，会逐行解释执行。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6626246651a048ab94cff1c8afe62fc2.png\"/></p>\n<h2><a id=\"JS_35\"></a>✍JS的组成</h2>\n<p>JavaScript 包括 <mark>ECMAScript</mark>、<mark>DOM</mark>、<mark>BOM</mark></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a9331f588aa54d43b22ae207249f0e1f.png\"/></p>\n<h3><a id=\"ECMAScript_43\"></a>✍ECMAScript</h3>\n<p><strong>ECMAScript</strong> 是由ECMA 国际（ 原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为 JavaScript 或 JScript，但实际上后两者是 ECMAScript 语言的实现和扩展。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\931cd1c9d4fd44e9b547284a635daa26.png\"/></p>\n<p>ECMAScript：ECMAScript 规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</p>\n<h3><a id=\"DOM_53\"></a>🔥DOM文档对象模型</h3>\n<p><strong>文档对象模型</strong>（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过 DOM 提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）。</p>\n<h3><a id=\"BOM_57\"></a>🔥BOM浏览器对象模型</h3>\n<p><strong>BOM</strong> (Browser Object Model，简称BOM) 是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p>\n<h1><a id=\"1JS_61\"></a>1、JS初体验🔥</h1>\n<h2><a id=\"11JS_63\"></a>1.1、行内式JS</h2>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"点我试试\"</span> onclink<span class=\"token operator\">=</span><span class=\"token string\">\"javascript:alert('Hello World')\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<ol><li>可以将单行或少量JS代码写在HTML标签的事件属性中(以on开头的属性)，如： onclink</li><li>注意单双引号的使用：在HTML中我们推荐使用<strong>双引号</strong>，JS中我们推荐使用<strong>单引号</strong></li><li>可读性差，在 HTML 中编入 JS 大量代码时，不方便阅读</li><li>特殊情况下使用</li></ol>\n<h2><a id=\"12JS_74\"></a>1.2、内嵌式JS🔥</h2>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n     <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<ul><li>可以将多行JS代码写到<code>&lt;script&gt;</code>标签中</li><li>内嵌 JS 是学习时常用的方式</li></ul>\n<h2><a id=\"13JS_85\"></a>1.3、外部JS🔥</h2>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"my.js\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<ol><li> <p>利于HTML页面代码结构化，把单独JS代码独立到HTML页面之外，既美观，又方便</p> </li><li> <p>引用外部JS文件的script标签中间不可以写代码</p> </li><li> <p>适合于JS代码量比较大的情况</p> </li></ol>\n<h1><a id=\"2JS_96\"></a>2、JS基本语法🔥</h1>\n<h2><a id=\"21_98\"></a>2.1、注释🔥</h2>\n<h3><a id=\"211_100\"></a>2.1.1、单行注释🔥</h3>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">//  单行注释</span>\n</code></pre>\n<ul><li>快捷键<code>ctrl + /</code></li></ul>\n<h3><a id=\"212_108\"></a>2.1.2、多行注释🔥</h3>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">/*\n\t多行注释\n*/</span>    \n</code></pre>\n<ul><li>快捷键 <code>shift + alt + a</code></li><li>vscode中修改快捷键方式：vscode➡ 首选项按钮➡ 键盘快捷方式 ➡ 查找原来的快捷键➡ 修改为新的快捷键➡ 回车确认</li></ul>\n<h2><a id=\"22_119\"></a>2.2、输入输出语句🔥</h2>\n<table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(msg);</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg);</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info);</td><td>浏览看弹出输入框，用户可以输入</td><td>浏览器</td></tr></tbody></table>\n<ul><li><code>alert()</code> 主要用来显示消息给用户</li><li><code>console.log()</code> 用来给程序员看自己运行时的消息</li></ul>\n<h2><a id=\"23_130\"></a>2.3、变量🔥</h2>\n<ul><li> <p>变量是用于存放数据的<strong>容器</strong>，我们通过<strong>变量名</strong>获取数据，甚至数据可以修改</p> </li><li> <p><strong>本质：<strong>变量是程序在</strong>内存</strong>中申请的一块用来存放数据的空间</p> </li></ul>\n<h3><a id=\"231_136\"></a>2.3.1、变量初始化🔥</h3>\n<ol><li> <p>var是一个JS关键字，用来声明变量(variable变量的意思)。使用该关键字声明变量后，计算机会自动为变量分配内存空间。</p> </li><li> <p>age 是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间</p> </li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">//声明变量同时赋值为18</span>\n<span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//同时声明多个变量时，只需要写一个 var， 多个变量名之间使用英文逗号隔开。</span>\n\n<span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> address <span class=\"token operator\">=</span><span class=\"token string\">'火影村'</span><span class=\"token punctuation\">,</span>salary <span class=\"token operator\">=</span> <span class=\"token number\">15000</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"232_150\"></a>2.3.2、声明变量特殊情况🔥</h3>\n<table><thead><tr><th>情况</th><th>说明</th><th>结果</th></tr></thead><tbody><tr><td>var age; console.log(age);</td><td>只声明，不赋值</td><td>undefined</td></tr><tr><td>console.log(age)</td><td>不声明 不赋值 直接使用</td><td>报错</td></tr><tr><td>age = 10;console.log(age);</td><td>不声明 只赋值</td><td>10</td></tr></tbody></table>\n<h3><a id=\"233_158\"></a>2.3.3、变量的命名规范🔥</h3>\n<ol><li> <p>由字母(A-Z,a-z)，数字(0-9)，下划线(_)，美元符号($)组成，如:usrAge,num01,__name</p> </li><li> <p>严格区分大小写。 <code>var app;</code> 和 <code>var App;</code> 是两个变量</p> </li><li> <p>不能以数字开头。</p> </li><li> <p>不能是关键字，保留字。例如：<code>var,for,while</code></p> </li><li> <p>遵循驼峰命名法。首字母小写，后面单词的首字母需要大写。<code>myFirstName</code></p> </li><li> <p>推荐翻译网站：有道 爱词霸</p> </li></ol>\n<h2><a id=\"24_172\"></a>2.4、数据类型🔥</h2>\n<p><strong>JavaScript</strong> **是一种弱类型或者说动态语言。**这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> \t\t\t <span class=\"token comment\">//这是一个数字型</span>\n<span class=\"token keyword\">var</span> areYouOk <span class=\"token operator\">=</span> <span class=\"token string\">'使得'</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//这是一个字符串</span>\n</code></pre>\n<ul><li> <p>在代码运行时，变量的数据类型是由 JS引擎 <mark>根据 = 右边变量值的数据类型来判断</mark> 的，运行完毕之后， 变量就确定了数据类型。</p> </li><li> <p><mark>JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型</mark></p> </li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//x为数字</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"Bill\"</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//x为字符串</span>\n</code></pre>\n<p>JS 把数据类型分为两类：</p>\n<ul><li>基本数据类型(<mark>Number,String,Boolean,Undefined,Null</mark>)</li><li>复杂数据类型(<mark>Object</mark>)</li></ul>\n<h3><a id=\"241_195\"></a>2.4.1、基本数据类型🔥</h3>\n<table><thead><tr><th>简单数据类型</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>Number</td><td>数字型，包含整型值和浮点型值，如21，0.21</td><td>0</td></tr><tr><td>Boolean</td><td>布尔值类型，如true，false ，等价于1和0</td><td>false</td></tr><tr><td>Undefined</td><td>var a; 声明了变量a但是没有赋值，此时a=undefined</td><td>undefined（未定义的）</td></tr><tr><td>string</td><td>字符串类型，如“张三”</td><td>“”</td></tr><tr><td>Null</td><td>var a = null;声明了变量a为空值</td><td>null</td></tr></tbody></table>\n<h3><a id=\"242Number_205\"></a>2.4.2、数字型<mark>Number</mark></h3>\n<p>JavaScript 数字类型既可以用来保存整数值，也可以保存小数(浮点数）。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//整数</span>\n<span class=\"token keyword\">var</span> Age <span class=\"token operator\">=</span> <span class=\"token number\">21.3747</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//小数</span>\n</code></pre>\n<h3><a id=\"242_216\"></a>2.4.2、数字型进制🔥</h3>\n<p>最常见的进制有二进制、八进制、十进制、十六进制。</p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 1.八进制数字序列范围：0~7</span>\n<span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">07</span><span class=\"token punctuation\">;</span> \t\t<span class=\"token comment\">//对应十进制的7</span>\n<span class=\"token keyword\">var</span> Num2 <span class=\"token operator\">=</span> <span class=\"token number\">019</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//对应十进制的19</span>\n<span class=\"token keyword\">var</span> num3 <span class=\"token operator\">=</span> <span class=\"token number\">08</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//对应十进制的8</span>\n\n\n<span class=\"token comment\">// 2.十六进制数字序列范围：0~9以及A~F</span>\n<span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0xA</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li><strong>在JS中八进制前面加0，十六进制前面加 0x</strong></li></ul>\n<h4><a id=\"_233\"></a>①数字型范围🔥</h4>\n<ul><li>JS中数值的最大值：<code>Number.MAX_VALUE</code></li><li>JS中数值的最小值：<code>Number.MIN_VALUE</code></li></ul>\n<pre><code class=\"prism language-js\">consol<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsol<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"_243\"></a>②数字型的三个特殊值🔥</h4>\n<pre><code class=\"prism language-js\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t<span class=\"token comment\">//Infinity(无穷大)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t<span class=\"token comment\">//-Infinity(无穷小)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       \t<span class=\"token comment\">//NaN - Not a Number ,代表任何一个非数值</span>\n</code></pre>\n<ul><li><mark>Infinity</mark> ，代表无穷大，大于任何数值</li><li><mark>-Infinity</mark> ，代表无穷小，小于任何数值</li><li><mark>Nan</mark> ，Not a Number，代表一个非数值</li></ul>\n<h4><a id=\"isNaN_255\"></a>③isNaN🔥</h4>\n<p>这个方法用来判断非数字，并且返回一个值，如果是数字返回的是false，如果不是数字返回的是true</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\54b996bc0fb74c7fa6b23b55e891bcde.png\"/></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> userAge <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> isOk <span class=\"token operator\">=</span> <span class=\"token function\">isNan</span><span class=\"token punctuation\">(</span>userAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isOk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//false,21不是一个非数字</span>\n\n<span class=\"token keyword\">var</span> userName <span class=\"token operator\">=</span> <span class=\"token string\">\"andy\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNan</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//true,\"andy\"是一个非数字</span>\n</code></pre>\n<h3><a id=\"243String_272\"></a>2.4.3、字符串型<mark>String🔥</mark></h3>\n<p>字符串型可以是引号中的任意文本，其语法为 “<strong>双引号</strong>” 和 \"<strong>单引号</strong>’’</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> strMsg <span class=\"token operator\">=</span> <span class=\"token string\">\"我爱北京天安门~\"</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//使用双引号表示字符串</span>\n<span class=\"token keyword\">var</span> strMsg <span class=\"token operator\">=</span> <span class=\"token string\">'我爱北京'</span><span class=\"token punctuation\">;</span>\t\t\t  <span class=\"token comment\">//使用单引号表示字符串</span>\n</code></pre>\n<p>因为 HTML 标签里面的属性使用的是双引号，JS 这里我们更推荐<strong>使用单引号</strong>。</p>\n<h4><a id=\"_283\"></a>①字符串引号嵌套🔥</h4>\n<p>JS可以用 <strong>单引号嵌套双引号</strong>，或者用 <strong>双引号嵌套单引号</strong>（<strong>外双内单，外单内双</strong>）</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> strMsg <span class=\"token operator\">=</span><span class=\"token string\">'我是一个“高富帅”'</span> <span class=\"token comment\">//可以用 ' ' 包含 \" \"</span>\n<span class=\"token keyword\">var</span> strMsg2 <span class=\"token operator\">=</span><span class=\"token string\">\"我是'高富帅'\"</span> <span class=\"token comment\">//可以用\" \"  包含  ''</span>\n</code></pre>\n<h4><a id=\"_292\"></a>②字符串转义符🔥</h4>\n<p>类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。</p>\n<p>转义符都是 \\ 开头的，常用的转义符及其说明如下：</p>\n<table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td>\\n</td><td>换行符，n是newline</td></tr><tr><td>\\ \\</td><td>斜杠\\</td></tr><tr><td>\\ ’</td><td>’ 单引号</td></tr><tr><td>\\ ‘’</td><td>‘’ 双引号</td></tr><tr><td>\\ t</td><td>tab 缩进</td></tr><tr><td>\\ b</td><td>空格，b是blank的意思</td></tr></tbody></table>\n<h4><a id=\"_307\"></a>③字符串长度🔥</h4>\n<p>字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的 <mark>length</mark> 属性可以获取整个字符串的长度。</p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">//通过字符串的length属性可以获取整个字符串的长度</span>\n<span class=\"token keyword\">var</span> strMsg <span class=\"token operator\">=</span> <span class=\"token string\">\"我是高富帅！\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>strMsg<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//显示6</span>\n</code></pre>\n<h4><a id=\"_317\"></a>④字符串的拼接🔥</h4>\n<ul><li>多个字符串之间可以使用 + 进行拼接，其拼接方式为 <strong>字符串 + 任何类型 = 拼接之后的新字符串</strong></li><li>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</li></ul>\n<p><strong>注意</strong>：字符串 + 任何类型 =拼接之后的新字符串</p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">//1 字符串相加</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span> <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//hello World</span>\n\n<span class=\"token comment\">//2 数值字符串相加</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'100'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'100'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//100100</span>\n\n<span class=\"token comment\">//3 数值字符串+数值</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12'</span><span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1212</span>\n\n<span class=\"token comment\">//4 数值+数值</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//24</span>\n</code></pre>\n<ul><li><code>+</code> 号总结口诀：🌏<mark>数值相加，字符相连</mark>🌏</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span>  age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我今年'</span><span class=\"token operator\">+</span>age<span class=\"token operator\">+</span><span class=\"token string\">'岁'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我今年'</span><span class=\"token operator\">+</span>age<span class=\"token operator\">+</span><span class=\"token string\">'岁'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//引引加加，最终也是上面的形式</span>\n</code></pre>\n<p>⑤字符串拼接加强🔥</p>\n<pre><code class=\"prism language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pink老师'</span> <span class=\"token operator\">+</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//只要有字符就会相连</span>\n<span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// console.log('Pink老师age岁了');\t\t//这样不行,会输出 \"Pink老师age岁了\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pink老师'</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t <span class=\"token comment\">// Pink老师18</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pink老师'</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span> <span class=\"token string\">'岁啦'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// Pink老师18岁啦</span>\n</code></pre>\n<ul><li>我们经常会将字符串和变量来拼接，因为变量可以很方便地修改里面的值</li><li>变量是不能添加引号的，因为加引号的变量会变成字符串</li><li>如果变量两侧都有字符串拼接，口诀==🌏“引引加加 ”，删掉数字🌏==变量写加中间</li></ul>\n<h3><a id=\"244Boolean_361\"></a>2.4.4、布尔型<mark>Boolean</mark>🔥</h3>\n<ul><li>布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</li><li>布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>flag <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 true当加法来看当1来看，flase当0来看</span>\n</code></pre>\n<h3><a id=\"245undefined_371\"></a>2.4.5、undefined未定义🔥</h3>\n<ul><li>一个<strong>声明后没有被赋值</strong>的变量会有一个默认值 undefined ( 如果进行相连或者相加时，注意结果）</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 如果一个变量声明未赋值，就是undefined 未定义数据类型</span>\n<span class=\"token keyword\">var</span> str<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//undefined</span>\n<span class=\"token keyword\">var</span> variable <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>variable <span class=\"token operator\">+</span> <span class=\"token string\">'Pink'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefinedPink</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>variable <span class=\"token operator\">+</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//NaN </span>\n</code></pre>\n<p>1.undefined 和 字符串 相加，会拼接字符串</p>\n<p>2.undefined 和 数字相加，最后结果是<strong>NaN</strong></p>\n<h3><a id=\"246null_388\"></a>2.4.6、空值<mark>null</mark>🔥</h3>\n<ul><li>一个声明变量给 null 值，里面存的值为空</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> space <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>space <span class=\"token operator\">+</span> <span class=\"token string\">'pink'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//nullpink</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">llog</span><span class=\"token punctuation\">(</span>space <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 </span>\n</code></pre>\n<h3><a id=\"247typeof_398\"></a>2.4.7、typeof🔥</h3>\n<ul><li><mark>typeof</mark> 可用来获取检测变量的数据类型</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 结果 number  </span>\n</code></pre>\n<p>不同类型的返回值</p>\n<table><thead><tr><th>类型</th><th>例</th><th>结果</th></tr></thead><tbody><tr><td>string</td><td>typeof “小白”</td><td>“string”</td></tr><tr><td>number</td><td>typeof 18</td><td>“number”</td></tr><tr><td>boolean</td><td>typeof true</td><td>“boolean”</td></tr><tr><td>undefined</td><td>typeof undefined</td><td>“undefined”</td></tr><tr><td>null</td><td>typeof null</td><td>“object”</td></tr></tbody></table>\n<h3><a id=\"248_417\"></a>2.4.8、字面量</h3>\n<p>字面量是在源代码中一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。</p>\n<ul><li>数字字面量：8，9，10</li><li>字符串字面量：‘大前端’，‘后端’</li><li>布尔字面量：true、false</li></ul>\n<p>通过控制台的颜色判断属于哪种数据类型</p>\n<table><thead><tr><th>黑色</th><th>字符串</th></tr></thead><tbody><tr><td>蓝色</td><td>数值</td></tr><tr><td>灰色</td><td>undefined 和 null</td></tr></tbody></table>\n<h2><a id=\"25_432\"></a>2.5、数据类型转换🔥</h2>\n<p>使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，<strong>就是把一种数据类型的变量转换成另外一种数据类型</strong>。</p>\n<p>我们通常会实现3种方式的转换：</p>\n<ul><li>转换为字符串类型</li><li>转换为数字型</li><li>转换为布尔型</li></ul>\n<h3><a id=\"_442\"></a>①转换为字符串型🔥</h3>\n<table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>toString()</td><td>转成字符串</td><td>var num = 1; alert(num.toString());</td></tr><tr><td>String()强制转换</td><td>转成字符串</td><td>var num = 1; alert(String(num));</td></tr><tr><td><strong>加号拼接字符串</strong></td><td>和字符串拼接的结果都是字符串</td><td>var num =1; alert(num+“我是字符串”);</td></tr></tbody></table>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">//1.把数字型转换为字符串型 toString()  变量.toString()</span>\n<span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//2.强制转换</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li><mark>toString()</mark> 和 <mark>String()</mark> 使用方式不一样</li><li>三种转换方式，我们更喜欢用第三种加号拼接字符串转换方式，这一方式也称为隐士转换</li></ul>\n<h3><a id=\"_463\"></a>②转换为数字型🔥</h3>\n<table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td><strong>parselnt(string)函数</strong></td><td>将string类型转成整数数值型</td><td>parselnt(‘78’)</td></tr><tr><td><strong>parseFloat(string)函数</strong></td><td>将string类型转成浮点数数值型</td><td>parseFloat(‘78.21’)</td></tr><tr><td>Number()强制转换函数</td><td>将string类型转换为数值型</td><td>Number(‘12’)</td></tr><tr><td>js 隐式转换(- * /)</td><td>利用算术运算隐式转换为数值型</td><td>‘12’-0</td></tr></tbody></table>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 1.parseInt()</span>\n<span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入您的年龄'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsolo<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//数字型18</span>\nconsolo<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3.14'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//3取整</span>\nconsolo<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3.94'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//3,不会四舍五入</span>\nconsolo<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'120px'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//120,会去掉单位</span>\n\n<span class=\"token comment\">// 2.parseFloat()</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3.14'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//3.14</span>\nconsolo<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'120px'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//120,会去掉单位</span>\n\n\n<span class=\"token comment\">// 3.利用Number(变量)</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n\n<span class=\"token comment\">// 4.利用了算术运算 - * /   隐式转换</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12'</span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 12</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span> <span class=\"token operator\">-</span> <span class=\"token string\">'120'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 123</span>\n</code></pre>\n<p>1.注意 <mark>parseInt</mark> 和 <mark>parseFloat</mark> ，这两个是重点</p>\n<p>2.隐式转换是我们在进行算数运算的时候，JS自动转换了数据类型</p>\n<h3><a id=\"_500\"></a>③转换为布尔型</h3>\n<table><thead><tr><th>方法</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>Boolean()函数</td><td>其他类型转成布尔值</td><td>Boolean(‘true’);</td></tr></tbody></table>\n<ul><li> <p>代表空，否定的值会被转换为false，如 ’ ’ , 0, NaN , null , undefined</p> </li><li> <p>其余的值都会被被转换为true</p> </li></ul>\n<pre><code class=\"prism language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">'小白'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//true</span>\n</code></pre>\n<h2><a id=\"26_520\"></a>2.6、运算符🔥</h2>\n<p>运算符（operator）也被称为<strong>操作符</strong>，是用于实现赋值、比较和执行算数运算等功能的符号</p>\n<p>JavaScript 中常用的运算符有：</p>\n<ul><li>算数运算符</li><li>递增和递减运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>赋值运算符</li></ul>\n<h3><a id=\"261_532\"></a>2.6.1、算术运算符🔥</h3>\n<p>概念：算术运算使用的符号，用于执行两个变量或值的算术运算。</p>\n<table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>10 + 20 =30</td></tr><tr><td>-</td><td>减</td><td>10 - 20 =-10</td></tr><tr><td>*</td><td>乘</td><td>10 * 20 =200</td></tr><tr><td>/</td><td>除</td><td>10 / 20 =0.5</td></tr><tr><td>%</td><td>取余数（取模）</td><td>返回出发的余数 9 % 2 =1</td></tr></tbody></table>\n<h3><a id=\"262_544\"></a>2.6.2、浮点数的精度问题🔥</h3>\n<p>浮点数值的最高精度是17位小数，但在进行算数计算时其精确度远远不如整数</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span> <span class=\"token operator\">+</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//结果不是0.3，0.30000000000000004</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.07</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//结果不是7，而是7.000000000000001</span>\n</code></pre>\n<p><strong>所以不要直接判断两个浮点数是否相等</strong></p>\n<h3><a id=\"263_555\"></a>2.6.3、递增和递减运算符🔥</h3>\n<p>递增（++）</p>\n<p>递减（- -）</p>\n<p>放在变量前面时，我们称为<strong>前置递增(递减)运算符</strong></p>\n<p>放在变量后面时，我们称为<strong>后置递增(递减)运算符</strong></p>\n<p><strong>注意</strong>：递增和递减运算符必须和变量配合使用。</p>\n<h4><a id=\"_567\"></a>①前置递增运算符🔥</h4>\n<p>++num num = num + 1</p>\n<p>使用口诀:<strong>先自加，后返回值</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>num <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 21</span>\n</code></pre>\n<p>先自加 10+1=11，返回11，此时num=11</p>\n<h4><a id=\"_580\"></a>②后置递增运算符🔥</h4>\n<p>num ++ num = num +1</p>\n<p>使用口诀:<strong>先返回原值，后自加</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> num<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span>\n</code></pre>\n<h4><a id=\"_591\"></a>③小结🔥</h4>\n<ul><li>前置递增和后置递增运算符可以简化代码的编写，让变量的值 + 1 比以前写法更简单</li><li>单独使用时，运行结果相同，与其他代码联用时，执行结果会不同</li><li>开发时，大多使用后置递增/减，并且代码独占一行</li></ul>\n<h3><a id=\"264_597\"></a>2.6.4、比较(关系)运算符🔥</h3>\n<p>比较运算符是<strong>两个数据进行比较时所使用的运算符</strong>，比较运算后，会<strong>返回一个布尔值</strong>(true / false)作为比较运算的结果。</p>\n<table><thead><tr><th>运算符名称</th><th>说明</th><th>案例</th><th>结果</th></tr></thead><tbody><tr><td>&lt;</td><td>小于号</td><td>1 &lt; 2</td><td>true</td></tr><tr><td>&gt;</td><td>大于号</td><td>1 &gt; 2</td><td>false</td></tr><tr><td>&gt;=</td><td>大于等于号(大于或者等于)</td><td>2 &gt;= 2</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于号(小于或者等于)</td><td>3 &lt;= 2</td><td>false</td></tr><tr><td>==</td><td>判等号(会转型)</td><td>37 == 37</td><td>true</td></tr><tr><td>!=</td><td>不等号</td><td>37 != 37</td><td>false</td></tr><tr><td>=== !==</td><td>全等 要求值和数据类型都一致</td><td>37 === ‘37’</td><td>false</td></tr></tbody></table>\n<h4><a id=\"__611\"></a>①===== 小结</h4>\n<table><thead><tr><th>符号</th><th>作用</th><th>用法</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>把右边给左边</td></tr><tr><td>==</td><td>判断</td><td>判断两边值是否相等(注意此时有隐士转换)</td></tr><tr><td>===</td><td>全等</td><td>判断两边的值和数据类型是否完全相同</td></tr></tbody></table>\n<pre><code class=\"prism language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span> <span class=\"token operator\">==</span> <span class=\"token string\">'18'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span> <span class=\"token operator\">===</span> <span class=\"token string\">'18'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//false</span>\n</code></pre>\n<h3><a id=\"265_624\"></a>2.6.5、逻辑运算符🔥</h3>\n<p>逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值</p>\n<table><thead><tr><th>逻辑运算符</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>“逻辑与”，简称\"与\" and</td><td>true &amp;&amp; false</td></tr><tr><td>||</td><td>“逻辑或”，简称\"或\" or</td><td>true || false</td></tr><tr><td>！</td><td>“逻辑非”，简称\"非\" not</td><td>！true</td></tr></tbody></table>\n<p>逻辑与：两边都是 true才返回 true，否则返回 false</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\27faf833bca6432ab3edc64aeef5733c.png\"/></p>\n<p>逻辑或：两边都为 false 才返回 false，否则都为true</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8477f4ed90c646a492d4815ea476f3dc.png\"/></p>\n<p>逻辑非：逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> isOk <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isOk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false</span>\n<span class=\"token comment\">//逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</span>\n</code></pre>\n<h4><a id=\"2651_654\"></a>2.6.5.1、短路运算(逻辑中断)🔥</h4>\n<p>短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值</p>\n<h5><a id=\"_658\"></a>①逻辑与🔥</h5>\n<ul><li> <p>语法：<mark>表达式1 &amp;&amp; 表达式2</mark></p> </li><li> <p>如果第一个表达式的值为真，则返回表达式2</p> </li><li> <p>如果第一个表达式的值为假，则返回表达式1</p> </li></ul>\n<pre><code class=\"prism language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//456</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">456</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">789</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//789</span>\n</code></pre>\n<h5><a id=\"_672\"></a>②逻辑或</h5>\n<ul><li> <p>语法：<mark>表达式1 || 表达式2</mark></p> </li><li> <p>如果第一个表达式的值为真，则返回表达式1</p> </li><li> <p>如果第一个表达式的值为假，则返回表达式2</p> </li></ul>\n<pre><code class=\"prism language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span> <span class=\"token operator\">||</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//123</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//456</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span> <span class=\"token operator\">||</span> <span class=\"token number\">456</span> <span class=\"token operator\">||</span> <span class=\"token number\">789</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//123</span>\n</code></pre>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span> <span class=\"token operator\">||</span> num<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 先返回在加，相当于 (123 || 0)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 123</span>\n</code></pre>\n<h3><a id=\"266_693\"></a>2.6.6、赋值运算符🔥</h3>\n<p>概念：用来把数据赋值给变量的运算符。</p>\n<table><thead><tr><th>赋值运算符</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>=</td><td>直接赋值</td><td>var usrName = ‘我是值’</td></tr><tr><td>+= ，-=</td><td>加，减一个数后再赋值</td><td>var age = 10； age+=5；//15</td></tr><tr><td>*=，/=，%=</td><td>成，除，取模后再赋值</td><td>var age = 2; age*=5; //10</td></tr></tbody></table>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nage <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 相当于 age = age + 5;</span>\nage <span class=\"token operator\">-=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 相当于 age = age - 5;</span>\nage <span class=\"token operator\">*=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相当于 age = age * 10;</span>\n</code></pre>\n<h3><a id=\"267_712\"></a>2.6.7、运算符优先级🔥</h3>\n<table><thead><tr><th>优先级</th><th>运算符</th><th>顺序</th></tr></thead><tbody><tr><td>1</td><td>小括号</td><td>()</td></tr><tr><td>2</td><td>一元运算符</td><td>++ – ！</td></tr><tr><td>3</td><td>算数运算符</td><td><strong>先 * / 后 + -</strong></td></tr><tr><td>4</td><td>关系运算符</td><td><strong>&gt;, &gt;= , &lt; , &lt;=</strong>,</td></tr><tr><td>5</td><td>相等运算符</td><td><mark>，！=，</mark>=，！==</td></tr><tr><td>6</td><td>逻辑运算符</td><td><strong>先 &amp;&amp; 后 ||（先与后或）</strong></td></tr><tr><td>7</td><td>赋值运算符</td><td>=</td></tr><tr><td>8</td><td>逗号运算符</td><td>，</td></tr></tbody></table>\n<p>1.一元运算符里面的<strong>逻辑非</strong>优先级很高</p>\n<p>2.<strong>逻辑与</strong> 比 <strong>逻辑或</strong> 优先级高</p>\n<p>3.练习题</p>\n<pre><code class=\"prism language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token number\">4</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">6</span> <span class=\"token operator\">||</span> <span class=\"token string\">'人'</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'阿凡达'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">144</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// true</span>\n</code></pre>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">7</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t<span class=\"token comment\">//false </span>\n\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span> <span class=\"token operator\">||</span> <span class=\"token number\">3</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token number\">3</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t<span class=\"token comment\">//true</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span> \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \t<span class=\"token comment\">//false</span>\n\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>c <span class=\"token operator\">||</span> b <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//true</span>\n</code></pre>\n<h2><a id=\"27_751\"></a>2.7、流程控制🔥</h2>\n<p>流程控制主要有三种结构，分别是顺序结构、分支结构和循环结构，这三种结构代表三种代码执行的顺序</p>\n<h3><a id=\"271_755\"></a>2.7.1、分支结构🔥</h3>\n<p>JS 语言提供了两种分支结构语句：<strong>JS 语句</strong> <strong>switch语句</strong></p>\n<h4><a id=\"if_759\"></a>①if语句🔥</h4>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 条件成立执行代码，否则什么也不做</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>条件表达式<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//条件成立执行的代码语句</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>案例：进入网吧</p>\n<p>弹出一个输入框，要求用户输入年龄，如果年龄大于等于 18 岁，允许进网吧</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> usrAge <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入您的年龄:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>usrAge <span class=\"token operator\">&gt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'您的年龄合法，欢迎来到老子网吧享受学习的乐趣！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"if_else__780\"></a>②if else 语句🔥</h4>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 条件成立，执行if里面代码，否则执行else里面的代码</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件表达式<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//[如果]条件成立执行的代码</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//[否则]执行的代码</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>案例：判断闰年</p>\n<p>接收用户输入的年份，如果是闰年就弹出闰年，否则弹出是平年</p>\n<p><strong>算法</strong>：能被4整除且不能整除100的为闰年（如2004年就是闰年，1901年不是闰年）或者能够被 400 整除的就是闰年</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> year <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入年份'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>year <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> year <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> year <span class=\"token operator\">%</span> <span class=\"token number\">400</span> <span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这个年份是闰年'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这个年份是平年'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"if_else_if__813\"></a>③if else if 语句🔥</h4>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件表达式<span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  语句<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件表达式<span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   语句<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件表达式<span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  语句<span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token comment\">//上述条件都不成立执行此处代码</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>案例:接收用户输入的分数，根据分数输出对应的等级字母 A、B、C、D、E</p>\n<p>其中：</p>\n<ol><li> <p>90分(含)以上 ，输出：A</p> </li><li> <p>80分(含)~ 90 分(不含)，输出：B</p> </li><li> <p>70分(含)~ 80 分(不含)，输出：C</p> </li><li> <p>60分(含)~ 70 分(不含)，输出：D</p> </li><li> <p>60分(不含) 以下，输出： E</p> </li></ol>\n<pre><code class=\"prism language-js\"> <span class=\"token keyword\">var</span> score <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请您输入分数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">&gt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'宝贝，你是我的骄傲'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">&gt;=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'宝贝，你已经很出色了'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">&gt;=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你要继续加油喽'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">&gt;=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'孩子，你很危险'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'可以再努力点吗，你很棒，但还不够棒'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"272_859\"></a>2.7.2、三元表达式🔥</h3>\n<ul><li> <p>语法结构 : <mark>表达式1 ? 表达式2 : 表达式3</mark></p> </li><li> <p>执行思路</p> </li></ul>\n<p>如果表达式1为true，则返回表达式2的值,如果表达式1为false，则返回表达式3的值</p>\n<p><strong>案例：数字补0</strong></p>\n<p>用户输入数字，如果数字小于10，则在前面补0，比如01，09，</p>\n<p>如果数字大于10，则不需要补，比如20</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> figuer <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入0~59之间的一个数字'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> figuer <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">?</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> figuer <span class=\"token operator\">:</span> figue\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"273switch_879\"></a>2.7.3、switch🔥</h3>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">case</span> value1<span class=\"token operator\">:</span>\n     <span class=\"token comment\">//表达式等于 value1 时要执行的代码</span>\n     <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> value2<span class=\"token operator\">:</span>\n     <span class=\"token comment\">//表达式等于value2 时要执行的代码</span>\n     <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n     <span class=\"token comment\">//表达式不等于任何一个value时要执行的代码</span>\n        \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>switch ：开关 转换 ， case ：小例子 选项</li><li>关键字 switch 后面<strong>括号内</strong>可以是<strong>表达式或值</strong>， 通常是一个<strong>变量</strong></li><li>关键字 <mark>case</mark> , 后跟一个选项的表达式或值，<strong>后面跟一个冒号</strong></li><li>switch 表达式的值会与结构中的 case 的值做比较</li><li>如果存在匹配<strong>全等</strong>(===) ，则与该 case 关联的代码块会被执行，并在遇到 <strong>break 时停止</strong>，整个 switch 语句代码执行结束</li><li>如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码</li><li><strong>执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句</strong></li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 用户在弹出框里面输入一个水果，如果有就弹出该水果的价格， 如果没有该水果就弹出“没有此水果”</span>\n        <span class=\"token keyword\">var</span> fruit <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请您输入查询的苹果'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'苹果'</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'苹果的价格为3.5元/千克'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'香蕉'</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'香蕉的价格为3元/千克'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'没有这种水果'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"3_920\"></a>3、断点调试🔥</h1>\n<ol><li> <p>浏览器中按 F12–&gt; sources --&gt;找到需要调试的文件–&gt;在程序的某一行设置断点(在行数点一下)</p> </li><li> <p>刷新浏览器</p> </li><li> <p>Watch: 监视，通过watch可以监视变量的值的变化，非常的常用</p> </li><li> <p>F11: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化</p> </li></ol>\n<h1><a id=\"4_930\"></a>4、循环🔥</h1>\n<h2><a id=\"41for_932\"></a>4.1、for循环🔥</h2>\n<p>在程序中，一组被重复执行的语句被称之为<strong>循环体</strong>，能否继续重复执行，取决于循环的<strong>终止条件</strong>。由循环体及循环的终止条件组成的语句，被称之为<strong>循环语句</strong></p>\n<pre><code>for(初始化变量;条件表达式;操作表达式)\n{\n   //循环体\n}\n</code></pre>\n<p><strong>1.输入10句\"娘子晚安哈！\"</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">//基本写法</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span>  <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'娘子晚安哈'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 用户输入次数</span>\n<span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入次数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span> num <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'娘子晚安哈'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>2.求1-100之间所有整数的累加和</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 求1-100所以的整数和</span>\n<span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>3.求1-100之间所有数的平均值</strong></p>\n<pre><code class=\"prism language-js\"> <span class=\"token comment\">// 3.求1-100之间所有数的平均值</span>\n<span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">/</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>4.求1-100之间所有偶数和奇数的和</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">//    4.求1-100之间所有偶数和奇数的和</span>\n<span class=\"token keyword\">var</span> sum1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sum2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        sum1 <span class=\"token operator\">=</span> sum1 <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        sum2 <span class=\"token operator\">=</span> sum2 <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'偶数和为'</span> <span class=\"token operator\">+</span> sum1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'奇数和为'</span> <span class=\"token operator\">+</span> sum2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>5.求1-100之间所有能被3整除的数字的和</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 5.求1-100之间所有能被3整除的数字的和</span>\n<span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        sum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>6.要求用户输入班级人数，之后依次输入每个学生的成绩，最后打印出该班级总的成绩以及平均成绩。</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入班级总的人数:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// num 班级总的人数</span>\n<span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 总成绩</span>\n<span class=\"token keyword\">var</span> average <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 平均成绩</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token keyword\">var</span> score <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入第'</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">'个学生的成绩'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//这里接收的是str，必须转换为数值</span>\n     sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         \n<span class=\"token punctuation\">}</span>\naverage <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'班级总的成绩是：'</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'班级总的平均成绩是：'</span> <span class=\"token operator\">+</span> average<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p><strong>7.一行打印5个星星</strong></p>\n<p>我们采取追加字符串的方式，这样可以打印到控制台上</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> star <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n     star <span class=\"token operator\">+=</span> <span class=\"token string\">'☆'</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>star<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"42for_1040\"></a>4.2、双重for循环🔥</h2>\n<p><strong>循环嵌套</strong>是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为双重for循环。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>外循环的初始<span class=\"token punctuation\">;</span>外循环的条件<span class=\"token punctuation\">;</span>外形循环的操作表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>内循环的初始<span class=\"token punctuation\">;</span>内循环的条件<span class=\"token punctuation\">;</span>内循环的操作表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        需执行的代码<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>内层循环可以看做外层循环的语句</li><li>内层循环执行的顺序也要遵循 for 循环的执行顺序</li><li>外层循环执行一次，内层循环要执行全部次数</li></ul>\n<h3><a id=\"_1056\"></a>①打印五行五列星星</h3>\n<p>核心：</p>\n<ul><li>内层循环负责一行打印五个星星</li><li>外层循环负责打印五行</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> star <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n     star <span class=\"token operator\">+=</span> <span class=\"token string\">'☆'</span>\n   <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//每次满5个星星就加一次换行</span>\n    star <span class=\"token operator\">+=</span><span class=\"token string\">'\\n'</span>  \n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>star<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"nn_1077\"></a>②打印n行n列的星星</h3>\n<p>要求用户输入行数和列数，之后在控制台打印出用户输入行数和列数的星星</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> star <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> row <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入行数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> col <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入列数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> col<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> row<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        star <span class=\"token operator\">+=</span> <span class=\"token string\">'☆'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    star <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>star<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_1094\"></a>③打印倒三角形</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\737dd2f352e74767bb8f2a89e6539061.png\"/></p>\n<ul><li>一共有10行，但是每行的星星个数不一样，因此需要用到双重 for 循环</li><li>外层的 for 控制行数 i ，循环10次可以打印10行</li><li>内层的 for 控制每行的星星个数 j</li><li>核心算法： 每一行星星的个数： j = i ; j &lt;= 10; j++</li><li>每行打印完毕后，都需要重新换一行</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> star <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> row <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入行数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> col <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入列数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> row<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> col<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        star <span class=\"token operator\">+=</span> <span class=\"token string\">'☆'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    star <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>star<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"43while_1119\"></a>4.3、while循环🔥</h2>\n<pre><code>while(条件表达式){\n  //循环体代码\n}\n</code></pre>\n<p>执行思路：</p>\n<ul><li> <p>先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</p> </li><li> <p>执行循环体代码</p> </li><li> <p>循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束</p> </li></ul>\n<p><strong>注意</strong>：</p>\n<ul><li> <p>使用 while 循环时一定要注意，它必须要有退出条件，否则会称为死循环</p> </li><li> <p>while 循环和 for 循环的不同之处在于 while 循环可以做较为复杂的条件判断，比如判断用户名和密码</p> </li></ul>\n<h3><a id=\"_1143\"></a>①打印人的一生</h3>\n<p>从1岁到99岁</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    age<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'您今年'</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span> <span class=\"token string\">'岁了'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_1__100__1155\"></a>②计算 1 ~ 100 之间所有整数的和</h3>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> figure <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>figure <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            sum <span class=\"token operator\">+=</span> figure<span class=\"token punctuation\">;</span>\n            figure<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1-100的整数和为'</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"44do_while_1167\"></a>4.4、do while循环🔥</h2>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">//循环体代码-条件表达式为true的时候重复执行循环一代码</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>条件表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行思路：</p>\n<ol><li> <p>先执行一次循环体代码</p> </li><li> <p>再执行表达式，如果结果为true，则继续执行循环体代码，如果为false，则退出循环，继续执行后面的代码</p> </li><li> <p>先执行再判断循环体，<strong>所以dowhile循环语句至少会执行一次循环体代码</strong></p> </li></ol>\n<p><strong>需求：弹出一个提示框， 你爱我吗？ 如果输入我爱你，就提示结束，否则，一直询问</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">var</span> love <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你爱我吗？'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>love <span class=\"token operator\">!=</span> <span class=\"token string\">'我爱你'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'登录成功'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"45continue__1192\"></a>4.5、continue 关键字🔥</h2>\n<p><mark>continue</mark> 关键字用于<strong>立即跳出本次循环，继续下一次循环</strong>（本次循环体中 continue 之后的代码就会少执行一次）。</p>\n<p>例如，吃5个包子，第3个有虫子，就扔掉第3个，继续吃第4个第5个包子</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这个包子有虫子，扔掉'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 跳出本次循环，跳出的是第3次循环 </span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我正在吃第'</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">'个包子呢'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"46break_1210\"></a>4.6、break关键字🔥</h2>\n<p><mark>break</mark> 关键字用于<strong>立即跳出整个循环</strong></p>\n<p>例如，吃5个包子，吃到第3个发现里面有半个虫子，其余的也不吃了</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接退出整个for 循环，跳到整个for下面的语句</span>\n   <span class=\"token punctuation\">}</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我正在吃第'</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">'个包子呢'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1><a id=\"5_1226\"></a>5、数组🔥</h1>\n<p>数组(Array)是指一组数据的集合，其中的每个数据被称作元素，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。</p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">//普通变量一次只能存储一个值</span>\n<span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//数组一次可以存储多个值</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"51_1237\"></a>5.1、创建数组🔥</h2>\n<p>JavaScript 中创建数组有两种方式：</p>\n<ul><li>利用 <mark>new</mark> 创建数组</li><li>利用数组字面量创建数组</li></ul>\n<h3><a id=\"__new___1244\"></a>①利用 new 创建数组🔥</h3>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> 数组名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建一个新的空数组</span>\n</code></pre>\n<ul><li> <p>这种方式暂且了解，等学完对象再看</p> </li><li> <p>注意 <code>Array()</code>，A要大写</p> </li></ul>\n<h3><a id=\"_1255\"></a>②利用数组字面量创建数组🔥</h3>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 1.利用数组字面量方式创建空的数组 </span>\n<span class=\"token keyword\">var</span> 数组名 <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2.使用数组字面量方式创建带初始值的数组</span>\n<span class=\"token keyword\">var</span> 数组名 <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'小白'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小黑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小黄'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'瑞奇'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 3.数组中可以存放任意类型的数据，例如字符串，数字，布尔值等</span>\n<span class=\"token keyword\">var</span> arrStus <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'小白'</span>，<span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token number\">28.9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>数组的字面量是方括号 <code>[]</code></li><li>声明数组并赋值称为数组的初始化</li><li>这种字面量方式也是我们以后最多使用的方式</li></ul>\n<h2><a id=\"52_1270\"></a>5.2、数组的索引（下标）🔥</h2>\n<p>索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）</p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">//定义数组</span>\n<span class=\"token keyword\">var</span> arrStus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//获取数组中的第2个元素</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arrStus<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"53_1281\"></a>5.3遍历数组🔥</h2>\n<p>我们可以通过 for 循环索引遍历数组中的每一项</p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 数组索引访问数组中的元素</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// red</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// green</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// blue</span>\n\n<span class=\"token comment\">// for循环遍历数组</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrStus<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"54_1299\"></a>5.4、数组的长度🔥</h2>\n<p>使用“数组名.length”可以访问数组元素的数量（数组长度）</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> arrStus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>arrStus<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 3</span>\n</code></pre>\n<p><strong>注意</strong>：</p>\n<ul><li> <p>此处数组的长度是<strong>数组元素的个数</strong> ，不要和<strong>数组的索引号</strong>混淆</p> </li><li> <p>当我们数组里面的元素个数发生了变化，这个 length 属性跟着一起变化</p> </li></ul>\n<h2><a id=\"55_1316\"></a>5.5、案例</h2>\n<p><strong>1.请将 [“关羽”,“张飞”,“马超”,“赵云”,“黄忠”,“刘备”,“姜维”]; 数组里的元素依次打印到控制台</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"关羽\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张飞\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"马超\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵云\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"黄忠\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"刘备\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"姜维\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 遍历  从第一个到最后一个</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{<!-- --></span> \n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p><strong>2.求数组 [2,6,1,7, 4] 里面所有元素的和以及平均值</strong></p>\n<ul><li>①声明一个求和变量 sum。</li><li>①遍历这个数组，把里面每个数组元素加到 sum 里面。</li><li>①用求和变量 sum 除以数组的长度就可以得到数组的平均值。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> average <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    sum <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\naverage <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">//此时i为5</span>\n<span class=\"token comment\">//      average = sum / arr.length;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'和为'</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'平均值为'</span> <span class=\"token operator\">+</span> average<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>3.求数组[2,6,1,77,52,25,7]中的最大值</strong></p>\n<ul><li>①声明一个保存最大元素的变量 max。</li><li>②默认最大值可以取数组中的第一个元素。</li><li>③遍历这个数组，把里面每个数组元素和 max 相比较。</li><li>④如果这个数组元素大于max 就把这个数组元素存到 max 里面，否则继续下一轮比较。</li><li>⑤最后输出这个 max。</li></ul>\n<pre><code class=\"prism language-js\"> <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                temp <span class=\"token operator\">=</span> max<span class=\"token punctuation\">;</span>\n                max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'最大值为'</span> <span class=\"token operator\">+</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n方法二：\n\n<span class=\"token keyword\">var</span> arrNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">77</span><span class=\"token punctuation\">,</span><span class=\"token number\">52</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> maxNum <span class=\"token operator\">=</span> arrNum<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用来保存最大元素,默认最大值是数组中的第一个元素</span>\n<span class=\"token comment\">// 从0 开始循环数组里的每个元素</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span> arrNum<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 如果数组里当前循环的元素大于 maxNum，则保存这个元素和下标</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arrNum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> maxNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        maxNum <span class=\"token operator\">=</span> arrNum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存数值到变量 maxNum</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>4.将数组 [‘red’, ‘green’, ‘blue’, ‘pink’] 里面的元素转换为字符串</strong></p>\n<p>思路：就是把里面的元素相加就好了，但是注意保证是字符相加</p>\n<ul><li>①需要一个新变量 str 用于存放转换完的字符串。</li><li>②遍历原来的数组，分别把里面数据取出来，加到字符串变量 str 里面。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pink'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    str <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// redgreenbluepink</span>\n</code></pre>\n<p><strong>5.将数组 [‘red’, ‘green’, ‘blue’, ‘pink’] 转换为字符串，并且用 | 或其他符号分割</strong></p>\n<ul><li>①需要一个新变量用于存放转换完的字符串 str。</li><li>①遍历原来的数组，分别把里面数据取出来，加到字符串里面。</li><li>①同时在后面多加一个分隔符。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pink'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> separator <span class=\"token operator\">=</span> <span class=\"token string\">'|'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   str <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> separator<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// red|green|blue|pink</span>\n</code></pre>\n<h2><a id=\"56_1417\"></a>5.6、数组中新增元素🔥</h2>\n<h3><a id=\"_length__1419\"></a>①通过修改 length 长度新增数组元素</h3>\n<ul><li> <p>可以通过修改 length 长度来实现数组扩容的目的</p> </li><li> <p>length 属性是可读写的</p> </li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pink'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>其中索引号是 4，5，6 的空间没有给值，就是声明变量未给值，默认值就是 <strong>undefined</strong></p>\n<h3><a id=\"_1436\"></a>②通过修改数组索引新增数组元素</h3>\n<ul><li> <p>可以通过修改数组索引的方式追加数组元素</p> </li><li> <p>不能直接给数组名赋值，否则会覆盖掉以前的数据</p> </li><li> <p>这种方式也是我们最常用的一种方式</p> </li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pink'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hotpink'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"57_1449\"></a>5.7、数组中新增元素</h2>\n<p><strong>1.新建一个数组，里面存放10个整数（ 1~10）， 要求使用循环追加的方式输出： [1,2,3,4,5,6,7,8,9,10]</strong></p>\n<ul><li>①使用循环来追加数组。</li><li>②声明一个空数组 arr。</li><li>③循环中的计数器 i 可以作为数组元素存入。</li><li>由于数组的索引号是从0开始的， 因此计数器从 0 开始更合适，存入的数组元素要+1。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>2.将数组 [2, 0, 6, 1, 77, 0, 52, 0, 25, 7] 中大于等于 10 的元素选出来，放入新数组</strong></p>\n<ul><li>①声明一个新的数组用于存放新数据。</li><li>②遍历原来的数组，找出大于等于 10 的元素。</li><li>③依次追加给新数组 newArr。</li></ul>\n<p>实现代码1：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 定义一个变量 用来计算 新数组的索引号</span>\n<span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 给新数组</span>\n        newArr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 索引号 不断自加</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>实现代码2：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 给新数组</span>\n        newArr<span class=\"token punctuation\">[</span>newArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"58_1504\"></a>5.8、删除指定数组元素🔥</h2>\n<p><strong>将数组[2, 0, 6, 1, 77, 0, 52, 0, 25, 7]中的 0 去掉后，形成一个不包含 0 的新数组。</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        newArr<span class=\"token punctuation\">[</span>newArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">//老师代码</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 空数组的默认的长度为 0 </span>\n<span class=\"token comment\">// 定义一个变量 i 用来计算新数组的索引号</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 找出大于 10 的数</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 给新数组</span>\n        <span class=\"token comment\">// 每次存入一个值，newArr长度都会 +1  </span>\n        newArr<span class=\"token punctuation\">[</span>newArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h2><a id=\"59_1536\"></a>5.9、翻转数组🔥</h2>\n<p><strong>将数组 [‘red’, ‘green’, ‘blue’, ‘pink’, ‘purple’] 的内容反过来存放</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 把旧数组索引号的第4个取过来(arr.length - 1),给新数组索引号第0个元素(newArr.length)</span>\n\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pink'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'purple'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&gt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    newArr<span class=\"token punctuation\">[</span>newArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"510_1551\"></a>5.10、数组排序🔥</h2>\n<p>冒泡排序</p>\n<p>将数组 [5, 4, 3, 2, 1]中的元素按照从小到大的顺序排序，输出： 1，2，3，4，5</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//外层循环管趟数，5个数共交换4躺</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//里层循环管每一趟交换的次数</span>\n        <span class=\"token comment\">//前一个和后面一个数组元素相比较</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">var</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}