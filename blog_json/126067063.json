{"blogid": "126067063", "writerAge": "码龄1年", "writerBlogNum": "53", "writerCollect": "2665", "writerComment": "1947", "writerFan": "4846", "writerGrade": "6级", "writerIntegral": "5848", "writerName": "老师我作业忘带了", "writerProfileAdress": "writer_image\\profile_126067063.jpg", "writerRankTotal": "2756", "writerRankWeekly": "26", "writerThumb": "1766", "writerVisitNum": "157551", "blog_read_count": "1392", "blog_time": "已于 2022-08-02 20:50:50 修改", "blog_title": "openCV第一篇", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><strong>文章目录</strong></p>\n<p style=\"margin-left:0px;\"><a href=\"#%E5%89%8D%E8%A8%80%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9C%BC%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%C2%A0\">前言：计算机眼中的图片 </a></p>\n<p style=\"margin-left:0px;\"><a href=\"#1.%20%E5%9B%BE%E7%89%87%E7%9A%84%E8%AF%BB%E5%8F%96%E4%B8%8E%E6%98%BE%E7%A4%BA\">1. 图片的读取与显示</a></p>\n<p style=\"margin-left:40px;\"><a href=\"#1.1%C2%A0%E5%9B%BE%E7%89%87%E7%9A%84%E8%AF%BB%E5%8F%96%C2%A0\">1.1 图片的读取 </a></p>\n<p style=\"margin-left:40px;\"><a href=\"#1.%202%20%E6%98%BE%E7%A4%BA%E7%9A%84%E5%9B%BE%E7%89%87\">1.2 显示的图片</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#1.2.1%20%E6%98%BE%E7%A4%BA%E5%8E%9F%E5%A7%8B%E5%9B%BE%E7%89%87%C2%A0\">1.2.1 显示原始图片 </a></p>\n<p style=\"margin-left:80px;\"><a href=\"#1.2.2%20%E8%AF%BB%E5%8F%96%E7%81%B0%E5%BA%A6%E5%9B%BE\">1.2.2 灰度图</a></p>\n<p style=\"margin-left:40px;\"><a href=\"#1.2.3%20BGR%E8%BD%AC%E6%8D%A2%E6%88%90%E7%81%B0%E5%BA%A6%E5%9B%BE%E3%80%81RGB\">1.3 BGR转换成灰度图、RGB</a></p>\n<p style=\"margin-left:0px;\"><a href=\"#2.%20%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87\">2. 保存图片</a></p>\n<p style=\"margin-left:0px;\"><a href=\"#3.%20%E8%A7%86%E9%A2%91%E7%9A%84%E8%AF%BB%E5%8F%96%E4%B8%8E%E6%98%BE%E7%A4%BA\">3. 视频的读取与显示</a></p>\n<p style=\"margin-left:0px;\"><a href=\"#4.%20%E6%88%AA%E5%8F%96%E5%9B%BE%E5%83%8F%E9%83%A8%E5%88%86\">4. 截取图像部分</a></p>\n<p style=\"margin-left:0px;\"><a href=\"#5.%20%E9%A2%9C%E8%89%B2%E9%80%9A%E9%81%93%E6%8F%90%E5%8F%96\">5. 颜色通道提取</a></p>\n<p style=\"margin-left:0px;\"><a href=\"#6.%20%E8%BE%B9%E7%95%8C%E5%A1%AB%E5%85%85\">6. 边界填充</a></p>\n<p style=\"margin-left:0px;\"><a href=\"#7.%20%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97\">7. 数值计算</a></p>\n<p style=\"margin-left:0px;\"><a href=\"#8.%20%E5%9B%BE%E5%83%8F%E8%9E%8D%E5%90%88\">8. 图像融合</a></p>\n<p style=\"margin-left:0px;\"><a href=\"#9.%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%C2%A0\">9. 知识点总结*</a></p>\n<p></p>\n<h1><strong>前言：计算机眼中的图片 </strong></h1>\n<ul><li>计算机中图片由许多个像素点组成，如一个500x500的图片，表示长宽各由500个像素点组成。</li><li>计算机中一个像素点的值在0-255表示该点亮度  0暗(黑)-255亮(白) </li><li>一张彩图通常是由RGB(red、green、blue)三个颜色通道所组成</li><li>一个500x500的图片那他们的 RGB 矩阵也各是500x500。</li></ul>\n<p><img alt=\"ac0ddb3b16ac461f8800a63b014ccb32.png\" src=\"image\\ac0ddb3b16ac461f8800a63b014ccb32.png\"/></p>\n<p>上图我们将一个大的图片分割成许多如20x20的小图片，同理每个小图片它们的RGB矩阵也各自是20x20。</p>\n<p><u><em>注：opencv默认顺序不是RBG 而是 BGR。</em></u></p>\n<p></p>\n<h1>1. 图片的读取与显示</h1>\n<h2>1.1 图片的读取 </h2>\n<pre><code class=\"language-python\">import cv2 \nimg = cv2.imread('./data/abv.jpg')</code></pre>\n<ul><li><strong>img = cv2.imread('./data/abv.jpg') </strong></li></ul>\n<p>比如我读入这样一张图片，命名为<strong>img</strong>；</p>\n<p><img alt=\"9a095a8b15874db5a24eb370f9114921.png\" src=\"image\\9a095a8b15874db5a24eb370f9114921.png\"/></p>\n<p>我们可以看到<strong>img</strong>是一个三维ndarray结构，内部数据类型dtype=unit8：</p>\n<p><img alt=\"fa66daf6f2e04378ad0a3e9fad429222.png\" src=\"image\\fa66daf6f2e04378ad0a3e9fad429222.png\"/></p>\n<ul><li>三维：(1080,1920,3)表示高度、宽度、颜色通道个数(cv彩图BGR)</li><li>ndarray结构：数据类型dtype=unit8, 0-255。</li></ul>\n<p></p>\n<h2>1.2 显示的图片</h2>\n<h3>1.2.1 显示原始图片 </h3>\n<pre><code class=\"language-python\">cv2.imshow('image',img) # 第一个参数表示窗口指定的名字 第二个为上方img\ncv2.waitKey(5000) # 等待时间  如果是5000则在5s后图片窗口自动关闭  0表示任意键关闭\ncv2.destroyAllWindows() # 时间一到关闭窗口</code></pre>\n<p> ps: 图像的显示也可以是多个窗口</p>\n<ul><li><strong>cv2.imshow('image',img)</strong> 自己给将要弹出的窗口起个名  再加入变量img</li><li><strong>cv2.waitKey(5000)</strong> 等待时间  如果是5000则在5s后图片窗口自动关闭  0表示任意键关闭</li><li><strong>cv2.destroyAllWindows()</strong> 时间一到关闭窗口</li></ul>\n<p>为方便下面使用，我们自己定义一个函数<strong>cv_show()：</strong></p>\n<pre><code class=\"language-python\">def cv_show(name,img):\n    cv2.imshow(name,img)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows()</code></pre>\n<p>执行代码，弹出窗口，显示图片：</p>\n<pre><code class=\"language-python\">cv_show('winName',img)</code></pre>\n<p><img alt=\"9a095a8b15874db5a24eb370f9114921.png\" src=\"image\\9a095a8b15874db5a24eb370f9114921.png\"/></p>\n<p></p>\n<h3>1.2.2 灰度图</h3>\n<p>在之前的基础之上加入参数：cv2.IMREAD_GRAYSCALE </p>\n<pre><code class=\"language-python\">img2=cv2.imread('./data/abv.jpg',cv2.IMREAD_GRAYSCALE)  # cv2.IMREAD_COLOR</code></pre>\n<ul><li><strong>img2=cv2.imread('./data/abv.jpg',cv2.IMREAD_GRAYSCALE) </strong>  \n  <ul><li>cv2.IMREAD_GRAYSCALE  读取为灰度图，也可以写0。</li><li>cv2.IMREAD_COLOR           读取为彩图</li></ul></li></ul>\n<p>我们执行：</p>\n<pre><code class=\"language-python\">cv_show('win2',img2) </code></pre>\n<p><img alt=\"78e49cf7f9334abbaf807391dcb6dc80.png\" src=\"image\\78e49cf7f9334abbaf807391dcb6dc80.png\"/>可以看到该图片最终显示结果为二维(1080，1920) :</p>\n<p><img alt=\"ca9cba0adb754f20b82d6d042013260d.png\" src=\"image\\ca9cba0adb754f20b82d6d042013260d.png\"/></p>\n<p>ps: img.size 输出像素点的个数，可以看到同一张图片BGR彩图是灰度图的三倍。</p>\n<p><img alt=\"95b3b5d31c7c4a31b22b22353bfe81dc.png\" src=\"image\\95b3b5d31c7c4a31b22b22353bfe81dc.png\"/></p>\n<p></p>\n<h2>1.3 BGR转换成灰度图、RGB</h2>\n<p>当然我们也可以把已经读取进来的BGR彩图转换成灰度图，或者转换为RGB。</p>\n<pre><code class=\"language-python\">img2 = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) \ncv_show('win3',img2)</code></pre>\n<ul><li><strong>img2 = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) </strong>\n<ul><li>cv2.COLOR_BGR2RGB 将BGR格式转换成RGB</li><li>cv2.COLOR_BGR2GRAY 将BGR格式转换成灰度图片</li></ul></li></ul>\n<p></p>\n<h1>2. 保存图片</h1>\n<pre><code class=\"language-python\">cv2.imwrite('./data/grayPhoto.jpg',img2)</code></pre>\n<ul><li><strong>cv2.imwrite('./data/grayPhoto.jpg',img2)</strong></li></ul>\n<p>此时我的data文件夹下就多了一张刚刚处理好名为grayPhoto的灰度图。</p>\n<p><img alt=\"899d5d3076bb4e2ebbb5886343545a50.png\" src=\"image\\899d5d3076bb4e2ebbb5886343545a50.png\"/></p>\n<p></p>\n<h1>3. 视频的读取与显示</h1>\n<p>视频也是由图像组成的，每一帧都可以当作是一个静止的图像，把图像连在一起看着就像是一个视频了。 我们打游戏时，也是追求一些更高的帧率。</p>\n<pre><code class=\"language-python\">vc = cv2.VideoCapture('./data/stu.mp4')</code></pre>\n<ul><li><strong>vc = cv2.VideoCapture('./data/stu.mp4')</strong></li></ul>\n<pre><code class=\"language-python\"># 检查是否正确打开\nif vc.isOpened():\n    open,frame = vc.read()\nelse:\n    open = Flase</code></pre>\n<ul><li><strong>vc.read()</strong>\n<ul><li>读取视频中的第一帧 ，再次执行vc.read()的话读取视频第二帧</li><li>返回值中：第一个：布尔类型，能读进来就是True   第二个像是上面的img，这一帧图片的ndarray矩阵</li></ul></li></ul>\n<p></p>\n<p>循环图片播放视频：</p>\n<pre><code class=\"language-python\">while open:\n    ret,frame = vc.read()\n    if frame is None:\n        break\n    if ret == True:\n        # 原本frame是（h,w,3）的BGR图片矩阵 经下方加入参数转换成黑白gray\n        gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY) \n        cv2.imshow('result',gray)\n        # cv2.waitKey(num) 该图片显示时间/速度 自己可以找一个合适的值\n        # 27指退出键ESC 退出窗口  当然也可以是 =='q'等\n        if cv2.waitKey(20)&amp;0xFF == 27: \n            break\nvc.release()\ncv2.destroyAllWindows()</code></pre>\n<p><u>注：视频放完 ret, frame = vc.read()返回False和None 再次进行循环无法播放视频，需要重新读取。</u></p>\n<ul><li><strong>if cv2.waitKey(20)&amp;0xFF == 27:</strong>\n<ul><li>不是新知识点了，表示每张图片等20毫秒，如果按ESC键直接退出。</li></ul></li></ul>\n<p></p>\n<h1>4. 截取图像部分</h1>\n<p>我们上面介绍，img是一个ndarray矩阵，因此对其进行切片操作：</p>\n<pre><code class=\"language-python\">pho = img[100:800,200:800]  # 进行切片 高100到800 宽200到800\ncv_show('win2',pho)</code></pre>\n<ul><li><strong>pho = img[100:800,200:800]</strong></li></ul>\n<p><img alt=\"fa3f065b36d64fed8f9be0481322affc.png\" src=\"image\\fa3f065b36d64fed8f9be0481322affc.png\"/></p>\n<p></p>\n<h1>5. 颜色通道提取</h1>\n<pre><code class=\"language-python\">b,g,r = cv2.split(img)\n# b.shape g.shape r.shape 都为 (1080, 1920)</code></pre>\n<p>执行</p>\n<pre><code class=\"language-python\">cv_show('win3',g) # 或者填 b、r</code></pre>\n<p><img alt=\"78e49cf7f9334abbaf807391dcb6dc80.png\" src=\"image\\78e49cf7f9334abbaf807391dcb6dc80.png\"/></p>\n<p>结果就是单通道图。</p>\n<p>如果我们想<strong>显示单一颜色</strong>，如红色：</p>\n<pre><code class=\"language-python\">cur_img = img.copy()\ncur_img[:,:,0] = 0 # B不要了 设置为0\ncur_img[:,:,1] = 0 # G不要了 设置为0\n#cur_img[:,:,2] = 0 # R不要了 设置为0\ncv_show('winR',cur_img)</code></pre>\n<p><img alt=\"2b3911f2428745658ca99b850eea7069.png\" src=\"image\\2b3911f2428745658ca99b850eea7069.png\"/></p>\n<p></p>\n<h1>6. 边界填充</h1>\n<p>这个一般用于卷积，在图像周围填充一些像素。</p>\n<p>我们以这个图片为例：</p>\n<pre><code class=\"language-python\">img = cv2.imread('./data/gd01.jpg')\n# img.shape 为 (300, 400, 3)\ncv_show('win1',img)</code></pre>\n<p><img alt=\"f4320c38f6d647c684c59065fdaa50c2.jpeg\" src=\"image\\f4320c38f6d647c684c59065fdaa50c2.jpeg\"/></p>\n<p>在图片的上下左右填充50个像素，介绍5种方法： </p>\n<pre><code class=\"language-python\">top_size,bottom_size,left_size,right_size=(50,50,50,50)\n\n# 不同的填充方法 最后参数改个type值就行\nreplicate = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,borderType=cv2.BORDER_REPLICATE)\nreflect = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_REFLECT)\nreflect101=cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_REFLECT_101)\nwrap = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_WRAP)\nconstant = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_CONSTANT,value=0)</code></pre>\n<pre><code class=\"language-python\">plt.subplot(231),plt.imshow(img,'gray'),plt.title('ORIGINAL')\nplt.subplot(232),plt.imshow(replicate,'gray'),plt.title('REPLICATE')\nplt.subplot(233),plt.imshow(reflect,'gray'),plt.title('REFLECT')\nplt.subplot(234),plt.imshow(reflect101,'gray'),plt.title('REFLECT_101')\nplt.subplot(235),plt.imshow(wrap,'gray'),plt.title('WRAP')\nplt.subplot(236),plt.imshow(constant,'gray'),plt.title('CONSTANT')\n# 注matplotlib默认R G B本例只介绍边界填充\nplt.show()</code></pre>\n<p><img alt=\"496a683aaecc451faf5818c736c4d6d8.png\" src=\"image\\496a683aaecc451faf5818c736c4d6d8.png\"/></p>\n<ul><li><strong>cv2.BORDER_REPLICATE</strong>\n<ul><li>复制最边缘的像素</li></ul></li><li><strong>cv2.BORDER_REFLECT</strong>\n<ul><li>反射法对感兴趣的图像中的像素在两边进行复制 如fedcba|abcdefgh|hgfedcb 其中abcdefgh是图像\"|\"外的是填充内容</li></ul></li><li><strong>cv2.BORDER_REFLECT_101</strong>\n<ul><li>反射法，也就是以最边缘的像素为轴，对称，gfedcb|abcdefgh|gfedcba 上面是ba|ab 这个是bab。</li></ul></li><li><strong>cv2.BORDER_WRAP</strong>\n<ul><li>外包装法 如：cdefgh|abcdefgh|abcdefg。</li></ul></li><li><strong>cv2.BORDER_CONSTANT</strong>\n<ul><li>常量法，常数值value填充。</li></ul></li></ul>\n<p></p>\n<h1>7. 数值计算</h1>\n<p><img alt=\"78fc17d7f1a44630a2c7855a1001adac.png\" src=\"image\\78fc17d7f1a44630a2c7855a1001adac.png\"/></p>\n<p>由于是uint8类型最大255 超过相当于结果为 num%256了 </p>\n<p>我们使用以下方法保留最大值：</p>\n<pre><code class=\"language-python\">cv2.add(img,img2)</code></pre>\n<ul><li><strong>cv2.add(img,img2)</strong></li></ul>\n<p><img alt=\"a3903457723941c786a7d8b1ca915878.png\" src=\"image\\a3903457723941c786a7d8b1ca915878.png\"/></p>\n<p></p>\n<h1>8. 图像融合</h1>\n<p>效果如下：</p>\n<p><img alt=\"8220c58831cb4036a68f2453b6cf61ef.png\" src=\"image\\8220c58831cb4036a68f2453b6cf61ef.png\"/></p>\n<p>我们导入宽高相同的2张图片：</p>\n<pre><code class=\"language-python\">img = cv2.imread('./data/gd04.jpg')\nimg2 = cv2.imread('./data/gd05.jpg')\nimg3 = cv2.imread('./data/gd06.jpg')\nprint(img.shape,img2.shape,img3.shape) # (281, 600, 3) (281, 600, 3) (337, 600, 3)</code></pre>\n<p>如果大小不同 需要手动设置成一样的</p>\n<pre><code class=\"language-python\">img3 = cv2.resize(img3,(600,281))\n# img3.shape (281, 600, 3)</code></pre>\n<ul><li><strong>img3 = cv2.resize(img3,(600,281))</strong></li></ul>\n<blockquote>\n<p>ps: cv2.resize()另一种操作</p>\n<pre><code class=\"language-python\">img4 = cv2.resize(img3,(0,0),fx=2,fy=1)</code></pre>\n</blockquote>\n<p>我们执行：</p>\n<pre><code class=\"language-python\">res = cv2.addWeighted(img,0.6,img2,0.4,0)\nplt.imshow(res)</code></pre>\n<ul><li><strong>res = cv2.addWeighted(img,0.6,img2,0.4,0)</strong></li></ul>\n<p><img alt=\"0139f647a62343adbf6c29076b531589.png\" src=\"image\\0139f647a62343adbf6c29076b531589.png\"/></p>\n<p><u>R = ax1 + bx2 + c  a、b为权重 c为偏置 这里意为在原亮度上变化多少</u></p>\n<p></p>\n<h1>9. 知识点总结*</h1>\n<ul><li>读取图片：</li></ul>\n<pre><code class=\"language-python\">import cv2 \nimg = cv2.imread('./data/abv.jpg')\nimg2 = cv2.imread('./data/abv.jpg',cv2.IMREAD_GRAYSCALE) \nimg3 = cv2.imread('./data/abv.jpg',cv2.IMREAD_COLOR) </code></pre>\n<ul><li>显示图片：</li></ul>\n<pre><code class=\"language-python\">def cv_show(name,img):\n    cv2.imshow(name,img)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows()</code></pre>\n<ul><li>BGR转换成灰度图、RGB：</li></ul>\n<pre><code class=\"language-python\">img2 = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) \nimg3 = cv2.cvtColor(img,cv2.COLOR_BGR2RGB) </code></pre>\n<ul><li>保存图片：</li></ul>\n<pre><code class=\"language-python\">cv2.imwrite('./data/grayPhoto.jpg',img2)</code></pre>\n<ul><li>视频的读取与显示：</li></ul>\n<pre><code class=\"language-python\">vc = cv2.VideoCapture('./data/stu.mp4')\n\n# 检查是否正确打开\nif vc.isOpened():\n    open,frame = vc.read()\nelse:\n    open = Flase\n\nwhile open:\n    ret,frame = vc.read()\n    if frame is None:\n        break\n    if ret == True:\n        # 原本frame是（h,w,3）的BGR图片矩阵 经下方加入参数转换成黑白gray\n        gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY) \n        cv2.imshow('result',gray)\n        # cv2.waitKey(num) 该图片显示时间/速度 自己可以找一个合适的值\n        # 27指退出键ESC 退出窗口  当然也可以是 =='q'等\n        if cv2.waitKey(20)&amp;0xFF == 27: \n            break\nvc.release()\ncv2.destroyAllWindows()</code></pre>\n<ul><li>截取图片部分：</li></ul>\n<pre><code class=\"language-python\">pho = img[100:800,200:800]  # 进行切片 高100到800 宽200到800</code></pre>\n<ul><li>颜色通道提取：</li></ul>\n<pre><code class=\"language-python\">b,g,r = cv2.split(img)</code></pre>\n<pre><code class=\"language-python\">cur_img = img.copy()\ncur_img[:,:,0] = 0 # B不要了 设置为0\ncur_img[:,:,1] = 0 # G不要了 设置为0\n#cur_img[:,:,2] = 0 # R不要了 设置为0\ncv_show('winR',cur_img)</code></pre>\n<ul><li>边界填充：</li></ul>\n<pre><code class=\"language-python\">top_size,bottom_size,left_size,right_size=(50,50,50,50)\n \n# 不同的填充方法 最后参数改个type值就行\nreplicate = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,borderType=cv2.BORDER_REPLICATE)\nreflect = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_REFLECT)\nreflect101=cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_REFLECT_101)\nwrap = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_WRAP)\nconstant = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_CONSTANT,value=0)</code></pre>\n<ul><li>数值计算：</li></ul>\n<pre><code class=\"language-python\">cv2.add(img,img2)</code></pre>\n<ul><li>图像融合：</li></ul>\n<pre><code class=\"language-python\">img3 = cv2.resize(img3,(600,281))\n\nres = cv2.addWeighted(img,0.6,img2,0.4,0)\n</code></pre>\n<p></p>\n</div>\n</div>"}