{"blogid": "120380829", "writerAge": "码龄7年", "writerBlogNum": "157", "writerCollect": "7443", "writerComment": "2048", "writerFan": "26821", "writerGrade": "7级", "writerIntegral": "11170", "writerName": "前端纸飞机", "writerProfileAdress": "writer_image\\profile_120380829.jpg", "writerRankTotal": "2204", "writerRankWeekly": "769", "writerThumb": "5716", "writerVisitNum": "500271", "blog_read_count": "13869", "blog_time": "于 2021-09-20 20:00:20 发布", "blog_title": "手把手教你在 Vue 中使用 JSX，不怕学不会！【建议收藏】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>学习这篇文章希望您已经具备以下知识：</p>\n<ol><li>vue.js的基本使用</li><li>对前端三件套(html、css、js)已经可以熟练使用了</li></ol>\n</blockquote>\n<p>文末有配套demo代码：<a href=\"#test1\">点我直达</a></p>\n<h2><a id=\"JSX_7\"></a>JSX是什么</h2>\n<p>JSX 是一种 Javascript 的语法扩展，JSX = Javascript + XML，即在 Javascript 里面写 XML，因为 JSX 的这个特性，所以他即具备了 Javascript 的灵活性，同时又兼具 html 的语义化和直观性。（<strong>个人建议灵活度强的部分组件可以用JSX来代替，整个项目JSX属实没必要</strong>）</p>\n<blockquote>\n<p>XML学习地址（学与不学可随意，了解就ok）：<a href=\"https://www.w3school.com.cn/xml/index.asp\">https://www.w3school.com.cn/xml/index.asp</a><br/> 用template的弊端：<a href=\"https://www.mk2048.com/blog/blog_h1c2c22ihihaa.html\">https://www.mk2048.com/blog/blog_h1c2c22ihihaa.html</a></p>\n</blockquote>\n<h2><a id=\"_Vue__JSX_13\"></a>为什么要在 Vue 中使用 JSX</h2>\n<p>有时候，<strong>我们使用渲染函数（render function）来抽象组件</strong>，渲染函数不是很清楚的参见官方文档, 而渲染函数有时候写起来是非常痛苦的，所以只需要有个了解。</p>\n<blockquote>\n<p>渲染函数：<a href=\"https://cn.vuejs.org/v2/guide/render-function.html#%E5%9F%BA%E7%A1%80\">https://cn.vuejs.org/v2/guide/render-function.html#%E5%9F%BA%E7%A1%80</a></p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n <span class=\"token string\">'anchored-heading'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  level<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">' world!'</span>\n <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>其对应的模板是下面：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>anchored<span class=\"token operator\">-</span>heading <span class=\"token operator\">:</span>level<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">&gt;</span>Hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span> world<span class=\"token operator\">!</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>anchored<span class=\"token operator\">-</span>heading<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>你看这<strong>写起来多费劲</strong>，这个时候就派上 JSX 上场了。在 <strong>Vue 中使用 JSX，需要使用 Babel 插件</strong>，它可以让我们回到更接近于模板的语法上，接下来就让我们一起开始在 Vue 中写 JSX 吧。</p>\n<h2><a id=\"Babel_40\"></a>创建项目并配置Babel</h2>\n<pre><code class=\"prism language-bash\">vue create vue-jsx\n<span class=\"token comment\"># 选择vue2的</span>\n</code></pre>\n<p>安装依赖：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @vue/babel-preset-jsx @vue/babel-helper-vue-jsx-merge-props\n<span class=\"token comment\"># or</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> @vue/babel-preset-jsx @vue/babel-helper-vue-jsx-merge-props\n</code></pre>\n<p>配置 .babelrc(babel.config.js) ：</p>\n<pre><code class=\"prism language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n <span class=\"token string\">'@vue/cli-plugin-babel/preset'</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">[</span><span class=\"token string\">'@vue/babel-preset-jsx'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token string\">'injectH'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>配置后我们启动项目：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">yarn</span> serve\n</code></pre>\n<p>demo结构图：<br/> <img alt=\"demo结构图\" src=\"image\\10831ffb06544b1c95f677bf220a268b.png\"/></p>\n<blockquote>\n<p>配置了babel.config.js后，我们把App.vue引入的<em>HelloWorld.vue改为HelloWorld.js</em>，并且删除HelloWorld.js中关于template和style,以及script标签。</p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'HelloWorld'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    msg<span class=\"token operator\">:</span> String\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"JSX_81\"></a>JSX基础用法</h2>\n<p>这里展示在 Vue 中书写一些基础内容。</p>\n<h3><a id=\"class_83\"></a>纯文本、动态内容、标签使用、自定义组件、样式和class</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> myComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'./myComponent'</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./HelloWorld.css'</span>\n\n<span class=\"token comment\">// 创建一个组件button</span>\n<span class=\"token keyword\">const</span> ButtonCounter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"button-counter\"</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>数量 <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">+</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'HelloWorld'</span><span class=\"token punctuation\">,</span>\n  components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    myComponent \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n      text<span class=\"token operator\">:</span><span class=\"token string\">'hello 纸没了飞机'</span><span class=\"token punctuation\">,</span>\n      inputText<span class=\"token operator\">:</span><span class=\"token string\">'我吃了'</span><span class=\"token punctuation\">,</span>\n      count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    msg<span class=\"token operator\">:</span> String\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  watch<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// const {text,inputText,count} = this //通过解构，下方return片段中就不需要this</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n     <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>内容<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n     <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/* 纯文本 */</span><span class=\"token punctuation\">}</span>\n     <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>hello<span class=\"token punctuation\">,</span> <span class=\"token constant\">I</span> am Gopal<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n     <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/* 动态内容 */</span><span class=\"token punctuation\">}</span>\n     <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text <span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n     <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>hello <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg <span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n     <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/* 输入框 */</span><span class=\"token punctuation\">}</span>\n     <span class=\"token operator\">&lt;</span>input<span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n     <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/* 自定义组件 */</span><span class=\"token punctuation\">}</span>\n     <span class=\"token operator\">&lt;</span>myComponent<span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n     <span class=\"token operator\">&lt;</span>ButtonCounter\n        style<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> marginTop<span class=\"token operator\">:</span> <span class=\"token string\">\"10px\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        count<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span>\n        type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span>\n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onChange<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>题外话：创建组件那里大家可以多学学const 创建的ButtonCounter组件的那种方式。在React中也是经常会这么创建的。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a2a8df8a3f854ee68ca78c3a02d0557b.png\"/><br/> 这么看的话和在template里写没有多大区别，标签该是啥还是啥没有变化。那么这么一想的话，<strong>style呢，class</strong>呢？接下来就是style和class样式的写法(包括<strong>动态样式</strong>)</p>\n<p><strong>我们先给h3绑定一个class为colorRed：</strong></p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>colorRed<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>内容<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>审查元素发现直接写class绑定是可以的：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\592d083750aa4239aa13a6812daae92e.png\"/><br/> 那么class的样式怎么写呢？毕竟js文件里写貌似是不行的！<br/> <strong>1、全局样式</strong><br/> App.vue</p>\n<pre><code class=\"prism language-css\"><span class=\"token selector\">&lt;style&gt;\n.colorRed</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n&lt;/style&gt;\n</code></pre>\n<p><strong>2、引入一个css文件或者配合style-loader引入一个less、sass、stylus文件</strong><br/> 注意：都需要安装配置对应的loader，既然都是JSX了，那我们用stylus来讲解下，相信less、sass大家都会了。stylus是一个省略了{}，靠缩紧来识别的css编译器。（不想用stylus可跳过，样式这块可随意）</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> global stylus\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev stylus stylus-loader\n</code></pre>\n<blockquote>\n<p>各种style安装见：https://www.cnblogs.com/jimc/p/10265198.html</p>\n</blockquote>\n<p>安装完成后新建HelloWorld.styl，然后引入。</p>\n<blockquote>\n<p>stylus的使用：https://www.jianshu.com/p/5fb15984f22d<br/> stylus官网：https://stylus.zcopy.site/<br/> 控制台stylus报错见：https://blog.csdn.net/csdn_zhoushengnan/article/details/109448369<br/> vscode编辑期报错：安装编辑器stylus语法插件，并重启<br/> <img alt=\"在这里插入图片描述\" src=\"image\\fed95221e8c641e3ac39bc61727b4eea.png\"/><br/> 效果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\80cce771a35847fcbd89297aa336d607.png\"/></p>\n</blockquote>\n<p><strong>行内样式style：</strong></p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>blue</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>hello, I am Gopal<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><img alt=\"经测试演示\" src=\"image\\9cd2613965b446baa99e22882e8bf323.png\"/><br/> <strong>动态绑定class和style</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\e3e39403ed1e4b07be32665eda26fb22.png\"/></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>p style<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isGreen<span class=\"token operator\">?</span><span class=\"token string\">'color:green'</span><span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text <span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>p <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isYellow<span class=\"token operator\">?</span><span class=\"token string\">'colorYellow'</span><span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>hello <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg <span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>p style<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isRed<span class=\"token operator\">?</span>colorRed<span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>红色的文字<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\12ff9d1978f8430693b6bb5b36f2205b.png\"/><br/> <strong>属性绑定和普通HTML一样的</strong><br/> 毕竟class和style可都是html的属性，这点相信大家都知道的。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>input placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"我是placeholder\"</span>  <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>input placeholder<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>placeholderText<span class=\"token punctuation\">}</span>  <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/* 解构N个属性，要啥放啥 */</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{<!-- --></span><span class=\"token operator\">...</span>attrObj<span class=\"token punctuation\">}</span>  <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c08fdd95d4a4431cbcfe7b70abb3dd24.png\"/><br/> 效果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2ad280c3733042a493ced06e2f944646.png\"/></p>\n<h3><a id=\"_219\"></a>常用指令</h3>\n<p>template常用指令：v-html | v-text、v-if、v-for、v-modal等。template的指令在JSX是无法使用的，故需要一些写法，请看下面。<br/> 我新建个instructions.js用来示范指令这块。在App.vue中引入。<br/> <strong>v-html | v-text</strong><br/> 在 JSX 里面，如果要设置 dom 元素的 innerHTML，就用到 domProps。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> htmlCode <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>div domPropsInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>htmlCode<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>虽然v-text有domPropsInnerText，但没有用的必要。<br/> <strong>v-if</strong><br/> 分简单的和复杂的。<br/> 简单：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> bool <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n            <span class=\"token punctuation\">{<!-- --></span> bool <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">&gt;</span>按钮<span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span> <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">&gt;</span>按钮<span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>复杂：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">&gt;</span>按钮<span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">&gt;</span>按钮<span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">&gt;</span>按钮<span class=\"token number\">3</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>v-for</strong><br/> 就使用 map 方法来实现，在react中也是如此。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span> \n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token punctuation\">{<!-- --></span> list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">&gt;</span>按钮<span class=\"token punctuation\">{<!-- --></span>item<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>v-modal</strong></p>\n<blockquote>\n<p>注意：新版 vue-cli4 中，已经默认集成了 JSX 语法对 v-model 的支持，可以直接使用<br/> <code>&lt;input v-model={this.value}&gt;</code><br/> 如果你的项目比较老，也可以安装插件 babel-plugin-jsx-v-model 来进行支持</p>\n</blockquote>\n<p>我可是cli4，我来验证下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0c64f9cfe24f412193bea81d5e60075f.png\"/><br/> 验证结果：（通过）<br/> <img alt=\"在这里插入图片描述\" src=\"image\\609302b234414d0cb95faf1b418bdeee.png\"/><br/> 当然以上两种方式你都不想搞，你也可以手动支持，这就涉及到监听事件了，请向下看。</p>\n<h3><a id=\"_283\"></a>监听事件及事件修饰符</h3>\n<p>监听事件想到用 onChange, onClick等。<br/> 需要注意的是，传参数不能使用 onClick={this.removePhone(params)}，这样子会每次 render 的时候都会自动执行一次方法<br/> <strong>应该使用 bind，或者箭头函数来传参</strong></p>\n<pre><code class=\"prism language-javascript\">methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>点击bind<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>点击箭头函数<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>上面提到的用过监听事件来实现v-modal</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span> onInput<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<pre><code class=\"prism language-javascript\">methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p>除此之外，还可以使用对象的方式去监听事件：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>input\n      value<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span>\n      on<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>\n        focus<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$_handleFocus<span class=\"token punctuation\">,</span>\n        input<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$_handleInput\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      nativeOn<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>\n        click<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$_handleClick\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>input<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>其他事件的使用同理都是加on。<br/> <strong>事件修饰符</strong><br/> 和指令一样，除了个别的之外，大部分的事件修饰符都无法在JSX中使用，这时候你肯定已经习惯了，肯定有替代方案的。</p>\n<blockquote>\n<p>.stop ： 阻止事件冒泡，在JSX中使用event.stopPropagation()来代替<br/> .prevent：阻止默认行为，在JSX中使用event.preventDefault() 来代替<br/> .self：只当事件是从侦听器绑定的元素本身触发时才触发回调，使用下面的条件判断进行代替</p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target <span class=\"token operator\">!==</span> event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>.enter与keyCode: 在特定键触发时才触发回调</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">===</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 执行逻辑</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>除了上面这些修饰符之外，尤大大为了照顾我们这群CV仔，还是做了一点优化的,对于.once,.capture,.passive,.capture.once，尤大大提供了前缀语法帮助我们简化代码</p>\n<pre><code class=\"prism language-javascript\"> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div\n        on<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token comment\">// 相当于 :click.capture</span>\n          <span class=\"token string\">'!click'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$_handleClick<span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// 相当于 :input.once</span>\n          <span class=\"token string\">'~input'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$_handleInput<span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// 相当于 :mousedown.passive</span>\n          <span class=\"token string\">'&amp;mousedown'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$_handleMouseDown<span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// 相当于 :mouseup.capture.once</span>\n          <span class=\"token string\">'~!mouseup'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$_handleMouseUp\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>如果有参数传递给方法，不能直接(参数)，会在页面中立即触发，需要我在下面这种写法：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">clickOnce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token operator\">&lt;</span>button\n    type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span>\n    on<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token string\">'~click'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">clickOnce</span><span class=\"token punctuation\">(</span><span class=\"token string\">'只能点一次'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n   <span class=\"token operator\">&gt;</span>\n    事件修饰符点击一次\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"ui_386\"></a>使用范围（结合第三方ui组件）</h3>\n<p>不仅仅在 render 函数里面使用 JSX，而且还可以在 methods 里面返回 JSX，然后在 render 函数里面调用这个方法。并且也可以直接使用例如elementui等ui组件。<br/> JSX 还可以直接赋值给变量、例如使用elementui的el-dialog。（您在测试该案例时记得安装elemnt）</p>\n<pre><code class=\"prism language-javascript\">methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">$_renderFooter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>el<span class=\"token operator\">-</span>button<span class=\"token operator\">&gt;</span>确定<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>el<span class=\"token operator\">-</span>button<span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>el<span class=\"token operator\">-</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>取消<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>el<span class=\"token operator\">-</span>button<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">openDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>visible <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">closeDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>visible <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>  \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> buttons <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$_renderFooter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">openDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>打开Dialog<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>el<span class=\"token operator\">-</span>dialog visible<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>弹窗内容<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>template slot<span class=\"token operator\">=</span><span class=\"token string\">\"footer\"</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>buttons<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>el<span class=\"token operator\">-</span>dialog<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9ce04a8d458f49128a3e42644b22ab63.png\"/></p>\n<h2><a id=\"_420\"></a>插槽</h2>\n<p>插槽就是子组件中提供给父组件使用的一个占位符，插槽分为默认插槽，具名插槽和作用域插槽，下面我依次为您带来每种在JSX中的用法与如何去定义插槽。</p>\n<h3><a id=\"_422\"></a>默认插槽</h3>\n<p><strong>使用默认插槽</strong><br/> 使用element-ui的Dialog时，弹框内容就使用了默认插槽，在JSX中使用默认插槽的用法与普通插槽的用法基本是一致的，如下代码所示：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>ElDialog title<span class=\"token operator\">=</span><span class=\"token string\">\"弹框标题\"</span> visible<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/*这里就是默认插槽*/</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>这里是弹框内容<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ElDialog<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>自定义默认插槽</strong><br/> 在Vue的实例this上面有一个属性<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        s\n       \n       \n        l\n       \n       \n        o\n       \n       \n        t\n       \n       \n        s\n       \n       \n        ,\n       \n       \n        这\n       \n       \n        个\n       \n       \n        上\n       \n       \n        面\n       \n       \n        就\n       \n       \n        挂\n       \n       \n        载\n       \n       \n        了\n       \n       \n        一\n       \n       \n        个\n       \n       \n        这\n       \n       \n        个\n       \n       \n        组\n       \n       \n        件\n       \n       \n        内\n       \n       \n        部\n       \n       \n        的\n       \n       \n        所\n       \n       \n        有\n       \n       \n        插\n       \n       \n        槽\n       \n       \n        ，\n       \n       \n        使\n       \n       \n        用\n       \n       \n        t\n       \n       \n        h\n       \n       \n        i\n       \n       \n        s\n       \n       \n        .\n       \n      \n      \n       slots,这个上面就挂载了一个这个组件内部的所有插槽，使用this.\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.88888em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord cjk_fallback\">这</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">上</span><span class=\"mord cjk_fallback\">面</span><span class=\"mord cjk_fallback\">就</span><span class=\"mord cjk_fallback\">挂</span><span class=\"mord cjk_fallback\">载</span><span class=\"mord cjk_fallback\">了</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">这</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">内</span><span class=\"mord cjk_fallback\">部</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">所</span><span class=\"mord cjk_fallback\">有</span><span class=\"mord cjk_fallback\">插</span><span class=\"mord cjk_fallback\">槽</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">使</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">s</span><span class=\"mord\">.</span></span></span></span></span>slots.default就可以将默认插槽加入到组件内部。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    visible<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n      type<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"custom-dialog\"</span> vShow<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/**通过this.$slots.default定义默认插槽*/</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$slots<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>使用：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>myComponent visible<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span> slot<span class=\"token operator\">&gt;</span>我是自定义默认插槽<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>myComponent<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>另vShow相当于 v-show，不代表别的也可以这样！</p>\n<h3><a id=\"_462\"></a>具名插槽</h3>\n<p><strong>使用具名插槽</strong><br/> 有时候我们一个组件需要多个插槽，这时候就需要为每一个插槽起一个名字，比如element-ui的弹框可以定义底部按钮区的内容，就是用了名字为footer的插槽。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>ElDialog title<span class=\"token operator\">=</span><span class=\"token string\">\"弹框标题\"</span> visible<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>这里是弹框内容<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/** 具名插槽 */</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>template slot<span class=\"token operator\">=</span><span class=\"token string\">\"footer\"</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>ElButton<span class=\"token operator\">&gt;</span>确定<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ElButton<span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>ElButton<span class=\"token operator\">&gt;</span>取消<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ElButton<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ElDialog<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>自定义具名插槽</strong><br/> 在上节自定义默认插槽时提到了<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        s\n       \n       \n        l\n       \n       \n        o\n       \n       \n        t\n       \n       \n        s\n       \n       \n        ，\n       \n       \n        对\n       \n       \n        于\n       \n       \n        默\n       \n       \n        认\n       \n       \n        插\n       \n       \n        槽\n       \n       \n        使\n       \n       \n        用\n       \n       \n        t\n       \n       \n        h\n       \n       \n        i\n       \n       \n        s\n       \n       \n        .\n       \n      \n      \n       slots，对于默认插槽使用this.\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">对</span><span class=\"mord cjk_fallback\">于</span><span class=\"mord cjk_fallback\">默</span><span class=\"mord cjk_fallback\">认</span><span class=\"mord cjk_fallback\">插</span><span class=\"mord cjk_fallback\">槽</span><span class=\"mord cjk_fallback\">使</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">s</span><span class=\"mord\">.</span></span></span></span></span>slots.default，而对于具名插槽，可以使用this.$slots.footer进行自定义。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"custom-dialog\"</span> vShow<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$slots<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/**自定义具名插槽*/</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"custom-dialog__foolter\"</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$slots<span class=\"token punctuation\">.</span>footer<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>使用：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>myComponent visible<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>template slot<span class=\"token operator\">=</span><span class=\"token string\">\"footer\"</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>ElButton<span class=\"token operator\">&gt;</span>确定<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ElButton<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>ElButton<span class=\"token operator\">&gt;</span>取消<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ElButton<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>myComponent<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"_504\"></a>作用域插槽</h3>\n<p><strong>使用作用域插槽</strong><br/> 有时让插槽内容能够访问子组件中才有的数据是很有用的，这时候就需要用到作用域插槽,在JSX中，因为没有v-slot指令，所以作用域插槽的使用方式就与模板代码里面的方式有所不同了。比如在element-ui中，我们使用el-table的时候可以自定义表格单元格的内容，这时候就需要用到作用域插槽。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>myComponent1\n      visible<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">{<!-- --></span><span class=\"token operator\">...</span><span class=\"token punctuation\">{<!-- --></span>\n         scopedSlots<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token function-variable function\">test</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{<!-- --></span> user <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token comment\">// 这个user就是子组件传递来的数据，同理可这样拿到el-table的row，不过test得是default，不过案例还是我这样</span>\n              <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token string\">\"color:blue;\"</span><span class=\"token operator\">&gt;</span>快来啊，<span class=\"token punctuation\">{<!-- --></span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>，看看这个作用域插槽<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>myComponent1<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>自定义作用域插槽</strong><br/> 子组件中通过 {this.$scopedSlots.test({ user: {name:‘纸飞机’}})} 指定插槽的名称是 test，并将 user 传递给父组件。父组件在书写子组件标签的时候，通过 scopedSlots 值指定插入的位置是 test，并在回调函数获取到子组件传入的 user 值</p>\n<p>注意：作用域插槽是写在子组件标签中的，类似属性。而不是像具名插槽放在标签内部</p>\n<p>新建个作用域插槽.js</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 一个为jsx的子组件(玩玩插槽)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"myComponent\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n      visible<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        type<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      listData<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        type<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div vShow<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/**自定义作用域插槽*/</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span><span class=\"token operator\">&gt;</span>\n           <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$scopedSlots<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n                user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>name<span class=\"token operator\">:</span><span class=\"token string\">'纸飞机'</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n</code></pre>\n<p>效果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c69026d2f8484dc4a123490d13421e7e.png\"/></p>\n<h2><a id=\"_567\"></a>函数式组件</h2>\n<p>函数式组件是一个<strong>无状态、无实例</strong>的组件，详见<a href=\"https://cn.vuejs.org/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6\">官网说明</a>，新建一个 FunctionalComponent.js 文件，内容如下：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// export default ({ props }) =&gt; &lt;p&gt;hello {props.message}&lt;/p&gt;;</span>\n\n<span class=\"token comment\">// 或者推荐下方写法</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  functional<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"item\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token string\">\"color:red;font-size:18px;font-weight:bold\"</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>context<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>HelloWorld.js中使用：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>funComponent message<span class=\"token operator\">=</span><span class=\"token string\">\"展示下函数式组件\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>funComponent<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>效果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3db55a93f0784bb09e96518217317f4d.png\"/></p>\n<h2><a id=\"_591\"></a>代码地址</h2>\n<p><b id=\"test1\"> <a href=\"https://codechina.csdn.net/qq_32442973/vue2-jsx-demo.git\">https://codechina.csdn.net/qq_32442973/vue2-jsx-demo.git</a></b></p>\n<h2><a id=\"_593\"></a>后记</h2>\n<blockquote>\n<p>无论你是要用vue2的jsx还是vue3的jsx都没有本质区别，毕竟vue3是向下兼容vue2的；倘若你真的要学vue3的JSX，我建议你学完vue2的再去学；另我不推荐在vue中所有的组件和页面都用JSX，两者需要权衡利弊；同时也不必担心JSX和template的相互嵌套，两者是可以互相嵌套的。</p>\n</blockquote>\n<p><strong>参考：</strong><br/> https://www.cnblogs.com/ainyi/p/13324222.html<br/> https://www.jb51.net/article/205764.htm<br/> https://cn.vuejs.org/v2/guide/render-function.html#%E4%BA%8B%E4%BB%B6-amp-%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6<br/> https://www.cnblogs.com/htoooth/p/6973238.html<br/> https://www.jianshu.com/p/84b708c80598<br/> https://cloud.tencent.com/developer/article/1704608</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}