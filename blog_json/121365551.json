{"blogid": "121365551", "writerAge": "码龄4年", "writerBlogNum": "57", "writerCollect": "822", "writerComment": "895", "writerFan": "3250", "writerGrade": "5级", "writerIntegral": "3002", "writerName": "Rookiep", "writerProfileAdress": "writer_image\\profile_121365551.jpg", "writerRankTotal": "6975", "writerRankWeekly": "1682", "writerThumb": "1195", "writerVisitNum": "35023", "blog_read_count": "3221", "blog_time": "于 2021-11-16 22:03:59 发布", "blog_title": "【C语言基础】野指针与空指针", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>全网最接地气的C语言野指针介绍，此处对于野指针与空指针知识点做一些简要的介绍，作者实属初学，写博客也是作者学习的一个过程，难免文章中有内容理解不到位或者有不当之处，还请朋友们不吝指正，希望大家多多给予支持，赠人玫瑰，手有余香！</strong><br/> </p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_2\">一：野指针</a></li><li><ul><li><a href=\"#11__20\">1.1 ：野指针的成因</a></li><li><a href=\"#21__68\">2.1 ：规避野指针</a></li></ul>\n</li><li><a href=\"#_137\">二：空指针</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>一：野指针</h1>\n<p><strong>概念</strong>：野指针就是指向的内存地址是未知的(随机的，不正确的，没有明确限制的)。<br/> <strong>说明</strong>：指针变量也是变量，是变量就可以任意赋值。但是，<strong>任意数值赋值给指针变量没有意义</strong>，因为这样的指针就成了野指针，此指针指向的区域是未知(操作系统不允许操作此指针指向的内存区域)。<br/> <strong>注：野指针不会直接引发错误，操作野指针指向的内存区域才会出问题。</strong><br/> <strong>代码示例：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">//把a的值赋值给指针变量p，p为野指针， ok，不会有问题，但没有意义</span>\n\np <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//给指针变量p赋值，p为野指针， ok，不会有问题，但没有意义</span>\n\n<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//对野指针进行赋值操作就不可以了</span>\n\n</code></pre>\n<p>把a的值赋值给指针变量p，p为野指针， ok，不会有问题，但没有意义。<br/> 给指针变量p赋值，p为野指针， ok，不会有问题，但没有意义。</p>\n<h2><a id=\"11__20\"></a>1.1 ：野指针的成因</h2>\n<p><strong>1. 指针未初始化</strong>：指针变量刚被创建时不会自动成为NULL指针，它的缺省值是<strong>随机</strong>的，<strong>它所指的空间是随机的。</strong><br/> <strong>代码示例：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>（个人理解：指针变量有操作系统随机赋值，未指向一个具体空间，没有落脚点）<br/> <strong>2. 指针越界访问</strong>：指针指向的范围超出了合理范围，或者调用函数时返回指向栈内存的指针或引用，因为栈内存在函数结束时会被释放。<br/> <strong>代码示例：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> main（）\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>P<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">//当指针指向的范围超出数组arr的范围，p变成野指针。</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>3 .指针释放后未置空</strong>：有时指针在free或delete后未赋值 NULL，便会使人以为是合法的。其实它们只是把指针所指的内存给释放掉，但并<strong>没有把指针本身忘记</strong>。此时指针指向的就是<strong>无效内存</strong>。释放后的指针应立即将指针置为NULL，防止产生“野指针”。<br/> <strong>代码示例：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//成功开辟内存，可以操作内存。</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>（个人理解：我们前一天住了个宾馆，第二天退房了，虽然我们知道一个该房间的门牌号，但是保洁阿姨已经收拾了房间，我们就不知道房间里具体是什么样的了，所以我们也没法操作了。）</p>\n<h2><a id=\"21__68\"></a>2.1 ：规避野指针</h2>\n<p><strong>1. 初始化指针；</strong><br/> <strong>代码示例：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>2. 避免指针越界;</strong><br/> <strong>代码示例：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> main（）\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>P<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">//严格遵守有效范围。</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>3 避免返回局部变量的地址</strong>；<br/> <strong>代码示例：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这与变量的作用域有关，<strong>局部变量存在栈区，当被调函数结束后 ，栈区上局部变量的内存空间被释放</strong>，若再去访问该空间就不合理了。<br/> <strong>4. 开辟的指针释放后置为NULL</strong>；<br/> 当指针p指向的内存空间释放时，没有设置指针p的值为NULL。free只是把<strong>内存空间释放</strong>了，但是并没有将指针p的值赋为NULL。<br/> <strong>代码示例：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//成功开辟内存，可以操作内存。</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//避免野指针</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>5. 养成良好的编程习惯</strong>；<br/> <strong>好的编程习惯可以避免很多问题，道阻且长，但行则将至！！！</strong></p>\n<h1><a id=\"_137\"></a>二：空指针</h1>\n<p>*<em><strong>NULL是一个值为0的宏常量：#define NULL ((void <em>)0)</em></strong></em></p>\n<p><strong>意义</strong>：为了标志指针变量没有指向任何变量(空闲可用)，在C语言中，通常把NULL赋值给此指针，这样就标志此指针为空指针，<strong>没有指向任何空间。</strong></p>\n<p><strong>注意</strong>：对指针解引用操作可以获得它所指向的值。但从定义上看，NULL指针并未指向任何东西，因为对一个NULL指针解引用是一个非法的操作，<strong>所以在解引用之前，必须确保它不是一个NULL指针。</strong><br/> <strong>代码示例：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token comment\">//给p指向的内存区域拷贝内容**</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//err</span>\n\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> <span class=\"token number\">0x1122</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//给q指向的内存区域拷贝内容</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span> <span class=\"token string\">\"2222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//err\t\t</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>OK!!!观众老爷们，这里只是介绍了野指针与空指针，如果朋友们觉得有一点点作用的话，希望朋友们能够给予小菜鸟一点支持！后续继续给朋友们带来更好的博文，还希望朋友们能够继续关注，小菜鸟致力于把自己的学习经验与个人理解更多的分享给大家，望大家喜欢与指正。</strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}