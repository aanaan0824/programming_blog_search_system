{"blogid": "123265794", "writerAge": "码龄2年", "writerBlogNum": "39", "writerCollect": "5030", "writerComment": "764", "writerFan": "4920", "writerGrade": "5级", "writerIntegral": "3092", "writerName": "鸢也", "writerProfileAdress": "writer_image\\profile_123265794.jpg", "writerRankTotal": "5729", "writerRankWeekly": "2328", "writerThumb": "1500", "writerVisitNum": "191613", "blog_read_count": "5979", "blog_time": "已于 2022-03-14 16:08:55 修改", "blog_title": "自动化测试——unittest框架", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"unittest_0\"></a>自动化测试——unittest框架</h1>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#unittest_0\">自动化测试——unittest框架</a></li><li><ul><li><a href=\"#unittest_3\">unittest</a></li><li><a href=\"#TestCase_31\">一、TestCase（测试用例）</a></li><li><a href=\"#TestSuiteTestRunner_60\">二、TestSuite(测试套件)和TestRunner(测试执行）</a></li><li><a href=\"#TestLoader_96\">三、TestLoader（测试加载）</a></li><li><a href=\"#Fixture_146\">四、Fixture（测试夹具）</a></li><li><ul><li><a href=\"#41__150\">4.1 方法级别</a></li><li><a href=\"#42__177\">4.2 类级别</a></li></ul>\n</li><li><a href=\"#__221\">五、断言 ☆</a></li><li><a href=\"#_287\">六、跳过</a></li><li><a href=\"#unittest_ddt_326\">七、数据驱动（unittest ddt）☆</a></li><li><ul><li><a href=\"#1json_443\">（1）、在json文件驱动</a></li><li><a href=\"#3txt_504\">（3）、txt文件驱动</a></li><li><a href=\"#3csv__546\">（3）、csv 文件驱动</a></li><li><a href=\"#4_yaml_598\">（4) 、yaml文件驱动</a></li><li><a href=\"#4Excel_679\">（4）、Excel文件驱动</a></li></ul>\n</li><li><a href=\"#_763\">十、截图操作</a></li><li><a href=\"#_821\">九、测试报告</a></li><li><ul><li><a href=\"#91__829\">9.1 自带测试报告</a></li><li><a href=\"#92__845\">9.2 生成第三方测试报告</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"unittest_3\"></a>unittest</h2>\n<pre><code class=\"prism language-yacas\">1、什么是Unittest框架？\n\tpython自带一种单元测试框架\n2、为什么使用UnitTest框架？\n\t&gt;批量执行用例\n\t&gt;提供丰富的断言知识\n\t&gt;可以生成报告\n3、核心要素：\n\t1). TestCase（测试用例）\n\t2). TestSuite(测试套件)\n\t3). TestRunner(测试执行，执行TestUite测试套件的)\n\t4). TestLoader(批量执行测试用例-搜索指定文件夹内指定字母开头的模块) 【推荐】\n\t5). Fixture(固定装置(两个固定的函数，一个初始化时使用，一个结束时使用))\n\n</code></pre>\n<p>接下来会展开 核心要素来认识unittest框架：</p>\n<blockquote>\n<p>首先介绍下unittest的用例规则：</p>\n<p>​ 1、测试文件必须导包：import unittest</p>\n<p>​ 2、测试类必须继承 unittest.TestCase</p>\n<p>​ 3、测试方法必须以 test_开头</p>\n</blockquote>\n<h2><a id=\"TestCase_31\"></a>一、TestCase（测试用例）</h2>\n<p>1、是一个代码文件，在代码文件中来书写真正的用例代码 （里面的print均是模拟测试用例）</p>\n<pre><code class=\"prism language-python\">\n<span class=\"token comment\"># 1、导包</span>\n<span class=\"token comment\"># 2、自定义测试类</span>\n<span class=\"token comment\"># 3、在测试类中书写测试方法 采用print 简单书写测试方法</span>\n<span class=\"token comment\"># 4、执行用例</span>\n\n<span class=\"token keyword\">import</span> unittest\n\n<span class=\"token comment\"># 2、自定义测试类,需要继承unittest模块中的TestCase类即可</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDemo</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 书写测试方法，测试用例代码，书写要求，测试方法必须test_ 开头</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_method1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'测试方法1-1'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_method2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'测试方法1-2'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4、执行测试用例</span>\n<span class=\"token comment\"># 4.1 光标放在类后面执行所有的测试用例</span>\n<span class=\"token comment\"># 4.2 光标放在方法后面执行当前的方法测试用例</span>\n</code></pre>\n<p><font color=\"red\" size=\"3\">说明：def 定义的<code>test_</code> 是测试用例，<code>只有执行 if __name__ == '___mian___'</code> 的时候会执行测试用例，其他普通函数则不执行，通过 <code>self</code> 来调用执行。</font></p>\n<h2><a id=\"TestSuiteTestRunner_60\"></a>二、TestSuite(测试套件)和TestRunner(测试执行）</h2>\n<p>1、TestSuite（测试套件）：用来组装，打包 ，管理多个TestCase（测试用例）文件的</p>\n<p>2、TestRunner(测试执行)：用来执行 TestSuite(测试套件的)</p>\n<p>代码：首先要准备多个测试用例的文件才可以实现TestSuite和TestRunner，以下代码是已经准备了unittest_Demo2和unittest_Demo1两个测试用例文件</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 1、导包</span>\n<span class=\"token comment\"># 2、实例化（创建对象）套件对象</span>\n<span class=\"token comment\"># 3、使用套件对象添加用例方法</span>\n<span class=\"token comment\"># 4、实例化对象运行</span>\n<span class=\"token comment\"># 5、使用运行对象去执行套件对象</span>\n\n<span class=\"token keyword\">import</span> unittest\n\n<span class=\"token keyword\">from</span> unittest_Demo2 <span class=\"token keyword\">import</span> TestDemo\n<span class=\"token keyword\">from</span> unittest_Demo1 <span class=\"token keyword\">import</span> Demo\n\nsuite <span class=\"token operator\">=</span> unittest<span class=\"token punctuation\">.</span>TestSuite<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 将⼀个测试类中的所有⽅法进⾏添加</span>\n<span class=\"token comment\"># 套件对象.addTest(unittest.makeSuite(测试类名))</span>\nsuite<span class=\"token punctuation\">.</span>addTest<span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>makeSuite<span class=\"token punctuation\">(</span>TestDemo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsuite<span class=\"token punctuation\">.</span>addTest<span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>makeSuite<span class=\"token punctuation\">(</span>Demo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4、实例化运行对象</span>\nrunner <span class=\"token operator\">=</span> unittest<span class=\"token punctuation\">.</span>TextTestRunner<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 5、使用运行对象去执行套件对象</span>\n<span class=\"token comment\"># 运⾏对象.run(套件对象)</span>\nrunner<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>suite<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"TestLoader_96\"></a>三、TestLoader（测试加载）</h2>\n<p>说明：<br/> 1. 将符合条件的测试方法添加到测试套件中<br/> 2. 搜索指定目录文件下指定字母开头的模块文件下test开始的方法，并将这些方法添加到测试套件中，最后返回测试套件<br/> 3. 与Testsuite功能一样，对他功能的补充，用来组装测试用例</p>\n<p>一般测试用例是写在Case这个文件夹里面，当测试用例超多的时候就可以考虑 TestLoader</p>\n<pre><code class=\"prism language-yacas\">写法：\n1. suite = unittest.TestLoader().discover(\"指定搜索的目录文件\",\"指定字母开头模块文件\")\n2. suite = unittest.defaultTestLoader.discover(\"指定搜索的目录文件\",\"指定字母开头模块文件\") 【推荐】\n注意：\n\t如果使用写法1，TestLoader()必须有括号。\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 1. 导包</span>\n<span class=\"token comment\"># 2. 实例化测试加载对象并添加用例 ---&gt; 得到的是 suite 对象</span>\n<span class=\"token comment\"># 3. 实例化 运行对象</span>\n<span class=\"token comment\"># 4. 运行对象执行套件对象</span>\n\n<span class=\"token keyword\">import</span> unittest\n\n<span class=\"token comment\"># 实例化测试加载对象并添加用例 ---&gt; 得到的是 suite 对象</span>\n<span class=\"token comment\"># unittest.defaultTestLoader.discover('用例所在的路径', '用例的代码文件名')</span>\n<span class=\"token comment\"># 测试路径：相对路径</span>\n<span class=\"token comment\"># 测试文件名：可以使用 * 通配符，可以重复使用</span>\nsuite <span class=\"token operator\">=</span> unittest<span class=\"token punctuation\">.</span>defaultTestLoader<span class=\"token punctuation\">.</span>discover<span class=\"token punctuation\">(</span><span class=\"token string\">'./Case'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cs*.py'</span><span class=\"token punctuation\">)</span>\nrunner <span class=\"token operator\">=</span> unittest<span class=\"token punctuation\">.</span>TextTestRunner<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nrunner<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>suite<span class=\"token punctuation\">)</span>\n</code></pre>\n<hr/>\n<pre><code class=\"prism language-yacas\">TestSuite与TestLoader区别：\n\t共同点：都是测试套件\n\t不同点：实现方式不同\n\t\tTestSuite: 要么添加指定的测试类中所有test开头的方法，要么添加指定测试类中指定某个test开头的方法\n\t\tTestLoader: 搜索指定目录下指定字母开头的模块文件中以test字母开头的方法并将这些方法添加到测试套件中，最后返回测试套件\n</code></pre>\n<hr/>\n<h2><a id=\"Fixture_146\"></a>四、Fixture（测试夹具）</h2>\n<p>是一种代码结构，在某些特定情况下，会自动执行。</p>\n<h3><a id=\"41__150\"></a>4.1 方法级别</h3>\n<p>在每个测试方法（用例代码）执行前后都会自动调用的结构</p>\n<ul><li><code>def setUp()</code>,每个测试方法执行之前都会执行 （初始化）</li><li><code>def tearDown()</code>,每个测试方法执行之后都会执行 （释放）</li></ul>\n<p>特性：几个测试函数，执行几次。每个测试函数执行之前都会执行 setUp，执行之后都会执行tearDwon</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 初始化</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 每个测试方法执行之前执行的函数</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token comment\"># 释放</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 每个测试方法执行之后执行的函数</span>\n    <span class=\"token keyword\">pass</span>\n</code></pre>\n<pre><code class=\"prism language-yacas\">场景：当你要登录自己的用户名账户的时候，都会输入网址，当你准备不用这个页面了，都会关闭当前页面；\n\t1、输入网址 （方法级别）\n\t2、关闭当前页面 （方法级别）\n</code></pre>\n<h3><a id=\"42__177\"></a>4.2 类级别</h3>\n<p>在每个测试类中所有方法执行前后 都会自动调用的结构(在整个类中 执行之前执行之后各一次)</p>\n<ul><li><code>def setUpClass()</code> ,类中所有方法之前</li><li><code>def tearDownClass()</code>，类中所有方法之后</li></ul>\n<p>特性：测试类运行之前运行一次setUpClass ，类运行之后运行一次tearDownClass</p>\n<p>注意：类方法必须使用 @classmethod修饰</p>\n<pre><code class=\"prism language-python\">\t@<span class=\"token builtin\">classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setUpClass</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------1.打开浏览器'</span><span class=\"token punctuation\">)</span>\n\n    @<span class=\"token builtin\">classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">tearDownClass</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'------------5、关闭浏览器'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code class=\"prism language-yacas\">场景：你上网的整个过程都首先需要打开浏览器，关闭浏览器，而他们整个过程都需要执行一次，那么就可以用类级别。\n</code></pre>\n<p>案列模板：结合了类级别和方法级别实现的</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-GBxQV2uP-1647245316010)(C:/Users/15277/AppData/Roaming/Typora/typora-user-images/image-20220303153824329.png)]</p>\n<pre><code class=\"prism language-yacas\">提示：\n\t无论使用函数级别还是类级别，最后常用场景为：\n\t\t初始化：\n\t\t\t1. 获取浏览器实例化对象\n\t\t\t2. 最大化浏览器\n\t\t\t3. 隐式等待\n\t\t结束：\n\t\t\t关闭浏览器驱动对象\n</code></pre>\n<h2><a id=\"__221\"></a>五、断言 ☆</h2>\n<p>1、什么是断言：</p>\n<p>​ 让程序代替人工自动的判断预期结果和实际结果是否相符</p>\n<p>断言的结果：</p>\n<p>​ 1)、True，用例通过</p>\n<p>​ 2)、False，代码抛出异常，用例不通过</p>\n<p>​ 3)、在unittest中使用断言，需要通过 <code>self.断言方法</code></p>\n<p>2、为什么要断言：</p>\n<p>​ 自动化脚本执行时都是无人值守，需要通过断言来判断自动化脚本的执行是否通过</p>\n<p>​ <mark>注：自动化脚本不写断言，相当于没有执行测试一个效果。</mark></p>\n<p>3、常用的断言：</p>\n<pre><code class=\"prism language-python\">self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>ex1<span class=\"token punctuation\">,</span> ex2<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 判断ex1 是否和ex2 相等</span>\nself<span class=\"token punctuation\">.</span>assertIn<span class=\"token punctuation\">(</span>ex1<span class=\"token punctuation\">,</span> ex2<span class=\"token punctuation\">)</span> <span class=\"token comment\">#  ex2是否包含 ex1   注意：所谓的包含不能跳字符</span>\nself<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span> <span class=\"token comment\">#  判断ex是否为True</span>\n\n重点讲前两个assertEqual 和 assertIn\n方法：\nassertEqual：self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>预期结果，实际结果） 判断的是预期是否相等实际\nassertIn：self<span class=\"token punctuation\">.</span>assertIn<span class=\"token punctuation\">(</span>预期结果，实际结果） 判断的是预期是否包含实际中\nassertIn<span class=\"token punctuation\">(</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'admin'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 包含</span>\nassertIn<span class=\"token punctuation\">(</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'adminnnnnnnn'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 包含</span>\nassertIn<span class=\"token punctuation\">(</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aaaaaadmin'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 包含</span>\nassertIn<span class=\"token punctuation\">(</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aaaaaadminnnnnnn'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 包含</span>\nassertIn<span class=\"token punctuation\">(</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'addddddmin'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 不是包含</span>\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># Login 函数我已经封装好了，这里直接导包调用就可以了。</span>\n\n<span class=\"token keyword\">import</span> unittest\n\n<span class=\"token keyword\">from</span> login <span class=\"token keyword\">import</span> Login\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestLogin</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"正确的用户名和密码: admin, 123456, 登录成功\"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_success</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token string\">'登录成功'</span><span class=\"token punctuation\">,</span> Login<span class=\"token punctuation\">(</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_username_error</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"错误的用户名: root, 123456, 登录失败\"\"\"</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token string\">'登录失败'</span><span class=\"token punctuation\">,</span> Login<span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_password_error</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"错误的密码: admin, 123123, 登录失败\"\"\"</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token string\">'登录失败'</span><span class=\"token punctuation\">,</span> Login<span class=\"token punctuation\">(</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_error</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"错误的用户名和错误的密码: aaa, 123123, 登录失败\"\"\"</span>\n        <span class=\"token comment\"># self.assertEqual('登录失败',Login('登陆失败','123123'))</span>\n        self<span class=\"token punctuation\">.</span>assertIn<span class=\"token punctuation\">(</span><span class=\"token string\">'失败'</span><span class=\"token punctuation\">,</span> Login<span class=\"token punctuation\">(</span><span class=\"token string\">'登录失败'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h2><a id=\"_287\"></a>六、跳过</h2>\n<p>对于一些未完成的或者不满足测试条件的测试函数和测试类, 不想执行,可以使用跳过</p>\n<pre><code class=\"prism language-Python\">\"\"\"\n使用方法，装饰器完成\n代码书写在 TestCase 文件\n\"\"\"\n# 直接将测试函数标记成跳过\n@unittest.skip('跳过条件')\n# 根据条件判断测试函数是否跳过 , 判断条件成立, 跳过\n@unittest.skipIf(判断条件，'跳过原因')\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> unittest\n\nversion <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDemo1</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    @unittest<span class=\"token punctuation\">.</span>skip<span class=\"token punctuation\">(</span><span class=\"token string\">'直接跳过'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_method1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'测试用例1-1'</span><span class=\"token punctuation\">)</span>\n\n    @unittest<span class=\"token punctuation\">.</span>skipIf<span class=\"token punctuation\">(</span>version <span class=\"token operator\">&gt;</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'版本大于19，测试跳过'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_method2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'测试用例1-2'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>结果：</p>\n<p><img alt=\"image-20220303193648196\" src=\"image\\475da40736072e365fb0d5adc3cac787.png\"/></p>\n<h2><a id=\"unittest_ddt_326\"></a>七、数据驱动（unittest ddt）☆</h2>\n<p>ddt：data-driver tests</p>\n<p>数据驱动： 是以数据来驱动整个测试用例的执行， 也就是测试数据决定测试结果</p>\n<p>数据驱动解决的问题是：</p>\n<p>1）、代码和数据分离，避免代码冗余</p>\n<p>2）、不写重复的代码逻辑；</p>\n<p>在python解释器中需要安装 ddt 这个包才能用：</p>\n<p><img alt=\"image-20220302171352407\" src=\"image\\d83dec0f85f594965fbb58860c7cd559.png\"/></p>\n<p><img alt=\"image-20220302171612334\" src=\"image\\a2416322d99e328ee9cc698c78406cd4.png\"/></p>\n<p><img alt=\"image-20220302171701727\" src=\"image\\4eeb012786bb96662b69e38398ce64f3.png\"/></p>\n<p>要检查是否安装上，在cmd当中 输入 pip list命名，有ddt说明安装成功</p>\n<p><img alt=\"image-20220302171854877\" src=\"image\\f33fb65443c6bde9d0bb21d22199e580.png\"/></p>\n<p>语法：</p>\n<p>1、使用数据驱动，要在class前加上修饰器 @ddt</p>\n<blockquote>\n<p>说明：方法里面使用 print ，为了方便，模拟测试用例，主要是为了学习数据驱动，实际中方法里面写的是测试用例的代码</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> ddt <span class=\"token keyword\">import</span> ddt<span class=\"token punctuation\">,</span> data\n\n@ddt  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDemo</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 单一参数</span>\n    @data<span class=\"token punctuation\">(</span><span class=\"token string\">'17611110000'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'17611112222'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'测试一电话号码：'</span><span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">)</span>\n        \n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n</code></pre>\n<p>1)、结合 selenium 使用 ddt</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\nunittest + selenium\n\"\"\"</span>\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n\n<span class=\"token keyword\">from</span> ddt <span class=\"token keyword\">import</span> ddt<span class=\"token punctuation\">,</span> data\n<span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n\n@ddt\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestBaidu</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>driver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.sogou.com/'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\n    <span class=\"token comment\"># 单一参数</span>\n    @data<span class=\"token punctuation\">(</span><span class=\"token string\">'易烊千玺'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'王嘉尔'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_01</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token string\">'stb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>self：相当于java中的this，当前对象的引用，self.driver定义了driver这个变量。</p>\n</blockquote>\n<p>2、在实际中不可能是单一参数进行传参，将会使用多个参数进行传参：</p>\n<pre><code class=\"prism language-yacas\">注意事项：\n1）、多个数据传参的时候@data里面是要用列表形式\n2）、会用到 @unpack 装饰器 进行拆包，把对应的内容传入对应的参数；\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> ddt <span class=\"token keyword\">import</span> ddt<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> unpack\n\n@ddt\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDemo</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 多参数数据驱动</span>\n    @data<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># unpack 是进行拆包，不然会把列表里面的数据全部传到username这个一个参数，我们要实现列表中的两个数据分别传入对应的变量中</span>\n    @unpack\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'测试二：'</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n</code></pre>\n<p>​ <mark>但是以上步骤都是数据在代码当中的，假如要测试n个手机号这样的数据，全部写在 @data 装饰器里面就很麻烦，这就引出了数据驱动里面的代码和数据的分离。</mark></p>\n<p>3、将数据放入一个文本文件中，从文件读取数据， 如JSON、 excel、 xml、 txt等格式文件 ，这里演示的是<code>json</code>文件类型.</p>\n<p><a href=\"https://blog.csdn.net/qq_54219272/article/details/123236526?spm=1001.2014.3001.5501\">json文件处理</a>， 这个链接介绍了json文件和Python文件基本操作</p>\n<h3><a id=\"1json_443\"></a>（1）、在json文件驱动</h3>\n<pre><code class=\"prism language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"username\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"123456\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"username\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"45678\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<p>（2）、在测试代码中读取json文件</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> ddt <span class=\"token keyword\">import</span> ddt<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> unpack\n\n<span class=\"token comment\"># 用json多个参数读取</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">reads_phone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user.json'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 列表</span>\n        <span class=\"token keyword\">return</span> result\n    \n@ddt\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDemo</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 多参数数据驱动</span>\n    @data<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>reads_phone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># unpack 是进行拆包，不然会把列表里面的数据全部传到username这个一个参数，我们要实现列表中的两个数据分别传入对应的变量中</span>\n    @unpack\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'测试二：'</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n</code></pre>\n<pre><code class=\"prism language-yacas\">注意事项：\n1、with open里面默认是 ”r“ \n2、@data 里面的 * 含义是实现每个json对象单个传入方法执行，不然会吧json文件里面所用数据全部传入 \n\t&gt; * 是元祖；\n\t&gt; ** 是字典；\n3、参数不能传错，要对应\n</code></pre>\n<p>执行结果：</p>\n<p><img alt=\"image-20220302165435736\" src=\"image\\040c6e907aac5d1e42c34e0b21b474ae.png\"/></p>\n<h3><a id=\"3txt_504\"></a>（3）、txt文件驱动</h3>\n<p>一行表示一组：</p>\n<pre><code class=\"prism language-txt\">admin,123456\nnormal,456789\n</code></pre>\n<pre><code class=\"prism language-python\">\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">def</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    lis <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readtext.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># lis.append(line) #  ['admin,123456\\n', 'normal,456789\\n']</span>\n            <span class=\"token comment\"># lis.append(line.strip('\\n'))  ['admin,123456', 'normal,456789'] 两个字符串</span>\n            lis<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [['admin', '123456'], ['normal', '456789']]</span>\n    <span class=\"token keyword\">return</span> lis\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDome</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_01</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        li <span class=\"token operator\">=</span> read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\nsplit():一个字符串里面用某个字符分割，返回列表\nstrip():去掉两边的字符或者字符串，默认删除空白符（包括'\\n', '\\r',  '\\t',  ' ')\n\"\"\"</span>\n</code></pre>\n<h3><a id=\"3csv__546\"></a>（3）、csv 文件驱动</h3>\n<pre><code class=\"prism language-csv\">供应商名称,联系人,移动电话\n英业达,张三,13261231234\n阿里巴巴,李四,13261231231\n日立公司,王五,13261231233\n</code></pre>\n<p>写法一：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n编写 csvv.py脚本读取csv中的测试数据\n\"\"\"</span>\n<span class=\"token keyword\">import</span> csv\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReadCsv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">read_csv</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        lis <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># 用csv的API的reader方法！！！！</span>\n        data <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>reader<span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'testdata.csv'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#!!!!</span>\n        <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span>\n            lis<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># lis.append(line[0])  # 二维数组可以省略行，列不可以省略</span>\n            <span class=\"token comment\"># lis.append(line[1])</span>\n\n        <span class=\"token keyword\">return</span> lis\n\n<span class=\"token comment\"># 实例化类</span>\nreadCsv <span class=\"token operator\">=</span> ReadCsv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 打印类中的方法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>readCsv<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"image-20220309150247944\" src=\"image\\950164da88093d8739c66d82df7d760a.png\"/></p>\n<p>写法二： 推荐</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">csvTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    li <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user.csv'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        filename <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>reader<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n        <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> filename<span class=\"token punctuation\">:</span>\n            li<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> li\n</code></pre>\n<h3><a id=\"4_yaml_598\"></a>（4) 、yaml文件驱动</h3>\n<pre><code class=\"prism language-yaml\"><span class=\"token punctuation\">-</span>\n  <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> admin9\n  <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span>\n<span class=\"token punctuation\">-</span>\n  <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> normal\n  <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">789456</span>\n</code></pre>\n<ul><li>对应的json文件</li></ul>\n<pre><code class=\"prism language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"username\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"admin9\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"username\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7894</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<p>写法：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n使用yaml数据驱动\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n\n<span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">from</span> ddt <span class=\"token keyword\">import</span> ddt<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> unpack<span class=\"token punctuation\">,</span> file_data\n\n\n@ddt\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">YamlTest</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>driver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'file:///D:/%E6%A1%8C%E9%9D%A2/page/%E6%B3%A8%E5%86%8CA.html'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>maximize_window<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        driver <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>driver\n        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        driver<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># file_data 传入多个参数的时候，@unpack 的解包不起作用</span>\n    @unittest<span class=\"token punctuation\">.</span>skip\n    @file_data<span class=\"token punctuation\">(</span><span class=\"token string\">'../user.yaml'</span><span class=\"token punctuation\">)</span>\n    @unpack\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_yaml01</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        driver <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>driver\n        driver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token string\">'userA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span>\n        driver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token string\">'passwordA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 注意：传的参数名称要与yaml文件对应</span>\n    <span class=\"token comment\"># 在yaml数据中文件中采用对象（键值对）的方式来定义数据内容</span>\n    @file_data<span class=\"token punctuation\">(</span><span class=\"token string\">'../user1.yaml'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_yaml02</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        driver <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>driver\n        driver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token string\">'userA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span>\n        driver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token string\">'passwordA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<blockquote>\n<p>注意：file_date 装饰器，可以直接读取yaml和json文件</p>\n</blockquote>\n<h3><a id=\"4Excel_679\"></a>（4）、Excel文件驱动</h3>\n<p>建立excel表的时候需要退出pychram在根目录下创建excel表保存，否则会报错</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">read_excel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    xlsx <span class=\"token operator\">=</span> openpyxl<span class=\"token punctuation\">.</span>load_workbook<span class=\"token punctuation\">(</span><span class=\"token string\">\"../excel.xlsx\"</span><span class=\"token punctuation\">)</span>\n    sheet1 <span class=\"token operator\">=</span> xlsx<span class=\"token punctuation\">[</span><span class=\"token string\">'Sheet1'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sheet1<span class=\"token punctuation\">.</span>max_row<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 行</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sheet1<span class=\"token punctuation\">.</span>max_column<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 列</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================================================='</span><span class=\"token punctuation\">)</span>\n    allList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> sheet1<span class=\"token punctuation\">.</span>max_row <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        rowlist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> column <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sheet1<span class=\"token punctuation\">.</span>max_column <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            rowlist<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>sheet1<span class=\"token punctuation\">.</span>cell<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n        allList<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>rowlist<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> allList\n</code></pre>\n<p>用excel登录csdn操作</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n测试excel数据驱动\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n\n<span class=\"token keyword\">import</span> openpyxl <span class=\"token keyword\">as</span> openpyxl\n<span class=\"token keyword\">from</span> ddt <span class=\"token keyword\">import</span> ddt<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> unpack\n<span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n\n\n<span class=\"token comment\"># 读取excel表中的数据，使用xlrd，openpyxl</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">read_excel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    xlsx <span class=\"token operator\">=</span> openpyxl<span class=\"token punctuation\">.</span>load_workbook<span class=\"token punctuation\">(</span><span class=\"token string\">\"../excel.xlsx\"</span><span class=\"token punctuation\">)</span>\n    sheet1 <span class=\"token operator\">=</span> xlsx<span class=\"token punctuation\">[</span><span class=\"token string\">'Sheet1'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sheet1<span class=\"token punctuation\">.</span>max_row<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 行</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sheet1<span class=\"token punctuation\">.</span>max_column<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 列</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================================================='</span><span class=\"token punctuation\">)</span>\n    allList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> sheet1<span class=\"token punctuation\">.</span>max_row <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        rowlist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> column <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sheet1<span class=\"token punctuation\">.</span>max_column <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            rowlist<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>sheet1<span class=\"token punctuation\">.</span>cell<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n        allList<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>rowlist<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> allList\n\n\n@ddt\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExcelText</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>driver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://passport.csdn.net/login?code=applets'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>maximize_window<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        driver <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>driver\n        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        driver<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    @data<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    @unpack\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_excel01</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n        driver <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>driver\n        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        driver<span class=\"token punctuation\">.</span>find_element_by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">'/html/body/div[2]/div/div[2]/div[2]/div[1]/div/div[1]/span[4]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        driver<span class=\"token punctuation\">.</span>find_element_by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">'/html/body/div[2]/div/div[2]/div[2]/div[1]/div/div[2]/div/div[1]/div/input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span>\n        driver<span class=\"token punctuation\">.</span>find_element_by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">'/html/body/div[2]/div/div[2]/div[2]/div[1]/div/div[2]/div/div[2]/div/input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span>\n        driver<span class=\"token punctuation\">.</span>find_element_by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">'/html/body/div[2]/div/div[2]/div[2]/div[1]/div/div[2]/div/div[4]/button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_763\"></a>十、截图操作</h2>\n<p>用例不可能每一次运行都成功，肯定运行时候有不成功的时候。如果可以捕捉到错误，并且把错误截图保存，这将<br/> 是一个非常棒的功能，也会给我们错误定位带来方便</p>\n<p>截图方法：<code>driver.get_screenshot_as_file</code></p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n捕捉异常截图测试\n\"\"\"</span>\n<span class=\"token keyword\">import</span> os<span class=\"token punctuation\">.</span>path\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n\n<span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ScreeshotTest</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>driver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.sogou.com/'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>maximize_window<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        driver <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>driver\n        driver<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_01</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        driver <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>driver\n        driver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span><span class=\"token string\">\"易烊千玺\"</span><span class=\"token punctuation\">)</span>\n        driver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token string\">'stb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> u<span class=\"token string\">\"搜狗一下你就知道\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token operator\">=</span><span class=\"token string\">\"不相等\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>saveScreenShot<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">,</span> <span class=\"token string\">\"shot.png\"</span><span class=\"token punctuation\">)</span>\n        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">saveScreenShot</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> driver<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">\"./imge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            os<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span><span class=\"token string\">\"./imge\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 格式十分重要，小写大写敏感 %Y%m%d-%H%M%S</span>\n        now <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y%m%d-%H%M%S\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        driver<span class=\"token punctuation\">.</span>get_screenshot_as_file<span class=\"token punctuation\">(</span><span class=\"token string\">\"./imge/\"</span> <span class=\"token operator\">+</span> now <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> filename<span class=\"token punctuation\">)</span>\n        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_821\"></a>九、测试报告</h2>\n<p>有两种测试报告：</p>\n<blockquote>\n<p>1、自带的测试报告</p>\n<p>2、生成第三方测试报告</p>\n</blockquote>\n<h3><a id=\"91__829\"></a>9.1 自带测试报告</h3>\n<p>只有单独运行 TestCase 的代码,才会生成测试报告</p>\n<p><img alt=\"image-20220303194203647\" src=\"image\\599fddff225a1d5423a5f9e4b50b8695.png\"/></p>\n<p><img alt=\"image-20220303194254013\" src=\"image\\6b7ae6d03d40b417640f199622b1bcf2.png\"/></p>\n<p><img alt=\"image-20220303194445103\" src=\"image\\8851fee6586b9239dbeb911af56b5f7e.png\"/></p>\n<p><img alt=\"image-20220303194711451\" src=\"image\\d4f0218038812f94f4cdb278b5a9273d.png\"/></p>\n<h3><a id=\"92__845\"></a>9.2 生成第三方测试报告</h3>\n<p>这里需要第三方的测试运行类模块，然后放在代码的目录中</p>\n<p><img alt=\"image-20220303195307666\" src=\"image\\a3a681da9954a8aaf6a1b57803e877f1.png\"/></p>\n<p>就像这两个模块一样放进代码目录中</p>\n<pre><code class=\"prism language-yacas\">步骤：\n 1. 获取第三方的 测试运行类模块 , 将其放在代码的目录中\n 2. 导包 unittest\n 3. 使用 套件对象, 加载对象 去添加用例方法\n 4. 实例化 第三方的运行对象 并运行 套件对象\n \tHTMLTestRunner()\n</code></pre>\n<p>写法一：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> unittest\n\n<span class=\"token keyword\">from</span> HTMLTestRunner <span class=\"token keyword\">import</span> HTMLTestRunner\n\nsuite <span class=\"token operator\">=</span> unittest<span class=\"token punctuation\">.</span>defaultTestLoader<span class=\"token punctuation\">.</span>discover<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Uni*.py'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token string\">'report1.html'</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    runner <span class=\"token operator\">=</span> HTMLTestRunner<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'测试报告'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python3.10'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 运行对象</span>\n    <span class=\"token comment\"># 运行对象执行套件, 要写在 with 的缩进中</span>\n    runner<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>suite<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>写法二：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n生成测试报告\n\"\"\"</span>\n<span class=\"token keyword\">import</span> os<span class=\"token punctuation\">.</span>path\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n\n<span class=\"token keyword\">from</span> HTMLTestRunner <span class=\"token keyword\">import</span> HTMLTestRunner\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">createsuite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    discovers <span class=\"token operator\">=</span> unittest<span class=\"token punctuation\">.</span>defaultTestLoader<span class=\"token punctuation\">.</span>discover<span class=\"token punctuation\">(</span><span class=\"token string\">\"./cases\"</span><span class=\"token punctuation\">,</span> pattern<span class=\"token operator\">=</span><span class=\"token string\">\"cs*.py\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>discovers<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> discovers\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 当前路径</span>\n    <span class=\"token comment\"># sys.path 是一个路径的集合</span>\n    curpath <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 当前路径文件resultreport不存在时，就创建一个</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>curpath<span class=\"token operator\">+</span><span class=\"token string\">'/resultreport'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span>curpath<span class=\"token operator\">+</span><span class=\"token string\">'/resultreport'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 2、解决重名问题</span>\n    now <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y-%m-%d-%H %M %S\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 文件名是 路径 加上 文件的名称</span>\n    filename <span class=\"token operator\">=</span> curpath<span class=\"token operator\">+</span><span class=\"token string\">'/resultreport/'</span><span class=\"token operator\">+</span>now<span class=\"token operator\">+</span><span class=\"token string\">'resultreport.html'</span>\n    <span class=\"token comment\"># 打开文件html，是用wb以写的方式打开</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        runner <span class=\"token operator\">=</span> HTMLTestRunner<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> u<span class=\"token string\">\"测试报告\"</span><span class=\"token punctuation\">,</span> u<span class=\"token string\">\"测试用例情况\"</span><span class=\"token punctuation\">)</span>\n        suite <span class=\"token operator\">=</span> createsuite<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        runner<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>suite<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>这里面的当前路径也可以用 <code>./</code>来表示！！！</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n生成测试报告\n\"\"\"</span>\n<span class=\"token keyword\">import</span> os<span class=\"token punctuation\">.</span>path\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n<span class=\"token keyword\">from</span> HTMLTestRunner <span class=\"token keyword\">import</span> HTMLTestRunner\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">createsuite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    discovers <span class=\"token operator\">=</span> unittest<span class=\"token punctuation\">.</span>defaultTestLoader<span class=\"token punctuation\">.</span>discover<span class=\"token punctuation\">(</span><span class=\"token string\">\"./cases\"</span><span class=\"token punctuation\">,</span> pattern<span class=\"token operator\">=</span><span class=\"token string\">\"cs*.py\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>discovers<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> discovers\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 当前路径文件resultreport不存在时，就创建一个</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">'./resultreport'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span><span class=\"token string\">'./resultreport'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 2、解决重名问题</span>\n    <span class=\"token comment\"># 格式十分重要 %Y-%m-%d-%H %M %S</span>\n    now <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y-%m-%d-%H %M %S\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 文件名是 路径 加上 文件的名称</span>\n    filename <span class=\"token operator\">=</span> <span class=\"token string\">'./resultreport/'</span><span class=\"token operator\">+</span>now<span class=\"token operator\">+</span><span class=\"token string\">'resultreport.html'</span>\n    <span class=\"token comment\"># 打开文件html，是用wb以写的方式打开</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        runner <span class=\"token operator\">=</span> HTMLTestRunner<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> u<span class=\"token string\">\"测试报告\"</span><span class=\"token punctuation\">,</span> u<span class=\"token string\">\"测试用例情况\"</span><span class=\"token punctuation\">)</span>\n        suite <span class=\"token operator\">=</span> createsuite<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        runner<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>suite<span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>注意：</p>\n<p>实例化 第三方的运行对象，HTMLTestRunner()的初始化有多种可以自定义设置</p>\n</blockquote>\n<p><img alt=\"image-20220303195856795\" src=\"image\\cf496c908e72a87f1dd8cc3598b1792a.png\"/></p>\n<pre><code class=\"prism language-yacas\"> HTMLTestRunner()\n 1、stream=sys.stdout, 必填,测试报告的文件对象(open ), 注意点,要使用 wb 打开\n 2、verbosity=1, 可选, 报告的详细程度,默认 1 简略, 2 详细\n 3、title=None, 可选, 测试报告的标题\n 4、description=None 可选, 描述信息, Python 的版本, pycharm 版本\n</code></pre>\n<p>最后生成结果：</p>\n<p><img alt=\"image-20220303222550453\" src=\"image\\35af8cf743c49f2a34f5e48e32473fb5.png\"/></p>\n<hr/>\n<p>​ unittest框架就本上就是这些知识了，里面记得东西很多，多敲代码，形成记忆，自动化测试后面还剩下selenium，selenium完了过后基本上自动化的内容差不多就结束了，铁汁们，觉得笔者写的不错的可以点个赞哟❤🧡💛💚💙💜🤎🖤🤍💟，收藏关注呗，你们支持就是我写博客最大的动力！！！！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}