{"blogid": "125105892", "writerAge": "码龄3年", "writerBlogNum": "279", "writerCollect": "38106", "writerComment": "18747", "writerFan": "32842", "writerGrade": "8级", "writerIntegral": "39922", "writerName": "Bubbliiiing", "writerProfileAdress": "writer_image\\profile_125105892.jpg", "writerRankTotal": "92", "writerRankWeekly": "1389", "writerThumb": "9625", "writerVisitNum": "3801716", "blog_read_count": "6010", "blog_time": "已于 2022-06-02 21:59:48 修改", "blog_title": "有空就学学的实例分割1——Tensorflow2搭建Mask R-CNN实例分割平台", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night-eighties\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>有空就学学的实例分割1——Tensorflow2搭建Mask R-CNN实例分割平台</h3>\n<ul><li><a href=\"#_2\">学习前言</a></li><li><a href=\"#Mask_RCNN_5\">什么是Mask R-CNN</a></li><li><a href=\"#_9\">源码下载</a></li><li><a href=\"#Mask_RCNN_12\">Mask R-CNN实现思路</a></li><li><ul><li><a href=\"#_13\">一、预测部分</a></li><li><ul><li><a href=\"#1_14\">1、主干网络介绍</a></li><li><a href=\"#2FPN_130\">2、特征金字塔FPN的构建</a></li><li><a href=\"#3Proposal_197\">3、获得Proposal建议框</a></li><li><a href=\"#4Proposal_261\">4、Proposal建议框的解码</a></li><li><a href=\"#5ProposalRoi_Align_418\">5、对Proposal建议框加以利用（Roi Align）</a></li><li><a href=\"#6_668\">6、预测框的解码</a></li><li><a href=\"#7mask_842\">7、mask语义分割信息的获取</a></li></ul>\n</li><li><a href=\"#_846\">二、训练部分</a></li><li><ul><li><a href=\"#1_848\">1、建议框网络的训练</a></li><li><a href=\"#2Classiffier_993\">2、Classiffier模型的训练</a></li><li><a href=\"#3mask_1237\">3、mask模型的训练</a></li></ul>\n</li></ul>\n</li><li><a href=\"#MaskRCNN_1262\">训练自己的Mask-RCNN模型</a></li><li><ul><li><a href=\"#_1265\">一、数据集的准备</a></li><li><a href=\"#_1278\">二、数据集的处理</a></li><li><a href=\"#_1289\">三、开始训练网络</a></li><li><a href=\"#_1294\">四、模型预测</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>学习前言</h1>\n<p>把Mask RCNN用tensorflow2实现了一遍，至少要跟得上时代对不对。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20190723165901974.jpg\"/></p>\n<h1><a id=\"Mask_RCNN_5\"></a>什么是Mask R-CNN</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2020030311495449.png\"/><br/> Mask R-CNN是He Kaiming大神2017年的力作，其在进行目标检测的同时进行实例分割，取得了出色的效果。<br/> 其网络的设计也比较简单，在Faster R-CNN基础上，在原本的两个分支上（分类+坐标回归）增加了一个分支进行语义分割，</p>\n<h1><a id=\"_9\"></a>源码下载</h1>\n<p><a href=\"https://github.com/bubbliiiing/mask-rcnn-tf2\">https://github.com/bubbliiiing/mask-rcnn-tf2</a><br/> 喜欢的可以点个star噢。</p>\n<h1><a id=\"Mask_RCNN_12\"></a>Mask R-CNN实现思路</h1>\n<h2><a id=\"_13\"></a>一、预测部分</h2>\n<h3><a id=\"1_14\"></a>1、主干网络介绍</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2020030311495449.png\"/><br/> <strong>Mask-RCNN使用Resnet101作为主干特征提取网络，对应着图像中的CNN部分，其对输入进来的图片有尺寸要求，需要可以整除2的6次方。在进行特征提取后，利用长宽压缩了两次、三次、四次、五次的特征层来进行特征金字塔结构的构造。</strong></p>\n<p>ResNet101有两个基本的块，<strong>分别名为Conv Block和Identity Block，其中Conv Block输入和输出的维度是不一样的，所以不能连续串联，它的作用是改变网络的维度；Identity Block输入维度和输出维度相同，可以串联，用于加深网络的。</strong><br/> Conv Block的结构如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20191113094201415.png\" width=\"200\"/><br/> Identity Block的结构如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20191113094135752.png\" width=\"200\"/><br/> 这两个都是残差网络结构。</p>\n<p>以官方使用的coco数据集输入的shape为例，输入的shape为1024x1024，shape变化如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20200303121301424.png\" width=\"440\"/><br/> 我们取出长宽压缩了两次、三次、四次、五次的结果来进行特征金字塔结构的构造。</p>\n<p>实现代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> tensorflow<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>Activation<span class=\"token punctuation\">,</span> Add<span class=\"token punctuation\">,</span> BatchNormalization<span class=\"token punctuation\">,</span>\n                                     Conv2D<span class=\"token punctuation\">,</span> MaxPooling2D<span class=\"token punctuation\">,</span> ZeroPadding2D<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> tensorflow<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>regularizers <span class=\"token keyword\">import</span> l2\n\n\n<span class=\"token comment\">#----------------------------------------------#</span>\n<span class=\"token comment\">#   conv_block和identity_block的区别主要就是：</span>\n<span class=\"token comment\">#   conv_block会压缩输入进来的特征层的宽高</span>\n<span class=\"token comment\">#   identity_block用于加深网络</span>\n<span class=\"token comment\">#----------------------------------------------#</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">identity_block</span><span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">,</span> kernel_size<span class=\"token punctuation\">,</span> filters<span class=\"token punctuation\">,</span> stage<span class=\"token punctuation\">,</span> block<span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> train_bn<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    nb_filter1<span class=\"token punctuation\">,</span> nb_filter2<span class=\"token punctuation\">,</span> nb_filter3 <span class=\"token operator\">=</span> filters\n    conv_name_base <span class=\"token operator\">=</span> <span class=\"token string\">'res'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> block <span class=\"token operator\">+</span> <span class=\"token string\">'_branch'</span>\n    bn_name_base <span class=\"token operator\">=</span> <span class=\"token string\">'bn'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> block <span class=\"token operator\">+</span> <span class=\"token string\">'_branch'</span>\n\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>nb_filter1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2a'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span>use_bias<span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> training<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>nb_filter2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>kernel_size<span class=\"token punctuation\">,</span> kernel_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2b'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span>use_bias<span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> training<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>nb_filter3<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2c'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span>use_bias<span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> training<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> input_tensor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'res'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> block <span class=\"token operator\">+</span> <span class=\"token string\">'_out'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">conv_block</span><span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">,</span> kernel_size<span class=\"token punctuation\">,</span> filters<span class=\"token punctuation\">,</span> stage<span class=\"token punctuation\">,</span> block<span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> train_bn<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    nb_filter1<span class=\"token punctuation\">,</span> nb_filter2<span class=\"token punctuation\">,</span> nb_filter3 <span class=\"token operator\">=</span> filters\n    conv_name_base <span class=\"token operator\">=</span> <span class=\"token string\">'res'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> block <span class=\"token operator\">+</span> <span class=\"token string\">'_branch'</span>\n    bn_name_base <span class=\"token operator\">=</span> <span class=\"token string\">'bn'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> block <span class=\"token operator\">+</span> <span class=\"token string\">'_branch'</span>\n\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>nb_filter1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>strides<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2a'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span>use_bias<span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> training<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>nb_filter2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>kernel_size<span class=\"token punctuation\">,</span> kernel_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2b'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span>use_bias<span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> training<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>nb_filter3<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2c'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span>use_bias<span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> training<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n\n    shortcut <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>nb_filter3<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>strides<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span>use_bias<span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">)</span>\n    shortcut <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>shortcut<span class=\"token punctuation\">,</span> training<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> shortcut<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'res'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> block <span class=\"token operator\">+</span> <span class=\"token string\">'_out'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x\n\n<span class=\"token comment\">#----------------------------------------------#</span>\n<span class=\"token comment\">#   获得resnet的主干部分</span>\n<span class=\"token comment\">#----------------------------------------------#</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_resnet</span><span class=\"token punctuation\">(</span>input_image<span class=\"token punctuation\">,</span> train_bn<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#----------------------------------------------#</span>\n    <span class=\"token comment\">#   假设输入进来的图片为1024,1024,3</span>\n    <span class=\"token comment\">#----------------------------------------------#</span>\n\n    <span class=\"token comment\"># 1024,1024,3 -&gt; 512,512,64</span>\n    x <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_image<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv1'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'bn_conv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> training<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 512,512,64 -&gt; 256,256,64</span>\n    x <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">\"same\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    C1 <span class=\"token operator\">=</span> x\n\n    <span class=\"token comment\"># 256,256,64 -&gt; 256,256,256</span>\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span>weight_decay<span class=\"token punctuation\">,</span> train_bn<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span>weight_decay<span class=\"token punctuation\">,</span> train_bn<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span>weight_decay<span class=\"token punctuation\">,</span> train_bn<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    C2 <span class=\"token operator\">=</span> x\n\n    <span class=\"token comment\"># 256,256,256 -&gt; 128,128,512</span>\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span>weight_decay<span class=\"token punctuation\">,</span> train_bn<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span>weight_decay<span class=\"token punctuation\">,</span> train_bn<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span>weight_decay<span class=\"token punctuation\">,</span> train_bn<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span>weight_decay<span class=\"token punctuation\">,</span> train_bn<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    C3 <span class=\"token operator\">=</span> x\n    \n    <span class=\"token comment\"># 128,128,512 -&gt; 64,64,1024</span>\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span>weight_decay<span class=\"token punctuation\">,</span> train_bn<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    block_count <span class=\"token operator\">=</span> <span class=\"token number\">22</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>block_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">98</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span>weight_decay<span class=\"token punctuation\">,</span> train_bn<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    C4 <span class=\"token operator\">=</span> x\n    \n    <span class=\"token comment\"># 64,64,1024 -&gt; 32,32,2048</span>\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span>weight_decay<span class=\"token punctuation\">,</span> train_bn<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span>weight_decay<span class=\"token punctuation\">,</span> train_bn<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span>weight_decay<span class=\"token punctuation\">,</span> train_bn<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    C5 <span class=\"token operator\">=</span> x \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>C1<span class=\"token punctuation\">,</span> C2<span class=\"token punctuation\">,</span> C3<span class=\"token punctuation\">,</span> C4<span class=\"token punctuation\">,</span> C5<span class=\"token punctuation\">]</span>\n</code></pre>\n<h3><a id=\"2FPN_130\"></a>2、特征金字塔FPN的构建</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20200303122039643.png\" width=\"300\"/><br/> 特征金字塔FPN的构建是为了实现特征多尺度的融合，在Mask R-CNN当中，我们取出在主干特征提取网络中长宽压缩了两次C2、三次C3、四次C4、五次C5的结果来进行特征金字塔结构的构造。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20200305145908257.png\"/><br/> <strong>提取到的P2、P3、P4、P5、P6可以作为RPN网络的有效特征层，利用RPN建议框网络对有效特征层进行下一步的操作，对先验框进行解码获得建议框。</strong></p>\n<p><strong>提取到的P2、P3、P4、P5可以作为Classifier和Mask网络的有效特征层，利用Classifier预测框网络对有效特征层进行下一步的操作，对建议框解码获得最终预测框；利用Mask语义分割网络对有效特征层进行下一步的操作，获得每一个预测框内部的语义分割结果。</strong></p>\n<p>实现代码如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#----------------------------------------------#</span>\n<span class=\"token comment\">#   组合成特征金字塔的结构</span>\n<span class=\"token comment\">#   P5长宽共压缩了5次</span>\n<span class=\"token comment\">#   P5为32,32,256</span>\n<span class=\"token comment\">#----------------------------------------------#</span>\nP5 <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>TOP_DOWN_PYRAMID_SIZE<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'fpn_c5p5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>C5<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#----------------------------------------------#</span>\n<span class=\"token comment\">#   将P5上采样和P4进行相加</span>\n<span class=\"token comment\">#   P4长宽共压缩了4次</span>\n<span class=\"token comment\">#   P4为64,64,256</span>\n<span class=\"token comment\">#----------------------------------------------#</span>\nP4 <span class=\"token operator\">=</span> Add<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"fpn_p4add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    UpSampling2D<span class=\"token punctuation\">(</span>size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"fpn_p5upsampled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>P5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Conv2D<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>TOP_DOWN_PYRAMID_SIZE<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'fpn_c4p4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>C4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#----------------------------------------------#</span>\n<span class=\"token comment\">#   将P4上采样和P3进行相加</span>\n<span class=\"token comment\">#   P3长宽共压缩了3次</span>\n<span class=\"token comment\">#   P3为128,128,256</span>\n<span class=\"token comment\">#----------------------------------------------#</span>\nP3 <span class=\"token operator\">=</span> Add<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"fpn_p3add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    UpSampling2D<span class=\"token punctuation\">(</span>size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"fpn_p4upsampled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>P4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Conv2D<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>TOP_DOWN_PYRAMID_SIZE<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'fpn_c3p3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>C3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#----------------------------------------------#</span>\n<span class=\"token comment\">#   将P3上采样和P2进行相加</span>\n<span class=\"token comment\">#   P2长宽共压缩了2次</span>\n<span class=\"token comment\">#   P2为256,256,256</span>\n<span class=\"token comment\">#----------------------------------------------#</span>\nP2 <span class=\"token operator\">=</span> Add<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"fpn_p2add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    UpSampling2D<span class=\"token punctuation\">(</span>size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"fpn_p3upsampled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>P3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Conv2D<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>TOP_DOWN_PYRAMID_SIZE<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'fpn_c2p2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>C2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token comment\">#-----------------------------------------------------------#</span>\n<span class=\"token comment\">#   各自进行一次256通道的卷积，此时P2、P3、P4、P5通道数相同</span>\n<span class=\"token comment\">#   P2为256,256,256</span>\n<span class=\"token comment\">#   P3为128,128,256</span>\n<span class=\"token comment\">#   P4为64,64,256</span>\n<span class=\"token comment\">#   P5为32,32,256</span>\n<span class=\"token comment\">#-----------------------------------------------------------#</span>\nP2 <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>TOP_DOWN_PYRAMID_SIZE<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">\"SAME\"</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"fpn_p2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>P2<span class=\"token punctuation\">)</span>\nP3 <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>TOP_DOWN_PYRAMID_SIZE<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">\"SAME\"</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"fpn_p3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>P3<span class=\"token punctuation\">)</span>\nP4 <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>TOP_DOWN_PYRAMID_SIZE<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">\"SAME\"</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"fpn_p4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>P4<span class=\"token punctuation\">)</span>\nP5 <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>TOP_DOWN_PYRAMID_SIZE<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">\"SAME\"</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"fpn_p5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>P5<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#----------------------------------------------#</span>\n<span class=\"token comment\">#   在建议框网络里面还有一个P6用于获取建议框</span>\n<span class=\"token comment\">#   P5为16,16,256</span>\n<span class=\"token comment\">#----------------------------------------------#</span>\nP6 <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span>pool_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"fpn_p6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>P5<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#----------------------------------------------#</span>\n<span class=\"token comment\">#   P2, P3, P4, P5, P6可以用于获取建议框</span>\n<span class=\"token comment\">#----------------------------------------------#</span>\nrpn_feature_maps    <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>P2<span class=\"token punctuation\">,</span> P3<span class=\"token punctuation\">,</span> P4<span class=\"token punctuation\">,</span> P5<span class=\"token punctuation\">,</span> P6<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#----------------------------------------------#</span>\n<span class=\"token comment\">#   P2, P3, P4, P5用于获取mask信息</span>\n<span class=\"token comment\">#----------------------------------------------#</span>\nmrcnn_feature_maps  <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>P2<span class=\"token punctuation\">,</span> P3<span class=\"token punctuation\">,</span> P4<span class=\"token punctuation\">,</span> P5<span class=\"token punctuation\">]</span>\n</code></pre>\n<h3><a id=\"3Proposal_197\"></a>3、获得Proposal建议框</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2020030311495449.png\"/><br/> 由上一步获得的有效特征层在图像中就是Feature Map，其有两个应用，一个是和ROIAsign结合使用、另一个是进入到Region Proposal Network进行建议框的获取。</p>\n<p>在进行建议框获取的时候，我们使用的有效特征层是P2、P3、P4、P5、P6，它们使用同一个RPN建议框网络获取<strong>先验框调整参数</strong>，还有<strong>先验框内部是否包含物体。</strong></p>\n<p>在Mask R-cnn中，RPN建议框网络的结构和Faster RCNN中的RPN建议框网络类似。</p>\n<p>首先进行一次3x3的通道数为512的卷积。</p>\n<p>然后再分别进行一次<strong>anchors_per_location x 4的卷积</strong> 和一次<strong>anchors_per_location x 2的卷积</strong>。</p>\n<p><strong>anchors_per_location x 4的卷积</strong> 用于预测 <strong>公用特征层上</strong> <strong>每一个网格点上 每一个先验框</strong>的变化情况。<strong>（为什么说是变化情况呢，这是因为Faster-RCNN的预测结果需要结合先验框获得预测框，预测结果就是先验框的变化情况。）</strong></p>\n<p><strong>anchors_per_location x 2的卷积</strong> 用于预测 <strong>公用特征层上</strong> <strong>每一个网格点上</strong> <strong>每一个预测框</strong>内部是否包含了物体。</p>\n<p>当我们输入的图片的shape是1024x1024x3的时候，公用特征层的shape就是256x256x256、128x128x256、64x64x256、32x32x256、16x16x256，相当于把输入进来的图像分割成不同大小的网格，然后每个网格默认存在3（anchors_per_location ）个先验框，这些先验框有不同的大小，在图像上密密麻麻。</p>\n<p><strong>anchors_per_location x 4的卷积</strong>的结果会对这些先验框进行调整，获得一个新的框。<br/> <strong>anchors_per_location x 2的卷积</strong>会判断上述获得的新框是否包含物体。</p>\n<p>到这里我们可以获得了一些有用的框，这些框会利用<strong>anchors_per_location x 2的卷积</strong>判断是否存在物体。</p>\n<p>到此位置还只是粗略的一个框的获取，也就是一个<strong>建议框</strong>。然后我们会在建议框里面继续<strong>找东西。</strong></p>\n<p>实现代码为：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#------------------------------------#</span>\n<span class=\"token comment\">#   五个不同大小的特征层会传入到</span>\n<span class=\"token comment\">#   RPN当中，获得建议框</span>\n<span class=\"token comment\">#------------------------------------#</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">rpn_graph</span><span class=\"token punctuation\">(</span>feature_map<span class=\"token punctuation\">,</span> anchors_per_location<span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#------------------------------------#</span>\n    <span class=\"token comment\">#   利用一个3x3卷积进行特征整合</span>\n    <span class=\"token comment\">#------------------------------------#</span>\n    shared <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span>\n                       name<span class=\"token operator\">=</span><span class=\"token string\">'rpn_conv_shared'</span><span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>feature_map<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">#------------------------------------#</span>\n    <span class=\"token comment\">#   batch_size, num_anchors, 2</span>\n    <span class=\"token comment\">#   代表这个先验框是否包含物体</span>\n    <span class=\"token comment\">#------------------------------------#</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>anchors_per_location <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'linear'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'rpn_class_raw'</span><span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>shared<span class=\"token punctuation\">)</span>\n    rpn_class_logits <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    rpn_probs <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">\"softmax\"</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"rpn_class_xxx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>rpn_class_logits<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">#------------------------------------#</span>\n    <span class=\"token comment\">#   batch_size, num_anchors, 4</span>\n    <span class=\"token comment\">#   这个先验框的调整参数</span>\n    <span class=\"token comment\">#------------------------------------#</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>anchors_per_location <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">\"valid\"</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'linear'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'rpn_bbox_pred'</span><span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>shared<span class=\"token punctuation\">)</span>\n    rpn_bbox <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>rpn_class_logits<span class=\"token punctuation\">,</span> rpn_probs<span class=\"token punctuation\">,</span> rpn_bbox<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">#------------------------------------#</span>\n<span class=\"token comment\">#   建立建议框网络模型</span>\n<span class=\"token comment\">#   RPN模型</span>\n<span class=\"token comment\">#------------------------------------#</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">build_rpn_model</span><span class=\"token punctuation\">(</span>anchors_per_location<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    input_feature_map <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"input_rpn_feature_map\"</span><span class=\"token punctuation\">)</span>\n    outputs <span class=\"token operator\">=</span> rpn_graph<span class=\"token punctuation\">(</span>input_feature_map<span class=\"token punctuation\">,</span> anchors_per_location<span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span>weight_decay<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>input_feature_map<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"rpn_model\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"4Proposal_261\"></a>4、Proposal建议框的解码</h3>\n<p>通过第二步我们获得了许多个先验框的预测结果。预测结果包含两部分。</p>\n<p><strong>anchors_per_location x 4的卷积</strong> 用于预测 <strong>有效特征层上</strong> <strong>每一个网格点上 每一个先验框</strong>的变化情况。**</p>\n<p><strong>anchors_per_location x 1的卷积</strong> 用于预测 <strong>有效特征层上</strong> <strong>每一个网格点上</strong> <strong>每一个预测框</strong>内部是否包含了物体。</p>\n<p>相当于就是将整个图像分成若干个网格；然后从每个网格中心建立3个先验框，当输入的图像是1024,1024,3的时候，总共先验框数量为196608+49152+12288+3072+768 = 261,888‬</p>\n<p><strong>当输入图像shape不同时，先验框的数量也会发生改变。</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20200129210050147.png\"/><br/> 先验框虽然可以代表一定的<strong>框的位置信息与框的大小信息</strong>，但是其是有限的，无法表示任意情况，因此还需要调整。</p>\n<p><strong>anchors_per_location x 4中的anchors_per_location 表示了这个网格点所包含的先验框数量，其中的4表示了框的中心与长宽的调整情况。</strong></p>\n<p>实现代码如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#------------------------------------------------------------------#</span>\n<span class=\"token comment\">#   利用先验框调整参数调整先验框，获得建议框的坐标</span>\n<span class=\"token comment\">#------------------------------------------------------------------#</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">apply_box_deltas_graph</span><span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">,</span> deltas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#---------------------------------------#</span>\n    <span class=\"token comment\">#   计算先验框的中心和宽高</span>\n    <span class=\"token comment\">#---------------------------------------#</span>\n    height <span class=\"token operator\">=</span> boxes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> boxes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    width <span class=\"token operator\">=</span> boxes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> boxes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    center_y <span class=\"token operator\">=</span> boxes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> height\n    center_x <span class=\"token operator\">=</span> boxes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> width\n    <span class=\"token comment\">#---------------------------------------#</span>\n    <span class=\"token comment\">#   计算出调整后的先验框的中心和宽高</span>\n    <span class=\"token comment\">#---------------------------------------#</span>\n    center_y <span class=\"token operator\">+=</span> deltas<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> height\n    center_x <span class=\"token operator\">+=</span> deltas<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> width\n    height <span class=\"token operator\">*=</span> tf<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span>deltas<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    width <span class=\"token operator\">*=</span> tf<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span>deltas<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#---------------------------------------#</span>\n    <span class=\"token comment\">#   计算左上角和右下角的点的坐标</span>\n    <span class=\"token comment\">#---------------------------------------#</span>\n    y1 <span class=\"token operator\">=</span> center_y <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> height\n    x1 <span class=\"token operator\">=</span> center_x <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> width\n    y2 <span class=\"token operator\">=</span> y1 <span class=\"token operator\">+</span> height\n    x2 <span class=\"token operator\">=</span> x1 <span class=\"token operator\">+</span> width\n    result <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>y1<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"apply_box_deltas_out\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">clip_boxes_graph</span><span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    wy1<span class=\"token punctuation\">,</span> wx1<span class=\"token punctuation\">,</span> wy2<span class=\"token punctuation\">,</span> wx2 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    y1<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">,</span> x2 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    \n    y1 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">(</span>y1<span class=\"token punctuation\">,</span> wy2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> wy1<span class=\"token punctuation\">)</span>\n    x1 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span> wx2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> wx1<span class=\"token punctuation\">)</span>\n    y2 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">(</span>y2<span class=\"token punctuation\">,</span> wy2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> wy1<span class=\"token punctuation\">)</span>\n    x2 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">(</span>x2<span class=\"token punctuation\">,</span> wx2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> wx1<span class=\"token punctuation\">)</span>\n    clipped <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>y1<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"clipped_boxes\"</span><span class=\"token punctuation\">)</span>\n    clipped<span class=\"token punctuation\">.</span>set_shape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>clipped<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> clipped\n\n<span class=\"token comment\">#----------------------------------------------------------#</span>\n<span class=\"token comment\">#   Proposal Layer</span>\n<span class=\"token comment\">#   该部分代码用于将先验框转化成建议框</span>\n<span class=\"token comment\">#----------------------------------------------------------#</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProposalLayer</span><span class=\"token punctuation\">(</span>Layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> proposal_count<span class=\"token punctuation\">,</span> nms_threshold<span class=\"token punctuation\">,</span> config<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>ProposalLayer<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>config <span class=\"token operator\">=</span> config\n        self<span class=\"token punctuation\">.</span>proposal_count <span class=\"token operator\">=</span> proposal_count\n        self<span class=\"token punctuation\">.</span>nms_threshold <span class=\"token operator\">=</span> nms_threshold\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\">#   输入的inputs有三个内容</span>\n        <span class=\"token comment\">#   inputs[0]   rpn_class   : Batch_size, num_anchors, 2</span>\n        <span class=\"token comment\">#   inputs[1]   rpn_bbox    : Batch_size, num_anchors, 4</span>\n        <span class=\"token comment\">#   inputs[2]   anchors     : Batch_size, num_anchors, 4</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\">#   获得先验框内部是否有物体[Batch_size, num_anchors, 1]</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        scores <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\">#   获得先验框的调整参数[batch, num_rois, 4]</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        deltas <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\">#   获得先验框的坐标</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        anchors <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\">#   RPN_BBOX_STD_DEV[0.1 0.1 0.2 0.2] 改变数量级</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        deltas <span class=\"token operator\">=</span> deltas <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>RPN_BBOX_STD_DEV<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\">#   筛选出得分前6000个的框</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        pre_nms_limit <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>PRE_NMS_LIMIT<span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>anchors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\">#   获得这些框的索引</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        ix <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>top_k<span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">,</span> pre_nms_limit<span class=\"token punctuation\">,</span> <span class=\"token builtin\">sorted</span><span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                         name<span class=\"token operator\">=</span><span class=\"token string\">\"top_anchors\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>indices\n        \n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\">#   获得先验框、及其得分与调整参数</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        scores <span class=\"token operator\">=</span> batch_slice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>scores<span class=\"token punctuation\">,</span> ix<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                   self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>IMAGES_PER_GPU<span class=\"token punctuation\">)</span>\n        deltas <span class=\"token operator\">=</span> batch_slice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>deltas<span class=\"token punctuation\">,</span> ix<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                   self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>IMAGES_PER_GPU<span class=\"token punctuation\">)</span>\n        pre_nms_anchors <span class=\"token operator\">=</span> batch_slice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>anchors<span class=\"token punctuation\">,</span> ix<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                    self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>IMAGES_PER_GPU<span class=\"token punctuation\">,</span>\n                                    names<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"pre_nms_anchors\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\">#   [batch, pre_nms_limit, (y1, x1, y2, x2)]</span>\n        <span class=\"token comment\">#   对先验框进行解码</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        boxes <span class=\"token operator\">=</span> batch_slice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pre_nms_anchors<span class=\"token punctuation\">,</span> deltas<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                  <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> apply_box_deltas_graph<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                  self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>IMAGES_PER_GPU<span class=\"token punctuation\">,</span>\n                                  names<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"refined_anchors\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\">#   [batch, pre_nms_limit, (y1, x1, y2, x2)]</span>\n        <span class=\"token comment\">#   防止超出图片范围</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        window <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span>\n        boxes <span class=\"token operator\">=</span> batch_slice<span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">,</span>\n                                  <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> clip_boxes_graph<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                  self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>IMAGES_PER_GPU<span class=\"token punctuation\">,</span>\n                                  names<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"refined_anchors_clipped\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#---------------------------------------------------------#</span>\n        <span class=\"token comment\">#   在非极大抑制后</span>\n        <span class=\"token comment\">#   获得一个shape为[batch, NMS_ROIS, 4]的proposals</span>\n        <span class=\"token comment\">#---------------------------------------------------------#</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">nms</span><span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">,</span> scores<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            indices <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">.</span>non_max_suppression<span class=\"token punctuation\">(</span>\n                boxes<span class=\"token punctuation\">,</span> scores<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>proposal_count<span class=\"token punctuation\">,</span>\n                self<span class=\"token punctuation\">.</span>nms_threshold<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"rpn_non_max_suppression\"</span><span class=\"token punctuation\">)</span>\n            proposals <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">,</span> indices<span class=\"token punctuation\">)</span>\n            padding <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>proposal_count <span class=\"token operator\">-</span> tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>proposals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            proposals <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>pad<span class=\"token punctuation\">(</span>proposals<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> padding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> proposals\n        proposals <span class=\"token operator\">=</span> batch_slice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>boxes<span class=\"token punctuation\">,</span> scores<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nms<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>IMAGES_PER_GPU<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> tf<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>proposals<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>proposal_count<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">compute_output_shape</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>proposal_count<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"5ProposalRoi_Align_418\"></a>5、对Proposal建议框加以利用（Roi Align）</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2020030311495449.png\"/><br/> 让我们对建议框有一个整体的理解：<br/> <strong>事实上建议框就是对图片哪一个区域有物体存在进行初步筛选。</strong></p>\n<p>实际上，Mask R-CNN到这里的操作是，通过主干特征提取网络，我们可以获得多个公用特征层，然后建议框会对这些公用特征层进行截取。</p>\n<p><strong>其实公用特征层里的每一个点相当于原图片上某个区域内部所有特征的浓缩。</strong></p>\n<p>建议框会对其对应的公用特征层进行截取，然后将截取的结果进行resize，在classifier模型里，截取后的内容会resize到7x7x256的大小。在mask模型里，截取后的内容会resize到14x14x256的大小。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\20200303174410363.png\" width=\"400\"/><br/> 在利用建议框对公用特征层进行截取的时候要注意，<strong>要找到建议框属于那个特征层，这个要从建议框的大小进行判断。</strong></p>\n<p>在classifier模型里，<strong>其会利用一次通道数为1024的7x7的卷积和一次通道数为1024的1x1的卷积对ROIAlign获得的7x7x256的区域进行卷积</strong>，两次通道数为1024卷积用于模拟两次1024的全连接，然后再分别全连接到num_classes和num_classes * 4上，分别代表这个建议框内的物体，以及这个建议框的调整参数。</p>\n<p>在mask模型里，其首先会对resize后的局部特征层进行四次3x3的256通道的卷积，再进行一次反卷积，再进行一次通道数为num_classes的卷积，最终结果代表每一个像素点分的类。最终的shape为28x28xnum_classes，代表每个像素点的类别。</p>\n<p>建议框对共享特征层截取的代码如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">log2_graph</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> tf<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> tf<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">parse_image_meta_graph</span><span class=\"token punctuation\">(</span>meta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    将meta里面的参数进行分割\n    \"\"\"</span>\n    image_id <span class=\"token operator\">=</span> meta<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    original_image_shape <span class=\"token operator\">=</span> meta<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n    image_shape <span class=\"token operator\">=</span> meta<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n    window <span class=\"token operator\">=</span> meta<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># (y1, x1, y2, x2) window of image in in pixels</span>\n    scale <span class=\"token operator\">=</span> meta<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span>\n    active_class_ids <span class=\"token operator\">=</span> meta<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string\">\"image_id\"</span><span class=\"token punctuation\">:</span> image_id<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"original_image_shape\"</span><span class=\"token punctuation\">:</span> original_image_shape<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"image_shape\"</span><span class=\"token punctuation\">:</span> image_shape<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"window\"</span><span class=\"token punctuation\">:</span> window<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"scale\"</span><span class=\"token punctuation\">:</span> scale<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"active_class_ids\"</span><span class=\"token punctuation\">:</span> active_class_ids<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">#----------------------------------------------------------#</span>\n<span class=\"token comment\">#   ROIAlign Layer</span>\n<span class=\"token comment\">#   利用建议框在特征层上截取内容</span>\n<span class=\"token comment\">#----------------------------------------------------------#</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PyramidROIAlign</span><span class=\"token punctuation\">(</span>Layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> pool_shape<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>PyramidROIAlign<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>pool_shape <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>pool_shape<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\">#   获得建议框的坐标</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        boxes <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\">#   image_meta包含了一些必要的图片信息</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        image_meta <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\">#   取出所有的特征层[batch, height, width, channels]</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        feature_maps <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\">#   获得建议框的宽高</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        y1<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">,</span> x2 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        h <span class=\"token operator\">=</span> y2 <span class=\"token operator\">-</span> y1\n        w <span class=\"token operator\">=</span> x2 <span class=\"token operator\">-</span> x1\n\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\">#   获得输入进来的图像的大小</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        image_shape <span class=\"token operator\">=</span> parse_image_meta_graph<span class=\"token punctuation\">(</span>image_meta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'image_shape'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        \n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\">#   通过建议框的大小找到这个建议框属于哪个特征层</span>\n        <span class=\"token comment\">#----------------------------------------------------------#</span>\n        image_area <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>image_shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> image_shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span>\n        roi_level <span class=\"token operator\">=</span> log2_graph<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>h <span class=\"token operator\">*</span> w<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">224.0</span> <span class=\"token operator\">/</span> tf<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>image_area<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        roi_level <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> tf<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>roi_level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>int32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        roi_level <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span>roi_level<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        pooled <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        box_to_level <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># 分别在P2-P5中进行截取</span>\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> level <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">#-----------------------------------------------#</span>\n            <span class=\"token comment\">#   找到每个特征层对应的建议框</span>\n            <span class=\"token comment\">#-----------------------------------------------#</span>\n            ix <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>equal<span class=\"token punctuation\">(</span>roi_level<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            level_boxes <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather_nd<span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">,</span> ix<span class=\"token punctuation\">)</span>\n            box_to_level<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ix<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\">#-----------------------------------------------#</span>\n            <span class=\"token comment\">#    获得这些建议框所属的图片</span>\n            <span class=\"token comment\">#-----------------------------------------------#</span>\n            box_indices <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>ix<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>int32<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># 停止梯度下降</span>\n            level_boxes <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>stop_gradient<span class=\"token punctuation\">(</span>level_boxes<span class=\"token punctuation\">)</span>\n            box_indices <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>stop_gradient<span class=\"token punctuation\">(</span>box_indices<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\">#--------------------------------------------------------------------------#</span>\n            <span class=\"token comment\">#   利用建议框对特征层进行截取  </span>\n            <span class=\"token comment\">#   [batch * num_boxes, pool_height, pool_width, channels]</span>\n            <span class=\"token comment\">#--------------------------------------------------------------------------#</span>\n            pooled<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">.</span>crop_and_resize<span class=\"token punctuation\">(</span>\n                feature_maps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> level_boxes<span class=\"token punctuation\">,</span> box_indices<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>pool_shape<span class=\"token punctuation\">,</span>\n                method<span class=\"token operator\">=</span><span class=\"token string\">\"bilinear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        pooled <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span>pooled<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#--------------------------------------------------------------------------#</span>\n        <span class=\"token comment\">#   将顺序和所属的图片进行堆叠</span>\n        <span class=\"token comment\">#--------------------------------------------------------------------------#</span>\n        box_to_level <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span>box_to_level<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        box_range <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>box_to_level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        box_to_level <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>tf<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>box_to_level<span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>int32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> box_range<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># box_to_level[:, 0]表示第几张图</span>\n        <span class=\"token comment\"># box_to_level[:, 1]表示第几张图里的第几个框</span>\n        sorting_tensor <span class=\"token operator\">=</span> box_to_level<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">100000</span> <span class=\"token operator\">+</span> box_to_level<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># 进行排序，将同一张图里的某一些聚集在一起</span>\n        ix <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>top_k<span class=\"token punctuation\">(</span>sorting_tensor<span class=\"token punctuation\">,</span> k<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>\n            box_to_level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># 按顺序获得图片的索引</span>\n        ix <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>box_to_level<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ix<span class=\"token punctuation\">)</span>\n        pooled <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>pooled<span class=\"token punctuation\">,</span> ix<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#--------------------------------------------------------------------------#</span>\n        <span class=\"token comment\">#   重新reshape为如下</span>\n        <span class=\"token comment\">#   [batch, num_rois, POOL_SIZE, POOL_SIZE, channels]</span>\n        <span class=\"token comment\">#--------------------------------------------------------------------------#</span>\n        shape <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>pooled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        pooled <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>pooled<span class=\"token punctuation\">,</span> shape<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> pooled\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">compute_output_shape</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>pool_shape <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span>\n</code></pre>\n<p>classifier分类模型和mask掩码模型的构建diamagnetic如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#------------------------------------#</span>\n<span class=\"token comment\">#   建立classifier模型</span>\n<span class=\"token comment\">#   这个模型的预测结果会调整建议框</span>\n<span class=\"token comment\">#   获得最终的预测框</span>\n<span class=\"token comment\">#------------------------------------#</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fpn_classifier_graph</span><span class=\"token punctuation\">(</span>rois<span class=\"token punctuation\">,</span> feature_maps<span class=\"token punctuation\">,</span> image_meta<span class=\"token punctuation\">,</span>\n                         pool_size<span class=\"token punctuation\">,</span> num_classes<span class=\"token punctuation\">,</span> train_bn<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                         fc_layers_size<span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#---------------------------------------------------------------#</span>\n    <span class=\"token comment\">#   ROI Pooling，利用建议框在特征层上进行截取</span>\n    <span class=\"token comment\">#   x   : [batch, num_rois, POOL_SIZE, POOL_SIZE, channels]</span>\n    <span class=\"token comment\">#---------------------------------------------------------------#</span>\n    x <span class=\"token operator\">=</span> PyramidROIAlign<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pool_size<span class=\"token punctuation\">,</span> pool_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"roi_align_classifier\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>rois<span class=\"token punctuation\">,</span> image_meta<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> feature_maps<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#------------------------------------------------------------------#</span>\n    <span class=\"token comment\">#   利用卷积进行特征整合</span>\n    <span class=\"token comment\">#   x   : [batch, num_rois, 1, 1, fc_layers_size]</span>\n    <span class=\"token comment\">#------------------------------------------------------------------#</span>\n    x <span class=\"token operator\">=</span> TimeDistributed<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span>fc_layers_size<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>pool_size<span class=\"token punctuation\">,</span> pool_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">\"valid\"</span><span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  name<span class=\"token operator\">=</span><span class=\"token string\">\"mrcnn_class_conv1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> TimeDistributed<span class=\"token punctuation\">(</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mrcnn_class_bn1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> training<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#------------------------------------------------------------------#</span>\n    <span class=\"token comment\">#   x   : [batch, num_rois, 1, 1, fc_layers_size]</span>\n    <span class=\"token comment\">#------------------------------------------------------------------#</span>\n    x <span class=\"token operator\">=</span> TimeDistributed<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span>fc_layers_size<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"mrcnn_class_conv2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> TimeDistributed<span class=\"token punctuation\">(</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mrcnn_class_bn2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> training<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#------------------------------------------------------------------#</span>\n    <span class=\"token comment\">#   x   : [batch, num_rois, fc_layers_size]</span>\n    <span class=\"token comment\">#------------------------------------------------------------------#</span>\n    shared <span class=\"token operator\">=</span> Lambda<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> K<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  name<span class=\"token operator\">=</span><span class=\"token string\">\"pool_squeeze\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#------------------------------------------------------------------#</span>\n    <span class=\"token comment\">#   Classifier head</span>\n    <span class=\"token comment\">#   这个的预测结果代表这个先验框内部的物体的种类</span>\n    <span class=\"token comment\">#   mrcnn_probs   : [batch, num_rois, num_classes]</span>\n    <span class=\"token comment\">#------------------------------------------------------------------#</span>\n    mrcnn_class_logits <span class=\"token operator\">=</span> TimeDistributed<span class=\"token punctuation\">(</span>Dense<span class=\"token punctuation\">(</span>num_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mrcnn_class_logits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>shared<span class=\"token punctuation\">)</span>\n    mrcnn_probs <span class=\"token operator\">=</span> TimeDistributed<span class=\"token punctuation\">(</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">\"softmax\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"mrcnn_class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>mrcnn_class_logits<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#------------------------------------------------------------------#</span>\n    <span class=\"token comment\">#   BBox head</span>\n    <span class=\"token comment\">#   这个的预测结果会对先验框进行调整</span>\n    <span class=\"token comment\">#   mrcnn_bbox : [batch, num_rois, num_classes, 4]</span>\n    <span class=\"token comment\">#------------------------------------------------------------------#</span>\n    x <span class=\"token operator\">=</span> TimeDistributed<span class=\"token punctuation\">(</span>Dense<span class=\"token punctuation\">(</span>num_classes <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'linear'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mrcnn_bbox_fc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>shared<span class=\"token punctuation\">)</span>\n    mrcnn_bbox <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num_classes<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"mrcnn_bbox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> mrcnn_class_logits<span class=\"token punctuation\">,</span> mrcnn_probs<span class=\"token punctuation\">,</span> mrcnn_bbox\n\n\n<span class=\"token comment\">#----------------------------------------------#</span>\n<span class=\"token comment\">#   建立mask模型</span>\n<span class=\"token comment\">#   这个模型会利用预测框对特征层进行ROIAlign</span>\n<span class=\"token comment\">#   根据截取下来的特征层进行语义分割</span>\n<span class=\"token comment\">#----------------------------------------------#</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">build_fpn_mask_graph</span><span class=\"token punctuation\">(</span>rois<span class=\"token punctuation\">,</span> feature_maps<span class=\"token punctuation\">,</span> image_meta<span class=\"token punctuation\">,</span>\n                         pool_size<span class=\"token punctuation\">,</span> num_classes<span class=\"token punctuation\">,</span> train_bn<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> weight_decay<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#--------------------------------------------------------------------#</span>\n    <span class=\"token comment\">#   ROI Pooling，利用预测框在特征层上进行截取</span>\n    <span class=\"token comment\">#   x   : batch, num_rois, MASK_POOL_SIZE, MASK_POOL_SIZE, channels</span>\n    <span class=\"token comment\">#--------------------------------------------------------------------#</span>\n    x <span class=\"token operator\">=</span> PyramidROIAlign<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pool_size<span class=\"token punctuation\">,</span> pool_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"roi_align_mask\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>rois<span class=\"token punctuation\">,</span> image_meta<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> feature_maps<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#--------------------------------------------------------------------#</span>\n    <span class=\"token comment\">#   x   : batch, num_rois, MASK_POOL_SIZE, MASK_POOL_SIZE, 256</span>\n    <span class=\"token comment\">#--------------------------------------------------------------------#</span>\n    x <span class=\"token operator\">=</span> TimeDistributed<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">\"same\"</span><span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"mrcnn_mask_conv1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> TimeDistributed<span class=\"token punctuation\">(</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mrcnn_mask_bn1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> training<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#--------------------------------------------------------------------#</span>\n    <span class=\"token comment\">#   x   : batch, num_rois, MASK_POOL_SIZE, MASK_POOL_SIZE, 256</span>\n    <span class=\"token comment\">#--------------------------------------------------------------------#</span>\n    x <span class=\"token operator\">=</span> TimeDistributed<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">\"same\"</span><span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"mrcnn_mask_conv2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> TimeDistributed<span class=\"token punctuation\">(</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mrcnn_mask_bn2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> training<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#--------------------------------------------------------------------#</span>\n    <span class=\"token comment\">#   x   : batch, num_rois, MASK_POOL_SIZE, MASK_POOL_SIZE, 256</span>\n    <span class=\"token comment\">#--------------------------------------------------------------------#</span>\n    x <span class=\"token operator\">=</span> TimeDistributed<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">\"same\"</span><span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"mrcnn_mask_conv3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> TimeDistributed<span class=\"token punctuation\">(</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mrcnn_mask_bn3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> training<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#--------------------------------------------------------------------#</span>\n    <span class=\"token comment\">#   x   : batch, num_rois, MASK_POOL_SIZE, MASK_POOL_SIZE, 256</span>\n    <span class=\"token comment\">#--------------------------------------------------------------------#</span>\n    x <span class=\"token operator\">=</span> TimeDistributed<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">\"same\"</span><span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"mrcnn_mask_conv4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> TimeDistributed<span class=\"token punctuation\">(</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mrcnn_mask_bn4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> training<span class=\"token operator\">=</span>train_bn<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#--------------------------------------------------------------------#</span>\n    <span class=\"token comment\">#   x   : batch, num_rois, 2xMASK_POOL_SIZE, 2xMASK_POOL_SIZE, 256</span>\n    <span class=\"token comment\">#--------------------------------------------------------------------#</span>\n    x <span class=\"token operator\">=</span> TimeDistributed<span class=\"token punctuation\">(</span>Conv2DTranspose<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">\"relu\"</span><span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"mrcnn_mask_deconv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#--------------------------------------------------------------------#</span>\n    <span class=\"token comment\">#   反卷积后再次进行一个1x1卷积调整通道，</span>\n    <span class=\"token comment\">#   使其最终数量为numclasses，代表分的类</span>\n    <span class=\"token comment\">#   x   : batch, num_rois, 2xMASK_POOL_SIZE, 2xMASK_POOL_SIZE, numclasses</span>\n    <span class=\"token comment\">#--------------------------------------------------------------------#</span>\n    x <span class=\"token operator\">=</span> TimeDistributed<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span>num_classes<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">\"sigmoid\"</span><span class=\"token punctuation\">,</span> kernel_regularizer<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">(</span>weight_decay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"mrcnn_mask\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x\n</code></pre>\n<h3><a id=\"6_668\"></a>6、预测框的解码</h3>\n<p>在第四部分获得的建议框也代表了图片上的某一些区域，它在后面的在classifier模型里也起到了先验框的作用。</p>\n<p><strong>也就是classifier模型的预测结果，代表了建议框内部物体的种类和调整参数。</strong></p>\n<p>建议框调整后的结果，也就是最终的预测结果，这个预测结果就可以在图片上进行绘制了。</p>\n<p>预测框的解码过程包括了如下几个步骤：<br/> <strong>1、取出不属于背景，并且得分大于config.DETECTION_MIN_CONFIDENCE的建议框。<br/> 2、然后利用建议框和classifier模型的预测结果进行解码，获得最终预测框的位置。<br/> 3、利用得分和最终预测框的位置进行非极大抑制，防止重复检测。</strong></p>\n<p>建议框解码过程的代码如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#----------------------------------------------------------#</span>\n<span class=\"token comment\">#   利用classifier的预测结果对建议框进行调整获得预测框</span>\n<span class=\"token comment\">#   获得每一个预测框的种类</span>\n<span class=\"token comment\">#----------------------------------------------------------#</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">refine_detections_graph</span><span class=\"token punctuation\">(</span>rois<span class=\"token punctuation\">,</span> probs<span class=\"token punctuation\">,</span> deltas<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   输入为：</span>\n    <span class=\"token comment\">#   rois        : N, 4</span>\n    <span class=\"token comment\">#   probs       : N, num_classes</span>\n    <span class=\"token comment\">#   deltas      : N, num_classes, 4</span>\n    <span class=\"token comment\">#   window      : 4,</span>\n    <span class=\"token comment\">#</span>\n    <span class=\"token comment\">#   输出为：</span>\n    <span class=\"token comment\">#   detections  : num_detections, 6</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   找到得分最高的类</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    class_ids <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>probs<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> output_type<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>int32<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   序号+类，用于取出成绩与建议框的调整参数</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    indices <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>tf<span class=\"token punctuation\">.</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>probs<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> class_ids<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   取出成绩与建议框的调整参数</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    class_scores <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather_nd<span class=\"token punctuation\">(</span>probs<span class=\"token punctuation\">,</span> indices<span class=\"token punctuation\">)</span>\n    deltas_specific <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather_nd<span class=\"token punctuation\">(</span>deltas<span class=\"token punctuation\">,</span> indices<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   进行解码</span>\n    <span class=\"token comment\">#   refined_rois    : boxes, 4</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    refined_rois <span class=\"token operator\">=</span> apply_box_deltas_graph<span class=\"token punctuation\">(</span>rois<span class=\"token punctuation\">,</span> deltas_specific <span class=\"token operator\">*</span> config<span class=\"token punctuation\">.</span>BBOX_STD_DEV<span class=\"token punctuation\">)</span>\n    refined_rois <span class=\"token operator\">=</span> clip_boxes_graph<span class=\"token punctuation\">(</span>refined_rois<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   去除背景和得分小的区域</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    keep <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>class_ids <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>DETECTION_MIN_CONFIDENCE<span class=\"token punctuation\">:</span>\n        conf_keep <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>class_scores <span class=\"token operator\">&gt;=</span> config<span class=\"token punctuation\">.</span>DETECTION_MIN_CONFIDENCE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        keep <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>compat<span class=\"token punctuation\">.</span>v1<span class=\"token punctuation\">.</span>sets<span class=\"token punctuation\">.</span>set_intersection<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>keep<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                        tf<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>conf_keep<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        keep <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>compat<span class=\"token punctuation\">.</span>v1<span class=\"token punctuation\">.</span>sparse_tensor_to_dense<span class=\"token punctuation\">(</span>keep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   获得除去背景并且得分较高的框还有种类与得分</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    pre_nms_class_ids <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>class_ids<span class=\"token punctuation\">,</span> keep<span class=\"token punctuation\">)</span>\n    pre_nms_scores <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>class_scores<span class=\"token punctuation\">,</span> keep<span class=\"token punctuation\">)</span>\n    pre_nms_rois <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>refined_rois<span class=\"token punctuation\">,</span>   keep<span class=\"token punctuation\">)</span>\n    unique_pre_nms_class_ids <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>unique<span class=\"token punctuation\">(</span>pre_nms_class_ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">nms_keep_map</span><span class=\"token punctuation\">(</span>class_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        ixs <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>equal<span class=\"token punctuation\">(</span>pre_nms_class_ids<span class=\"token punctuation\">,</span> class_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n        class_keep <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">.</span>non_max_suppression<span class=\"token punctuation\">(</span>\n                tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>pre_nms_rois<span class=\"token punctuation\">,</span> ixs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>pre_nms_scores<span class=\"token punctuation\">,</span> ixs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                max_output_size<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>DETECTION_MAX_INSTANCES<span class=\"token punctuation\">,</span>\n                iou_threshold<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>DETECTION_NMS_THRESHOLD<span class=\"token punctuation\">)</span>\n\n        class_keep <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>keep<span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>ixs<span class=\"token punctuation\">,</span> class_keep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        gap <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>DETECTION_MAX_INSTANCES <span class=\"token operator\">-</span> tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>class_keep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        class_keep <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>pad<span class=\"token punctuation\">(</span>class_keep<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> gap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                            mode<span class=\"token operator\">=</span><span class=\"token string\">'CONSTANT'</span><span class=\"token punctuation\">,</span> constant_values<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        class_keep<span class=\"token punctuation\">.</span>set_shape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>config<span class=\"token punctuation\">.</span>DETECTION_MAX_INSTANCES<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> class_keep\n    <span class=\"token comment\">#------------------------------------------------------------#</span>\n    <span class=\"token comment\">#   对获取到的满足得分门限且不属于背景的预测框进行非极大抑制</span>\n    <span class=\"token comment\">#------------------------------------------------------------#</span>\n    nms_keep <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>map_fn<span class=\"token punctuation\">(</span>nms_keep_map<span class=\"token punctuation\">,</span> unique_pre_nms_class_ids<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>int64<span class=\"token punctuation\">)</span>\n    nms_keep <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>nms_keep<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    nms_keep <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>nms_keep<span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>nms_keep <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    keep <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>compat<span class=\"token punctuation\">.</span>v1<span class=\"token punctuation\">.</span>sets<span class=\"token punctuation\">.</span>set_intersection<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>keep<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>nms_keep<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    keep <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>compat<span class=\"token punctuation\">.</span>v1<span class=\"token punctuation\">.</span>sparse_tensor_to_dense<span class=\"token punctuation\">(</span>keep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\">#------------------------------------------------------------#</span>\n    <span class=\"token comment\">#   寻找得分最高的num_keep个框</span>\n    <span class=\"token comment\">#------------------------------------------------------------#</span>\n    roi_count <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>DETECTION_MAX_INSTANCES\n    class_scores_keep <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>class_scores<span class=\"token punctuation\">,</span> keep<span class=\"token punctuation\">)</span>\n    num_keep <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>class_scores_keep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> roi_count<span class=\"token punctuation\">)</span>\n    top_ids <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>top_k<span class=\"token punctuation\">(</span>class_scores_keep<span class=\"token punctuation\">,</span> k<span class=\"token operator\">=</span>num_keep<span class=\"token punctuation\">,</span> <span class=\"token builtin\">sorted</span><span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    keep <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>keep<span class=\"token punctuation\">,</span> top_ids<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#------------------------------------------------------------#</span>\n    <span class=\"token comment\">#   将预测结果进行堆叠，获得的最终shape为[N,6]</span>\n    <span class=\"token comment\">#   即：N, (y1, x1, y2, x2, class_id, score)</span>\n    <span class=\"token comment\">#------------------------------------------------------------#</span>\n    detections <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>refined_rois<span class=\"token punctuation\">,</span> keep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        tf<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>class_ids<span class=\"token punctuation\">,</span> keep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>class_scores<span class=\"token punctuation\">,</span> keep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#------------------------------------------------------------#</span>\n    <span class=\"token comment\">#   如果达不到数量的话就padding</span>\n    <span class=\"token comment\">#------------------------------------------------------------#</span>\n    gap <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>DETECTION_MAX_INSTANCES <span class=\"token operator\">-</span> tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>detections<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    detections <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>pad<span class=\"token punctuation\">(</span>detections<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> gap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CONSTANT\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> detections\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">norm_boxes_graph</span><span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">,</span> shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    h<span class=\"token punctuation\">,</span> w <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    scale <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> tf<span class=\"token punctuation\">.</span>constant<span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span>\n    shift <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>constant<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> tf<span class=\"token punctuation\">.</span>divide<span class=\"token punctuation\">(</span>boxes <span class=\"token operator\">-</span> shift<span class=\"token punctuation\">,</span> scale<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#----------------------------------------------------------#</span>\n<span class=\"token comment\">#   Detection Layer</span>\n<span class=\"token comment\">#   利用classifier的预测结果对建议框进行调整获得预测框</span>\n<span class=\"token comment\">#----------------------------------------------------------#</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DetectionLayer</span><span class=\"token punctuation\">(</span>Layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> config<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>DetectionLayer<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>config <span class=\"token operator\">=</span> config\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#------------------------------------------------------------------#</span>\n        <span class=\"token comment\">#   获得的inputs</span>\n        <span class=\"token comment\">#   rpn_rois            : Batch_size, proposal_count, 4</span>\n        <span class=\"token comment\">#   mrcnn_class         : Batch_size, num_rois, num_classes</span>\n        <span class=\"token comment\">#   mrcnn_bbox          : Batch_size, num_rois, num_classes, </span>\n        <span class=\"token comment\">#------------------------------------------------------------------#</span>\n        rois <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        mrcnn_class <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        mrcnn_bbox <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        image_meta <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\">#------------------------------------------------------------------#</span>\n        <span class=\"token comment\">#   找到window的小数形式</span>\n        <span class=\"token comment\">#------------------------------------------------------------------#</span>\n        m <span class=\"token operator\">=</span> parse_image_meta_graph<span class=\"token punctuation\">(</span>image_meta<span class=\"token punctuation\">)</span>\n        image_shape <span class=\"token operator\">=</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">'image_shape'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        window <span class=\"token operator\">=</span> norm_boxes_graph<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token string\">'window'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> image_shape<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#------------------------------------------------------------------#</span>\n        <span class=\"token comment\">#   对每一张图的结果进行解码</span>\n        <span class=\"token comment\">#------------------------------------------------------------------#</span>\n        detections_batch <span class=\"token operator\">=</span> batch_slice<span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">[</span>rois<span class=\"token punctuation\">,</span> mrcnn_class<span class=\"token punctuation\">,</span> mrcnn_bbox<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> refine_detections_graph<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>IMAGES_PER_GPU<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#------------------------------------------------------------#</span>\n        <span class=\"token comment\">#   最终输出的shape为</span>\n        <span class=\"token comment\">#   Batch_size, num_detections, 6] </span>\n        <span class=\"token comment\">#------------------------------------------------------------#</span>\n        <span class=\"token keyword\">return</span> tf<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>\n            detections_batch<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>BATCH_SIZE<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>DETECTION_MAX_INSTANCES<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">compute_output_shape</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>DETECTION_MAX_INSTANCES<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"7mask_842\"></a>7、mask语义分割信息的获取</h3>\n<p>在第六步中，我们获得了最终的预测框，这个预测框相比于之前获得的建议框更加准确，因此<strong>我们把这个预测框作为mask模型的区域截取部分</strong>，利用<strong>这个预测框对mask模型中用到的公用特征层进行截取。</strong></p>\n<p>截取后，利用mask模型再对像素点进行分类，获得语义分割结果。</p>\n<h2><a id=\"_846\"></a>二、训练部分</h2>\n<p>Faster-RCNN训练所用的损失函数由几个部分组成，一部分是建议框网络的损失函数，一部分是classifier网络的损失函数，另一部分是mask网络的损失函数。</p>\n<h3><a id=\"1_848\"></a>1、建议框网络的训练</h3>\n<p>公用特征层如果要获得<strong>建议框的预测结果，需要再进行一次3x3的卷积后，进行一个anchors_per_location x 1通道的1x1卷积，还有一个anchors_per_location x 4通道的1x1卷积。</strong></p>\n<p>在Mask R-CNN中，anchors_per_location 也就是先验框的数量默认情况下是3，所以两个1x1卷积的结果实际上也就是：</p>\n<p><strong>anchors_per_location x 4的卷积</strong> 用于预测 <strong>有效特征层上</strong> <strong>每一个网格点上 每一个先验框</strong>的变化情况。**</p>\n<p><strong>anchors_per_location x 1的卷积</strong> 用于预测 <strong>有效特征层上</strong> <strong>每一个网格点上</strong> <strong>每一个建议框</strong>内部是否包含了物体。</p>\n<p>也就是说，<strong>我们直接利用Mask R-CNN建议框网络预测到的结果，并不是建议框在图片上的真实位置，需要解码才能得到真实位置。</strong></p>\n<p>而在训练的时候，<strong>我们需要计算loss函数，这个loss函数是相对于Mask R-CNN建议框网络的预测结果的</strong>。我们需要把图片输入<strong>到当前的Mask R-CNN建议框的网络中，得到建议框的结果；同时还需要进行编码</strong>，这个编码是把<strong>真实框的位置信息格式转化为Mask R-CNN建议框预测结果的格式信息</strong>。</p>\n<p>也就是，我们需要找到 <strong>每一张用于训练的图片</strong>的<strong>每一个真实框对应的先验框</strong>，并求出<strong>如果想要得到这样一个真实框，我们的建议框预测结果应该是怎么样的。</strong></p>\n<p><strong>从建议框预测结果获得真实框的过程被称作解码，而从真实框获得建议框预测结果的过程就是编码的过程。</strong></p>\n<p>因此我们只需要将<strong>解码过程逆过来就是编码过程了。</strong></p>\n<p>实现代码如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">build_rpn_targets</span><span class=\"token punctuation\">(</span>image_shape<span class=\"token punctuation\">,</span> anchors<span class=\"token punctuation\">,</span> gt_class_ids<span class=\"token punctuation\">,</span> gt_boxes<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#------------------------------#</span>\n    <span class=\"token comment\">#   rpn_match中</span>\n    <span class=\"token comment\">#   1代表正样本、-1代表负样本</span>\n    <span class=\"token comment\">#   0代表忽略</span>\n    <span class=\"token comment\">#------------------------------#</span>\n    rpn_match <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>anchors<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>int32<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    <span class=\"token comment\">#   创建该部分内容利用先验框和真实框进行编码</span>\n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    rpn_bbox <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>RPN_TRAIN_ANCHORS_PER_IMAGE<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token triple-quoted-string string\">'''\n    iscrowd=0的时候，表示这是一个单独的物体，轮廓用Polygon(多边形的点)表示，\n    iscrowd=1的时候表示两个没有分开的物体，轮廓用RLE编码表示，比如说一张图片里面有三个人，\n    一个人单独站一边，另外两个搂在一起（标注的时候距离太近分不开了），这个时候，\n    单独的那个人的注释里面的iscrowing=0,segmentation用Polygon表示，\n    而另外两个用放在同一个anatation的数组里面用一个segmention的RLE编码形式表示\n    '''</span>\n    crowd_ix <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>gt_class_ids <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> crowd_ix<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        non_crowd_ix    <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>gt_class_ids <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        crowd_boxes     <span class=\"token operator\">=</span> gt_boxes<span class=\"token punctuation\">[</span>crowd_ix<span class=\"token punctuation\">]</span>\n        gt_class_ids    <span class=\"token operator\">=</span> gt_class_ids<span class=\"token punctuation\">[</span>non_crowd_ix<span class=\"token punctuation\">]</span>\n        gt_boxes        <span class=\"token operator\">=</span> gt_boxes<span class=\"token punctuation\">[</span>non_crowd_ix<span class=\"token punctuation\">]</span>\n        crowd_overlaps  <span class=\"token operator\">=</span> compute_overlaps<span class=\"token punctuation\">(</span>anchors<span class=\"token punctuation\">,</span> crowd_boxes<span class=\"token punctuation\">)</span>\n        crowd_iou_max   <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>amax<span class=\"token punctuation\">(</span>crowd_overlaps<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        no_crowd_bool   <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>crowd_iou_max <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        no_crowd_bool   <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>anchors<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    <span class=\"token comment\">#   计算先验框和真实框的重合程度 </span>\n    <span class=\"token comment\">#   [num_anchors, num_gt_boxes]</span>\n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    overlaps <span class=\"token operator\">=</span> compute_overlaps<span class=\"token punctuation\">(</span>anchors<span class=\"token punctuation\">,</span> gt_boxes<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    <span class=\"token comment\">#   1. 重合程度小于0.3则代表为负样本</span>\n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    anchor_iou_argmax <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>overlaps<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    anchor_iou_max <span class=\"token operator\">=</span> overlaps<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>overlaps<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> anchor_iou_argmax<span class=\"token punctuation\">]</span>\n    rpn_match<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>anchor_iou_max <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>no_crowd_bool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    <span class=\"token comment\">#   2. 每个真实框重合度最大的先验框是正样本</span>\n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    gt_iou_argmax <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argwhere<span class=\"token punctuation\">(</span>overlaps <span class=\"token operator\">==</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>overlaps<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    rpn_match<span class=\"token punctuation\">[</span>gt_iou_argmax<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    <span class=\"token comment\">#   3. 重合度大于0.7则代表为正样本</span>\n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    rpn_match<span class=\"token punctuation\">[</span>anchor_iou_max <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    <span class=\"token comment\">#   正负样本平衡</span>\n    <span class=\"token comment\">#   找到正样本的索引</span>\n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    ids <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>rpn_match <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    <span class=\"token comment\">#   如果大于(config.RPN_TRAIN_ANCHORS_PER_IMAGE // 2)则删掉一些</span>\n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    extra <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>RPN_TRAIN_ANCHORS_PER_IMAGE <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> extra <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        ids <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">,</span> extra<span class=\"token punctuation\">,</span> replace<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        rpn_match<span class=\"token punctuation\">[</span>ids<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        \n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    <span class=\"token comment\">#   找到负样本的索引</span>\n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    ids <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>rpn_match <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    <span class=\"token comment\">#   使得总数为config.RPN_TRAIN_ANCHORS_PER_IMAGE</span>\n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    extra <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>RPN_TRAIN_ANCHORS_PER_IMAGE <span class=\"token operator\">-</span>\n                        np<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>rpn_match <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> extra <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Rest the extra ones to neutral</span>\n        ids <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">,</span> extra<span class=\"token punctuation\">,</span> replace<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        rpn_match<span class=\"token punctuation\">[</span>ids<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    <span class=\"token comment\">#   找到内部真实存在物体的先验框，进行编码</span>\n    <span class=\"token comment\">#-----------------------------------------------#</span>\n    ids <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>rpn_match <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    ix <span class=\"token operator\">=</span> <span class=\"token number\">0</span> \n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> a <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">,</span> anchors<span class=\"token punctuation\">[</span>ids<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gt <span class=\"token operator\">=</span> gt_boxes<span class=\"token punctuation\">[</span>anchor_iou_argmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\">#-----------------------------------------------#</span>\n        <span class=\"token comment\">#   计算真实框的中心，高宽</span>\n        <span class=\"token comment\">#-----------------------------------------------#</span>\n        gt_h <span class=\"token operator\">=</span> gt<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> gt<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        gt_w <span class=\"token operator\">=</span> gt<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> gt<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        gt_center_y <span class=\"token operator\">=</span> gt<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> gt_h\n        gt_center_x <span class=\"token operator\">=</span> gt<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> gt_w\n        <span class=\"token comment\">#-----------------------------------------------#</span>\n        <span class=\"token comment\">#   计算先验框中心，高宽</span>\n        <span class=\"token comment\">#-----------------------------------------------#</span>\n        a_h <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        a_w <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        a_center_y <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> a_h\n        a_center_x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> a_w\n        <span class=\"token comment\">#-----------------------------------------------#</span>\n        <span class=\"token comment\">#   编码运算</span>\n        <span class=\"token comment\">#-----------------------------------------------#</span>\n        rpn_bbox<span class=\"token punctuation\">[</span>ix<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">(</span>gt_center_y <span class=\"token operator\">-</span> a_center_y<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> np<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span>a_h<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">(</span>gt_center_x <span class=\"token operator\">-</span> a_center_x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> np<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span>a_w<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            np<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span>gt_h <span class=\"token operator\">/</span> np<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span>a_h<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1e-5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            np<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span>gt_w <span class=\"token operator\">/</span> np<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span>a_w<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1e-5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n        <span class=\"token comment\">#-----------------------------------------------#</span>\n        <span class=\"token comment\">#   改变数量级</span>\n        <span class=\"token comment\">#-----------------------------------------------#</span>\n        rpn_bbox<span class=\"token punctuation\">[</span>ix<span class=\"token punctuation\">]</span> <span class=\"token operator\">/=</span> config<span class=\"token punctuation\">.</span>RPN_BBOX_STD_DEV\n        ix <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> rpn_match<span class=\"token punctuation\">,</span> rpn_bbox\n</code></pre>\n<p>利用上述代码我们可以获得，<strong>真实框对应的所有的iou较大先验框</strong>，并计算了<strong>真实框对应的所有iou较大的先验框应该有的预测结果。</strong></p>\n<p><strong>Mask R-CNN会忽略一些重合度相对较高但是不是非常高的先验框，一般将重合度在0.3-0.7之间的先验框进行忽略。</strong></p>\n<p>利用建议框网络应该有的预测结果和实际上的预测结果进行对比就可以获得建议框网络的loss。</p>\n<h3><a id=\"2Classiffier_993\"></a>2、Classiffier模型的训练</h3>\n<p>上一部分提供了RPN网络的loss，在Mask R-CNN的模型中，我们还需要对建议框进行调整获得最终的预测框。在classiffier模型中，建议框相当于是先验框。</p>\n<p>因此，我们需要计算所有<strong>建议框和真实框的重合程度</strong>，并<strong>进行筛选</strong>，如果某个真实框和建议框的重合程度<strong>大于0.5则认为该建议框为正样本，如果重合程度小于0.5则认为该建议框为负样本</strong></p>\n<p>因此我们可以对真实框进行编码，这个编码是相对于建议框的，也就是，当我们存在这些建议框的时候，我们的Classiffier模型需要有什么样的预测结果才能将这些建议框调整成真实框。</p>\n<p>实现代码如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#----------------------------------------------------------#</span>\n<span class=\"token comment\">#   Detection Target Layer</span>\n<span class=\"token comment\">#   该部分代码会输入建议框</span>\n<span class=\"token comment\">#   判断建议框和真实框的重合情况</span>\n<span class=\"token comment\">#   筛选出内部包含物体的建议框</span>\n<span class=\"token comment\">#   利用建议框和真实框编码</span>\n<span class=\"token comment\">#   调整mask的格式使得其和预测格式相同</span>\n<span class=\"token comment\">#----------------------------------------------------------#</span>\n<span class=\"token comment\">#----------------------------------------------------------#</span>\n<span class=\"token comment\">#   对输入进来的真实框进行编码</span>\n<span class=\"token comment\">#----------------------------------------------------------#</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">box_refinement_graph</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> gt_box<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    box <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span>\n    gt_box <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>gt_box<span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span>\n\n    height <span class=\"token operator\">=</span> box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    width <span class=\"token operator\">=</span> box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    center_y <span class=\"token operator\">=</span> box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> height\n    center_x <span class=\"token operator\">=</span> box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> width\n\n    gt_height <span class=\"token operator\">=</span> gt_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> gt_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    gt_width <span class=\"token operator\">=</span> gt_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> gt_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    gt_center_y <span class=\"token operator\">=</span> gt_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> gt_height\n    gt_center_x <span class=\"token operator\">=</span> gt_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> gt_width\n\n    dy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>gt_center_y <span class=\"token operator\">-</span> center_y<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> height\n    dx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>gt_center_x <span class=\"token operator\">-</span> center_x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> width\n    dh <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>gt_height <span class=\"token operator\">/</span> height<span class=\"token punctuation\">)</span>\n    dw <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>gt_width <span class=\"token operator\">/</span> width<span class=\"token punctuation\">)</span>\n\n    result <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>dy<span class=\"token punctuation\">,</span> dx<span class=\"token punctuation\">,</span> dh<span class=\"token punctuation\">,</span> dw<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n\n<span class=\"token comment\">#----------------------------------------------------------#</span>\n<span class=\"token comment\">#   Detection Target Layer</span>\n<span class=\"token comment\">#   该部分代码会输入建议框</span>\n<span class=\"token comment\">#   判断建议框和真实框的重合情况</span>\n<span class=\"token comment\">#   筛选出内部包含物体的建议框</span>\n<span class=\"token comment\">#   利用建议框和真实框编码</span>\n<span class=\"token comment\">#   调整mask的格式使得其和预测格式相同</span>\n<span class=\"token comment\">#----------------------------------------------------------#</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">detection_targets_graph</span><span class=\"token punctuation\">(</span>proposals<span class=\"token punctuation\">,</span> gt_class_ids<span class=\"token punctuation\">,</span> gt_boxes<span class=\"token punctuation\">,</span> gt_masks<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    asserts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        tf<span class=\"token punctuation\">.</span>Assert<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>greater<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>proposals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>proposals<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                  name<span class=\"token operator\">=</span><span class=\"token string\">\"roi_assertion\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">with</span> tf<span class=\"token punctuation\">.</span>control_dependencies<span class=\"token punctuation\">(</span>asserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        proposals <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">(</span>proposals<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   为了满足数据长度，在先前使用了padding部分</span>\n    <span class=\"token comment\">#   在这里需要去掉</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    proposals<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> trim_zeros_graph<span class=\"token punctuation\">(</span>proposals<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"trim_proposals\"</span><span class=\"token punctuation\">)</span>\n    gt_boxes<span class=\"token punctuation\">,</span> non_zeros <span class=\"token operator\">=</span> trim_zeros_graph<span class=\"token punctuation\">(</span>gt_boxes<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"trim_gt_boxes\"</span><span class=\"token punctuation\">)</span>\n    gt_class_ids <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>boolean_mask<span class=\"token punctuation\">(</span>gt_class_ids<span class=\"token punctuation\">,</span> non_zeros<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"trim_gt_class_ids\"</span><span class=\"token punctuation\">)</span>\n    gt_masks <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>gt_masks<span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>non_zeros<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"trim_gt_masks\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   忽略掉coco数据集中的crowd部分，这些部分不易区分</span>\n    <span class=\"token comment\">#   训练时直接忽略</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    crowd_ix <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>gt_class_ids <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    non_crowd_ix <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>gt_class_ids <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    crowd_boxes <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>gt_boxes<span class=\"token punctuation\">,</span> crowd_ix<span class=\"token punctuation\">)</span>\n    gt_class_ids <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>gt_class_ids<span class=\"token punctuation\">,</span> non_crowd_ix<span class=\"token punctuation\">)</span>\n    gt_boxes <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>gt_boxes<span class=\"token punctuation\">,</span> non_crowd_ix<span class=\"token punctuation\">)</span>\n    gt_masks <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>gt_masks<span class=\"token punctuation\">,</span> non_crowd_ix<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   计算建议框和所有真实框的重合程度 </span>\n    <span class=\"token comment\">#   overlaps    : proposals, gt_boxes</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    overlaps <span class=\"token operator\">=</span> overlaps_graph<span class=\"token punctuation\">(</span>proposals<span class=\"token punctuation\">,</span> gt_boxes<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   计算建议框和crowd boxes的重合程度 </span>\n    <span class=\"token comment\">#   overlaps    : proposals, crowd_boxes</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    crowd_overlaps <span class=\"token operator\">=</span> overlaps_graph<span class=\"token punctuation\">(</span>proposals<span class=\"token punctuation\">,</span> crowd_boxes<span class=\"token punctuation\">)</span>\n    crowd_iou_max <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_max<span class=\"token punctuation\">(</span>crowd_overlaps<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    no_crowd_bool <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>crowd_iou_max <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   每个建议框与真实框的最大重合程度</span>\n    <span class=\"token comment\">#   roi_iou_max    : proposals, </span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    roi_iou_max <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_max<span class=\"token punctuation\">(</span>overlaps<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   1. 正样本建议框和真实框的重合程度大于0.5</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    positive_roi_bool <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>roi_iou_max <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n    positive_indices <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>positive_roi_bool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   2. 负样本建议框和真实框的重合程度小于0.5</span>\n    <span class=\"token comment\">#   那些和crowd重合度比较大的建议框忽略掉</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    negative_indices <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>logical_and<span class=\"token punctuation\">(</span>roi_iou_max <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> no_crowd_bool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   进行正负样本的平衡，取出最大33%的正样本</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    positive_count <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>TRAIN_ROIS_PER_IMAGE <span class=\"token operator\">*</span> config<span class=\"token punctuation\">.</span>ROI_POSITIVE_RATIO<span class=\"token punctuation\">)</span>\n    positive_indices <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>positive_indices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>positive_count<span class=\"token punctuation\">]</span>\n    positive_count <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>positive_indices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   保持正负样本比例</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    r <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> config<span class=\"token punctuation\">.</span>ROI_POSITIVE_RATIO\n    negative_count <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span> tf<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>positive_count<span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>int32<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> positive_count\n    negative_indices <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>negative_indices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>negative_count<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   获得正样本和负样本</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    positive_rois <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>proposals<span class=\"token punctuation\">,</span> positive_indices<span class=\"token punctuation\">)</span>\n    negative_rois <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>proposals<span class=\"token punctuation\">,</span> negative_indices<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   获取建议框和真实框重合程度</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    positive_overlaps <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>overlaps<span class=\"token punctuation\">,</span> positive_indices<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   判断是否有真实框</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    roi_gt_box_assignment <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>cond<span class=\"token punctuation\">(</span>\n        tf<span class=\"token punctuation\">.</span>greater<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>positive_overlaps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        true_fn <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> tf<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>positive_overlaps<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        false_fn <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> tf<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>constant<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>tf<span class=\"token punctuation\">.</span>int64<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   找到每一个建议框对应的真实框和种类</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    roi_gt_boxes <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>gt_boxes<span class=\"token punctuation\">,</span> roi_gt_box_assignment<span class=\"token punctuation\">)</span>\n    roi_gt_class_ids <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>gt_class_ids<span class=\"token punctuation\">,</span> roi_gt_box_assignment<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   编码获得网络应该有得预测结果</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    deltas <span class=\"token operator\">=</span> box_refinement_graph<span class=\"token punctuation\">(</span>positive_rois<span class=\"token punctuation\">,</span> roi_gt_boxes<span class=\"token punctuation\">)</span>\n    deltas <span class=\"token operator\">/=</span> config<span class=\"token punctuation\">.</span>BBOX_STD_DEV\n\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   切换mask的形式[N, height, width, 1]</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    transposed_masks <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>gt_masks<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   取出每一个建议框对应的mask层</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    roi_masks <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>transposed_masks<span class=\"token punctuation\">,</span> roi_gt_box_assignment<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   利用建议框在mask上进行截取，作为训练用的mask</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    boxes <span class=\"token operator\">=</span> positive_rois\n    <span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>USE_MINI_MASK<span class=\"token punctuation\">:</span>\n        y1<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">,</span> x2 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>positive_rois<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        gt_y1<span class=\"token punctuation\">,</span> gt_x1<span class=\"token punctuation\">,</span> gt_y2<span class=\"token punctuation\">,</span> gt_x2 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>roi_gt_boxes<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        gt_h <span class=\"token operator\">=</span> gt_y2 <span class=\"token operator\">-</span> gt_y1\n        gt_w <span class=\"token operator\">=</span> gt_x2 <span class=\"token operator\">-</span> gt_x1\n        y1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">-</span> gt_y1<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> gt_h\n        x1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">-</span> gt_x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> gt_w\n        y2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y2 <span class=\"token operator\">-</span> gt_y1<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> gt_h\n        x2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x2 <span class=\"token operator\">-</span> gt_x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> gt_w\n        boxes <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>y1<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    box_ids <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>roi_masks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    masks <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">.</span>crop_and_resize<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>roi_masks<span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> boxes<span class=\"token punctuation\">,</span>\n                                     box_ids<span class=\"token punctuation\">,</span>\n                                     config<span class=\"token punctuation\">.</span>MASK_SHAPE<span class=\"token punctuation\">)</span>\n\n    masks <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span>masks<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    masks <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>masks<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    <span class=\"token comment\">#   一般传入config.TRAIN_ROIS_PER_IMAGE个建议框进行训练，</span>\n    <span class=\"token comment\">#   如果数量不够则padding</span>\n    <span class=\"token comment\">#----------------------------------------------------------#</span>\n    rois <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>positive_rois<span class=\"token punctuation\">,</span> negative_rois<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    N <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>negative_rois<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    P <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>TRAIN_ROIS_PER_IMAGE <span class=\"token operator\">-</span> tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>rois<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    rois <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>pad<span class=\"token punctuation\">(</span>rois<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    roi_gt_boxes <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>pad<span class=\"token punctuation\">(</span>roi_gt_boxes<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> N <span class=\"token operator\">+</span> P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    roi_gt_class_ids <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>pad<span class=\"token punctuation\">(</span>roi_gt_class_ids<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> N <span class=\"token operator\">+</span> P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    deltas <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>pad<span class=\"token punctuation\">(</span>deltas<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> N <span class=\"token operator\">+</span> P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    masks <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>pad<span class=\"token punctuation\">(</span>masks<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> N <span class=\"token operator\">+</span> P<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> rois<span class=\"token punctuation\">,</span> roi_gt_class_ids<span class=\"token punctuation\">,</span> deltas<span class=\"token punctuation\">,</span> masks\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DetectionTargetLayer</span><span class=\"token punctuation\">(</span>Layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    找到建议框的ground_truth\n    Inputs:\n    proposals       : [batch, N, (y1, x1, y2, x2)]                                          建议框\n    gt_class_ids    : [batch, MAX_GT_INSTANCES]                                             每个真实框对应的类\n    gt_boxes        : [batch, MAX_GT_INSTANCES, (y1, x1, y2, x2)]                           真实框的位置\n    gt_masks        : [batch, MINI_MASK_SHAPE[0], MINI_MASK_SHAPE[1], MAX_GT_INSTANCES]     真实框的语义分割情况\n\n    Returns: \n    rois            : [batch, TRAIN_ROIS_PER_IMAGE, (y1, x1, y2, x2)]                       内部真实存在目标的建议框\n    target_class_ids: [batch, TRAIN_ROIS_PER_IMAGE]                                         每个建议框对应的类\n    target_deltas   : [batch, TRAIN_ROIS_PER_IMAGE, (dy, dx, log(dh), log(dw)]              每个建议框应该有的调整参数\n    target_mask     : [batch, TRAIN_ROIS_PER_IMAGE, height, width]                          每个建议框语义分割情况\n    \"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>DetectionTargetLayer<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>config <span class=\"token operator\">=</span> config\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        proposals <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        gt_class_ids <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        gt_boxes <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        gt_masks <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># 对真实框进行编码</span>\n        names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"rois\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"target_class_ids\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"target_bbox\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"target_mask\"</span><span class=\"token punctuation\">]</span>\n        outputs <span class=\"token operator\">=</span> batch_slice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>proposals<span class=\"token punctuation\">,</span> gt_class_ids<span class=\"token punctuation\">,</span> gt_boxes<span class=\"token punctuation\">,</span> gt_masks<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">lambda</span> w<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> detection_targets_graph<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>IMAGES_PER_GPU<span class=\"token punctuation\">,</span> names<span class=\"token operator\">=</span>names<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> outputs\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">compute_output_shape</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>TRAIN_ROIS_PER_IMAGE<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># rois</span>\n            <span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>TRAIN_ROIS_PER_IMAGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># class_ids</span>\n            <span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>TRAIN_ROIS_PER_IMAGE<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># deltas</span>\n            <span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>TRAIN_ROIS_PER_IMAGE<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>MASK_SHAPE<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             self<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>MASK_SHAPE<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># masks</span>\n        <span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">compute_mask</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> mask<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h3><a id=\"3mask_1237\"></a>3、mask模型的训练</h3>\n<p>mask模型在训练的时候要注意，<strong>当我们利用建议框网络在mask模型需要用到的公用特征层进行截取的时候，截取的情况和真实框截下来的不一样，因此还需要算出来我们用于截取的框相对于真实框的位置，获得正确的语义分割信息。</strong></p>\n<p>使用代码如下，<strong>中间一大部分用于计算真实框相对于建议框的位置</strong>。计算完成后利用这个相对位置可以对语义分割信息进行截取，获得正确的语义信息</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># Compute mask targets</span>\nboxes <span class=\"token operator\">=</span> positive_rois\n<span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>USE_MINI_MASK<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Transform ROI coordinates from normalized image space</span>\n    <span class=\"token comment\"># to normalized mini-mask space.</span>\n    y1<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">,</span> x2 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>positive_rois<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    gt_y1<span class=\"token punctuation\">,</span> gt_x1<span class=\"token punctuation\">,</span> gt_y2<span class=\"token punctuation\">,</span> gt_x2 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>roi_gt_boxes<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    gt_h <span class=\"token operator\">=</span> gt_y2 <span class=\"token operator\">-</span> gt_y1\n    gt_w <span class=\"token operator\">=</span> gt_x2 <span class=\"token operator\">-</span> gt_x1\n    y1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">-</span> gt_y1<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> gt_h\n    x1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">-</span> gt_x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> gt_w\n    y2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y2 <span class=\"token operator\">-</span> gt_y1<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> gt_h\n    x2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x2 <span class=\"token operator\">-</span> gt_x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> gt_w\n    boxes <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>y1<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nbox_ids <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>roi_masks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nmasks <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">.</span>crop_and_resize<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>roi_masks<span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> boxes<span class=\"token punctuation\">,</span>\n                                    box_ids<span class=\"token punctuation\">,</span>\n                                    config<span class=\"token punctuation\">.</span>MASK_SHAPE<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这样的话，就可以通过上述获得的mask和模型的预测结果进行结合训练模型了。</p>\n<h1><a id=\"MaskRCNN_1262\"></a>训练自己的Mask-RCNN模型</h1>\n<p>Mask-RCNN整体的文件夹构架如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6a73adb8efcc4811a2eb4e54840424af.png\"/></p>\n<h2><a id=\"_1265\"></a>一、数据集的准备</h2>\n<p>本文通过COCO数据集格式训练自己的数据集。</p>\n<p>如果是数据集尚未标注，可首先利用labelme标注数据。<strong>标注好的文件有图片文件和json文件，二者均放在before文件夹里，具体格式可参考shapes数据集。</strong><br/> 在标注目标时需要注意，同一种类的不同目标需要使用 _ 来隔开。<br/> 比如想要训练网络检测<strong>三角形和正方形</strong>，当一幅图片存在两个三角形时，分别标记为：</p>\n<pre><code class=\"prism language-python\">triangle_1\ntriangle_2\n</code></pre>\n<p>将其放在before文件夹里：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8ed5158866464332b444cfb8a39df57f.png\"/></p>\n<h2><a id=\"_1278\"></a>二、数据集的处理</h2>\n<p>修改coco_annotation.py里面的参数。第一次训练可以仅修改classes_path，classes_path用于指向检测类别所对应的txt。<br/> 训练自己的数据集时，可以自己建立一个cls_classes.txt，里面写自己所需要区分的类别。<br/> model_data/cls_classes.txt文件内容为：</p>\n<pre><code class=\"prism language-python\">cat\ndog\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<p>修改coco_annotation.py中的classes_path，使其对应cls_classes.txt，并运行coco_annotation.py。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f08e947898bb49e38ad1cbb4e780543a.png\"/></p>\n<h2><a id=\"_1289\"></a>三、开始训练网络</h2>\n<p><strong>训练的参数较多，均在train.py中，大家可以在下载库后仔细看注释，其中最重要的部分依然是train.py里的classes_path。</strong><br/> <strong>classes_path用于指向检测类别所对应的txt，这个txt和coco_annotation.py里面的txt一样！训练自己的数据集必须要修改！</strong><br/> 修改完classes_path后就可以运行train.py开始训练了，在训练多个epoch后，权值会生成在logs文件夹中。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\74b671ab984c40d88f71438f26599e11.png\"/></p>\n<h2><a id=\"_1294\"></a>四、模型预测</h2>\n<p>训练结果预测需要用到两个文件，分别是mask_rcnn.py和predict.py。<br/> 首先需要去mask_rcnn.py里面修改model_path以及classes_path，这两个参数必须要修改。<br/> <strong>model_path指向训练好的权值文件，在logs文件夹里。<br/> classes_path指向检测类别所对应的txt。</strong><br/> 完成修改后就可以运行predict.py进行检测了。运行后输入图片路径即可检测。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f27d901ed4e04d78a4fc8a19b001c549.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}