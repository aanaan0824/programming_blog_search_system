{"blogid": "125681106", "writerAge": "码龄4年", "writerBlogNum": "24", "writerCollect": "1110", "writerComment": "69", "writerFan": "140", "writerGrade": "4级", "writerIntegral": "1186", "writerName": "To_be_a_fisher", "writerProfileAdress": "writer_image\\profile_125681106.jpg", "writerRankTotal": "14881", "writerRankWeekly": "60024", "writerThumb": "204", "writerVisitNum": "81665", "blog_read_count": "1007", "blog_time": "已于 2022-07-08 18:32:10 修改", "blog_title": "在Win10系统上使用VScode + Cmake配置C/C++开发环境，实现一键编译运行", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"1_0\"></a>1.前言</h2>\n<p>前几天在公司的Ubuntu20.04电脑上配置了VSCode + Cmake的C/C++开发环境，可以用来跑跑C/C++的代码，然后，现在住的地方用的Windows，开发环境用的是 Visual C++ 6.0，环境有点老，跑点简单的C代码还行，但是要跑比较复杂的C++代码，代码敲起来就不那么舒服了。</p>\n<p>所以，就想配置的和公司Ubuntu的C/C++开发环境一样，用VSCode + Cmake配置一套在Win10运行的开发环境，然后再写个简单的“一键编译运行”脚本，运行一下就可以跑程序，岂不美哉~~</p>\n<p>说干就干。</p>\n<h2><a id=\"2_7\"></a>2.软件准备</h2>\n<p>主要有下面这几个软件要安装一下。</p>\n<ul><li>VS Code ；<br/> （本人最喜欢的IDE！界面简洁，安装包也不大（对比VS几个G，你细品），通过安装插件的方式扩展功能，这种方式非常奈斯！）</li><li>Cmake ；</li><li>MSYS2；（用于在windows上安装编译器gcc、g++、make）</li></ul>\n<h3><a id=\"21_VSCode_14\"></a>2.1 VSCode的安装</h3>\n<p>首先是VS Code的安装，直接去VSCode的<a href=\"https://code.visualstudio.com/\">官网</a>（https://code.visualstudio.com/）下载安装包VSCodeUserSetup-x64-1.69.0.exe （Windows 64位操作系统），根据自己的电脑是64位（x64）还是32位(x86)选择相应的安装包，一路正常安装即可，比较简单。</p>\n<p>我这里主要想说的是个人觉得VS Code的一些好用的插件，也做自己备忘。</p>\n<ol><li> <p>Chinese中文插件，安装完就是中文界面了；<br/> <img alt=\"请添加图片描述\" src=\"image\\64a80f5812254d0c962ccf2aaf6db977.png\"/></p> </li><li> <p>Partial Diff插件，可比较代码、文件的不同，虽然说有更专业的beyong<br/> compare，但是bc要收费，破解安装也有点麻烦；<br/> <img alt=\"请添加图片描述\" src=\"image\\83dbf0c63ace4ac9827f73b0ee939e69.png\"/></p> </li><li> <p>Rainbow Brackets，多重括号提示，有多重括号、大括号，会以不同颜色区分，代码会更方便查看；<br/> <img alt=\"请添加图片描述\" src=\"image\\c7360802be4d4779bd26021430299a60.png\"/></p> </li><li> <p>One Dark Pro，VS Code的皮肤插件，默认的界面还是有点一般，安装完后会更好看；<br/> <img alt=\"请添加图片描述\" src=\"image\\5fc350b2648d43a1a6525d57cfcf55d7.png\"/></p> </li><li> <p>Window Colors，VS Code多开插件，开了多个VS Code，安装完这个插件后，每个窗口会以不同颜色呈现，方便区分，非常奈斯的一个插件；<br/> <img alt=\"请添加图片描述\" src=\"image\\45a6b92a27474925aa8aade564f44364.png\"/></p> </li><li> <p>Tabnine AI，这个插件可太牛逼了，我也是最近刚开始用，可通过AI预测你下一步要输入的代码，然后你可用Tab键进行补全，非常好用！！！墙裂推荐，我用了后仿佛打开了新世界！<br/> <img alt=\"请添加图片描述\" src=\"image\\537bfd2b799a470ca64e2b50adc88c38.png\"/></p> </li></ol>\n<p>接下来就是一些与C/C++语言相关的开发插件了，就不多介绍了，基本都要装上。</p>\n<ol><li>C/C++；<br/> <img alt=\"请添加图片描述\" src=\"image\\039fccd585de4e1782f957624869c9aa.png\"/></li><li>C/C++ Extension Pack；<br/> <img alt=\"请添加图片描述\" src=\"image\\f0c1f3ea800b44b795b884cd3c304ef1.png\"/></li><li>C/C++ Themes；<br/> <img alt=\"请添加图片描述\" src=\"image\\53d8c43846794cf9b47485c06c7e923e.png\"/></li><li>Cmake工具，这个应该在安装完前面3个应该会自动安装上，这里提一下；<br/> <img alt=\"请添加图片描述\" src=\"image\\d34518ee49594ac4b758dba518075f6d.png\"/><br/> VS Code的安装就说这么多，读者要是有更多、更好用的插件，欢迎交流~~</li></ol>\n<h3><a id=\"22_CMake_48\"></a>2.2 CMake的安装</h3>\n<p>同样到<a href=\"https://cmake.org/download/\">官网</a>（https://cmake.org/download/）下载适配Win10-64位系统的安装包，下载有点慢，好在安装包只有不到30M，等了几分钟就下完了。</p>\n<p>下载完后，也是一路安装，注意要勾上把CMake加入到系统路径，省得需要自己手动添加。</p>\n<p>安装完后，重启一下电脑，让环境变量生效。</p>\n<p>win+r，输入cmd，打开windows命令行，输入 cmake --version，打印以下信息说明，正确安装了。<br/> <img alt=\"请添加图片描述\" src=\"image\\039df350247f4b99a03f2f851fc72f0f.png\"/></p>\n<h3><a id=\"23_MSYS2_57\"></a>2.3 MSYS2的安装</h3>\n<p>最后是MSYS2的安装，这个可能有点麻烦，我也是最近刚知道这个软件，这个软件可以很方便的在Windows上安装gcc，g++和Make等一系列在Linux下的软件，省得我们要一个个地安装，跟Linux的终端有点像。</p>\n<p>安装过程参考下面的网址就好了（我就不重复造轮子了= =）：</p>\n<ul><li>https://mirror.tuna.tsinghua.edu.cn/help/msys2/</li><li>https://www.jianshu.com/p/04636461341e</li></ul>\n<p>首先是安装MSYS2，安装好后，按网址说明的换源，然后输入pacman -Sy 刷新软件包数据，然后挨个安装gcc，g++，make</p>\n<pre><code> #安装gcc g++\n pacman -S mingw-w64-x86_64-toolchain\n #查询并找到msys/make\n pacman -Ss make\n #安装make\n pacman -S msys/make\n</code></pre>\n<p>最后，把gcc，g++，make添加到Windows系统环境变量。<br/> <img alt=\"请添加图片描述\" src=\"image\\f33913c9db7144debd01611887b07b96.png\"/><br/> 然后，重启电脑。</p>\n<p>在Windows命令行，依次输入 gcc --version 、g++ --version 、 make --version，打印出下图，说明gcc、g++、make安装成功。</p>\n<p><img alt=\"请添加图片描述\" src=\"image\\a66b91ddece942d28d59aa9db8bcc7aa.png\"/><br/> 然后就是VS Code工程的配置了。</p>\n<h2><a id=\"3VS_Code_82\"></a>3.VS Code工程的配置</h2>\n<p>首先，新建一个Demo文件夹，用VS Code打开，然后再分别新建两个文件夹include和src，用于放头文件和源文件，工程如下：<br/> 在test.h中随便定义一个宏，在main.cpp中打印出来。<br/> <img alt=\"请添加图片描述\" src=\"image\\505c134bf4d944698563a49b943574eb.png\"/><br/> main.cpp</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"../include/test.h\"</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello, world!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> CONST_VALUE <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>test.h</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__TEST_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__TEST_H</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CONST_VALUE</span>  <span class=\"token expression\"><span class=\"token number\">1234</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// __TEST_H  </span></span>\n</code></pre>\n<p>基本工程建立完毕。</p>\n<p>然后，进行编译配置，按ctrl+shift+p,输入cmake，点击CMake:配置那项：<br/> <img alt=\"请添加图片描述\" src=\"image\\6576a230e0874300a26e075d8c784480.png\"/><br/> 接着就会在右下角弹出一个窗口，点击create：<br/> <img alt=\"请添加图片描述\" src=\"image\\0d149d5823994ba195bb5aaae9232c30.png\"/><br/> 然后输入工程名：<br/> <img alt=\"请添加图片描述\" src=\"image\\f9b893b23fa8413d9d9bf7b44cab65b6.png\"/><br/> 选择可执行文件：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e416f022edda4436af0392fbad580c66.png\"/><br/> 这样就会新生成一个CMakeList.txt的CMake文件，这是个简单模板，然后我们根据CMake的语法规则（不懂的自行查一下，比较简单，至少比写makefile的规则简单的多）进行修改如下（注释很清楚）：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\">#CMake 最低版本号要求</span>\ncmake_minimum_required<span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.0</span>.0<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#指定工程名</span>\nproject<span class=\"token punctuation\">(</span>Demo VERSION <span class=\"token number\">0.1</span>.0<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#指定C/C++编译器</span>\nset<span class=\"token punctuation\">(</span>CMAKE_C_COMPILER <span class=\"token string\">\"C:/msys64/mingw64/bin/gcc\"</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">(</span>CMAKE_CXX_COMPILER <span class=\"token string\">\"C:/msys64/mingw64/bin/g++\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#指定C++ 标准</span>\nset<span class=\"token punctuation\">(</span>CMAKE_CXX_STANDARD <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">(</span>CMAKE_CXX_STANDARD_REQUIRED True<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#指定头文件所在的路径</span>\ninclude_directories<span class=\"token punctuation\">(</span><span class=\"token variable\">${PROJECT_SOURCE_DIR}</span>/include<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#在 ${PROJECT_SOURCE_DIR}/src 路径下搜索.cpp源文件</span>\naux_source_directory<span class=\"token punctuation\">(</span><span class=\"token variable\">${PROJECT_SOURCE_DIR}</span>/src ALL_SRCS<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#查找当前目录下的所有源文件</span>\n<span class=\"token comment\">#并将名称保存到 DIR_SRCS 变量</span>\naux_source_directory<span class=\"token punctuation\">(</span>. DIR_SRCS<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#指定生成的可执行文件夹的路径</span>\nset<span class=\"token punctuation\">(</span>EXECUTABLE_OUTPUT_PATH <span class=\"token builtin class-name\">.</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#生成可执行文件 main.exe</span>\nadd_executable<span class=\"token punctuation\">(</span>main <span class=\"token variable\">${ALL_SRCS}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>然后在VS Code的终端，<strong>输入 cmake -G “Unix Makefiles” ./</strong> ，（注意这里不是<strong>cmake .</strong>，但我不知道为什么不行，在ubuntu可以正常跑，有知道的朋友麻烦说下）通过CMake生成Makefile：<br/> <img alt=\"请添加图片描述\" src=\"image\\5e357945a64a4fd8a1bbace92da85c19.png\"/><br/> 可以看到，在工程目录会生成对应本工程的Makefile，生成规则是由我们写在CMakeLists.txt指定的：<br/> <img alt=\"请添加图片描述\" src=\"image\\54b6c260dc9841c6aa0be25c68eca639.png\"/><br/> 再输入make进行编译：<br/> <img alt=\"请添加图片描述\" src=\"image\\1f2247fb13d14284a50c9d6f155d4ddc.png\"/><br/> 同样，在工程目录会生成对应的可执行文件main.exe（在CMakeLists.txt指定）：<br/> <img alt=\"请添加图片描述\" src=\"image\\b4e8f0821c7848c285f938495e1c1513.png\"/><br/> 然后，直接运行该exe，可以跑我们的程序：<br/> <img alt=\"请添加图片描述\" src=\"image\\2bf2cc3a8dc74ec0a9b6650bc9ab21a0.png\"/><br/> 最后，我们再将这些编译运行命令，写成一个build.bat脚本（Ubuntu上就是build.sh文件），真正实现一键编译运行！<br/> build.bat</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">rm</span> main.exe\n<span class=\"token function\">rm</span> Makefile\n<span class=\"token function\">rm</span> CMakeCache.txt\ncmake -G <span class=\"token string\">\"Unix Makefiles\"</span> ./\n<span class=\"token function\">make</span>\n.<span class=\"token punctuation\">\\</span>main.exe\n</code></pre>\n<p>一键编译运行：<br/> <img alt=\"请添加图片描述\" src=\"image\\a70bfa1b6a4240fe83daceae87690112.png\"/></p>\n<p>一键编译运行的感觉是不是很爽，看着自己的代码慢慢地编译到执行的过程。</p>\n<p>OK，至此，在Windows平台使用VScode + Cmake配置C/C++开发环境就完成了！！撒花~~Cheers！！</p>\n<h2><a id=\"4__182\"></a>4. 结束语</h2>\n<ul><li>如果后面要链接动态库、静态库那些，查一下相应的CMake规则就好了；</li><li>在此过程中，若碰到什么问题，用必应搜一下，照着解决就好，没有什么路是一帆风顺的~；</li><li>我第一次在Windows上把整个过程跑通也搞了几个小时，Ubuntu上要简单一些。</li></ul>\n<p>写这篇博客又花了几个小时= =，希望对读者有帮助吧。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}