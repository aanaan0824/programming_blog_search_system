{"blogid": "126685937", "writerAge": "码龄83天", "writerBlogNum": "61", "writerCollect": "1544", "writerComment": "1930", "writerFan": "2802", "writerGrade": "6级", "writerIntegral": "4836", "writerName": "小余努力搬砖", "writerProfileAdress": "writer_image\\profile_126685937.jpg", "writerRankTotal": "3430", "writerRankWeekly": "52", "writerThumb": "1831", "writerVisitNum": "29186", "blog_read_count": "237", "blog_time": "于 2022-09-04 10:01:40 发布", "blog_title": "猿创征文｜【React】组件化入门学习", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E6%A8%A1%E5%9D%97%E5%8C%96-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%A8%A1%E5%9D%97%E5%8C%96\">模块化</a></p>\n<p id=\"%E6%A8%A1%E5%9D%97%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%A8%A1%E5%9D%97%EF%BC%9A\">模块：</a></p>\n<p id=\"%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%9A\">模块化：</a></p>\n<p id=\"%E7%BB%84%E4%BB%B6%E5%8C%96-toc\" style=\"margin-left:0px;\"><a href=\"#%E7%BB%84%E4%BB%B6%E5%8C%96\">组件化</a></p>\n<p id=\"%E7%BB%84%E4%BB%B6%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%BB%84%E4%BB%B6%EF%BC%9A\">组件：</a></p>\n<p id=\"%E7%BB%84%E4%BB%B6%E5%8C%96%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%BB%84%E4%BB%B6%E5%8C%96%EF%BC%9A\">组件化：</a></p>\n<p id=\"%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6\">函数式组件</a></p>\n<p id=\"%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6\">创建函数组件</a></p>\n<p id=\"Props%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%EF%BC%88%E9%87%8D%E7%82%B9%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#Props%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%EF%BC%88%E9%87%8D%E7%82%B9%EF%BC%89\">Props参数传递（重点）</a></p>\n<p id=\"%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6\">复合函数组件</a></p>\n<p id=\"%E7%B1%BB%E5%BC%8F%E7%BB%84%E4%BB%B6-toc\" style=\"margin-left:0px;\"><a href=\"#%E7%B1%BB%E5%BC%8F%E7%BB%84%E4%BB%B6\">类式组件</a></p>\n<p id=\"%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B\">创建实例</a></p>\n<p id=\"%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6\">用户自定义组件</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>模块化</strong></strong></h1>\n<h2 id=\"%E6%A8%A1%E5%9D%97%EF%BC%9A\" style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>模块：</strong></strong></h2>\n<p style=\"margin-left:.0001pt;text-align:justify;\">理解：向外提供特定功能的js程序,一般就是一个js文件。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">为什么：要拆成模块，随着业务逻辑增加,代码越来越多且复杂。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">作用：复用js,简化js的编写,提高js运行效率。</p>\n<h2 id=\"%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%9A\" style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>模块化</strong></strong><strong><strong>：</strong></strong></h2>\n<p style=\"margin-left:.0001pt;text-align:justify;\">当应用的js都以模块来编写,这个应用就是一个模块化的应用</p>\n<h1 id=\"%E7%BB%84%E4%BB%B6%E5%8C%96\" style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>组件化</strong></strong></h1>\n<h2 id=\"%E7%BB%84%E4%BB%B6%EF%BC%9A\" style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>组件：</strong></strong></h2>\n<p style=\"margin-left:.0001pt;text-align:justify;\">理解：用来实现局部功能效果的代码和资源的集合(html/css/js/img等等)</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">为什么：要用组件，一个界面的功能复杂</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">作用：复用编码,简化项目编码,提高运行效率</p>\n<h2 id=\"%E7%BB%84%E4%BB%B6%E5%8C%96%EF%BC%9A\" style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>组件化</strong></strong><strong><strong>：</strong></strong></h2>\n<p style=\"margin-left:.0001pt;text-align:justify;\">当应用是以多组件的方式实现,这个应用就是组件化的应用</p>\n<h1 id=\"%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6\" style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>函数式组件</strong></strong></h1>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>实质：</strong></strong>一个 React 应用就是构建在 React <strong><strong>组件</strong></strong>之上的。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>函数组件：</strong></strong>该函数是一个有效的 React 组件，因为它接收唯一带有数据的 “​props​”（代表属性）对象与并返回一个 React 元素。这类组件被称为“函数组件”，因为它本质上就是 JavaScript 函数。</p>\n<h2 id=\"%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6\" style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>创建函数组件</strong></strong></h2>\n<pre><code class=\"language-javascript\">function HelloPerson(){\n\n return &lt;h1&gt;你好，我是函数式组件!&lt;/h1&gt;;\n\n}\n\nReactDOM.render(&lt;HelloPerson/&gt;,document.getElementById('root'));</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>说明：</strong></strong>解析组件标签HelloPerson，发现组件是函数定义的，调用该函数，将返回的虚拟DOM，转为真实的DOM，随后呈现在页面上。</p>\n<h2 id=\"Props%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%EF%BC%88%E9%87%8D%E7%82%B9%EF%BC%89\" style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>Props参数传递（重点）</strong></strong></h2>\n<pre><code class=\"language-javascript\">function HelloPerson(person){\n\n      console.log(this);//此处undefined babel编译后采取严格模式\n\n  return (\n\n  &lt;ul&gt;\n\n  &lt;li&gt;姓名：{person.name}&lt;/li&gt;\n\n  &lt;li&gt;年龄：{person.age}&lt;/li&gt;\n\n  &lt;/ul&gt;\n\n  )\n\n }\n\nReactDOM.render(&lt;HelloPerson name='张三' age={18}/&gt;,document.getElementById('root'));</code></pre>\n<h2 id=\"%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6\" style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>复合函数组件</strong></strong></h2>\n<pre><code class=\"language-javascript\"> function GetName(props){\n return &lt;li&gt;姓名：{props.name}&lt;/li&gt;\n }\n\n function GetAge(props){\n return &lt;li&gt;年龄：{props.age}&lt;/li&gt;\n }\n\nfunction HelloPerson(person){\n return (\n &lt;ul&gt;\n &lt;GetName name={person.name}/&gt;\n &lt;GetAge age={person.age}/&gt;\n &lt;/ul&gt;\n\n  )\n\n  }\n\nReactDOM.render(&lt;HelloPerson name='张三' age={18}/&gt;,document.getElementById('root'));</code></pre>\n<h1 id=\"%E7%B1%BB%E5%BC%8F%E7%BB%84%E4%BB%B6\" style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>类式组件</strong></strong></h1>\n<p style=\"margin-left:.0001pt;text-align:justify;\">ES6 的 class 来定义组件，通过继承React.Component。解析流程如下：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">React解析组件标签，找到了MyComponent组件。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。</p>\n<h2 id=\"%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B\" style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>创建实例</strong></strong></h2>\n<pre><code class=\"language-javascript\">//创建类组件 1:继承react中的Component类 2：需要render\n\nclass Person extends React.Component{\n\n render(){\n\n return (\n\n     &lt;h1&gt;你好，我是类式组件！&lt;/h1&gt;\n\n )\n\n }\n\n}\n\nReactDOM.render(&lt;Person/&gt;,document.getElementById(\"root\"));</code></pre>\n<h2 id=\"%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6\" style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>用户自定义组件</strong></strong></h2>\n<pre><code class=\"language-javascript\">const element = &lt;Person/&gt;\n\nReactDOM.render(element,document.getElementById(\"root\"));</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n</div>\n</div>"}