{"blogid": "122331463", "writerAge": "码龄4年", "writerBlogNum": "30", "writerCollect": "540", "writerComment": "11", "writerFan": "39", "writerGrade": "3级", "writerIntegral": "447", "writerName": "上善若水。。", "writerProfileAdress": "writer_image\\profile_122331463.jpg", "writerRankTotal": "62058", "writerRankWeekly": "359990", "writerThumb": "82", "writerVisitNum": "68477", "blog_read_count": "19894", "blog_time": "已于 2022-04-30 15:41:16 修改", "blog_title": "requests库的使用（一篇就够了）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>urllib库使用繁琐，比如处理网页验证和Cookies时，需要编写Opener和Handler来处理。为了更加方便的实现这些操作，就有了更为强大的requests库。<br/> <br/></p>\n<h1><a id=\"request_3\"></a>request库的安装</h1>\n<p>requests属于第三方库，Python不内置，因此需要我们手动安装。</p>\n<p><strong>1、相关链接</strong></p>\n<ul><li> <p>GitHub：https://github.com/psf/requests</p> </li><li> <p>PyPI：https://pypi.org/project/requests/</p> </li><li> <p>官方文档：https://docs.python-requests.org/en/latest/</p> </li><li> <p>中文文档：https://docs.python-requests.org/zh_CN/latest/user/quickstart.html</p> </li></ul>\n<p><strong>2、通过pip安装</strong></p>\n<p>无论是Windows、Linux还是Mac，都可以通过pip这个包管理工具来安装requests。在命令行界面运行如下命令，即可完成requests库的安装：</p>\n<pre><code class=\"prism language-python\">pip3 install requests\n</code></pre>\n<p>除了通过pip安装，还可以通过wheel或源码安装，这里不进行叙述。<br/> <br/></p>\n<p><strong>3、验证安装</strong></p>\n<p>在命令行可通过导入import库来测试requests是否安装成功。<br/> <img alt=\"\" src=\"image\\50b0203bd8dd4c5fb829ad7dcfc4f208.png\"/>导入库成功，说明requests安装成功。<br/> <br/><br/></p>\n<h1><a id=\"_30\"></a>基本用法</h1>\n<p>下面案例使用requests库中的get( )方法发送了一个get请求。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#导入requests库</span>\n<span class=\"token keyword\">import</span> requests\n<span class=\"token comment\">#发送一个get请求并得到响应</span>\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#查看响应对象的类型</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#查看响应状态码</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#查看响应内容的类型</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#查看响应的内容</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#查看cookies</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>​ 这里调用了get( )方法实现urlopen( )相同的操作，结果返回一个响应对象，然后分别输出响应对象类型、状态码、响应体内容的类型、 响应体的内容、Cookies。通过运行结果可以得知：响应对象的类型是requests.models.Response，响应体内容的类型是str，Cookies 的类型是RequestCookieJar。如果要发送其他类型的请求直接调用其对应的方法即可：</p>\n<pre><code class=\"prism language-python\">r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">)</span>\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">)</span>\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">)</span>\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">)</span>\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><br/><br/></p>\n<h1><a id=\"GET_61\"></a>GET请求</h1>\n<p>构建一个GET请求，请求http://httpbin.org/get（该网站会判断如果客户端发起的是GET请求的话，它返回相应的信息）</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://httpbin.org/get'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"\" src=\"image\\c8a31a1c03a44c148955c71e8b1b81c3.png\"/><br/> 1）如果要添加请求参数，比如添加两个请求参数，其中name值是germey，age值是20。虽然可以写成如下形式：</p>\n<pre><code class=\"prism language-python\">r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://httpbin.org/get?name=germey&amp;age=20'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>​ 但较好的写法是下面这种写法：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'germey'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span><span class=\"token number\">22</span>\n<span class=\"token punctuation\">}</span>\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://httpbin.org/get'</span><span class=\"token punctuation\">,</span>params<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"\" src=\"image\\57d9386bf6914ca1972b3823f3769e62.png\"/><br/> ​ 通过运行结果可以看出，请求的URL最终被构造成了“http://httpbin.org/get?name=germey&amp;age=20”。</p>\n<p>2）网页的返回内容的类型是str类型的，如果它符合JSON格式，则可以使用json( )方法将其转换为字典类型，以方便解析。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://httpbin.org/get'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#str类型</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#返回响应内容的字典形式</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#dict类型</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>​ 但需要注意，如果返回的内容不是JSON格式，调用json( )方法便会出现错误，抛出json.decoder.JSONDecodeError异常。<br/> <br/><br/></p>\n<h1><a id=\"POST_107\"></a>POST请求</h1>\n<p>1）发送POST请求。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'http://httpbin.org/post'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>2）发送带有请求参数的POST请求。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"germey\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"22\"</span>\n<span class=\"token punctuation\">}</span>\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'http://httpbin.org/post'</span><span class=\"token punctuation\">,</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"\" src=\"image\\eeae58db382b4c76b610e6d3cca49ea0.png\"/><br/> ​ 在POST请求方法中，form部分就是请求参数。<br/> <br/><br/></p>\n<h1><a id=\"_132\"></a>设置请求头</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\nheaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'my-test'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Hello'</span>\n<span class=\"token punctuation\">}</span>\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://httpbin.org/get'</span><span class=\"token punctuation\">,</span>headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"\" src=\"image\\6df47852249c49fd9a4be061436b13c9.png\"/><br/> <br/><br/></p>\n<h1><a id=\"_146\"></a>响应</h1>\n<p>1）发送请求后，返回一个响应，它具有很多属性，通过它的属性来获取状态码、响应头、Cookies、响应内容等。如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#响应内容（str类型）</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#响应内容（bytes类型）</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#状态码</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#响应头</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#Cookies</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#URL</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#请求历史</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>2）状态码常用来判断请求是否成功，除了可以使用HTTP提供的状态码，requests库中也提供了一个内置的状态码查询对象，叫做 requests.codes，实际上两者都是等价的。示例如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> r<span class=\"token punctuation\">.</span>status_code<span class=\"token operator\">==</span>requests<span class=\"token punctuation\">.</span>codes<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request Fail'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request Successfully'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>​ requests.codes对象拥有的状态码如下：</p>\n<pre><code>#信息性状态码\n100：('continue',),\n101：('switching_protocols',),\n102：('processing',),\n103：('checkpoint',),\n122：('uri_too_long','request_uri_too_long'),\n\n#成功状态码\n200：('ok','okay','all_ok','all_okay','all_good','\\\\o/','√'),\n201：('created',),\n202：('accepted',),\n203：('non_authoritative_info','non_authoritative_information'),\n204：('no_content',),\n205：('reset_content','reset'),\n206：('partial_content','partial'),\n207：('multi_status','multiple_status','multi_stati','multiple_stati'),\n208：('already_reported',),\n226：('im_used',),\n\n#重定向状态码\n300：('multiple_choices',),\n301：('moved_permanently','moved','\\\\o-'),\n302：('found',),\n303：('see_other','other'),\n304：('not_modified',),\n305：('user_proxy',),\n306：('switch_proxy',),\n307：('temporary_redirect','temporary_moved','temporary'),\n308：('permanent_redirect',),\n\n#客户端请求错误\n400：('bad_request','bad'),\n401：('unauthorized',),\n402：('payment_required','payment'),\n403：('forbiddent',),\n404：('not_found','-o-'),\n405：('method_not_allowed','not_allowed'),\n406：('not_acceptable',),\n407：('proxy_authentication_required','proxy_auth','proxy_authentication'),\n408：('request_timeout','timeout'),\n409：('conflict',),\n410：('gone',),\n411：('length_required',),\n412：('precondition_failed','precondition'),\n413：('request_entity_too_large',),\n414：('request_uri_too_large',),\n415：('unsupported_media_type','unsupported_media','media_type'),\n416：('request_range_not_satisfiable','requested_range','range_not_satisfiable'),\n417：('expectation_failed',),\n418：('im_a_teapot','teapot','i_am_a_teapot'),\n421：('misdirected_request',),\n422：('unprocessable_entity','unprocessable'),\n423：('locked'),\n424：('failed_dependency','dependency'),\n425：('unordered_collection','unordered'),\n426：('upgrade_required','upgrade'),\n428：('precondition_required','precondition'),\n429：('too_many_requests','too_many'),\n431：('header_fields_too_large','fields_too_large'),\n444：('no_response','none'),\n449：('retry_with','retry'),\n450：('blocked_by_windows_parental_controls','parental_controls'),\n451：('unavailable_for_legal_reasons','legal_reasons'),\n499：('client_closed_request',),\n\n#服务端错误状态码\n500：('internal_server_error','server_error','/o\\\\','×')\n501：('not_implemented',),\n502：('bad_gateway',),\n503：('service_unavailable','unavailable'),\n504：('gateway_timeout',),\n505：('http_version_not_supported','http_version'),\n506：('variant_also_negotiates',),\n507：('insufficient_storage',),\n509：('bandwidth_limit_exceeded','bandwith'),\n510：('not_extended',),\n511：('network_authentication_required','network_auth','network_authentication')\n</code></pre>\n<p><br/><br/></p>\n<h1><a id=\"_263\"></a>爬取二进制数据</h1>\n<p>图片、音频、视频这些文件本质上都是由二进制码组成的，所以想要爬取它们，就要拿到它们的二进制码。以爬取百度的站点图标（选项卡上的小图标）为例：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token comment\">#向资源URL发送一个GET请求</span>\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com/favicon.ico'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'favicon.ico'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n  f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>使用open( )方法，它的第一个参数是要保存文件名（可带路径），第二个参数表示以二进制的形式写入数据。运行结束之后，可以在当前目录下发现保存的名为favicon.ico的图标。同样的，音频和视频也可以用这种方法获取。<br/> <br/><br/></p>\n<h1><a id=\"_278\"></a>文件上传</h1>\n<p>requests可以模拟提交一些数据。假如某网站需要上传文件，我们也可以实现。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token comment\">#以二进制方式读取当前目录下的favicon.ico文件，并将其赋给file</span>\nfiles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'file'</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'favicon.ico'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#进行上传</span>\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'http://httpbin.org/post'</span><span class=\"token punctuation\">,</span>files<span class=\"token operator\">=</span>files<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><br/><br/></p>\n<h1><a id=\"Cookies_292\"></a>处理Cookies</h1>\n<p>使用urllib处理Cookies比较复杂，而使用requests处理Cookies非常简单。</p>\n<p>1）获取Cookies。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#打印Cookies对象</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#遍历Cookies</span>\n<span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span>value <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">+</span><span class=\"token string\">'='</span><span class=\"token operator\">+</span>value<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>​ 通过响应对象调用cookies属性即可获得Cookies，它是一个RequestCookiesJar类型的对象，然后用items( )方法将其转换为元组组成 的列表，遍历输出每一个Cookies的名称和值。</p>\n<p>2）使用Cookies来维持登录状态。以知乎为例，首先登录知乎，进入一个登录之后才可以访问的页面，在浏览器开发者工具中将Headers 中的Cookies复制下来（有时候这样直接复制的Cookies中包含省略号，会导致程序出错，此时可以在Console项下输document.cookie 即可得到完整的Cookie），在程序中使用它，将其设置到Headers里面，然后发送请求。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\nheaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token string\">'Cookie'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'_zap=616ef976-1fdb-4b8c-a3cb-9327ff629ff1; _xsrf=0CCNkbCLtTAlz5BfwhMHBHJWW791ZkK6; d_c0=\\\"AKBQTnFIRhSPTpoYIf6mUxSic2UjzSp4BYM=|1641093994\\\"; __snaker__id=mMv5F3gmBHIC9jJg; gdxidpyhxdE=E%2BNK7sMAt0%2F3aZ5Ke%2FSRfBRK7B1QBmCtaOwrqJm%2F1ONP3VPItkrXCcMiAX3%2FIsSxUwudQPyuDGO%2BlHGPvNqGqO9bX1%2B58o7wmf%2FZewh8xSPg%2FH3T2HoWsrs7ZhsSGND0C0la%2BXkLIIG5XXV85PxV5g99d%5CMph%2BbkX1JQBGhDnL3N0zRf%3A1641094897088; _9755xjdesxxd_=32; YD00517437729195%3AWM_NI=rMeMx2d5Yt3mg0yHPvuPGTjPnGtjL%2Bn%2FPSBnVn%2FHFAVZnIEABUIPITBdsHmMX1iCHfKauO4qhW%2Bi5bTy12Cg91vrxMPgOHtnaAylN8zk7MFpoTr%2FTeKVo3%2FKSSM6T5cNSGE%3D; YD00517437729195%3AWM_NIKE=9ca17ae2e6ffcda170e2e6ee8bea40f8e7a4b2cf69b3b48fb7c54b979b8fbaf17e93909b91fb338ebaaeadec2af0fea7c3b92ab293abaefb3aa8eb9795b267a5f0b7a9d37eb79089b5e95cae99bc8bcf21aef1a0b4c16696b2e1a9c54b9686a2aac84b828b87b1cc6082bcbda9f0479cefa7a4cb6e89bfbbb0b77bac89e58ab86a98a7ffd3c26dfbefba93fb4794b981a9f766a39fb78dcd34bab5f9aec57cad8cbed0d76f898aa1d4ae41918d83d7d73fa1929da8c837e2a3; YD00517437729195%3AWM_TID=Kji43bLtZbRAAAVABFMu4upmK4C%2BEGQH; KLBRSID=9d75f80756f65c61b0a50d80b4ca9b13|1641268679|1641267986; tst=r; NOT_UNREGISTER_WAITING=1; SESSIONID=lbWS7Y8pmp5qM1DErkXJCahgQwwyl79eT8XAOC6qC7A; JOID=V1wXAUwzD9BQH284PTQMxsZMqrkrXmuHBio3Bk1cfuMhV1x9fiHKBjYcaD44XxiWm2kKD5TjJvk-7iTeM3d6aYA=; osd=VVoQAk0xCddTHm0-OjcNxMBLqbgpWGyEBygxAU5dfOUmVF1_eCbJBzQabz05XR6RmGgICZPgJ_s46SffMXF9aoE=; Hm_lvt_98beee57fd2ef70ccdd5ca52b9740c49=1640500881,1641093994,1641267987; Hm_lpvt_98beee57fd2ef70ccdd5ca52b9740c49=1641268678'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Host'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'www.zhihu.com'</span>\n<span class=\"token punctuation\">}</span>\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.zhihu.com/people/xing-fu-shi-fen-dou-chu-lai-de-65-18'</span><span class=\"token punctuation\">,</span>headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>​ 运行之后，结果中包含了登录后的内容，说明获取登录状态成功。</p>\n<p>3）也可以通过cookies参数来设置，不过这样就需要构造RequestCookieJar对象，而且需要分割以下cookies，相对繁琐，但效果是一 样。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\n\ncookies <span class=\"token operator\">=</span><span class=\"token string\">'_zap=616ef976-1fdb-4b8c-a3cb-9327ff629ff1; _xsrf=0CCNkbCLtTAlz5BfwhMHBHJWW791ZkK6; d_c0=\\\"AKBQTnFIRhSPTpoYIf6mUxSic2UjzSp4BYM=|1641093994\\\"; __snaker__id=mMv5F3gmBHIC9jJg; gdxidpyhxdE=E%2BNK7sMAt0%2F3aZ5Ke%2FSRfBRK7B1QBmCtaOwrqJm%2F1ONP3VPItkrXCcMiAX3%2FIsSxUwudQPyuDGO%2BlHGPvNqGqO9bX1%2B58o7wmf%2FZewh8xSPg%2FH3T2HoWsrs7ZhsSGND0C0la%2BXkLIIG5XXV85PxV5g99d%5CMph%2BbkX1JQBGhDnL3N0zRf%3A1641094897088; _9755xjdesxxd_=32; YD00517437729195%3AWM_NI=rMeMx2d5Yt3mg0yHPvuPGTjPnGtjL%2Bn%2FPSBnVn%2FHFAVZnIEABUIPITBdsHmMX1iCHfKauO4qhW%2Bi5bTy12Cg91vrxMPgOHtnaAylN8zk7MFpoTr%2FTeKVo3%2FKSSM6T5cNSGE%3D; YD00517437729195%3AWM_NIKE=9ca17ae2e6ffcda170e2e6ee8bea40f8e7a4b2cf69b3b48fb7c54b979b8fbaf17e93909b91fb338ebaaeadec2af0fea7c3b92ab293abaefb3aa8eb9795b267a5f0b7a9d37eb79089b5e95cae99bc8bcf21aef1a0b4c16696b2e1a9c54b9686a2aac84b828b87b1cc6082bcbda9f0479cefa7a4cb6e89bfbbb0b77bac89e58ab86a98a7ffd3c26dfbefba93fb4794b981a9f766a39fb78dcd34bab5f9aec57cad8cbed0d76f898aa1d4ae41918d83d7d73fa1929da8c837e2a3; YD00517437729195%3AWM_TID=Kji43bLtZbRAAAVABFMu4upmK4C%2BEGQH; KLBRSID=9d75f80756f65c61b0a50d80b4ca9b13|1641268679|1641267986; tst=r; NOT_UNREGISTER_WAITING=1; SESSIONID=lbWS7Y8pmp5qM1DErkXJCahgQwwyl79eT8XAOC6qC7A; JOID=V1wXAUwzD9BQH284PTQMxsZMqrkrXmuHBio3Bk1cfuMhV1x9fiHKBjYcaD44XxiWm2kKD5TjJvk-7iTeM3d6aYA=; osd=VVoQAk0xCddTHm0-OjcNxMBLqbgpWGyEBygxAU5dfOUmVF1_eCbJBzQabz05XR6RmGgICZPgJ_s46SffMXF9aoE=; Hm_lvt_98beee57fd2ef70ccdd5ca52b9740c49=1640500881,1641093994,1641267987; Hm_lpvt_98beee57fd2ef70ccdd5ca52b9740c49=1641268678'</span>\njar <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>RequestsCookieJar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nheaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Host'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'www.zhihu.com'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> cookie <span class=\"token keyword\">in</span> cookies<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">';'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  key<span class=\"token punctuation\">,</span>value <span class=\"token operator\">=</span> cookie<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  jar<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span>\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.zhihu.com/people/xing-fu-shi-fen-dou-chu-lai-de-65-18'</span><span class=\"token punctuation\">,</span>headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><br/><br/></p>\n<h1><a id=\"_344\"></a>会话维持</h1>\n<p>通过调用get( )或post( )等方法可以做到模拟网页的请求，但是这实际上是相当于不同的会话，也就是说相当于你用了两个浏览器打开不同的页面。如果第一个请求利用post( )方法登录了网站，第二次想获取登录成功后的自己的个人信息，又使用了一次get( )方法取请求个人信息，实际上，这相当于打开了两个浏览器，所以是不能成功的获取到个人信息的。为此，需要会话维持，你可以在两次请求时设置一样的Cookies，但这样很繁琐，而通过Session类可以很轻松地维持一个会话。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\ns <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ns<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://httpbin.org/cookies/set/number/123456789'</span><span class=\"token punctuation\">)</span>\nr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://httpbin.org/cookies'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>首先通过requests打开一个会话，然后通过该会话发送了一个get请求，该请求用于向cookies中设置参数number，参数值为123456789；接着又使用该发起了一个get请求，用于获取Cookies，然后打印获取的内容。</p>\n<p><img alt=\"\" src=\"image\\54e7e6789e2746c69dd567636da9d92e.png\"/><br/> 成功获取。<br/> <br/><br/></p>\n<h1><a id=\"SSL_362\"></a>SSL证书验证</h1>\n<p>requests还提供了证书验证功能，当发送HTTP请求的时候，它会检查SSL证书，我们可以使用verify参数控制是否检查SSL证书。</p>\n<p>1）请求一个HTTPS网站时，如果该网站的证书没有被CA机构信任，程序将会出错，提示SSL证书验证错误。对此，只需要将verify参数 设置为False即可。如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\nresposne <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.12306.cn'</span><span class=\"token punctuation\">,</span>verify<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>​ 也可以指定一个本地证书用作客户端证书，它可以是单个文件（包含密钥和证书）或一个包含两个文件路径的元组。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token comment\">#本地需要有crt和key文件（key必须是解密状态，加密状态的key是不支持的），并指定它们的路径，</span>\nresponse <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.12306.cn'</span><span class=\"token punctuation\">,</span>cert<span class=\"token punctuation\">(</span><span class=\"token string\">'/path/server.crt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'/path/key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>2）在请求SSL证书不被CA机构认可的HTTPS网站时，虽然设置了verify参数为False，但程序运行可能会产生警告，警告中建议我们给它 指定证书，可以通过设置忽略警告的方式来屏蔽这个警告：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>packages <span class=\"token keyword\">import</span> urllib3\nurllib3<span class=\"token punctuation\">.</span>disable_warnings<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nresponse <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.12306.cn'</span><span class=\"token punctuation\">,</span>verify<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code>或者通过捕获警告到日志的方式忽略警告：\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> logging\n<span class=\"token keyword\">import</span> requests\nlogging<span class=\"token punctuation\">.</span>captureWarnings<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nresponse <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.12306.cn'</span><span class=\"token punctuation\">,</span>verify<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><br/><br/></p>\n<h1><a id=\"_404\"></a>代理设置</h1>\n<p>对于某些网站，在测试的时候请求几次，能正常获取内容。但是一旦开始大规模、频繁地爬取，网站可能会弹出验证码，或者跳转到登录验证页面，更有甚者可能会直接封禁客户端的IP，导致一定时间内无法访问。为了防止这种情况，我们需要使用代理来解决这个问题，这就需要用到proxies参数。</p>\n<p>1）设置代理</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\n\nproxies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  \t<span class=\"token comment\">#该代理服务器在免费代理网站上得到的，这样的网站有很多</span>\n    <span class=\"token string\">'http'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'http://161.35.4.201:80'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'https'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://161.35.4.201:80'</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://httpbin.org/get'</span><span class=\"token punctuation\">,</span> proxies<span class=\"token operator\">=</span>proxies<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> requests<span class=\"token punctuation\">.</span>exceptions<span class=\"token punctuation\">.</span>ConnectionError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"\" src=\"image\\242b7e1091264b1e8453cd97f7fb5338.png\"/><br/> ​ 可以发现，我们使用的是代理服务器进行访问的。</p>\n<p>2）如果代理需要使用HTTP Basic Auth，可以使用类似http://user:password@host:port这样的语法来设置代理。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\nproxies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token string\">\"http\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"http://user:password@161.35.4.201:80\"</span>\n<span class=\"token punctuation\">}</span>\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.taobao.com\"</span><span class=\"token punctuation\">,</span>proxies<span class=\"token operator\">=</span>proxies<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>3）除了基本的HTTP代理外，requests还支持SOCKS协议的代理。首先需要安装socks这个库：</p>\n<pre><code>pip3 install 'requests[socks]'\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\nproxies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token string\">'http'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'socks5://user:password@host:port'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'https'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'socks5://user:password@host:port'</span>\n<span class=\"token punctuation\">}</span>\nrequest<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.taobao.com'</span><span class=\"token punctuation\">,</span>proxies<span class=\"token operator\">=</span>proxies<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>​ 然后就可以使用SOCKS协议代理了</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\nproxies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token string\">'http'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'socks5://user:password@host:port'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'https'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'socks5://user:password@host:port'</span>\n<span class=\"token punctuation\">}</span>\nrequests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.taobao.com'</span><span class=\"token punctuation\">,</span>proxies<span class=\"token operator\">=</span>proxies<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><br/><br/></p>\n<h1><a id=\"_464\"></a>超时设置</h1>\n<p>在本机网络状况不好或者服务器网络响应太慢甚至无响应时，我们可能会等待特别久的时间才可能收到响应，甚至到最后收不到响应而报错。为了应对这种情况，应设置一个超时时间，这个时间是计算机发出请求到服务器返回响应的时间，如果请求超过了这个超时时间还没有得到响应，就抛出错误。这就需要使用timeout参数实现，单位为秒。</p>\n<p>1）指定请求总的超时时间</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token comment\">#向淘宝发出请求，如果1秒内没有得到响应，则抛出错误</span>\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.taobao.com'</span><span class=\"token punctuation\">,</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>2）分别指定超时时间。实际上，请求分为两个阶段：连接（connect）和读取（read）。如果给timeout参数指定一个整数值，则超时时 间是这两个阶段的总和；如果要分别指定，就可以传入一个元组，连接超时时间和读取超时时间：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token comment\">#向淘宝发出请求，如果连接阶段5秒内没有得到响应或读取阶段30秒内没有得到响应，则抛出错误</span>\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.taobao.com'</span><span class=\"token punctuation\">,</span>timeout<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>3）如果想永久等待，可以直接timeout设置为None，或者不设置timeout参数，因为它的默认值就是None。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token comment\">#向淘宝发出请求，如果连接阶段5秒内没有得到响应或读取阶段30秒内没有得到响应，则抛出错误</span>\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.taobao.com'</span><span class=\"token punctuation\">,</span>timeout<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><br/><br/></p>\n<h1><a id=\"_496\"></a>身份验证</h1>\n<p>访问某网站时，可能会遇到如下的验证页面：<br/> <img alt=\"\" src=\"image\\dd7ba428228f45bba6866498ae108287.png\"/><br/> 1）此时可以使用requests自带的身份验证功能，通过HTTPBasicAuth类实现。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>auth <span class=\"token keyword\">import</span> HTTPBasicAuth\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8080/manager/html'</span><span class=\"token punctuation\">,</span>auth<span class=\"token operator\">=</span>HTTPBasicAuth<span class=\"token punctuation\">(</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>​ 如果用户名和密码正确的话，返回200状态码；如果不正确，则返回401状态码。也可以不使用HTTPBasicAuth类，而是直接传入一个 元组，它会默认使用HTTPBasicAuth这个类来验证。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>auth <span class=\"token keyword\">import</span> HTTPBasicAuth\nr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8080/manager/html'</span><span class=\"token punctuation\">,</span>auth<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>2）requests还提供了其他验证方式，如OAuth验证，不过需要安装oauth包，安装命令如下：</p>\n<pre><code class=\"prism language-python\">pip3 install requests_oauthlib\n</code></pre>\n<p>​ 使用OAuth验证的方法如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> requests_oauthlib <span class=\"token keyword\">import</span> OAuth1\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.twitter.com/1.1/account/verify_credentials.json'</span>\nauth <span class=\"token operator\">=</span> OAuth1<span class=\"token punctuation\">(</span><span class=\"token string\">\"YOUR_APP_KEY\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"YOUR_APP_SECRET\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"USER_OAUTH_TOKEN\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"USER_OAUTH_TOKEN_SECRET\"</span><span class=\"token punctuation\">)</span>\nrequests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>auth<span class=\"token operator\">=</span>auth<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><br/><br/></p>\n<h1><a id=\"Prepared_Request_535\"></a>Prepared Request</h1>\n<p>在学习urllib库时，发送请求如果需要设置请求头，需要通过一个Request对象来表示。在requests库中，存在一个与之类似的类，称为Prepared Request。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> requests <span class=\"token keyword\">import</span> Request<span class=\"token punctuation\">,</span>Session\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'http://httpbin.org/post'</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'germey'</span>\n<span class=\"token punctuation\">}</span>\nheaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0'</span>\n<span class=\"token punctuation\">}</span>\ns <span class=\"token operator\">=</span> Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nreq <span class=\"token operator\">=</span> Request<span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>url<span class=\"token punctuation\">,</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span>headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\nprepped <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>prepare_request<span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\nr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>prepped<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这里引入了Request，然后用url、data和headers参数构造了一个Request对象，这时需要再调用Session的prepare_request( )方法将其转换为一个Prepared Request对象，然后调用send( )方法发送。这样做的好处时：可以利用Request将请求当作独立的对象来看待，这样在进行队列调度时会非常方便，后面会用它来构造一个Request队列。<br/> <br/><br/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}