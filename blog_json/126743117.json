{"blogid": "126743117", "writerAge": "码龄2年", "writerBlogNum": "163", "writerCollect": "58", "writerComment": "88", "writerFan": "205", "writerGrade": "5级", "writerIntegral": "2071", "writerName": "踏过山河，踏过海", "writerProfileAdress": "writer_image\\profile_126743117.jpg", "writerRankTotal": "10336", "writerRankWeekly": "39394", "writerThumb": "171", "writerVisitNum": "46827", "blog_read_count": "13", "blog_time": "于 2022-09-07 13:17:12 发布", "blog_title": "++运算符重载,--运算符重载", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>++运算符重载,--运算符重载</h3>\n<ul><li><a href=\"#_2\">++运算符重载(前置++与后置++)</a></li><li><a href=\"#_110\">--运算符重载(前置--与后置--)</a></li><li><a href=\"#_217\">后置++与后置--的优化</a></li><li><ul><li><a href=\"#_275\">优化后后置++完整代码</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>++运算符重载(前置++与后置++)</h1>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//++运算符重载</span>\n<span class=\"token comment\">/*\n当编译器看到++a(前置++),他就调用operator++(a),\n当编译器看到a++(后置++),它就会调用operator++(a,int).\n*/</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">friend</span> ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>out<span class=\"token punctuation\">,</span>Data <span class=\"token operator\">&amp;</span>ob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"无参构造函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"有参构造\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//this-&gt;a=a;</span>\n        <span class=\"token comment\">//this-&gt;b=b;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"a = \"</span><span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\", b = \"</span><span class=\"token operator\">&lt;&lt;</span>b<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"析构函数\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//成员函数 重载前置++  ++ob1 (先加  后使用)</span>\n    <span class=\"token comment\">//编译器 默认识别 operator++(a)//但是a可以用this代替,</span>\n    <span class=\"token comment\">//从而化简operator++()</span>\n    Data<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//++ob1</span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"前置++\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//先加</span>\n        a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//a = this-&gt;a +1;</span>\n        b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//b = this-&gt;b +1;</span>\n        <span class=\"token comment\">//后使用</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//成员函数 重载后置++  ob1++ (先使用  后加)</span>\n    <span class=\"token comment\">//编译器 默认识别 operator++(a,int)//但是a可以用this代替,</span>\n    <span class=\"token comment\">//从而化简operator++(int)</span>\n    Data <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//ob1++</span>\n        <span class=\"token comment\">//先使用(备份加之前的值)</span>\n        Data old <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//后加</span>\n        a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> old<span class=\"token punctuation\">;</span><span class=\"token comment\">//因为old是一个局部的值,所以返回值不能用 引用 ,而是直接返回Data</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//普通全局函数 作为类的友元 重载&gt;&gt;运算符</span>\nostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>out<span class=\"token punctuation\">,</span>Data <span class=\"token operator\">&amp;</span>ob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"重载&lt;&lt;运算符:\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"a = \"</span><span class=\"token operator\">&lt;&lt;</span>ob<span class=\"token punctuation\">.</span>a<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\", b = \"</span><span class=\"token operator\">&lt;&lt;</span>ob<span class=\"token punctuation\">.</span>b<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    Data <span class=\"token function\">ob1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ob1<span class=\"token punctuation\">.</span><span class=\"token function\">showData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//重载&lt;&lt;直接输出自定义对象的值</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>ob1<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//成员函数 重载++运算符</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">++</span>ob1<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    \n    Data <span class=\"token function\">ob2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ob2: \"</span> <span class=\"token operator\">&lt;&lt;</span>ob2<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    Data ret <span class=\"token operator\">=</span> ob2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"ret = \"</span><span class=\"token operator\">&lt;&lt;</span>ret<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>ob2<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<pre><code class=\"prism language-bash\">有参构造\na <span class=\"token operator\">=</span> <span class=\"token number\">10</span>, b <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n重载<span class=\"token operator\">&lt;&lt;</span>运算符:a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>, b <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\n前置++\n重载<span class=\"token operator\">&lt;&lt;</span>运算符:a <span class=\"token operator\">=</span> <span class=\"token number\">11</span>, b <span class=\"token operator\">=</span> <span class=\"token number\">21</span>\n\n有参构造\nob2: 重载<span class=\"token operator\">&lt;&lt;</span>运算符:a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>, b <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\nret <span class=\"token operator\">=</span> 重载<span class=\"token operator\">&lt;&lt;</span>运算符:a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>, b <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\n重载<span class=\"token operator\">&lt;&lt;</span>运算符:a <span class=\"token operator\">=</span> <span class=\"token number\">11</span>, b <span class=\"token operator\">=</span> <span class=\"token number\">21</span>\n\n析构函数\n析构函数\n析构函数\n</code></pre>\n<h1><a id=\"_110\"></a>–运算符重载(前置–与后置–)</h1>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//++运算符重载</span>\n<span class=\"token comment\">/*\n当编译器看到++a(前置++),他就调用operator++(a),\n当编译器看到a++(后置++),它就会调用operator++(a,int).\n*/</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">friend</span> ostream <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>out<span class=\"token punctuation\">,</span> Data <span class=\"token operator\">&amp;</span>ob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"无参构造函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"有参构造\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// this-&gt;a=a;</span>\n        <span class=\"token comment\">// this-&gt;b=b;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"析构函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    Data <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//--ob1</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"前置--\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//先减</span>\n        a<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a = this-&gt;a -1;</span>\n        b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b = this-&gt;b -1;</span>\n        <span class=\"token comment\">//后使用</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    Data <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// ob1--</span>\n        <span class=\"token comment\">//先使用(备份加之前的值)</span>\n        Data old <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//后加</span>\n        a<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> old<span class=\"token punctuation\">;</span> <span class=\"token comment\">//因为old是一个局部的值,所以返回值不能用 引用 ,而是直接返回Data</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//普通全局函数 作为类的友元 重载&gt;&gt;运算符</span>\nostream <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>out<span class=\"token punctuation\">,</span> Data <span class=\"token operator\">&amp;</span>ob<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"重载&lt;&lt;运算符:\"</span>\n         <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> ob<span class=\"token punctuation\">.</span>a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", b = \"</span> <span class=\"token operator\">&lt;&lt;</span> ob<span class=\"token punctuation\">.</span>b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Data <span class=\"token function\">ob3</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ob3:\"</span> <span class=\"token operator\">&lt;&lt;</span> ob3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">--</span>ob3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    Data <span class=\"token function\">ob4</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ob4:\"</span> <span class=\"token operator\">&lt;&lt;</span> ob4 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    Data ret <span class=\"token operator\">=</span> ob4<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"ret\"</span><span class=\"token operator\">&lt;&lt;</span>ret<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"ob4:\"</span><span class=\"token operator\">&lt;&lt;</span>ob4<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果:</p>\n<pre><code class=\"prism language-cpp\">有参构造\nob3<span class=\"token operator\">:</span>重载<span class=\"token operator\">&lt;&lt;</span>运算符<span class=\"token operator\">:</span>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\n前置<span class=\"token operator\">--</span>\n重载<span class=\"token operator\">&lt;&lt;</span>运算符<span class=\"token operator\">:</span>a <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">19</span>\n\n有参构造\nob4<span class=\"token operator\">:</span>重载<span class=\"token operator\">&lt;&lt;</span>运算符<span class=\"token operator\">:</span>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\nret重载<span class=\"token operator\">&lt;&lt;</span>运算符<span class=\"token operator\">:</span>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\nob4<span class=\"token operator\">:</span>重载<span class=\"token operator\">&lt;&lt;</span>运算符<span class=\"token operator\">:</span>a <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">19</span>\n\n析构函数\n析构函数\n析构函数\n</code></pre>\n<h1><a id=\"_217\"></a>后置++与后置–的优化</h1>\n<p>原版:</p>\n<pre><code class=\"prism language-cpp\">Data <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//ob1++</span>\n        <span class=\"token comment\">//先使用(备份加之前的值)</span>\n        Data old <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//后加</span>\n        a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> old<span class=\"token punctuation\">;</span><span class=\"token comment\">//因为old是一个局部的值,所以返回值不能用 引用 ,而是直接返回Data</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\">Data <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n\t\t\t<span class=\"token comment\">// ob1--</span>\n       <span class=\"token comment\">//先使用(备份加之前的值)</span>\n       Data old <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n       <span class=\"token comment\">//后加</span>\n       a<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n       b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> old<span class=\"token punctuation\">;</span> <span class=\"token comment\">//因为old是一个局部的值,所以返回值不能用 引用 ,而是直接返回Data</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>优化后:</p>\n<blockquote>\n<p>因为, old变量是一个局部变量,所以不能用引用来接,<br/> 那么,这就造成在main主函数中,<font color=\"red\">不能写成<br/> cout&lt;&lt;ob1++&lt;&gt;&lt;endl;</font><br/> 必须要加入一个Date rate;变量来接ob1++;</p>\n</blockquote>\n<blockquote>\n<p>要使,<font color=\"red\">cout&lt;&lt;ob1++&lt;&gt;&lt;endl;成立</font>,<br/> 则Data必须返回引用.<br/> <font color=\"red\">使得old不再是局部变量!</font><br/> 方法有:1.使得old变为static变量<br/> 2.使得old成为全局变量</p>\n</blockquote>\n<pre><code class=\"prism language-cpp\">Data<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//ob1++</span>\n        <span class=\"token comment\">//先使用(备份加之前的值)</span>\n        <span class=\"token keyword\">static</span> Data old <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//后加</span>\n        a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> old<span class=\"token punctuation\">;</span><span class=\"token comment\">//因为old是一个局部的值,所以返回值不能用 引用 ,而是直接返回Data</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\">Data<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n\t\t\t<span class=\"token comment\">// ob1--</span>\n       <span class=\"token comment\">//先使用(备份加之前的值)</span>\n       <span class=\"token keyword\">static</span> Data old <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n       <span class=\"token comment\">//后加</span>\n       a<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n       b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> old<span class=\"token punctuation\">;</span> <span class=\"token comment\">//因为old是一个局部的值,所以返回值不能用 引用 ,而是直接返回Data</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_275\"></a>优化后后置++完整代码</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//++运算符重载</span>\n<span class=\"token comment\">/*\n当编译器看到++a(前置++),他就调用operator++(a),\n当编译器看到a++(后置++),它就会调用operator++(a,int).\n*/</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">friend</span> ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>out<span class=\"token punctuation\">,</span>Data <span class=\"token operator\">&amp;</span>ob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"无参构造函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"有参构造\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//this-&gt;a=a;</span>\n        <span class=\"token comment\">//this-&gt;b=b;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"a = \"</span><span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\", b = \"</span><span class=\"token operator\">&lt;&lt;</span>b<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"析构函数\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">//成员函数 重载后置++  ob1++ (先使用  后加)</span>\n    <span class=\"token comment\">//编译器 默认识别 operator++(a,int)//但是a可以用this代替,</span>\n    <span class=\"token comment\">//从而化简operator++(int)</span>\n    Data<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//ob1++</span>\n        <span class=\"token comment\">//先使用(备份加之前的值)</span>\n        <span class=\"token keyword\">static</span> Data old <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//后加</span>\n        a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> old<span class=\"token punctuation\">;</span><span class=\"token comment\">//因为old是一个局部的值,所以返回值不能用 引用 ,而是直接返回Data</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//普通全局函数 作为类的友元 重载&gt;&gt;运算符</span>\nostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>out<span class=\"token punctuation\">,</span>Data <span class=\"token operator\">&amp;</span>ob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"重载&lt;&lt;运算符:\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"a = \"</span><span class=\"token operator\">&lt;&lt;</span>ob<span class=\"token punctuation\">.</span>a<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\", b = \"</span><span class=\"token operator\">&lt;&lt;</span>ob<span class=\"token punctuation\">.</span>b<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n      \n    Data <span class=\"token function\">ob2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ob2: \"</span> <span class=\"token operator\">&lt;&lt;</span>ob2<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"ob2++: \"</span><span class=\"token operator\">&lt;&lt;</span> ob2<span class=\"token operator\">++</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ob2: \"</span> <span class=\"token operator\">&lt;&lt;</span>ob2<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果:</p>\n<pre><code class=\"prism language-bash\">有参构造\nob2: 重载<span class=\"token operator\">&lt;&lt;</span>运算符:a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>, b <span class=\"token operator\">=</span> <span class=\"token number\">20</span>  \n\nob2++: 重载<span class=\"token operator\">&lt;&lt;</span>运算符:a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>, b <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\nob2: 重载<span class=\"token operator\">&lt;&lt;</span>运算符:a <span class=\"token operator\">=</span> <span class=\"token number\">11</span>, b <span class=\"token operator\">=</span> <span class=\"token number\">21</span>  \n\n析构函数\n析构函数\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}