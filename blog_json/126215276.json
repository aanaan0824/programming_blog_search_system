{"blogid": "126215276", "writerAge": "码龄1年", "writerBlogNum": "91", "writerCollect": "6699", "writerComment": "12541", "writerFan": "13071", "writerGrade": "7级", "writerIntegral": "19618", "writerName": "微凉秋意", "writerProfileAdress": "writer_image\\profile_126215276.jpg", "writerRankTotal": "415", "writerRankWeekly": "1", "writerThumb": "7505", "writerVisitNum": "122059", "blog_read_count": "13502", "blog_time": "已于 2022-08-13 19:45:39 修改", "blog_title": "【Rust指南】使用Cargo工具高效创建Rust项目 | 理解Rust特别的输入输出语句", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\307c93c184514bb09efe4dffde404f1b.png\"/><br/> </p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#emspemsp_2\">  前言</a></li><li><a href=\"#Cargo_6\">一、功能强大的Cargo工具</a></li><li><ul><li><a href=\"#1Cargo_7\">1、Cargo工具是什么？</a></li><li><a href=\"#2Cargo_hello_cargo__14\">2、使用Cargo命令创建 hello_cargo 项目</a></li><li><a href=\"#3_29\">3、项目文件目录里各文件的内容和特点</a></li><li><a href=\"#4Cargo__53\">4、Cargo 常用命令</a></li></ul>\n</li><li><a href=\"#Rust__71\">二、Rust 语言的输入输出</a></li><li><ul><li><a href=\"#1_72\">1、输入输出测试</a></li><li><a href=\"#2_92\">2、具体代码解析</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"emspemsp_2\"></a>  前言</h1>\n<p>  本文紧跟上篇Rust博文内容，讲解Cargo工具在Rust项目创建时的妙用，手把手教你使用Cargo工具在黑窗口创建项目。此外，创建项目之后，简单的做一个Rust语言中输入输出的测试，上文提到学好Rust语言的方法就是一步一步打基础，因此仍要潜心修炼，打牢基础。</p>\n<hr/>\n<h1><a id=\"Cargo_6\"></a>一、功能强大的Cargo工具</h1>\n<h2><a id=\"1Cargo_7\"></a>1、Cargo工具是什么？</h2>\n<ul><li><code>Cargo</code> 是Rust 的构建系统和包管理工具，主要功能包括： \n  <ul><li>创建和管理 Rust 的模块系统</li><li>下载和管理依赖库</li><li>调用rustc或其他构建工具来构建项目</li></ul> </li><li>安装Rust 的时候会自动安装Cargo \n  <ul><li>验证的命令： <code>cargo --version</code></li></ul> </li></ul>\n<h2><a id=\"2Cargo_hello_cargo__14\"></a>2、使用Cargo命令创建 hello_cargo 项目</h2>\n<ul><li>命令：<code>cargo new hello_cargo</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\f12bc93c8b5f445f815fca0aa5af7e23.png\"/><br/> 其中<code>code .</code>是VSC工具的命令，意思是使用他来打开项目文件：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\cdc59d3dd5234be5900c66a9385ec132.png\"/></li></ul>\n<p><em>可以看到Cargo工具为我们生成了其他的文件，具体看一下都是什么作用：</em></p>\n<ul><li>自动创建了一个新目录<code>hello_cargo</code>，包含： \n  <ul><li>Cargo.toml</li><li>src目录 \n    <ul><li><code>main.rs</code></li></ul> </li><li>初始化了一个新的Git仓库：<code>.gitignore</code>\n<ul><li>可以使用其他的<code>vcs</code>(版本控制系统)</li><li>或者不适用vcs：<code>cargo new 项目名 --vcs</code></li></ul> </li></ul> </li></ul>\n<h2><a id=\"3_29\"></a>3、项目文件目录里各文件的内容和特点</h2>\n<ol><li> <p>Cargo.toml</p>\n<ul><li>TOML(Tom’s Obvious,Minimal Language)格式，存放Cargo的配置<br/> <img alt=\"在这里插入图片描述\" src=\"image\\aefcc95be7ad4d3389be671694094c57.png\"/></li><li><code>[package]</code>，是一个区域标题，表示下方内容是用来配置包的（package） \n    <ul><li>name：项目名</li><li>version：项目版本</li><li>edition：使用的Rust版本</li></ul> </li><li><code>[dependencies]</code>\n<ul><li>另一个区域的开始，它会列出项目的依赖项。</li></ul> </li><li>在Rust里，代码的包写做：<code>crate</code></li></ul> </li><li> <p>src/main.rs</p>\n<ul><li>cargo生成的 <code>main.rs</code> 在src目录下，此外源代码都应该放在<code>src</code>目录下</li><li>而<code>cargo.toml</code>在项目顶层下</li><li>顶层目录可以放置：RENAME、许可信息、配置文件等</li><li>将非cargo创建的项目转化为cargo的方法： \n    <ul><li>把源代码移动到src里面</li><li>创建cargo.toml并填写相应的配置</li></ul> </li></ul> </li><li> <p>Cargo.lock</p>\n<ul><li>第一次执行<code>Cargo build</code>命令会在顶层目录生成 cargo.lock文件 \n    <ul><li>该文件负责追踪项目依赖的精确版本</li><li>不需要手动修改此文件</li></ul> </li></ul> </li></ol>\n<h2><a id=\"4Cargo__53\"></a>4、Cargo 常用命令</h2>\n<ol><li><code>cargo build</code>\n<ul><li>创建可执行文件：<code>target\\debug\\hello_cargo.exe</code></li></ul> </li><li><code>cargo run</code>\n<ul><li>构建和运行cargo项目，编译代码+执行结果</li><li>如果之前编译过且源码没有发生改变，则会直接运行二进制文件</li></ul> </li><li><code>cargo check</code>\n<ul><li>检查代码，确保能够通过编译，但是不产生任何可执行文件</li><li>cargo check 要比 cargo build 快得多 \n    <ul><li>编写代码得时候可以周期性得使用cargo check命令检查代码，提高效率</li></ul> </li></ul> </li><li><code>cargo build --release</code>\n<ul><li>一共两种配置： \n    <ul><li>开发使用 ：<code>cargo build</code></li><li>正式发布： <code>cargo build --release</code></li></ul> </li><li>为发布构建，编译时会进行优化 \n    <ul><li>代码运行速度会更快，但是编译时间长</li></ul> </li><li>会在<code>target/release</code> 目录下生成可执行文件，而不是 target/debug</li></ul> </li></ol>\n<h1><a id=\"Rust__71\"></a>二、Rust 语言的输入输出</h1>\n<h2><a id=\"1_72\"></a>1、输入输出测试</h2>\n<p><em>源码：</em></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试输入输出功能\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"从键盘输入一个数字：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> a<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无法读取行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输出结果为：{}\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><em>运行效果：</em></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\19aebae1f443484092c3df667521c1f4.png\"/></p>\n<h2><a id=\"2_92\"></a>2、具体代码解析</h2>\n<p><em>接下来把不熟悉的代码依次解释：</em></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> a<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><code>let</code>用来声明变量，<code>mut</code> 代表该变量值可修改，<code>String::new()</code> 意思是调用String类的实例。</p>\n<ul><li>在Rust 中默认变量不可修改，加上mut 才可以被修改</li><li>new 在Rust 中常用来创建类型实例</li><li>这句话的意思就是将一个空白的字符串绑定到可变的字符串变量a上</li></ul>\n</blockquote>\n<hr/>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n<span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无法读取行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><code>use</code>用来引入库，<code>std::io</code>在Rust 中代表标准的输入输出，整体可理解为c中的<code>#include&lt;stdio.h&gt;</code>，<br/> 在io库调用stdin()类里的<code>read_line()</code>方法，而该方法需要传入可变字符串，因此将 <code>&amp;mut a</code>传入，<br/> 为什么要加地址符<code>&amp;</code>呢，这里啊用到了C++里的<code>引用</code>，这样参数列表里字符串的变化会修饰实参a的变化，且不会产生副本，安全高效。最后还有一个<code>ecpect()</code>方法，read_line()方法会返回一个<code>Result</code>枚举类型，含有Ok 和 Err 两个变体。</p>\n</blockquote>\n<blockquote>\n<ul><li>如果Result返回的是<code>Err</code>，那么<code>expect()</code>方法就会中断整行代码并打印expect里的信息。</li><li>如果返回的是<code>OK</code>，那么就会把<code>read_line()</code>方法中得到的值赋给OK一并返回给用户。</li></ul>\n</blockquote>\n<hr/>\n<pre><code class=\"prism language-rust\"><span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输出结果为：{}\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>类似于c 里的 <code>printf(\"输出结果为%d\",a);</code>上面的<code>{}</code>是一个占位符，输出的时候会被后面变量的值取代，有几个<code>{}</code>后面就有多少变量。</p>\n</blockquote>\n<hr/>\n<p><code>本文有关Cargo工具的使用和Rust输入输出的分享到此结束，期待你的鼓励支持~</code></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}