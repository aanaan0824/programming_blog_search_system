{"blogid": "121701492", "writerAge": "码龄3年", "writerBlogNum": "70", "writerCollect": "2289", "writerComment": "492", "writerFan": "299", "writerGrade": "5级", "writerIntegral": "1729", "writerName": "缔宇diyu", "writerProfileAdress": "writer_image\\profile_121701492.jpg", "writerRankTotal": "19807", "writerRankWeekly": "29819", "writerThumb": "514", "writerVisitNum": "211582", "blog_read_count": "61019", "blog_time": "已于 2022-05-05 15:27:34 修改", "blog_title": "Yolov5训练自己的数据集（详细完整版）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<br/>\n<font color=\"red\"> 最近在网上看到有与本博客一模一样的，连图片都一样。<br/>特此声明：这是原版，转载请附原文链接，谢谢。 </font>\n<p>这次我将大部分图片添加了水印</p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#__14\">一. 环境（不能含有中文路径）</a></li><li><a href=\"#__44\">二. 准备工作（文件夹及视频转图片）</a></li><li><a href=\"#_labelImg_78\">三. 使用labelImg标注图片</a></li><li><ul><li><ul><li><a href=\"#1_labellmg_80\">1. 安装labellmg</a></li><li><a href=\"#2_labellmg_132\">2. 使用labellmg</a></li></ul>\n</li></ul>\n</li><li><a href=\"#__166\">四. 划分数据集以及配置文件修改</a></li><li><ul><li><ul><li><a href=\"#1__174\">1. 划分训练集、验证集、测试集</a></li><li><a href=\"#2_XMLyolo_txt_240\">2. XML格式转yolo_txt格式</a></li><li><a href=\"#3__335\">3. 配置文件</a></li><li><a href=\"#3__362\">3. 聚类获得先验框</a></li><li><ul><li><a href=\"#31_anchors_364\">3.1 生成anchors（两种方法）</a></li><li><ul><li><a href=\"#311_anchors_369\">3.1.1 自动获取anchors</a></li><li><a href=\"#312_anchors_394\">3.1.2 手动获取anchors</a></li></ul>\n</li><li><a href=\"#32__590\">3.2 修改模型配置文件</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#__635\">五. 模型训练</a></li><li><ul><li><ul><li><a href=\"#1__637\">1. 开始训练</a></li><li><a href=\"#2__715\">2. 训练过程</a></li><li><a href=\"#3__727\">3. 训练时间</a></li><li><a href=\"#4__736\">4. 相关问题</a></li><li><a href=\"#5__761\">5. 训练可视化</a></li></ul>\n</li></ul>\n</li><li><a href=\"#__773\">六. 检测效果</a></li><li><a href=\"#__798\">七. 模型评估与推理</a></li><li><a href=\"#__800\">八. 参考链接（感谢）</a></li></ul>\n</div>\n<p></p>\n<p>推荐下本人另一篇博客：</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_45945548/article/details/121090907\">最新安装anaconda与tensorflow、pytorch（详细完整版）</a></p>\n</blockquote>\n<h1><a id=\"__14\"></a>一. 环境（不能含有中文路径）</h1>\n<p>本教程使用环境：</p>\n<ul><li> <p>pytorch: 1.10.0</p> </li><li> <p>python: 3.9</p> </li><li> <p>yolov5 v6.0</p> </li></ul>\n<p><font color=\"blue\">ps: 如果要使用GPU，cuda版本要 &gt;=10.1</font></p>\n<p>下载安装yolov5：</p>\n<p><strong>yolov5 v6.0官方要求 Python&gt;=3.6 and PyTorch&gt;=1.7</strong></p>\n<p>yolov5源码下载：<a href=\"https://github.com/ultralytics/yolov5\">https://github.com/ultralytics/yolov5</a></p>\n<p>下载后，进入pytorch环境进入yolov5文件夹，使用换源的方法安装依赖。</p>\n<p>如果你前面安装时没有换源，<font color=\"blue\"><strong>我强烈建议你使用换源的方法在安装一次</strong></font></p>\n<p>安装过的模块不会在安装，<strong>以防缺少模块，影响后续程序运行以及模型训练。</strong></p>\n<pre><code class=\"prism language-python\">pip install <span class=\"token operator\">-</span>r requirements<span class=\"token punctuation\">.</span>txt <span class=\"token operator\">-</span>i  https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>pypi<span class=\"token punctuation\">.</span>tuna<span class=\"token punctuation\">.</span>tsinghua<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">/</span>simple\n</code></pre>\n<blockquote>\n<p>因为本教程主详细讲解训练自己的数据集，避免篇幅过多，因此这里不详细说明了。</p>\n</blockquote>\n<h1><a id=\"__44\"></a>二. 准备工作（文件夹及视频转图片）</h1>\n<p>因为这篇文章主要是给小白提供，所以数据集文件夹以及代码文件命名不是很标准，标准的自行去搜索查看coco数据集就行了。</p>\n<p><font color=\"blue\">为了排除一些意外情况，路径中就不要有短横杠<kbd>-</kbd>以及空格等等特殊字符。中文更不能要有。</font></p>\n<ol><li>在 yolov5目录下 新建文件夹 <strong>VOCData</strong>（可以自定义命名）</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\05b36ae388f7495cbc8b172cf69b4c4c.png\"/></p>\n<ol start=\"2\"><li>在VOCData下新建两个文件夹 <strong>Annotations</strong> 以及 <strong>images</strong></li></ol>\n<p><strong>images</strong>：用于存放要标注的图片（jpg格式）</p>\n<blockquote>\n<p>这个和后续产生的 labels文件夹<strong>命名来源于</strong>yolov5/utils/datasets.py的第372行，你可进行查看。</p>\n</blockquote>\n<p><strong>Annotations</strong> ：用于存放标注图片后产生的内容（这里采用XML格式）</p>\n<p><strong>后续使用代码保存位置如图</strong></p>\n<p>本教程需要用到图中的代码文件，这里先不用管，后面会给出代码。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6efc252dc9bb4d97bc0f5691fe13c320.png\"/></p>\n<p>这里提供本人编写的python代码，用于将视频转图片。</p>\n<p>只需更改两个参数，视频路径以及间隔多少帧取图片。</p>\n<p><a href=\"https://blog.csdn.net/qq_45945548/article/details/121695436\">python实现视频转图片_diyu-CSDN博客</a></p>\n<blockquote>\n<p>代码运行，<strong>需要装有opencv模块</strong>，装opencv模块前需要装numpy模块。<br/> 所以，你可以选择进入pytorch环境进入代码所在文件夹，用命令行形式运行程序。</p>\n</blockquote>\n<h1><a id=\"_labelImg_78\"></a>三. 使用labelImg标注图片</h1>\n<h3><a id=\"1_labellmg_80\"></a>1. 安装labellmg</h3>\n<p>labelImg下载：<a href=\"https://github.com/tzutalin/labelImg\">https://github.com/tzutalin/labelImg</a></p>\n<p>各种安装方法都在此链接中，这里只给出 windows +anaconda 进行安装。</p>\n<blockquote>\n<p>ps: 如果你进入不了github，这里给出百度网盘链接</p>\n<p>labellImg百度网盘链接：<a href=\"https://pan.baidu.com/s/1odKMu9nY6ueVJsiQwYRnkw\">https://pan.baidu.com/s/1odKMu9nY6ueVJsiQwYRnkw</a><br/> 提取码：diyu</p>\n</blockquote>\n<p>此labelImg是采用命令行形式运行，需要使用命令行安装一些依赖。</p>\n<p>如果你认为这个太麻烦，网上有人打包好了此软件，可以自行去下载。</p>\n<p><strong>本人labellmg存放位置</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9f1c0bae325549e7bc7d59e76fccbd9f.png\"/></p>\n<p>打开 <strong>anaconda prompt</strong> （类似于cmd）</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c9f0a975938f407883a944d21e337c01.png\"/></p>\n<p>进入 labellmg文件夹</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\eee38f1fb56a41b4863a02e663589f18.png\"/></p>\n<p>我建议就在base环境下进行安装labellmg，方便一点，你也可以进入pytorch环境下安装。</p>\n<p>在哪个环境安装的就在哪个环境下启动软件。</p>\n<p>执行命令前，建议更新一下conda<br/> <code>conda update -n base -c defaults conda</code></p>\n<blockquote>\n<p>-n：指定更新哪个环境的conda，这里是base环境</p>\n</blockquote>\n<p>windows +anaconda 安装方式如下：</p>\n<p><strong>依次执行下面命令</strong> （不要连接外网）</p>\n<pre><code class=\"prism language-python\">conda install pyqt<span class=\"token operator\">=</span><span class=\"token number\">5</span>\nconda install <span class=\"token operator\">-</span>c anaconda lxml\npyrcc5 <span class=\"token operator\">-</span>o libs<span class=\"token operator\">/</span>resources<span class=\"token punctuation\">.</span>py resources<span class=\"token punctuation\">.</span>qrc\n</code></pre>\n<h3><a id=\"2_labellmg_132\"></a>2. 使用labellmg</h3>\n<p>运行软件前可以更改下要标注的类别。</p>\n<blockquote>\n<p>也可以进入软件后添加，不过那样每次进入软件都要添加，麻烦。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6e049268b0d5482c85f798f801f38682.png\"/></p>\n<p>打开labellmg（要进入labellmg文件夹）</p>\n<pre><code class=\"prism language-python\">python labelImg<span class=\"token punctuation\">.</span>py   <span class=\"token comment\">#运行软件</span>\n</code></pre>\n<p>勾选 <strong>auto save mode</strong> 自动保存</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ca3cb2159aca4374bc353e3a9530f9b1.png\"/><br/> 图片重新上传加了水印，模糊了见谅<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f6f10acc8df24d5187cdccf1672cae5b.png\"/></p>\n<p>格式就默认是XML格式，可以更改成yolo，这里就使用默认的XML格式</p>\n<p>点击左方边栏或者屏幕右键选择 <strong>Create RectBox</strong> 即可进行标注。</p>\n<p><font color=\"red\"> 尽可能的完全拟合标注物体</font>，建议放大标注，也别放大狠了哈。</p>\n<p>其它看个人标准。</p>\n<blockquote>\n<p>如果数据集很多的话，可以考虑自动标注，当然，也不是全自动哈。</p>\n</blockquote>\n<p><img alt=\"image-20211203131029366\" src=\"image\\4cbaf056998b166f4ea4d38852fb4b54.png\"/></p>\n<h1><a id=\"__166\"></a>四. 划分数据集以及配置文件修改</h1>\n<p><strong>运行代码方式</strong></p>\n<ul><li> <p>第一种：使用pycharm、vscode、python自带的IDLE。如果出现缺少模块的情况（no module named），你可以安装模块，也可以使用后一种方法。</p> </li><li> <p>第二种：进入pytorch环境，进入代码所在目录，使用命令行形式运行（python + 程序名）</p> </li></ul>\n<h3><a id=\"1__174\"></a>1. 划分训练集、验证集、测试集</h3>\n<p>在VOCData目录下创建程序 <code>split_train_val.py</code> 并运行</p>\n<p>程序如下：（可以不更改）</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># coding:utf-8</span>\n\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> argparse\n\nparser <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>ArgumentParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#xml文件的地址，根据自己的数据进行修改 xml一般存放在Annotations下</span>\nparser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--xml_path'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'Annotations'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'input xml label path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#数据集的划分，地址选择自己数据下的ImageSets/Main</span>\nparser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--txt_path'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'ImageSets/Main'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'output txt label path'</span><span class=\"token punctuation\">)</span>\nopt <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ntrainval_percent <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span>  <span class=\"token comment\"># 训练集和验证集所占比例。 这里没有划分测试集</span>\ntrain_percent <span class=\"token operator\">=</span> <span class=\"token number\">0.9</span>     <span class=\"token comment\"># 训练集所占比例，可自己进行调整</span>\nxmlfilepath <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>xml_path\ntxtsavepath <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>txt_path\ntotal_xml <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>xmlfilepath<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>txtsavepath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    os<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span>txtsavepath<span class=\"token punctuation\">)</span>\n\nnum <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>total_xml<span class=\"token punctuation\">)</span>\nlist_index <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\ntv <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">*</span> trainval_percent<span class=\"token punctuation\">)</span>\ntr <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>tv <span class=\"token operator\">*</span> train_percent<span class=\"token punctuation\">)</span>\ntrainval <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>sample<span class=\"token punctuation\">(</span>list_index<span class=\"token punctuation\">,</span> tv<span class=\"token punctuation\">)</span>\ntrain <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>sample<span class=\"token punctuation\">(</span>trainval<span class=\"token punctuation\">,</span> tr<span class=\"token punctuation\">)</span>\n\nfile_trainval <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>txtsavepath <span class=\"token operator\">+</span> <span class=\"token string\">'/trainval.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\nfile_test <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>txtsavepath <span class=\"token operator\">+</span> <span class=\"token string\">'/test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\nfile_train <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>txtsavepath <span class=\"token operator\">+</span> <span class=\"token string\">'/train.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\nfile_val <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>txtsavepath <span class=\"token operator\">+</span> <span class=\"token string\">'/val.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> list_index<span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> total_xml<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span>\n    <span class=\"token keyword\">if</span> i <span class=\"token keyword\">in</span> trainval<span class=\"token punctuation\">:</span>\n        file_trainval<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token keyword\">in</span> train<span class=\"token punctuation\">:</span>\n            file_train<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            file_val<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        file_test<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\nfile_trainval<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfile_train<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfile_val<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfile_test<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行完毕后 会生成 <strong>ImagesSets\\Main</strong> 文件夹，且在其下生成 测试集、训练集、验证集，存放图片的名字（无后缀.jpg）</p>\n<blockquote>\n<p>由于没有分配测试集，所以测试集为空。</p>\n<p>若要分配，更改第 14、15 行代码，更改所在比例即可。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fe66acb720e7498fa1973c163516c88f.png\"/></p>\n<h3><a id=\"2_XMLyolo_txt_240\"></a>2. XML格式转yolo_txt格式</h3>\n<p>在VOCData目录下创建程序 <code>text_to_yolo.py</code> 并运行</p>\n<blockquote>\n<p>命名随意，我后面改成了 <strong>xml_to_yolo.py</strong>，更加的贴切。</p>\n</blockquote>\n<p>程序如下：</p>\n<p><strong>需要将第 7 行改成自己所标注的类别 以及修改各绝对路径</strong></p>\n<blockquote>\n<p>绝对路径需为：d:\\\\images 或者 d:/images<br/> 双右斜线或者单左斜线</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> xml<span class=\"token punctuation\">.</span>etree<span class=\"token punctuation\">.</span>ElementTree <span class=\"token keyword\">as</span> ET\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> os <span class=\"token keyword\">import</span> getcwd\n\nsets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'val'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">]</span>\nclasses <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"light\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">]</span>   <span class=\"token comment\"># 改成自己的类别</span>\nabs_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>abs_path<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    dw <span class=\"token operator\">=</span> <span class=\"token number\">1.</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    dh <span class=\"token operator\">=</span> <span class=\"token number\">1.</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> box<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> box<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    w <span class=\"token operator\">=</span> box<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> box<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    h <span class=\"token operator\">=</span> box<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> box<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n    x <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> dw\n    w <span class=\"token operator\">=</span> w <span class=\"token operator\">*</span> dw\n    y <span class=\"token operator\">=</span> y <span class=\"token operator\">*</span> dh\n    h <span class=\"token operator\">=</span> h <span class=\"token operator\">*</span> dh\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> h\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert_annotation</span><span class=\"token punctuation\">(</span>image_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    in_file <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'D:/Yolov5/yolov5/VOCData/Annotations/%s.xml'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>image_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'UTF-8'</span><span class=\"token punctuation\">)</span>\n    out_file <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'D:/Yolov5/yolov5/VOCData/labels/%s.txt'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>image_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\n    tree <span class=\"token operator\">=</span> ET<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>in_file<span class=\"token punctuation\">)</span>\n    root <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">.</span>getroot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    size <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'size'</span><span class=\"token punctuation\">)</span>\n    w <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n    h <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'height'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> obj <span class=\"token keyword\">in</span> root<span class=\"token punctuation\">.</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        difficult <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'difficult'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text\n        <span class=\"token comment\">#difficult = obj.find('Difficult').text</span>\n        cls <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text\n        <span class=\"token keyword\">if</span> cls <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> classes <span class=\"token keyword\">or</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>difficult<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n        cls_id <span class=\"token operator\">=</span> classes<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span>\n        xmlbox <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'bndbox'</span><span class=\"token punctuation\">)</span>\n        b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>xmlbox<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'xmin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>xmlbox<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'xmax'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>xmlbox<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'ymin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n             <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>xmlbox<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'ymax'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        b1<span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">,</span> b3<span class=\"token punctuation\">,</span> b4 <span class=\"token operator\">=</span> b\n        <span class=\"token comment\"># 标注越界修正</span>\n        <span class=\"token keyword\">if</span> b2 <span class=\"token operator\">&gt;</span> w<span class=\"token punctuation\">:</span>\n            b2 <span class=\"token operator\">=</span> w\n        <span class=\"token keyword\">if</span> b4 <span class=\"token operator\">&gt;</span> h<span class=\"token punctuation\">:</span>\n            b4 <span class=\"token operator\">=</span> h\n        b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">,</span> b3<span class=\"token punctuation\">,</span> b4<span class=\"token punctuation\">)</span>\n        bb <span class=\"token operator\">=</span> convert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n        out_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>cls_id<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span> bb<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\nwd <span class=\"token operator\">=</span> getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> image_set <span class=\"token keyword\">in</span> sets<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">'D:/Yolov5/yolov5/VOCData/labels/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span><span class=\"token string\">'D:/Yolov5/yolov5/VOCData/labels/'</span><span class=\"token punctuation\">)</span>\n    image_ids <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'D:/Yolov5/yolov5/VOCData/ImageSets/Main/%s.txt'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>image_set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   \n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">'D:/Yolov5/yolov5/VOCData/dataSet_path/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span><span class=\"token string\">'D:/Yolov5/yolov5/VOCData/dataSet_path/'</span><span class=\"token punctuation\">)</span>\n     \n    list_file <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dataSet_path/%s.txt'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>image_set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 这行路径不需更改，这是相对路径</span>\n    <span class=\"token keyword\">for</span> image_id <span class=\"token keyword\">in</span> image_ids<span class=\"token punctuation\">:</span>\n        list_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'D:/Yolov5/yolov5/VOCData/images/%s.jpg\\n'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>image_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        convert_annotation<span class=\"token punctuation\">(</span>image_id<span class=\"token punctuation\">)</span>\n    list_file<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行后会生成如下 <strong>labels</strong> 文件夹和 <strong>dataSet_path</strong> 文件夹。</p>\n<p>其中 <strong>labels</strong> 中为不同图像的标注文件。每个图像对应一个txt文件，文件每一行为一个目标的信息，包括class, x_center, y_center, width, height格式，这种即为 yolo_txt格式</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b5af2682a5d14bcebaee8cf59db4e43c.png\"/></p>\n<p><strong>dataSet_path</strong>文件夹包含三个数据集的txt文件，train.txt等txt文件为划分后图像所在位置的路径，如train.txt就含有所有训练集图像的路径。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\338b5dbdb99d4f9daf33e30a41305981.png\"/></p>\n<h3><a id=\"3__335\"></a>3. 配置文件</h3>\n<p>在 yolov5 目录下的 data 文件夹下 <strong>新建一个 myvoc.yaml文件</strong>（可以自定义命名），用记事本打开。</p>\n<p>内容是：</p>\n<p>训练集以及验证集（train.txt和val.txt）的路径（<strong>可以改为相对路径</strong>）</p>\n<p>以及 目标的类别数目和类别名称。</p>\n<blockquote>\n<p>注意这里的类别名称顺序，如果训练的结果是反的，这里修改重新训练。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\987e75c1531e4bf68a535e08fd4d81f3.png\"/></p>\n<p>给出模板： <strong>冒号后面需要加空格</strong></p>\n<pre><code class=\"prism language-python\">train<span class=\"token punctuation\">:</span> D<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>Yolov5<span class=\"token operator\">/</span>yolov5<span class=\"token operator\">/</span>VOCData<span class=\"token operator\">/</span>dataSet_path<span class=\"token operator\">/</span>train<span class=\"token punctuation\">.</span>txt\nval<span class=\"token punctuation\">:</span> D<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>Yolov5<span class=\"token operator\">/</span>yolov5<span class=\"token operator\">/</span>VOCData<span class=\"token operator\">/</span>dataSet_path<span class=\"token operator\">/</span>val<span class=\"token punctuation\">.</span>txt\n\n<span class=\"token comment\"># number of classes</span>\nnc<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n\n<span class=\"token comment\"># class names</span>\nnames<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"light\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h3><a id=\"3__362\"></a>3. 聚类获得先验框</h3>\n<h4><a id=\"31_anchors_364\"></a>3.1 生成anchors（两种方法）</h4>\n<p>有自动法以及手动法。</p>\n<p><font color=\"red\">鉴于很多人在生成anchors文件这里出错，因此补上自动法</font></p>\n<h5><a id=\"311_anchors_369\"></a>3.1.1 自动获取anchors</h5>\n<p>如果目录 yolov5/utils下有 autoanchor.py文件，那么就可以采用自动获取anchors。（yolov5版本偏低是没有的）</p>\n<p><strong>如果没有此文件。那么就只能手动获取更改anchors</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a3122378f3a0491bb0718408646cb82c.png\"/><br/> 确保 yolov5/data/hyps/hyp.cratch.yaml中的anchors这行是<strong>注释掉的</strong>。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\df35dbe429624c19946d5d708430597e.png\"/></p>\n<p><font color=\"blue\">采用自动法的话，不用运行，训练时自动调用</font></p>\n<p>如果自动获取anchors的话，训练时只要不添加参数 --noautoanchor（后面会介绍），就会自动运行autoanchor.py。</p>\n<p>原理就是通过检测计算 Best Possible Recall (BPR)，来判断是否重新计算anchors。如果BPR&lt;0.98时（最高是1），会自动通过k-means（欧式距离）聚类得到新的anchors。</p>\n<p>图中大于0.98，所以没有更新anchors。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e2b34ece25f748d4912789fcba9e2c98.png\"/><br/> 我这里不清楚 BPR&lt;0.98的具体情况，我只知道会重新计算anchors，但是是否需要我们将重新生成的anchors像手动法那样去修改anchors就不清楚了。<br/> <strong>按理应该是不需要的</strong>，如果训练时重新生成anchors后会停止训练，那么应该是需要我们修改ahchors。</p>\n<h5><a id=\"312_anchors_394\"></a>3.1.2 手动获取anchors</h5>\n<p>在VOCData目录下创建程序两个程序 <code>kmeans.py</code> 以及 <code>clauculate_anchors.py</code></p>\n<p>不需要运行 kmeans.py，运行 clauculate_anchors.py 即可。</p>\n<p><strong>kmeans.py</strong> 程序如下：这不需要运行，也不需要更改</p>\n<blockquote>\n<p>如果报错，可以查看第 13 行内容</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">iou</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> clusters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Calculates the Intersection over Union (IoU) between a box and k clusters.\n    :param box: tuple or array, shifted to the origin (i. e. width and height)\n    :param clusters: numpy array of shape (k, 2) where k is the number of clusters\n    :return: numpy array of shape (k, 0) where k is the number of clusters\n    \"\"\"</span>\n    x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">(</span>clusters<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    y <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">(</span>clusters<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> np<span class=\"token punctuation\">.</span>count_nonzero<span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> np<span class=\"token punctuation\">.</span>count_nonzero<span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Box has no area\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 如果报这个错，可以把这行改成pass即可</span>\n\n    intersection <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> y\n    box_area <span class=\"token operator\">=</span> box<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> box<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    cluster_area <span class=\"token operator\">=</span> clusters<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> clusters<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    iou_ <span class=\"token operator\">=</span> intersection <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>box_area <span class=\"token operator\">+</span> cluster_area <span class=\"token operator\">-</span> intersection<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> iou_\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">avg_iou</span><span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">,</span> clusters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Calculates the average Intersection over Union (IoU) between a numpy array of boxes and k clusters.\n    :param boxes: numpy array of shape (r, 2), where r is the number of rows\n    :param clusters: numpy array of shape (k, 2) where k is the number of clusters\n    :return: average IoU as a single float\n    \"\"\"</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>iou<span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> clusters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">translate_boxes</span><span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Translates all the boxes to the origin.\n    :param boxes: numpy array of shape (r, 4)\n    :return: numpy array of shape (r, 2)\n    \"\"\"</span>\n    new_boxes <span class=\"token operator\">=</span> boxes<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>new_boxes<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        new_boxes<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>new_boxes<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> new_boxes<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        new_boxes<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>new_boxes<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> new_boxes<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span>new_boxes<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">kmeans</span><span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> dist<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>median<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Calculates k-means clustering with the Intersection over Union (IoU) metric.\n    :param boxes: numpy array of shape (r, 2), where r is the number of rows\n    :param k: number of clusters\n    :param dist: distance function\n    :return: numpy array of shape (k, 2)\n    \"\"\"</span>\n    rows <span class=\"token operator\">=</span> boxes<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    distances <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    last_clusters <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># the Forgy method will fail if the whole array contains the same rows</span>\n    clusters <span class=\"token operator\">=</span> boxes<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> replace<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            distances<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> iou<span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> clusters<span class=\"token punctuation\">)</span>\n\n        nearest_clusters <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last_clusters <span class=\"token operator\">==</span> nearest_clusters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n\n        <span class=\"token keyword\">for</span> cluster <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            clusters<span class=\"token punctuation\">[</span>cluster<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">[</span>nearest_clusters <span class=\"token operator\">==</span> cluster<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n        last_clusters <span class=\"token operator\">=</span> nearest_clusters\n\n    <span class=\"token keyword\">return</span> clusters\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>translate_boxes<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行：<code>clauculate_anchors.py </code></p>\n<p>会调用 kmeans.py 聚类生成新anchors的文件</p>\n<p>程序如下：</p>\n<p><strong>需要更改第 9 、13行文件绝对路径 以及 第 16 行标注类别名称</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># 根据标签文件求先验框</span>\n\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> xml<span class=\"token punctuation\">.</span>etree<span class=\"token punctuation\">.</span>cElementTree <span class=\"token keyword\">as</span> et\n<span class=\"token keyword\">from</span> kmeans <span class=\"token keyword\">import</span> kmeans<span class=\"token punctuation\">,</span> avg_iou\n\nFILE_ROOT <span class=\"token operator\">=</span> <span class=\"token string\">\"D:/Yolov5/yolov5/VOCData/\"</span>     <span class=\"token comment\"># 根路径</span>\nANNOTATION_ROOT <span class=\"token operator\">=</span> <span class=\"token string\">\"Annotations\"</span>   <span class=\"token comment\"># 数据集标签文件夹路径</span>\nANNOTATION_PATH <span class=\"token operator\">=</span> FILE_ROOT <span class=\"token operator\">+</span> ANNOTATION_ROOT\n\nANCHORS_TXT_PATH <span class=\"token operator\">=</span> <span class=\"token string\">\"D:/Yolov5/yolov5/VOCData/anchors.txt\"</span>   <span class=\"token comment\">#anchors文件保存位置</span>\n\nCLUSTERS <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\nCLASS_NAMES <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">]</span>   <span class=\"token comment\">#类别名称</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">load_data</span><span class=\"token punctuation\">(</span>anno_dir<span class=\"token punctuation\">,</span> class_names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    xml_names <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>anno_dir<span class=\"token punctuation\">)</span>\n    boxes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> xml_name <span class=\"token keyword\">in</span> xml_names<span class=\"token punctuation\">:</span>\n        xml_pth <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>anno_dir<span class=\"token punctuation\">,</span> xml_name<span class=\"token punctuation\">)</span>\n        tree <span class=\"token operator\">=</span> et<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>xml_pth<span class=\"token punctuation\">)</span>\n\n        width <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>findtext<span class=\"token punctuation\">(</span><span class=\"token string\">\"./size/width\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        height <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>findtext<span class=\"token punctuation\">(</span><span class=\"token string\">\"./size/height\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> obj <span class=\"token keyword\">in</span> tree<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"./object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            cls_name <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>findtext<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> cls_name <span class=\"token keyword\">in</span> class_names<span class=\"token punctuation\">:</span>\n                xmin <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>findtext<span class=\"token punctuation\">(</span><span class=\"token string\">\"bndbox/xmin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> width\n                ymin <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>findtext<span class=\"token punctuation\">(</span><span class=\"token string\">\"bndbox/ymin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> height\n                xmax <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>findtext<span class=\"token punctuation\">(</span><span class=\"token string\">\"bndbox/xmax\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> width\n                ymax <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>findtext<span class=\"token punctuation\">(</span><span class=\"token string\">\"bndbox/ymax\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> height\n\n                box <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>xmax <span class=\"token operator\">-</span> xmin<span class=\"token punctuation\">,</span> ymax <span class=\"token operator\">-</span> ymin<span class=\"token punctuation\">]</span>\n                boxes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\n    anchors_txt <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>ANCHORS_TXT_PATH<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span>\n\n    train_boxes <span class=\"token operator\">=</span> load_data<span class=\"token punctuation\">(</span>ANNOTATION_PATH<span class=\"token punctuation\">,</span> CLASS_NAMES<span class=\"token punctuation\">)</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    best_accuracy <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    best_anchors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    best_ratios <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\">##### 可以修改，不要太大，否则时间很长</span>\n        anchors_tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        clusters <span class=\"token operator\">=</span> kmeans<span class=\"token punctuation\">(</span>train_boxes<span class=\"token punctuation\">,</span> k<span class=\"token operator\">=</span>CLUSTERS<span class=\"token punctuation\">)</span>\n        idx <span class=\"token operator\">=</span> clusters<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argsort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        clusters <span class=\"token operator\">=</span> clusters<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># print(clusters)</span>\n\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>CLUSTERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            anchor <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>clusters<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>clusters<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n            anchors_tmp<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>anchor<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Anchors:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>anchor<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n        temp_accuracy <span class=\"token operator\">=</span> avg_iou<span class=\"token punctuation\">(</span>train_boxes<span class=\"token punctuation\">,</span> clusters<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Train_Accuracy:{:.2f}%\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>temp_accuracy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        ratios <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>around<span class=\"token punctuation\">(</span>clusters<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> clusters<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> decimals<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        ratios<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ratios:{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>ratios<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">*</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" {} \"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span> <span class=\"token operator\">*</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>\n\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">if</span> temp_accuracy <span class=\"token operator\">&gt;</span> best_accuracy<span class=\"token punctuation\">:</span>\n            best_accuracy <span class=\"token operator\">=</span> temp_accuracy\n            best_anchors <span class=\"token operator\">=</span> anchors_tmp\n            best_ratios <span class=\"token operator\">=</span> ratios\n\n    anchors_txt<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"Best Accuracy = \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>best_accuracy<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'%'</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span>\n    anchors_txt<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"Best Anchors = \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>best_anchors<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span>\n    anchors_txt<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"Best Ratios = \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>best_ratios<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    anchors_txt<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>会生成anchors文件。<strong>如果生成文件为空，重新运行即可</strong>。</p>\n<blockquote>\n<p>如果还是为空，看下是不是类别没有更改。</p>\n</blockquote>\n<p>第二行 Best Anchors 后面需要用到。（这就是手动获取到的anchors的值）</p>\n<p><img alt=\"image-20211203143057111\" src=\"image\\41f396a5a6f50d34f4eddce46bffe132.png\"/></p>\n<h4><a id=\"32__590\"></a>3.2 修改模型配置文件</h4>\n<p>选择一个模型，在yolov5目录下的model文件夹下是模型的配置文件，有n、s、m、l、x版本，逐渐增大（随着架构的增大，训练时间也是逐渐增大）。</p>\n<p>这里放一些官方数据：<a href=\"https://github.com/ultralytics/yolov5\">GitHub - ultralytics/yolov5</a></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\51a0a587e2f97ff340b583665bd2011a.png\"/></p>\n<table><thead><tr><th>Model</th><th>size (pixels)</th><th>mAPval 0.5:0.95</th><th>mAPval 0.5</th><th>Speed CPU b1 (ms)</th><th>Speed V100 b1 (ms)</th><th>Speed V100 b32 (ms)</th><th>params (M)</th><th>FLOPs @640 (B)</th></tr></thead><tbody><tr><td><a href=\"https://github.com/ultralytics/yolov5/releases\">YOLOv5n</a></td><td>640</td><td>28.4</td><td>46.0</td><td><strong>45</strong></td><td><strong>6.3</strong></td><td><strong>0.6</strong></td><td><strong>1.9</strong></td><td><strong>4.5</strong></td></tr><tr><td><a href=\"https://github.com/ultralytics/yolov5/releases\">YOLOv5s</a></td><td>640</td><td>37.2</td><td>56.0</td><td>98</td><td>6.4</td><td>0.9</td><td>7.2</td><td>16.5</td></tr><tr><td><a href=\"https://github.com/ultralytics/yolov5/releases\">YOLOv5m</a></td><td>640</td><td>45.2</td><td>63.9</td><td>224</td><td>8.2</td><td>1.7</td><td>21.2</td><td>49.0</td></tr><tr><td><a href=\"https://github.com/ultralytics/yolov5/releases\">YOLOv5l</a></td><td>640</td><td>48.8</td><td>67.2</td><td>430</td><td>10.1</td><td>2.7</td><td>46.5</td><td>109.1</td></tr><tr><td><a href=\"https://github.com/ultralytics/yolov5/releases\">YOLOv5x</a></td><td>640</td><td>50.7</td><td>68.9</td><td>766</td><td>12.1</td><td>4.8</td><td>86.7</td><td>205.7</td></tr></tbody></table>\n<br/>\n<p><strong>这里选用 yolov5s.yaml</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5d8ffdefde9a41b492c52ca9450ba239.png\"/></p>\n<p>使用记事本打开 yolov5s.yaml。</p>\n<p><font size=\"5\"><strong>修改参数</strong>。</font></p>\n<ul><li><font color=\"red\">采用自动法获取anchors，只需更改nc 标注类别数，不用更改anchors</font></li></ul>\n<blockquote>\n<p>按理应该是不需修改anchors的，我在前面自动法那里提过，如果后续训练时自动计算出了anchors后暂停了训练，那么应该是需要我们根据生成的anchors来修改。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5ecde9f23eae4d15b951e92e318c85d2.png\"/></p>\n<ul><li><font color=\"red\">手动法获取anchors需要更改两个参数</font></li></ul>\n<p>把 nc 改成自己的标注类别数</p>\n<p>修改anchors，根据 anchors.txt 中的 Best Anchors 修改，<strong>需要取整</strong>（四舍五入、向上、向下都可以）。</p>\n<p>保持yaml中的anchors格式不变，按顺序一对一即可。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\790b3190b1ee43838c946e8a5d5652ad.png\"/></p>\n<h1><a id=\"__635\"></a>五. 模型训练</h1>\n<h3><a id=\"1__637\"></a>1. 开始训练</h3>\n<p>打开yolov5 目录下的 train.py 程序，我们可以多看看这些参数使用。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\14401ce6be12491299837345830c926b.png\"/></p>\n<p>常用参数解释如下：</p>\n<blockquote>\n<p>这个大部分借鉴了参考链接。</p>\n</blockquote>\n<p><strong>weights</strong>：权重文件路径</p>\n<p><strong>cfg</strong>：存储模型结构的配置文件</p>\n<p><strong>data</strong>：存储训练、测试数据的文件</p>\n<p><strong>epochs</strong>：指的就是训练过程中整个数据集将被迭代（训练）了多少次，显卡不行你就调小点。</p>\n<p><strong>batch-size</strong>：训练完多少张图片才进行权重更新，显卡不行就调小点。</p>\n<p><strong>img-size</strong>：输入图片宽高，显卡不行就调小点。</p>\n<p><strong>device</strong>：cuda device, i.e. 0 or 0,1,2,3 or cpu。选择使用GPU还是CPU</p>\n<p><strong>workers</strong>：线程数。默认是8。</p>\n<p>其它参数解释：</p>\n<blockquote>\n<p><strong>noautoanchor：不自动检验更新anchors</strong><br/> rect：进行矩形训练</p>\n<p>resume：恢复最近保存的模型开始训练</p>\n<p>nosave：仅保存最终checkpoint</p>\n<p>notest：仅测试最后的epoch</p>\n<p>evolve：进化超参数</p>\n<p>bucket：gsutil bucket</p>\n<p>cache-images：缓存图像以加快训练速度</p>\n<p>name： 重命名results.txt to results_name.txt</p>\n<p>adam：使用adam优化</p>\n<p>multi-scale：多尺度训练，img-size +/- 50%</p>\n<p>single-cls：单类别的训练集</p>\n</blockquote>\n<p>进入pytorch环境，进入yolov5文件夹</p>\n<p><img alt=\"image-20211203151106596\" src=\"image\\8fd4698c2425397bb4b7f25bd19064df.png\"/></p>\n<p><strong>训练命令如下：</strong></p>\n<p><font color=\"red\" size=\"5\"> <strong>如果出现问题，查看后面问题说明！</strong></font></p>\n<pre><code class=\"prism language-python\">python train<span class=\"token punctuation\">.</span>py <span class=\"token operator\">-</span><span class=\"token operator\">-</span>weights weights<span class=\"token operator\">/</span>yolov5s<span class=\"token punctuation\">.</span>pt  <span class=\"token operator\">-</span><span class=\"token operator\">-</span>cfg models<span class=\"token operator\">/</span>yolov5s<span class=\"token punctuation\">.</span>yaml  <span class=\"token operator\">-</span><span class=\"token operator\">-</span>data data<span class=\"token operator\">/</span>myvoc<span class=\"token punctuation\">.</span>yaml <span class=\"token operator\">-</span><span class=\"token operator\">-</span>epoch <span class=\"token number\">200</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span>batch<span class=\"token operator\">-</span>size <span class=\"token number\">8</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span>img <span class=\"token number\">640</span>   <span class=\"token operator\">-</span><span class=\"token operator\">-</span>device cpu\n</code></pre>\n<p>–weights weights/yolov5s.pt ：这个也许你需要更改路径。我是将yolov5的pt文件都放在weights目录下，你可能没有，需要更改路径。</p>\n<p>–epoch 200 ：训练200次</p>\n<p>–batch-size 8：训练8张图片后进行权重更新</p>\n<p>–device cpu：使用CPU训练。</p>\n<p><font color=\"blue\">如果采用手动法获取anchors，可以选择补充添加参数 --noautoanchor，也可以不添加（解释如下）</font></p>\n<p>参数解释在上面。如果是自动法，这个参数不要加；</p>\n<blockquote>\n<p>如果是手动获取并更改了anchors的，而且没有添加参数 --noautoanchor，训练时会计算BPR，并且得到的BPR应该是为1的（或者极为接近1），所以不会更新anchors。因此，手动法的话这个参数添不添加无所谓的。</p>\n</blockquote>\n<h3><a id=\"2__715\"></a>2. 训练过程</h3>\n<p>如果你不想看到这些警告，网上是有办法消除的，自行寻找了。</p>\n<blockquote>\n<p>如果你使用GPU训练也有类似下面这个，那是你 cuda 版本不对（不是&gt;=10.1的版本），版本不对无法使用cuda。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e822e32227e14d8a99419e169bd7f720.png\"/></p>\n<p>训练好的模型会被保存在 yolov5 目录下的 runs/train/weights/ 下</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\36b71b5f713842bb9b268cb5e015834b.png\"/></p>\n<h3><a id=\"3__727\"></a>3. 训练时间</h3>\n<blockquote>\n<ol><li>我这里四百多张图片，使用CPU训练了一百二十几次（虽然设的200次，但我中途终止了），大概花了5、6个小时吧，时间比较久了忘了。</li><li>我同学 70张图片训练70次，使用CPU训练花了 一个多小时。</li></ol>\n</blockquote>\n<p>上述时间只限于电脑风扇转动的情况下，如果你电脑限制性能，风扇不转动，那时间将会是个未知（一般是好几倍）</p>\n<h3><a id=\"4__736\"></a>4. 相关问题</h3>\n<p><mark>如果出现缺少模块的情况（no module named）</mark></p>\n<p>回到博客最开始部分，使用换源的方法补充安装yolov5的依赖。</p>\n<p><mark>如果出现 （页面太小，无法完成操作）的相关问题</mark></p>\n<p>那是虚拟内存不足，重新打开页面或者重启电脑试试（这个方法解决的可能性比较低），降低线程 --workes (默认是8) 。最后再试试调小 --batch-size，降低 --epoch</p>\n<blockquote>\n<p>我有几个同学 --workers指定为0才成功。</p>\n</blockquote>\n<blockquote>\n<p>如果都不行，<strong>可以</strong>看看这个链接 <a href=\"https://product.pconline.com.cn/itbk/software/dnyw/1707/9679137.html\">https://product.pconline.com.cn/itbk/software/dnyw/1707/9679137.html</a></p>\n</blockquote>\n<p><mark>如果训练过程中出现 memory error</mark></p>\n<p>那是内存超了，减小 --batch-size 试试，如果还不行降低 --epoch。</p>\n<blockquote>\n<p>我同学将 --epoch 设为100次，–batch-size设为3才成功。<br/> –epoch建议尽量在100次往上吧</p>\n</blockquote>\n<p><mark>重复训练的话，你也许需要将这两个缓存清除掉。</mark></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1668426bb82342488213e0b138d08b11.png\"/></p>\n<h3><a id=\"5__761\"></a>5. 训练可视化</h3>\n<p>训练时或者训练后可以利用 tensorboard 查看训练可视化</p>\n<pre><code class=\"prism language-python\">tensorboard <span class=\"token operator\">-</span><span class=\"token operator\">-</span>logdir<span class=\"token operator\">=</span>runs\n</code></pre>\n<blockquote>\n<p>与训练一样，进入pytorch环境，进入yolov5文件夹执行。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f7e4ff9d32a543469997b7f1884ddf35.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\7432e28a71b44bf5a250561f87fe666d.png\"/></p>\n<h1><a id=\"__773\"></a>六. 检测效果</h1>\n<pre><code class=\"prism language-python\">python detect<span class=\"token punctuation\">.</span>py <span class=\"token operator\">-</span><span class=\"token operator\">-</span>source <span class=\"token number\">0</span>  <span class=\"token comment\"># webcam  自带摄像头</span>\n                            <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>jpg  <span class=\"token comment\"># image 图片</span>\n                            <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>mp4  <span class=\"token comment\"># video 视频</span>\n                            path<span class=\"token operator\">/</span>  <span class=\"token comment\"># directory</span>\n                            path<span class=\"token operator\">/</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span>jpg  <span class=\"token comment\"># glob</span>\n                            <span class=\"token string\">'https://youtu.be/NUsoVlDFqZg'</span>  <span class=\"token comment\"># YouTube</span>\n                            <span class=\"token string\">'rtsp://example.com/media.mp4'</span>  <span class=\"token comment\"># RTSP, RTMP, HTTP stream</span>\n</code></pre>\n<p>我们使用刚刚训练出的最好的模型 best.pt 来测试，在yolov5目录下的 runs/train/exp/weights 。</p>\n<pre><code class=\"prism language-python\">\n python detect<span class=\"token punctuation\">.</span>py <span class=\"token operator\">-</span><span class=\"token operator\">-</span>weights runs<span class=\"token operator\">/</span>train<span class=\"token operator\">/</span>exp<span class=\"token operator\">/</span>weights<span class=\"token operator\">/</span>best<span class=\"token punctuation\">.</span>pt <span class=\"token operator\">-</span><span class=\"token operator\">-</span>source <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>data<span class=\"token operator\">/</span>video<span class=\"token operator\">/</span>tram<span class=\"token punctuation\">.</span>mp4\n</code></pre>\n<p><code>../</code> 代表当前目录的上一级目录</p>\n<p>测试结果保存在 yolov5/runs/detect 目录下</p>\n<p><img alt=\"请添加图片描述\" src=\"https://img-blog.csdnimg.cn/ebd9ed5a9ffa4816ab354523d8473201.gif\"/></p>\n<h1><a id=\"__798\"></a>七. 模型评估与推理</h1>\n<p>这个就请查看第一个参考链接了，我就不说明了，注意下版本问题哈</p>\n<h1><a id=\"__800\"></a>八. 参考链接（感谢）</h1>\n<ul><li> <p><a href=\"https://blog.csdn.net/qq_36756866/article/details/109111065?spm=1001.2101.3001.6650.2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link\"> YOLOv5训练自己的数据集（超详细完整版）_深度学习菜鸟的博客-CSDN博客_yolov5训练自己的数据</a></p> </li><li> <p><a href=\"https://www.icode9.com/content-3-774443.html\">【小白CV】手把手教你用YOLOv5训练自己的数据集（从Windows环境配置到模型部署） (icode9.com)</a></p> </li></ul>\n<p><font color=\"#FF00FF\">有帮助的话，不求一键三连，点个赞还是可以的吧，笔芯</font></p>\n<blockquote>\n<p>这些问题都是在我朋友身上遇到的，各种纷杂问题都有，这里只保留了部分问题。</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}