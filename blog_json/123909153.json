{"blogid": "123909153", "writerAge": "码龄3年", "writerBlogNum": "101", "writerCollect": "1572", "writerComment": "146", "writerFan": "929", "writerGrade": "5级", "writerIntegral": "3340", "writerName": "SakamataZ", "writerProfileAdress": "writer_image\\profile_123909153.jpg", "writerRankTotal": "7081", "writerRankWeekly": "126257", "writerThumb": "303", "writerVisitNum": "237148", "blog_read_count": "828", "blog_time": "已于 2022-04-06 22:18:27 修改", "blog_title": "Software Foundation - Coq 函数式编程 (Basics) 题解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>本书英文版地址<a href=\"https://softwarefoundations.cis.upenn.edu/current/index.html\">https://softwarefoundations.cis.upenn.edu/current/index.html</a><br/> 本书中文版地址<a href=\"https://coq-zh.github.io/SF-zh\">https://coq-zh.github.io/SF-zh</a><br/> 开始形式化验证与PLT之旅吧！<br/> <em><strong>注意：三星题目和选修内容跳过</strong></em></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#Perface_6\">Perface</a></li><li><a href=\"#_16\">回顾一下&lt;&lt;永恒的金色对角线&gt;&gt;</a></li><li><a href=\"#Coq_33\">Coq函数式编程</a></li><li><a href=\"#Golang_59\">Golang的泛型是真泛型吗</a></li><li><a href=\"#_125\">题解</a></li><li><a href=\"#__1443\">题外话 知识旅途中的陷阱</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"Perface_6\"></a>Perface</h2>\n<p><em><strong>Coq</strong></em></p>\n<ul><li>Coq 成为了研究员对复杂的语言定义进行描述和论证的标准工具。 例如，它被用来检查 JavaCard 平台的安全性，得到了最高等级的通用准则验证， 它还被用在 x86 和 LLVM 指令集以及 C 等编程语言的形式化规范中。</li><li>作为一个’形式化软件验证的开发环境’，Coq 被用来构建： CompCert，一个完全验证的 C 优化编译器； CertiKos，一个完全验证的工具，用于证明涉及浮点数的精妙算法的正确性； Coq 也是 CertiCrypt 的基础，一个用于论证密码学算法安全性的环境。 Coq 还被用来构建开源 RISC-V 处理器架构的验证实现。</li><li>作为一个’依赖类型函数式编程的现实环境’，Coq 激发了大量的创新。 例如 Ynot 系统嵌入了“关系式霍尔推理”（一个 ‘霍尔逻辑’ 的扩展， 我们之后会看到它）。</li><li>作为一个’高阶逻辑的证明助理’，Coq 被用来验证数学中一些重要的结果。 例如 Coq 可在证明中包含复杂计算的能力，使其开发出了第一个形式化验证的四色定理证明。 此前数学家们对该证明颇有争议，因为它需要用程序对大量组态进行检验。 在 Coq 的形式化中，所有东西都被检验过，自然也包括计算的正确性。 近年来，Feit-Thompson 定理经过了更大的努力用 Coq 形式化了， 它是对有限单群进行分类的十分重要的第一步。</li></ul>\n<blockquote>\n<p>Coq 本身即可视作一个小巧却有着极强表达能力的函数式编程语言， 以及一组用于陈述和证明逻辑断言的工具的结合体。进而言之， 当我们更加深入地审视它时，会发现 Coq 的这两方面其实基于完全相同的底层机制 – ‘命题即类型，程序即证明’，可谓殊途同归</p>\n</blockquote>\n<p>装一下coq（</p>\n<h2><a id=\"_16\"></a>回顾一下&lt;&lt;永恒的金色对角线&gt;&gt;</h2>\n<p>说起λ演算，想起前一段时间看的<a href=\"http://mindhacks.cn/2006/10/15/cantor-godel-turing-an-eternal-golden-diagonal/\">康托尔、哥德尔、图灵——永恒的金色对角线（刘未鹏）</a><br/> 这也是一篇著名的网红博客了<br/> 这篇文章介绍了几个重要概念，写在这里：<br/> （<em><strong>当然，具体学习还是要看这篇博客以及查资料</strong></em>）<br/> <em><strong>停机问题</strong></em><br/> 证明不存在这样一个程序（算法），它能够计算任何程序（算法）在给定输入上是否会结束（停机）<br/> <em><strong>不动点</strong></em><br/> P(power) = power<br/> 以上就是所谓的不动点。即对于函数P来说power是这样一个“点”：当把P用到power身上的时候，得到的结果仍然还是power<br/> <em><strong>Y combinator</strong></em><br/> 在无类型lambda演算中众所周知的（可能是最简单的）不动点组合子叫做Y组合子<br/> Y := λf.(λx.(f (x x)) λx.(f (x x)))<br/> <em><strong>哥德尔不完备定律</strong></em><br/> 任何足够强到蕴含了皮亚诺算术系统（PA）的一致（即无矛盾）的系统都是不完备的<br/> <em><strong>对角线方法证明停机问题</strong></em></p>\n<h2><a id=\"Coq_33\"></a>Coq函数式编程</h2>\n<p>Coq的断言挺有意思的</p>\n<pre><code class=\"prism language-coq\">Example test_orb1:  (orb true  false) = true.\nProof. simpl. reflexivity.  Qed.(**若等式两边的求值结果相同，该断言即可得证**)\nExample test_orb2:  (orb false false) = false.\nProof. simpl. reflexivity.  Qed.\nExample test_orb3:  (orb false true)  = true.\nProof. simpl. reflexivity.  Qed.\nExample test_orb4:  (orb true  true)  = true.\nProof. simpl. reflexivity.  Qed.\n</code></pre>\n<p>使用<code>Inductive</code>定义类型,使用<code>Definition</code>定义函数<br/> [Notation] 指令能为既有的定义赋予新的符号记法</p>\n<pre><code class=\"prism language-coq\">Notation \"x &amp;&amp; y\" := (andb x y).\nNotation \"x || y\" := (orb x y).\n</code></pre>\n<p>if表达式</p>\n<blockquote>\n<p>由于 bool 类型 并不是内建类型，Coq 实际上支持对_任何_归纳定义的双子句表达式使用 “if” 表达式 （不过恰巧在这里该表达式被称为 bool）。当条件求值后得到的是第一个 子句的 “构造子” (constructor)，那么条件就会被认为是 “真” true（不过恰巧 在这里第一个分支的构造子被称为 “真” true，并且如果求值后得到的是第二个子句， 那么条件就被认为是 “假” false）。</p>\n</blockquote>\n<p>像 red、green、blue、black、white 以及 primary（还有 true、false、monday 等）这样的原子标识符叫做’构造子（Constructor）'。<br/> 为了让自然数使用起来更加自然，Coq 内建了一小部分解析打印功能：<br/> 普通的十进制数可视为“一进制”自然数的另一种记法，以代替 [S] 与 [O] 构造子；<br/> 反过来，Coq 也会默认将自然数打印为十进制形式<br/> 关键字fixpoint用于定义递归函数</p>\n<h2><a id=\"Golang_59\"></a>Golang的泛型是真泛型吗</h2>\n<p>（话说最近看到copilot，还挺强的，该学下机器学习了,）<br/> 当然不是，隔壁concept都出来了（然后十年过去了）<br/> Golang和C++ Template比较：</p>\n<ol><li>没有泛型的特化<br/> 隔壁Java也没有，但是人家是因为历史原因（二进制向后兼容性）摆烂搞出类型擦除，Go为什么不学C#呢？</li></ol>\n<p>java泛型</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">ArrayList</span>  <span class=\"token operator\">-</span> raw type\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token operator\">-</span> <span class=\"token keyword\">open</span> <span class=\"token namespace\">generic</span> type\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token operator\">-</span> closed generic type\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token operator\">-</span> unbounded wildcard type\n<span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span><span class=\"token operator\">/</span>extend <span class=\"token class-name\">E</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span> bounded wildcard type\n</code></pre>\n<ol start=\"2\"><li>没有模板非类型形参<br/> 以下这些，go通通没有，所以编译时能力几乎为0<br/> 问就是大道至简</li></ol>\n<blockquote>\n<ol><li>可以有名字的模板非类型形参。</li><li>可以有名字和默认值的模板非类型形参。</li><li>可以有名字的模板非类型形参包。</li><li>带占位符类型的模板非类型形参。占位符 可以是包含占位符 auto 的任何类型（例如单纯的 auto、auto ** 或 auto &amp;），被推导类类型的占位符 (C++20 起)，或者 decltype(auto)。</li></ol>\n</blockquote>\n<ol start=\"3\"><li>没有High-order polymorphism<br/> 没有HKT导致了弱鸡的抽象能力</li></ol>\n<blockquote>\n<p>Higher-order Polymorphism :<br/> Languages such as Java and C# have first-order polymorphism because they allow us to abstract on types. e.g. <code>List&lt;A&gt;</code> can have a reverse function that works on any element type (the A).<br/> More practical programming languages and type systems allow us to abstract on type constructors as well.<br/> This feature is called higher-order (or higher-kinded) polymorphism.</p>\n</blockquote>\n<p>C++可以这样写（<a href=\"https://stackoverflow.com/questions/2565097/higher-kinded-types-with-c\">Template-template parameters</a>）</p>\n<pre><code class=\"prism language-c\">template <span class=\"token operator\">&lt;</span>template <span class=\"token operator\">&lt;</span>typename<span class=\"token operator\">&gt;</span> class m<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Monad</span> <span class=\"token punctuation\">{<!-- --></span>\n    template <span class=\"token operator\">&lt;</span>typename a<span class=\"token operator\">&gt;</span>\n    <span class=\"token keyword\">static</span> m<span class=\"token operator\">&lt;</span>a<span class=\"token operator\">&gt;</span> <span class=\"token function\">mreturn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    template <span class=\"token operator\">&lt;</span>typename a<span class=\"token punctuation\">,</span> typename b<span class=\"token operator\">&gt;</span>\n    <span class=\"token keyword\">static</span> m<span class=\"token operator\">&lt;</span>b<span class=\"token operator\">&gt;</span> <span class=\"token function\">mbind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> m<span class=\"token operator\">&lt;</span>a<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> m<span class=\"token operator\">&lt;</span>b<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ntemplate <span class=\"token operator\">&lt;</span>typename a<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Maybe</span> <span class=\"token punctuation\">{<!-- --></span>\n    bool isNothing<span class=\"token punctuation\">;</span>\n    a value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ntemplate <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Monad</span><span class=\"token operator\">&lt;</span>Maybe<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    template <span class=\"token operator\">&lt;</span>typename a<span class=\"token operator\">&gt;</span>\n    <span class=\"token keyword\">static</span> Maybe<span class=\"token operator\">&lt;</span>a<span class=\"token operator\">&gt;</span> <span class=\"token function\">mreturn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        Maybe<span class=\"token operator\">&lt;</span>a<span class=\"token operator\">&gt;</span> x<span class=\"token punctuation\">;</span>\n        x<span class=\"token punctuation\">.</span>isNothing <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n        x<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    template <span class=\"token operator\">&lt;</span>typename a<span class=\"token punctuation\">,</span> typename b<span class=\"token operator\">&gt;</span>\n    <span class=\"token keyword\">static</span> Maybe<span class=\"token operator\">&lt;</span>b<span class=\"token operator\">&gt;</span> <span class=\"token function\">mbind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Maybe<span class=\"token operator\">&lt;</span>a<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> action<span class=\"token punctuation\">,</span> Maybe<span class=\"token operator\">&lt;</span>b<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>isNothing<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> action<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"4\"><li>没有param pack/concept map/ static if比较简单，不解释了，go可能以后会有吧，C++也是11才加入的</li></ol>\n<h2><a id=\"_125\"></a>题解</h2>\n<p>形式化证明确实繁琐精妙而且有趣（<br/> 之前学haskell看答案看的太多了，最后三章没学好<br/> 看这本书还是不要看答案了（</p>\n<pre><code class=\"prism language-haskell\"><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">*</span> <span class=\"token constant\">Basics</span><span class=\"token operator\">:</span> <span class=\"token constant\">Coq</span> 函数式编程 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token constant\">REMINDER</span><span class=\"token operator\">:</span>\n\n          <span class=\"token operator\">##############################</span>\n          <span class=\"token operator\">###</span>  请勿公开发布习题解答  <span class=\"token operator\">###</span>\n          <span class=\"token operator\">##############################</span>\n\n   （原因见 <span class=\"token punctuation\">[</span><span class=\"token constant\">Preface</span><span class=\"token punctuation\">]</span>。）\n<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">#################################################################</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">*</span> 引言 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 函数式编程风格建立在简单的、日常的数学直觉之上：若一个过程或方法没有副作用，\n    那么在忽略效率的前提下，我们需要理解的一切便只剩下它如何将输入映射到输出了\n    —— 也就是说，我们只需将它视作一种计算数学函数的具体方法即可。这也是\n    “函数式编程”中“函数式”一词的含义之一。程序与简单数学对象之间这种直接的联系，\n    同时支撑了对程序行为进行形式化证明的正确性以及非形式化论证的可靠性。\n\n    函数式编程中“函数式”一词的另一个含义是它强调把函数作为<span class=\"token hvariable\">_'</span>一等'<span class=\"token hvariable\">_</span>的值\n    —— 这类值可以作为参数传递给其它函数，可以作为结果返回，\n    也可以包含在数据结构中等等。这种将函数当做数据的方式，\n    产生了大量强大而有用的编程习语（<span class=\"token constant\">Idiom</span>）。\n\n    其它常见的函数式语言特性包括能让构造和处理丰富数据结构更加简单的\n    <span class=\"token hvariable\">_'</span>代数数据类型（<span class=\"token constant\">Algebraic</span> <span class=\"token constant\">Data</span> <span class=\"token constant\">Type</span>）'<span class=\"token hvariable\">_</span>和<span class=\"token hvariable\">_'</span>模式匹配（<span class=\"token constant\">Pattern</span> <span class=\"token constant\">Matching</span>）'<span class=\"token hvariable\">_</span>，\n    以及用来支持抽象和代码复用的<span class=\"token hvariable\">_'</span>多态类型系统（<span class=\"token constant\">Polymorphic</span> <span class=\"token constant\">Type</span> <span class=\"token constant\">System</span>）'<span class=\"token hvariable\">_</span>。\n    <span class=\"token constant\">Coq</span> 提供了所有这些特性。\n\n    本章的前半部分介绍了 <span class=\"token constant\">Coq</span> 原生的函数式编程语言 <span class=\"token hvariable\">_'Gallina'_</span> 中最基本的元素，\n    后半部分则介绍了一些基本<span class=\"token hvariable\">_'</span>策略（<span class=\"token constant\">Tactic</span>）'<span class=\"token hvariable\">_</span>，它可用于证明 <span class=\"token constant\">Gallina</span> 程序的简单性质。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">#################################################################</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">*</span> 数据与函数 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">=================================================================</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">**</span> 枚举类型 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token constant\">Coq</span> 的一个不同寻常之处在于它<span class=\"token hvariable\">_'</span>极小'<span class=\"token hvariable\">_</span>的内建特性集合。\n    比如，<span class=\"token constant\">Coq</span> 并未提供通常的原语（<span class=\"token hvariable\">atomic</span>）类型（如布尔、整数、字符串等），\n    而是提供了一种极为强大的，可以从头定义新的数据类型的机制\n    —— 上面所有常见的类型都是由它定义而产生的实例。\n\n    当然，<span class=\"token constant\">Coq</span> 发行版同时也提供了内容丰富的标准库，其中定义了布尔值、\n    数值，以及如列表、散列表等许多通用的数据结构。\n    不过这些库中的定义并没有任何神秘之处，也没有原语（<span class=\"token constant\">Primitive</span>）的特点。\n    为了说明这一点，我们并未在本课程中直接使用标准库中的数据类型，\n    而是在整个教程中重新定义了其中的绝大部分。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">=================================================================</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">**</span> 一周七日 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 让我们从一个非常简单的例子开始，看看这种定义机制是如何工作的。\n    以下声明会告诉 <span class=\"token constant\">Coq</span> 我们定义了一个数据集合，即一个<span class=\"token hvariable\">_'</span>类型（<span class=\"token constant\">Type</span>）'<span class=\"token hvariable\">_</span>。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Inductive</span> <span class=\"token hvariable\">day</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Type</span> <span class=\"token operator\">:=</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">monday</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">tuesday</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">wednesday</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">thursday</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">friday</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">saturday</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">sunday</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Inductive</span> <span class=\"token hvariable\">topic</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Type</span> <span class=\"token operator\">:=</span>\n  <span class=\"token operator\">|</span> 第一题\n  <span class=\"token operator\">|</span> 第二题\n  <span class=\"token operator\">|</span> 第三题\n  <span class=\"token operator\">|</span> 第四题\n  <span class=\"token operator\">|</span> 第五题\n  <span class=\"token operator\">|</span> 第六题\n  <span class=\"token operator\">|</span> 第七题<span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 这个新的类型名为 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">day</span><span class=\"token punctuation\">]</span>，成员包括 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">monday</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">tuesday</span><span class=\"token punctuation\">]</span> 等等。\n\n    定义了 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">day</span><span class=\"token punctuation\">]</span> 之后<span class=\"token punctuation\">,</span> 我们就能写一些操作星期的函数了。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Definition</span> <span class=\"token hvariable\">next_weekday</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">d</span><span class=\"token operator\">:</span><span class=\"token hvariable\">day</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">day</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">d</span> <span class=\"token hvariable\">with</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">monday</span>    <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">tuesday</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">tuesday</span>   <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">wednesday</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">wednesday</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">thursday</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">thursday</span>  <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">friday</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">friday</span>    <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">monday</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">saturday</span>  <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">monday</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">sunday</span>    <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">monday</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 注意，这里显式声明了函数的参数和返回类型。\n    和大多数函数式编程语言一样，如果没有显式指定类型，<span class=\"token constant\">Coq</span> 通常会自己通过\n    <span class=\"token hvariable\">_'</span>类型推断（<span class=\"token constant\">Type</span> <span class=\"token constant\">Inference</span>）'<span class=\"token hvariable\">_</span> 得出。不过我们会标上类型使其更加易读。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 定义了函数之后，我们接下来应该用一些例子来检验它。\n    实际上，在 <span class=\"token constant\">Coq</span> 中，一共有三种不同的检验方式：第一，我们可以用 <span class=\"token punctuation\">[</span><span class=\"token constant\">Compute</span><span class=\"token punctuation\">]</span>\n    指令来计算包含 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">next_weekday</span><span class=\"token punctuation\">]</span> 的复合表达式： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Compute</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">friday</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">==&gt;</span> <span class=\"token hvariable\">monday</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">day</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Compute</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">next_weekday</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">next_weekday</span> <span class=\"token hvariable\">saturday</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">==&gt;</span> <span class=\"token hvariable\">tuesday</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">day</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> （我们在注释中写出 <span class=\"token constant\">Coq</span> 返回的结果。如果你身边就有电脑，\n    不妨自己用 <span class=\"token constant\">Coq</span> 解释器试一试：选一个你喜欢的 <span class=\"token constant\">IDE</span>，<span class=\"token constant\">CoqIde</span> 或\n    <span class=\"token constant\">Proof</span> <span class=\"token constant\">General</span> 都可以。然后从本书附带的 <span class=\"token constant\">Coq</span> 源码中载入 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">Basics<span class=\"token punctuation\">.</span>v</span><span class=\"token punctuation\">]</span>\n    文件，找到上面的例子，提交给 <span class=\"token constant\">Coq</span>，然后查看结果。） <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 第二，我们可以将<span class=\"token hvariable\">_'</span>期望'<span class=\"token hvariable\">_</span>的结果写成 <span class=\"token constant\">Coq</span> 的示例： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_next_weekday</span><span class=\"token operator\">:</span>\n  <span class=\"token punctuation\">(</span><span class=\"token hvariable\">next_weekday</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">next_weekday</span> <span class=\"token hvariable\">saturday</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">tuesday</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 该声明做了两件事：首先它断言 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">saturday</span><span class=\"token punctuation\">]</span> 之后的第二个工作日是\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">tuesday</span><span class=\"token punctuation\">]</span>；然后它为该断言取了名字以便之后引用它。\n    定义好断言后，我们还可以让 <span class=\"token constant\">Coq</span> 来验证它，就像这样： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 具体细节目前并不重要，不过这段代码基本上可以读作\n    “若等式两边的求值结果相同，该断言即可得证。”\n\n    第三，我们可以让 <span class=\"token constant\">Coq</span> 从 <span class=\"token punctuation\">[</span><span class=\"token constant\">Definition</span><span class=\"token punctuation\">]</span> 中<span class=\"token hvariable\">_'</span>提取（<span class=\"token constant\">Extract</span>）'<span class=\"token hvariable\">_</span>\n    出用其它更加常规的编程语言编写的程序\n    （如 <span class=\"token constant\">OCaml</span>、<span class=\"token constant\">Scheme</span>、<span class=\"token constant\">Haskell</span> 等），它们拥有高性能的编译器。\n    这种能力非常有用，我们可以通过它将 <span class=\"token constant\">Gallina</span> 编写的 <span class=\"token hvariable\">_'</span>证明正确'<span class=\"token hvariable\">_</span>\n    的算法转译成高效的机器码。（诚然，我们必须信任 <span class=\"token constant\">OCaml</span><span class=\"token operator\">/</span><span class=\"token constant\">Haskell</span><span class=\"token operator\">/</span><span class=\"token constant\">Scheme</span>\n    的编译器，以及 <span class=\"token constant\">Coq</span> 提取工具自身的正确性，然而比起现在大多数软件的开发方式，\n    这也是很大的进步了。）实际上，这就是 <span class=\"token constant\">Coq</span> 最主要的使用方式之一。\n    在之后的章节中我们会回到这一主题上来。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">=================================================================</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">**</span> 作业提交指南 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 如果你在课堂中使用《软件基础》，你的讲师可能会用自动化脚本来为你的作业评分。\n    为了让这些脚本能够正常工作（这样你才能拿到全部学分！），请认真遵循以下规则：\n      <span class=\"token operator\">-</span> 评分脚本在提取你提交的 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">v</span><span class=\"token punctuation\">]</span> 文件时会用到其中的特殊标记。因此请勿修改练习的\n        “分隔标记”，如练习的标题、名称、以及末尾的 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> 等等。\n      <span class=\"token operator\">-</span> 不要删除练习。如果你想要跳过某个练习（例如它标记为“可选”或你无法解决它），\n        可以在 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">v</span><span class=\"token punctuation\">]</span> 文件中留下部分证明，这没关系，不过此时请确认它以 <span class=\"token punctuation\">[</span><span class=\"token constant\">Admitted</span><span class=\"token punctuation\">]</span>\n        结尾（不要用 <span class=\"token punctuation\">[</span><span class=\"token constant\">Abort</span><span class=\"token punctuation\">]</span> 之类的东西）。\n      <span class=\"token operator\">-</span> 你也可以在解答中使用附加定义（如辅助函数，需要的引理等）。\n        你可以将它们放在练习的头部和你要证明的定理之间。\n      <span class=\"token operator\">-</span> 如果你为了证明某定理而需要引入一个额外引理，且未能证明该引理，\n        请确保该引理与使用它的原定理都以 <span class=\"token punctuation\">[</span><span class=\"token constant\">Admitted</span><span class=\"token punctuation\">]</span> 而非 <span class=\"token punctuation\">[</span><span class=\"token constant\">Qed</span><span class=\"token punctuation\">]</span> 结尾。\n        这样能使在你利用原定理解决其他练习时得到部分分数。\n\n    你或许注意到每一章都附带有一个<span class=\"token hvariable\">_'</span>测试脚本'<span class=\"token hvariable\">_</span>来自动计算该章节已完成\n    的作业的分数。这些脚本一般只作为自动评分工具，但你也可以用它们在提交前\n    再一次确认作业格式的正确性。\n    你可以在一个终端窗口中输入 <span class=\"token string\">\"[make BasicsTest.vo]\"</span> 或下面的命令来运行这些\n    测试脚本\n\n       <span class=\"token hvariable\">coqc</span> <span class=\"token operator\">-</span><span class=\"token constant\">Q</span> <span class=\"token operator\">.</span> <span class=\"token constant\">LF</span> <span class=\"token hvariable\">Basics<span class=\"token punctuation\">.</span>v</span>\n       <span class=\"token hvariable\">coqc</span> <span class=\"token operator\">-</span><span class=\"token constant\">Q</span> <span class=\"token operator\">.</span> <span class=\"token constant\">LF</span> <span class=\"token hvariable\">BasicsTest<span class=\"token punctuation\">.</span>v</span>\n\n    你并不需要提交 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">BasicsTest<span class=\"token punctuation\">.</span>v</span><span class=\"token punctuation\">]</span> 这种测试脚本（也不需要提交前言 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">Preface<span class=\"token punctuation\">.</span>v</span><span class=\"token punctuation\">]</span>）。\n\n    如果你的班级使用 <span class=\"token constant\">Canvas</span> 系统来提交作业。\n      <span class=\"token operator\">-</span> 如果你提交了多个不同版本的作业，你可能会注意到它们在系统中有着\n        不同的名字。这是正常情况，只有最新的提交会被评分。\n      <span class=\"token operator\">-</span> 如果你需要同时提交多个文件（例如一次作业中包含多个不同的章节），\n        你需要创建一个一次性包含所有文件的提交。\n       （译者注：关于多文件提交细节请查看英文原文。）\n        <span class=\"token constant\">To</span> <span class=\"token hvariable\">hand</span> <span class=\"token keyword\">in</span> <span class=\"token hvariable\">multiple</span> <span class=\"token hvariable\">files</span> <span class=\"token hvariable\">at</span> <span class=\"token hvariable\">the</span> <span class=\"token hvariable\">same</span> <span class=\"token hvariable\">time</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token hvariable\">more</span> <span class=\"token hvariable\">than</span> <span class=\"token hvariable\">one</span>\n        <span class=\"token hvariable\">chapter</span> <span class=\"token hvariable\">is</span> <span class=\"token hvariable\">assigned</span> <span class=\"token keyword\">in</span> <span class=\"token hvariable\">the</span> <span class=\"token hvariable\">same</span> <span class=\"token hvariable\">week</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">you</span> <span class=\"token hvariable\">need</span> <span class=\"token hvariable\">to</span> <span class=\"token hvariable\">make</span> <span class=\"token hvariable\">a</span>\n        <span class=\"token hvariable\">single</span> <span class=\"token hvariable\">submission</span> <span class=\"token hvariable\">with</span> <span class=\"token builtin\">all</span> <span class=\"token hvariable\">the</span> <span class=\"token hvariable\">files</span> <span class=\"token hvariable\">at</span> <span class=\"token hvariable\">once</span> <span class=\"token hvariable\">using</span> <span class=\"token hvariable\">the</span> <span class=\"token hvariable\">button</span>\n        <span class=\"token string\">\"Add another file\"</span> <span class=\"token hvariable\">just</span> <span class=\"token hvariable\">above</span> <span class=\"token hvariable\">the</span> <span class=\"token hvariable\">comment</span> <span class=\"token hvariable\">box</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token constant\">The</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Require</span> <span class=\"token constant\">Export</span><span class=\"token punctuation\">]</span> <span class=\"token hvariable\">statement</span> <span class=\"token hvariable\">on</span> <span class=\"token hvariable\">the</span> <span class=\"token hvariable\">next</span> <span class=\"token hvariable\">line</span> <span class=\"token hvariable\">tells</span> <span class=\"token constant\">Coq</span> <span class=\"token hvariable\">to</span> <span class=\"token hvariable\">use</span>\n    <span class=\"token hvariable\">the</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">String</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">module</span> <span class=\"token hvariable\">from</span> <span class=\"token hvariable\">the</span> <span class=\"token hvariable\">standard</span> <span class=\"token hvariable\">library</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">We'</span><span class=\"token hvariable\">ll</span> <span class=\"token hvariable\">use</span> <span class=\"token hvariable\">strings</span>\n    <span class=\"token hvariable\">ourselves</span> <span class=\"token keyword\">in</span> <span class=\"token hvariable\">later</span> <span class=\"token hvariable\">chapters</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">but</span> <span class=\"token hvariable\">we</span> <span class=\"token hvariable\">need</span> <span class=\"token hvariable\">to</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Require</span><span class=\"token punctuation\">]</span> <span class=\"token hvariable\">it</span> <span class=\"token hvariable\">here</span> <span class=\"token hvariable\">so</span>\n    <span class=\"token hvariable\">that</span> <span class=\"token hvariable\">the</span> <span class=\"token hvariable\">grading</span> <span class=\"token hvariable\">scripts</span> <span class=\"token hvariable\">can</span> <span class=\"token hvariable\">use</span> <span class=\"token hvariable\">it</span> <span class=\"token hvariable\">for</span> <span class=\"token hvariable\">internal</span> <span class=\"token hvariable\">purposes</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">From</span> <span class=\"token constant\">Coq</span> <span class=\"token constant\">Require</span> <span class=\"token constant\">Export</span> <span class=\"token constant\">String</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">=================================================================</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">**</span> 布尔值 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 通过类似的方式，我们可以为布尔值定义常见的 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span> 类型，它包括\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">true</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">false</span><span class=\"token punctuation\">]</span> 两个成员。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Inductive</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Type</span> <span class=\"token operator\">:=</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">true</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 布尔值的函数可按照同样的方式来定义： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Definition</span> <span class=\"token hvariable\">negb</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b</span><span class=\"token operator\">:</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">with</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">true</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">false</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">false</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">true</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Definition</span> <span class=\"token hvariable\">andb</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b1</span><span class=\"token operator\">:</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b2</span><span class=\"token operator\">:</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">b1</span> <span class=\"token hvariable\">with</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">true</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">b2</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">false</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">false</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Definition</span> <span class=\"token hvariable\">orb</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b1</span><span class=\"token operator\">:</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b2</span><span class=\"token operator\">:</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">b1</span> <span class=\"token hvariable\">with</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">true</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">true</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">false</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">b2</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> （虽然我们正尝试从零开始定义布尔类型，\n    但由于 <span class=\"token constant\">Coq</span> 的标准库中也提供了布尔类型的默认实现，以及大量有用的函数和引理。\n    我们会尽量让自己的定义和定理的名字与标准库保持一致。） <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 其中 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">andb</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">orb</span><span class=\"token punctuation\">]</span> 演示了如何定义多参函数。\n    以下四个“单元测试”则演示了如何应用这些函数，\n    它们构成了 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">orb</span><span class=\"token punctuation\">]</span> 函数的完整规范（<span class=\"token constant\">Specification</span>），即真值表： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_orb1</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">(</span><span class=\"token hvariable\">orb</span> <span class=\"token hvariable\">true</span>  <span class=\"token hvariable\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_orb2</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">(</span><span class=\"token hvariable\">orb</span> <span class=\"token hvariable\">false</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_orb3</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">(</span><span class=\"token hvariable\">orb</span> <span class=\"token hvariable\">false</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">=</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_orb4</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">(</span><span class=\"token hvariable\">orb</span> <span class=\"token hvariable\">true</span>  <span class=\"token hvariable\">true</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">=</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 我们也可以为刚定义的布尔运算引入更加熟悉的中缀语法。\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">Notation</span><span class=\"token punctuation\">]</span> 指令能为既有的定义赋予新的符号记法。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Notation</span> <span class=\"token string\">\"x &amp;&amp; y\"</span> <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">andb</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Notation</span> <span class=\"token string\">\"x || y\"</span> <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">orb</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_orb5</span><span class=\"token operator\">:</span>  <span class=\"token hvariable\">false</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">false</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">true</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token hvariable\">_'</span>关于记法的说明'<span class=\"token hvariable\">_</span>：在 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">v</span><span class=\"token punctuation\">]</span> 文件中，我们用方括号来界定注释中的\n    <span class=\"token constant\">Coq</span> 代码片段；这种约定也在 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">coqdoc</span><span class=\"token punctuation\">]</span> 文档工具中使用，\n    它能让代码与周围的文本从视觉上区分开来。\n    在 <span class=\"token constant\">HTML</span> 版的文件中，这部分文本会以<span class=\"token hvariable\">_'</span>不同的字体'<span class=\"token hvariable\">_</span>显示。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 下面的例子展示了 <span class=\"token constant\">Coq</span> 的另一个特性<span class=\"token operator\">:</span> 条件表达式<span class=\"token operator\">...</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Definition</span> <span class=\"token hvariable\">negb'</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b</span><span class=\"token operator\">:</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">:=</span>\n  <span class=\"token keyword\">if</span> <span class=\"token hvariable\">b</span> <span class=\"token keyword\">then</span> <span class=\"token hvariable\">false</span>\n  <span class=\"token keyword\">else</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Definition</span> <span class=\"token hvariable\">andb'</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b1</span><span class=\"token operator\">:</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b2</span><span class=\"token operator\">:</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">:=</span>\n  <span class=\"token keyword\">if</span> <span class=\"token hvariable\">b1</span> <span class=\"token keyword\">then</span> <span class=\"token hvariable\">b2</span>\n  <span class=\"token keyword\">else</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Definition</span> <span class=\"token hvariable\">orb'</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b1</span><span class=\"token operator\">:</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b2</span><span class=\"token operator\">:</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">:=</span>\n  <span class=\"token keyword\">if</span> <span class=\"token hvariable\">b1</span> <span class=\"token keyword\">then</span> <span class=\"token hvariable\">true</span>\n  <span class=\"token keyword\">else</span> <span class=\"token hvariable\">b2</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token constant\">Coq</span> 的条件表达式相较于其他语言的，只有一点小小的扩展。由于 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span> 类型\n    并不是内建类型，<span class=\"token constant\">Coq</span> 实际上支持对<span class=\"token hvariable\">_</span>任何<span class=\"token hvariable\">_</span>归纳定义的双子句表达式使用 <span class=\"token string\">\"if\"</span> 表达式\n   （不过恰巧在这里该表达式被称为 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span>）。当条件求值后得到的是第一个\n    子句的 “构造子” <span class=\"token punctuation\">(</span><span class=\"token hvariable\">constructor</span><span class=\"token punctuation\">)</span>，那么条件就会被认为是 “真” <span class=\"token punctuation\">[</span><span class=\"token hvariable\">true</span><span class=\"token punctuation\">]</span>（不过恰巧\n    在这里第一个分支的构造子被称为 “真” <span class=\"token punctuation\">[</span><span class=\"token hvariable\">true</span><span class=\"token punctuation\">]</span>，并且如果求值后得到的是第二个子句，\n    那么条件就被认为是 “假” <span class=\"token punctuation\">[</span><span class=\"token hvariable\">false</span><span class=\"token punctuation\">]</span>）。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n    \n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">****</span> 练习：<span class=\"token number\">1</span> 星<span class=\"token punctuation\">,</span> <span class=\"token hvariable\">standard</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">nandb</span><span class=\"token punctuation\">)</span> \n\n    指令 <span class=\"token punctuation\">[</span><span class=\"token constant\">Admitted</span><span class=\"token punctuation\">]</span> 被用作不完整证明的占位符。\n    我们会在练习中用它来表示你需要完成的部分。你的任务就是将 <span class=\"token punctuation\">[</span><span class=\"token constant\">Admitted</span><span class=\"token punctuation\">]</span>\n    替换为具体的证明。\n\n    移除“<span class=\"token punctuation\">[</span><span class=\"token constant\">Admitted</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>”并补完以下函数的定义，然后确保下列每一个 <span class=\"token punctuation\">[</span><span class=\"token constant\">Example</span><span class=\"token punctuation\">]</span>\n    中的断言都能被 <span class=\"token constant\">Coq</span> 验证通过。（即仿照上文 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">orb</span><span class=\"token punctuation\">]</span> 测试的格式补充证明，\n    并确保 <span class=\"token constant\">Coq</span> 接受它。）此函数应在两个输入中的任意一个（或者都）包含\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">false</span><span class=\"token punctuation\">]</span> 时返回 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">true</span><span class=\"token punctuation\">]</span> 。 \n    提示：如果 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">]</span> 在你的证明中未能化简目标，那是因为你可能并未使用\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">match</span><span class=\"token punctuation\">]</span> 表达式定义你的 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nandb</span><span class=\"token punctuation\">]</span>。尝试使用另一种 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nandb</span><span class=\"token punctuation\">]</span> 的定义方式，\n    或者直接跳过 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">]</span> 直接使用 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">]</span>。我们后面会解释为什么\n    会发生这种情况。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Compute</span> <span class=\"token punctuation\">(</span>第一题<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Definition</span> <span class=\"token hvariable\">nandb</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b1</span><span class=\"token operator\">:</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b2</span><span class=\"token operator\">:</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span><span class=\"token operator\">:=</span>\n    <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">b1</span> <span class=\"token hvariable\">with</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">true</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">if</span> <span class=\"token hvariable\">b2</span> <span class=\"token keyword\">then</span> <span class=\"token hvariable\">false</span> <span class=\"token keyword\">else</span> <span class=\"token hvariable\">true</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">false</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">true</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_nandb1</span><span class=\"token operator\">:</span>               <span class=\"token punctuation\">(</span><span class=\"token hvariable\">nandb</span> <span class=\"token hvariable\">true</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_nandb2</span><span class=\"token operator\">:</span>               <span class=\"token punctuation\">(</span><span class=\"token hvariable\">nandb</span> <span class=\"token hvariable\">false</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_nandb3</span><span class=\"token operator\">:</span>               <span class=\"token punctuation\">(</span><span class=\"token hvariable\">nandb</span> <span class=\"token hvariable\">false</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_nandb4</span><span class=\"token operator\">:</span>               <span class=\"token punctuation\">(</span><span class=\"token hvariable\">nandb</span> <span class=\"token hvariable\">true</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">****</span> 练习：<span class=\"token number\">1</span> 星<span class=\"token punctuation\">,</span> <span class=\"token hvariable\">standard</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">andb3</span><span class=\"token punctuation\">)</span> \n\n    与此前相同，完成下面的 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">andb3</span><span class=\"token punctuation\">]</span> 函数。\n    此函数应在所有输入均为 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">true</span><span class=\"token punctuation\">]</span> 时返回 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">true</span><span class=\"token punctuation\">]</span>，否则返回 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">false</span><span class=\"token punctuation\">]</span>。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">Compute</span><span class=\"token punctuation\">(</span>第二题<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Definition</span> <span class=\"token hvariable\">andb3</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b1</span><span class=\"token operator\">:</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b2</span><span class=\"token operator\">:</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b3</span><span class=\"token operator\">:</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span><span class=\"token operator\">:=</span>\n    <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">b1</span> <span class=\"token hvariable\">with</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">true</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">if</span> <span class=\"token hvariable\">b2</span> <span class=\"token keyword\">then</span> <span class=\"token hvariable\">b3</span> <span class=\"token keyword\">else</span> <span class=\"token hvariable\">false</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">false</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">false</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_andb31</span><span class=\"token operator\">:</span>                 <span class=\"token punctuation\">(</span><span class=\"token hvariable\">andb3</span> <span class=\"token hvariable\">true</span> <span class=\"token hvariable\">true</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_andb32</span><span class=\"token operator\">:</span>                 <span class=\"token punctuation\">(</span><span class=\"token hvariable\">andb3</span> <span class=\"token hvariable\">false</span> <span class=\"token hvariable\">true</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_andb33</span><span class=\"token operator\">:</span>                 <span class=\"token punctuation\">(</span><span class=\"token hvariable\">andb3</span> <span class=\"token hvariable\">true</span> <span class=\"token hvariable\">false</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_andb34</span><span class=\"token operator\">:</span>                 <span class=\"token punctuation\">(</span><span class=\"token hvariable\">andb3</span> <span class=\"token hvariable\">true</span> <span class=\"token hvariable\">true</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">=================================================================</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">**</span> 类型 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token constant\">Coq</span> 中的每个表达式都有类型，它描述了该表达式所计算的东西的类别。\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">Check</span><span class=\"token punctuation\">]</span> 指令会让 <span class=\"token constant\">Coq</span> 显示一个表达式的类型。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Check</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">===&gt;</span> <span class=\"token hvariable\">true</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 如果在被 <span class=\"token punctuation\">[</span><span class=\"token constant\">Check</span><span class=\"token punctuation\">]</span> 的表达式后加上一个分号和你想验证的类型，那么 <span class=\"token constant\">Coq</span> 会\n    验证该表达式是否属于你提供的类型。当两者不一致时，<span class=\"token constant\">Coq</span> 会报错并终止执行。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Check</span> <span class=\"token hvariable\">true</span>\n    <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Check</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">negb</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 像 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">negb</span><span class=\"token punctuation\">]</span> 这样的函数本身也是数据值，就像 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">true</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">false</span><span class=\"token punctuation\">]</span> 一样。\n    它们的类型被称为<span class=\"token hvariable\">_'</span>函数类型'<span class=\"token hvariable\">_</span>，用带箭头的类型表示。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Check</span> <span class=\"token hvariable\">negb</span>\n    <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">-&gt;</span> <span class=\"token hvariable\">bool</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">negb</span><span class=\"token punctuation\">]</span> 的类型写作 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span> <span class=\"token operator\">-&gt;</span> <span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span>，读做“<span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span> 箭头 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span>”，\n    可以理解为“给定一个 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span> 类型的输入，该函数产生一个 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span> 类型的输出。”\n    同样，<span class=\"token punctuation\">[</span><span class=\"token hvariable\">andb</span><span class=\"token punctuation\">]</span> 的类型写作 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span> <span class=\"token operator\">-&gt;</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">-&gt;</span> <span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span>，可以理解为\n    “给定两个 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span> 类型的输入，该函数产生一个 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span> 类型的输出。” <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">=================================================================</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">**</span> 由旧类型构造新类型 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 到目前为止，我们定义的类型都是“枚举类型”：它们的定义显式地枚举了\n    一个元素的有限集，其中每个元素都只是一个裸构造子（译注：即无参数构造子）。\n    下面是一个更加有趣的类型定义，其中有个构造子接受一个参数： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Inductive</span> <span class=\"token hvariable\">rgb</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Type</span> <span class=\"token operator\">:=</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">red</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">green</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">blue</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Inductive</span> <span class=\"token hvariable\">color</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Type</span> <span class=\"token operator\">:=</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">black</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">white</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">primary</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">p</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">rgb</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 像 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">red</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">green</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">blue</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">black</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">white</span><span class=\"token punctuation\">]</span> 以及 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">primary</span><span class=\"token punctuation\">]</span>（还有\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">true</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">false</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">monday</span><span class=\"token punctuation\">]</span> 等）这样的原子标识符叫做<span class=\"token hvariable\">_'</span>构造子（<span class=\"token constant\">Constructor</span>）'<span class=\"token hvariable\">_</span>。\n\n    我们可以用它们来构建<span class=\"token hvariable\">_'</span>构造子表达式（<span class=\"token constant\">Constructor</span> <span class=\"token constant\">Expression</span>）'<span class=\"token hvariable\">_</span>，\n    其中每一个要么是一个简单的构造子，要么就是一个构造子应用于一个或多个参数\n    （每个这样的参数也都是构造子表达式）。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 我们来仔细研究一下。每个归纳定义的类型（如 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">day</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">rgb</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">color</span><span class=\"token punctuation\">]</span> 等）\n    都描述了一组由<span class=\"token hvariable\">_'</span>构造子'<span class=\"token hvariable\">_</span>构成的<span class=\"token hvariable\">_'</span>构造子表达式'<span class=\"token hvariable\">_</span>。\n\n    <span class=\"token operator\">-</span> 我们从有限的一组<span class=\"token hvariable\">_'</span>构造子'<span class=\"token hvariable\">_</span>开始。例如\n      <span class=\"token punctuation\">[</span><span class=\"token hvariable\">red</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">primary</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">true</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">false</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">monday</span><span class=\"token punctuation\">]</span>\n      等等都是构造子。\n\n    <span class=\"token operator\">-</span> <span class=\"token hvariable\">_'</span>构造子表达式'<span class=\"token hvariable\">_</span>通过将构造子应用到一个或多个构造子表达式上构成。例如\n         <span class=\"token punctuation\">[</span><span class=\"token hvariable\">red</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">true</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">primary</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">primary</span> <span class=\"token hvariable\">red</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">red</span> <span class=\"token hvariable\">primary</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">red</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">]</span>、\n         <span class=\"token punctuation\">[</span><span class=\"token hvariable\">primary</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">primary</span> <span class=\"token hvariable\">primary</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> 等等\n\n    <span class=\"token operator\">-</span> 每个 <span class=\"token punctuation\">[</span><span class=\"token constant\">Inductive</span><span class=\"token punctuation\">]</span> 定义都刻画了一个构造子表达式的子集并赋予了它们名字，如\n      <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">rgb</span><span class=\"token punctuation\">]</span> 或 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">color</span><span class=\"token punctuation\">]</span>。\n<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 具体来说，<span class=\"token punctuation\">[</span><span class=\"token hvariable\">rgb</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">color</span><span class=\"token punctuation\">]</span> 的定义描述了如何构造这两个集合中的构造子表达式：\n\n    <span class=\"token operator\">-</span> 构造子表达式 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">red</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">green</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">blue</span><span class=\"token punctuation\">]</span> 属于集合 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">rgb</span><span class=\"token punctuation\">]</span>；\n    <span class=\"token operator\">-</span> 构造子表达式 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">black</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">white</span><span class=\"token punctuation\">]</span> 属于集合 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">color</span><span class=\"token punctuation\">]</span>；\n    <span class=\"token operator\">-</span> 若 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">p</span><span class=\"token punctuation\">]</span> 是属于 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">rgb</span><span class=\"token punctuation\">]</span> 的构造子表达式，则 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">primary</span> <span class=\"token hvariable\">p</span><span class=\"token punctuation\">]</span>（读作“构造子 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">primary</span><span class=\"token punctuation\">]</span>\n      应用于参数 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">p</span><span class=\"token punctuation\">]</span>）是属于集合 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">color</span><span class=\"token punctuation\">]</span> 的构造子表达式；且\n    <span class=\"token operator\">-</span> 通过这些方式构造的构造子表达式<span class=\"token hvariable\">_'</span>只属于'<span class=\"token hvariable\">_</span>集合 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">rgb</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">color</span><span class=\"token punctuation\">]</span>。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 我们可以像之前的 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">day</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span> 那样用模式匹配为 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">color</span><span class=\"token punctuation\">]</span> 定义函数。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Definition</span> <span class=\"token hvariable\">monochrome</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">c</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">color</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">c</span> <span class=\"token hvariable\">with</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">black</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">true</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">white</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">true</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">primary</span> <span class=\"token hvariable\">p</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">false</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 鉴于 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">primary</span><span class=\"token punctuation\">]</span> 构造子接收一个参数，匹配到 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">primary</span><span class=\"token punctuation\">]</span> 的模式应当带有一个\n    变量或常量。变量可以取任意名称，如上文所示；常量需有适当的类型，例如： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Definition</span> <span class=\"token hvariable\">isred</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">c</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">color</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">c</span> <span class=\"token hvariable\">with</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">black</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">false</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">white</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">false</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">primary</span> <span class=\"token hvariable\">red</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">true</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">primary</span> <span class=\"token hvariable\">_</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">false</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 这里的模式 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">primary</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">]</span> 是“构造子 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">primary</span><span class=\"token punctuation\">]</span> 应用到除 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">red</span><span class=\"token punctuation\">]</span>\n    之外的任何 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">rgb</span><span class=\"token punctuation\">]</span> 构造子上”的简写形式（通配模式 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">]</span> 的效果与\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">monochrome</span><span class=\"token punctuation\">]</span> 定义中的哑（<span class=\"token hvariable\">dummy</span>）模式变量 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">p</span><span class=\"token punctuation\">]</span> 相同。） <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">=================================================================</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">**</span> 元组 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 一个多参数的单构造子可以用来创建元组类型。例如，为了让一个\n    半字节（<span class=\"token hvariable\">nybble</span>）表示四个比特。我们首先定义一个 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bit</span><span class=\"token punctuation\">]</span> 数据类型\n    来类比 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span> 数据。并且使用 <span class=\"token punctuation\">[</span><span class=\"token constant\">B0</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token constant\">B1</span><span class=\"token punctuation\">]</span> 两种构造子来表示其可能的取值。\n    最后定义 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nybble</span><span class=\"token punctuation\">]</span> 这种数据类型，也就是一个四比特的元组。<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Inductive</span> <span class=\"token hvariable\">bit</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Type</span> <span class=\"token operator\">:=</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">B0</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">B1</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Inductive</span> <span class=\"token hvariable\">nybble</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Type</span> <span class=\"token operator\">:=</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">bits</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b0</span> <span class=\"token hvariable\">b1</span> <span class=\"token hvariable\">b2</span> <span class=\"token hvariable\">b3</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bit</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Check</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">bits</span> <span class=\"token constant\">B1</span> <span class=\"token constant\">B0</span> <span class=\"token constant\">B1</span> <span class=\"token constant\">B0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token hvariable\">nybble</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 这里的 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bit</span><span class=\"token punctuation\">]</span> 构造子起到了对它内容的包装作用。\n    解包可以通过模式匹配来实现，就如同下面的 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">all_zero</span><span class=\"token punctuation\">]</span> 函数一样，\n    其通过解包来验证一个半字节的所有比特是否都为 <span class=\"token punctuation\">[</span><span class=\"token constant\">B0</span><span class=\"token punctuation\">]</span>。\n    我们用<span class=\"token hvariable\">_'</span>通配符'<span class=\"token hvariable\">_</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">]</span> 来避免创建不需要的变量名。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Definition</span> <span class=\"token hvariable\">all_zero</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">nb</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nybble</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">nb</span> <span class=\"token hvariable\">with</span>\n    <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">bits</span> <span class=\"token constant\">B0</span> <span class=\"token constant\">B0</span> <span class=\"token constant\">B0</span> <span class=\"token constant\">B0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">true</span>\n    <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">bits</span> <span class=\"token hvariable\">_</span> <span class=\"token hvariable\">_</span> <span class=\"token hvariable\">_</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">false</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Compute</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">all_zero</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">bits</span> <span class=\"token constant\">B1</span> <span class=\"token constant\">B0</span> <span class=\"token constant\">B1</span> <span class=\"token constant\">B0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">===&gt;</span> <span class=\"token hvariable\">false</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">Compute</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">all_zero</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">bits</span> <span class=\"token constant\">B0</span> <span class=\"token constant\">B0</span> <span class=\"token constant\">B0</span> <span class=\"token constant\">B0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">===&gt;</span> <span class=\"token hvariable\">true</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">=================================================================</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">**</span> 模块 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token constant\">Coq</span> 提供了<span class=\"token hvariable\">_'</span>模块系统'<span class=\"token hvariable\">_</span>来帮助组织大规模的开发。在本课程中，\n    我们不太会用到这方面的特性。不过其中有一点非常有用：\n    如果我们将一组定义放在 <span class=\"token punctuation\">[</span><span class=\"token constant\">Module</span> <span class=\"token constant\">X</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token constant\">End</span> <span class=\"token constant\">X</span><span class=\"token punctuation\">]</span> 标记之间，那么在文件中的\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">End</span><span class=\"token punctuation\">]</span> 之后，我们就可以通过像 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">X<span class=\"token punctuation\">.</span>foo</span><span class=\"token punctuation\">]</span> 这样的名字来引用，而不必直接用\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">foo</span><span class=\"token punctuation\">]</span> 了。在这里，我们通过此特性在内部模块中引入了 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span> 类型的定义，\n    这样就不会覆盖标准库中的同名定义了（我们会在本书后面的部分中使用它，\n    因为它提供了一些简便的特殊记法。）<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Module</span> <span class=\"token constant\">NatPlayground</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">=================================================================</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">**</span> 数值 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 目前我们定义的所有类型都是有限的。无论是像 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">day</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bit</span><span class=\"token punctuation\">]</span> \n    这样的“枚举类型”，抑或是像 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nybble</span><span class=\"token punctuation\">]</span> 这样基于“枚举类型”的元组类型，\n    本质上都是有限的集合。而自然数（<span class=\"token hvariable\">natural</span> <span class=\"token hvariable\">numbers</span>）是一个无限集合，\n    因此我们需要一种更强大的类型声明方式来表示它们。\n\n    数字的表示方法有许多种。我们最为熟悉的便是十进制（<span class=\"token hvariable\">base</span> <span class=\"token number\">10</span>），利用\n    <span class=\"token number\">0</span>～<span class=\"token number\">9</span> 十个数字来表示一个数，例如用 <span class=\"token number\">1</span>，<span class=\"token number\">2</span> 和 <span class=\"token number\">3</span> 来表示 <span class=\"token number\">123</span> （一百二十三）。\n    你或许也接触过十六进制（<span class=\"token hvariable\">base</span> <span class=\"token number\">16</span>），在十六进制中，它被表示为 7B。类似的还有\n    <span class=\"token number\">173</span> （八进制表示）和 <span class=\"token number\">111011</span>（二进制表示）。我们可以使用枚举类型\n    来定义以上任何一种数字表示方式。它们在不同的场景下有着不同的用途。\n\n    二进制表示在计算机硬件中起着举足轻重的作用。它只需要两种不同的电平\n    来表示，因此它的硬件电路可以被设计十分简单。同样的，\n    我们也希望选择一种自然数的表示方式，来让我们的<span class=\"token hvariable\">_</span>证明<span class=\"token hvariable\">_</span>变得更加简单。\n\n    实际上，比起二进制，还有一种更加简单的数字表示方式，一进制（<span class=\"token hvariable\">base</span> <span class=\"token number\">1</span>），\n    也就是只使用单个数字的表示方式（就如同我们的祖先山顶洞人在洞穴上\n    刻“痕迹”计算日子一般）。为了在 <span class=\"token constant\">Coq</span> 中表示一进制数，我们使用两个构造子。\n    大写的 <span class=\"token punctuation\">[</span><span class=\"token constant\">O</span><span class=\"token punctuation\">]</span> 构造子用来表示“零”，而大写的 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span> 构造子用来表示“后继”\n    （或者洞穴上的“痕迹”）。当 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span> 构造子被应用于一个自然数 <span class=\"token hvariable\">n</span> 的表示上时，\n    结果会是自然数 <span class=\"token hvariable\">n</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> 的表示。下面是完整的数据类型定义。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n    \n\n<span class=\"token constant\">Inductive</span> <span class=\"token hvariable\">nat</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Type</span> <span class=\"token operator\">:=</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">O</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 在这种定义下， <span class=\"token number\">0</span> 被表示为 <span class=\"token punctuation\">[</span><span class=\"token constant\">O</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> 则被表示为 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span> 则是 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>，以此类推 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 非形式化地说，此定义中的子句可读作：\n      <span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">O</span><span class=\"token punctuation\">]</span> 是一个自然数（注意这里是字母“<span class=\"token punctuation\">[</span><span class=\"token constant\">O</span><span class=\"token punctuation\">]</span>”，不是数字“<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>”）。\n      <span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span> 可被放在一个自然数之前来产生另一个自然数 ——\n        也就是说，如果 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 是一个自然数，那么 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 也是。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 同样，我们来仔细观察这个定义。\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span> 的定义描述了集合 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span> 中的表达式是如何构造的：\n\n    <span class=\"token operator\">-</span> 构造子表达式 <span class=\"token punctuation\">[</span><span class=\"token constant\">O</span><span class=\"token punctuation\">]</span> 属于集合 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span>；\n    <span class=\"token operator\">-</span> 如果 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 是属于集合 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span> 的构造子表达式，\n      那么 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 也是属于集合 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span> 的构造子表达式；并且\n    <span class=\"token operator\">-</span> 只有以这两种产生的方式构造字表达式才属于集合 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span>。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 这些条件精确刻画了这个“归纳” <span class=\"token punctuation\">[</span><span class=\"token constant\">Inductive</span><span class=\"token punctuation\">]</span> 声明。它们意味着，构造子表达式 <span class=\"token punctuation\">[</span><span class=\"token constant\">O</span><span class=\"token punctuation\">]</span>、\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> 等等都属于集合 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span>，而其它的构造子表达式，如\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">true</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">andb</span> <span class=\"token hvariable\">true</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> 以及 <span class=\"token punctuation\">[</span><span class=\"token constant\">O</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">O</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">O</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> 等则不属于 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span>。\n\n    关键之处在于，我们目前只是定义了一种数字的<span class=\"token hvariable\">_'</span>表示'<span class=\"token hvariable\">_</span>方式，\n    即一种写下它们的方式。名称 <span class=\"token punctuation\">[</span><span class=\"token constant\">O</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span> 是任意的，在这一点上它们没有特殊的意义，\n    它们只是我们能用来写下数字的两个不同的记号（以及一个说明了任何 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span>\n    都能写成一串 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span> 后跟一个 <span class=\"token punctuation\">[</span><span class=\"token constant\">O</span><span class=\"token punctuation\">]</span> 的规则）。如果你喜欢，完全可以将同样的定义写成： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Inductive</span> <span class=\"token hvariable\">nat'</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Type</span> <span class=\"token operator\">:=</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">stop</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">tick</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">foo</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 这些记号的<span class=\"token hvariable\">_'</span>解释'<span class=\"token hvariable\">_</span>完全取决于我们如何用它进行计算。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 我们可以像之前的布尔值或日期那样，\n    编写一个函数来对上述自然数的表示进行模式匹配。\n    例如，以下为前趋函数：<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Definition</span> <span class=\"token builtin\">pred</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">with</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">O</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant\">O</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">n'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">n'</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 第二个分支可以读作：“如果 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 对于某个 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n'</span><span class=\"token punctuation\">]</span> 的形式为 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span> <span class=\"token hvariable\">n'</span><span class=\"token punctuation\">]</span>，\n    那么就返回 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n'</span><span class=\"token punctuation\">]</span>。” <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 下面的 <span class=\"token punctuation\">[</span><span class=\"token constant\">End</span><span class=\"token punctuation\">]</span> 指令会关闭当前的模块，所以 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span> 会重新代表标准库中的类型而非我们\n    自己定义的 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span>。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">End</span> <span class=\"token constant\">NatPlayground</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 为了让自然数使用起来更加自然，<span class=\"token constant\">Coq</span> 内建了一小部分解析打印功能：\n    普通的十进制数可视为“一进制”自然数的另一种记法，以代替 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span> 与 <span class=\"token punctuation\">[</span><span class=\"token constant\">O</span><span class=\"token punctuation\">]</span> 构造子；\n    反过来，<span class=\"token constant\">Coq</span> 也会默认将自然数打印为十进制形式： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Check</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">===&gt;</span> <span class=\"token number\">4</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Definition</span> <span class=\"token hvariable\">minustwo</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">with</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">O</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant\">O</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token constant\">O</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant\">O</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token hvariable\">n'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">n'</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Compute</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">minustwo</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">===&gt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 构造子 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span> 的类型为 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nat</span> <span class=\"token operator\">-&gt;</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span>，与 <span class=\"token punctuation\">[</span><span class=\"token builtin\">pred</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">minustwo</span><span class=\"token punctuation\">]</span> 之类的函数相同： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Check</span> <span class=\"token constant\">S</span>        <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token operator\">-&gt;</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Check</span> <span class=\"token builtin\">pred</span>     <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token operator\">-&gt;</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Check</span> <span class=\"token hvariable\">minustwo</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token operator\">-&gt;</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 以上三个东西均可作用于自然数，并产生自然数结果，但第一个 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span>\n    与后两者有本质区别：<span class=\"token punctuation\">[</span><span class=\"token builtin\">pred</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">minustwo</span><span class=\"token punctuation\">]</span> 这类函数是通过给定的<span class=\"token hvariable\">_'</span>计算规则'<span class=\"token hvariable\">_</span>定义的——\n    例如 <span class=\"token punctuation\">[</span><span class=\"token builtin\">pred</span><span class=\"token punctuation\">]</span> 的定义表明 <span class=\"token punctuation\">[</span><span class=\"token builtin\">pred</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> 可化简为 <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>——但 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span> 的定义不包含此类行为。\n    虽然 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span> 可以作用于参数这点与函数<span class=\"token hvariable\">_'</span>相似'<span class=\"token hvariable\">_</span>，但其作用仅限于构造数字，而并不用于计算。\n\n    （考虑标准的十进制数：数字 <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> 不代表任何计算，只表示一部分数据。\n    用 <span class=\"token punctuation\">[</span><span class=\"token number\">111</span><span class=\"token punctuation\">]</span> 指代数字一百一十一，实则使用三个 <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> 符号表示此数各位。）\n\n    现在我们来为数值定义更多的函数。\n\n    简单的模式匹配不足以描述很多有趣的数值运算，我们还需要递归定义。\n    例如：给定自然数 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span>，欲判定其是否为偶数，则需递归检查 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> 是否为偶数。\n    关键字 <span class=\"token punctuation\">[</span><span class=\"token constant\">Fixpoint</span><span class=\"token punctuation\">]</span> 可用于定义此类函数。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Fixpoint</span> <span class=\"token hvariable\">evenb</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span><span class=\"token operator\">:</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">with</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">O</span>        <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">true</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token constant\">O</span>      <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">false</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token hvariable\">n'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">evenb</span> <span class=\"token hvariable\">n'</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 我们可以使用类似的 <span class=\"token punctuation\">[</span><span class=\"token constant\">Fixpoint</span><span class=\"token punctuation\">]</span> 声明来定义 <span class=\"token punctuation\">[</span><span class=\"token builtin\">odd</span><span class=\"token punctuation\">]</span> 函数，\n    不过还有种更简单方式：<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Definition</span> <span class=\"token hvariable\">oddb</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span><span class=\"token operator\">:</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">negb</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">evenb</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_oddb1</span><span class=\"token operator\">:</span>    <span class=\"token hvariable\">oddb</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_oddb2</span><span class=\"token operator\">:</span>    <span class=\"token hvariable\">oddb</span> <span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> （如果你逐步检查完这些证明，就会发现 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">]</span> 其实没什么作用\n    —— 所有工作都被 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">]</span> 完成了。我们之后会讨论为什么会这样。<span class=\"token punctuation\">)</span>\n\n    当然，我们也可以用递归定义多参函数。  <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Module</span> <span class=\"token constant\">NatPlayground2</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Fixpoint</span> <span class=\"token hvariable\">plus</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">m</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">with</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">O</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">m</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">n'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">plus</span> <span class=\"token hvariable\">n'</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">)</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 三加二等于五，不出意料。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Compute</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">plus</span> <span class=\"token number\">3</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">===&gt;</span> <span class=\"token number\">5</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token constant\">Coq</span> 所执行的化简步骤如下所示： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>   <span class=\"token punctuation\">[</span><span class=\"token hvariable\">plus</span> <span class=\"token number\">3</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">i</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">e</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">plus</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n <span class=\"token operator\">==&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">plus</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      （根据第二个 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">match</span><span class=\"token punctuation\">]</span> 子句）\n <span class=\"token operator\">==&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">plus</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      （根据第二个 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">match</span><span class=\"token punctuation\">]</span> 子句）\n <span class=\"token operator\">==&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">plus</span> <span class=\"token constant\">O</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      （根据第二个 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">match</span><span class=\"token punctuation\">]</span> 子句）\n <span class=\"token operator\">==&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      （根据第一个 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">match</span><span class=\"token punctuation\">]</span> 子句）\n<span class=\"token hvariable\">i</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">e</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 为了书写方便，如果两个或更多参数具有相同的类型，那么它们可以写在一起。\n    在下面的定义中，<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> 的意思与 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">m</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> 相同。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Fixpoint</span> <span class=\"token hvariable\">mult</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">with</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">O</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant\">O</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">n'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">plus</span> <span class=\"token hvariable\">m</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">mult</span> <span class=\"token hvariable\">n'</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">)</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_mult1</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">mult</span> <span class=\"token number\">3</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 你可以在两个表达式之间添加逗号来同时匹配它们：<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Fixpoint</span> <span class=\"token hvariable\">minus</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token hvariable\">m</span><span class=\"token operator\">:</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">with</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">O</span>   <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span>    <span class=\"token operator\">=&gt;</span> <span class=\"token constant\">O</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">_</span> <span class=\"token punctuation\">,</span> <span class=\"token constant\">O</span>    <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">n</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">n'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">m'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">minus</span> <span class=\"token hvariable\">n'</span> <span class=\"token hvariable\">m'</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">End</span> <span class=\"token constant\">NatPlayground2</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Fixpoint</span> <span class=\"token builtin\">exp</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">base</span> <span class=\"token hvariable\">power</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">power</span> <span class=\"token hvariable\">with</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">O</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant\">S</span> <span class=\"token constant\">O</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">p</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">mult</span> <span class=\"token hvariable\">base</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">exp</span> <span class=\"token hvariable\">base</span> <span class=\"token hvariable\">p</span><span class=\"token punctuation\">)</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">****</span> 练习：<span class=\"token number\">1</span> 星<span class=\"token punctuation\">,</span> <span class=\"token hvariable\">standard</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">factorial</span><span class=\"token punctuation\">)</span> \n\n    回想一下标准的阶乘函数：\n\n       <span class=\"token hvariable\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">=</span>  <span class=\"token number\">1</span>\n       <span class=\"token hvariable\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">=</span>  <span class=\"token hvariable\">n</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token hvariable\">n</span><span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    把它翻译成 <span class=\"token constant\">Coq</span> 代码。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">Compute</span> <span class=\"token punctuation\">(</span>第三题<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Fixpoint</span> <span class=\"token hvariable\">factorial</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span><span class=\"token operator\">:</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">with</span>\n    <span class=\"token operator\">|</span> <span class=\"token number\">0</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">1</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">n'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">mult</span> <span class=\"token hvariable\">n</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token hvariable\">n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_factorial1</span><span class=\"token operator\">:</span>          <span class=\"token punctuation\">(</span><span class=\"token hvariable\">factorial</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_factorial2</span><span class=\"token operator\">:</span>          <span class=\"token punctuation\">(</span><span class=\"token hvariable\">factorial</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">mult</span> <span class=\"token number\">10</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 我们可以通过引入加法、乘法和减法的<span class=\"token hvariable\">_'</span>记法（<span class=\"token constant\">Notation</span>）'<span class=\"token hvariable\">_</span>来让数字表达式更加易读。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Notation</span> <span class=\"token string\">\"x + y\"</span> <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">plus</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span>\n                       <span class=\"token punctuation\">(</span><span class=\"token hvariable\">at</span> <span class=\"token hvariable\">level</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">left</span> <span class=\"token hvariable\">associativity</span><span class=\"token punctuation\">)</span>\n                       <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat_scope</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Notation</span> <span class=\"token string\">\"x - y\"</span> <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">minus</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span>\n                       <span class=\"token punctuation\">(</span><span class=\"token hvariable\">at</span> <span class=\"token hvariable\">level</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">left</span> <span class=\"token hvariable\">associativity</span><span class=\"token punctuation\">)</span>\n                       <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat_scope</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Notation</span> <span class=\"token string\">\"x * y\"</span> <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">mult</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span>\n                       <span class=\"token punctuation\">(</span><span class=\"token hvariable\">at</span> <span class=\"token hvariable\">level</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">left</span> <span class=\"token hvariable\">associativity</span><span class=\"token punctuation\">)</span>\n                       <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat_scope</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Check</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> （<span class=\"token punctuation\">[</span><span class=\"token hvariable\">level</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">associativity</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nat_scope</span><span class=\"token punctuation\">]</span> 标记控制着 <span class=\"token constant\">Coq</span>\n    语法分析器如何处理上述记法。目前无需关注这些细节。有兴趣的读者可参阅本章末尾\n    “关于记法的更多内容”一节。）\n\n    注意，这些声明并不会改变我们之前的定义，而只是让 <span class=\"token constant\">Coq</span> 语法分析器接受用\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">]</span> 来代替 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">plus</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">]</span>，并在 <span class=\"token constant\">Coq</span> 美化输出时反过来将 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">plus</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">]</span>\n    显示为 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">]</span>。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token constant\">Coq</span> 几乎不包含任何内置定义，甚至连数值间的相等关系都是由用户来实现。\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">eqb</span><span class=\"token punctuation\">]</span> 函数定义如下：该函数检验自然数 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span> 间是否满足相等关系 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">eq</span><span class=\"token punctuation\">]</span>，\n    并以布尔值 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span> 表示。注意该定义使用嵌套匹配 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">match</span><span class=\"token punctuation\">]</span>\n    （亦可仿照 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">minus</span><span class=\"token punctuation\">]</span> 使用并列匹配）。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Fixpoint</span> <span class=\"token hvariable\">eqb</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">with</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">O</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">with</span>\n         <span class=\"token operator\">|</span> <span class=\"token constant\">O</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">true</span>\n         <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">m'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">false</span>\n         <span class=\"token hvariable\">end</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">n'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">with</span>\n            <span class=\"token operator\">|</span> <span class=\"token constant\">O</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">false</span>\n            <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">m'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">eqb</span> <span class=\"token hvariable\">n'</span> <span class=\"token hvariable\">m'</span>\n            <span class=\"token hvariable\">end</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 类似地，<span class=\"token punctuation\">[</span><span class=\"token hvariable\">leb</span><span class=\"token punctuation\">]</span> 函数检验其第一个参数是否小于等于第二个参数，以布尔值表示。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Fixpoint</span> <span class=\"token hvariable\">leb</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">with</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">O</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">true</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">n'</span> <span class=\"token operator\">=&gt;</span>\n      <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">with</span>\n      <span class=\"token operator\">|</span> <span class=\"token constant\">O</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">false</span>\n      <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">m'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">leb</span> <span class=\"token hvariable\">n'</span> <span class=\"token hvariable\">m'</span>\n      <span class=\"token hvariable\">end</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_leb1</span><span class=\"token operator\">:</span>                <span class=\"token hvariable\">leb</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_leb2</span><span class=\"token operator\">:</span>                <span class=\"token hvariable\">leb</span> <span class=\"token number\">2</span> <span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_leb3</span><span class=\"token operator\">:</span>                <span class=\"token hvariable\">leb</span> <span class=\"token number\">4</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 我们之后会经常用到它们（特别是 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">eqb</span><span class=\"token punctuation\">]</span>），因此先定义好它们的中缀记法： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Notation</span> <span class=\"token string\">\"x =? y\"</span> <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">eqb</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">at</span> <span class=\"token hvariable\">level</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat_scope</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Notation</span> <span class=\"token string\">\"x &lt;=? y\"</span> <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">leb</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">at</span> <span class=\"token hvariable\">level</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat_scope</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_leb3'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">&lt;=?</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">****</span> 练习：<span class=\"token number\">1</span> 星<span class=\"token punctuation\">,</span> <span class=\"token hvariable\">standard</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">ltb</span><span class=\"token punctuation\">)</span> \n\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">ltb</span><span class=\"token punctuation\">]</span> 函数检验自然数间的小于关系，以布尔值表示。\n    请利用前文定义的函数写出该定义，不要使用 <span class=\"token punctuation\">[</span><span class=\"token constant\">Fixpoint</span><span class=\"token punctuation\">]</span> 构造新的递归。\n    （只需前文中的一个函数即可实现该定义，不过也可两者皆用。） <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">Compute</span> <span class=\"token punctuation\">(</span>第四题<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Definition</span> <span class=\"token hvariable\">ltb</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span><span class=\"token operator\">:=</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">&lt;=?</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">=?</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> <span class=\"token hvariable\">false</span> <span class=\"token keyword\">else</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Notation</span> <span class=\"token string\">\"x &lt;? y\"</span> <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">ltb</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">at</span> <span class=\"token hvariable\">level</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat_scope</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_ltb1</span><span class=\"token operator\">:</span>             <span class=\"token punctuation\">(</span><span class=\"token hvariable\">ltb</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_ltb2</span><span class=\"token operator\">:</span>             <span class=\"token punctuation\">(</span><span class=\"token hvariable\">ltb</span> <span class=\"token number\">2</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_ltb3</span><span class=\"token operator\">:</span>             <span class=\"token punctuation\">(</span><span class=\"token hvariable\">ltb</span> <span class=\"token number\">4</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">#################################################################</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">*</span> 基于化简的证明 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 至此，我们已经定义了一些数据类型和函数。让我们把问题转到如何表述和证明\n    它们行为的性质上来。其实我们已经开始这样做了：前几节中的每个 <span class=\"token punctuation\">[</span><span class=\"token constant\">Example</span><span class=\"token punctuation\">]</span>\n    都对几个函数在某些特定输入上的行为做出了准确的断言。这些断言的证明方法都一样：\n    使用 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">]</span> 来化简等式两边，然后用 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">]</span> 来检查两边是否具有相同的值。\n\n    这类“基于化简的证明”还可以用来证明更多有趣的性质。例如，对于“<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    出现在左边时是加法 <span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> 的‘幺元’”这一事实，我们只需读一遍 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">plus</span><span class=\"token punctuation\">]</span> 的定义，\n    即可通过观察“对于 <span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span>，无论 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 的值为多少均可化简为 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span>”而得到证明。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">plus_O_n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> （或许你会注意到以上语句在你的 <span class=\"token constant\">IDE</span> 中和在浏览器渲染的 <span class=\"token constant\">HTML</span>\n    中不大一样，我们用保留标识符“<span class=\"token hvariable\">forall</span>”来表示全称量词\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">forall</span><span class=\"token punctuation\">]</span>。当 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">v</span><span class=\"token punctuation\">]</span> 文件转换为 <span class=\"token constant\">HTML</span> 后，它会变成一个倒立的“<span class=\"token constant\">A</span>”。）\n\n    现在是时候说一下 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">]</span> 了，它其实比我们想象的更为强大。\n    在前面的例子中，其实并不需要调用 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">]</span> ，因为 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">]</span>\n    在检查等式两边是否相等时会自动做一些化简；我们加上 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">]</span> 只是为了看到化简之后，\n    证明结束之前的中间状态。下面是对同一定理更短的证明：<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">plus_O_n'</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 此外，<span class=\"token punctuation\">[</span><span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">]</span> 在某些方面做了比 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">]</span> <span class=\"token hvariable\">_'</span>更多'<span class=\"token hvariable\">_</span>的化简 ——\n    比如它会尝试“展开”已定义的项，将它们替换为该定义右侧的值。\n    了解这一点会很有帮助。产生这种差别的原因是，当自反性成立时，\n    整个证明目标就完成了，我们不必再关心 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">]</span> 化简和展开了什么；\n    而当我们必须去观察和理解新产生的证明目标时，我们并不希望盲目地展开定义，\n    将证明目标留在混乱的声明中。这种情况下就要用到 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">]</span> 了。\n\n    我们刚刚声明的定理形式及其证明与前面的例子基本相同，它们只有一点差别。\n\n    首先，我们使用了关键字 <span class=\"token punctuation\">[</span><span class=\"token constant\">Theorem</span><span class=\"token punctuation\">]</span> 而非 <span class=\"token punctuation\">[</span><span class=\"token constant\">Example</span><span class=\"token punctuation\">]</span>。这种差别纯粹是风格问题；\n    在 <span class=\"token constant\">Coq</span> 中，关键字 <span class=\"token punctuation\">[</span><span class=\"token constant\">Example</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token constant\">Theorem</span><span class=\"token punctuation\">]</span>（以及其它一些，包括 <span class=\"token punctuation\">[</span><span class=\"token constant\">Lemma</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token constant\">Fact</span><span class=\"token punctuation\">]</span>\n    和 <span class=\"token punctuation\">[</span><span class=\"token constant\">Remark</span><span class=\"token punctuation\">]</span>）都表示完全一样的东西。\n\n    其次，我们增加了量词 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">n</span><span class=\"token operator\">:</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span>，因此我们的定理讨论了<span class=\"token hvariable\">_'</span>所有的'<span class=\"token hvariable\">_</span> 自然数 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span>。\n    在非形式化的证明中，为了证明这种形式的定理，我们通常会说“<span class=\"token hvariable\">_'</span>假设'<span class=\"token hvariable\">_</span>\n    存在一个任意自然数 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span><span class=\"token operator\">...</span>”。而在形式化证明中，这是用 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span>\n    来实现的，它会将量词从证明目标转移到当前假设的<span class=\"token hvariable\">_'</span>上下文'<span class=\"token hvariable\">_</span>中。\n    注意在 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">intros</span><span class=\"token punctuation\">]</span> 从句中，我们可以使用别的标识符来代替 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span>\n    （当然这可能会让阅读证明的人感到困惑）：\n<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">plus_O_n''</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 关键字 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">intros</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">]</span> 都是<span class=\"token hvariable\">_'</span>策略（<span class=\"token constant\">Tactic</span>）'<span class=\"token hvariable\">_</span>的例子。\n    策略是一条可以用在 <span class=\"token punctuation\">[</span><span class=\"token constant\">Proof</span><span class=\"token punctuation\">]</span>（证明）和 <span class=\"token punctuation\">[</span><span class=\"token constant\">Qed</span><span class=\"token punctuation\">]</span>（证毕）之间的指令，它告诉 <span class=\"token constant\">Coq</span>\n    如何来检验我们所下的一些断言的正确性。在本章剩余的部分及以后的课程中，\n    我们会见到更多的策略。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 其它类似的定理可通过相同的模式证明。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">plus_1_l</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">n</span><span class=\"token operator\">:</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">mult_0_l</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">n</span><span class=\"token operator\">:</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 上述定理名称的后缀 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">_l</span><span class=\"token punctuation\">]</span> 读作“在左边”。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 跟进这些证明的每个步骤，观察上下文及证明目标的变化是非常值得的。\n    你可能要在 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">]</span> 前面加上 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">]</span> 调用，以便观察 <span class=\"token constant\">Coq</span>\n    在检查它们的相等关系前进行的化简。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">#################################################################</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">*</span> 基于改写的证明 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 下面这个定理比我们之前见过的更加有趣： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">plus_id_example</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">m</span><span class=\"token operator\">:</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">,</span>\n  <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">-&gt;</span>\n  <span class=\"token hvariable\">n</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 该定理并未对自然数 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">m</span><span class=\"token punctuation\">]</span> 所有可能的值做全称断言，而是讨论了仅当\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">]</span> 时这一更加特定情况。箭头符号读作“蕴含”。\n\n    与此前相同，我们需要在能够假定存在自然数 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">m</span><span class=\"token punctuation\">]</span> 的基础上进行推理。\n    另外我们需要假定有前提 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">]</span>。<span class=\"token punctuation\">[</span><span class=\"token hvariable\">intros</span><span class=\"token punctuation\">]</span> 策略用来将这三条前提从证明目标\n    移到当前上下文的假设中。\n\n    由于 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">m</span><span class=\"token punctuation\">]</span> 是任意自然数，我们无法用化简来证明此定理，\n    不过可以通过观察来证明它。如果我们假设了 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">]</span>，那么就可以将证明目标中的\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 替换成 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">m</span><span class=\"token punctuation\">]</span> 从而获得两边表达式相同的等式。用来告诉 <span class=\"token constant\">Coq</span>\n    执行这种替换的策略叫做<span class=\"token hvariable\">_'</span>改写'<span class=\"token hvariable\">_</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">rewrite</span><span class=\"token punctuation\">]</span>。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 将两个量词移到上下文中： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 将前提移到上下文中： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token constant\">H</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 用前提改写目标： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n  <span class=\"token hvariable\">rewrite</span> <span class=\"token operator\">-&gt;</span> <span class=\"token constant\">H</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 证明的第一行将全称量词变量 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">m</span><span class=\"token punctuation\">]</span> 移到上下文中。第二行将前提\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">]</span> 移到上下文中，并将其命名为 <span class=\"token punctuation\">[</span><span class=\"token constant\">H</span><span class=\"token punctuation\">]</span>。第三行告诉 <span class=\"token constant\">Coq</span>\n    改写当前目标（<span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">]</span>），把前提等式 <span class=\"token punctuation\">[</span><span class=\"token constant\">H</span><span class=\"token punctuation\">]</span> 的左边替换成右边。\n\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token hvariable\">rewrite</span><span class=\"token punctuation\">]</span> 中的箭头与蕴含无关：它指示 <span class=\"token constant\">Coq</span> 从左往右地应用改写。\n    若要从右往左改写，可以使用 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">rewrite</span> <span class=\"token operator\">&lt;-</span><span class=\"token punctuation\">]</span>。在上面的证明中试一试这种改变，\n    看看 <span class=\"token constant\">Coq</span> 的反应有何不同。<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">****</span> 练习：<span class=\"token number\">1</span> 星<span class=\"token punctuation\">,</span> <span class=\"token hvariable\">standard</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">plus_id_exercise</span><span class=\"token punctuation\">)</span> \n\n    删除 <span class=\"token string\">\"[Admitted.]\"</span> 并补完证明。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">Compute</span><span class=\"token punctuation\">(</span>第五题<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">plus_id_exercise</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">o</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">,</span>\n  <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">-&gt;</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">o</span> <span class=\"token operator\">-&gt;</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">o</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 将两个量词移到上下文中： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">o</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 将前提移到上下文中： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token constant\">H</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token constant\">H0</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 用前提改写目标： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n  <span class=\"token hvariable\">rewrite</span> <span class=\"token operator\">-&gt;</span> <span class=\"token constant\">H</span><span class=\"token punctuation\">,</span><span class=\"token constant\">H0</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Admitted</span><span class=\"token punctuation\">]</span> 指令告诉 <span class=\"token constant\">Coq</span> 我们想要跳过此定理的证明，而将其作为已知条件，\n    这在开发较长的证明时很有用。在进行一些较大的命题论证时，我们能够声明一些附加的事实。\n    既然我们认为这些事实对论证是有用的，就可以用 <span class=\"token punctuation\">[</span><span class=\"token constant\">Admitted</span><span class=\"token punctuation\">]</span> 先不加怀疑地接受这些事实，\n    然后继续思考大命题的论证。直到确认了该命题确实是有意义的，\n    再回过头去证明刚才跳过的证明。但是要小心：每次你使用 <span class=\"token punctuation\">[</span><span class=\"token constant\">Admitted</span><span class=\"token punctuation\">]</span>，\n    你就为 <span class=\"token constant\">Coq</span> 这个完好、严密、形式化且封闭的世界开了一个毫无逻辑的后门。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Check</span><span class=\"token punctuation\">]</span> 命令也可用来检查以前声明的引理和定理。下面两个关于乘法引理来自于标准库。\n    （在下一章中，我们会亲自证明它们。） <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 除了上下文中现有的假设外，我们还可以通过 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">rewrite</span><span class=\"token punctuation\">]</span> 策略来运用前期证明过的定理。\n    如果前期证明的定理的语句中包含量词变量，如前例所示，<span class=\"token constant\">Coq</span> 会通过匹配当前的证明目标\n    来尝试实例化（<span class=\"token constant\">Instantiate</span>）它们。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token constant\">Check</span> <span class=\"token hvariable\">mult_n_O</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">===&gt;</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">*</span> <span class=\"token number\">0</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Check</span> <span class=\"token hvariable\">mult_n_Sm</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">===&gt;</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">*</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">mult_n_0_m_0</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">*</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">m</span> <span class=\"token operator\">*</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">rewrite</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">mult_n_O</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">rewrite</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">mult_n_O</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">mult_n_1</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">,</span>\n  <span class=\"token hvariable\">n</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">rewrite</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">mult_n_Sm</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">rewrite</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">mult_n_O</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">#################################################################</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">*</span> 利用分类讨论来证明 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 当然，并非一切都能通过简单的计算和改写来证明。通常，一些未知的，\n    假定的值（如任意数值、布尔值、列表等等）会阻碍化简。\n    例如，如果我们像以前一样使用 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">]</span> 策略尝试证明下面的事实，就会被卡住。\n    （现在我们用 <span class=\"token punctuation\">[</span><span class=\"token constant\">Abort</span><span class=\"token punctuation\">]</span> 指令来放弃证明。） <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">plus_1_neq_0_firsttry</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=?</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">simpl</span><span class=\"token punctuation\">.</span>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 无能为力<span class=\"token operator\">!</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">Abort</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 原因在于：根据 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">eqb</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> 的定义，其第一个参数先被 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">match</span><span class=\"token punctuation\">]</span> 匹配。\n    但此处 <span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> 的第一个参数 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 未知，而 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">eqb</span><span class=\"token punctuation\">]</span> 的第一个参数 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    是复合表达式，二者均无法化简。\n\n    欲进行规约，则需分情况讨论 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 的所有可能构造。如果 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 为 <span class=\"token punctuation\">[</span><span class=\"token constant\">O</span><span class=\"token punctuation\">]</span>，\n    则可验算 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=?</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> 的结果确实为 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">false</span><span class=\"token punctuation\">]</span>；如果 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 由 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span> <span class=\"token hvariable\">n'</span><span class=\"token punctuation\">]</span> 构造，\n    那么即使我们不知道 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> 表示什么，但至少知道它的构造子为 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span>，\n    因而足以得出 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=?</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> 的结果为 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">false</span><span class=\"token punctuation\">]</span>。\n\n    告诉 <span class=\"token constant\">Coq</span> 分别对 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">n'</span><span class=\"token punctuation\">]</span> 这两种情况进行分析的策略，叫做 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">destruct</span><span class=\"token punctuation\">]</span>。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">plus_1_neq_0</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=?</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">as</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">|</span> <span class=\"token hvariable\">n'</span><span class=\"token punctuation\">]</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">E</span><span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>   <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">destruct</span><span class=\"token punctuation\">]</span> 策略会生成<span class=\"token hvariable\">_</span>两个<span class=\"token hvariable\">_</span>子目标，为了让 <span class=\"token constant\">Coq</span> 认可这个定理，\n    我们必须接下来证明这两个子目标。\n\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">as</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">|</span> <span class=\"token hvariable\">n'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> 这种标注被称为 <span class=\"token hvariable\">_'</span>引入模式'<span class=\"token hvariable\">_</span>。它告诉 <span class=\"token constant\">Coq</span> 应当在每个子目标中\n    使用什么样的变量名。总体而言，在方括号之间的是一个由 <span class=\"token punctuation\">[</span><span class=\"token operator\">|</span><span class=\"token punctuation\">]</span> 隔开的\n    <span class=\"token hvariable\">_'</span>列表的列表'<span class=\"token hvariable\">_</span>（译者注：<span class=\"token hvariable\">list</span> <span class=\"token keyword\">of</span> <span class=\"token hvariable\">lists</span>）。在上面的例子中，第一个元素是\n    一个空列表，因为 <span class=\"token punctuation\">[</span><span class=\"token constant\">O</span><span class=\"token punctuation\">]</span> 构造子是一个空构造子（它没有任何参数）。\n    第二个元素提供了包含单个变量名 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n'</span><span class=\"token punctuation\">]</span> 的列表，因为 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span> 是一个单构造子。\n\n    在每个子目标中，<span class=\"token constant\">Coq</span> 会记录这个子目标中关于 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 的假设，<span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> 还是\n    对于某个 <span class=\"token hvariable\">n'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">n'</span><span class=\"token punctuation\">]</span>。而 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">E</span><span class=\"token punctuation\">]</span> 记号则告知 <span class=\"token constant\">Coq</span> 以 <span class=\"token punctuation\">[</span><span class=\"token constant\">E</span><span class=\"token punctuation\">]</span> 来命名这些\n    假设。省略 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">E</span><span class=\"token punctuation\">]</span> 会导致 <span class=\"token constant\">Coq</span> 省略这些假设。这种省略能够使得一些不需要\n    显式用到这类假设的证明显得更加流畅。但在实践中最好还是保留他们，\n    因为他们可以作为一种说明文档来在证明过程中指引你。\n\n    第二行和第三行中的 <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token punctuation\">]</span> 符号叫做<span class=\"token hvariable\">_'</span>标号'<span class=\"token hvariable\">_</span>，它标明了这两个生成的子目标所对应的证明部分。\n    （译注：此处的“标号”应理解为一个项目列表中每个 <span class=\"token hvariable\">_'</span>条目'<span class=\"token hvariable\">_</span> 前的小标记，如 ‣ 或 •。）\n    标号后面的证明脚本是一个子目标的完整证明。在本例中，每个子目标都简单地使用\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">]</span> 完成了证明。通常，<span class=\"token punctuation\">[</span><span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">]</span> 本身会执行一些化简操作。\n    例如，第二段证明将 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">at</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token hvariable\">n'</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> 化简成 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">false</span><span class=\"token punctuation\">]</span>，是通过先将\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token hvariable\">n'</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> 转写成 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n'</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>，接着展开 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">beq_nat</span><span class=\"token punctuation\">]</span>，之后再化简 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">match</span><span class=\"token punctuation\">]</span> 完成的。\n\n    用标号来区分情况是可选的：如果没有标号，<span class=\"token constant\">Coq</span> 只会简单地要求你依次证明每个子目标。\n    尽管如此，使用标号仍然是一个好习惯。原因有二：首先，它能让证明的结构更加清晰易读。\n    其次，标号能指示 <span class=\"token constant\">Coq</span> 在开始验证下一个目标前确认上一个子目标已完成，\n    防止不同子目标的证明搅和在一起。这一点在大型开发中尤为重要，\n    因为一些证明片段会导致很耗时的排错过程。\n\n    在 <span class=\"token constant\">Coq</span> 中并没有既严格又便捷的规则来格式化证明 —— 尤其指应在哪里断行，\n    以及证明中的段落应如何缩进以显示其嵌套结构。然而，无论格式的其它方面如何布局，\n    只要在多个子目标生成的地方为每行开头标上标号，那么整个证明就会有很好的可读性。\n\n    这里也有必要提一下关于每行代码长度的建议。<span class=\"token constant\">Coq</span> 的初学者有时爱走极端，\n    要么一行只有一个策略语句，要么把整个证明都写在一行里。更好的风格则介于两者之间。\n    一个合理的习惯是给自己设定一个每行 <span class=\"token number\">80</span> 个字符的限制。更长的行会很难读，\n    也不便于显示或打印。很多编辑器都能帮你做到。\n\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">destruct</span><span class=\"token punctuation\">]</span> 策略可用于任何归纳定义的数据类型。比如，我们接下来会用它来证明\n    布尔值的取反是对合（<span class=\"token constant\">Involutive</span>）的 —— 即，取反是自身的逆运算。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">negb_involutive</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span><span class=\"token punctuation\">,</span>\n  <span class=\"token hvariable\">negb</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">negb</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">E</span><span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 注意这里的 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">destruct</span><span class=\"token punctuation\">]</span> 没有 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">as</span><span class=\"token punctuation\">]</span> 子句，因为此处 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">destruct</span><span class=\"token punctuation\">]</span>\n    生成的子分类均无需绑定任何变量，因此也就不必指定名字。\n    实际上，我们也可以省略 <span class=\"token hvariable\">_'</span>任何'<span class=\"token hvariable\">_</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">destruct</span><span class=\"token punctuation\">]</span> 中的 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">as</span><span class=\"token punctuation\">]</span> 子句，\n    <span class=\"token constant\">Coq</span> 会自动填上变量名。不过这通常是个坏习惯，因为如果任其自由决定的话，\n    <span class=\"token constant\">Coq</span> 经常会选择一些容易令人混淆的名字。\n\n    有时在一个子目标内调用 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">destruct</span><span class=\"token punctuation\">]</span>，产生出更多的证明义务（<span class=\"token constant\">Proof</span> <span class=\"token constant\">Obligation</span>）\n    也非常有用。这时候，我们使用不同的标号来标记目标的不同“层级”，比如： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">andb_commutative</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">andb</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">andb</span> <span class=\"token hvariable\">c</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">Eb</span><span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">-</span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">c</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">Ec</span><span class=\"token punctuation\">.</span>\n    <span class=\"token operator\">+</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n    <span class=\"token operator\">+</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">-</span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">c</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">Ec</span><span class=\"token punctuation\">.</span>\n    <span class=\"token operator\">+</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n    <span class=\"token operator\">+</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 每一对 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">]</span> 调用和紧邻其上的 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">destruct</span><span class=\"token punctuation\">]</span>\n    执行后生成的子目标对应。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 除了 <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> 之外，还可以使用 <span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span>（星号）或任何重复的标号符（如\n    <span class=\"token punctuation\">[</span><span class=\"token comment\">--] 或 [***]）作为标号。我们也可以用花括号将每个子证明目标括起来： *)</span>\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">andb_commutative'</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">andb</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">andb</span> <span class=\"token hvariable\">c</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">Eb</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">{<!-- --></span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">c</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">Ec</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">{<!-- --></span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{<!-- --></span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">{<!-- --></span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">c</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">Ec</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">{<!-- --></span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{<!-- --></span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 由于花括号同时标识了证明的开始和结束，因此它们可以同时用于不同的子目标层级，\n    如上例所示。此外，花括号还允许我们在一个证明中的多个层级下使用同一个标号。\n    使用大括号、标号还是二者结合都纯粹是个人偏好问题。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">andb3_exchange</span> <span class=\"token operator\">:</span>\n  <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span> <span class=\"token hvariable\">d</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">andb</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">andb</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">d</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">andb</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">andb</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">d</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">c</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span> <span class=\"token hvariable\">d</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">Eb</span><span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">-</span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">c</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">Ec</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">{<!-- --></span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">d</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">Ed</span><span class=\"token punctuation\">.</span>\n      <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n      <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{<!-- --></span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">d</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">Ed</span><span class=\"token punctuation\">.</span>\n      <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n      <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">-</span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">c</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">Ec</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">{<!-- --></span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">d</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">Ed</span><span class=\"token punctuation\">.</span>\n      <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n      <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{<!-- --></span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">d</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">Ed</span><span class=\"token punctuation\">.</span>\n      <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n      <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 在本章结束之前，我们最后再说一种简便写法。或许你已经注意到了，\n    很多证明在引入变量之后会立即对它进行情况分析：\n\n       <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">y</span> <span class=\"token hvariable\">as</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">|</span><span class=\"token hvariable\">y</span><span class=\"token punctuation\">]</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">E</span><span class=\"token punctuation\">.</span>\n\n    这种写法是如此的常见以至于 <span class=\"token constant\">Coq</span> 为它提供了一种简写：我们可以在引入\n    一个变量的同时对他使用<span class=\"token hvariable\">_'</span>引入模式'<span class=\"token hvariable\">_</span>来进行分类讨论。例如，下面是一个对\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">plus_1_neq_0</span><span class=\"token punctuation\">]</span> 的更简短证明。（这种简写的缺点也显而易见，\n    我们无法再记录在每个子目标中所使用的假设，而之前我们可以通过\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">E</span><span class=\"token punctuation\">]</span> 将它们标注出来。） <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">plus_1_neq_0'</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=?</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">|</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>  <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 如果没有需要命名的构造子参数，我们只需写上 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> 即可进行情况分析。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">andb_commutative''</span> <span class=\"token operator\">:</span>\n  <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">andb</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">andb</span> <span class=\"token hvariable\">c</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">****</span> 练习：<span class=\"token number\">2</span> 星<span class=\"token punctuation\">,</span> <span class=\"token hvariable\">standard</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">andb_true_elim2</span><span class=\"token punctuation\">)</span> \n\n    证明以下断言<span class=\"token punctuation\">,</span> 当使用 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">destruct</span><span class=\"token punctuation\">]</span> 时请用标号标出情况（以及子情况）。\n    这个地方要用<span class=\"token constant\">H</span>上下文去推断<span class=\"token hvariable\">false</span>的情况 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">andb_true_elim2</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span><span class=\"token punctuation\">,</span>\n  <span class=\"token hvariable\">andb</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">true</span> <span class=\"token operator\">-&gt;</span> <span class=\"token hvariable\">c</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">true</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n    <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">intros</span> <span class=\"token constant\">H</span><span class=\"token punctuation\">.</span>\n    <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">as</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">|</span><span class=\"token punctuation\">]</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">Eb</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">{<!-- --></span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">c</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">Ec</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">{<!-- --></span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{<!-- --></span> <span class=\"token hvariable\">rewrite</span> <span class=\"token operator\">&lt;-</span> <span class=\"token constant\">H</span><span class=\"token punctuation\">.</span>\n    <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">{<!-- --></span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">c</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">Ec</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">{<!-- --></span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token hvariable\">rewrite</span> <span class=\"token operator\">&lt;-</span> <span class=\"token constant\">H</span><span class=\"token punctuation\">.</span>\n    <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">****</span> 练习：<span class=\"token number\">1</span> 星<span class=\"token punctuation\">,</span> <span class=\"token hvariable\">standard</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">zero_nbeq_plus_1</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">zero_nbeq_plus_1</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">forall</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span> <span class=\"token operator\">=?</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">false</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">.</span> <span class=\"token hvariable\">destruct</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">as</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">|</span> <span class=\"token hvariable\">n'</span><span class=\"token punctuation\">]</span> <span class=\"token hvariable\">eqn</span><span class=\"token operator\">:</span><span class=\"token constant\">E</span><span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">-</span> <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>   <span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">#################################################################</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">*</span> 关于记法的更多内容 <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> （通常，标为可选的部分对于跟进本书其它部分的学习来说不是必须的，\n    除了那些也标记为可选的部分。在初次阅读时，你可以快速浏览这些部分，\n    以便在将来遇到时能够想起来这里讲了些什么。）\n\n    回忆一下中缀加法和乘法的记法定义：<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Notation</span> <span class=\"token string\">\"x + y\"</span> <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">plus</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span>\n                       <span class=\"token punctuation\">(</span><span class=\"token hvariable\">at</span> <span class=\"token hvariable\">level</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">left</span> <span class=\"token hvariable\">associativity</span><span class=\"token punctuation\">)</span>\n                       <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat_scope</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Notation</span> <span class=\"token string\">\"x * y\"</span> <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">mult</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span>\n                       <span class=\"token punctuation\">(</span><span class=\"token hvariable\">at</span> <span class=\"token hvariable\">level</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">left</span> <span class=\"token hvariable\">associativity</span><span class=\"token punctuation\">)</span>\n                       <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat_scope</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 对于 <span class=\"token constant\">Coq</span> 中的每个记法符号，我们可以指定它的 <span class=\"token hvariable\">_'</span>优先级'<span class=\"token hvariable\">_</span> 和 <span class=\"token hvariable\">_'</span>结合性'<span class=\"token hvariable\">_</span>。\n    优先级 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 用 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">at</span> <span class=\"token hvariable\">level</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 来表示，这样有助于 <span class=\"token constant\">Coq</span> 分析复合表达式。\n    结合性的设置有助于消除表达式中相同符号出现多次时产生的歧义。比如，\n    上面这组对 <span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> 和 <span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> 的参数定义的表达式 <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> 是 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> 的\n    简写。<span class=\"token constant\">Coq</span> 使用 <span class=\"token number\">0</span> 到 <span class=\"token number\">100</span> 的优先级等级，同时支持 <span class=\"token hvariable\">_'</span>左结合'<span class=\"token hvariable\">_</span>、<span class=\"token hvariable\">_'</span>右结合'<span class=\"token hvariable\">_</span>\n    和 <span class=\"token hvariable\">_'</span>不结合'<span class=\"token hvariable\">_</span> 三种结合性。之后我们在别的章节会看到更多与此相关的例子，比如\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">Lists</span><span class=\"token punctuation\">]</span> 一章。\n\n    每个记法符号还与 <span class=\"token hvariable\">_'</span>记法范围（<span class=\"token constant\">Notation</span> <span class=\"token constant\">Scope</span>）'<span class=\"token hvariable\">_</span>相关。<span class=\"token constant\">Coq</span> 会尝试根据上下文来猜测\n    你所指的范围，因此当你写出 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">*</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> 时，它猜测是 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">nat_scope</span><span class=\"token punctuation\">]</span>；而当你\n    写出积（元组）类型 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bool</span><span class=\"token operator\">*</span><span class=\"token hvariable\">bool</span><span class=\"token punctuation\">]</span> 时，它猜测是 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">type_scope</span><span class=\"token punctuation\">]</span>。\n    有时你可能必须百分号记法 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token operator\">*</span><span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span> 来帮助 <span class=\"token constant\">Coq</span> 确定范围。\n    另外，有时 <span class=\"token constant\">Coq</span> 打印的结果中也用 <span class=\"token punctuation\">[</span><span class=\"token operator\">%</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span> 来指示记法所在的范围。\n\n    记法范围同样适用于数值记法（<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token number\">42</span><span class=\"token punctuation\">]</span> 等等），因此你有时候会看到\n    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">%</span><span class=\"token hvariable\">nat</span><span class=\"token punctuation\">]</span>，表示 <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>（即我们在本章中使用的自然数零 <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>），而 <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">%</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">]</span> 表示整数零\n    （来自于标准库中的另一个部分）。\n\n    专业提示：<span class=\"token constant\">Coq</span> 的符号机制不是特别强大，别期望太多。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">#################################################################</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">*</span> 不动点 <span class=\"token punctuation\">[</span><span class=\"token constant\">Fixpoint</span><span class=\"token punctuation\">]</span> 和结构化递归 <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 以下是加法定义的一个副本： <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Fixpoint</span> <span class=\"token hvariable\">plus'</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">m</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span> <span class=\"token operator\">:=</span>\n  <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">with</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">O</span> <span class=\"token operator\">=&gt;</span> <span class=\"token hvariable\">m</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">S</span> <span class=\"token hvariable\">n'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">plus'</span> <span class=\"token hvariable\">n'</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">)</span>\n  <span class=\"token hvariable\">end</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 当 <span class=\"token constant\">Coq</span> 查看此定义时，它会注意到“<span class=\"token punctuation\">[</span><span class=\"token hvariable\">plus'</span><span class=\"token punctuation\">]</span> 的第一个参数是递减的”。\n    这意味着我们对参数 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 执行了<span class=\"token hvariable\">_'</span>结构化递归'<span class=\"token hvariable\">_</span>。换言之，我们仅对严格递减的\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">n</span><span class=\"token punctuation\">]</span> 值进行递归调用。这一点蕴含了“对 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">plus'</span><span class=\"token punctuation\">]</span> 的调用最终会停止”。\n    <span class=\"token constant\">Coq</span> 要求每个 <span class=\"token punctuation\">[</span><span class=\"token constant\">Fixpoint</span><span class=\"token punctuation\">]</span> 定义中的某些参数必须是“递减的”。\n\n    这项要求是 <span class=\"token constant\">Coq</span> 的基本特性之一，它保证了 <span class=\"token constant\">Coq</span> 中定义的所有函数对于所有输入都会终止。\n    然而，由于 <span class=\"token constant\">Coq</span> 的“递减分析”不是非常精致，\n    因此有时必须用一点不同寻常的方式来编写函数。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">****</span> 练习：<span class=\"token number\">2</span> 星<span class=\"token punctuation\">,</span> <span class=\"token hvariable\">standard</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">optional</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">decreasing</span><span class=\"token punctuation\">)</span> \n\n    为了更好的理解这一点，请尝试写一个对于所有输入都<span class=\"token hvariable\">_</span>的确<span class=\"token hvariable\">_</span>终止的 <span class=\"token punctuation\">[</span><span class=\"token constant\">Fixpoint</span><span class=\"token punctuation\">]</span>\n    定义。但这个定义需要违背上述的限制，以此来让 <span class=\"token constant\">Coq</span> 拒绝。（如果您决定将这个可选\n    练习作为作业，请确保您将您的解答注释掉以防止 <span class=\"token constant\">Coq</span> 拒绝执行整个文件。） <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 请在此处解答\n\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token operator\">#################################################################</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">*</span> 更多练习 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token constant\">Each</span> <span class=\"token constant\">SF</span> <span class=\"token hvariable\">chapter</span> <span class=\"token hvariable\">comes</span> <span class=\"token hvariable\">with</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">tester</span> <span class=\"token hvariable\">file</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">e</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">g</span><span class=\"token punctuation\">.</span>  <span class=\"token punctuation\">[</span><span class=\"token hvariable\">BasicsTest<span class=\"token punctuation\">.</span>v</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token hvariable\">containing</span> <span class=\"token hvariable\">scripts</span> <span class=\"token hvariable\">that</span> <span class=\"token hvariable\">check</span> <span class=\"token hvariable\">most</span> <span class=\"token keyword\">of</span> <span class=\"token hvariable\">the</span> <span class=\"token hvariable\">exercises</span><span class=\"token punctuation\">.</span> <span class=\"token constant\">You</span> <span class=\"token hvariable\">can</span> <span class=\"token hvariable\">run</span>\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">make</span> <span class=\"token hvariable\">BasicsTest<span class=\"token punctuation\">.</span>vo</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">terminal</span> <span class=\"token builtin\">and</span> <span class=\"token hvariable\">check</span> <span class=\"token hvariable\">its</span> <span class=\"token hvariable\">output</span> <span class=\"token hvariable\">to</span> <span class=\"token hvariable\">make</span>\n    <span class=\"token hvariable\">sure</span> <span class=\"token hvariable\">you</span> <span class=\"token hvariable\">didn't</span> <span class=\"token hvariable\">miss</span> <span class=\"token hvariable\">anything</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">****</span> 练习：<span class=\"token number\">1</span> 星<span class=\"token punctuation\">,</span> <span class=\"token hvariable\">standard</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">identity_fn_applied_twice</span><span class=\"token punctuation\">)</span> \n\n    用你学过的策略证明以下关于布尔函数的定理。 \n    这个题没想出来是这样写 <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">x</span>都要引入，<span class=\"token hvariable\">x</span>要<span class=\"token hvariable\">rewrite</span>两遍<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">identity_fn_applied_twice</span> <span class=\"token operator\">:</span>\n  <span class=\"token hvariable\">forall</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">f</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">-&gt;</span> <span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token hvariable\">forall</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span>\n  <span class=\"token hvariable\">forall</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">f</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">f</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">x</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token constant\">H</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">rewrite</span> <span class=\"token operator\">-&gt;</span> <span class=\"token hvariable\">x</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">rewrite</span> <span class=\"token operator\">-&gt;</span> <span class=\"token hvariable\">x</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">****</span> 练习：<span class=\"token number\">1</span> 星<span class=\"token punctuation\">,</span> <span class=\"token hvariable\">standard</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">negation_fn_applied_twice</span><span class=\"token punctuation\">)</span> \n\n    现在声明并证明定理 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">negation_fn_applied_twice</span><span class=\"token punctuation\">]</span>，与上一个类似，\n    但是第二个前提说明函数 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">f</span><span class=\"token punctuation\">]</span> 有 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">f</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">negb</span> <span class=\"token hvariable\">x</span><span class=\"token punctuation\">]</span> 的性质。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 请在此处解答 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">Theorem</span> <span class=\"token hvariable\">negation_fn_applied_twice</span> <span class=\"token operator\">:</span>\n  <span class=\"token hvariable\">forall</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">f</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span> <span class=\"token operator\">-&gt;</span> <span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token hvariable\">forall</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">negb</span> <span class=\"token hvariable\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span>\n  <span class=\"token hvariable\">forall</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">f</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">f</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Proof</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">x</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">intros</span> <span class=\"token constant\">H</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">rewrite</span> <span class=\"token operator\">-&gt;</span> <span class=\"token hvariable\">x</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">rewrite</span> <span class=\"token operator\">-&gt;</span> <span class=\"token hvariable\">x</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">rewrite</span> <span class=\"token operator\">-&gt;</span> <span class=\"token hvariable\">negb_involutive</span><span class=\"token punctuation\">.</span>\n  <span class=\"token hvariable\">reflexivity</span><span class=\"token punctuation\">.</span>\n<span class=\"token constant\">Qed</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token operator\">****</span> 练习：<span class=\"token number\">3</span> 星<span class=\"token punctuation\">,</span> <span class=\"token hvariable\">standard</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">binary</span><span class=\"token punctuation\">)</span> \n\n    \n    我们可以将对于自然数的一进制表示推广成更高效的二进制数表达方式。\n    对于一个二进制数，我们可以将它看成一个由 <span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">]</span> 构造子和 <span class=\"token punctuation\">[</span><span class=\"token constant\">B</span><span class=\"token punctuation\">]</span> 构造子\n    组成的序列（它们分别表示 <span class=\"token number\">0</span> 和 <span class=\"token number\">1</span>），而这个序列的结束符为 <span class=\"token punctuation\">[</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">]</span>。\n    类似的，一个数的一进制表示可以看成一个由 <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span> 构造子组成，并由 <span class=\"token punctuation\">[</span><span class=\"token constant\">O</span><span class=\"token punctuation\">]</span> \n    构造子结束的序列。 <span class=\"token operator\">*</span> <span class=\"token punctuation\">)</span>\n\n    <span class=\"token constant\">For</span> <span class=\"token hvariable\">example</span><span class=\"token operator\">:</span>\n\n        <span class=\"token hvariable\">decimal</span>            <span class=\"token hvariable\">binary</span>                           <span class=\"token hvariable\">unary</span>\n           <span class=\"token number\">0</span>                   <span class=\"token constant\">Z</span>                              <span class=\"token constant\">O</span>\n           <span class=\"token number\">1</span>                 <span class=\"token constant\">B</span> <span class=\"token constant\">Z</span>                            <span class=\"token constant\">S</span> <span class=\"token constant\">O</span>\n           <span class=\"token number\">2</span>              <span class=\"token constant\">A</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span>                        <span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span>\n           <span class=\"token number\">3</span>              <span class=\"token constant\">B</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span>                     <span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n           <span class=\"token number\">4</span>           <span class=\"token constant\">A</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                 <span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n           <span class=\"token number\">5</span>           <span class=\"token constant\">B</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>              <span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n           <span class=\"token number\">6</span>           <span class=\"token constant\">A</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>           <span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n           <span class=\"token number\">7</span>           <span class=\"token constant\">B</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>        <span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n           <span class=\"token number\">8</span>        <span class=\"token constant\">A</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    注意到在上面的表示中，二进制数的低位被写在左边而高位写在右边。\n   （与通常的二进制写法相反，这种写法可以让我们在证明中更好的操作他们。） <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Inductive</span> <span class=\"token hvariable\">bin</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Type</span> <span class=\"token operator\">:=</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">Z</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">A</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bin</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">B</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 补全下面二进制自增函数 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">incr</span><span class=\"token punctuation\">]</span> 的定义。并且补全二进制数与一进制自然数转换的\n    函数 <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bin_to_nat</span><span class=\"token punctuation\">]</span>。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Fixpoint</span> <span class=\"token hvariable\">incr</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">m</span><span class=\"token operator\">:</span><span class=\"token hvariable\">bin</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bin</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 将本行替换成 <span class=\"token string\">\":= _你的_定义_ .\"</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> <span class=\"token constant\">Admitted</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Fixpoint</span> <span class=\"token hvariable\">bin_to_nat</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">m</span><span class=\"token operator\">:</span><span class=\"token hvariable\">bin</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">nat</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 将本行替换成 <span class=\"token string\">\":= _你的_定义_ .\"</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> <span class=\"token constant\">Admitted</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> 下面这些针对单增函数和二进制转换函数的“单元测试”可以验算你的定义的正确性。\n    当然，这些单元测试并不能确保你的定义在所有输入下都是正确的！我们在下一章的\n    末尾会重新回到这个话题。 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_bin_incr1</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">incr</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 请在此处解答 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">Admitted</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_bin_incr2</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">incr</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">B</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 请在此处解答 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">Admitted</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_bin_incr3</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">incr</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 请在此处解答 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">Admitted</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_bin_incr4</span> <span class=\"token operator\">:</span> <span class=\"token hvariable\">bin_to_nat</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 请在此处解答 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">Admitted</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_bin_incr5</span> <span class=\"token operator\">:</span>\n        <span class=\"token hvariable\">bin_to_nat</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">incr</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">bin_to_nat</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 请在此处解答 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">Admitted</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token constant\">Example</span> <span class=\"token hvariable\">test_bin_incr6</span> <span class=\"token operator\">:</span>\n        <span class=\"token hvariable\">bin_to_nat</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">incr</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">incr</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">bin_to_nat</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 请在此处解答 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">Admitted</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">03</span><span class=\"token operator\">-</span><span class=\"token number\">14</span> <span class=\"token number\">05</span><span class=\"token operator\">:</span><span class=\"token number\">26</span><span class=\"token operator\">:</span><span class=\"token number\">55</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">UTC</span><span class=\"token operator\">+</span><span class=\"token number\">00</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h2><a id=\"__1443\"></a>题外话 知识旅途中的陷阱</h2>\n<p>最近和科班同学交流，看了一些大神们的博客，深感自己弱鸡的同时也为自己畏难的情绪羞愧。<br/> 自学就是有这样那样的坏处，虽然爱好于此，愿意投入时间，但是也难免遇到枯燥无味的角落三心二意，难免看到难题大感头痛，这时候要是有一份答案在案旁，不免就心猿意马，放下难题去和答案眉来眼去了。<br/> 畏难啊畏难，你可知道因为一时的软弱放弃了多少精华？这时候知识的大门就向你关闭了！<br/> 前几天在学haskell的时候尤甚，三分之一的题目抄的答案，这样的学习又有什么意义呢？<br/> 于是在这里敲响警钟吧！<br/> 接下来我还要继续学习Coq，Haskell，6.824和算法，练习题一定都要自己做不要看答案！<br/> 学习llvm和clang，一定要动手去做啊。<br/> 解题虽然痛苦但也是快乐的，千万不要因为一时的痛苦放弃知识的甘泉啊。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}