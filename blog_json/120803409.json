{"blogid": "120803409", "writerAge": "码龄4年", "writerBlogNum": "49", "writerCollect": "243", "writerComment": "6", "writerFan": "22", "writerGrade": "3级", "writerIntegral": "560", "writerName": "凹凸曼算根葱~", "writerProfileAdress": "writer_image\\profile_120803409.jpg", "writerRankTotal": "262810", "writerRankWeekly": "366302", "writerThumb": "33", "writerVisitNum": "24411", "blog_read_count": "1709", "blog_time": "于 2021-10-16 21:07:15 发布", "blog_title": "C++中左值（引用）及右值（引用）详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<ul><li><strong>写C++代码编译时，有时会出现左值问题错误或右值错误，那左值和右值究竟是什么呢？？？</strong></li></ul>\n<h1><a id=\"_2\"></a>一、左值与右值</h1>\n<ul><li> <p><strong>啥是左值和右值呢？</strong></p> </li><li class=\"task-list-item\"> <p><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 左值：在内存有确定存储地址、有变量名，表达式结束依然存在的值，简单来说左值就是非临时对象。</p> </li><li class=\"task-list-item\"> <p><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 右值：就是在内存没有确定存储地址、没有变量名，表达式结束就会销毁的值，简单来说右值就是临时对象。</p> <pre><code>int a = 0;  // 在这条语句中，a 是左值，0 是临时值，就是右值。\n</code></pre> </li><li> <p>左值可以分为两类：非常量左值和常量左值；</p> <pre><code>int a=10;              \t// a 为非常量左值（有确定存储地址，也有变量名）\nconst int a1=10;      //a1 为常量左值（有确定存储地址，也有变量名）\nconst int a2=20;      //a2 为常量左值（有确定存储地址，也有变量名）\n</code></pre> </li><li> <p>同理，右值也可以分为两类：非常量右值和常量右值。</p> <pre><code> int a=10;              \t// 10 为非常量右值\nconst int a1=10;      \nconst int a2=20;      \na1+a2               \t// (a1+a2) 为常量右值\n</code></pre> </li></ul>\n<h1><a id=\"_25\"></a>二、左值引用于右值引用</h1>\n<ul><li> <p><strong>知道了左值与右值了，那啥是左值引用与右值引用呢？</strong></p> </li><li class=\"task-list-item\"> <p><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 左值引用：其实就是绑定到左值的引用，通过&amp;来获得左值引用。</p>\n<ul><li>左值引用举例：</li></ul> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">//非常量左值（有确定存储地址，也有变量名）</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a1<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//常量左值（有确定存储地址，也有变量名）</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a2<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//常量左值（有确定存储地址，也有变量名）</span>\n \n<span class=\"token comment\">//非常量左值引用</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b1<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>            <span class=\"token comment\">//正确，a是一个非常量左值，可以被非常量左值引用绑定</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b2<span class=\"token operator\">=</span>a1<span class=\"token punctuation\">;</span>           <span class=\"token comment\">//错误,a1是一个常量左值，不可以被非常量左值引用绑定</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b3<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">//错误，10是一个非常量右值，不可以被非常量左值引用绑定</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b4<span class=\"token operator\">=</span>a1<span class=\"token operator\">+</span>a2<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//错误,（a1+a2）是一个常量右值，不可以被非常量左值引用绑定</span>\n\n<span class=\"token comment\">//常量左值引用</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>c1<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//正确，a是一个非常量左值，可以被非常量右值引用绑定</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>c2<span class=\"token operator\">=</span>a1<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//正确,a1是一个常量左值，可以被非常量右值引用绑定</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>c3<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span>a1<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//正确，（a+a1）是一个非常量右值，可以被常量右值引用绑定</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>c4<span class=\"token operator\">=</span>a1<span class=\"token operator\">+</span>a2<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//正确,（a1+a2）是一个常量右值，可以被非常量右值引用绑定</span>\n\n</code></pre>\n<ul><li>总结归纳：非常量左值引用只能绑定到非常量左值上；常量左值引用可以绑定到非常量左值、常量左值、非常量右值、常量右值等所有的值类型。</li></ul> </li><li class=\"task-list-item\"> <p><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 右值引用：其实也是绑定到右值的引用，通过&amp;&amp;来获得右值引用。</p>\n<ul><li>左值引用举例：</li></ul> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//非常量左值（有确定存储地址，也有变量名）</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a1<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//常量左值（有确定存储地址，也有变量名）</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a2<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//常量左值（有确定存储地址，也有变量名）</span>\n\n<span class=\"token comment\">//非常量右值引用</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>b1<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>            <span class=\"token comment\">//错误，a是一个非常量左值，不可以被非常量右值引用绑定</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>b2<span class=\"token operator\">=</span>a1<span class=\"token punctuation\">;</span>           <span class=\"token comment\">//错误,a1是一个常量左值，不可以被非常量右值引用绑定</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>b3<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">//正确，10是一个非常量右值，可以被非常量右值引用绑定</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>b4<span class=\"token operator\">=</span>a1<span class=\"token operator\">+</span>a2<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//错误,（a1+a2）是一个常量右值，不可以被非常量右值引用绑定</span>\n\n<span class=\"token comment\">//常量右值引用</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>c1<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//错误，a是一个非常量左值，不可以被常量右值引用绑定</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>c2<span class=\"token operator\">=</span>a1<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//错误,a1是一个常量左值，不可以被常量右值引用绑定</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>c3<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span>a1<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//正确，（a+a1）是一个非常量右值，可以被常量右值引用绑定</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>c4<span class=\"token operator\">=</span>a1<span class=\"token operator\">+</span>a2<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//正确,（a1+a2）是一个常量右值，不可以被常量右值引用绑定</span>\n\n</code></pre>\n<ul><li>总结归纳：非常量右值引用只能绑定到非常量右值上；常量右值引用可以绑定到非常量右值、常量右值上。</li></ul> </li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3d9e381b93fe4df790357680b15d4635.png\"/></p>\n<p><strong>从上述可以发现，常量左值引用可以绑定到右值上，但右值引用不能绑定任何类型的左值，若想利用右值引用绑定左值该怎么办呢？</strong></p>\n<ul><li> <p>C++11中提供了一个标准库move函数获得绑定到左值上的右值引用，即直接调用std::move告诉编译器将左值像对待同类型右值一样处理，但是被调用后的左值将不能再被使用。</p>\n<ul><li><strong>std::move()函数举例</strong></li></ul> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">//非常量左值（有确定存储地址，也有变量名）</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a1<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//常量左值（有确定存储地址，也有变量名）</span>\n\n<span class=\"token comment\">//非常量右值引用</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>d1<span class=\"token operator\">=</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//正确，将非常量左值a转换为非常量右值，可以被非常量右值引用绑定</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>d2<span class=\"token operator\">=</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//错误,将常量左值a1转换为常量右值，不可以被非常量右值引用绑定</span>\n\n<span class=\"token comment\">//常量右值引用</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>c1<span class=\"token operator\">=</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//正确，将非常量左值a转换为非常量右值，可以被常量右值引用绑定</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>c2<span class=\"token operator\">=</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//正确,将常量左值a1转换为常量右值，可以被常量右值引用绑定</span>\n\n</code></pre> </li></ul>\n<p>最后可以发现，编译器利用std::move将左值强制转换为相同类型的右值之后，引用情况跟右值是一模一样的。</p>\n<h1><a id=\"_98\"></a>三、右值引用与左值引用的区别</h1>\n<ul><li> <p>1、左值引用绑定到有确定存储空间以及变量名的对象上，表达式结束后对象依然存在；</p> </li><li> <p>2、右值引用绑定到要求转换的表达式、字面常量、返回右值的表达式等临时对象上，赋值表达式结束后就对象就会被销毁。</p> </li><li> <p>3、左值引用后可以利用别名修改左值对象；右值引用绑定的值不能修改。</p> </li></ul>\n<h1><a id=\"_105\"></a>四、引入右值引用的原因</h1>\n<ul><li>1、替代需要销毁对象的拷贝，提高效率：某些情况下，需要拷贝一个对象然后将其销毁，如：临时类对象的拷贝就要先将旧内存的资源拷贝到新内存，然后释放旧内存，引入右值引用后，就可以让新对象直接使用旧内存并且销毁原对象，这样就减少了内存和运算资源的使用，从而提高了运行效率；</li><li>2、移动含有不能共享资源的类对象：像IO、unique_ptr这样的类包含不能被共享的资源（如：IO缓冲、指针），因此，这些类对象不能拷贝但可以移动。这种情况，需要先调用std::move将左值强制转换为右值，再进行右值引用。</li></ul>\n<p><strong>在这举例里用一下别的文章里的代码来说明一下引入右值引用的好处：<a href=\"https://blog.csdn.net/china_jeffery/article/details/78520237\">如下原代码的文章在该链接点击</a></strong></p>\n<pre><code>  有如下string类，实现了拷贝构造函数和赋值运算符重载。\n</code></pre>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyString</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> _data<span class=\"token punctuation\">;</span>\n\tsize_t   _len<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">_init_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t_data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>_len <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>_data<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> _len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t_data<span class=\"token punctuation\">[</span>_len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t_data <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t_len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t_len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">_init_data</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyString<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t_len <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>_len<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">_init_data</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Copy Constructor is called! source: \"</span> <span class=\"token operator\">&lt;&lt;</span> str<span class=\"token punctuation\">.</span>_data <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tMyString<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyString<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_len <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>_len<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">_init_data</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tstd<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Copy Assignment is called! source: \"</span> <span class=\"token operator\">&lt;&lt;</span> str<span class=\"token punctuation\">.</span>_data <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_data <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tstd<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor is called! \"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span> \n\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n\tMyString a<span class=\"token punctuation\">;</span> \n\ta <span class=\"token operator\">=</span> <span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>MyString<span class=\"token operator\">&gt;</span> vec<span class=\"token punctuation\">;</span> \n\tvec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"prism language-cpp\">Copy Assignment is called<span class=\"token operator\">!</span> source<span class=\"token operator\">:</span> Hello\nDestructor is called<span class=\"token operator\">!</span>\nCopy Constructor is called<span class=\"token operator\">!</span> source<span class=\"token operator\">:</span> World\nDestructor is called<span class=\"token operator\">!</span>\nDestructor is called<span class=\"token operator\">!</span>\nDestructor is called<span class=\"token operator\">!</span>\n\n</code></pre>\n<p>总共执行了2次拷贝，MyString(“Hello”)和MyString(“World”)都是临时对象，临时对象被使用完之后会被立即析构，在析构函数中free掉申请的内存资源。 如果能够直接使用临时对象已经申请的资源，并在其析构函数中取消对资源的释放，这样既能节省资源，有能节省资源申请和释放的时间。 这正是定义转移语义的目的。</p>\n<p>通过加入定义转移构造函数和转移赋值操作符重载来实现右值引用（即复用临时对象）：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span>MyString<span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n\t\tstd<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Move Constructor is called! source: \"</span> <span class=\"token operator\">&lt;&lt;</span> str<span class=\"token punctuation\">.</span>_data <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span> \n\t\t_len <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>_len<span class=\"token punctuation\">;</span> \n\t\t_data <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">;</span> \n\t\tstr<span class=\"token punctuation\">.</span>_len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n\t\tstr<span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// ! 防止在析构函数中将内存释放掉</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tMyString<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>MyString<span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n\t\tstd<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Move Assignment is called! source: \"</span> <span class=\"token operator\">&lt;&lt;</span> str<span class=\"token punctuation\">.</span>_data <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span> \n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n\t\t\t_len <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>_len<span class=\"token punctuation\">;</span> \n\t\t\t_data <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">;</span> \n\t\t\tstr<span class=\"token punctuation\">.</span>_len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n\t\t\tstr<span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ! 防止在析构函数中将内存释放掉</span>\n\t\t<span class=\"token punctuation\">}</span> \n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"prism language-cpp\">Move Assignment is called<span class=\"token operator\">!</span> source<span class=\"token operator\">:</span> Hello\nMove Constructor is called<span class=\"token operator\">!</span> source<span class=\"token operator\">:</span> World\nDestructor is called<span class=\"token operator\">!</span>\nDestructor is called<span class=\"token operator\">!</span>\n</code></pre>\n<p>需要注意的是：右值引用并不能阻止编译器在临时对象使用完之后将其释放掉的事实，所以转移构造函数和转移赋值操作符重载函数 中都将_data赋值为了NULL，而且析构函数中保证了_data != NULL才会释放。</p>\n<h2><a id=\"_214\"></a><strong>若发现该文章上有错处的地方可在下方留言告知一下，十分感谢！</strong></h2>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}