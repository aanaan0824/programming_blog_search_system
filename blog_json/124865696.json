{"blogid": "124865696", "writerAge": "码龄8年", "writerBlogNum": "78", "writerCollect": "2012", "writerComment": "56", "writerFan": "153", "writerGrade": "5级", "writerIntegral": "4477", "writerName": "饺子大人", "writerProfileAdress": "writer_image\\profile_124865696.jpg", "writerRankTotal": "4573", "writerRankWeekly": "30868", "writerThumb": "448", "writerVisitNum": "590864", "blog_read_count": "16202", "blog_time": "于 2022-05-19 16:16:30 发布", "blog_title": "50_Pandas读取 Excel 文件 (xlsx, xls)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"50_Pandas_Excel__xlsx_xls_0\"></a>50_Pandas读取 Excel 文件 (xlsx, xls)</h1>\n<p>要使用 pandas 将 Excel 文件（扩展名：.xlsx、.xls）作为 pandas.DataFrame 读取，请使用 pandas.read_excel () 函数。</p>\n<p>这里，将描述以下内容。</p>\n<ul><li>openpyxl、xlrd的安装</li><li>pandas.read_excel()的基本用法</li><li>通过编号/工作表名称指定要读取的工作表：参数 sheet_name \n  <ul><li>读取一张Sheet</li><li>读取多张Sheet</li><li>加载所有Sheet</li></ul> </li><li>指定标头、索引：参数header、index_col</li><li>指定要读取的列和不读取的行：参数 usecols、skirows、skipfooter</li></ul>\n<p>以下面的 xlsx 文件为例。</p>\n<p>sheet1</p>\n<pre><code>        A   B   C\none     11  12  13\ntwo     21  22  23\nthree   31  32  33\n</code></pre>\n<p>sheet2</p>\n<pre><code>        AA  BB  CC\nONE     11  12  13\nTWO     21  22  23\nTHREE   31  32  33\n</code></pre>\n<h1><a id=\"openpyxlxlrd_31\"></a>openpyxl、xlrd的安装</h1>\n<p>pandas.read_excel () 在内部使用名为 openpyxl 和 xlrd 的库。</p>\n<p>openpyxl 和 xlrd 是在 Python 中读取和写入 Excel 文件（.xlsx、.xls）的库。</p>\n<p>openpyxl 和 xlrd 都可以用 pip 安装。</p>\n<pre><code class=\"prism language-python\">$ pip install openpyxl\n$ pip install xlrd\n</code></pre>\n<h1><a id=\"pandasread_excel_42\"></a>pandas.read_excel()的基本用法</h1>\n<p>在第一个参数 io 中指定 Excel 文件的路径或 URL。 如果您有多个工作表，则只有第一个工作表将作为 pandas.DataFrame 加载。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">.</span>__version__<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 1.2.2</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'./data/sample.xlsx'</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#         A   B   C</span>\n<span class=\"token comment\"># one    11  12  13</span>\n<span class=\"token comment\"># two    21  22  23</span>\n<span class=\"token comment\"># three  31  32  33</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &lt;class 'pandas.core.frame.DataFrame'&gt;</span>\n</code></pre>\n<p>Index_col = 0 设置为使第一列索引。稍后将描述细节。 该示例读取 .xlsx 文件（Excel2007 之后的 Excel 文件），但同样适用于 .xls 文件（Excel97-2003 的 Excel 文件）。</p>\n<h1><a id=\"_sheet_name_63\"></a>通过编号/工作表名称指定要读取的工作表：参数 sheet_name</h1>\n<h2><a id=\"Sheet_64\"></a>读取一张Sheet</h2>\n<p>要读取的工作表可以由参数 sheet_name 指定。通过以 0 开头的数字或工作表名称指定。</p>\n<pre><code class=\"prism language-python\">df_sheet_index <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'./data/sample.xlsx'</span><span class=\"token punctuation\">,</span> sheet_name<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df_sheet_index<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#         A   B   C</span>\n<span class=\"token comment\"># one    11  12  13</span>\n<span class=\"token comment\"># two    21  22  23</span>\n<span class=\"token comment\"># three  31  32  33</span>\n\ndf_sheet_name <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'./data/sample.xlsx'</span><span class=\"token punctuation\">,</span> sheet_name<span class=\"token operator\">=</span><span class=\"token string\">'sheet2'</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df_sheet_name<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#        AA  BB  CC</span>\n<span class=\"token comment\"># ONE    11  12  13</span>\n<span class=\"token comment\"># TWO    21  22  23</span>\n<span class=\"token comment\"># THREE  31  32  33</span>\n</code></pre>\n<h2><a id=\"Sheet_82\"></a>读取多张Sheet</h2>\n<p>也可以在参数 sheet_name 中指定一个列表。您可以使用起始编号或工作表名称。 指定的数字或工作表名称被读取为键 key，该工作表的数据 pandas.DataFrame 被读取为值为 value 的字典 dict。</p>\n<pre><code class=\"prism language-python\">df_sheet_multi <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'./data/sample.xlsx'</span><span class=\"token punctuation\">,</span> sheet_name<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sheet2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>df_sheet_multi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &lt;class 'dict'&gt;</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>df_sheet_multi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 2</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df_sheet_multi<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># dict_keys([0, 'sheet2'])</span>\n</code></pre>\n<p>读取时由数字指定的工作表的键是数字，由工作表名称指定的工作表的键是工作表名称。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df_sheet_multi<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#         A   B   C</span>\n<span class=\"token comment\"># one    11  12  13</span>\n<span class=\"token comment\"># two    21  22  23</span>\n<span class=\"token comment\"># three  31  32  33</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>df_sheet_multi<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &lt;class 'pandas.core.frame.DataFrame'&gt;</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df_sheet_multi<span class=\"token punctuation\">[</span><span class=\"token string\">'sheet2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#        AA  BB  CC</span>\n<span class=\"token comment\"># ONE    11  12  13</span>\n<span class=\"token comment\"># TWO    21  22  23</span>\n<span class=\"token comment\"># THREE  31  32  33</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>df_sheet_multi<span class=\"token punctuation\">[</span><span class=\"token string\">'sheet2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &lt;class 'pandas.core.frame.DataFrame'&gt;</span>\n</code></pre>\n<h2><a id=\"Sheet_115\"></a>加载所有Sheet</h2>\n<p>如果设置了参数 sheet_name = None，则将读取所有工作表。</p>\n<pre><code class=\"prism language-python\">df_sheet_all <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'./data/sample.xlsx'</span><span class=\"token punctuation\">,</span> sheet_name<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>df_sheet_all<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &lt;class 'dict'&gt;</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df_sheet_all<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># dict_keys(['sheet1', 'sheet2'])</span>\n</code></pre>\n<h1><a id=\"headerindex_col_125\"></a>指定标头、索引：参数header、index_col</h1>\n<p>要指定用作标题（pandas.DataFrame 的列名列）和索引（pandas.DataFrame 的行名索引）的行或列，请将行号/列号以 0 开头分别传递给参数 header 和 index_col。</p>\n<p>如果 header 和 index_col 设置为 None，特定的行和列将不会用于 headers 和索引，它们将是从 0 开始的序列号。</p>\n<pre><code class=\"prism language-python\">df_header_index <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'./data/sample.xlsx'</span><span class=\"token punctuation\">,</span> header<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df_header_index<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#        0   1   2   3</span>\n<span class=\"token comment\"># 0    NaN   A   B   C</span>\n<span class=\"token comment\"># 1    one  11  12  13</span>\n<span class=\"token comment\"># 2    two  21  22  23</span>\n<span class=\"token comment\"># 3  three  31  32  33</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df_header_index<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Int64Index([0, 1, 2, 3], dtype='int64')</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df_header_index<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># RangeIndex(start=0, stop=4, step=1)</span>\n</code></pre>\n<p>默认为 header = 0（= 第一行是列），index_col = None（= 没有指定列作为索引）。</p>\n<pre><code class=\"prism language-python\">df_default <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'./data/sample.xlsx'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df_default<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#   Unnamed: 0   A   B   C</span>\n<span class=\"token comment\"># 0        one  11  12  13</span>\n<span class=\"token comment\"># 1        two  21  22  23</span>\n<span class=\"token comment\"># 2      three  31  32  33</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df_default<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Index(['Unnamed: 0', 'A', 'B', 'C'], dtype='object')</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df_default<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># RangeIndex(start=0, stop=3, step=1)</span>\n</code></pre>\n<p>如果pandas的版本比较旧，如果header中指定的行的第一个元素是NaN，即使默认也使用第一列作为索引（index_col = None）（源码未确认，所以不知道是什么类型的）处理它是。）。 如果要将第一列设置为索引，可以显式设置 index_col = 0 ，任何版本都可以放心。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'./data/sample.xlsx'</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#         A   B   C</span>\n<span class=\"token comment\"># one    11  12  13</span>\n<span class=\"token comment\"># two    21  22  23</span>\n<span class=\"token comment\"># three  31  32  33</span>\n</code></pre>\n<p>也可以在参数名称中指定任何列名称列，如在读取 csv 文件的 read_csv () 中。有关详细信息，请参阅以下文章。</p>\n<ul><li><a href=\"https://blog.csdn.net/qq_18351157/article/details/104749945\">03_Pandas读取csv/tsv文件（read_csv，read_table）</a></li></ul>\n<h1><a id=\"_usecolsskirowsskipfooter_170\"></a>指定要读取的列和不读取的行：参数 usecols、skirows、skipfooter</h1>\n<p>如果不需要读取所有行/列，您可以指定读取哪些列和不读取哪些行。</p>\n<p>在参数 usecols 中传递要读取的列号列表，在参数 skiprows 中传递要跳过（未读取）的行号列表，在参数 skipfooter 中传递要跳过（未读取）的最后行数。</p>\n<pre><code class=\"prism language-python\">df_use_skip <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'./data/sample.xlsx'</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n                            usecols<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> skiprows<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> skipfooter<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df_use_skip<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#       A   C</span>\n<span class=\"token comment\"># two  21  23</span>\n</code></pre>\n<p>当然，也可以在读取时不处理行列，全部读取后删除行列或引用任意位置的元素。</p>\n<ul><li><a href=\"https://blog.csdn.net/qq_18351157/article/details/104838924\">04_Pandas获取和修改任意位置的值（at,iat,loc,iloc）</a></li><li><a href=\"https://blog.csdn.net/qq_18351157/article/details/105785367\">12_Pandas.DataFrame删除指定行和列（drop） </a></li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}