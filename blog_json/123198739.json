{"blogid": "123198739", "writerAge": "码龄4年", "writerBlogNum": "14", "writerCollect": "65", "writerComment": "2", "writerFan": "6", "writerGrade": "2级", "writerIntegral": "228", "writerName": "InspireW", "writerProfileAdress": "writer_image\\profile_123198739.jpg", "writerRankTotal": "90710", "writerRankWeekly": "975145", "writerThumb": "9", "writerVisitNum": "12154", "blog_read_count": "1172", "blog_time": "已于 2022-03-16 08:33:55 修改", "blog_title": "Modbus 基础", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"Modbus__0\"></a>一、Modbus 基础</h1>\n<h2><a id=\"_1\"></a>（一）、串行链路上的两种不同模式</h2>\n<table><thead><tr><th>特性</th><th>RTU模式</th><th>ASCII模式</th></tr></thead><tbody><tr><td>编码</td><td>二进制</td><td>ASCII</td></tr><tr><td>每个字符位数</td><td>起始位：1 Bit</td><td>起始位：1 Bit</td></tr><tr><td></td><td>数据位：8 Bit</td><td>数据位：7 Bit</td></tr><tr><td></td><td>奇偶校验：1位</td><td>奇偶校验：1位</td></tr><tr><td></td><td>停止位：1 或 2</td><td>停止位：1 或 2</td></tr><tr><td>报文校验</td><td>CRC（循环冗余校验）</td><td>LRC（纵向冗余校验）</td></tr></tbody></table>\n<h2><a id=\"_10\"></a>（二）、串行链路上的通用报文格式</h2>\n<p>报文前后各需要大于3.5个字符的报文间隔时间，否则会被判断为一帧报文<br/> （3.5个字节的时间主要由波特率决定的，在9600的波特率下大概是4ms）</p>\n<table><thead><tr><th>地址</th><th>功能码</th><th>数据</th><th>CRC校验</th></tr></thead><tbody><tr><td>1 Byte</td><td>1 Byte</td><td>N Byte</td><td>2 Byte</td></tr></tbody></table>\n<h2><a id=\"_16\"></a>（三）、存储区</h2>\n<table><thead><tr><th>存储区标识</th><th>名称</th><th>类型</th><th>读 / 写</th><th>存储单元地址</th></tr></thead><tbody><tr><td>0XXXX</td><td>线圈</td><td>位</td><td>读 / 写</td><td>00001 ~ 0XXXX</td></tr><tr><td>1XXXX</td><td>输入线圈</td><td>位</td><td>只读</td><td>10001 ~ 1XXXX</td></tr><tr><td>3XXXX</td><td>输入寄存器</td><td>字</td><td>只读</td><td>30001 ~ 3XXXX</td></tr><tr><td>4XXXX</td><td>保持 / 输出寄存器</td><td>字</td><td>读 / 写</td><td>40001 ~ 4XXXX</td></tr></tbody></table>\n<p><strong>【注】：存储单元数量与实际设备相关</strong></p>\n<h2><a id=\"Modbus_25\"></a>（四）、Modbus大小端</h2>\n<p>众所周知，计算机底层都是二进制代码，但在实际应用中，我们却经常和浮点数、整数或者字符串打交道，在进行赋值运算或者算术运算时，必须要保证参与运算的数据类型保持一致，如果不一致，就必须进行数据转换。</p>\n<table><thead><tr><th>数据类型</th><th>c#简称</th><th>数据长度（位）</th><th>数据范围</th></tr></thead><tbody><tr><td>位</td><td>Bit</td><td>1</td><td>0-1</td></tr><tr><td>字节</td><td>Byte</td><td>8</td><td>0-255</td></tr><tr><td>有符号16位整数</td><td>Short</td><td>16</td><td>-32768-32767</td></tr><tr><td>无符号16位整数</td><td>UShort</td><td>16</td><td>0-65535</td></tr><tr><td>有符号32位整数</td><td>Int</td><td>32</td><td>-2E31-2E31</td></tr><tr><td>无符号32位整数</td><td>UInt</td><td>32</td><td>0-2E32</td></tr><tr><td>单精度浮点数</td><td>Float</td><td>32</td><td>-3.4E38-3.4E38</td></tr><tr><td>有符号64位整数</td><td>Long</td><td>64</td><td>-2E63-2E63</td></tr><tr><td>无符号64位整数</td><td>ULong</td><td>64</td><td>0-2E64</td></tr><tr><td>双精度浮点数</td><td>Double</td><td>64</td><td>-1.79E308-1.79E308</td></tr><tr><td>字符串</td><td>String</td><td>64</td><td>无</td></tr></tbody></table>\n<p>字节顺序简单来说，就是指<strong>超过一个字节的数据类型</strong>在内存中的存储顺序，如果只有1个字节就不存在顺序的说法了，一般来说，字节顺序会分两类，一种叫做大端字节顺序，一种叫做小端字节顺序。<br/> 大端字节顺序是指高位字节存储在低位地址，低位字节存储在高位地址<br/> 小端字节顺序则反之，高位字节存储在高位地址，低位字节存储在低位地址<br/> 如果一个Int类型数组，占用4个字节，4个字节顺序为ABCD，那么采用big-endian大端字节顺序，那么在内存中即为ABCD，如果采用small-endian小端字节顺序，那么在内存中存储即为DCBA，但是在实际应用中，还有可能出现BADC或者CDAB的情况，因此我们在大小端的基础上做了一下扩展，定义了4种不同字节顺序，采用枚举类型表示</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> DataFormat\n<span class=\"token punctuation\">{<!-- --></span>\n    ABCD <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 大端形式</span>\n    BADC <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 大端单字反转</span>\n    CDAB <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 小端单字反转</span>\n    DCBA <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 小端形式</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_55\"></a>二、调试</h1>\n<h2><a id=\"_56\"></a>（一）、软件介绍</h2>\n<table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Modbus Poll</td><td>一款用于仿真 Modbus Rtu 主站或 Modbus TCP 客户端的软件</td></tr><tr><td>Modbus Slave</td><td>一款用于仿真 Modbus Rtu 从站或 Modbus TCP 服务器的软件</td></tr><tr><td>VSPD</td><td>一款用于虚拟电脑串口软件（Configure Virtual Serial Port Driver）</td></tr></tbody></table>\n<h2><a id=\"Modbus_Slave___Rtu__TCP__63\"></a>（二）、Modbus Slave 软件 —— Rtu从站 / TCP 服务器</h2>\n<p>Connection &gt;&gt; Connection Setup，设置如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1ba13a9e4a6942b4ad2baa61c384d265.png\"/><br/> Setup &gt;&gt; Slave Definition，设置如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e586a03a70614b2297c72436fa6780f1.png\"/><br/> Slave ID：从站的ID<br/> Function：选择的存储区</p>\n<h2><a id=\"Modbus_Slave___Rtu___TCP__70\"></a>（三）、Modbus Slave 软件 —— Rtu 主站 \\ TCP 客户端</h2>\n<p>Connection &gt;&gt; Connection Setup，设置如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0ef05f85d2f6432cafaca5c52b2b28f3.png\"/><br/> Setup &gt;&gt; Read/Write Definition，设置如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2e7e434f7b944c8ea164f61d36b43023.png\"/><br/> Slave ID：需要注意从站的ID<br/> Function：选择的存储区</p>\n<h1><a id=\"_78\"></a>三、数据读取</h1>\n<h2><a id=\"_01H_79\"></a>（一）、读取输出线圈 （功能码：01H）</h2>\n<p>主站询问报文格式：</p>\n<table><thead><tr><th>从站地址</th><th>功能码</th><th>起始地址（高位）</th><th>起始地址（低位）</th><th>线圈数量（高位）</th><th>线圈数量（低位）</th><th>CRC</th></tr></thead><tbody><tr><td>0x11</td><td>0x01</td><td>0x00</td><td>0x13</td><td>0x00</td><td>0x1B</td><td>XXXX</td></tr></tbody></table>\n<p>含义：<br/> 读取11H（17）号从站输出线圈<br/> 起始地址 = 0013H（19），对应地址是00020；<br/> 线圈数量 = 001BH（27），结束地址是 = 00020 + 27 - 1 = 00046<br/> 即从11H（17）号从站读取00020 - 00046 共27个线圈状态。</p>\n<hr/>\n<p>从站应答报文格式：</p>\n<table><thead><tr><th>从站地址</th><th>功能码</th><th>字节计数</th><th>线圈状态20-27</th><th>线圈状态28-35</th><th>线圈状态36-43</th><th>线圈状态44-46</th><th>CRC</th></tr></thead><tbody><tr><td>0x11</td><td>0x01</td><td>0x04</td><td>0xCD</td><td>0x6B</td><td>0xB2</td><td>0x05</td><td>XXXX</td></tr></tbody></table>\n<p>含义：来自11H（17）号从站输出线圈 00020-00046,共27个线圈状态，分别为 CD 6B B2 05<br/> CD = 1100 1101 对应00020 - 00027<br/> 6B = 0110 1011 对应00028 - 00035<br/> B2 = 1011 0010 对应00036 - 00043<br/> 05 = 0000 0101 对应00044 - 00046<br/> <strong>【注】：状态从右往左进行对应低位到高位的线圈</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">/*\n* 将byte数组转化为获取二进制\n*/</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> modbusRtu<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKeepRegister</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToUInt16</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>IsSuccess<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">string</span> binaryString <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> item <span class=\"token keyword\">in</span> result<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 反转数组</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> charArray <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PadLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Array<span class=\"token punctuation\">.</span><span class=\"token function\">Reverse</span><span class=\"token punctuation\">(</span>charArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        binaryString <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">(</span>charArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    binaryString <span class=\"token operator\">=</span> binaryString<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToUInt16</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>binaryString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_02H_125\"></a>（二）、读取输入线圈 （功能码：02H）</h2>\n<p>主站询问报文格式：</p>\n<table><thead><tr><th>从站地址</th><th>功能码</th><th>起始地址（高位）</th><th>起始地址（低位）</th><th>线圈数量（高位）</th><th>线圈数量（低位）</th><th>CRC</th></tr></thead><tbody><tr><td>0x11</td><td>0x02</td><td>0x00</td><td>0xC4</td><td>0x00</td><td>0x1D</td><td>XXXX</td></tr></tbody></table>\n<p>含义：<br/> 读取11H（17）号从站输入线圈<br/> 起始地址 = 00C4H（196），对应地址是10197；<br/> 线圈数量 = 001DH（29），结束地址是 = 10197 + 29 - 1 = 10225<br/> 即从11H（17）号从站读取10197 - 10225 共29个线圈状态。</p>\n<hr/>\n<p>从站应答报文格式：</p>\n<table><thead><tr><th>从站地址</th><th>功能码</th><th>字节计数</th><th>线圈状态20-27</th><th>线圈状态28-35</th><th>线圈状态36-43</th><th>线圈状态44-46</th><th>CRC</th></tr></thead><tbody><tr><td>0x11</td><td>0x02</td><td>0x04</td><td>0xCD</td><td>0x6B</td><td>0xB2</td><td>0x05</td><td>XXXX</td></tr></tbody></table>\n<p>含义：来自11H（17）号从站输入线圈 00020-00046,共27个线圈状态，分别为 CD 6B B2 05<br/> CD = 1100 1101 对应10197 - 10204<br/> 6B = 0110 1011 对应10205 - 10212<br/> B2 = 1011 0010 对应10213 - 10220<br/> 05 = 0000 0101 对应10221 - 10225<br/> <strong>【注】：状态从右往左进行对应低位到高位的线圈</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">/*\n* 将byte数组转化为获取二进制\n*/</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> modbusRtu<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKeepRegister</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToUInt16</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>IsSuccess<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">string</span> binaryString <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> item <span class=\"token keyword\">in</span> result<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 反转数组</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> charArray <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PadLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Array<span class=\"token punctuation\">.</span><span class=\"token function\">Reverse</span><span class=\"token punctuation\">(</span>charArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        binaryString <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">(</span>charArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    binaryString <span class=\"token operator\">=</span> binaryString<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToUInt16</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textBox1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>binaryString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_03H_170\"></a>（三）、读取保持寄存器 （功能码：03H）</h2>\n<p>主站询问报文格式：</p>\n<table><thead><tr><th>从站地址</th><th>功能码</th><th>起始寄存器（高位）</th><th>起始寄存器（低位）</th><th>寄存器数量（高位）</th><th>寄存器数量（低位）</th><th>CRC</th></tr></thead><tbody><tr><td>0x11</td><td>0x03</td><td>0x00</td><td>0x6B</td><td>0x00</td><td>0x02</td><td>XXXX</td></tr></tbody></table>\n<p>含义：<br/> 读取11H（17）号从站保持寄存器<br/> 起始地址 = 006BH（107），对应地址是40107；<br/> 寄存器数量 = 0002H（2），结束地址是 = 40108 + 2 - 1 = 40109<br/> 即从11H（17）号从站读取40108 - 40109 共2个寄存器的值。</p>\n<hr/>\n<p>从站应答报文格式：</p>\n<table><thead><tr><th>从站地址</th><th>功能码</th><th>字节计数</th><th>40108高位</th><th>40108低位</th><th>40109高位</th><th>40109低位</th><th>CRC</th></tr></thead><tbody><tr><td>0x11</td><td>0x03</td><td>0x04</td><td>0x02</td><td>0x2B</td><td>0x01</td><td>0x06</td><td>XXXX</td></tr></tbody></table>\n<p>含义：<br/> 来自11H（17）号从站保持寄存器的值 40108-40109,共2个寄存器的值，分别为 CD 6B B2 05<br/> 保持寄存器 40108 的值为 CD6BH<br/> 保持寄存器 40109 的值为 B205H</p>\n<h2><a id=\"_04H_190\"></a>（四）、读取输入寄存器 （功能码：04H）</h2>\n<p>主站询问报文格式：</p>\n<table><thead><tr><th>从站地址</th><th>功能码</th><th>起始寄存器（高位）</th><th>起始寄存器（低位）</th><th>寄存器数量（高位）</th><th>寄存器数量（低位）</th><th>CRC</th></tr></thead><tbody><tr><td>0x11</td><td>0x03</td><td>0x00</td><td>0x6B</td><td>0x00</td><td>0x02</td><td>XXXX</td></tr></tbody></table>\n<p>含义：<br/> 读取11H（17）号从站输入寄存器<br/> 起始地址 = 006BH（107），对应地址是40107；<br/> 寄存器数量 = 0002H（2），结束地址是 = 40108 + 2 - 1 = 40109<br/> 即从11H（17）号从站读取40108 - 40109 共2个寄存器的值。</p>\n<hr/>\n<p>从站应答报文格式：</p>\n<table><thead><tr><th>从站地址</th><th>功能码</th><th>字节计数</th><th>40108高位</th><th>40108低位</th><th>40109高位</th><th>40109低位</th><th>CRC</th></tr></thead><tbody><tr><td>0x11</td><td>0x03</td><td>0x04</td><td>0x02</td><td>0x2B</td><td>0x01</td><td>0x06</td><td>XXXX</td></tr></tbody></table>\n<p>含义：<br/> 来自11H（17）号从站输入寄存器的值 40108-40109,共2个寄存器的值，分别为 CD 6B B2 05<br/> 输入寄存器 40108 的值为 CD6BH<br/> 输入寄存器 40109 的值为 B205H</p>\n<h2><a id=\"_05H_210\"></a>（五）、强制单个线圈 （功能码：05H）</h2>\n<p>主站询问报文格式：</p>\n<table><thead><tr><th>从站地址</th><th>功能码</th><th>线圈地址（高位）</th><th>线圈地址（低位）</th><th>断通标志</th><th>断通标志</th><th>CRC</th></tr></thead><tbody><tr><td>0x11</td><td>0x05</td><td>0x00</td><td>0xAC</td><td>0xFF</td><td>0x02</td><td>XXXX</td></tr></tbody></table>\n<p>含义：<br/> 强制 11H （17）号从站某个线圈的值<br/> 线圈地址=00ACH=172，对应地址 00173<br/> 断通标志为FF00H表示置位，断通标志为0000H表示复位<br/> 即置位 11H （17）号从站输出线圈00173</p>\n<hr/>\n<p>从站应答报文格式：</p>\n<table><thead><tr><th>从站地址</th><th>功能码</th><th>线圈地址（高位）</th><th>线圈地址（低位）</th><th>断通标志</th><th>断通标志</th><th>CRC</th></tr></thead><tbody><tr><td>0x11</td><td>0x05</td><td>0x00</td><td>0xAC</td><td>0xFF</td><td>0x02</td><td>XXXX</td></tr></tbody></table>\n<p>含义：<br/> 强制 11H （17）号从站输出线圈00173为ON后原文返回</p>\n<h2><a id=\"_0FH_229\"></a>（六）、强制多个线圈 （功能码：0FH）</h2>\n<p>主站询问报文格式：</p>\n<table><thead><tr><th>从站地址</th><th>功能码</th><th>起始（高位）</th><th>起始（低位）</th><th>线圈数（高位）</th><th>线圈数（低位）</th><th>字节计数</th><th>字节1</th><th>字节2</th><th>CRC</th></tr></thead><tbody><tr><td>0x11</td><td>0x0F</td><td>0x00</td><td>0x13</td><td>0x00</td><td>0x0A</td><td>0x02</td><td>0xCD</td><td>0x00</td><td>XXXX</td></tr></tbody></table>\n<p>含义：<br/> 预置 11H （17）号从站多个线圈的值，<br/> 线圈起始地址=0013H=19，对应地址 00020；<br/> 线圈数=0x000A=10，结束地址为00020+10-1=00029，<br/> 写入值为0xCD00，<br/> 即预置 11H （17）号从站线圈：<br/> 00020-00027=0xCD=1100 1101<br/> 00028-00029=0x00=0000 0000<br/> <strong>【注】：状态从右往左进行对应低位到高位的线圈</strong></p>\n<hr/>\n<p>从站应答报文格式：</p>\n<table><thead><tr><th>从站地址</th><th>功能码</th><th>起始（高位）</th><th>起始（低位）</th><th>线圈数（高位）</th><th>线圈数（低位）</th><th>CRC</th></tr></thead><tbody><tr><td>0x11</td><td>0x0F</td><td>0x00</td><td>0x13</td><td>0x00</td><td>0x0A</td><td>XXXX</td></tr></tbody></table>\n<p>含义：<br/> 预置 11H （17）号从站线圈：<br/> 00020-00027=0xCD=1100 1101<br/> 00028-00029=0x00=0000 0000</p>\n<h2><a id=\"_06H_253\"></a>（七）、预置单个寄存器 （功能码：06H）</h2>\n<p>主站询问报文格式：</p>\n<table><thead><tr><th>从站地址</th><th>功能码</th><th>寄存器地址（高位）</th><th>寄存器地址（低位）</th><th>写入值（高位）</th><th>写入值（低位）</th><th>CRC</th></tr></thead><tbody><tr><td>0x11</td><td>0x05</td><td>0x00</td><td>0x87</td><td>0x03</td><td>0x9E</td><td>XXXX</td></tr></tbody></table>\n<p>含义：<br/> 预置 11H （17）号从站某个寄存器的值<br/> 寄存器地址=0087H=135，对应地址 40136<br/> 写入值为0x039E，<br/> 即预置 11H （17）号从站保存寄存器40136值为0x039E。</p>\n<hr/>\n<p>从站应答报文格式：</p>\n<table><thead><tr><th>从站地址</th><th>功能码</th><th>寄存器地址（高位）</th><th>寄存器地址（低位）</th><th>写入值（高位）</th><th>写入值（低位）</th><th>CRC</th></tr></thead><tbody><tr><td>0x11</td><td>0x05</td><td>0x00</td><td>0x87</td><td>0x03</td><td>0x9E</td><td>XXXX</td></tr></tbody></table>\n<p>含义：<br/> 预置 11H （17）号从站保存寄存器40136值为0x039E后原文返回</p>\n<h2><a id=\"_10H_272\"></a>（八）、预置多个寄存器 （功能码：10H）</h2>\n<p>主站询问报文格式：</p>\n<table><thead><tr><th>从站地址</th><th>功能码</th><th>起始（高位）</th><th>起始（低位）</th><th>数量（高位）</th><th>数量（低位）</th><th>字节计数</th><th>字节1</th><th>字节2</th><th>字节3</th><th>字节4</th><th>CRC</th></tr></thead><tbody><tr><td>0x11</td><td>0x10</td><td>0x00</td><td>0x87</td><td>0x00</td><td>0x02</td><td>0x04</td><td>0x01</td><td>0x05</td><td>0x0A</td><td>0x10</td><td>XXXX</td></tr></tbody></table>\n<p>含义：<br/> 预置 11H （17）号从站多个寄存器的值，<br/> 寄存器起始地址=0087H=135，对应地址 40136；<br/> 寄存器数=0x0002=2，结束地址为40136+2-1=40137，<br/> 写入值为0x0105,0x0A10，<br/> 即预置 11H （17）号从站寄存器：<br/> 40136=0x0105<br/> 40137=0x0A10</p>\n<hr/>\n<p>从站应答报文格式：</p>\n<table><thead><tr><th>从站地址</th><th>功能码</th><th>起始（高位）</th><th>起始（低位）</th><th>数量（高位）</th><th>数量（低位）</th><th>CRC</th></tr></thead><tbody><tr><td>0x11</td><td>0x10</td><td>0x00</td><td>0x87</td><td>0x00</td><td>0x02</td><td>XXXX</td></tr></tbody></table>\n<p>含义：<br/> 预置 11H （17）号从站寄存器：40136=0x0105 40137=0x0A10</p>\n<h1><a id=\"_294\"></a>写在最后</h1>\n<p>本博文只是我在学习c#的过程中所做的笔记，方便以后查阅实现过程。资料均来自网上，如果有侵权请联系我删除，谢谢。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}