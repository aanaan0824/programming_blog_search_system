{"blogid": "124815289", "writerAge": "码龄6年", "writerBlogNum": "621", "writerCollect": "16511", "writerComment": "862", "writerFan": "86716", "writerGrade": "8级", "writerIntegral": "42777", "writerName": "bitcarmanlee", "writerProfileAdress": "writer_image\\profile_124815289.jpg", "writerRankTotal": "99", "writerRankWeekly": "380", "writerThumb": "5382", "writerVisitNum": "8397964", "blog_read_count": "4170", "blog_time": "于 2022-05-17 16:27:43 发布", "blog_title": "c++ map unordered_map使用大全", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"1_0\"></a>1.插入元素</h2>\n<p>map中插入元素的方法有如下集中</p>\n<h3><a id=\"11__3\"></a>1.1 直接用[]符</h3>\n<pre><code class=\"prism language-cpp\">map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span> mymap<span class=\"token punctuation\">;</span>\nmymap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>map的源码中重载了[]操作符，</p>\n<pre><code class=\"prism language-cpp\">map<span class=\"token operator\">&lt;</span>_Key<span class=\"token punctuation\">,</span> _Tp<span class=\"token punctuation\">,</span> _Compare<span class=\"token punctuation\">,</span> _Allocator<span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>key_type<span class=\"token operator\">&amp;&amp;</span> __k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> __tree_<span class=\"token punctuation\">.</span><span class=\"token function\">__emplace_unique_key_args</span><span class=\"token punctuation\">(</span>__k<span class=\"token punctuation\">,</span>\n        _VSTD<span class=\"token double-colon punctuation\">::</span>piecewise_construct<span class=\"token punctuation\">,</span>\n        _VSTD<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">forward_as_tuple</span><span class=\"token punctuation\">(</span>_VSTD<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>__k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        _VSTD<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">forward_as_tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token operator\">-&gt;</span><span class=\"token function\">__get_value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>而且从上面代码不难看出，[]操作，先是move掉了map中原有的数据，再将新数据放进去，所以用[]操作的话，可以改变map中已有的key对应的value。</p>\n<h3><a id=\"12_make_pair_24\"></a>1.2 make_pair</h3>\n<p>make_pair是比较方便的方法，该方法可以根据传入的两个参数，直接构造成一个pari对象，insert到map中。</p>\n<pre><code class=\"prism language-cpp\">mymap<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"13_pair_31\"></a>1.3 pair</h3>\n<p>可以使用pari方法插入kv对。</p>\n<pre><code class=\"prism language-cpp\">mymap<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">pair</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"14_value_type_38\"></a>1.4 value_type</h3>\n<p>为了避免隐式转换，可以使用value_type来传递类型，value_type是容器中本身提供的型别定义。</p>\n<pre><code class=\"prism language-cpp\">mymap<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">map</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">value_type</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>需要注意的一点是，所有insert方式，如果插入的key值在map中原来存在，都不能改变其原来对应的值。</p>\n<h2><a id=\"2_47\"></a>2.判断元素是否存在</h2>\n<h3><a id=\"21_find_48\"></a>2.1 find方法</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">bool</span> one_in_map <span class=\"token operator\">=</span> mymap<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> mymap<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token boolean\">true</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如果key在map中，find方法会返回key对应的迭代器。如果key不存在，find会返回end。</p>\n<h3><a id=\"22_count_55\"></a>2.2 count方法</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">bool</span> five_in_map <span class=\"token operator\">=</span> mymap<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token operator\">?</span> <span class=\"token boolean\">true</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>count方法可以统计key在map中出现的次数。对于map来书，key不能重复，因此count方法返回值为1或者0。</p>\n<h2><a id=\"3key_62\"></a>3.获取key对应的值</h2>\n<h3><a id=\"31_find_63\"></a>3.1 find方法</h3>\n<p>前面我们已经提到了find方法可以找到key对应的迭代器</p>\n<pre><code class=\"prism language-cpp\">string one_value <span class=\"token operator\">=</span> mymap<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"32_at_70\"></a>3.2 at方法</h3>\n<p>at方法可以直接返回key对应的值</p>\n<pre><code class=\"prism language-cpp\">string two_value <span class=\"token operator\">=</span> mymap<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"33__76\"></a>3.3 []操作符</h3>\n<p>[]也可以直接获取key对应的值。不过需要注意的是，如果key不在map中，[]这种方式会将key插入map中，而前面的find方法，at方法， 都会报异常。</p>\n<pre><code class=\"prism language-cpp\">string six_value <span class=\"token operator\">=</span> mymap<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"4_83\"></a>4.删除元素</h2>\n<p>erase方法可以删除map中的元素。</p>\n<pre><code class=\"prism language-cpp\">mymap<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>注意删除元素的时候，当删除迭代器所指向的对象时，迭代器可能会失效。</p>\n<pre><code class=\"prism language-cpp\">    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">=</span>mymap<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter<span class=\"token operator\">!=</span>mymap<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        mymap<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上述代码在运行的时候就会报错，在我自己机器上测试的时候会有如下错误</p>\n<pre><code class=\"prism language-cpp\">libc<span class=\"token operator\">++</span>abi<span class=\"token punctuation\">.</span>dylib<span class=\"token operator\">:</span> terminating with uncaught exception of type std<span class=\"token double-colon punctuation\">::</span>bad_alloc<span class=\"token operator\">:</span> std<span class=\"token double-colon punctuation\">::</span>bad_alloc\n</code></pre>\n<p>对iter直线的元素进行erase时，会使得iter不再成为一个有效的迭代器，如果此后未对iter重新设值就使用iter，会出现异常。iter++就能导致一个未定义行为。<br/> 如果我们要在迭代器中删除元素，可以按照如下方式：</p>\n<pre><code class=\"prism language-cpp\">    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">=</span>mymap<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter<span class=\"token operator\">!=</span>mymap<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iter<span class=\"token operator\">-&gt;</span>second<span class=\"token operator\">==</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            mymap<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            iter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"5map_118\"></a>5.遍历map</h2>\n<p>遍历容器是最常见的需求，一般可以通过下面两种方式来遍历。</p>\n<h3><a id=\"51__121\"></a>5.1 通过迭代器</h3>\n<pre><code class=\"prism language-cpp\">    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator iter<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">=</span>mymap<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter<span class=\"token operator\">!=</span>mymap<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>iter<span class=\"token operator\">-&gt;</span>first<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\": \"</span><span class=\"token operator\">&lt;&lt;</span>iter<span class=\"token operator\">-&gt;</span>second<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"52_auto_131\"></a>5.2 auto关键字</h3>\n<p>上面的iter类型比较复杂，我们可以偷懒使用auto关键字，让编译器自动推断类型。</p>\n<pre><code class=\"prism language-cpp\">    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> node<span class=\"token operator\">:</span> mymap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>node<span class=\"token punctuation\">.</span>first<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\": \"</span><span class=\"token operator\">&lt;&lt;</span>node<span class=\"token punctuation\">.</span>second<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"6unordered_map_141\"></a>6.unordered_map用法</h2>\n<p>unordered_map与map的用法基本一直，最大的区别在于：<br/> map的key是有序的，而unordered_map的key为无序。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span> commap<span class=\"token punctuation\">;</span>\n    unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span> umap<span class=\"token punctuation\">;</span>\n    commap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span> commap<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">;</span> commap<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span> commap<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">;</span>\n    umap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">;</span> umap<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">;</span> umap<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"dd\"</span><span class=\"token punctuation\">;</span> umap<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> node<span class=\"token operator\">:</span> commap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>node<span class=\"token punctuation\">.</span>first<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\": \"</span><span class=\"token operator\">&lt;&lt;</span>node<span class=\"token punctuation\">.</span>second<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> node<span class=\"token operator\">:</span> umap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>node<span class=\"token punctuation\">.</span>first<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\": \"</span><span class=\"token operator\">&lt;&lt;</span>node<span class=\"token punctuation\">.</span>second<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>以上代码输出：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">2</span><span class=\"token operator\">:</span> b\n<span class=\"token number\">3</span><span class=\"token operator\">:</span> c\n<span class=\"token number\">4</span><span class=\"token operator\">:</span> d\n<span class=\"token number\">2</span><span class=\"token operator\">:</span> bb\n<span class=\"token number\">4</span><span class=\"token operator\">:</span> dd\n<span class=\"token number\">3</span><span class=\"token operator\">:</span> cc\n<span class=\"token number\">1</span><span class=\"token operator\">:</span> aa\n</code></pre>\n<p>对比map与unordered_map，两者的区别如下：<br/> 实现方式：unordered_map为哈希表，map为红黑树。<br/> 查找操作：unordered_map 平均为O(1)，最差为O(n), map为log(n)。<br/> 插入，删除操作：unordered_map与查找一样，map为log(n)+平衡二叉树所用的时间。<br/> 适用场景：unordered_map适用查找频率高，而map适合要求key有序的场景。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span> commap<span class=\"token punctuation\">;</span>\n    unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span> umap<span class=\"token punctuation\">;</span>\n    commap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span> commap<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">;</span> commap<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span> commap<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">;</span>\n    umap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">;</span> umap<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">;</span> umap<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"dd\"</span><span class=\"token punctuation\">;</span> umap<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> node<span class=\"token operator\">:</span> commap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>node<span class=\"token punctuation\">.</span>first<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\": \"</span><span class=\"token operator\">&lt;&lt;</span>node<span class=\"token punctuation\">.</span>second<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> node<span class=\"token operator\">:</span> umap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>node<span class=\"token punctuation\">.</span>first<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\": \"</span><span class=\"token operator\">&lt;&lt;</span>node<span class=\"token punctuation\">.</span>second<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果为</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">1</span><span class=\"token operator\">:</span> a\n<span class=\"token number\">2</span><span class=\"token operator\">:</span> b\n<span class=\"token number\">3</span><span class=\"token operator\">:</span> c\n<span class=\"token number\">4</span><span class=\"token operator\">:</span> d\n<span class=\"token number\">2</span><span class=\"token operator\">:</span> bb\n<span class=\"token number\">4</span><span class=\"token operator\">:</span> dd\n<span class=\"token number\">3</span><span class=\"token operator\">:</span> cc\n<span class=\"token number\">1</span><span class=\"token operator\">:</span> aa\n</code></pre>\n<h2><a id=\"7mapkey_206\"></a>7.map自定义key排序规则</h2>\n<p>map的key，默认是按照升序排列的，可以参考一下其中源码</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Key</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">_Tp</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">_Compare</span> <span class=\"token operator\">=</span> less<span class=\"token operator\">&lt;</span>_Key<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">class</span> <span class=\"token class-name\">_Allocator</span> <span class=\"token operator\">=</span> allocator<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> _Key<span class=\"token punctuation\">,</span> _Tp<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_LIBCPP_TEMPLATE_VIS</span> map\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<p>其中less的签名为</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_LIBCPP_TEMPLATE_VIS</span> less <span class=\"token operator\">:</span> binary_function<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span> _Tp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">return</span> __x <span class=\"token operator\">&lt;</span> __y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>根据上述代码不难看出，less是一个结构体，重载了()操作符，是一个函数对象，默认升序排列。</p>\n<p>如果我们想让map按key降序排列，可以这样</p>\n<pre><code class=\"prism language-cpp\">map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;&gt;</span> map1<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>其中greater与less就是对应的，表示降序。</p>\n<p>如果想自定义排序规则，也是可以的。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">f3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;&gt;</span> map1<span class=\"token punctuation\">;</span>\n    map1<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> map1<span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> map1<span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> map1<span class=\"token punctuation\">[</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> node<span class=\"token operator\">:</span> map1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>node<span class=\"token punctuation\">.</span>first<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\": \"</span><span class=\"token operator\">&lt;&lt;</span>node<span class=\"token punctuation\">.</span>second<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> myCompare<span class=\"token operator\">&gt;</span> map2<span class=\"token punctuation\">;</span>\n    map2<span class=\"token punctuation\">[</span><span class=\"token string\">\"bbbb\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> map2<span class=\"token punctuation\">[</span><span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> map2<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> map2<span class=\"token punctuation\">[</span><span class=\"token string\">\"dd\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> node<span class=\"token operator\">:</span> map2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>node<span class=\"token punctuation\">.</span>first<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\": \"</span><span class=\"token operator\">&lt;&lt;</span>node<span class=\"token punctuation\">.</span>second<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">f3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\">d<span class=\"token operator\">:</span> <span class=\"token number\">4</span>\nc<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\nb<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\na<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n\nbbbb<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\nccc<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\ndd<span class=\"token operator\">:</span> <span class=\"token number\">4</span>\na<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n</code></pre>\n<p>我们重写了一个类似less结构体，重载()操作符，就可以实现自己的排序规则。</p>\n<h2><a id=\"8mapvalue_275\"></a>8.map按value排序</h2>\n<p>如果我们想要对map按照value排序，可以利用stl库中的sort方法。我们可以将map中的元素先拷贝到vector中，再对vector进行排序。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">mycompare_func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>second<span class=\"token operator\">==</span>b<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>first<span class=\"token operator\">&gt;</span>b<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>second<span class=\"token operator\">&gt;</span>b<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">f4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mymap<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>mymap<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mymap<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mycompare_func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> node<span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>node<span class=\"token punctuation\">.</span>first<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\": \"</span><span class=\"token operator\">&lt;&lt;</span>node<span class=\"token punctuation\">.</span>second<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">f4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最后代码输出结果为</p>\n<pre><code class=\"prism language-cpp\">a<span class=\"token operator\">:</span> <span class=\"token number\">4</span>\nc<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\nd<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\nb<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}