{"blogid": "126458726", "writerAge": "码龄14年", "writerBlogNum": "360", "writerCollect": "4282", "writerComment": "3423", "writerFan": "42377", "writerGrade": "7级", "writerIntegral": "13076", "writerName": "字母哥哥", "writerProfileAdress": "writer_image\\profile_126458726.jpg", "writerRankTotal": "781", "writerRankWeekly": "112", "writerThumb": "3538", "writerVisitNum": "521106", "blog_read_count": "1022", "blog_time": "于 2022-08-22 08:18:39 发布", "blog_title": "延时任务(三)-基于redis zset的完整实现", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>所谓的延时任务给大家举个例子：你买了一张火车票，必须在30分钟之内付款，否则该订单被自动取消。<strong>「订单30分钟不付款自动取消，这个任务就是一个延时任务。」</strong> 我之前已经写过2篇关于延时任务的文章：</p>\n<ul><li> <p><a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU0NDU5MTk1MQ==&amp;action=getalbum&amp;album_id=2540840147119046657#wechat_redirect\">《完整实现-通过DelayQueue实现延时任务》</a></p> </li><li> <p><a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU0NDU5MTk1MQ==&amp;action=getalbum&amp;album_id=2540840147119046657#wechat_redirect\">《延时任务(二)-基于netty时间轮算法实战》</a></p> </li></ul>\n<p>这两种方法都有一个缺点：都是基于单体应用的内存的方式运行延时任务的，一旦出现单点故障，可能出现延时任务数据的丢失。所以此篇文章给大家介绍实现延时任务的第三种方式，结合redis zset实现延时任务，可以解决单点故障的问题。给出实现原理、完整实现代码，以及这种实现方式的优缺点。</p>\n<h2><a id=\"_11\"></a>一、实现原理</h2>\n<p>首先来介绍一下实现原理，我们需要使用redis zset来实现延时任务的需求，所以我们需要知道zset的应用特性。zset作为redis的有序集合数据结构存在，排序的依据就是score。</p>\n<p><img alt=\"\" src=\"image\\ec66ced8a132381fd2ee562a2efe9d6c.png\"/>所以我们可以利用zset score这个排序的这个特性，来实现延时任务</p>\n<ul><li> <p>在用户下单的时候，同时生成延时任务放入redis，key是可以自定义的，比如：<code>delaytask:order</code></p> </li><li> <p>value的值分成两个部分，一个部分是score用于排序，一个部分是member，member的值我们设置为订单对象（如：订单编号），因为后续延时任务时效达成的时候，我们需要有一些必要的订单信息（如：订单编号），才能完成订单自动取消关闭的动作。</p> </li><li> <p><strong>「延时任务实现的重点来了，score我们设置为：订单生成时间 + 延时时长」</strong>。这样redis会对zset按照score延时时间进行排序。</p> </li><li> <p>开启redis扫描任务，获取\"当前时间 &gt; score\"的延时任务并执行。即：当前时间 &gt; 订单生成时间 + 延时时长的时候 ，执行延时任务。</p> </li></ul>\n<h2><a id=\"_27\"></a>二、准备工作</h2>\n<p>使用 redis zset 这个方案来完成延时任务的需求，首先肯定是需要redis，这一点毫无疑问。redis的搭建网上有很多的文章，我这里就不赘述了。</p>\n<p>其次，笔者长期的java类应用系统开发都是使用SpringBoot来完成，所以也是习惯使用SpringBoot的redis集成方案。首先通过maven坐标引入spring-boot-starter-data-redis</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.commons<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>commons-pool2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\n</code></pre>\n<p>其次需要在Spring Boot的<code>application.yml</code>配置文件中，配置redis数据库的链接信息。我这里配置的是redis的单例，如果大家的生产环境是哨兵模式、或者是集群模式的redis，这里的配置方式需要进行微调。其实这部分内容在我的个人博客里面都曾经系统的介绍过，感兴趣的朋友可以关注我的个人博客。</p>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">database</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token comment\"># Redis 数据库索引（默认为 0）</span>\n    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 192.168.161.3 <span class=\"token comment\"># Redis 服务器地址</span>\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span> <span class=\"token comment\"># Redis 服务器连接端口</span>\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span> <span class=\"token comment\"># Redis 服务器连接密码（默认为空）</span>\n    <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span>  <span class=\"token number\">5000</span>  <span class=\"token comment\"># 连接超时，单位ms</span>\n    <span class=\"token key atrule\">lettuce</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">pool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">max-active</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span> <span class=\"token comment\"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span>\n        <span class=\"token key atrule\">max-wait</span><span class=\"token punctuation\">:</span> <span class=\"token number\">-1</span> <span class=\"token comment\"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span>\n        <span class=\"token key atrule\">max-idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span> <span class=\"token comment\"># 连接池中的最大空闲连接 默认 8</span>\n        <span class=\"token key atrule\">min-idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token comment\"># 连接池中的最小空闲连接 默认 0</span>\n\n</code></pre>\n<h2><a id=\"_65\"></a>三、代码实现</h2>\n<p>下面的这个类就是延时任务的核心实现了，一共包含三个核心方法，我们来一一说明一下：</p>\n<ul><li> <p>produce方法，用于生成订单-order为订单信息，可以是订单流水号，用于延时任务达到时效后关闭订单</p> </li><li> <p>afterPropertiesSet方法是InitializingBean接口的方法，之所以实现这个接口，是因为我们需要在应用启动的时候开启redis扫描任务。即：当OrderDelayService bean初始化的时候，开启redis扫描任务循环获取延时任务数据。</p> </li><li> <p>consuming函数，用于从redis获取延时任务数据，消费延时任务，执行超时订单关闭等操作。为了避免阻塞for循环，影响后面延时任务的执行，所以这个consuming函数一定要做成异步的，参考Spring Boot异步任务及<code>Async</code>注解的使用方法。我之前写过一个SpringBoot的**「可观测、易配置」**的异步任务线程池开源项目，源代码地址：https://gitee.com/hanxt/zimug-monitor-threadpool 。我的这个zimug-monitor-threadpool开源项目，可以做到对线程池使用情况的监控，我自己平时用的效果还不错，向大家推荐一下！</p> </li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderDelayService</span>  <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InitializingBean</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">//redis zset key</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> ORDER_DELAY_TASK_KEY <span class=\"token operator\">=</span> <span class=\"token string\">\"delaytask:order\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Resource</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//生成订单-order为订单信息，可以是订单流水号，用于延时任务达到时效后关闭订单</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> orderSerialNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForZSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n            ORDER_DELAY_TASK_KEY<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// redis key</span>\n            orderSerialNo<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// zset  member</span>\n            <span class=\"token comment\">//30分钟延时</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//zset score</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//延时任务，也是异步任务，延时任务达到时效之后关闭订单，并将延时任务从redis zset删除</span>\n  <span class=\"token annotation punctuation\">@Async</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consuming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n       \n      <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ZSetOperations<span class=\"token punctuation\">.</span>TypedTuple</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> orderSerialNos <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForZSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rangeByScoreWithScores</span><span class=\"token punctuation\">(</span>\n              ORDER_DELAY_TASK_KEY<span class=\"token punctuation\">,</span>\n              <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//延时任务score最小值</span>\n              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//延时任务score最大值（当前时间）</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>orderSerialNos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ZSetOperations<span class=\"token punctuation\">.</span>TypedTuple</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> orderSerialNo <span class=\"token operator\">:</span> orderSerialNos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token comment\">//这里根据orderSerialNo去检查用户是否完成了订单支付</span>\n          <span class=\"token comment\">//如果用户没有支付订单，去执行订单关闭的操作</span>\n          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"订单\"</span> <span class=\"token operator\">+</span> orderSerialNo<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"超时被自动关闭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">//订单关闭之后，将订单延时任务从队列中删除</span>\n          stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForZSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>ORDER_DELAY_TASK_KEY<span class=\"token punctuation\">,</span> orderSerialNo<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//该类对象Bean实例化之后，就开启while扫描任务</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//开启新的线程，否则SpringBoot应用初始化无法启动</span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//每5秒扫描一次redis库获取延时数据，不用太频繁没必要</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n          e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//本文只是示例，生产环境请做好相关的异常处理</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">consuming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>更多的内容参考代码中的注释，需要关注的点是：</p>\n<ul><li> <p>上文中的rangeByScoreWithScores方法用于从redis中获取延时任务，score大于0小于当前时间的所有延时任务，都将被从redis里面取出来。每5秒执行一次，所以延时任务的误差不会超过5秒。</p> </li><li> <p>上文中的订单信息，我只保留了订单唯一流水号，用于关闭订单。如果你的业务需要传递更多的订单信息，请使用RedisTemplate操作订单类对象，而不是StringRedisTemplate操作订单流水号字符串。</p> </li></ul>\n<p>订单下单的时候，使用如下的方法，将订单序列号放入redis zset中即可实现延时任务</p>\n<pre><code class=\"prism language-java\">orderDelayService<span class=\"token punctuation\">.</span><span class=\"token function\">produce</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这里填写订单编号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h2><a id=\"_148\"></a>四、优缺点</h2>\n<p>使用redis zset来实现延时任务的优点是：相对于本文开头介绍的两种方法，我们的延时任务是保存在redis里面的，redis具有数据持久化的机制，可以有效的避免延时任务数据的丢失。另外，redis还可以通过哨兵模式、集群模式有效的避免单点故障造成的服务中断。至于缺点嘛，我觉得没什么缺点。如果非要勉强的说一个缺点的话，那就是我们需要额外维护redis服务，增加了硬件资源的需求和运维成本。但是现在随着微服务的兴起，redis几乎已经成了应用系统的标配，redis复用即可，所以我感觉这也算不上什么缺点吧！</p>\n<p><strong>「码文不易，如果您觉得有帮助，请帮忙点击在看或者分享，没有您的支持我可能无法坚持下去！」</strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}