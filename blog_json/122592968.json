{"blogid": "122592968", "writerAge": "码龄9年", "writerBlogNum": "1073", "writerCollect": "813", "writerComment": "212", "writerFan": "8799", "writerGrade": "7级", "writerIntegral": "10921", "writerName": "Rust语言中文社区", "writerProfileAdress": "writer_image\\profile_122592968.jpg", "writerRankTotal": "1209", "writerRankWeekly": "3826", "writerThumb": "431", "writerVisitNum": "619141", "blog_read_count": "2956", "blog_time": "于 2022-01-19 23:34:27 发布", "blog_title": "【Rust日报】2022-01-18 Paudle: 使用Yew编写的类似Wordle的猜字谜游戏", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<div id=\"js_content\">\n<h2><strong>Paudle: 使用<code>Yew</code>编写的类似<code>Wordle</code>的猜字谜游戏</strong></h2>\n<p>Paudle: A Wordle-like in Rust using Yew</p>\n<p><code>Paudle</code>是对<code>Josh Wardle</code>的优秀文字游戏<code>Wordle</code>的重新实现。这个版本是用<code>Yew</code>和<code>Rust</code>制作的。作者仿照了<code>Wordle</code>的颜色和布局（当然还有游戏逻辑），但实现都是原创的。与最初的版本不同，这一版本完全是基于客户端的，因此没有什么可以阻止你作弊——如果你能找出如何从运行的WASM中提取当前单词的话。</p>\n<p>运行步骤：</p>\n<pre class=\"has\"><code class=\"language-go\"># 安装wasm target\nrustup target add wasm32-unknown-unknown\n# 安装trunk\ncargo install trunk\n# 拉取paudle代码仓库\ngit clone https://github.com/pmsanford/paudle &amp;&amp; cd paudle\n# 运行\ntrunk serve\n# 然后在浏览器打开 http://localhost:8080/ 即可</code></pre>\n<p><img alt=\"0382ee80c6fd136d738ff522cacc4c26.png\" src=\"image\\0382ee80c6fd136d738ff522cacc4c26.png\"/></p>\n<p><strong>关于<code>Wordle</code></strong>：</p>\n<blockquote>\n<p>Wordle 和填字游戏都属于字谜游戏的一种。</p>\n</blockquote>\n<blockquote>\n<p>这个游戏每天更新一期，玩家唯一目标，就是在六次尝试机会之内，猜出一个五个字母的单词。为此，游戏界面是一个 5×6 的方块阵列。玩家通过下方键盘输入猜测结果后，游戏会给字母方块标上颜色，提示猜测的准确性：</p>\n</blockquote>\n<blockquote>\n<p>绿色 🟩：说明答案里有这个字母、所在位置也正确；</p>\n</blockquote>\n<blockquote>\n<p>黄色 🟨：说明答案里有这个字母、但不在这个位置；</p>\n</blockquote>\n<blockquote>\n<p>灰色 ⬜️：说明答案里没有这个字母。</p>\n</blockquote>\n<blockquote>\n<p>然后，玩家根据获得的提示继续尝试，直到猜对答案，或者用尽六次机会。</p>\n</blockquote>\n<p>参考：</p>\n<ul><li><p>wordle: https://www.powerlanguage.co.uk/wordle/</p></li></ul>\n<h2><strong>Rust For Linux内核补丁使用升级的Rust工具链进行修订，构建改进</strong></h2>\n<p>Rust For Linux Kernel Patches Revised With Upgraded Rust Toolchain, Build Improvements</p>\n<blockquote>\n<p><code>Miguel Ojeda</code>已经发布了他的第三次补丁迭代，这些补丁实现了支持Linux内核中Rust编程语言的基本基础设施。早在12月份就有了v2补丁，而现在刚刚过了一个月，3版补丁就可以进行测试了。</p>\n</blockquote>\n<p>随着Rust编译器版本已经确定，更新后的<code>Rust for Linux</code>内核代码现在迁移到了Rust 1.58版本。此次补丁新增特性包括自动检测是否有合适的Rust工具链可用、其他构建系统改进、改进的文档以及其他通用代码清理和改进。</p>\n<p><code>Miguel</code>指出，在Rust方面也有一些改进，“我们需要的一个不稳定的特性，<code>-Zsymbol-mangling-version=v0</code>将在Rust 1.59.0中得到稳定。另一个特性，<code>maybe_uninit_extra</code> 可能会在Rust 1.60.0中得到改进。”</p>\n<p>Linux内核的Rust基础设施以及一些基本的示例代码目前使这个v3修补程序系列有33.5k行新代码。</p>\n<p>请参阅内核邮件列表上的v3补丁以供查看。</p>\n<p>希望今年Rust能够进入Linux内核的主线！</p>\n<h2><strong>将Ruby 的 JIT 编译器<code>YJIT</code>迁移到Rust</strong></h2>\n<p>Porting ruby YJIT to Rust</p>\n<p><code>YJIT</code> 是用于 Ruby 的 <code>JIT</code> 编译器，它采用了惰性基础块版本管理 (lazy Basic Block Versioning, <code>LBBV</code>) 架构。与当前的 <code>CRuby</code> 解释器相比，在进行实际基准测试时，YJIT 的平均速度大约提升了 23%。</p>\n<p>现在YJIT团队希望探索使用Rust来帮助开发YJIT。而CRuby的其余部分将继续使用非Rust的工具链进行构建，而且构建Ruby应用时仍然支持<code>YJIT</code>开关。</p>\n<p>价值主张：</p>\n<ul><li><p><code>Rust</code>的类型系统将尽早捕获更多的bug，有助于防止新的bug；</p></li><li><p>更易于管理日益复杂的<code>YJIT</code>；</p></li><li><p>更容易维护代码库；</p></li><li><p>对于新手来说更容易，因为编译器捕获了更多的bug；</p></li><li><p>更好的性能，因为我们可以实现更复杂的优化；</p></li><li><p>更容易添加对新平台的支持（这增加了复杂性）；</p></li><li><p>Rust拥有成熟且易于安装的工具，如源代码格式化程序和编辑器插件；</p></li><li><p>Rust作为一个编程语言社区，其背后有着巨大的热情。这可以转化为对YJIT和<code>Ruby</code>的更大热情。</p></li></ul>\n<p>集成：</p>\n<ul><li><p>YJIT将只依赖于Rust语言和标准库，而不依赖于其他依赖项；</p></li><li><p>YJIT将能够在没有互联网连接的情况下进行构建；</p></li><li><p>Rust对交叉编译有很好的支持；</p></li><li><p>Rust在我们计划使用YJIT支持的所有平台（Mac、Linux、Windows）上都受支持；</p></li><li><p>已编译的<code>CRuby</code>二进制文件不会对共享库有任何新的依赖项；</p></li><li><p>在禁用YJIT的情况下，CRuby仍然可以在没有rustc的情况下进行构建</p></li></ul>\n<p>完整的意见说明参阅：Porting YJIT to Rust (request for feedback)</p>\n<h2><strong>lipstack: 面向C语言的类Rust语法前端</strong></h2>\n<p>lipstick: a Rust-like syntax frontend for C</p>\n<p><code>lipstack</code>将Rust的语法汇编成C。尽管它没有借用检查器或生命周期管理，但它并不是一个“Rust语法子集”。它只是C语言的一个Rust的语法前端。</p>\n<p>可以在Playground来实战体验它是怎样运作的。</p>\n<p>参考：</p>\n<ul><li><p>Github：https://github.com/jrvidal/lipstick</p></li><li><p>Playground: https://jrvidal.github.io/lipstick/</p></li></ul>\n<h2><strong>一个新的Relm 4：宣布Relm4 v0.4!</strong></h2>\n<p>A new Relm 4 you: announcing Relm4 v0.4!</p>\n<hr/>\n<p>From 日报小组 odd-cat</p>\n<p>社区学习交流平台订阅：</p>\n<p>Rust.cc 论坛: 支持 rss</p>\n<p>微信公众号：Rust 语言中文社区</p>\n</div>\n</div>\n</div>"}