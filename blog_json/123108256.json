{"blogid": "123108256", "writerAge": "码龄7年", "writerBlogNum": "142", "writerCollect": "956", "writerComment": "67", "writerFan": "489", "writerGrade": "5级", "writerIntegral": "2538", "writerName": "常哥说编程", "writerProfileAdress": "writer_image\\profile_123108256.jpg", "writerRankTotal": "9078", "writerRankWeekly": "21886", "writerThumb": "104", "writerVisitNum": "179122", "blog_read_count": "1318", "blog_time": "于 2022-02-24 11:43:51 发布", "blog_title": "新阁上位机---comboBox控件的数据绑定方法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2>前言</h2>\n<p>大家好，我是新阁教育韩工，这几天有小伙伴问我关于上位机开发中，comboBox控件如何绑定数据的问题，我们今天简单来看一下C#中几种不同的绑定方法。</p>\n<h2>绑定List集合</h2>\n<p>首先创建数据绑定方法，在方法中创建一个string类型的List集合。并将集合赋值给控件的DataSource（数据源）完成数据绑定。</p>\n<pre><code>//数据绑定方法1，绑定list集合\nprivate void DataBinding1()\n{\n   List&lt;string&gt;list = new List&lt;string&gt;()\n   {\n      \"111\",\"222\",\"333\",\"444\"\n   };\n   this.cmb_list.DataSource = list;\n}\n</code></pre>\n<p>代码运行效果如下</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\f2f7f2c8d588a76daf4db45c3151d739.png\"/></p>\n<h2>绑定数组集合</h2>\n<p>创建数据绑定方法，在方法中创建一个string类型的数组集合。并将数组赋值给控件的DataSource（数据源）完成数据绑定。</p>\n<pre><code>//数据绑定方法2，绑定数组集合\nprivate void DataBinding2()\n{\n   string[] array = new string[] { \"aaa\", \"bbb\", \"ccc\", \"ddd\" };\n   this.cmb_Array.DataSource = array;\n}\n</code></pre>\n<p>代码运行效果如下</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\0f63da0254b8d3f7f1094113a22cac27.png\"/></p>\n<h2>绑定对象集合</h2>\n<p>首先创建一个实体类，用于存储数据</p>\n<pre><code>public class Data\n{\n   public string ID { get; set; }\n   public string Name { get; set; }\n}\n</code></pre>\n<p>创建数据绑定方法，在方法中创建一个对象类型的List集合。并将集合赋值给控件的DataSource（数据源），并给控件的DisplayMember属性和ValueMember属性赋值，完成数据绑定。</p>\n<pre><code>//数据绑定方法3，绑定对象集合\nList&lt;Data&gt; datas = new List&lt;Data&gt;();\nprivate void DataBinding3()\n{\n            \n   Data data1 = new Data() { ID = \"A\", Name = \"西门子\" };\n   Data data2 = new Data() { ID = \"B\", Name = \"三菱\" };\n   Data data3 = new Data() { ID = \"C\", Name = \"欧姆龙\" };\n   datas.Add(data1);\n   datas.Add(data2);\n   datas.Add(data3);\n\n   this.cmb_Data.DataSource = datas;\n   this.cmb_Data.DisplayMember = \"Name\";\n   this.cmb_Data.ValueMember = \"ID\";\n}\n</code></pre>\n<p>使用这种方法绑定控件我们可以利用控件的SelectedIndexChanged事件通过选中的DisplayMember来查找对应的ValueMember。</p>\n<pre><code>private void cmb_Data_SelectedIndexChanged(object sender, EventArgs e)\n{\n   this.txt_DataID.Text = cmb_Data.SelectedValue.ToString();\n}\n</code></pre>\n<p>代码运行效果如下</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\a0103d57693ee93390338f5e2ecc05dc.png\"/></p>\n<h2>绑定DataTable</h2>\n<p>方法与绑定对象集合方法类似，使用这种方法同样可以利用控件的SelectedIndexChanged事件，通过选中的DisplayMember来查找对应的ValueMember，实现代码如下。</p>\n<pre><code>//数据绑定方法4，绑定DataTable\nprivate void DataBinding4()\n{\n    DataTable dt = new DataTable();\n    DataColumn dc1 = new DataColumn(\"Id\");\n    DataColumn dc2 = new DataColumn(\"Name\");\n    dt.Columns.Add(dc1);\n    dt.Columns.Add(dc2);\n\n    DataRow dr1 = dt.NewRow();\n    dr1[\"Id\"] = \"10\";\n    dr1[\"Name\"] = \"上位机\";\n    DataRow dr2 = dt.NewRow();\n    dr2[\"Id\"] = \"11\";\n    dr2[\"Name\"] = \"全栈\";\n    DataRow dr3 = dt.NewRow();\n    dr3[\"Id\"] = \"12\";\n    dr3[\"Name\"] = \" Web上位机\";\n\n    dt.Rows.Add(dr1);\n    dt.Rows.Add(dr2);\n    dt.Rows.Add(dr3);\n\n    this.cmb_DataTable.DataSource = dt;\n    this.cmb_DataTable.ValueMember = \"Id\";\n    this.cmb_DataTable.DisplayMember = \"Name\";\n\n}\n//事件\nprivate void cmb_DataTable_SelectedIndexChanged(object sender, EventArgs e)\n{\n    this.txt_DataTableID.Text = cmb_DataTable.SelectedValue.ToString();\n}\n</code></pre>\n<p>代码运行效果如下</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\28a6d9b45526bd79a73b84d8c85cd973.png\"/></p>\n<h2>绑定枚举</h2>\n<p>首先定义一个颜色枚举</p>\n<pre><code>public enum ColorEnum\n{\n   红色,\n   蓝色,\n   白色\n}\n</code></pre>\n<p>使用Enum.GetNames（）方法，将枚举元素的名称赋值给控件。</p>\n<pre><code>private void DataBinding5()\n{\n   this.cmb_enum.DataSource = Enum.GetNames(typeof(ColorEnum));\n}\n</code></pre>\n<p>代码运行效果如下</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\549b9a218323eb862a7414cda6677e40.png\"/></p>\n<h2>利用Items.Add方法添加元素</h2>\n<p>这里需要注意，Items.Add（）方法里面的参数为Object类型。</p>\n<pre><code>//数据绑定方法6，利用Items.Add方法添加元素\nprivate void DataBinding6()\n{\n   this.cmb_item.Items.Add(\"早上好\");\n   this.cmb_item.Items.Add(\"中午好\");\n   this.cmb_item.Items.Add(\"下午好\");\n}\n</code></pre>\n<p>代码运行效果如下</p>\n<p><img alt=\"\" height=\"1\" src=\"https://img-blog.csdnimg.cn/75c920e0c753482187e7d50fbba249be.gif\" width=\"1\"/></p>\n<h2>利用Items.AddRange方法添加元素</h2>\n<p>这里需要注意，Items.AddRange（）方法里面的参数为Object类型的数组。</p>\n<pre><code>//数据绑定方法7，利用Items.AddRange方法添加元素\nprivate void DataBinding7()\n{\n   object[] array = new object[] { 111, 222, 333,444 };\n   this.cmb_items.Items.AddRange(array);            \n}\n</code></pre>\n<p>代码运行效果如下</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\f63c019d8e5b31d7a60a9bada419dcee.png\"/></p>\n<h2>结语</h2>\n<p>C#中，通过以上几种常用的方法就可以完成下拉控件comboBox的数据绑定，希望能给大家带来一些帮助。</p>\n<p>新阁教育，用我的专业，成就你的梦想！</p>\n</div>\n</div>"}