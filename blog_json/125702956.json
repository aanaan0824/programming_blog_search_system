{"blogid": "125702956", "writerAge": "码龄7年", "writerBlogNum": "10", "writerCollect": "170", "writerComment": "21", "writerFan": "10", "writerGrade": "2级", "writerIntegral": "210", "writerName": "文山湖的猫", "writerProfileAdress": "writer_image\\profile_125702956.jpg", "writerRankTotal": "63320", "writerRankWeekly": "286424", "writerThumb": "67", "writerVisitNum": "16152", "blog_read_count": "2344", "blog_time": "已于 2022-08-06 10:24:19 修改", "blog_title": "Python ACM 模式下的输入输出", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>#Python #数据结构与算法<br/> 与leetcode的核心代码模式不同，acm模式下需要自己编写输入与输出函数。<br/> 推荐以下几个网站练习acm模式：<br/> <a href=\"https://ac.nowcoder.com/acm/contest/5657#question\">牛客网：OJ在线编程常见输入输出练习场</a><br/> <a href=\"https://www.nowcoder.com/exam/oj/ta?tpId=37\">牛客网：华为机试 </a><br/> <a href=\"https://www.acwing.com/problem/\">AcWing</a></p>\n<h2><a id=\"1__7\"></a>1. 输入函数模板</h2>\n<h3><a id=\"11__9\"></a>1.1 获取输入数据</h3>\n<p>Python输入数据主要通过<code>input()</code>函数实现，<code>input()</code>会读取控制台一行的输入，如果输入有多行的话，需要多次使用<code>input()</code>。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 输入为: 1 2 3 4 5</span>\na <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># a = '1 2 3 4 5'</span>\n</code></pre>\n<p>与Python2中不同，Python3中的<code>input()</code>会将接受的数据返回为一个<code>string</code>类型，如果一行中有多个数据的话，则需要使用<code>split()</code>进行切割。<code>split()</code>切割后返回一个列表。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 输入为： 1 2 3 4 5</span>\na <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># split()默认以空字符为分隔符，包括空格、换行(\\n)、制表符(\\t)等</span>\n<span class=\"token comment\"># a = ['1', '2', '3', '4', '5']</span>\n\t  \n<span class=\"token comment\"># 输入为：1,2,3,4,5</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 以逗号为分隔符</span>\n<span class=\"token comment\"># b = ['1', '2', '3', '4', '5']</span>\n</code></pre>\n<p>因为<code>input()</code>返回的是<code>string</code>，分割后也是一个字符列表，如果输入数据是数字则需要进行类型转换。可以单个转换或是用列表批量转换，或者是使用<code>map()</code>并行转换。<code>map()</code>函数返回的是一个迭代器，不能改变值，如果需要改变值的话还需要转换成列表</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 输入为： 1 </span>\na <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 单个转换</span>\n\t  \n<span class=\"token comment\"># 输入为：1 2 3 4 5</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># b = ['1', '2', '3', '4', '5']</span>\nc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> b<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 使用列表进行批量转换 c = [1, 2, 3, 4, 5]</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 当然可以一步倒位</span>\n\t  \n<span class=\"token comment\"># 使用map进行并行转换</span>\ne <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 此时e是一个map迭代器，不能赋值，也不能索引</span>\nf <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 转换为列表，e = [1, 2, 3, 4, 5]</span>\ng <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 一步到位</span>\n\t  \n</code></pre>\n<h3><a id=\"12__49\"></a>1.2 三种情况的输入数据</h3>\n<p>情况1: 多行输入，同时未指定用例的个数，<a href=\"https://ac.nowcoder.com/acm/contest/5657/A\">例子1</a></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n\t  <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n\t      data <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t      solve<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 核心函数</span>\n\t  <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n\t      <span class=\"token keyword\">break</span>\n</code></pre>\n<p>情况2: 多行输入， 指定用例个数， <a href=\"https://ac.nowcoder.com/acm/contest/5657/B\">例子2</a></p>\n<pre><code class=\"prism language-python\">n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> 获取用例个数\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t  data <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t  solve<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 核心函数</span>\n</code></pre>\n<p>情况3: 多行输入，指定某个条件退出，<a href=\"https://ac.nowcoder.com/acm/contest/5657/C\">例子3</a></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n\t  data <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t  <span class=\"token keyword\">if</span> judge<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 判断</span>\n\t      <span class=\"token keyword\">break</span>\n\t  solve<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"2__81\"></a>2. 输出函数模板</h2>\n<p>Python3的输出主要靠<code>print()</code>函数，就是把结果打印至终端。需要对<code>print()</code>函数的<code>sep</code>和<code>end</code>两个参数有一定的了解，可以查看<a href=\"https://www.runoob.com/python3/python-func-print.html\">菜鸟教程</a><br/> 情况1: 输出单个数字</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 输出 a (a = 1)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>情况2: 输出多个数字，同时要求以分隔符隔开</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 输出 a=1, b=2, c=3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\"># print默认以空格为分隔符</span>\n<span class=\"token comment\"># output：1 2 3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 以逗号为分隔符</span>\n<span class=\"token comment\"># output：1,2,3</span>\n</code></pre>\n<p>情况3：最终结果是一个列表</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 最终结果 res = [1, 2, 3]</span>\n<span class=\"token comment\"># 1. 直接输出列表</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 2. 输出列表, 每个元素单独输出</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#output: 1</span>\n<span class=\"token comment\">#        2</span>\n<span class=\"token comment\">#        3</span>\n\n<span class=\"token comment\"># 3. 输出列表，每个元素单独输出，同时还需要在同一行输出, 以空格分隔</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># end的默认值是'\\n'，即换行</span>\n    <span class=\"token comment\"># output: 1 2 3 </span>\n</code></pre>\n<p>情况4: 将字符列表合成一个字符串，需要用到<code>join()</code>函数</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># res = ['a', 'b', 'c']</span>\n<span class=\"token comment\"># 输出是一个字符串</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># output: abc</span>\n\n<span class=\"token comment\"># 输出是一个字符串，且用 * 号分隔</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># output: a*b*c</span>\n<span class=\"token comment\"># 如果用 print(res[i], end = '*') 的话，输出就是 a*b*c*了，在末尾还多了一个*</span>\n</code></pre>\n<h2><a id=\"3__134\"></a>3. 链表的输入输出</h2>\n<p>acm模式中的链表也是通过输入一个数组来模拟的，所以获取输入数据和前面没有什么不同。<br/> 主要在于定义链表结构、将输入数据转化为链表以及输出链表。<br/> <a href=\"https://www.nowcoder.com/practice/f96cd47e812842269058d483a11ced4f?tpId=37&amp;tqId=21271&amp;rp=1&amp;ru=/exam/oj/ta&amp;qru=/exam/oj/ta&amp;sourceUrl=%2Fexam%2Foj%2Fta%3FtpId%3D37&amp;difficulty=undefined&amp;judgeStatus=undefined&amp;tags=&amp;title=\">华为机试：从单向链表中删除指定值的节点</a><br/> <a href=\"https://www.nowcoder.com/practice/54404a78aec1435a81150f15f899417d?tpId=37&amp;tqId=21274&amp;rp=1&amp;ru=/exam/oj/ta&amp;qru=/exam/oj/ta&amp;sourceUrl=%2Fexam%2Foj%2Fta%3FtpId%3D37&amp;difficulty=undefined&amp;judgeStatus=undefined&amp;tags=&amp;title=\">华为机试：输出单向链表中倒数第k个节点</a></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 定义链表结构</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">,</span><span class=\"token builtin\">next</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span>\n\n<span class=\"token comment\"># 数组转链表</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">nums2ListNode</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    dummy <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n    root <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> root\n    i <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        root<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node\n        root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        root<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n<span class=\"token comment\"># 打印链表</span>\nnums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nroot <span class=\"token operator\">=</span> nums2ListNode<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> root<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n    root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n</code></pre>\n<h2><a id=\"4__170\"></a>4. 二叉树</h2>\n<h2><a id=\"4__171\"></a>4. 二叉树的输入输出</h2>\n<h3><a id=\"41__172\"></a>4.1 完全二叉树格式输入</h3>\n<p>acm模式中一般用输入一行数字代表一个二叉树，一般会以完全二叉树格式输入。这行数字的按照层序遍历的顺序排列，且其中空节点一般会用特定的符号表示，如<code>0</code>或是<code>null</code><br/> 可以直接用数组表示二叉树，例如列表<code>Tree</code>, 将<code>Tree[i]</code>的左子树和右子树分别为<code>Tree[2*i+1]</code>和<code>Tree[2*i+2]</code>，不过会比较占用空间。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 中序遍历</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">inorder_traversal</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> index <span class=\"token operator\">&gt;=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n    left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n    inorder_traversal<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    inorder_traversal<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n\t  \n\t  \n<span class=\"token comment\"># 输入为 1 2 3 null 4 null 5</span>\n<span class=\"token comment\">#      1</span>\n<span class=\"token comment\">#    /   \\</span>\n<span class=\"token comment\">#   2     3</span>\n<span class=\"token comment\">#    \\     \\</span>\n<span class=\"token comment\">#     4     5</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    nums <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> num <span class=\"token operator\">!=</span> <span class=\"token string\">'null'</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">]</span>\n    inorder_traversal<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># output: 2 4 1 3 5 </span>\n</code></pre>\n<p>也可以用链表实现，更省空间，但操作更复杂一些。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 定义二叉树类函数</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> left<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> right<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right\n\t  \n\t  \n<span class=\"token comment\"># 由数组转二叉树</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">construct_binary_tree</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> index <span class=\"token operator\">&gt;=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token comment\"># -1作为空节点</span>\n    <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n    left <span class=\"token operator\">=</span> index <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    right <span class=\"token operator\">=</span> index <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n    root <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> construct_binary_tree<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">)</span>\n    root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> construct_binary_tree<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> root\n\n<span class=\"token comment\"># 中序遍历</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">inorder_traversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span>\n    inorder_traversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    inorder_traversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 输入为 1 2 3 null 4 null 5</span>\n<span class=\"token comment\">#      1</span>\n<span class=\"token comment\">#    /   \\</span>\n<span class=\"token comment\">#   2     3</span>\n<span class=\"token comment\">#    \\     \\</span>\n<span class=\"token comment\">#     4     5</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n\tnums <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tnums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> num <span class=\"token operator\">!=</span> <span class=\"token string\">'null'</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">]</span>\n\troot <span class=\"token operator\">=</span> construct_binary_tree<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\tinorder_traversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n   <span class=\"token comment\"># output: 2 4 1 3 5</span>\n\t  \n</code></pre>\n<h3><a id=\"42__247\"></a>4.2 其他格式输入</h3>\n<p>有部分题目的输入格式不是完全二叉树，例如leetcode的二叉树格式，输入的数组虽然也是按照层序遍历的顺序，但并不是每一层的空节点都会表示出来，而是仅表示与非空节点连接的空节点。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 数组转二叉树</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">construct_binary_tree</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># nums = ['1', '2', '3', 'null', 'null', 'null', '5']</span>\n    <span class=\"token keyword\">if</span> nums <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span>\n    root <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    queue <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n        i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n        i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> root\n  \n<span class=\"token comment\"># 中序遍历</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">inorder_traversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span>\n    inorder_traversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    inorder_traversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n  \n<span class=\"token comment\"># 输入 1 null 1 null 1 2</span>\n<span class=\"token comment\">#    1</span>\n<span class=\"token comment\">#  /  \\</span>\n<span class=\"token comment\">#null  1</span>\n<span class=\"token comment\">#    /   \\</span>\n<span class=\"token comment\">#   null  1</span>\n<span class=\"token comment\">#        /</span>\n<span class=\"token comment\">#       2</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n\tnums <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tnums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> num <span class=\"token operator\">!=</span> <span class=\"token string\">'null'</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">]</span>\n\troot <span class=\"token operator\">=</span> construct_binary_tree<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n\tinorder_traversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n  \t<span class=\"token comment\"># 输出 1 1 2 1</span>\n</code></pre>\n<h2><a id=\"_292\"></a>参考博客</h2>\n<p><a href=\"https://www.bilibili.com/read/cv15996133\">ACM模式笔试编程题Python3的输入和输出格式详解</a><br/> <a href=\"https://blog.csdn.net/weixin_42327752/article/details/124381258\">ACM模式下链表、二叉树的输入Python实现</a></p>\n<h2><a id=\"_297\"></a>本文链接</h2>\n<p>http://t.csdn.cn/m7VMg</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}