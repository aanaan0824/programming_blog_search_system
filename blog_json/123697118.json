{"blogid": "123697118", "writerAge": "码龄4年", "writerBlogNum": "1", "writerCollect": "15", "writerComment": "1", "writerFan": "1", "writerGrade": "1级", "writerIntegral": "11", "writerName": "chrlott", "writerProfileAdress": "writer_image\\profile_123697118.jpg", "writerRankTotal": "249332", "writerRankWeekly": "589158", "writerThumb": "0", "writerVisitNum": "5152", "blog_read_count": "5143", "blog_time": "已于 2022-03-23 22:49:31 修改", "blog_title": "C#(winform)调用pytorch模型", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"winformpytorchunet_0\"></a>winform调用pytorch上训练好的unet模型：</h1>\n<p>项目是写一个辅助诊断系统软件，用winform写软件，调用pytorch和matlab的模型。这篇博客只包含调用pytorch模型的部分。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">1.</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">(</span>libtorch<span class=\"token punctuation\">)</span>调用模型\n<span class=\"token number\">2.</span>c<span class=\"token operator\">++</span>生成动态链接库\n<span class=\"token number\">3.</span>c#调用dll\n</code></pre>\n<h2><a id=\"1_libtorchcpugpu_8\"></a>1. libtorch(cpu)调用gpu模型</h2>\n<p>首先把pytorch的模型转成libtorch的。如果模型没有控制流（if-else语句），就用简单的trace方式进行转换。</p>\n<h3><a id=\"pthpt_10\"></a>pth文件转为pt文件</h3>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">import</span> torchvision\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> unet_parts <span class=\"token keyword\">import</span> UNet\n\ndevice <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">'cpu'</span><span class=\"token punctuation\">)</span>\nmodel <span class=\"token operator\">=</span> UNet<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#服务器gpu训练模型，导成cpu模型</span>\nmodel<span class=\"token punctuation\">.</span>load_state_dict<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"best_model.pth\"</span><span class=\"token punctuation\">,</span> map_location<span class=\"token operator\">=</span><span class=\"token string\">'cpu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntraced_script_module <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>jit<span class=\"token punctuation\">.</span>trace<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\ntraced_script_module<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">\"best_model.pt\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"VS2019libtorchopencv_27\"></a>VS2019部署libtorch+opencv</h3>\n<p>下载libtorch、opencv<br/> 配置项目属性<br/> 右键项目，配置属性。VC++目录添加包含目录、库目录：</p>\n<pre><code class=\"prism language-cpp\">包含目录\nD<span class=\"token operator\">:</span>\\Tools\\libtorch\\include\\torch\\csrc\\api\\include\nD<span class=\"token operator\">:</span>\\Tools\\libtorch\\include\nD<span class=\"token operator\">:</span>\\Tools\\opencv\\build\\include\\opencv2\nD<span class=\"token operator\">:</span>\\Tools\\opencv\\build\\include\n\n库目录\nD<span class=\"token operator\">:</span>\\Tools\\libtorch\\lib\nD<span class=\"token operator\">:</span>\\Tools\\opencv\\build\\x64\\vc15\\lib\n</code></pre>\n<p>添加链接器-&gt;输入-&gt;附加依赖项，把libtorch、opencv库目录下的所有.lib文件全都复制过来。</p>\n<pre><code class=\"prism language-cpp\">asmjit<span class=\"token punctuation\">.</span>lib\nc10<span class=\"token punctuation\">.</span>lib\ncaffe2_detectron_ops<span class=\"token punctuation\">.</span>lib\ncaffe2_module_test_dynamic<span class=\"token punctuation\">.</span>lib\nCaffe2_perfkernels_avx<span class=\"token punctuation\">.</span>lib\nCaffe2_perfkernels_avx2<span class=\"token punctuation\">.</span>lib\nCaffe2_perfkernels_avx512<span class=\"token punctuation\">.</span>lib\nclog<span class=\"token punctuation\">.</span>lib\ncpuinfo<span class=\"token punctuation\">.</span>lib\ndnnl<span class=\"token punctuation\">.</span>lib\nfbgemm<span class=\"token punctuation\">.</span>lib\nfbjni<span class=\"token punctuation\">.</span>lib\nkineto<span class=\"token punctuation\">.</span>lib\nXNNPACK<span class=\"token punctuation\">.</span>lib\ntorch_cpu<span class=\"token punctuation\">.</span>lib\ntorch<span class=\"token punctuation\">.</span>lib\npytorch_jni<span class=\"token punctuation\">.</span>lib\nlibprotoc<span class=\"token punctuation\">.</span>lib\nopencv_world455<span class=\"token punctuation\">.</span>lib\n</code></pre>\n<blockquote>\n<p>项目是release版本就调用release版本的dll：opencv_xxxx.lib，debug版本opencv_xxxd.lib，注意区别。</p>\n</blockquote>\n<p>最后跑一下模型验证效果</p>\n<h2><a id=\"2c_71\"></a>2.c++生成动态链接库</h2>\n<p>创建项目：Windows桌面向导<br/> 选择应用类型：DLL<br/> 选择预编译头文件。其余配置同上</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"pch.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;torch/torch.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;torch/script.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;opencv2/opencv.hpp&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;opencv2/imgproc/types_c.h&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> cv<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> __stdcall <span class=\"token function\">LoadModel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> file_name<span class=\"token punctuation\">)</span> <span class=\"token comment\">//接口传入图片地址</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\ttorch<span class=\"token operator\">::</span>jit<span class=\"token operator\">::</span>script<span class=\"token operator\">::</span>Module module<span class=\"token punctuation\">;</span>\n\tmodule <span class=\"token operator\">=</span> torch<span class=\"token operator\">::</span>jit<span class=\"token operator\">::</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:/Project/octa/pytorch/best_model.pt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmodule<span class=\"token punctuation\">.</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttorch<span class=\"token operator\">::</span>Device <span class=\"token function\">device</span><span class=\"token punctuation\">(</span>torch<span class=\"token operator\">::</span>kCPU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmodule<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tMat image <span class=\"token operator\">=</span> <span class=\"token function\">imread</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">,</span> CV_BGR2GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//Mat to Tensor, add one dimension</span>\n\ttorch<span class=\"token operator\">::</span>Tensor tensor_image <span class=\"token operator\">=</span> torch<span class=\"token operator\">::</span><span class=\"token function\">from_blob</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> image<span class=\"token punctuation\">.</span>rows<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span>cols<span class=\"token punctuation\">,</span>image<span class=\"token punctuation\">.</span><span class=\"token function\">channels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> torch<span class=\"token operator\">::</span>kByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//-&gt; 1*1*256*256</span>\n\ttensor_image <span class=\"token operator\">=</span> tensor_image<span class=\"token punctuation\">.</span><span class=\"token function\">permute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//preprocessing</span>\n\ttensor_image <span class=\"token operator\">=</span> tensor_image<span class=\"token punctuation\">.</span><span class=\"token function\">toType</span><span class=\"token punctuation\">(</span>torch<span class=\"token operator\">::</span>kFloat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//tensor_image = tensor_image.div(255);    //normalization</span>\n\ttensor_image <span class=\"token operator\">=</span> tensor_image<span class=\"token punctuation\">.</span><span class=\"token function\">unsqueeze</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttensor_image<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\ttorch<span class=\"token operator\">::</span>Tensor output <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> tensor_image <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toTensor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttorch<span class=\"token operator\">::</span>Tensor output_max <span class=\"token operator\">=</span> output<span class=\"token punctuation\">.</span><span class=\"token function\">squeeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//cout &lt;&lt; output_max[0][0][0];</span>\n\n\t<span class=\"token comment\">//tensor to Mat</span>\n\toutput_max <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>output_max <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\toutput_max <span class=\"token operator\">=</span> output_max<span class=\"token punctuation\">.</span><span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>torch<span class=\"token operator\">::</span>kU8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\toutput_max <span class=\"token operator\">=</span> output_max<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>torch<span class=\"token operator\">::</span>kCPU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMat <span class=\"token function\">result_img</span><span class=\"token punctuation\">(</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> CV_8UC1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//8 bit 1 channel, 256 colors</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>result_img<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> output_max<span class=\"token punctuation\">.</span><span class=\"token function\">data_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>torch<span class=\"token operator\">::</span>kU8<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> output_max<span class=\"token punctuation\">.</span><span class=\"token function\">numel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//imshow(\"result\", result_img);</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> compression_params<span class=\"token punctuation\">;</span>\n\tcompression_params<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>IMWRITE_PNG_COMPRESSION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcompression_params<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 无压缩png.</span>\n\tcompression_params<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>IMWRITE_PNG_STRATEGY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcompression_params<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>IMWRITE_PNG_STRATEGY_DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">imwrite</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.png\"</span><span class=\"token punctuation\">,</span> result_img<span class=\"token punctuation\">,</span> compression_params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//waitKey(0);</span>\n\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>头文件</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n<span class=\"token comment\">//定义宏</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">UNET_DLL</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">UNET_DLL</span> <span class=\"token expression\"><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">UNET_DLL</span> <span class=\"token expression\"><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllimport<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> </span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> UNET_DLL <span class=\"token keyword\">void</span> __stdcall <span class=\"token function\">LoadModel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//extern \"C\" 避免编码问题改变函数名，导致找不到入口函数</span>\n</code></pre>\n<blockquote>\n<p>注意！！不用提供的模板pch.h，pch.cpp时，进行如下操作：<br/> 右键项目 --&gt; 属性 --&gt; C/C++ --&gt; 预编译头 --&gt;预编译头 改为创建</p>\n</blockquote>\n<h2><a id=\"3_winformdll_150\"></a>3. winform调用dll</h2>\n<p>把libtorch中所有dll、刚刚生成的dll文件放到项目文件夹的bin目录下。创建Windows窗体应用程序。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>InteropServices</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">WindowsFormsApp1</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Form1</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Form</span></span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//静态调用dll</span>\n        <span class=\"token punctuation\">[</span><span class=\"token function\">DllImport</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"E:\\vs\\winform_test\\WindowsFormsApp1\\bin\\octa.dll\"</span><span class=\"token punctuation\">,</span> EntryPoint <span class=\"token operator\">=</span> <span class=\"token string\">\"LoadModel\"</span><span class=\"token punctuation\">,</span> CharSet <span class=\"token operator\">=</span> CharSet<span class=\"token punctuation\">.</span>Ansi<span class=\"token punctuation\">,</span> CallingConvention <span class=\"token operator\">=</span> CallingConvention<span class=\"token punctuation\">.</span>Winapi<span class=\"token punctuation\">,</span> ExactSpelling <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">LoadModel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">analyzeButton_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">LoadModel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:/Project/octa/dataset/test/0.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> ss <span class=\"token operator\">=</span> openFileDialog1<span class=\"token punctuation\">.</span>FileName<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">LoadModel</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                MessageBox<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Region segmentation succeeded!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}