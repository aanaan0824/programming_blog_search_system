{"blogid": "125912507", "writerAge": "码龄2年", "writerBlogNum": "19", "writerCollect": "452", "writerComment": "104", "writerFan": "1726", "writerGrade": "3级", "writerIntegral": "656", "writerName": "沉默.@", "writerProfileAdress": "writer_image\\profile_125912507.jpg", "writerRankTotal": "24290", "writerRankWeekly": "7412", "writerThumb": "259", "writerVisitNum": "9818", "blog_read_count": "544", "blog_time": "已于 2022-08-16 18:29:12 修改", "blog_title": "C++ 多态详解【用法+原理】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night-eighties\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>✨<font color=\"red\" size=\"3\"><strong>前言</strong></font>：本文会对C++中多态这个概念进行详细介绍，通过<strong>用法和原理</strong>两个方面进行阐述，主要会对<strong>多态的概念</strong>，<strong>多态的实现和原理</strong>，以及对<strong>单继承和多继承中的虚函数表模型</strong>进行分析，还介绍了C++11中的两个关键字<code>override</code>和<code>final</code>的使用.</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>C++多态</h3>\n<ul><li><ul><li><a href=\"#1_3\">🏝️1.多态的概念</a></li><li><a href=\"#2_12\">🏠2.多态的实现</a></li><li><ul><li><a href=\"#21__13\">📖2.1 多态的构成条件</a></li><li><a href=\"#22__74\">📖2.2 虚函数</a></li><li><a href=\"#23__79\">📖2.3 虚函数的重写</a></li><li><a href=\"#24_C11_override__final_83\">📖2.4 C++11 override 和 final</a></li><li><a href=\"#25___132\">📖2.5 对比重载、覆盖(重写)、隐藏(重定义)</a></li></ul>\n</li><li><a href=\"#3__138\">🏖️3. 抽象类</a></li><li><a href=\"#4__217\">🏞️4. 多态的原理</a></li><li><ul><li><a href=\"#41__218\">📖4.1 虚函数表</a></li><li><a href=\"#42__383\">📖4.2 多态的原理</a></li><li><a href=\"#43__464\">📖4.3 动态绑定与静态绑定</a></li></ul>\n</li><li><a href=\"#5__470\">🏜️5. 单继承和多继承中的虚函数表</a></li><li><ul><li><a href=\"#51__471\">📖5.1 多继承中的虚函数表</a></li><li><a href=\"#52__595\">📖5.2 多继承中的虚函数表</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"1_3\"></a>🏝️1.多态的概念</h2>\n<p>多态：通俗来讲，就是多种形态，同一件事情，由<strong>不同类型</strong>的对象去完成时，会表现出多种状态.</p>\n<p>比如，在日常生活中，当我们去旅游景点游玩时，需要买票，买票时的票价会根据买票人的身份不同，所对应的价格也就不一样，当我们<strong>是普通人时</strong>，可能会是<strong>正常票价</strong>，是<strong>学生</strong>时，可能会<strong>打五折</strong>，是<strong>儿童</strong>时，会<strong>免门票</strong>.<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b5c484ae5a904f4988f617686785e01b.png\"/></p>\n<p>那么，我们将这个动作，用一个<code>BuyTicket()</code>的函数来表示，当我们用不同的身份（对象）去调用这个函数时，它会表现出三种不同的价格（状态）.这就是多态.</p>\n<h2><a id=\"2_12\"></a>🏠2.多态的实现</h2>\n<h3><a id=\"21__13\"></a>📖2.1 多态的构成条件</h3>\n<p>C++多态意味着调用成员函数时，会根据调用成员函数的对象的类型来执行不同的函数，并产生不同的行为，比如<code>Student</code>类继承了<code>Person</code>类，<code>Student</code>类买票半价，<code>Person</code>类买票全价.</p>\n<p>看如下代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//加virtual代表虚函数,下文中会讲解</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BuyTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person::全价\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BuyTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Student::半价\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Children</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BuyTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Children::免门票\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Person<span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\n\tStudent s<span class=\"token punctuation\">;</span>\n\tChildren c<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//指向Student</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-&gt;</span><span class=\"token function\">BuyTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//指向Children</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-&gt;</span><span class=\"token function\">BuyTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>执行结果如下：<br/> <img src=\"image\\5fa8c92c7b764ba7ba21928ed0369761.png\" width=\"80%\"/></p>\n<p>可以看到，我们使用同一个父类指针去分别指向不同的子类对象时，并且调用<code>BuyTicket()</code>函数时，分别调用了<code>Student</code>和<code>Children</code>子类的<code>BuyTicket()</code>函数.这便是多态的实现方式.</p>\n<p>所以，我们也可以得到构成多态的两个条件：</p>\n<p>1.必须通过基类的<strong>指针</strong>或<strong>引用</strong>调用虚函数</p>\n<p>2.被调用的函数必须是虚函数，且派生类必须对基类的虚函数进行<strong>重写</strong>.</p>\n<h3><a id=\"22__74\"></a>📖2.2 虚函数</h3>\n<p>在C++中，基类将类型相关的函数和派生类不做改变直接继承的函数区分对待.对于某些函数，<strong>基类希望它的派生类各自定义合适自己的版本</strong>，此时基类就将这些函数声明成<strong>虚函数</strong>.</p>\n<p><strong>虚函数</strong>：被<code>Virtual</code>修饰的函数即为虚函数</p>\n<h3><a id=\"23__79\"></a>📖2.3 虚函数的重写</h3>\n<p>虚函数的<strong>重写(覆盖)</strong>：派生类中有一个跟基类<strong>完全相同</strong>的虚函数(派生类的虚函数与基类虚函数的<strong>返回值</strong>，<strong>函数名</strong>，<strong>形参列表</strong>完全相同)，称子类的虚函数重写了基类的虚函数.</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\612eb786523949a4bdcb82296b20bf6a.png\"/></p>\n<h3><a id=\"24_C11_override__final_83\"></a>📖2.4 C++11 override 和 final</h3>\n<p>在C++中，我们可以看到，对于虚函数重写的要求是比较严格的，要求<font color=\"red\" size=\"3\"><strong>三同</strong></font>，但在实际当中，往往会因为不小心可能会将派生类中的要重写的虚函数的函数名或者参数列表没有写成相同的，从而定义了一个新的函数，这种情况编译器也不会报错，只有当我们自己去运行发现结果不对时才能反应到，因此：<code>C++11</code>就提供了两个关键字：<code>override</code>来帮助用户检测是否被重写.</p>\n<p>1.<code>override</code>：检查派生类是否重写了基类中的某个虚函数，如果没有则编译报错</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BuyTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person::全价\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BuyTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Student::半价\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如果我们使用<code>override</code>来标记某个函数，但这个函数并没有重写基类中的某个虚函数，则编译器就会报错.</p>\n<p>2.<code>final</code>：修饰虚函数，表明该虚函数不能被重写.</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BuyTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">final</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person::全价\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//会编译报错,Person中的BuyTicket()函数已经被声明成final</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BuyTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Student::半价\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如果我们把函数定义成了<code>final</code>，之后任何想要覆盖该函数的操作都将引发错误.</p>\n<h3><a id=\"25___132\"></a>📖2.5 对比重载、覆盖(重写)、隐藏(重定义)</h3>\n<p>对于这三种概念的对比，用一张图来表示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\eb0702b87f2d4792b1bfb7dd294c3e60.png\"/><br/> 通过这张图，对于这三个概念的理解可以进一步的加深.</p>\n<h2><a id=\"3__138\"></a>🏖️3. 抽象类</h2>\n<p>我们来看这样一个场景，比如我们现在要实现一个书店卖书折扣的问题，假如我们需要书店程序支持不同的折扣策略，例如我们可能提供购买量不超过某个限额时，可以享受折扣，一旦超过，均按原价支付，或者只有购买量超过一定数量时，所有书籍均享受折扣，否则全都不打折.</p>\n<p>于是我们可以定义一个类<code>Dis_quote</code>来支持不同的折扣策略，<code>Dis_quote</code>负责保存购买量的值和折扣值，其他的表示某种特定策略的类将继承自<code>Dis_quote</code>.<br/> 另外，每个派生类通过定义自己的<code>strategy()</code>函数来实现不同的折扣策略.</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dis_quote</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Dis_quote</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t amount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> discount <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span> <span class=\"token function\">_amount</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_discount</span><span class=\"token punctuation\">(</span>discount<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">strategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"负责提供给子类继承的购买量和折扣值、不提供折扣策略\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>size_t _amount<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//购买量</span>\n\t<span class=\"token keyword\">double</span> _discount<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//折扣值</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bulk_quote</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Dis_quote</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Bulk_quote</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t amount <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> discount <span class=\"token operator\">=</span> <span class=\"token number\">8.8</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">Dis_quote</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">,</span> discount<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">strategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Bulk_quote策略：当购买量超过amount(如果未指定就是100)本时，打8.8折\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Less_quote</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Dis_quote</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Less_quote</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t amount <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> discount <span class=\"token operator\">=</span> <span class=\"token number\">8.8</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">Dis_quote</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">,</span> discount<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">strategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Less_quote策略：当购买量小于amount(如果未指定就是50)时，打8.8折，一旦大于amount，按原价\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>显然，<code>Dis_quote</code>类与任何特定的折扣策略都无关，因此<code>Dis_quote</code>中的<code>strategy()</code>函数是没有实际含义的.</p>\n<p>所以对于<code>Dis_quote</code>类，我们并不希望去直接使用它，因为这毫无意义，我们也不希望<code>Dis_quote</code>类创建对象，<code>Dis_quote</code>表示的是一种通用概念，而不是某种具体折扣策略.</p>\n<p>此时，我们就可以将<code>Dis_quote</code>类中的<code>strategy()</code>函数设置成<strong>纯虚函数</strong>，从而实现我们的设计意图.</p>\n<p>在函数体的位置(在声明语句的分号之前)，写上<code>= 0</code>，这个函数就为<strong>纯虚函数</strong>. 包含纯虚函数的类叫抽象类，抽象类不能实例化出对象.</p>\n<blockquote>\n<p><strong>注意</strong>: 由于虚函数的继承为接口继承，所以继承了具有纯虚函数的基类的派生类也不能实例化对象，只有<strong>重写</strong>虚函数，派生类才能实例化出对象，纯虚函数规范了派生类必须重写，纯虚函数也体现了虚函数的接口继承.</p>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dis_quote</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Dis_quote</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t amount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> discount <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span> <span class=\"token function\">_amount</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_discount</span><span class=\"token punctuation\">(</span>discount<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">//纯虚函数</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">strategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>size_t _amount<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//购买量</span>\n\t<span class=\"token keyword\">double</span> _discount<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//折扣值</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"4__217\"></a>🏞️4. 多态的原理</h2>\n<h3><a id=\"41__218\"></a>📖4.1 虚函数表</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func1()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Base b<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7ba1fe5e46964f8ba1eab8798a2baca2.png\"/></p>\n<p>我们先来看一段代码，我们定义了一个<code>Base</code>基类，然后通过<code>sizeof</code>计算基类大小，通过运行结果我们发现基类大小为<code>8bytes</code>，<font color=\"red\" size=\"3\"><strong>也就是说，除了一个<code>_a</code>成员，还多了一个<code>_vfptr</code>放在了对象的前面（某些平台可能会放在对象的最后面，这个与平台有关），对象中的这个指针叫做虚函数表指针（v代表virtual，f代表function).</strong></font></p>\n<p>一个含有虚函数的类中都至少有一个虚函数表指针，因为虚函数的地址要被放到虚函数表中，虚函数表也简称虚表.</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fc1431f0f98e4bc7a57ec68259ec3681.png\"/></p>\n<p>这是在<code>VS</code>监视窗口下观察到的<code>b</code>对象内部结构.</p>\n<p>那么如果是一个继承了这个基类的派生类，派生类的虚函数表又是怎样的结构呢？我们将上边的代码进行改造然后接着分析：</p>\n<p>通过对上面的代码进行改造：</p>\n<ol><li>增加一个派生类<code>Derive</code>类继承<code>Base</code>类</li><li>在<code>Derive</code>类中重写<code>func1</code></li><li>在<code>Base</code>中增加一个虚函数<code>func2</code>和一个普通函数<code>func3</code></li></ol>\n<p>代码如下：</p>\n<pre><code class=\"prism language-bash\">class Base\n<span class=\"token punctuation\">{<!-- --></span>\npublic:\n\tvirtual void <span class=\"token function-name function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::func1()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tvirtual void <span class=\"token function-name function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::func2()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tvoid <span class=\"token function-name function\">func3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::func3()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\nprivate:\n\tint _a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nclass Derive <span class=\"token builtin class-name\">:</span> public Base\n<span class=\"token punctuation\">{<!-- --></span>\npublic:\n\tvirtual void <span class=\"token function-name function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::func1()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\nprivate:\n\tint _b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nint <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tBase b<span class=\"token punctuation\">;</span>\n\tDerive d<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>紧接着我们再使用<code>VS</code>的监视窗口去观察<code>b</code>对象和<code>d</code>对象的内部结构：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b8afabf1242b4988892b076aa8c96ca9.png\"/><br/> 通过观察，我们发现了以下几点：</p>\n<ol><li>派生类对象<code>d</code>中也有一个虚表指针，<code>d</code>对象由两部分构成，一部分是从<code>Base</code>中继承而来的成员，另一部分是<code>Derive</code>类自己的成员.</li><li>基类<code>b</code>对象和派生类d对象虚表是不一样的，这里我们发现<code>func1</code>完成了重写，所以d的虚表中存的是重写的<code>Derive::func1</code>，所以虚函数的重写也叫作覆盖，覆盖就是指虚表中虚函数的覆盖。重写是语法的叫法，覆盖是原理层的叫法.</li><li>另外<code>func2</code>继承下来后是虚函数，所以放进了虚表，<code>func3</code>也继承下来了，但是不是虚函数，所以不会放进虚表.</li><li>虚函数表本质是一个<strong>存虚函数指针</strong>的<strong>指针数组</strong>，一般情况这个数组最后面放了一个<code>nullptr</code>.</li><li>总结一下派生类的虚表生成：<br/> <font color=\"red\" size=\"3\"><strong>a.先将基类中的虚表内容拷贝一份到派生类虚表中<br/> b.如果派生类重写了基类中某个虚函数，用派生类自己的虚函数覆盖虚表中基类的虚函数<br/> c.派生类自己新增加的虚函数按其在派生类中的声明次序增加到派生类虚表的最后</strong>.</font></li></ol>\n<p>注意：这里有一个容易混淆的地方，虚函数存在哪里？虚表存在哪里？</p>\n<p>可能会有类似：虚函数存在虚表中，虚表存在对象中. 而这样的回答是错误的.</p>\n<p>注意虚表存的是虚函数指针，不是虚函数，虚函数和普通函数一样，都是存在代码段中的，只是它的指针又存在了虚表中.另外对象中存的不是虚表，存的是虚表指针.那虚表是存在哪里的呢？</p>\n<p>我们可以写一段代码来验证：</p>\n<pre><code class=\"prism language-bash\">class Base\n<span class=\"token punctuation\">{<!-- --></span>\npublic:\n\tvirtual void <span class=\"token function-name function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::func1()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tvirtual void <span class=\"token function-name function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::func2()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tvoid <span class=\"token function-name function\">func3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::func3()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\nprivate:\n\tint _a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nclass Derive <span class=\"token builtin class-name\">:</span> public Base\n<span class=\"token punctuation\">{<!-- --></span>\npublic:\n\tvirtual void <span class=\"token function-name function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::func1()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\nprivate:\n\tint _b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nint a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nint <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tBase b1<span class=\"token punctuation\">;</span>\n\t\n\tint b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  //栈区\n\tstatic int c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  //静态区\n\tint* d <span class=\"token operator\">=</span> new int<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> //堆区\n\tconst char* str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span> // 常量区/代码段\n\n\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"栈区：%p<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"静态区/数据段：%p<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"静态区/数据段：%p<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"堆区：%p<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"常量区/代码段：%p<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"虚表：%p<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, <span class=\"token punctuation\">(</span>*<span class=\"token variable\"><span class=\"token punctuation\">((</span>int<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>b1<span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们通过查看虚表的地址和哪一个存储区域的数据地址<strong>非常接近来判断</strong>，在对虚表找地址时，由于虚表指针一般存在对象的前<code>4</code>个字节中，所以我们可以先将<code>b1</code>对象的地址转换为<code>int*</code>的地址以便我们在解引用时能够取出前<code>4</code>个字节的内容也就是虚表指针.</p>\n<p>运行结果如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\57c292c7ade74581886e1d0d73169b80.png\"/><br/> 从运行结果我们可以明显可以看出：虚表的地址和常量区/代码段的<strong>地址很相近</strong>，所以我们也可以推断出虚表是存放在<strong>代码段/常量区</strong>.</p>\n<h3><a id=\"42__383\"></a>📖4.2 多态的原理</h3>\n<p>从我们上面的分析，那么多态的原理到底是什么呢？</p>\n<p>我们先来看一段代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BuyTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"成人-全价\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BuyTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"学生-半价\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span> people<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tpeople<span class=\"token operator\">-&gt;</span><span class=\"token function\">BuyTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tPerson p<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//传入p-&gt;调用Person::BuyTicket</span>\n\t<span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//传入s-&gt;调用Student::BuyTicket</span>\n\tStudent s<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a6e05f6111d24dba9f647a70d5c3ba56.png\"/><br/> 也就是说，对于<code>Func</code>函数内部利用Person类型的指针去调用<code>BuyTicket()</code>函数，当<code>people</code>指针指向<code>p</code>对象时，就调用<code>Person</code>中的<code>BuyTicket</code>，当<code>people</code>指针指向<code>s</code>对象时，就调用<code>Student</code>中的<code>BuyTicket</code>.</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fbb8f93f55744c298193cb88c3225556.png\"/></p>\n<ol><li>观察下图的红色箭头我们看到，<code>people</code>是指向<code>p</code>对象时，<code>people-&gt;BuyTicket</code>在<code>p</code>的虚表中找到虚函数是<code>Person::BuyTicket</code>.</li><li>观察下图的橙色箭头我们看到，<code>people</code>是指向<code>s</code>对象时，<code>people-&gt;BuyTicket</code>在<code>s</code>的虚表中找到虚函数是<code>Student::BuyTicket</code>.</li><li>这样就实现出了不同对象去完成同一行为时，展现出不同的形态.</li><li>我们要达到多态，有<font color=\"red\" size=\"3\"><strong>两个条件</strong></font>，一个是<strong>虚函数覆盖</strong>，一个是<strong>对象的指针或引用调用虚函数</strong>.</li><li>通过下面的汇编代码分析，看出<strong>满足多态以后的函数调用，不是在编译时确定的，是运行起来以后到对象的中找的. 不满足多态的函数调用时编译时确认好的.</strong></li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\72aae8fa72ef4336afea1a48b6233e2f.png\"/><br/> 下面我们来看汇编代码分析：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6fbe230e1d954004b55d51c65a6ba028.png\"/><br/> 传入<code>s</code>对象时也是类似.<br/> 下面我们再来看<font color=\"red\" size=\"3\"><strong>普通函</strong>数</font>的调用：<br/> 我们用p对象调用<code>BuyTicket</code>函数，首先<code>BuyTicket</code>虽然是虚函数，但是<code>p</code>是对象，不满足多态的条件，所以这里是普通函数的调用转换成地址时，是在编译时已经从符号表确认了函数的地址，直接<code>call</code> 地址.</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tPerson p<span class=\"token punctuation\">;</span>\n\tp<span class=\"token punctuation\">.</span><span class=\"token function\">BuyTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//传入p-&gt;调用Person::BuyTicket</span>\n\t<span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//传入s-&gt;调用Student::BuyTicket</span>\n\tStudent s<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里我们也看见了，直接<code>call</code>地址.<br/> <img alt=\"在这里插入图片描述\" src=\"image\\fc8dc26cf1ff4c8c859a6b32217b8002.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\eadae83ead7941cf8fd8e9e572c71615.png\"/></p>\n<h3><a id=\"43__464\"></a>📖4.3 动态绑定与静态绑定</h3>\n<ol><li><font color=\"red\" size=\"3\"><strong>静态绑定</strong></font>又称为<strong>前期绑定(早绑定)</strong>，在程序<strong>编译期间</strong>确定了程序的行为，也称为<strong>静态多态</strong>，比如：<strong>函数重载</strong>.</li><li><font color=\"red\" size=\"3\"><strong>动态绑定</strong></font>又称<strong>后期绑定(晚绑定)</strong>，是在程序<strong>运行期间</strong>，<strong>根据具体拿到的类</strong>型确定程序的具体行为，调用具体的函数，也称为<strong>动态多态</strong>.</li></ol>\n<p>上面的汇编代码已经很好解释了什么是<strong>静态绑定</strong>和<strong>动态绑定</strong>.</p>\n<h2><a id=\"5__470\"></a>🏜️5. 单继承和多继承中的虚函数表</h2>\n<h3><a id=\"51__471\"></a>📖5.1 多继承中的虚函数表</h3>\n<p>在这里，我们需要关注的是派生类对象的虚表模型，因为基类的虚表结构我们已经看过.</p>\n<p>我们先来看一段代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::func1()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::func2()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Derive</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::func1()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::func3()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::func4()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tBase b<span class=\"token punctuation\">;</span>\n\tDerive d<span class=\"token punctuation\">;</span>\n\t\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当我们使用visual studio2019的监视窗口去观察b对象和d对象的内部结构时：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7d8bfb9d01754fa2991ed42a2123eadd.png\"/><br/> 派生类中<code>func3</code>和<code>func4</code>也是虚函数，但是监视窗口中我们发现看不见<code>func3</code>和<code>func4</code>，这里是编译器的监视窗口故意隐藏了这两个函数，也可以认为是他的一个小<code>bug</code>。那么我们如何查看<code>d</code>的虚表呢？下面我们使用代码打印出虚表中的函数：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::func1()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base::func2()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Derive</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::func1()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::func3()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::func4()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>VFPTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintVFTable</span><span class=\"token punctuation\">(</span>VFPTR vfTable<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vfptr虚表地址:%p\\n\"</span><span class=\"token punctuation\">,</span> vfTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> vfTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第[%d]个虚函数地址-&gt;%p\\n\"</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> vfTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tVFPTR f <span class=\"token operator\">=</span> vfTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tBase b<span class=\"token punctuation\">;</span>\n\tDerive d<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">PrintVFTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>VFPTR<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-------------------------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintVFTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>VFPTR<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\85905ed32bd042eb829442100300686d.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\ca88d9c650d94aaea4486fc0273c8c4d.png\"/><br/> 结果说明<code>func3</code>和<code>func4</code>作为虚函数，它们的地址是被放在虚表中的.</p>\n<h3><a id=\"52__595\"></a>📖5.2 多继承中的虚函数表</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span> \n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base1::func1\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span> \n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base1::func2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> b1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span> \n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base2::func1\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span> \n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base2::func2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> b2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Derive</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span></span> \n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span> \n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::func1\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span> \n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derive::func3\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> d1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>VFPTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintVFTable</span><span class=\"token punctuation\">(</span>VFPTR vfTable<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vfptr虚表地址:%p\\n\"</span><span class=\"token punctuation\">,</span> vfTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> vfTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第[%d]个虚函数地址-&gt;%p\\n\"</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> vfTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tVFPTR f <span class=\"token operator\">=</span> vfTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tDerive d<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">PrintVFTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>VFPTR<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"---------------------\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintVFTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>VFPTR<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>d <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Base1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在多继承中，Derive类中会存在<strong>两个</strong>虚表指针，其模型如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b2b2d86e47e0482d8cf82fdbd3d9fc2c.png\"/><br/> 也就是说，在<code>d</code>对象中，包含两部分，一部分是从<code>Base1</code>中继承而来的，另一部分从<code>Base2</code>继承来的，<strong>并且多继承派生类的未重写的虚函数放在第一个继承基类部分的虚函数表中</strong>.</p>\n<p>运行上面的代码：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8dc4fe220e4f4c93a2ee4801c4cb22b2.png\"/></p>\n<p>其中<code>PrintVFTable((VFPTR*)(*(int*)((char*)&amp;d + sizeof(Base1))));</code>这句代码，其实是从<code>d</code>对象的起始地址处，跳过<code>Base1</code>部分，也就是跳转到<code>Base2</code>部分的起始地址处，从而打印<code>Base2</code>部分的虚表.</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9474235632d34b109602081a6b33a392.png\"/><br/> 由<code>Base2</code>虚表的打印结果我们也可以看到，<code>Base2</code>部分的虚函数<code>func1</code>也被<code>Derive::func1</code>重写.<br/> 由上述代码的运行结果也验证了我们的结论.</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}