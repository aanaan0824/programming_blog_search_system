{"blogid": "124565237", "writerAge": "码龄2年", "writerBlogNum": "66", "writerCollect": "1587", "writerComment": "2236", "writerFan": "7173", "writerGrade": "6级", "writerIntegral": "5859", "writerName": "bug 郭", "writerProfileAdress": "writer_image\\profile_124565237.jpg", "writerRankTotal": "2562", "writerRankWeekly": "1795", "writerThumb": "1810", "writerVisitNum": "49690", "blog_read_count": "1389", "blog_time": "已于 2022-05-23 16:01:38 修改", "blog_title": "多线程四大经典案例及java多线程的实现", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_1\">本节要点</a></li><li><a href=\"#_7\">单例模式</a></li><li><ul><li><a href=\"#_20\">饿汉模式</a></li><li><a href=\"#_51\">懒汉模式</a></li></ul>\n</li><li><a href=\"#_202\">阻塞队列</a></li><li><a href=\"#_212\">生产者消费者模型</a></li><li><ul><li><a href=\"#_232\">标准库中的就绪队列</a></li><li><a href=\"#_280\">阻塞队列实现</a></li></ul>\n</li><li><a href=\"#_430\">定时器</a></li><li><ul><li><a href=\"#_474\">定时器实现</a></li></ul>\n</li><li><a href=\"#_817\">线程池</a></li><li><ul><li><ul><li><a href=\"#_926\">实现线程池</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_1004\">案例总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>本节要点</h1>\n<ul><li>了解一些线程安全的案例</li><li>学习线程安全的设计模型</li><li>掌握单例模式,阻塞队列,生产在消费者模型</li></ul>\n<h1><a id=\"_7\"></a>单例模式</h1>\n<p>我们知道多线程编程,因为线程的随机调度会出现很多线程安全问题! 而我们的<code>java</code>有些大佬针对一些多线程安全问题的应用场景,设计了一些对应的解决方法和案例,就是解决这些问题的一些套路,被称为<code>设计模式</code>,供我们学习和使用!</p>\n<blockquote>\n<p>单例模式是校招最常考的一个设计模式之一!!!</p>\n</blockquote>\n<p><em>什么是单例模式呢?</em></p>\n<blockquote>\n<p>单例模式能保证某个类在程序中<code>只存在唯一一份实例</code>, 而不会创建出多个实例.<br/> 这一点在很多场景上都需要. 比如<code> JDBC</code> 中的<code> DataSource</code> 实例就只需要一个</p>\n</blockquote>\n<p>单例模式的具体实现方法又分为<code>饿汉</code>和<code>懒汉</code>两种!<br/> 而这里所说的<code>饿</code>和<code>懒</code>并不是贬义词!<br/> <code>饿汉</code>指的是在创建一个类的时候就将实例创建好!比较急!<br/> <code>懒汉</code>指的是在需要用到实例的时候再去创建实例!比较懒!</p>\n<h2><a id=\"_20\"></a>饿汉模式</h2>\n<p>饿汉模式联系实际生活中例子:<br/> 就是一个人性子比较急,也许一件事情的期限还有好久,而他却把事情早早干完!</p>\n<p>因为我们单例模式只能有一个实例<br/> <em>那如何去保证一个实例呢?</em><br/> 我们会马上想到类中用<code>static</code>修饰的类属性,它只有一份!保证了单例模式的基本条件!</p>\n<p>显然生活中这样的人很优秀,但是我们的计算机如果这样却不太好!<br/> 因为<code>cpu</code>和内存的空间有限,如果还不需要用到该实例,却创建了实例,那不就增加了内存开销,显然不科学.但事实问题也不大!</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//饿汉模式, static 创建类时,就创建好了类属性的实例!</span>\n    <span class=\"token comment\">//private 这里的instance实例只有一份!!!</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//私有的构造方法!保证该实例不能再创建</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//提供一个方法,外界可以获取到该实例!</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们可以看到这里饿汉模式,当多个线程并发时,并没有出现线程不安全问题,因为这里的设计模式只是针对了读操作!!! 而单例模式的更改操作,需要看懒汉模式!</p>\n<h2><a id=\"_51\"></a>懒汉模式</h2>\n<p>联系实际中的例子就是.就是这个人比较拖延,有些事情不得不做的时候,他才会去做完!</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//懒汉模式(线程不安全版本)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton1</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//懒汉模式, static 创建类时,并没有创建实例!</span>\n    <span class=\"token comment\">//private 保证这里的instance实例只有一份!!!</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//私有的构造方法!保证该实例不能再创建</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//提供一个方法,外界可以获取到该实例!</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//需要时再创建实例!</span>\n            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们分析一下上述代码,该模式,对<code>singleton</code>进行了修改,而我们知道多线程的修改可能会出现线程不安全问题!<br/> 当我们多个线程同时对该变量进行访问时!</p>\n<p>我们将该代码的情况分成两种,一种是初始化前要进行读写操作,初始化后只需要进行读操作!</p>\n<ul><li><code>instance</code>未初始化化前<br/> 多个线程同时进入<code>getInstance</code>方法!那就会创建很多次<code>instance</code>实例!<br/> 联系之前的变量更改<code>内存</code>和<code>cpu</code>的操作:<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1cd93bf82dc14986b83221d2174dc71e.png\"/><br/> 显然很多线程进行了无效操作!!!也会触发内存不可见问题!!!</li><li><code>instance</code>初始化后,进行的读操作,就像上面的饿汉模式一样,并没有线程安全问题!</li></ul>\n<p>我们下面进行多次优化</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//优化1</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//懒汉模式, static 创建类时,并没有创建实例!</span>\n    <span class=\"token comment\">//private 保证这里的instance实例只有一份!!!</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton2</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//私有的构造方法!保证该实例不能再创建</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//提供一个方法,外界可以获取到该实例!</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton2</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//对读写操作进行加锁!</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//需要时再创建实例!</span>\n                instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们将<code>Singleton</code>类对象加锁后,显然避免了刚刚的一些线程安全问题!但是出现了新的问题!</p>\n<ul><li><code>instance</code>初始化前<br/> 在初始化前,我们很好的将读写操作进行了原子封装,并不会造成线程不安全问题!</li><li><code>instance</code>初始化后<br/> 然而初始化后的每次读操作却并不好,当我们多个线程进行多操作时,很多线程就会造成线程阻塞,代码的运行效率极具下降!</li></ul>\n<p>我们如何保证,线程安全的情况下又保证读操作不会进行加锁,锁竞争呢?</p>\n<p>我们可以间代码的两种情况分别处理!</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//优化二</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//懒汉模式, static 创建类时,并没有创建实例!</span>\n    <span class=\"token comment\">//private 保证这里的instance实例只有一份!!!</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton2</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//私有的构造方法!保证该实例不能再创建</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//提供一个方法,外界可以获取到该实例!</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton2</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//如果未初始化就进行加锁操作!</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//对读写操作进行加锁!</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//需要时再创建实例!</span>\n                    instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//已经初始化后直接读!!!</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们看到这里可能会有疑惑,咋为啥要套两个<code>if</code>啊,把里面的<code>if</code>删除不行吗!!!<br/> 我们来看删除后的效果:</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//删除里层if</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//懒汉模式, static 创建类时,并没有创建实例!</span>\n    <span class=\"token comment\">//private 保证这里的instance实例只有一份!!!</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton2</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//私有的构造方法!保证该实例不能再创建</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//提供一个方法,外界可以获取到该实例!</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton2</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//如果未初始化就进行加锁操作!</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//对读写操作进行加锁!</span>\n                    instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//已经初始化后直接读!!!</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在删除里层的<code>if</code>后:<br/> 我们发现当有多个线程进行了第一个<code>if</code>判断后,进入的线程中有一个线程锁竞争拿到了锁!而其他线程就在这阻塞等待,直到该锁释放后,又有线程拿到了该锁,而这样也就多次创建了<code>instance</code>实例,显然不可!!!</p>\n<p>所以这里的两个<code>if</code>都有自己的作用缺一不可!<br/> 第一个<code>if</code>:<br/> 判断是否要进行加锁初始化<br/> 第二个<code>if</code>:<br/> 判断该线程实例是否已经创建!</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//最终优化版</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//懒汉模式, static 创建类时,并没有创建实例!</span>\n    <span class=\"token comment\">//private 保证这里的instance实例只有一份!!!</span>\n    <span class=\"token comment\">//volatile 保证内存可见!!!避免编译器优化!!!</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Singleton2</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//私有的构造方法!保证该实例不能再创建</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//提供一个方法,外界可以获取到该实例!</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton2</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//如果未初始化就进行加锁操作!</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//对读写操作进行加锁!</span>\n\t            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t                instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t            <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//已经初始化后直接读!!!</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>而我们又发现了一个问题,我们的编译器是会对代码进行优化操作的!如果很多线程对第一个<code>if</code>进行判断,那<code>cpu</code>老是在内存中拿<code>instance</code>的值,就很慢,编译器就不开心了,它就优化直接将该值存在寄存器中,而此操作是否危险,如果有一个线程将该实例创建!那就会导致线程安全问题! 而<code>volatile</code>关键字保证了<code>instanse</code>内存可见性!!!</p>\n<p><strong>总结懒汉模式</strong></p>\n<ul><li>双<code>if</code> 外层保证未初始化前加锁,创建实例. 里层<code>if</code>保证实例创建唯一一次</li><li><code>synchronized</code>加锁,保证读写原子性</li><li><code>volatile</code>保证内存可见性,避免编译器优化</li></ul>\n<h1><a id=\"_202\"></a>阻塞队列</h1>\n<p><em>什么是阻塞队列?</em><br/> 顾名思义是队列的一种!<br/> 也符合先进先出的特点!<br/> 阻塞队列特点:</p>\n<blockquote>\n<p>当队列为空时,读操作阻塞<br/> 当队列为满时,写操作阻塞</p>\n</blockquote>\n<p>阻塞队列一般用在多线程中!并且有很多的应用场景!<br/> 最典型的一个应用场景就是生产者消费者模型</p>\n<h1><a id=\"_212\"></a>生产者消费者模型</h1>\n<p>我们知道生产者和消费者有着供需关系!<br/> 而开发中很多场景都会有这样的供需关系!<br/> 比如有两个服务器<code>A</code>和<code>B</code><br/> <code>A</code>是入口服务器直接接受用户的网络请求<br/> <code>B</code>应用服务器对<code>A</code>进行数据提供</p>\n<p>在通常情况下如果一个网站的访问量不大,那么<code>A</code>和<code>B</code>服务器都能正常使用!<br/> 而我们知道,很多网站当很多用户进行同时访问时就可能挂!<br/> 我们知道,<code>A</code>入口服务器和<code>B</code>引用服务器此时耦合度较高!<br/> 当一个挂了,那么另一个服务器也会出现问题!<br/> <img alt=\"在这里插入图片描述\" src=\"image\\16b3d9d5e1cc4801b11386f68ee108ab.png\"/><br/> 而当我们使用生产者消费者模型就很好的解决了上述高度耦合问题!我们在他们中间加入一个阻塞队列即可!</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4cefe8b0eed14b97ae36a2dec22ea093.png\"/><br/> 当增加就绪队列后,我们就不用担心<code>A</code>和<code>B</code>的耦合!<br/> 并且<code>A</code>和<code>B</code>进行更改都不会影响到对方! 甚至将改变服务器,对方也无法察觉!<br/> 而阻塞队列还保证了,服务器的访问速度,不管用户量多大! 这些数据都会先传入阻塞队列,而阻塞队列如果满,或者空,都会线程阻塞! 也就不存在服务器爆了的问题!!!<br/> 也就是起到了削峰填谷的作用!不管访问量一时间多大!就绪队列都可以保证服务器的速度!</p>\n<h2><a id=\"_232\"></a>标准库中的就绪队列</h2>\n<p>我们<code>java</code>中提供了一组就绪队列供我们使用!</p>\n<blockquote>\n<p><code>BlockingQueue</code></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c89cbfb44b5f4211bb3c747cd0e29f0e.png\"/><br/> <code>BlockingQueue</code> 是一个接口. 真正实现的类是 <code>LinkedBlockingQueue</code>.<br/> <code>put </code>方法用于阻塞式的入队列,<br/> <code>take</code> 用于阻塞式的出队列.<br/> <code>BlockingQueue</code> 也有<code> offer</code>, <code>poll</code>, <code>peek</code> 等方法, 但是这些方法不带有阻塞特性.</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//生产着消费者模型</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test2</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//创建一个阻塞队列</span>\n        <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> blockingQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> customer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//消费者</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费元素: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"消费者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        customer<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//生产者</span>\n            <span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产元素: \"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    blockingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"生产者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        producer<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        customer<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        producer<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d5ef88f1abc94993a100a9b0efd40c24.png\"/></p>\n<h2><a id=\"_280\"></a>阻塞队列实现</h2>\n<p>虽然<code>java</code>标准库中提供了阻塞队列,但是我们想自己实现一个阻塞队列!</p>\n<p>我们就用循环队列实现吧,使用数组!</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//循环队列</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyblockingQueue</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//阻塞队列</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//队头</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//队尾</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//元素个数, 用于判断队列满</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//入队操作</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">==</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//队列满</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        data<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        tail<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//入队</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tail<span class=\"token operator\">==</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//判断是否需要循环回</span>\n            tail<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//入队成功加1</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//出队并且获取队头元素</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tail<span class=\"token operator\">==</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//队列为空!</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取队头元素</span>\n        start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//出队</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">==</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//判断是否要循环回来</span>\n            start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n       <span class=\"token comment\">// start = start % data.length;//不建议可读性不搞,效率也低</span>\n        size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//元素个数减一</span>\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\77492dff55f04406a89c9bd3a66b0da2.png\"/><br/> 我们已经创建好了一个循环队列,目前达不到阻塞的效果!<br/> 而且当多线程并发时有很多线程不安全问题!<br/> 而我们知道想要阻塞,那不得加锁,不然哪来的阻塞!</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//阻塞队列</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyblockingQueue</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//阻塞队列</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//队头</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//队尾</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//元素个数, 用于判断队列满</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//锁对象</span>\n    <span class=\"token class-name\">Object</span> locker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>locker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//对该操作加锁</span>\n           <span class=\"token comment\">//入队操作</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">==</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token comment\">//队列满 阻塞等待!!!直到put操作后notify才会继续执行</span>\n               <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                   locker<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                   e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span>\n           <span class=\"token punctuation\">}</span>\n           data<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n           tail<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//入队</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tail<span class=\"token operator\">==</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token comment\">//判断是否需要循环回</span>\n               tail<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n           size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//入队成功加1</span>\n           <span class=\"token comment\">//入队成功后通知take 如果take阻塞</span>\n           locker<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这个操作线程阻塞并没有副作用!</span>\n       <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//出队并且获取队头元素</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>locker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//队列为空!阻塞等待 知道队列有元素put就会继续执行该线程</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    locker<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取队头元素</span>\n            start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//出队</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">==</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//判断是否要循环回来</span>\n                start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// start = start % data.length;//不建议可读性不搞,效率也低</span>\n            size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//元素个数减一</span>\n            locker<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//通知 put 如果put阻塞!</span>\n            <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//测试代码</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test3</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">MyblockingQueue</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyblockingQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Thread</span> customer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费了\"</span><span class=\"token operator\">+</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token class-name\">Thread</span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产了\"</span><span class=\"token operator\">+</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            queue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    customer<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    producer<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5a7e4617803848f080b758155b05afe1.png\"/><br/> 可以看到通过<code>wait</code>和<code>notify</code>的配和,我就实现了阻塞队列!!!</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3ac6fad4ea1c4fb9866d49821f1f359c.png\"/></p>\n<h1><a id=\"_430\"></a>定时器</h1>\n<p><em>定时器是什么</em></p>\n<blockquote>\n<p>定时器也是软件开发中的一个重要组件. 类似于一个 “闹钟”. 达到一个设定的时间之后, 就执行某个指定好的代码.</p>\n</blockquote>\n<p>也就是说定时器有像<code>join</code>和<code>sleep</code>等待功能,不过他们是基于系统内部的定时器,<br/> 而我们要学习的是在<code>java</code>给我们提供的定时器包装类,用于到了指定时间就执行代码!<br/> 并且定时器在我们日常开发中十分常用!</p>\n<p><code>java</code>给我们提供了专门一个定时器的封装类<code>Timer</code>在<code>java.util</code>包下!</p>\n<blockquote>\n<p><code>Timer</code>定时器</p>\n</blockquote>\n<p><code>Timer</code>类下有一个<code>schedule</code>方法,用于安排指定的任务和执行时间!<br/> 也就达到了定时的效果,如果时间到了,就会执行<code>task</code>!<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2235a30273704d3eacd2828fe9929051.png\"/></p>\n<ul><li><code>schedule </code>包含两个参数.</li><li>第一个参数指定即将要执行的任务代码,</li><li>第二个参数指定多长时间之后执行 (单位为毫秒).</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//实例</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Timer</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimerTask</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//在java.util.Timer包下</span>\n        <span class=\"token class-name\">Timer</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//timer.schedule()方法传入需要执行的任务和定时时间</span>\n        <span class=\"token comment\">//Timer内部有专门的线程负责任务的注册,所以不需要start</span>\n        timer<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TimerTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello Timer!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//main线程</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello main!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\cd97ce03ea8a47efa60fd5e0e85ee8c4.png\"/><br/> 我们可以看到我们只需要创建一个<code>Timer</code>对象,然后调用<code>schedule</code>返回,传入你要执行的任务,和定时时间便可完成!</p>\n<h2><a id=\"_474\"></a>定时器实现</h2>\n<p>我们居然知道<code>java</code>中定时器的使用,那如何自己实现一个定时器呢!</p>\n<p>我们可以通过<code>Timer</code>中的源码,然后进行操作!</p>\n<p><em><code>Timer</code>内部需要什么东西呢!</em></p>\n<p>我们想想<code>Timer</code>的功能!<br/> 可以定时执行任务!(线程)<br/> 可以知道任务啥时候执行(时间)<br/> 可以将多个任务组织起来对比时间执行</p>\n<ul><li>描述任务<br/> 也就是<code>schedule</code>方法中传入的<code>TimerTake</code><br/> 创建一个专门表示定时器中的任务</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//任务具体要干啥</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//任务执行时间,时间戳</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> time<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">///delay是一个时间间隔</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>runnable <span class=\"token operator\">=</span> runnable<span class=\"token punctuation\">;</span>\n            time <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>delay<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//描述任务!</span>\n        runnable<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li> <p>组织任务<br/> 组织任务就是将上述的任务组织起来!<br/> 我们知道我们的任务需要在多线程的环境下执行,所以就需要有线程安全,阻塞功能的数据结构!并且我们的任务到了时间就需要执行,也就是需要时刻对任务排序!<br/> 所以我们采用<code>PriorityBlockingQueue</code>优先级队列!阻塞!<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0abf85ed3bd548a3b9496545a0218559.png\"/><br/> 但是这里我们使用了优先级队列,我们需要指定比较规则,就是让<code>MyTask</code>实现<code>Comparable</code>接口,重写<code> compareTo</code>方法,指定升序排序,就是小根堆!<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f2276a0e31bd4eecacd0395b387231b5.png\"/></p> </li><li> <p>执行时间到了的任务<br/> 我们可以创建一个线程,执行时间到了的任务!</p> </li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//执行时间到了的任务!</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                   <span class=\"token class-name\">MyTask</span> task <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取到队首任务</span>\n                   <span class=\"token comment\">//比较时间是否到了</span>\n                   <span class=\"token comment\">//获取当前时间戳</span>\n                   <span class=\"token keyword\">long</span> curTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curTime<span class=\"token operator\">&lt;</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//当前时间戳和该任务需要执行的时间比较</span>\n                       <span class=\"token comment\">//还未到达执行时间</span>\n                       queue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将任务放回</span>\n                   <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//时间到了,执行任务</span>\n                       task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">}</span>\n               <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                   e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span>\n           <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//启动线程!</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//定时器完整代码</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PriorityBlockingQueue</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTask</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//任务具体要干啥</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> time<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//任务执行时间,时间戳</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> time<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">///delay是一个时间间隔</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>runnable <span class=\"token operator\">=</span> runnable<span class=\"token punctuation\">;</span>\n            time <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>delay<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//描述任务!</span>\n        runnable<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyTask</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>time <span class=\"token operator\">-</span> o<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTimer</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//定时器内部需要存放多个任务</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PriorityBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">&gt;</span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">MyTask</span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//接收一个任务!</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将任务组织起来</span>\n    <span class=\"token punctuation\">}</span>\n   <span class=\"token comment\">//执行时间到了的任务!</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                   <span class=\"token class-name\">MyTask</span> task <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取到队首任务</span>\n                   <span class=\"token comment\">//比较时间是否到了</span>\n                   <span class=\"token comment\">//获取当前时间戳</span>\n                   <span class=\"token keyword\">long</span> curTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curTime<span class=\"token operator\">&lt;</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//当前时间戳和该任务需要执行的时间比较</span>\n                       <span class=\"token comment\">//还未到达执行时间</span>\n                       queue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将任务放回</span>\n                   <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//时间到了,执行任务</span>\n                       task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">}</span>\n               <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                   e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span>\n           <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//启动线程!</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//测试</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">MyTimer</span> myTimer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myTimer<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello Timer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello main\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\956212b1e8a7460db91def9ce519e46f.png\"/><br/> 我们再来检查一下下面代码存在的问题!</p>\n<pre><code class=\"prism language-java\"> <span class=\"token comment\">//执行时间到了的任务!</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                   <span class=\"token class-name\">MyTask</span> task <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取到队首任务</span>\n                   <span class=\"token comment\">//比较时间是否到了</span>\n                   <span class=\"token comment\">//获取当前时间戳</span>\n                   <span class=\"token keyword\">long</span> curTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curTime<span class=\"token operator\">&lt;</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//当前时间戳和该任务需要执行的时间比较</span>\n                       <span class=\"token comment\">//还未到达执行时间</span>\n                       queue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将任务放回</span>\n                   <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//时间到了,执行任务</span>\n                       task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">}</span>\n               <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                   e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span>\n           <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//启动线程!</span>\n    <span class=\"token punctuation\">}</span>\n \n</code></pre>\n<p>我们上述代码还存在一定缺陷就是执行线程到了的代码,我们的<code>while</code>循环一直在处于忙等状态!<br/> 就好比生活中:<br/> 你9点要去做核酸,然后你过一会就看时间,一会就看时间,感觉就有啥大病一样!<br/> 所以我们可以定一个闹钟,到了时间就去,没到时间可以干其他的事情!<br/> 此处的线程也是如此!我们这里也可以使用<code>wait</code>阻塞! 然后到了时间就唤醒,就解决了忙等问题!<br/> 我们的<code>wait</code>可以传入指定的时间,到了该时间就唤醒!!!</p>\n<p>我们再思考另一个问题!</p>\n<p><em>如果又加入了新的任务呢?</em><br/> 我们此时也需要唤醒一下线程,让线程重新拿到队首元素!</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//最终定时器代码!!!!</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PriorityBlockingQueue</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTask</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//任务具体要干啥</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> time<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//任务执行时间,时间戳</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> time<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">///delay是一个时间间隔</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>runnable <span class=\"token operator\">=</span> runnable<span class=\"token punctuation\">;</span>\n            time <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>delay<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//描述任务!</span>\n        runnable<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyTask</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>time <span class=\"token operator\">-</span> o<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTimer</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//定时器内部需要存放多个任务</span>\n    <span class=\"token class-name\">Object</span> locker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//锁对象</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PriorityBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">&gt;</span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">MyTask</span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//接收一个任务!</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将任务组织起来</span>\n\n        <span class=\"token comment\">//每次拿到新的任务就需要唤醒线程,重新得到新的队首元素!</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>locker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            locker<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n   <span class=\"token comment\">//执行时间到了的任务!</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                   <span class=\"token class-name\">MyTask</span> task <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取到队首任务</span>\n                   <span class=\"token comment\">//比较时间是否到了</span>\n                   <span class=\"token comment\">//获取当前时间戳</span>\n                   <span class=\"token keyword\">long</span> curTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curTime<span class=\"token operator\">&lt;</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//当前时间戳和该任务需要执行的时间比较</span>\n                       <span class=\"token comment\">//还未到达执行时间</span>\n                       queue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将任务放回</span>\n                       <span class=\"token comment\">//阻塞到该时间唤醒!</span>\n                       <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>locker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                           locker<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>curTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       <span class=\"token punctuation\">}</span>\n                   <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//时间到了,执行任务</span>\n                       task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">}</span>\n               <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                   e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span>\n           <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//启动线程!</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>总结:</strong></p>\n<ul><li>描述一个任务 <code>runnable + time</code></li><li>使用优先级队列组织任务<code>PriorityBlockingQueue</code></li><li>实现<code>schedule</code>方法来注册任务到队列</li><li>创建扫描线程,获取队首元素,判断是否执行</li><li>注意这里的忙等问题</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//最后梳理一遍</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PriorityBlockingQueue</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * Created with IntelliJ IDEA.\n * Description:定时器\n * User: hold on\n * Date: 2022-04-09\n * Time: 16:07\n */</span>\n<span class=\"token comment\">//1.描述任务</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Task</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Task</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//任务</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//执行时间</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> time<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>runnable <span class=\"token operator\">=</span> runnable<span class=\"token punctuation\">;</span><span class=\"token comment\">//传入任务</span>\n        <span class=\"token comment\">//获取任务需要执行的时间戳</span>\n        time <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> delay<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Task</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//指定比较方法!</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>time<span class=\"token operator\">-</span>o<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//传出任务时间</span>\n        <span class=\"token keyword\">return</span> time<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        runnable<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//组织任务</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTimer1</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> locker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//锁对象</span>\n    <span class=\"token comment\">//用于组织任务</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PriorityBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Task</span><span class=\"token punctuation\">&gt;</span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Task</span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//传入队列中</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>locker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            locker<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//唤醒线程</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyTimer1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//扫描线程获取队首元素,判断执行</span>\n        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token comment\">//获取当前时间戳</span>\n               <span class=\"token keyword\">long</span> curTimer <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                   <span class=\"token class-name\">Task</span> task <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//队首元素出队</span>\n                   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curTimer<span class=\"token operator\">&lt;</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                       <span class=\"token comment\">//还未到达执行时间,返回队首元素</span>\n                       queue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>locker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                           <span class=\"token comment\">//阻塞等待</span>\n                           locker<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>curTimer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       <span class=\"token punctuation\">}</span>\n                   <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                       <span class=\"token comment\">//执行任务</span>\n                       task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">}</span>\n               <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                   e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span>\n           <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//启动线程</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">MyTimer1</span> myTimer1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTimer1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myTimer1<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello Timer1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello main\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_817\"></a>线程池</h1>\n<p>我们之前学过常量池!这里的线程池也大同小异!<br/> 我们通过创建很多个线程放在一块空间不进行销毁,等到需要的时候就启动线程!避免了创建销毁的时间开销! 提高开发效率!<br/> 我们之前不是说一个线程创建并不会划分很多时间吗! 但是我们的多线程编程,有时候需要使用到很多很多线程,如果要进行创建,效率就不高,而线程池或者协程(我们后面会介绍)就避免了创建销毁线程! 但我们需要用到线程时,自己从线程池中给出就好!</p>\n<p>我们创建线程的本质还是要通过内核态(就是我们的操作系统)进行创建,然而内核态创建的时间,我们程序员无法掌控,而通过线程池,我们就可以避免了内核态的操作,直接在用户态,进行线程的调用,也就是应用程序层!<br/> <img alt=\"在这里插入图片描述\" src=\"image\\cd048009b2e94e1ead24dd466f7bfc16.png\"/><br/> 使用线程池大大提高了我们的开发效率!</p>\n<p>我们来学习一下<code>java</code>中给我们提供的线程池类,然后自己实现一个线程池!</p>\n<blockquote>\n<p><code>ThreadPoolExecutor</code> 线程池</p>\n</blockquote>\n<p>这个类在<code>java.util.concurrent </code>并发编程包下,我们用到的很多关于并发编程的类都在!</p>\n<p>可以看到这个线程池有4个构造方法!</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\dd7be96ff4da4e63b1a3ea59eef0a61e.png\"/>我们了解一下参数最多的那个方法!</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">int</span> maximumPoolSize<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">long</span> keepAliveTime<span class=\"token punctuation\">,</span>\n                          <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span>\n                          <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&gt;</span></span> workQueue<span class=\"token punctuation\">,</span>\n                          <span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">,</span>\n                          <span class=\"token class-name\">RejectedExecutionHandler</span> handler<span class=\"token punctuation\">)</span>\n\n创建一个新的 <span class=\"token class-name\">ThreadPoolExecutor</span>与给定的初始参数。\n\n参数\n    corePoolSize <span class=\"token operator\">-</span> 即使空闲时仍保留在池中的线程数，除非设置 allowCoreThreadTimeOut \n    maximumPoolSize <span class=\"token operator\">-</span> 池中允许的最大线程数 \n    keepAliveTime <span class=\"token operator\">-</span> 当线程数大于内核时，这是多余的空闲线程在终止前等待新任务的最大时间。 \n    unit <span class=\"token operator\">-</span> keepAliveTime参数的时间单位 \n    workQueue <span class=\"token operator\">-</span> 用于在执行任务之前使用的队列。 这个队列将仅保存execute方法提交的<span class=\"token class-name\">Runnable</span>任务。 \n    threadFactory <span class=\"token operator\">-</span> 执行程序创建新线程时使用的工厂 \n    handler <span class=\"token operator\">-</span> 执行被阻止时使用的处理程序，因为达到线程限制和队列容量 \n</code></pre>\n<p>我们这里的线程池类比一个公司,便于我们理解该类</p>\n<ul><li><code>int maximumPoolSize,</code><br/> 核心线程数(正式员工)</li><li><code>maximumPoolSize</code><br/> 池中允许的最大线程数(正式员工+临时工)</li><li><code> long keepAliveTime,</code><br/> 多余的空闲线程的允许等待的最大时间(临时工摸鱼时间)</li><li><code>TimeUnit unit,</code><br/> 时间单位<br/> -<code> BlockingQueue&lt;Runnable&gt; workQueue,</code><br/> 任务队列,该类中用一个<code>submit</code>方法,用于将任务注册到线程池,加入到任务队列中!</li><li><code>ThreadFactory threadFactory,</code><br/> 线程工厂,线程是如何创建的</li><li><code> RejectedExecutionHandler handler</code><br/> 拒绝策略<br/> 但任务队列满了后怎么做<br/> 1.阻塞等待,<br/> 2.丢弃久任务<br/> 3.忽略新任务<br/> …</li></ul>\n<p>可以看到<code>java</code>给我们提供的这个线程池类让人头大!<br/> 但是不必焦虑,我们只需要知道<code>int maximumPoolSize,</code><br/> 核心线程数和 <code>maximumPoolSize</code> 池中允许的最大线程数即可!<br/> <strong>面试问题</strong><br/> 思考一个问题<br/> <em>我们有一个程序需要多线程并发处理一些任务,使用线程池的话,需要设置多大的线程数?</em><br/> 这里的话,我们无法准确的给出一个数值,我们要通过性能测试的方式找个一个平衡点!</p>\n<blockquote>\n<p>例如我们写一个服务器程序:服务器通过线程池多线程处理机用户请求!如果要确定线程池的线程数的话,就需要通过对该服务器进行性能分析,构造很多很多请求模拟真实环境,根据这里不同的线程数,来观察处理任务的速度和当个线程的<code>cpu</code>占用率!从而找到一个平衡点!<br/> 如果<code>cpu</code>暂用率过高,就无法应对一些突发情况,服务器容易挂!</p>\n</blockquote>\n<p>我们<code>java</code>根据上面的<code>ThreadPoolExecutor</code>类进行封装提供了一个简化版本的线程池!<code>Executors</code>供我们使用!<br/> 我们通过<code>Executors</code>的使用学习,实现一个线程池!</p>\n<blockquote>\n<p><code>Executors</code></p>\n</blockquote>\n<p><code>java.util.concurrent.Executors</code></p>\n<p>下面都是<code>Executor</code>类中创建线程池的一些静态方法</p>\n<p>创建可以扩容的线程池</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9744adbdfe7f416a9f76787e92709297.png\"/>创建一个指定容量的线程池<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2fb5d31a80cf4134b48bfa54840f919e.png\"/>创建单线程池<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6bed712997a9440b9b8027ee828aa183.png\"/>创建一个线程池含有任务队列<br/> <img alt=\"在这里插入图片描述\" src=\"image\\28327903f2dd49b18fa94dae2fc4aaf7.png\"/><br/> 我们重点学习创建指定大小得到线程池方法!</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//Executors使用案例</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo3</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//创建一个指定线程个数为10的线程池</span>\n        <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> finalI <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            executorService<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello executor!\"</span><span class=\"token operator\">+</span> finalI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\94080c84d6734d55b2dfcea131753c73.png\"/><br/> 我们通过<code>ExecutorService</code>类中的<code>submit</code>可以将多个任务注册到线程池中,然后线程池中的线程将任务并发执行,大大提升了编程效率!可以看到,啪的一下,100个任务给10个线程一下就执行结束了!</p>\n<h3><a id=\"_926\"></a>实现线程池</h3>\n<p>我们还是分析一下线程池用什么功能,里面都有些啥!</p>\n<ul><li>能够描述任务(直接用<code>runnable</code>)</li><li>需要组织任务(使用<code>BlockingQueue</code>)</li><li>能够描述工作线程</li><li>组织线程</li><li>需要实现往线程池里添加任务</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//模拟实现线程池</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPool</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//描述任务 直接使用Runnable</span>\n    <span class=\"token comment\">//组织任务</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&gt;</span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//描述工作线程</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Worker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//继承Thread类</span>\n        <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&gt;</span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//拿到任务</span>\n                    <span class=\"token class-name\">Runnable</span> runnable <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//执行任务</span>\n                    runnable<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//通过构造方法拿到外面的任务队列!</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&gt;</span></span> queue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//组织多个工作线程</span>\n    <span class=\"token comment\">//将多个工作线程放入到workers中!</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">&gt;</span></span>workers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//指定放入线程数量</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//创建多个工作线程</span>\n            <span class=\"token class-name\">Worker</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            worker<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//启动工作线程</span>\n            workers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//放入线程池</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//创建一个方法供我们放入任务</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//测试代码</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> demo5 <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//线程池线程数量10</span>\n        <span class=\"token class-name\">ThreadPool</span> pool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span><span class=\"token number\">100</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//100个任务</span>\n            <span class=\"token keyword\">int</span> finalI <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            pool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello ThreadPool \"</span><span class=\"token operator\">+</span> finalI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行效果<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c1e40a2377654aa6a38e4af31bb64cf9.png\"/></p>\n<h1><a id=\"_1004\"></a>案例总结</h1>\n<ul><li>线程安全单例模式</li><li>阻塞队列-&gt;生产着消费者模型</li><li>定时器</li></ul>\n<ol><li>MyTask类描述一个任务 Runnable + time</li><li>带有优先级的阻塞队列</li><li>扫描线程,不停从队首取出元素,检测时间是否到达,并且执行任务,使用<code>wait</code>解决忙等位问题!</li><li>实现<code>schedule</code>方法</li></ol>\n<ul><li>线程池</li></ul>\n<ol><li>描述一个任务<code>Runnable</code></li><li>组织任务,带有优先级的阻塞队列</li><li>创建一个工作线程<code>work类</code>,从任务队列获取任务,执行任务</li><li>组织工作线程<code>works</code>数据结构存放<code>work</code></li><li>实现一个<code>submit</code>方法将任务放入任务队列中!</li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}