{"blogid": "124407203", "writerAge": "码龄6年", "writerBlogNum": "15", "writerCollect": "68", "writerComment": "9", "writerFan": "12", "writerGrade": "2级", "writerIntegral": "175", "writerName": "全能哆来梦", "writerProfileAdress": "writer_image\\profile_124407203.jpg", "writerRankTotal": "75731", "writerRankWeekly": "165714", "writerThumb": "15", "writerVisitNum": "16257", "blog_read_count": "1412", "blog_time": "已于 2022-04-26 17:04:22 修改", "blog_title": "EFCore 从入门到精通-3（模型创建)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><ul><li><ul><li><a href=\"#1_3\">1.准备条件</a></li><li><a href=\"#2EFCore_10\">2.EFCore的使用流程</a></li><li><a href=\"#3DBContext_18\">3.DBContext中的配置</a></li><li><ul><li><a href=\"#31_OnConfiguring_47\">3.1 OnConfiguring</a></li><li><a href=\"#32_OnModelCreating_86\">3.2 OnModelCreating</a></li></ul>\n</li><li><a href=\"#4FluentAPI_112\">4.实体配置之FluentAPI</a></li><li><a href=\"#5_194\">5.实体配置之数据注解</a></li><li><a href=\"#6_223\">6.对比总结</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h3><a id=\"1_3\"></a>1.准备条件</h3>\n<pre><code>\t开发软件：VisualStudio2022，EFCore6.0\n\t.net Core版本：.Net6.0\n\t数据库：mysql8.0\n\t数据库管理软件：Navicat\n</code></pre>\n<h3><a id=\"2EFCore_10\"></a>2.EFCore的使用流程</h3>\n<p>通过前面的描述我们来总结下，使用EFCore（CodeFirst）的基本流程：</p>\n<ul><li>创建 DbContext 实例 根据上下文跟踪实体实例。</li><li>创建 实体模型，在DbContext 实例类中添加DbSet&lt;实体&gt;属性。</li><li>根据业务需求进行增删改查， 调用 SaveChanges 或 SaveChangesAsync，将更改应用到数据库</li></ul>\n<h3><a id=\"3DBContext_18\"></a>3.DBContext中的配置</h3>\n<p>前面已经说过，除非你的数据库已经存在，否则不推荐使用反向工程来通过数据库创建模型，一般推荐使用<strong>CodeFirst</strong>模式，即代码先行的原则。<br/> 在DBContext类中，最重要，也是我们最常用的两个方法就是：<br/> \"<strong>OnConfiguring</strong>\"和 “<strong>OnModelCreating</strong>” 如下：</p>\n<pre><code class=\"prism language-csharp\">     <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnConfiguring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DbContextOptionsBuilder</span> optionsBuilder<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>optionsBuilder<span class=\"token punctuation\">.</span>IsConfigured<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n\n                optionsBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">UseMySql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server=172.10.14.144;database=EFCoreLearn;user=root;password=123456\"</span><span class=\"token punctuation\">,</span> Microsoft<span class=\"token punctuation\">.</span>EntityFrameworkCore<span class=\"token punctuation\">.</span>ServerVersion<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"8.0.28-mysql\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnModelCreating</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ModelBuilder</span> modelBuilder<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            modelBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">UseCollation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf8_general_ci\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">HasCharSet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            modelBuilder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Entity</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Student<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>entity <span class=\"token operator\">=&gt;</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                entity<span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=&gt;</span> e<span class=\"token punctuation\">.</span>Class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                entity<span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=&gt;</span> e<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">OnModelCreatingPartial</span><span class=\"token punctuation\">(</span>modelBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"31_OnConfiguring_47\"></a>3.1 OnConfiguring</h4>\n<p>在创建自己的DbContext子类时，重写此方法可以自己进行数据库的配置，以及其他选项的配置。其中主要有以下常用的配置：</p>\n<ul><li>配置连接字符串</li><li>配置输出的Logger</li><li>配置过滤和拦截操作</li><li>禁用和启用并发</li></ul>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnConfiguring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DbContextOptionsBuilder</span> optionsBuilder<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>optionsBuilder<span class=\"token punctuation\">.</span>IsConfigured<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n\n                optionsBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">UseMySql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server=172.10.14.144;database=EFCoreLearn;user=root;password=123456\"</span><span class=\"token punctuation\">,</span> Microsoft<span class=\"token punctuation\">.</span>EntityFrameworkCore<span class=\"token punctuation\">.</span>ServerVersion<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"8.0.28-mysql\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                optionsBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">LogTo</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//日志输出到控制台</span>\n                optionsBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AddInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SoftDeleteInterception</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//添加拦截器软删除</span>\n\n                optionsBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">EnableThreadSafetyChecks</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//关闭并安全检测</span>\n\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>过滤拦截配置，是在数据库连接的时候，执行命令的时候，或者保存的时候执行的一些特所的操作，一般要实现继承以下几个类实现自己的定义操作：</p>\n<p>抽型类</p>\n<ul><li>DbConnectionInterceptor —数据库连接的时候进行一些操作</li><li>DbTransactionInterceptor —数据库执行时候的时候进行一些操作</li><li>DbCommandInterceptor —数据库执行命令的时候进行一些操作</li><li>SaveChangesInterceptor —数据库保存的时候进行一些操作<br/> 以下为相同含义的接口</li><li>IDbCommandInterceptor</li><li>IDbConnectionInterceptor</li><li>IDbTransactionInterceptor</li><li>ISaveChangesInterceptor</li></ul>\n<h4><a id=\"32_OnModelCreating_86\"></a>3.2 OnModelCreating</h4>\n<p>重写此方法，可以对实体类也可以说是数据表进行模型配置。<br/> 模型配置主要分为两种方法：</p>\n<ul><li>FluentAPI</li><li>数据注解</li></ul>\n<p>在OnModelCreating里使用的是fluentAPI</p>\n<pre><code class=\"prism language-csharp\">  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnModelCreating</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ModelBuilder</span> modelBuilder<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            modelBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">UseCollation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf8_general_ci\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">HasCharSet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            modelBuilder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Entity</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Student<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>entity <span class=\"token operator\">=&gt;</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                entity<span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=&gt;</span> e<span class=\"token punctuation\">.</span>Class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                entity<span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=&gt;</span> e<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"4FluentAPI_112\"></a>4.实体配置之FluentAPI</h3>\n<p>采用FluentAPI配置实体类，或者说对实体进行设置。有两种方式，第一种方式是通过上面介绍的在OnModelCreating里进行配置。除此之外，如果数据库有很多表，对应的实体也很多，那么都写在OnModelCreating方法里将会造成代码很多，不方便阅读。<br/> 所以，还有第二种方法进行配置，那就是创建实现了<strong>IEntityTypeconfiguration</strong>接口的实体类。然后再在OnModelCreating方法里添加如下方法：<br/> <strong>modelBuilder.ApplyConfigurationsFromAssembly(this.GetType().Assembly);</strong></p>\n<p>下面新建一个新的控制台程序，按照前面的步骤，安装Nuget包，新建一个EFLearnDbcontext类,然后新建一个实体类Student</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">long</span></span> Id <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Class <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Age <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Sex <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>新建一个学生配置配置类：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StudentConfig</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEntityTypeConfiguration<span class=\"token punctuation\">&lt;</span>Student<span class=\"token punctuation\">&gt;</span></span></span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EntityTypeBuilder<span class=\"token punctuation\">&lt;</span>Student<span class=\"token punctuation\">&gt;</span></span> builder<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n\n            builder<span class=\"token punctuation\">.</span><span class=\"token function\">HasKey</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//设置主键</span>\n\n            builder<span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ValueGeneratedOnAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置Id自增</span>\n\n            <span class=\"token comment\">//设置姓名最大长度为50，字符为unicode,不能为空</span>\n            builder<span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">=&gt;</span>x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsUnicode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsRequired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">//设置班级最大长度为50，字符为unicode,不能为空</span>\n            builder<span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">=&gt;</span>x<span class=\"token punctuation\">.</span>Class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsUnicode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsRequired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//设置性别最大长度为5 字符为Unicode，不能为空</span>\n            builder<span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">=&gt;</span>x<span class=\"token punctuation\">.</span>Sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsUnicode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsRequired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在EFLearnDbContext中的OnModelCreating里添加下面的代码</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnModelCreating</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ModelBuilder</span> modelBuilder<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>     \n        modelBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyConfigurationsFromAssembly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最后进行迁移。可以看到新建的数据库如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\cd0824acfc084300b6d72c0fdf589108.png\"/><br/> 可以看到代码生成的数据库表和我们自己在代码配置的是一致的。</p>\n<p><strong>当然如果不建立单独的配置类，可以在OnModelCreating方法里添加如下代码，也可以实现一样的功能。</strong></p>\n<pre><code class=\"prism language-csharp\">  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnModelCreating</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ModelBuilder</span> modelBuilder<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n\n            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> Student配置</span>\n            modelBuilder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Entity</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Student<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasKey</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">=&gt;</span>x<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//设置主键</span>\n\n            modelBuilder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Entity</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Student<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ValueGeneratedOnAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置Id自增</span>\n\n            <span class=\"token comment\">//设置姓名最大长度为50，字符为unicode,不能为空</span>\n            modelBuilder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Entity</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Student<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsUnicode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsRequired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//设置班级最大长度为50，字符为unicode,不能为空</span>\n            modelBuilder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Entity</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Student<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">.</span>Class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsUnicode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsRequired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//设置性别最大长度为5 字符为Unicode，不能为空</span>\n            modelBuilder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Entity</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Student<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">.</span>Sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsUnicode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsRequired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//modelBuilder.ApplyConfigurationsFromAssembly(this.GetType().Assembly);</span>\n            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"5_194\"></a>5.实体配置之数据注解</h3>\n<p>除了上述方法还有一种更简单的方法用来配置实体类，就是在类上直接配置。</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Key</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">long</span></span> Id <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MaxLength</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Unicode</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Required</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MaxLength</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Unicode</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Required</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Class <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Age <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MaxLength</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Unicode</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Required</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Sex <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"6_223\"></a>6.对比总结</h3>\n<p>上述方法中的两种约定配置，可以混用，但是不推荐。<br/> <strong>数据注解的方式 优点：简单方便；缺点：耦合性太高；</strong><br/> <strong>FluentAPI 优点：解耦; 缺点： 编写复杂</strong></p>\n<p>Entity Framework Core Fluent API配置了模型的以下方面：</p>\n<p><strong>表和列的配置</strong></p>\n<p>EFCore默认采用和类一样的名称创建表名字，按照类的属性名称创建表中列的名称，如果需要不同的名称，可以采用下面的方法。</p>\n<ul><li>表名称</li></ul>\n<pre><code class=\"prism language-csharp\"> <span class=\"token comment\">//注解方法</span>\n <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Table</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Student\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NewStudent</span>  <span class=\"token comment\">//NewStudent 对应着 Student表</span>\n <span class=\"token comment\">//FluentAPI方法</span>\n modelBuilder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Entity</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>NewStudent<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToTable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>列名称</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//数据注解</span>\n  <span class=\"token punctuation\">[</span><span class=\"token function\">Column</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Gender\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsFemale <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//FluentAPI</span>\n  modelBuilder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Entity</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>NewStudent<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=&gt;</span> s<span class=\"token punctuation\">.</span>IsFemale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasColumnName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Gender\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>列注释 可以对数据库列设置任意文本注释</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//注解方法</span>\n<span class=\"token punctuation\">[</span><span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生学号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Id<span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//FluentAPI</span>\n modelBuilder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Entity</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Student<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=&gt;</span> b<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span>\n        \t <span class=\"token punctuation\">.</span><span class=\"token function\">HasComment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生学号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>列顺序<br/> 默认情况下，在使用迁移创建表时，EF Core 首先为主键列排序，然后为实体类型和从属类型的属性排序，最后为基类型中的属性排序。 但是，你可以指定不同的列顺序</li></ul>\n<pre><code class=\"prism language-csharp\">    <span class=\"token comment\">//注解方法</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Column</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Order <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Id <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Column</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Order <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Name<span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//FluentAPI</span>\n    modelBuilder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Entity</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Employee<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=&gt;</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        x<span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=&gt;</span> b<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">HasColumnOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        x<span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=&gt;</span> b<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">HasColumnOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>列类型</li></ul>\n<pre><code class=\"prism language-csharp\">\t<span class=\"token function\">HasColumnType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"varchar(200)\"</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">/</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Column</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>TypeName <span class=\"token operator\">=</span> <span class=\"token string\">\"varchar(200)\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>约束性配置</strong></p>\n<ul><li>最大长度 字符串或者数组类型最大的长度</li></ul>\n<pre><code class=\"prism language-csharp\">  <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MaxLength</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token function\">HasMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>精度和小数位数</li></ul>\n<pre><code class=\"prism language-csharp\"> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Precision</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token function\">HasPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>Unicode 在某些关系数据库中，存在不同的类型来表示 Unicode 和非 Unicode 文本数据</li></ul>\n<pre><code class=\"prism language-csharp\"> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Unicode</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token function\">IsUnicode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>必需和可选属性<br/> 配置字段是否为可空null,如果隐式的使用了C#的可空类型，可以不用配置。<br/> 在.NET 类型不能包含 null 的属性将配置为必需属性。 例如，将具有 .NET 值类型的所有属性 (int,decimal,bool、) 等等) 配置为必需，并且所有具有可为 null 的 .NET 值类型 (int?decimal?等bool?属性都配置为可选。<br/> 下面的方式是显性配置</li></ul>\n<pre><code class=\"prism language-csharp\">  <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Required</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token function\">IsRequired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>忽略</li></ul>\n<pre><code class=\"prism language-csharp\">   <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">NotMapped</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">Ignore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//标记模型某个属性可以使该属性不必映射到数据库。</span>\n</code></pre>\n<p><strong>键配置</strong><br/> 在EFCore约定中没有显示的指定键，那么默认名为 类名+Id结尾 的属性将被配置为实体的主键。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Key</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token function\">HasKey</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=&gt;</span> c<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>组合键 多个属性配置为实体的键 - 这称为组合键。 组合键只能使用 Fluent API 进行配置</li></ul>\n<pre><code class=\"prism language-csharp\">modelBuilder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Entity</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Car<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasKey</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{<!-- --></span> c<span class=\"token punctuation\">.</span>State<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>LicensePlate <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>自增和默认设置</strong></p>\n<p>自增</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DatabaseGenerated</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>DatabaseGeneratedOption<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token function\">ValueGeneratedOnAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>默认值</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token function\">HasDefaultValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasDefaultValueSql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getdate()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>关系型</strong><br/> 关系型大部分只能用FluentAPI，关系型是描述实体类型也就是表之间的关系</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token punctuation\">.</span><span class=\"token function\">HasOne</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=&gt;</span> b<span class=\"token punctuation\">.</span>BlogImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">WithOne</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=&gt;</span> i<span class=\"token punctuation\">.</span>Blog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//一对一</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">HasOne</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=&gt;</span> p<span class=\"token punctuation\">.</span>Blog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">WithMany</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=&gt;</span> b<span class=\"token punctuation\">.</span>Posts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//一对多</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">HasMany</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=&gt;</span> p<span class=\"token punctuation\">.</span>Tags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">WithMany</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=&gt;</span> p<span class=\"token punctuation\">.</span>Posts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//多对多</span>\n\n</code></pre>\n<p><strong>索引配置</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Index</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token function\">HasIndex</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=&gt;</span> b<span class=\"token punctuation\">.</span>Url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Index</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>FirstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>LastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span> <span class=\"token punctuation\">.</span><span class=\"token function\">HasIndex</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{<!-- --></span> p<span class=\"token punctuation\">.</span>FirstName<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>LastName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//复合索引</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Index</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> IsUnique <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasIndex</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=&gt;</span> b<span class=\"token punctuation\">.</span>Url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsUnique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//唯一索引</span>\n</code></pre>\n<p><a href=\"https://docs.microsoft.com/zh-cn/ef/core/modeling/\">其他一些不常用的配置请去参考EFCore微软文档</a></p>\n<p><a href=\"https://blog.csdn.net/xieyunhappy/article/details/112093495\">EFCore 从入门到精通-2（初体验)</a><br/> <a href=\"https://blog.csdn.net/xieyunhappy/article/details/112122844\">EFCore 从入门到精通-4（映射关系与导航属性)</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}