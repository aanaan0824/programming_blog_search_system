{"blogid": "126736546", "writerAge": "码龄1年", "writerBlogNum": "68", "writerCollect": "1828", "writerComment": "2033", "writerFan": "2255", "writerGrade": "6级", "writerIntegral": "4793", "writerName": "兴趣使然黄小黄", "writerProfileAdress": "writer_image\\profile_126736546.jpg", "writerRankTotal": "3563", "writerRankWeekly": "1555", "writerThumb": "1893", "writerVisitNum": "52347", "blog_read_count": "52", "blog_time": "于 2022-09-07 11:54:53 发布", "blog_title": "【JavaSE】多线程篇（五）线程专项练习题", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>💁 <strong>个人主页：</strong><a href=\"https://blog.csdn.net/m0_60353039?spm=1000.2115.3001.5343\">黄小黄的博客主页</a><br/> ❤️ <strong>支持我</strong>：👍 点赞 🌷 收藏 🤘关注<br/> 🎏 <strong>格言</strong>：All miracles start from sometime somewhere, make it right now.<br/> <strong>本文来自专栏：</strong><a href=\"https://blog.csdn.net/m0_60353039/category_11757127.html?spm=1001.2014.3001.5482\">JavaSE从入门到精通</a><br/> <img alt=\"在这里插入图片描述\" src=\"image\\3e9cfd21ccdc40edb3e31b167198c96f.jpeg\"/></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1__12\">1 编程题</a></li><li><ul><li><a href=\"#11__13\">1.1 打印数字，读取通知</a></li><li><a href=\"#12__104\">1.2 取钱问题</a></li></ul>\n</li><li><a href=\"#2__186\">2 判断题</a></li><li><a href=\"#3__199\">3 简答题</a></li><li><a href=\"#_231\">写在最后</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"1__12\"></a>1 编程题</h1>\n<h2><a id=\"11__13\"></a>1.1 打印数字，读取通知</h2>\n<blockquote>\n<p>（1）在main方法中启动两个线程；<br/> （2）在1个线程循环打印100以内的整数；<br/> （3）直到第2个线程从键盘读取了“Q”命令。</p>\n</blockquote>\n<p>🐦 <strong>思路解析：</strong></p>\n<ol><li>需要使用一个线程取控制另外一个线程；</li><li>main线程启动两个线程，一个线程打印100以内整数，另一个线程可以终止打印整数线程，可以考虑采用通知的方式终止打印线程；</li><li>记打印数字线程为A，监听键盘线程为B。要想让线程B能够通知线程A，<strong><font color=\"orange\">需要B线程持有A线程对象，通过改变A线程的某个参数，达到通知A线程终止的目的。</font></strong></li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\bdcafe58481c477aa2f3ed7d07b0f750.png\"/></p>\n<p>⌨️ <strong>参考代码：</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * @author 兴趣使然黄小黄\n * @version 1.0\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadTest01</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">PrintNum</span> printNum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> printThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>printNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> readThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadKeyboard</span><span class=\"token punctuation\">(</span>printNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        printThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        readThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 打印数字的线程\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PrintNum</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> loop <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLoop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> loop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loop <span class=\"token operator\">=</span> loop<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 读取键盘的线程\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReadKeyboard</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PrintNum</span> printNum<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 利用构造器，传入PrintNum线程对象，保证对象为同一个\n     * @param printNum\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ReadKeyboard</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrintNum</span> printNum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>printNum <span class=\"token operator\">=</span> printNum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//接收用户输入</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入Q退出程序: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">char</span> key <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token char\">'Q'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//通知PrintNum线程退出</span>\n                printNum<span class=\"token punctuation\">.</span><span class=\"token function\">setLoop</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>🐱 <strong>扩展：</strong></p>\n<p> 也 <strong><font color=\"orange\">可以考虑将loop设置为静态成员，</font></strong> 这样另一个线程就无需再传入一个打印线程的对象了，具体见下图：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\72ec9c242469410a9403e2c7c2fa7f2f.png\"/></p>\n<p> 同时，<strong><font color=\"orange\">也可以采用守护线程的做法，</font></strong> 将打印数字作为读取Q线程的守护线程，当读取Q线程消亡时，作为守护线程的打印数字线程，也会停止，参考图如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3b964e157cab4ce4a4c5d00ff3fdcc16.png\"/></p>\n<h2><a id=\"12__104\"></a>1.2 取钱问题</h2>\n<blockquote>\n<p>（1）有2个用户分别从一个卡上取钱（总额：5200元）；<br/> （2）每次都取500块钱；<br/> （3）当余额不足时，不能再取钱；<br/> （4）不能出现超取现象</p>\n</blockquote>\n<p>🐦 <strong>思路解析：</strong></p>\n<ol><li>考虑采用线程的同步机制来解决取钱问题；</li><li>两个用户取钱分别记为t1与t2两个线程；</li><li>当这两个线程进行取钱操作前，需要获得锁；</li><li>锁被一个线程占用时，另一个线程进入blocked阻塞状态，等待获得锁，才能进行取钱。</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\28e81dab3ff041209b483578574fa40f.png\"/></p>\n<p>⌨️ <strong>参考代码：</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * @author 兴趣使然黄小黄\n * @version 1.0\n * 取钱问题\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadTest02</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">WithDrawMoney</span> withDrawMoney <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WithDrawMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> thread1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>withDrawMoney<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> thread2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>withDrawMoney<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路人甲\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路人乙\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 取钱的线程\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WithDrawMoney</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> money <span class=\"token operator\">=</span> <span class=\"token number\">5200</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> draw <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//余额是否足够</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>money <span class=\"token operator\">&lt;</span> draw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"余额不足... ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">//取钱</span>\n                money <span class=\"token operator\">-=</span> draw<span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"取走了 \"</span> <span class=\"token operator\">+</span> draw <span class=\"token operator\">+</span> <span class=\"token string\">\"元, 当前余额: \"</span> <span class=\"token operator\">+</span> money <span class=\"token operator\">+</span> <span class=\"token string\">\"元\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMoney</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>money <span class=\"token operator\">=</span> money<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> draw<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>draw <span class=\"token operator\">=</span> draw<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>🐰 <strong>结果如下：</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f2568004bb584be89ca109362360f98e.png\"/></p>\n<p>🐯 <strong><font color=\"red\">为什么都是路人甲，路人乙去哪里了？</font></strong></p>\n<p><strong>答：</strong> 在该程序中，<strong><font color=\"orange\">使用到的是this对象锁，该锁为非公平锁。</font></strong><br/> 比如：t1、t2、t3三个线程都进行获取锁的操作，而每次都是t1获取到锁，就会导致t2、t3两个线程都被阻塞（Blocked），看起来就像没有执行一样。</p>\n<hr/>\n<h1><a id=\"2__186\"></a>2 判断题</h1>\n<ol><li>如果线程死亡，它便不能运行。（T）</li><li>在Java中，高优先级的可运行线程会抢占低优先级线程。（T ）</li><li>线程可以用yield方法使低优先级的线程运行。（F）</li><li>程序开发者必须创建一个线程去管理内存的分配。（T）</li><li>一个线程在调用它的start方法之前，该线程将一直处于出生期。（ T）</li><li>当调用一个正在进行线程的stop( )方法时，该线程便会进入休眠状态。（F）</li><li>一个线程可以调用yield方法使其他线程有机会运行。（T）</li><li>多线程没有安全问题(F)</li><li>多线程安全问题的解决方案可以使用Lock提供的具体的锁对象操作(T)</li><li>Stop()方法是终止当前线程的一种状态(T)</li></ol>\n<hr/>\n<h1><a id=\"3__199\"></a>3 简答题</h1>\n<p>1️⃣ 简述程序、进程和线程之间的关系？什么是多线程程序？</p>\n<blockquote>\n<p>答：<strong>程序：</strong> 程序就是一段代码，一组指令的集合，不能单独运行，需要将其加载到内存中，系统为他分配资源后才能执行，运行时就相当于一个进程。<br/> <strong>进程：</strong> 进程就是系统分配资源调用的一个独立单位。是程序的一次动态执行，从加载到执行到执行完毕是一个完整的过程，并且有自己的生命周期。<br/> <strong>多线程：</strong> 一个程序运行时（进程）产生了不止一个线程，执行的路径有多条，就叫多线程。</p>\n</blockquote>\n<p>2️⃣ 什么是线程调度？Java的线程调度采用什么策略？</p>\n<blockquote>\n<p>答：<strong>线程调度：</strong><br/> 对处于可运行状态的多个线程对象进行系统级的协调，防止多个线程争用有限资源而导致系统死机或者崩溃<br/> <strong>java的线程调度采用的策略：</strong><br/> java 的调度策略是基于线程优先级的抢先式调度。意思就是，谁的优先级高那我就先给谁使用系统资源。</p>\n</blockquote>\n<p>3️⃣ 在Java中wait()和sleep()方法的不同?</p>\n<blockquote>\n<p>答：（1）wait方法是在Object类中，而sleep方法是Thread类中<br/> （2）sleep方法导致了程序暂停执行指定的时间，让出cpu该其他线程，但是它的监控状态依然保持，当指定的时间到了又会自动恢复运行状态。在调用sleep()方法的过程中，线程不会释放对象锁。而当调用wait()方法的时候，线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用notify()方法后本线程才进入对象锁定池准备，获取对象锁进入运行状态。</p>\n</blockquote>\n<p>4️⃣ 如何在Java程序中实现多线程？</p>\n<blockquote>\n<p>答：1）定义一个类继承自Thread类，重写run方法，然后创建这个类的对象，然后通过对象调用start方法启动线程。<br/> 2）定义一个类实现Runnable接口，重写run方法，然后创建一个这个类的子类对象，然后建Thread类的对象，将子类对象作为参数进行传递，然后通过start方法启动线程。<br/> 3）线程池，使用ExecutorService、Callable、Future实现有返回结果的多线程。<br/> 4）JDK5以后新增了一个Executors工厂类来产生线程池，利用工厂类调用newFixedThreadPool方法，创建一个线程池对象，然后用线程池对象调用submit方法，传入的参数是一个实现了Callable接口的子类，重写了里面的call方法，submit方法相当于start方法，是用于启动线程的。</p>\n</blockquote>\n<p>判断题及简答题整理参考博主hl6621的文章，更多练习见文章：<br/> <a href=\"https://blog.csdn.net/hl6621/article/details/78751822\">java–多线程练习题</a></p>\n<hr/>\n<h1><a id=\"_231\"></a>写在最后</h1>\n<p>🌟以上便是本文的全部内容啦，后续内容将会持续<strong>免费更新</strong>，如果文章对你有所帮助，麻烦动动小手<strong>点个赞 + 关注</strong>，非常感谢 ❤️ ❤️ ❤️ !<br/> 如果有问题，欢迎私信或者评论区！<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/726e7cb416dc481180f890cfa7a6afa6.webp#pic_center\"/></p>\n<p>共勉：“你间歇性的努力和蒙混过日子，都是对之前努力的清零。”<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/a1397a96b231496891ed9550209c5de9.gif#pic_center\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}