{"blogid": "126715500", "writerAge": "码龄1年", "writerBlogNum": "77", "writerCollect": "11", "writerComment": "1", "writerFan": "2", "writerGrade": "3级", "writerIntegral": "788", "writerName": "宇六岁鸭", "writerProfileAdress": "writer_image\\profile_126715500.jpg", "writerRankTotal": "116305", "writerRankWeekly": "111608", "writerThumb": "7", "writerVisitNum": "35316", "blog_read_count": "68", "blog_time": "于 2022-09-05 23:08:45 发布", "blog_title": "【前端学习 - Vue (10) Vue 中的 key 有什么作用？】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2>1.Vue 中的 key 有什么作用？</h2>\n<p>key 是为 Vue 中 <code>vnode</code> 的<code>唯一标记</code>，通过这个 key，我们的 <code>diff</code> 操作可以<code>更准确、更快速</code>。</p>\n<p><strong>Vue 的 diff 过程可以概括为：</strong></p>\n<p><code>oldCh</code> 和 <code>newCh</code> 各有<code>两个头尾</code>的变量 <code>oldStartIndex、oldEndIndex</code> 和 <code>newStartIndex、newEndIndex</code>，它们会新节点和旧节点会进行<code>两两对比</code>，即一共有<strong>4种比较方式</strong>：newStartIndex 和oldStartIndex 、newEndIndex 和 oldEndIndex 、newStartIndex 和 oldEndIndex 、newEndIndex 和 oldStartIndex，如果以上 4 种比较<code>都没匹配</code>，如果设置了<code>key</code>，就会用 key <code>再进行</code>比较，在比较的过程中，遍历会<code>往中间靠</code>，一旦 StartIdx &gt; EndIdx 表明 oldCh 和 newCh 至少有一个已经遍历完了，就会结束比较。</p>\n<p><strong>所以 Vue 中 key 的作用是</strong>：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速</p>\n<ul><li> <p>更准确因为带 key 就不是就地复用了，在 sameNode 函数 a.key === b.key对比中可以避免就地复用的情况。所以会更加准确。</p> </li><li> <p>更快速：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快，源码如下：</p> </li></ul>\n<pre><code>function createKeyToOldIdx (children, beginIdx, endIdx) {\n  let i, key\n  const map = {}\n  for (i = beginIdx; i &lt;= endIdx; ++i) {\n    key = children[i].key\n    if (isDef(key)) map[key] = i\n  }\n  return map\n}</code></pre>\n<p></p>\n</div>\n</div>"}