{"blogid": "124975994", "writerAge": "码龄2年", "writerBlogNum": "58", "writerCollect": "6726", "writerComment": "5568", "writerFan": "20370", "writerGrade": "7级", "writerIntegral": "11788", "writerName": "小威要向诸佬学习呀", "writerProfileAdress": "writer_image\\profile_124975994.jpg", "writerRankTotal": "915", "writerRankWeekly": "9", "writerThumb": "4548", "writerVisitNum": "232325", "blog_read_count": "24264", "blog_time": "已于 2022-07-11 16:47:22 修改", "blog_title": "这些Java基础知识，诸佬们都还记得嘛(学习，复习，面试均可)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>前言：<br/> 由于临近期末考试，考试也比较密集，所以断更了好多天。最近复习Java的基础，发现好多知识都淡忘了，因此<strong>写下这篇文章帮助自己更好地加深印象，并且希望能帮助到各位小伙伴儿</strong>😉😉。<br/> <strong>本篇文章适合正在学习Java基础的小伙伴儿，以及正在找工作的大佬面试使用</strong>。如果文章有写的不准确或需要改进的地方，还请<strong>各位大佬不吝赐教💞💞💞</strong>。<br/> 小威在此先感谢大家了😘😘😘<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/403bbb34536b4edfafa58697b5affb51.gif#pic_center\"/></p>\n<blockquote>\n<p>🏠个人主页：<a href=\"https://blog.csdn.net/qq_53847859?spm=1011.2415.3001.5343\">小威要向诸佬学习呀</a><br/> 🧑个人简介：大家好，我是小威，一个想要与大家共同进步的男人😉😉<br/> 目前状况🎉：目前大二，在一家满意的公司实习👏👏</p>\n<p>🎁如果大佬在准备面试，可以使用我找实习前用的刷题神器哦<a href=\"https://www.nowcoder.com/link/pc_csdncpt_xiaowei_sf\">刷题神器点这里哟</a><br/> 💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p>\n</blockquote>\n<p>牛客部分使用反馈，个人感觉还不错，帮我找到了心仪的公司，希望各位伙伴儿们通过它也能提高不少🥂🥂🥂</p>\n<p>以下正文开始<br/> </p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_20\">🍭方法重载和方法重写的区别</a></li><li><ul><li><a href=\"#_21\">🍬方法重写</a></li><li><a href=\"#_26\">🍬方法重载</a></li></ul>\n</li><li><a href=\"#StringStringBufferStringBuilder_38\">🍵String，StringBuffer,StringBuilder三者的区别</a></li><li><a href=\"#ArrayListLinkedList_48\">🍻ArrayList和LinkedList的区别</a></li><li><ul><li><a href=\"#ArrayList_49\">🍺ArrayList</a></li><li><a href=\"#LinkedList_62\">🍺LinkedList</a></li></ul>\n</li><li><a href=\"#HashMapHashtable_74\">🍉HashMap和Hashtable的区别</a></li><li><ul><li><a href=\"#HashMap_76\">🍇HashMap</a></li><li><a href=\"#HashTable_83\">🍇HashTable</a></li></ul>\n</li><li><a href=\"#HashMap_94\">🚀用HashMap实现的小游戏</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_20\"></a>🍭方法重载和方法重写的区别</h1>\n<h2><a id=\"_21\"></a>🍬方法重写</h2>\n<p>重写体现在继承关系上。 <strong>在Java中，子类继承父类，子类就会具备父类所以的特征，以及父类的方法和变量</strong>比如动物类有“叫”的方法，小狗小猫分别继承了动物类，重写方法时就可以分别将“叫”的方法改成“小狗汪汪叫”，“小猫喵喵叫”。<br/> 子类修改父类的方法，对方法进行扩展，丰富，这就叫做方法重写。<br/> <strong>重写的方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；如果父类方法访问修饰符为private则子类就不能重写该方法。</strong></p>\n<h2><a id=\"_26\"></a>🍬方法重载</h2>\n<p>方法重载是指在一个类中定义多个同名的方法，但要求<strong>每个方法具有不同的参数的类型或参数的个数</strong>。<br/> 方法重载通常用于创建完成一组任务相似但参数的类型或参数的个数或参数的顺序不同的方法。Java的方法重载，就是在类中可以创建多个方法，它们可以有相同的名字，但必须具有不同的参数，即或者是参数的个数不同，或者是参数的类型不同。<strong>调用方法时通过传递给它们的不同个数和类型的参数，以及传入参数的顺序来决定具体使用哪个方法</strong>。<br/> <strong>方法重载发生在编译时。</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">Public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>上面的两个方法在编译时会发生错误，虽然两方法的方法名相同，返回值类型可以不同，但是两个方法中的参数a和b类型都一样，返回值类型却不同，所以会报错。</p>\n<h1><a id=\"StringStringBufferStringBuilder_38\"></a>🍵String，StringBuffer,StringBuilder三者的区别</h1>\n<p>String是final修饰的，String的对象不可变，每次操作都会产生新的String对象，所以String修饰的常量是线程安全的。<br/> StringBuffer和StringBuilder都是在原始创建的对象上操作的。StringBuffer和StringBuilder的相同点是他们都有公共父类AbstractStringBuilder抽象类。当调用StringBuffer和StringBuilder中的方法时，都会调用AbstractStringBuilder抽象类中的方法。<br/> 而StringBuffer和StringBuilder的不同点是StringBuffer是线程安全的，StringBuildel是线程不安全的，这是因为StringBuffer会在方法是添加synchronized锁</p>\n<blockquote>\n<p><strong>在性能方面，StringBuilder&gt;StringBuffer&gt;String</strong><br/> 如果在使用时要改变字符串的内容，应使用前两个，在多线程使用共享变量时优先使用StringBuffer，因为其线程安全；在没有特殊情况下，优先使用StringBuilder，因为其效率高。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/6bf4170946274de3bc7fd6c08d7a97ed.gif#pic_center\"/></p>\n<h1><a id=\"ArrayListLinkedList_48\"></a>🍻ArrayList和LinkedList的区别</h1>\n<h2><a id=\"ArrayList_49\"></a>🍺ArrayList</h2>\n<p>ArrayList是List接口的一个实现类，基于动态数组存储的，并且存储地址是连续的。<strong>因为ArrayList内部的存储形式是数组的形式，所以不适合做大量的增删操作（尤其是在中间插入或删除元素，因为后面的数组都要向前或向后移动），但是ArrayList在遍历和查找元素时效率很高</strong>。<br/> ArrayList适合下标访问，也适合随机访问，在进行随机的get,set方法调用时，ArrayList的效率比LinkedList效率高。<br/> 当存入的元素超过了设定的ArrayList的长度时，ArrayList会在内存中分配一个更大的数组来存储这些元素，即新建数组，将旧的数组中的数据拷贝到新的数组中，<strong>如果不是尾插法，后面的数据都要移动</strong>。</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">ArrayList</span> list1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaowei\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List1</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"haoshuai\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>对于上面的代码，当运行第一行，<strong>底层先创建了一个长度为0的数组</strong>，这是因为没有指定数组大小；当运行到第二行时，add第一个元素时，<strong>会初始化数组的大小为10</strong>（默认的，可指定），<strong>如果超过此容量，再次扩容时就是之前的1.5倍</strong>。</p>\n</blockquote>\n<h2><a id=\"LinkedList_62\"></a>🍺LinkedList</h2>\n<p>LinkedList是List接口的另一个实现类，LinkedList集合是一个双向链表，其内部包含有两个Node类型的first和last属性维护的双向循环链表，链表中的每一个元素都使用引用的方式来记住他的前一个和后一个元素，<strong>当插入或者删除一个节点时，只需要修改几个元素之间的引用关系就行了，无需造成数据的大量移动。所以Linked List在增删元素上具有很高的效率。</strong><br/> <strong>LinkedList没有初始化容量，其底层是双向链表结构，所以不存在扩容这一说。</strong></p>\n<blockquote>\n<p>优点：<br/> 随机增删元素效率较高，因为增删元素不涉及大量元素的位移。<br/> 缺点：<br/> 查询效率较低，每一次查找某个元素时都需要从头节点开始往下遍历</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/93b17c624cf64068a46b232fd4e7ee49.gif#pic_center\"/></p>\n<h1><a id=\"HashMapHashtable_74\"></a>🍉HashMap和Hashtable的区别</h1>\n<h2><a id=\"HashMap_76\"></a>🍇HashMap</h2>\n<p>HashMap 是 map 接口的实现类，是将键映射到值的对象，<strong>它的键和值都是对象，并且不能包含重复键，但可以包含重复值</strong>。HashMap 允许key和value为空值。<br/> <strong>HashMap中的方法没有synchronized修饰，所以HashMap是线程不安全的。</strong><br/> HashMap的底层实现：数组+链表<br/> <strong>jdk8开始如果链表高度到8，数组的长度超过64，链表就会转变为红黑树</strong>，元素以内部类Node节点存在。<br/> 计算key的hash值，二次hash然后对数组长度取模，对应到数组下标，<strong>如果没有产生hash冲突(下标位置没有元素)，则直接创建Node存入数组</strong>，如果产生hash冲突，则先进行equal比较，相同的话就会取代该元素，如果不同的话，则判断链表高度插入链表，链表高度达到8，并且数组长度到64则转变为红黑树，长度低于6则将红黑树转回链表。<br/> <strong>由于HashMap是线程非安全的，所以HashMap在效率上要优于HashTable。</strong></p>\n<h2><a id=\"HashTable_83\"></a>🍇HashTable</h2>\n<p><strong>HashTable中的方法都被Synchronized修饰，所以在多个线程访问HashTable时，不需要自己为它的方法实现同步。HashTable是线程安全的。</strong><br/> HashTable无论是key还是value，都不能为null值。<br/> <strong>遍历方面：</strong><br/> HashMap只支持Iterator(迭代器)遍历。<br/> <strong>而Hashtable支持Iterator(迭代器)和Enumeration(枚举器)两种方式遍历。</strong><br/> <strong>容量方面：</strong><br/> HashMap默认的容量大小是16；增加容量时，每次将容量变为“原始容量x2”。所以其容量一定是2的n次幂。<br/> Hashtable默认的容量大小是11；增加容量时，每次将容量变为“原始容量x2 + 1”。<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/9f0b4a56e4fd459298946d01e32c7536.gif#pic_center\"/></p>\n<h1><a id=\"HashMap_94\"></a>🚀用HashMap实现的小游戏</h1>\n<p>以下是用HashMap实现的斗地主小游戏，代码有发牌和看牌的操作，可以运行一下玩玩。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PlayPoker</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> hm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        color数组装牌的花色</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> color <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"♦\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"♣\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"❤\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"♠\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        num数组装牌的大小</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> num <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"7\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"8\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"9\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"J\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Q\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"K\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        外层循环是牌的大小，内层循环是花色</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> num1 <span class=\"token operator\">:</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> color1 <span class=\"token operator\">:</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                hm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>color1<span class=\"token operator\">+</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                array<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        hm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span><span class=\"token string\">\"小王\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        array<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        hm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span><span class=\"token string\">\"大王\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        array<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        洗牌操作，掉头Collections工具类里面的shuffle方法</span>\n        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        用TreeSet来实现对牌的排序</span>\n        <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> player1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> player2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> player3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            最后三张就是底牌</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                dp<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                player1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                player2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                player3<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">lookPoker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"蔡徐村\"</span><span class=\"token punctuation\">,</span>player1<span class=\"token punctuation\">,</span>hm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">lookPoker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"苏珊\"</span><span class=\"token punctuation\">,</span>player2<span class=\"token punctuation\">,</span>hm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">lookPoker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小黑子\"</span><span class=\"token punctuation\">,</span>player3<span class=\"token punctuation\">,</span>hm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">lookPoker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"底牌\"</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">,</span>hm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lookPoker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> t<span class=\"token punctuation\">,</span><span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> hm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"的牌是：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> key <span class=\"token operator\">:</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">String</span> poker <span class=\"token operator\">=</span> hm<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>poker <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/156578962efd4e2ab6c77f82355d3d70.gif#pic_center\"/></p>\n<blockquote>\n<p>文章到这里就结束了，如果有什么疑问的地方请指出，诸佬们一起讨论🍻<br/> 最后再次给大家安利一波牛客，点击<a href=\"https://www.nowcoder.com/link/pc_csdncpt_xiaowei_sf\">刷题神器</a><br/> 注册牛客，快来和博主一起刷题吧嘿嘿嘿👏 再次感谢各位小伙伴儿们的支持🤞</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/4693a8070de0452f86582bb558a8f163.gif#pic_center\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}