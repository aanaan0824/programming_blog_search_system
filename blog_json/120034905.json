{"blogid": "120034905", "writerAge": "码龄2年", "writerBlogNum": "153", "writerCollect": "2306", "writerComment": "921", "writerFan": "9381", "writerGrade": "5级", "writerIntegral": "4268", "writerName": "前端老实人", "writerProfileAdress": "writer_image\\profile_120034905.jpg", "writerRankTotal": "4179", "writerRankWeekly": "2008", "writerThumb": "1695", "writerVisitNum": "326495", "blog_read_count": "12344", "blog_time": "于 2021-09-01 14:15:41 发布", "blog_title": "uniapp和小程序如何分包，详细步骤手把手（图解）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2>一、小程序分包</h2>\n<p>每个使用分包小程序必定含有一个<strong>主包</strong>。所谓的主包，即放置默认启动页面/TabBar 页面，以及一些所有分包都需用到公共资源/JS 脚本；而<strong>分包</strong>则是根据开发者的配置进行划分。</p>\n<p>在小程序启动时，默认会下载主包并启动主包内页面，当用户进入分包内某个页面时，客户端会把对应分包下载下来，下载完成后再进行展示</p>\n<p>目前小程序分包大小有以下限制：</p>\n<ul><li>整个小程序所有分包大小不超过 20M</li><li>单个分包/主包大小不能超过 2M</li></ul>\n<p>对小程序进行分包，可以优化小程序首次启动的下载时间，以及在多团队共同开发时可以更好的解耦协作。</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/basic.html\">这里直接点击去看官方的分包教程容易理解</a></p>\n<h2>二、uniapp分包小程序</h2>\n<p>App默认为整包。兼容小程序的分包配置。其目的不用于下载提速，而用于首页是vue时的启动提速。</p>\n<p>这是我分包小程序之后的目录结构</p>\n<p><img alt=\"\" height=\"499\" src=\"image\\20210901110204752.jpg\" width=\"250\"/></p>\n<ul><li>components:公共组件（供主包引用）</li><li>page_后跟拼音的都是分包</li><li>分包里的components是单个分包自己的组件目录，分包vue页面的引用只能是在自己page_zhaoshang分包目录下才可以引用</li><li>pages是主包，里面都是启动页面/TabBar 页面</li><li>static里放的是公共静态资源，图片类</li></ul>\n<h1>分包步骤：</h1>\n<h2>1.配置manifest.json</h2>\n<p>\"mp-weixin\": {<!-- --></p>\n<p>\"optimization\":{\"subPackages\":true}</p>\n<p>}</p>\n<p><img alt=\"\" height=\"248\" src=\"image\\20210901114116523.jpg\" width=\"600\"/></p>\n<p></p>\n<p><strong>优化分包：</strong></p>\n<p>在对应平台的配置(manifest.json)下添加<code>\"optimization\":{\"subPackages\":true}</code>开启分包优化</p>\n<p>目前只支持<code>mp-weixin</code>、<code>mp-qq</code>、<code>mp-baidu</code>的分包优化</p>\n<ul><li>静态文件：分包下支持 static 等静态资源拷贝，即分包目录内放置的静态资源不会被打包到主包中，也不可在主包中使用</li><li>js文件：当某个 js 仅被一个分包引用时，该 js 会被打包到该分包内，否则仍打到主包（即被主包引用，或被超过 1 个分包引用）</li><li>自定义组件：若某个自定义组件仅被一个分包引用时，且未放入到分包内，编译时会输出提示信息</li></ul>\n<h2>2.配置pages.json</h2>\n<p>在pages.json中新建数组\"subPackages\"，数组中包含两个参数：1.root：为子包的根目录，2.pages：子包由哪些页面组成，参数同pages；</p>\n<p><strong>注意：主包和分包是不能再同一目录下，在构建uniapp项目时，可以考虑一下目录结构，以便后期进行分包；</strong></p>\n<p><img alt=\"\" height=\"326\" src=\"image\\20210901114625678.png\" width=\"400\"/></p>\n<p></p>\n<h2>3.分包预载配置（preloadRule）</h2>\n<p>做这一步主要为了优化速度，不想优化速度的可以跳过这个配置</p>\n<p>配置preloadRule后，在进入小程序某个页面时，由框架自动预下载可能需要的分包，提升进入后续分包页面时的启动速度</p>\n<p><code>preloadRule</code> 中，<code>key</code> 是页面路径，<code>value</code> 是进入此页面的预下载配置，每个配置有以下几项：</p>\n<table><thead><tr><th>字段</th><th>类型</th><th>必填</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>packages</td><td>StringArray</td><td>是</td><td>无</td><td>进入页面后预下载分包的 <code>root</code> 或 <code>name</code>。<code>__APP__</code> 表示主包。</td></tr><tr><td>network</td><td>String</td><td>否</td><td>wifi</td><td>在指定网络下预下载，可选值为：all（不限网络）、wifi（仅wifi下预下载）</td></tr></tbody></table>\n<p>app的分包，同样支持preloadRule，但网络规则无效。</p>\n<p>例子：</p>\n<p><img alt=\"\" height=\"163\" src=\"image\\20210901140612323.jpg\" width=\"400\"/></p>\n<p><a href=\"https://uniapp.dcloud.io/collocation/pages?id=subpackages\">最后点击进入uniapp官方文档查看配置项 </a></p>\n</div>\n</div>"}