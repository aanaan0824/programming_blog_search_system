{"blogid": "123755926", "writerAge": "码龄10年", "writerBlogNum": "73", "writerCollect": "237", "writerComment": "35", "writerFan": "63", "writerGrade": "5级", "writerIntegral": "2294", "writerName": "东方快弟", "writerProfileAdress": "writer_image\\profile_123755926.jpg", "writerRankTotal": "14956", "writerRankWeekly": "44107", "writerThumb": "76", "writerVisitNum": "197110", "blog_read_count": "1860", "blog_time": "已于 2022-04-09 17:05:32 修改", "blog_title": "C#Windows桌面应用开发实践(持续更新)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>速览</h3>\n<ul><li><a href=\"#_3\">必须功能一览</a></li><li><ul><li><a href=\"#_4\">注册表相关的操作（添加与删除）</a></li><li><a href=\"#_44\">文件占用问题的处理</a></li><li><a href=\"#__60\">防止重复启动只开一个实例，通用弹窗和提示 使用示例</a></li><li><a href=\"#_C___C__112\">使用 C# 下载文件 （引用自使用 C# 下载文件的十八般武艺）</a></li><li><ul><li><a href=\"#_113\">简单下载</a></li><li><a href=\"#_122\">异步下载</a></li><li><a href=\"#_149\">如何解决下载文件不完整的问题</a></li><li><a href=\"#_Downloader__HTTP__211\">使用 Downloader 进行 HTTP 多线程下载</a></li><li><a href=\"#_246\">创建一个下载服务：</a></li><li><a href=\"#_HTTP__271\">下载非 HTTP 协议的文件</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_342\">常用接口示例</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_3\"></a>必须功能一览</h1>\n<h2><a id=\"_4\"></a>注册表相关的操作（添加与删除）</h2>\n<pre><code class=\"prism language-c\">       RegistryKey hkml <span class=\"token operator\">=</span> Registry<span class=\"token punctuation\">.</span>LocalMachine<span class=\"token punctuation\">;</span>\n            RegistryKey software <span class=\"token operator\">=</span> hkml<span class=\"token punctuation\">.</span><span class=\"token function\">OpenSubKey</span><span class=\"token punctuation\">(</span>@<span class=\"token string\">\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\"</span><span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            RegistryKey softdemo <span class=\"token operator\">=</span> software<span class=\"token punctuation\">.</span><span class=\"token function\">CreateSubKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"再见江湖\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            softdemo<span class=\"token punctuation\">.</span><span class=\"token function\">SetValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DisplayName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"再见江湖\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            softdemo<span class=\"token punctuation\">.</span><span class=\"token function\">SetValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UninstallString\"</span><span class=\"token punctuation\">,</span> InstallPath <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\\\"</span><span class=\"token operator\">+</span>PathNameDef<span class=\"token operator\">+</span><span class=\"token string\">\"\\\\Uninstall.exe uninstall\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            softdemo<span class=\"token punctuation\">.</span><span class=\"token function\">SetValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DisplayIcon\"</span><span class=\"token punctuation\">,</span> InstallPath <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\\\"</span><span class=\"token operator\">+</span>PathNameDef<span class=\"token operator\">+</span><span class=\"token string\">\"\\\\Uninstall.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-c\">            <span class=\"token comment\">//清楚注册表</span>\n            try\n            <span class=\"token punctuation\">{<!-- --></span>\n                RegistryKey hkml <span class=\"token operator\">=</span> Registry<span class=\"token punctuation\">.</span>LocalMachine<span class=\"token punctuation\">;</span>\n                RegistryKey software <span class=\"token operator\">=</span> hkml<span class=\"token punctuation\">.</span><span class=\"token function\">OpenSubKey</span><span class=\"token punctuation\">(</span>@<span class=\"token string\">\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\"</span><span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                RegistryKey softdemo <span class=\"token operator\">=</span> software<span class=\"token punctuation\">.</span><span class=\"token function\">OpenSubKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"再见江湖\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>softdemo<span class=\"token punctuation\">.</span><span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"再见江湖\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    softdemo<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteSubKeyTree</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"再见江湖\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token comment\">//Registry.ClassesRoot.OpenSubKey(\"再见江湖\", true);</span>\n                <span class=\"token comment\">//Registry.ClassesRoot.DeleteSubKeyTree(\"再见江湖\", true);</span>\n                Registry<span class=\"token punctuation\">.</span>CurrentUser<span class=\"token punctuation\">.</span><span class=\"token function\">OpenSubKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"longtu\"</span><span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Registry<span class=\"token punctuation\">.</span>CurrentUser<span class=\"token punctuation\">.</span><span class=\"token function\">OpenSubKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"再见江湖\"</span><span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Registry<span class=\"token punctuation\">.</span>CurrentUser<span class=\"token punctuation\">.</span><span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"再见江湖\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    Registry<span class=\"token punctuation\">.</span>CurrentUser<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteSubKeyTree</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"再见江湖\"</span><span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>Exception exc<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//注册表异常暂时不捕获不抛出</span>\n                throw exc<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_44\"></a>文件占用问题的处理</h2>\n<p>此问题发生一般是资源没被释放掉，但也存在如下可能性。我们对文件的操作非常频繁，所以写了特定的操作类/组件来维护文件之间的操作，知道特定的时刻才结束，常见的如日志，随着程序的启动便开始写日志，直到程序关闭。但其中也存在我们需要提供一个特殊的操作（读/写/删除）来操作文件，例如我们需要提供一个日志查看器来查看当前日志或所有日志，这时，便无可避免的发生了以上的问题。解决此问题，只需将文件读写锁改为FileShare.ReadWrite(FileShare就是控制文件流的“访问权限)，具体代码如下：</p>\n<pre><code class=\"prism language-bash\">\n</code></pre>\n<pre><code class=\"prism language-bash\"> using <span class=\"token punctuation\">(</span>FileStream fs <span class=\"token operator\">=</span> new FileStream<span class=\"token punctuation\">(</span>filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite<span class=\"token punctuation\">))</span>\n <span class=\"token punctuation\">{<!-- --></span>\n   byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bt <span class=\"token operator\">=</span> new byte<span class=\"token punctuation\">[</span>fs.Length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   fs.Read<span class=\"token punctuation\">(</span>bt, <span class=\"token number\">0</span>, bt.Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   fs.Close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"__60\"></a>防止重复启动只开一个实例，通用弹窗和提示 使用示例</h2>\n<pre><code class=\"prism language-bash\">using System<span class=\"token punctuation\">;</span>\nusing System.Collections.Generic<span class=\"token punctuation\">;</span>\nusing System.Linq<span class=\"token punctuation\">;</span>\nusing System.Threading.Tasks<span class=\"token punctuation\">;</span>\nusing System.Windows.Forms<span class=\"token punctuation\">;</span>\nusing System.Drawing<span class=\"token punctuation\">;</span>\nusing System.Threading<span class=\"token punctuation\">;</span>\n\nnamespace Launcher\n<span class=\"token punctuation\">{<!-- --></span>\n    static class Program\n    <span class=\"token punctuation\">{<!-- --></span>\n        /// <span class=\"token operator\">&lt;</span>summary<span class=\"token operator\">&gt;</span>\n        /// 应用程序的主入口点。\n        /// <span class=\"token operator\">&lt;</span>/summary<span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">[</span>STAThread<span class=\"token punctuation\">]</span>\n        static void <span class=\"token function-name function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            //Application.EnableVisualStyles<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            //Application.SetCompatibleTextRenderingDefault<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            bool isAppRunning <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            Mutex mutex <span class=\"token operator\">=</span> new Mutex<span class=\"token punctuation\">(</span>true, System.Diagnostics.Process.GetCurrentProcess<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.ProcessName, out isAppRunning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isAppRunning<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                MessageBox.Show<span class=\"token punctuation\">(</span><span class=\"token string\">\"程序已运行，不能再次打开！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Environment.Exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Application.EnableVisualStyles<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Application.SetCompatibleTextRenderingDefault<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            var freeSpace <span class=\"token operator\">=</span> ComTool.GetDiskFreeSpace<span class=\"token punctuation\">(</span>System.AppDomain.CurrentDomain.SetupInformation.ApplicationBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>freeSpace <span class=\"token operator\">&lt;</span> <span class=\"token number\">42949672960</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n\n                DialogResult dr <span class=\"token operator\">=</span> MessageBox.Show<span class=\"token punctuation\">(</span>string.Format<span class=\"token punctuation\">(</span><span class=\"token string\">\"更新本游戏至少需要5G的安装空间，检测到您的磁盘不足5G({0})，是否继续更新？\"</span>,ComTool.HumanReadableFilesize<span class=\"token punctuation\">(</span>freeSpace<span class=\"token punctuation\">))</span>, <span class=\"token string\">\"提示\"</span>, MessageBoxButtons.OKCancel, MessageBoxIcon.Question<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dr <span class=\"token operator\">==</span> DialogResult.OK<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    Application.Run<span class=\"token punctuation\">(</span>new Form1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>                \n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Application.Run<span class=\"token punctuation\">(</span>new Form1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>          \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"_C___C__112\"></a>使用 C# 下载文件 （引用自使用 C# 下载文件的十八般武艺）</h2>\n<h3><a id=\"_113\"></a>简单下载</h3>\n<p>在 .NET 程序中下载文件最简单的方式就是使用 WebClient 的 DownloadFile 方法：</p>\n<pre><code>var url = \"https://www.coderbusy.com\";\nvar save = @\"D:\\1.html\";\nusing (var web = new WebClient())\n{\n    web.DownloadFile(url,save);\n}\n</code></pre>\n<h3><a id=\"_122\"></a>异步下载</h3>\n<p>该方法也提供异步的实现：</p>\n<pre><code>var url = \"https://www.coderbusy.com\";\nvar save = @\"D:\\1.html\";\nusing (var web = new WebClient())\n{\n    await web.DownloadFileTaskAsync(url, save);\n}\n</code></pre>\n<p>下载文件的同时向服务器发送自定义请求头<br/> 如果需要对文件下载请求进行定制，可以使用 HttpClient ：</p>\n<pre><code>var url = \"https://www.coderbusy.com\";\nvar save = @\"D:\\1.html\";\nvar http = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get,url);\n//增加 Auth 请求头\nrequest.Headers.Add(\"Auth\",\"123456\");\nvar response = await http.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nusing (var fs = File.Open(save, FileMode.Create))\n{\n    using (var ms = response.Content.ReadAsStream())\n    {\n        await ms.CopyToAsync(fs);\n    }\n}\n</code></pre>\n<h3><a id=\"_149\"></a>如何解决下载文件不完整的问题</h3>\n<p>以上所有代码在应对小文件的下载时没有特别大的问题，在网络情况不佳或文件较大时容易引入错误。以下代码在开发中很常见：</p>\n<pre><code>var url = \"https://www.coderbusy.com\";\nvar save = @\"D:\\1.html\";\nif (!File.Exists(save))\n{\n    Console.WriteLine(\"文件不存在，开始下载...\");\n    using (var web = new WebClient())\n    {\n        await web.DownloadFileTaskAsync(url, save);\n    }\n    Console.WriteLine(\"文件下载成功\");\n}\nConsole.WriteLine(\"开始处理文件\");\n//TODO:对文件进行处理\n</code></pre>\n<p>如果在 DownloadFileTaskAsync 方法中发生了异常（通常是网络中断或网络超时），那么下载不完整的文件将会保留在本地系统中。在该任务重试执行时，因为文件已存在（虽然它不完整）所以会直接进入处理程序，从而引入异常。</p>\n<p>一个简单的修复方式是引入异常处理，但这种方式对应用程序意外终止造成的文件不完整无效：</p>\n<pre><code>var url = \"https://www.coderbusy.com\";\nvar save = @\"D:\\1.html\";\nif (!File.Exists(save))\n{\n    Console.WriteLine(\"文件不存在，开始下载...\");\n    using (var web = new WebClient())\n    {\n        try\n        {\n            await web.DownloadFileTaskAsync(url, save);\n        }\n        catch\n        {\n            if (File.Exists(save))\n            {\n                File.Delete(save);\n            }\n            throw;\n        }\n    }\n    Console.WriteLine(\"文件下载成功\");\n}\nConsole.WriteLine(\"开始处理文件\");\n//TODO:对文件进行处理\n</code></pre>\n<p>笔者更喜欢的方式是引入一个临时文件。下载操作将数据下载到临时文件中，当确定下载操作执行完毕时将临时文件改名：</p>\n<pre><code>var url = \"https://www.coderbusy.com\";\nvar save = @\"D:\\1.html\";\nif (!File.Exists(save))\n{\n    Console.WriteLine(\"文件不存在，开始下载...\");\n    //先下载到临时文件\n    var tmp = save + \".tmp\";\n    using (var web = new WebClient())\n    {\n        await web.DownloadFileTaskAsync(url, tmp);\n    }\n    File.Move(tmp, save, true);\n    Console.WriteLine(\"文件下载成功\");\n}\nConsole.WriteLine(\"开始处理文件\");\n//TODO:对文件进行处理\n</code></pre>\n<h3><a id=\"_Downloader__HTTP__211\"></a>使用 Downloader 进行 HTTP 多线程下载</h3>\n<p>在网络带宽充足的情况下，单线程下载的效率并不理想。我们需要多线程和断点续传才可以拿到更好的下载速度。</p>\n<p>Downloader 是一个现代化的、流畅的、异步的、可测试的和可移植的 .NET 库。这是一个包含异步进度事件的多线程下载程序。Downloader 与 .NET Standard 2.0 及以上版本兼容，可以在 Windows、Linux 和 macOS 上运行。</p>\n<p>GitHub 开源地址： https://github.com/bezzad/Downloader</p>\n<p>NuGet 地址：https://www.nuget.org/packages/Downloader</p>\n<p>从 NuGet 安装 Downloader 之后，创建一个下载配置：</p>\n<pre><code>var downloadOpt = new DownloadConfiguration()\n{\n    BufferBlockSize = 10240, // 通常，主机最大支持8000字节，默认值为8000。\n    ChunkCount = 8, // 要下载的文件分片数量，默认值为1\n    MaximumBytesPerSecond = 1024 * 1024, // 下载速度限制为1MB/s，默认值为零或无限制\n    MaxTryAgainOnFailover = int.MaxValue, // 失败的最大次数\n    OnTheFlyDownload = false, // 是否在内存中进行缓存？ 默认值是true\n    ParallelDownload = true, // 下载文件是否为并行的。默认值为false\n    TempDirectory = \"C:\\\\temp\", // 设置用于缓冲大块文件的临时路径，默认路径为Path.GetTempPath()。\n    Timeout = 1000, // 每个 stream reader  的超时（毫秒），默认值是1000\n    RequestConfiguration = // 定制请求头文件\n    {\n        Accept = \"*/*\",\n        AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate,\n        CookieContainer =  new CookieContainer(), // Add your cookies\n        Headers = new WebHeaderCollection(), // Add your custom headers\n        KeepAlive = false,\n        ProtocolVersion = HttpVersion.Version11, // Default value is HTTP 1.1\n        UseDefaultCredentials = false,\n        UserAgent = $\"DownloaderSample/{Assembly.GetExecutingAssembly().GetName().Version.ToString(3)}\"\n    }\n};\n</code></pre>\n<h3><a id=\"_246\"></a>创建一个下载服务：</h3>\n<p>var downloader = new DownloadService(downloadOpt);<br/> 配置事件处理器（该步骤可以省略）：</p>\n<pre><code>// Provide `FileName` and `TotalBytesToReceive` at the start of each downloads\n// 在每次下载开始时提供 \"文件名 \"和 \"要接收的总字节数\"。\ndownloader.DownloadStarted += OnDownloadStarted;\n\n// Provide any information about chunker downloads, like progress percentage per chunk, speed, total received bytes and received bytes array to live streaming.\n// 提供有关分块下载的信息，如每个分块的进度百分比、速度、收到的总字节数和收到的字节数组，以实现实时流。\ndownloader.ChunkDownloadProgressChanged += OnChunkDownloadProgressChanged;\n\n// Provide any information about download progress, like progress percentage of sum of chunks, total speed, average speed, total received bytes and received bytes array to live streaming.\n// 提供任何关于下载进度的信息，如进度百分比的块数总和、总速度、平均速度、总接收字节数和接收字节数组的实时流。\ndownloader.DownloadProgressChanged += OnDownloadProgressChanged;\n\n// Download completed event that can include occurred errors or cancelled or download completed successfully.\n// 下载完成的事件，可以包括发生错误或被取消或下载成功。\ndownloader.DownloadFileCompleted += OnDownloadFileCompleted;\n</code></pre>\n<p>接着就可以下载文件了：</p>\n<pre><code>string file = @\"D:\\1.html\";\nstring url = @\"https://www.coderbusy.com\";\nawait downloader.DownloadFileTaskAsync(url, file);\n</code></pre>\n<h3><a id=\"_HTTP__271\"></a>下载非 HTTP 协议的文件</h3>\n<p>除了 WebClient 可以下载 FTP 协议的文件之外，上文所示的其他方法只能下载 HTTP 协议的文件。</p>\n<p>aria2 是一个轻量级的多协议和多源命令行下载工具。它支持 HTTP/HTTPS、FTP、SFTP、BitTorrent 和 Metalink。aria2 可以通过内置的 JSON-RPC 和 XML-RPC 接口进行操作。</p>\n<p>我们可以调用 aria2 实现文件下载功能。</p>\n<p>GitHub 地址：https://github.com/aria2/aria2</p>\n<p>下载地址：https://github.com/aria2/aria2/releases</p>\n<p>将下载好的 aria2c.exe 复制到应用程序目录，如果是其他系统则可以下载对应的二进制文件。</p>\n<pre><code>public static async Task Download(string url, string fn)\n{\n    var exe = \"aria2c\";\n    var dir = Path.GetDirectoryName(fn);\n    var name = Path.GetFileName(fn);\n\n    void Output(object sender, DataReceivedEventArgs args)\n    {\n        if (string.IsNullOrWhiteSpace(args.Data))\n        {\n            return;\n        }\n        Console.WriteLine(\"Aria:{0}\", args.Data?.Trim());\n    }\n\n    var args = $\"-x 8 -s 8 --dir={dir} --out={name} {url}\";\n    var info = new ProcessStartInfo(exe, args)\n    {\n        UseShellExecute = false,\n        CreateNoWindow = true,\n        RedirectStandardOutput = true,\n        RedirectStandardError = true,\n    };\n    if (File.Exists(fn))\n    {\n        File.Delete(fn);\n    }\n\n    Console.WriteLine(\"启动 aria2c： {0}\", args);\n    using (var p = new Process { StartInfo = info, EnableRaisingEvents = true })\n    {\n        if (!p.Start())\n        {\n            throw new Exception(\"aria 启动失败\");\n        }\n        p.ErrorDataReceived += Output;\n        p.OutputDataReceived += Output;\n        p.BeginOutputReadLine();\n        p.BeginErrorReadLine();\n        await p.WaitForExitAsync();\n        p.OutputDataReceived -= Output;\n        p.ErrorDataReceived -= Output;\n    }\n\n    var fi = new FileInfo(fn);\n    if (!fi.Exists || fi.Length == 0)\n    {\n        throw new FileNotFoundException(\"文件下载失败\", fn);\n    }\n}\n</code></pre>\n<p>以上代码通过命令行参数启动了一个新的 aria2c 下载进程，并对下载进度信息输出在了控制台。调用方式如下：</p>\n<pre><code>var url = \"https://www.coderbusy.com\";\nvar save = @\"D:\\1.html\";\nawait Download(url, save);\n</code></pre>\n<h1><a id=\"_342\"></a>常用接口示例</h1>\n<pre><code class=\"prism language-bash\">using System<span class=\"token punctuation\">;</span>\nusing System.Collections.Generic<span class=\"token punctuation\">;</span>\nusing System.IO<span class=\"token punctuation\">;</span>\nusing System.Linq<span class=\"token punctuation\">;</span>\nusing System.Text<span class=\"token punctuation\">;</span>\nusing System.Threading.Tasks<span class=\"token punctuation\">;</span>\n\n\npublic class ComTool\n<span class=\"token punctuation\">{<!-- --></span>\n    public static long GetDiskFreeSpace<span class=\"token punctuation\">(</span>string Path<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        long freeSpace <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        var LocalDrive <span class=\"token operator\">=</span> DriveInfo.GetDrives<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> LocalDrive.Length<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            //Console.WriteLine<span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            //Console.WriteLine<span class=\"token punctuation\">(</span>string.Format<span class=\"token punctuation\">(</span><span class=\"token string\">\"驱动器名称：{0}\"</span>, LocalDrive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.Name<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n            //Console.WriteLine<span class=\"token punctuation\">(</span>string.Format<span class=\"token punctuation\">(</span><span class=\"token string\">\"存储空间大小：{0}字节\"</span>, LocalDrive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.TotalSize<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n            //Console.WriteLine<span class=\"token punctuation\">(</span>string.Format<span class=\"token punctuation\">(</span><span class=\"token string\">\"可用空间大小：{0}字节\"</span>, LocalDrive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.AvailableFreeSpace<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n            //Console.WriteLine<span class=\"token punctuation\">(</span>string.Format<span class=\"token punctuation\">(</span><span class=\"token string\">\"可用空闲空间：{0}字节\"</span>, LocalDrive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.TotalFreeSpace<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n            //Console.WriteLine<span class=\"token punctuation\">(</span>string.Format<span class=\"token punctuation\">(</span><span class=\"token string\">\"文件系统：{0}\"</span>, LocalDrive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.DriveFormat<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n            //Console.WriteLine<span class=\"token punctuation\">(</span>string.Format<span class=\"token punctuation\">(</span><span class=\"token string\">\"驱动器类型：{0}\"</span>, LocalDrive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.DriveType<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n            //Console.WriteLine<span class=\"token punctuation\">(</span>string.Format<span class=\"token punctuation\">(</span><span class=\"token string\">\"驱动器IsReady：{0}\"</span>, LocalDrive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.IsReady<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n            //Console.WriteLine<span class=\"token punctuation\">(</span>string.Format<span class=\"token punctuation\">(</span><span class=\"token string\">\"驱动器的根目录：{0}\"</span>, LocalDrive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.RootDirectory<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n            //Console.WriteLine<span class=\"token punctuation\">(</span>string.Format<span class=\"token punctuation\">(</span><span class=\"token string\">\"驱动器卷标：{0}\"</span>, LocalDrive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.VolumeLabel<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Path.Contains<span class=\"token punctuation\">(</span>LocalDrive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.RootDirectory.Name<span class=\"token punctuation\">))</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console.WriteLine<span class=\"token punctuation\">(</span>string.Format<span class=\"token punctuation\">(</span><span class=\"token string\">\"可用空间大小：{0}字节\"</span>, LocalDrive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.AvailableFreeSpace<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n                freeSpace <span class=\"token operator\">=</span> LocalDrive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.AvailableFreeSpace<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token builtin class-name\">return</span> freeSpace<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    /// <span class=\"token operator\">&lt;</span>summary<span class=\"token operator\">&gt;</span>\n    /// 转换方法\n    /// <span class=\"token operator\">&lt;</span>/summary<span class=\"token operator\">&gt;</span>\n    /// <span class=\"token operator\">&lt;</span>param <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"size\"</span><span class=\"token operator\">&gt;</span>字节值<span class=\"token operator\">&lt;</span>/param<span class=\"token operator\">&gt;</span>\n    /// <span class=\"token operator\">&lt;</span>returns<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>/returns<span class=\"token operator\">&gt;</span>\n    public static String HumanReadableFilesize<span class=\"token punctuation\">(</span>double size<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n         \n        String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">units</span> <span class=\"token operator\">=</span> new String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"B\"</span>, <span class=\"token string\">\"KB\"</span>, <span class=\"token string\">\"MB\"</span>, <span class=\"token string\">\"GB\"</span>, <span class=\"token string\">\"TB\"</span>, <span class=\"token string\">\"PB\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        double mod <span class=\"token operator\">=</span> <span class=\"token number\">1024.0</span><span class=\"token punctuation\">;</span>\n        int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">&gt;=</span> mod<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            size /<span class=\"token operator\">=</span> mod<span class=\"token punctuation\">;</span>\n            i++<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token builtin class-name\">return</span> Math.Round<span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> + units<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}