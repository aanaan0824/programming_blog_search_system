{"blogid": "124823869", "writerAge": "码龄2年", "writerBlogNum": "12", "writerCollect": "15", "writerComment": "3", "writerFan": "2", "writerGrade": "2级", "writerIntegral": "134", "writerName": "汁橙c", "writerProfileAdress": "writer_image\\profile_124823869.jpg", "writerRankTotal": "116099", "writerRankWeekly": "198733", "writerThumb": "10", "writerVisitNum": "13501", "blog_read_count": "1409", "blog_time": "已于 2022-05-17 18:08:13 修改", "blog_title": "初步认识C#的IO操作 创建文件篇 #创建文件和文件夹", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night-eighties\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>IO操作</h3>\n<ul><li><a href=\"#_Directory_1\">一. Directory（文件夹）相关操作</a></li><li><ul><li><a href=\"#1_Directory__2\">1. Directory 类</a></li><li><a href=\"#2_DirectoryInfo__19\">2. DirectoryInfo 类</a></li></ul>\n</li><li><a href=\"#_File_30\">二. File（文件）相关操作</a></li><li><ul><li><a href=\"#1_File__31\">1. File 类</a></li><li><a href=\"#2_FileInfo__61\">2. FileInfo 类</a></li><li><ul><li><a href=\"#_63\">常用属性</a></li><li><a href=\"#_86\">常用方法</a></li></ul>\n</li></ul>\n</li><li><a href=\"#__106\">三. 实操</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_Directory_1\"></a>一. Directory（文件夹）相关操作</h1>\n<h2><a id=\"1_Directory__2\"></a>1. Directory 类</h2>\n<p>详细信息见 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.directory?view=net-6.0\">Directory C# 官方文档</a>；<br/> 简单的介绍一下 <code>Directory</code> 类中一些常用的静态方法：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// 在指定路径(path)中创建 [所有目录和子目录]</span>\n<span class=\"token comment\">// 如果路径存在就不创建，直接返回已有的路径文件夹信息</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">DirectoryInfo</span> <span class=\"token function\">CreateDirectory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 如果 path 下的文件夹存在，并且是空文件夹，就删除</span>\n<span class=\"token comment\">// 如果文件夹不是空的，就会报错</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 删除 path 下的文件夹，由 recursive 决定是否包括所有子目录和文件</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> recursive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 判断 path 下的文件夹是否存在</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"2_DirectoryInfo__19\"></a>2. DirectoryInfo 类</h2>\n<p>详细信息见 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.directoryinfo?view=net-6.0\">Directory C# 官方文档</a>；</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// 创建文件夹，如果文件夹存在，则不进行任何操作</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 删除文件夹</span>\n<span class=\"token comment\">// 和 Directory 一样</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> recursive<span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"_File_30\"></a>二. File（文件）相关操作</h1>\n<h2><a id=\"1_File__31\"></a>1. File 类</h2>\n<p>使用到的相关类：</p>\n<table><thead><tr><th>类名</th><th align=\"left\">\n<center>\n     作用\n    </center></th></tr></thead><tbody><tr><td><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.file?view=net-6.0\">File</a></td><td align=\"left\">提供用于<mark>创建</mark>、<mark>复制</mark>、<mark>删除</mark>、<mark>移动</mark>和<mark>打开单一文件</mark>的静态方法，并协助创建 FileStream 对象</td></tr><tr><td><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0\">FileStream</a></td><td align=\"left\">提供对 path（路径） 中指定的文件的读/写访问</td></tr></tbody></table>\n<p><code>File</code> 是一个静态类，提供各种操作文件相关的方法，常用的如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// 在指定 path 创建文件，如果有可写的同名文件就覆盖</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">FileStream</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 删除 path 位置的文件</span>\n<span class=\"token comment\">// 要确保删除文件存在，否则会报错</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 判断 path 位置的文件是否存在</span>\n<span class=\"token comment\">// 如果路径不存在会返回 false</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span>；\n\n<span class=\"token comment\">// 将文件从 sourceFileName 复制到 destFileName，不允许覆盖同名文件</span>\n<span class=\"token comment\">// sourceFileName 是要复制的文件</span>\n<span class=\"token comment\">// destFileName 是目标文件的名称，不能是一个目录或现有文件。</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourceFileName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> destFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 同上，不过 overwrite 决定是否覆盖同名文件</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourceFileName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> destFileName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 移动文件</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Move</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourceFileName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> destFileName<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"2_FileInfo__61\"></a>2. FileInfo 类</h2>\n<p>详细信息见 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo?view=net-6.0\">FileInfo C# 官方文档</a>;</p>\n<h3><a id=\"_63\"></a>常用属性</h3>\n<p><code>FileInfo</code> 类是不能被继承的非静态类，提供各种操作文件相关的方法。<br/> 属性介绍：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// 得到文件的文件夹信息</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DirectoryInfo</span> Directory <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 得到文件夹的文件夹名</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> DirectoryName <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 文件名</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 文件的整个路径</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> FullName <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>下列是 <code>path</code> 为 <code>D:\\TestDir\\Assets\\TestFile.txt</code> 的例子，并用表格表示：</p>\n<table><thead><tr><th>FullName</th><th align=\"left\"><code>D:\\TestDir\\Assets\\TestFile.txt</code></th></tr></thead><tbody><tr><td>Name</td><td align=\"left\"><code>TestFile.txt</code></td></tr><tr><td>DirectoryName</td><td align=\"left\"><code>D:\\TestDir\\Assets</code></td></tr><tr><td>Exists</td><td align=\"left\"><code>false</code> (如果文件不存在) <code>true</code> (如果文件存在)</td></tr></tbody></table>\n<h3><a id=\"_86\"></a>常用方法</h3>\n<p>常用方法的如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// 复制文件到 destFileName ，并不覆盖同名文件</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">FileInfo</span> <span class=\"token function\">CopyTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> destFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 复制文件到 destFileName ，并由 overwrite 决定是否覆盖同名文件</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">FileInfo</span> <span class=\"token function\">CopyTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> destFileName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> overwrite<span class=\"token punctuation\">)</span>；\n\n<span class=\"token comment\">// 创建文件</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">FileStream</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 删除文件</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>还是在 <code>path</code> 为 <code>D:\\TestDir\\Assets\\TestFile.txt</code> 下进行测试：</p>\n<table><thead><tr><th>方法</th><th align=\"left\">\n<center>\n     结果\n    </center></th></tr></thead><tbody><tr><td>Create</td><td align=\"left\"><mark>如果不存在路径文件夹，则直接报错</mark>。如果存在 <code>D:\\TestDir\\Assets</code> 路径，则会在该路径下创建名为 <code>TestFile.txt</code> 的文件。如果存在相同名称文件，则覆盖</td></tr><tr><td>Delete</td><td align=\"left\"><mark>如果路径和文件存不存在，都不会报错</mark></td></tr></tbody></table>\n<h1><a id=\"__106\"></a>三. 实操</h1>\n<p>给定一个路径，创建该路径下的文件或文件夹：</p>\n<blockquote>\n<p>要求：</p>\n<blockquote>\n<ul><li>如果路径不存在，则创建，否则不做任何事</li><li>如果路径带后缀名，则创建文件，否则创建文件夹</li></ul>\n</blockquote>\n<p>当然还可以有更多的选项</p>\n</blockquote>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CreateFileOrDirectory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CreateType</span> createType <span class=\"token operator\">=</span> CreateType<span class=\"token punctuation\">.</span>DoNothing<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n    \t<span class=\"token class-name\">FileInfo</span> fileInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FileInfo</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">CreateFile</span><span class=\"token punctuation\">(</span>fileInfo<span class=\"token punctuation\">,</span> createType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Directory<span class=\"token punctuation\">.</span><span class=\"token function\">CreateDirectory</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CreateFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileInfo</span> fileInfo<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CreateType</span> createType <span class=\"token operator\">=</span> CreateType<span class=\"token punctuation\">.</span>DoNothing<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fileInfo<span class=\"token punctuation\">.</span>Exists<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>createType<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">case</span> CreateType<span class=\"token punctuation\">.</span>Overrite<span class=\"token punctuation\">:</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                \tfileInfo<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> CreateType<span class=\"token punctuation\">.</span>NewName<span class=\"token punctuation\">:</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> directoryName <span class=\"token operator\">=</span> fileInfo<span class=\"token punctuation\">.</span>DirectoryName<span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> fileName <span class=\"token operator\">=</span> fileInfo<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">;</span>\n\n                    <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> fileNameAndSuffix <span class=\"token operator\">=</span> fileName<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> fileHead <span class=\"token operator\">=</span> fileNameAndSuffix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> suffix <span class=\"token operator\">=</span> fileNameAndSuffix<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> newFilePath<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">do</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> newFileName <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">fileHead</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">suffix</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n                        newFilePath <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$@\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">directoryName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">newFileName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n                        \n                        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span>newFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    File<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>newFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> CreateType<span class=\"token punctuation\">.</span>DoNothing<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Directory<span class=\"token punctuation\">.</span><span class=\"token function\">CreateDirectory</span><span class=\"token punctuation\">(</span>fileInfo<span class=\"token punctuation\">.</span>DirectoryName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">// 创建完文件，记得关闭</span>\n    \tfileInfo<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n        \n<span class=\"token comment\">// 创建文件的方式</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">CreateType</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Overrite<span class=\"token punctuation\">,</span>\n    NewName<span class=\"token punctuation\">,</span>\n    DoNothing<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}