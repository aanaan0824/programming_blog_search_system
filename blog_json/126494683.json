{"blogid": "126494683", "writerAge": "码龄7年", "writerBlogNum": "67", "writerCollect": "757", "writerComment": "1328", "writerFan": "1192", "writerGrade": "5级", "writerIntegral": "3269", "writerName": "会敲键盘的肘子", "writerProfileAdress": "writer_image\\profile_126494683.jpg", "writerRankTotal": "5745", "writerRankWeekly": "36", "writerThumb": "1044", "writerVisitNum": "132754", "blog_read_count": "3988", "blog_time": "于 2022-08-23 23:01:34 发布", "blog_title": "【.Net实用方法总结】 整理并总结System.IO中FileInfo类及其方法介绍", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>🐋作者简介：博主是一位.Net开发者，同时也是RPA和低代码平台的践行者。<br/> 🐬个人主页：<a href=\"https://blog.csdn.net/baidu_33146219?type=blog\">会敲键盘的肘子</a><br/> 🐰系列专栏：<a href=\"https://blog.csdn.net/baidu_33146219/category_11968078.html?spm=1001.2014.3001.5482\">.Net实用方法总结</a><br/> 🦀专栏简介：博主针对.Net开发和C站问答过程中遇到的问题进行总结，形成本专栏，希望可以帮助到您解决问题。<br/> 🐶座右铭：总有一天你所坚持的会反过来拥抱你。</p>\n</blockquote>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fdd6f46774c74288bd7715708beeae50.png\"/></p>\n<blockquote>\n<p>🌈写在前面：</p>\n<p>本文主要介绍<strong>System.IO</strong>命名空间的<strong>FileInfo</strong> 类，介绍其常用的方法和示例说明。</p>\n</blockquote>\n<hr/>\n<p><strong>👉本文关键字：System.IO、FileInfo类、文件信息、方法示例、C#</strong></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><ul><li><a href=\"#1_SystemIO_21\">1️⃣ System.IO命名空间</a></li><li><a href=\"#2_FileInfo_45\">2️⃣ FileInfo类</a></li><li><ul><li><a href=\"#__47\">♈ 定义</a></li><li><a href=\"#__55\">♉ 构造函数</a></li><li><ul><li><a href=\"#FileInfoString__FileInfo__57\">FileInfo(String) 初始化作为文件路径的包装的 FileInfo 类的新实例</a></li></ul>\n</li><li><a href=\"#__173\">♊ 字段</a></li><li><ul><li><a href=\"#_175\">表示目录或文件的完全限定目录</a></li></ul>\n</li><li><a href=\"#__181\">♋ 属性</a></li><li><ul><li><a href=\"#CreationTime__183\">CreationTime 获取或设置当前文件或目录的创建时间</a></li><li><a href=\"#Directory__189\">Directory 获取父目录的实例</a></li><li><a href=\"#DirectoryName__195\">DirectoryName 获取表示目录的完整路径的字符串</a></li><li><a href=\"#Exists__201\">Exists 获取指示目录是否存在的值</a></li><li><a href=\"#Extension__207\">Extension 获取文件名的扩展名部分，包括前导点即使它是整个文件名，或者不存在扩展名的空字符串</a></li><li><a href=\"#FullName__213\">FullName 获取目录或文件的完整目录</a></li><li><a href=\"#Name__DirectoryInfo__219\">Name 获取此 DirectoryInfo 实例的名称</a></li><li><a href=\"#Length__227\">Length 获取当前文件的大小（以字节为单位）</a></li></ul>\n</li><li><a href=\"#__280\">♌ 常用方法</a></li><li><ul><li><a href=\"#AppendText__StreamWriter_FileInfo__282\">AppendText() 创建一个 StreamWriter，它向 FileInfo 的此实例表示的文件追加文本</a></li><li><a href=\"#CopyString_Boolean__394\">Copy(String, Boolean) 将现有文件复制到新文件，允许覆盖现有文件</a></li><li><a href=\"#Create__511\">Create() 创建文件</a></li><li><a href=\"#Delete__595\">Delete() 永久删除文件</a></li><li><a href=\"#MoveToString___669\">MoveTo(String) 将指定文件移到新位置，提供要指定新文件名的选项</a></li></ul>\n</li><li><a href=\"#__1012\">♍ 注解</a></li><li><a href=\"#__1023\">♎ 更多方法</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h3><a id=\"1_SystemIO_21\"></a>1️⃣ System.IO命名空间</h3>\n<p>.NET中的IO操作命名空间，包含允许<strong>读写文件</strong>和<strong>数据流</strong>的类型以及提供基本<strong>文件和目录支持</strong>的类型。</p>\n<p>我们在.NET中的IO操作，经常需要调用一下几个类。</p>\n<ul><li><strong>FileStream类</strong></li></ul>\n<p>​ 文件流类，负责大文件的拷贝，读写。</p>\n<ul><li><strong>Path类</strong></li></ul>\n<p>​ Path类中方法，基本都是对字符串（文件名）的操作，与实际文件没多大关系。</p>\n<ul><li> <p><strong>File类</strong></p> <p>File类可以进行一些对小文件拷贝、剪切操作，还能读一些文档文件。</p> </li><li> <p><strong>Dirctory类</strong></p> <p>目录操作，创建文件、删除目录，获取目录下文件名等等。</p> </li></ul>\n<h3><a id=\"2_FileInfo_45\"></a>2️⃣ FileInfo类</h3>\n<h4><a id=\"__47\"></a>♈ 定义</h4>\n<p>提供用于创建、复制、删除、移动和打开文件的属性和实例方法，并且帮助创建 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0\">FileStream</a> 对象。 此类不能被继承。</p>\n<pre><code class=\"prism language-C#\">public sealed class FileInfo : System.IO.FileSystemInfo\n</code></pre>\n<h4><a id=\"__55\"></a>♉ 构造函数</h4>\n<h5><a id=\"FileInfoString__FileInfo__57\"></a>FileInfo(String) 初始化作为文件路径的包装的 FileInfo 类的新实例</h5>\n<pre><code class=\"prism language-C#\">public FileInfo (string fileName);\n</code></pre>\n<p><strong>参数</strong></p>\n<blockquote>\n<p><code>fileName</code></p>\n<p><strong>string</strong></p>\n<p>新文件的完全限定名或相对文件名。 路径不要以目录分隔符结尾。</p>\n</blockquote>\n<p><strong>示例</strong></p>\n<p>以下示例使用此构造函数创建两个文件，然后写入、读取、复制和删除。</p>\n<pre><code class=\"prism language-C#\">using System;\nusing System.IO;\n\nclass Test\n{\n    \n    public static void Main()\n    {\n        string path = @\"c:\\temp\\MyTest.txt\";\n        FileInfo fi1 = new FileInfo(path);\n\n        if (!fi1.Exists)\n        {\n            //Create a file to write to.\n            using (StreamWriter sw = fi1.CreateText())\n            {\n                sw.WriteLine(\"Hello\");\n                sw.WriteLine(\"And\");\n                sw.WriteLine(\"Welcome\");\n            }\t\n        }\n\n        //Open the file to read from.\n        using (StreamReader sr = fi1.OpenText())\n        {\n            string s = \"\";\n            while ((s = sr.ReadLine()) != null)\n            {\n                Console.WriteLine(s);\n            }\n        }\n\n        try\n        {\n            string path2 = path + \"temp\";\n            FileInfo fi2 = new FileInfo(path2);\n\n            //Ensure that the target does not exist.\n            fi2.Delete();\n\n            //Copy the file.\n            fi1.CopyTo(path2);\n            Console.WriteLine(\"{0} was copied to {1}.\", path, path2);\n\n            //Delete the newly created file.\n            fi2.Delete();\n            Console.WriteLine(\"{0} was successfully deleted.\", path2);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(\"The process failed: {0}\", e.ToString());\n        }\n    }\n}\n//This code produces output similar to the following;\n//results may vary based on the computer/file structure/etc.:\n//\n//Hello\n//And\n//Welcome\n//c:\\MyTest.txt was copied to c:\\MyTest.txttemp.\n//c:\\MyTest.txttemp was successfully deleted.\n</code></pre>\n<p>以下示例打开现有文件或创建文件，将文本追加到文件，并显示结果。</p>\n<pre><code class=\"prism language-c#\">using System;\nusing System.IO;\n\npublic class FileInfoMainTest\n{\n    public static void Main()\n    {\n        // Open an existing file, or create a new one.\n        FileInfo fi = new FileInfo(\"temp.txt\");\n        // Create a writer, ready to add entries to the file.\n        StreamWriter sw = fi.AppendText();\n        sw.WriteLine(\"This is a new entry to add to the file\");\n        sw.WriteLine(\"This is yet another line to add...\");\n        sw.Flush();\n        sw.Close();\n        // Get the information out of the file and display it.\n        StreamReader sr = new StreamReader( fi.OpenRead() );\n        while (sr.Peek() != -1)\n            Console.WriteLine( sr.ReadLine() );\n    }\n}\n//This code produces output similar to the following;\n//results may vary based on the computer/file structure/etc.:\n//\n//Add as many lines as you like...\n//Add another line to the output...\n//This is a new entry to add to the file\n//This is yet another line to add...\n</code></pre>\n<h4><a id=\"__173\"></a>♊ 字段</h4>\n<h5><a id=\"_175\"></a>表示目录或文件的完全限定目录</h5>\n<pre><code class=\"prism language-C#\">protected string FullPath;\n</code></pre>\n<h4><a id=\"__181\"></a>♋ 属性</h4>\n<h5><a id=\"CreationTime__183\"></a>CreationTime 获取或设置当前文件或目录的创建时间</h5>\n<pre><code class=\"prism language-C#\">public DateTime CreationTime { get; set; }\n</code></pre>\n<h5><a id=\"Directory__189\"></a>Directory 获取父目录的实例</h5>\n<pre><code class=\"prism language-C#\">public System.IO.DirectoryInfo? Directory { get; }\n</code></pre>\n<h5><a id=\"DirectoryName__195\"></a>DirectoryName 获取表示目录的完整路径的字符串</h5>\n<pre><code class=\"prism language-C#\">public string? DirectoryName { get; }\n</code></pre>\n<h5><a id=\"Exists__201\"></a>Exists 获取指示目录是否存在的值</h5>\n<pre><code class=\"prism language-c#\">public abstract bool Exists { get; }\n</code></pre>\n<h5><a id=\"Extension__207\"></a>Extension 获取文件名的扩展名部分，包括前导点即使它是整个文件名，或者不存在扩展名的空字符串</h5>\n<pre><code class=\"prism language-c#\">public string Extension { get; }\n</code></pre>\n<h5><a id=\"FullName__213\"></a>FullName 获取目录或文件的完整目录</h5>\n<pre><code class=\"prism language-c#\">public virtual string FullName { get; }\n</code></pre>\n<h5><a id=\"Name__DirectoryInfo__219\"></a>Name 获取此 DirectoryInfo 实例的名称</h5>\n<pre><code class=\"prism language-c#\">public override string Name { get; }\n</code></pre>\n<blockquote>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.directoryinfo.name?view=net-6.0\">Name</a>此属性仅返回目录的名称，例如\"Bin\"。 若要获取完整路径，例如\"c：\\public\\Bin\"，请使用 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.filesysteminfo.fullname?view=net-6.0\">FullName</a> 属性。</p>\n</blockquote>\n<h5><a id=\"Length__227\"></a>Length 获取当前文件的大小（以字节为单位）</h5>\n<pre><code class=\"prism language-c#\">public long Length { get; }\n</code></pre>\n<p><strong>示例</strong></p>\n<p>以下示例显示指定文件的大小</p>\n<pre><code class=\"prism language-c#\">// The following example displays the names and sizes\n// of the files in the specified directory.\nusing System;\nusing System.IO;\n\npublic class FileLength\n{\n    public static void Main()\n    {\n        // Make a reference to a directory.\n        DirectoryInfo di = new DirectoryInfo(\"c:\\\\\");\n        // Get a reference to each file in that directory.\n        FileInfo[] fiArr = di.GetFiles();\n        // Display the names and sizes of the files.\n        Console.WriteLine(\"The directory {0} contains the following files:\", di.Name);\n        foreach (FileInfo f in fiArr)\n            Console.WriteLine(\"The size of {0} is {1} bytes.\", f.Name, f.Length);\n    }\n}\n//This code produces output similar to the following;\n//results may vary based on the computer/file structure/etc.:\n//\n//The directory c:\\ contains the following files:\n//The size of MyComputer.log is 274 bytes.\n//The size of AUTOEXEC.BAT is 0 bytes.\n//The size of boot.ini is 211 bytes.\n//The size of CONFIG.SYS is 0 bytes.\n//The size of hiberfil.sys is 1072775168 bytes.\n//The size of IO.SYS is 0 bytes.\n//The size of MASK.txt is 2700 bytes.\n//The size of mfc80.dll is 1093632 bytes.\n//The size of mfc80u.dll is 1079808 bytes.\n//The size of MSDOS.SYS is 0 bytes.\n//The size of NTDETECT.COM is 47564 bytes.\n//The size of ntldr is 250032 bytes.\n//The size of pagefile.sys is 1610612736 bytes.\n//The size of UpdatePatch.log is 22778 bytes.\n//The size of UpdatePatch.txt is 30 bytes.\n//The size of wt3d.ini is 234 bytes.\n</code></pre>\n<h4><a id=\"__280\"></a>♌ 常用方法</h4>\n<h5><a id=\"AppendText__StreamWriter_FileInfo__282\"></a>AppendText() 创建一个 StreamWriter，它向 FileInfo 的此实例表示的文件追加文本</h5>\n<pre><code class=\"prism language-C#\">public System.IO.StreamWriter AppendText ();\n</code></pre>\n<p><strong>返回</strong></p>\n<blockquote>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter?view=net-6.0\">StreamWriter</a></p>\n<p>在 <code>path</code> 中指定的最后一个目录。</p>\n</blockquote>\n<p><strong>示例</strong></p>\n<p>以下示例将文本追加到文件中，并从文件中读取。</p>\n<pre><code class=\"prism language-C#\">using System;\nusing System.IO;\n\nclass Test\n{\n    \n    public static void Main()\n    {\n        FileInfo fi = new FileInfo(@\"c:\\MyTest.txt\");\n\n        // This text is added only once to the file.\n        if (!fi.Exists)\n        {\n            //Create a file to write to.\n            using (StreamWriter sw = fi.CreateText())\n            {\n                sw.WriteLine(\"Hello\");\n                sw.WriteLine(\"And\");\n                sw.WriteLine(\"Welcome\");\n            }\t\n        }\n\n        // This text will always be added, making the file longer over time\n        // if it is not deleted.\n        using (StreamWriter sw = fi.AppendText())\n        {\n            sw.WriteLine(\"This\");\n            sw.WriteLine(\"is Extra\");\n            sw.WriteLine(\"Text\");\n        }\t\n\n        //Open the file to read from.\n        using (StreamReader sr = fi.OpenText())\n        {\n            string s = \"\";\n            while ((s = sr.ReadLine()) != null)\n            {\n                Console.WriteLine(s);\n            }\n        }\n    }\n}\n//This code produces output similar to the following;\n//results may vary based on the computer/file structure/etc.:\n//\n//Hello\n//And\n//Welcome\n//This\n//is Extra\n//Text\n\n//When you run this application a second time, you will see the following output:\n//\n//Hello\n//And\n//Welcome\n//This\n//is Extra\n//Text\n//This\n//is Extra\n//Text\n</code></pre>\n<p>以下示例演示如何将文本追加到文件末尾，并显示追加操作的结果。 首次调用此例程时，如果该文件不存在，则会创建该文件。 之后，指定的文本将追加到文件。</p>\n<pre><code class=\"prism language-c#\">using System;\nusing System.IO;\n\npublic class AppendTextTest\n{\n    public static void Main()\n    {\n        FileInfo fi = new FileInfo(\"temp.txt\");\n        // Create a writer, ready to add entries to the file.\n        StreamWriter sw = fi.AppendText();\n        sw.WriteLine(\"Add as many lines as you like...\");\n        sw.WriteLine(\"Add another line to the output...\");\n        sw.Flush();\n        sw.Close();\n        // Get the information out of the file and display it.\n        // Remember that the file might have other lines if it already existed.\n        StreamReader sr = new StreamReader(fi.OpenRead());\n        while (sr.Peek() != -1)\n            Console.WriteLine( sr.ReadLine() );\n    }\n}\n//This code produces output similar to the following;\n//results may vary based on the computer/file structure/etc.:\n//Add as many lines as you like...\n//Add another line to the output...\n</code></pre>\n<h5><a id=\"CopyString_Boolean__394\"></a>Copy(String, Boolean) 将现有文件复制到新文件，允许覆盖现有文件</h5>\n<pre><code class=\"prism language-C#\">public System.IO.FileInfo CopyTo (string destFileName, bool overwrite);\n</code></pre>\n<p><strong>参数</strong></p>\n<blockquote>\n<p><code>destFileName</code></p>\n<p><strong>string</strong></p>\n<p>要复制到的新文件的名称。</p>\n<p><code>overwrite</code></p>\n<p><strong>bool</strong></p>\n<p>如果可以覆盖目标文件，则为 <code>true</code>；否则为 <code>false</code>。</p>\n</blockquote>\n<p><strong>返回</strong></p>\n<blockquote>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo?view=net-6.0\">FileInfo</a></p>\n<p>为新文件；如果 <code>overwrite</code> 是 <code>true</code>，则为现有文件的覆盖。 如果文件存在且 <code>overwrite</code> 为 <code>false</code>，则引发 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.ioexception?view=net-6.0\">IOException</a>。</p>\n</blockquote>\n<p><strong>示例</strong></p>\n<p>以下示例演示了方法的两个 <code>CopyTo</code> 重载。</p>\n<pre><code class=\"prism language-C#\">using System;\nusing System.IO;\n\nclass Test\n{\n\n    public static void Main()\n    {\n        string path = @\"c:\\SoureFile.txt\";\n        string path2 = @\"c:\\NewFile.txt\";\n        FileInfo fi1 = new FileInfo(path);\n        FileInfo fi2 = new FileInfo(path2);\n\n        try\n        {\n            // Create the source file.\n            using (FileStream fs = fi1.Create()) { }\n\n            //Ensure that the target file does not exist.\n            if (File.Exists(path2))\n            {\n                fi2.Delete();\n            }\n\n            //Copy the file.f\n            fi1.CopyTo(path2);\n            Console.WriteLine(\"{0} was copied to {1}.\", path, path2);\n        }\n        catch (IOException ioex)\n        {\n            Console.WriteLine(ioex.Message);\n        }\n    }\n}\n</code></pre>\n<p>以下示例演示如何将一个文件复制到另一个文件，指定是否覆盖已存在的文件。</p>\n<pre><code class=\"prism language-c#\">using System;\nusing System.IO;\n\npublic class CopyToTest\n{\n    public static void Main()\n    {\n        // Create a reference to a file, which might or might not exist.\n        // If it does not exist, it is not yet created.\n        FileInfo fi = new FileInfo(\"temp.txt\");\n        // Create a writer, ready to add entries to the file.\n        StreamWriter sw = fi.AppendText();\n        sw.WriteLine(\"Add as many lines as you like...\");\n        sw.WriteLine(\"Add another line to the output...\");\n        sw.Flush();\n        sw.Close();\n        // Get the information out of the file and display it.\n        StreamReader sr = new StreamReader( fi.OpenRead() );\n        Console.WriteLine(\"This is the information in the first file:\");\n        while (sr.Peek() != -1)\n            Console.WriteLine( sr.ReadLine() );\n        // Copy this file to another file. The true parameter specifies\n        // that the file will be overwritten if it already exists.\n        FileInfo newfi = fi.CopyTo(\"newTemp.txt\", true);\n        // Get the information out of the new file and display it.\n        sr = new StreamReader( newfi.OpenRead() );\n        Console.WriteLine(\"{0}This is the information in the second file:\", Environment.NewLine);\n        while (sr.Peek() != -1)\n            Console.WriteLine( sr.ReadLine() );\n    }\n}\n//This code produces output similar to the following;\n//results may vary based on the computer/file structure/etc.:\n//\n//This is the information in the first file:\n//Add as many lines as you like...\n//Add another line to the output...\n//Add as many lines as you like...\n//Add another line to the output...\n\n//This is the information in the second file:\n//Add as many lines as you like...\n//Add another line to the output...\n//Add as many lines as you like...\n//Add another line to the output...\n</code></pre>\n<h5><a id=\"Create__511\"></a>Create() 创建文件</h5>\n<pre><code class=\"prism language-C#\">public System.IO.FileStream Create ();\n</code></pre>\n<p><strong>返回</strong></p>\n<blockquote>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0\">FileStream</a></p>\n<p>新文件。</p>\n</blockquote>\n<p><strong>示例</strong></p>\n<p>以下示例创建对文件的引用，然后使用该文件在磁盘 <code>FileInfo.Create()</code>上创建该文件。</p>\n<pre><code class=\"prism language-C#\">using System;\nusing System.IO;\n\npublic class DeleteTest\n{\n    public static void Main()\n    {\n        // Create a reference to a file.\n        FileInfo fi = new FileInfo(\"temp.txt\");\n        // Actually create the file.\n        FileStream fs = fi.Create();\n        // Modify the file as required, and then close the file.\n        fs.Close();\n        // Delete the file.\n        fi.Delete();\n    }\n}\n</code></pre>\n<p>以下示例创建一个文件，向该文件添加一些文本，并从该文件中读取。</p>\n<pre><code class=\"prism language-c#\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test\n{\n    \n    public static void Main()\n    {\n        string path = @\"c:\\MyTest.txt\";\n        FileInfo fi = new FileInfo(path);\n\n        // Delete the file if it exists.\n        if (fi.Exists)\n        {\n            fi.Delete();\n        }\n\n        //Create the file.\n        using (FileStream fs = fi.Create())\n        {\n            Byte[] info =\n                new UTF8Encoding(true).GetBytes(\"This is some text in the file.\");\n\n            //Add some information to the file.\n            fs.Write(info, 0, info.Length);\n        }\n\n        //Open the stream and read it back.\n        using (StreamReader sr = fi.OpenText())\n        {\n            string s = \"\";\n            while ((s = sr.ReadLine()) != null)\n            {\n                Console.WriteLine(s);\n            }\n        }\n    }\n}\n//This code produces output similar to the following;\n//results may vary based on the computer/file structure/etc.:\n//\n//This is some text in the file.\n</code></pre>\n<h5><a id=\"Delete__595\"></a>Delete() 永久删除文件</h5>\n<pre><code class=\"prism language-C#\">public override void Delete ();\n</code></pre>\n<p><strong>示例</strong></p>\n<p>下面的示例演示 <code>Delete</code> 方法</p>\n<pre><code class=\"prism language-C#\">using System;\nusing System.IO;\n\nclass Test\n{\n    \n    public static void Main()\n    {\n        string path = @\"c:\\MyTest.txt\";\n        FileInfo fi1 = new FileInfo(path);\n\n        try\n        {\n            using (StreamWriter sw = fi1.CreateText()) {}\n            string path2 = path + \"temp\";\n            FileInfo fi2 = new FileInfo(path2);\n\n            //Ensure that the target does not exist.\n            fi2.Delete();\n\n            //Copy the file.\n            fi1.CopyTo(path2);\n            Console.WriteLine(\"{0} was copied to {1}.\", path, path2);\n\n            //Delete the newly created file.\n            fi2.Delete();\n            Console.WriteLine(\"{0} was successfully deleted.\", path2);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(\"The process failed: {0}\", e.ToString());\n        }\n    }\n}\n//This code produces output similar to the following;\n//results may vary based on the computer/file structure/etc.:\n//\n//c:\\MyTest.txt was copied to c:\\MyTest.txttemp.\n//c:\\MyTest.txttemp was successfully deleted.\n</code></pre>\n<p>以下示例创建、关闭和删除文件。</p>\n<pre><code class=\"prism language-c#\">using System;\nusing System.IO;\n\npublic class DeleteTest\n{\n    public static void Main()\n    {\n        // Create a reference to a file.\n        FileInfo fi = new FileInfo(\"temp.txt\");\n        // Actually create the file.\n        FileStream fs = fi.Create();\n        // Modify the file as required, and then close the file.\n        fs.Close();\n        // Delete the file.\n        fi.Delete();\n    }\n}\n</code></pre>\n<h5><a id=\"MoveToString___669\"></a>MoveTo(String) 将指定文件移到新位置，提供要指定新文件名的选项</h5>\n<pre><code class=\"prism language-C#\">public void MoveTo (string destFileName);\n</code></pre>\n<p><strong>参数</strong></p>\n<blockquote>\n<p><code>destFileName</code></p>\n<p><strong>string</strong></p>\n<p>要将文件移动到的路径，可以指定不同的文件名。</p>\n</blockquote>\n<p><strong>示例</strong></p>\n<p>以下示例演示如何将文件移动到其他位置并重命名该文件。</p>\n<pre><code class=\"prism language-C#\">using System;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\nusing System.IO;\nusing System.Reflection;\nusing System.Security.Permissions;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Xml;\n\nnamespace Microsoft.Samples.MoveTo.CS\n{\n\n    class Program\n    {\n        private static string sourcePath = Environment.GetFolderPath\n            (Environment.SpecialFolder.MyDocuments) +\n            @\"\\FileInfoTestDirectory\\MoveFrom\\FromFile.xml\";\n        \n        private static string destPath = Environment.GetFolderPath\n            (Environment.SpecialFolder.MyDocuments) +\n            @\"\\FileInfoTestDirectory\\DestFile.xml\";\n        //\n        // The main entry point for the application.\n        //\n        [STAThread()] static void Main ()\n        {\n            // Change Console properties to make it obvious that\n            // the application is starting.\n            Console.Clear();\n            // Move it to the upper left corner of the screen.\n            Console.SetWindowPosition(0, 0);\n            // Make it very large.\n            Console.SetWindowSize(Console.LargestWindowWidth - 24,\n                Console.LargestWindowHeight - 16);\n            Console.WriteLine(\"Welcome.\");\n            Console.WriteLine(\"This application demonstrates the FileInfo.MoveTo method.\");\n            Console.WriteLine(\"Press any key to start.\");\n            string s = Console.ReadLine();\n            Console.Write(\"    Checking whether \");\n            Console.Write(sourcePath);\n            Console.WriteLine(\" exists.\");\n            FileInfo fInfo = new FileInfo (sourcePath);\n            EnsureSourceFileExists();\n            DisplayFileProperties(fInfo);\n            Console.WriteLine(\"Preparing to move the file to \");\n            Console.Write(destPath);\n            Console.WriteLine(\".\");\n            MoveFile(fInfo);\n            DisplayFileProperties(fInfo);\n            Console.WriteLine(\"Preparing to delete directories.\");\n            DeleteFiles();\n            Console.WriteLine(\"Press the ENTER key to close this application.\");\n            s = Console.ReadLine();\n        }\n        //\n        // Moves the supplied FileInfo instance to destPath.\n        //\n        private static void MoveFile(FileInfo fInfo)\n        {\n            try\n            {\n                fInfo.MoveTo(destPath);\n                Console.WriteLine(\"File moved to \");\n                Console.WriteLine(destPath);\n            } catch (Exception ex) {\n                DisplayException(ex);\n            }\n        }\n        //\n        // Ensures that the test directories\n        // and the file FromFile.xml all exist.\n        //\n        private static void EnsureSourceFileExists()\n        {\n            FileInfo fInfo = new FileInfo(sourcePath);\n            string dirPath = fInfo.Directory.FullName;\n            if (!Directory.Exists(dirPath))\n            {\n                Directory.CreateDirectory(dirPath);\n            }\n            if (File.Exists(destPath))\n            {\n                File.Delete(destPath);\n            }\n            Console.Write(\"Creating file \");\n            Console.Write(fInfo.FullName);\n            Console.WriteLine(\".\");\n            try\n            {\n                if (!fInfo.Exists)\n                {\n                    Console.WriteLine(\"Adding data to the file.\");\n                    WriteFileContent(10);\n                    Console.WriteLine(\"Successfully created the file.\");\n                }\n            }\n            catch (Exception ex)\n            {\n                DisplayException(ex);\n            }\n            finally\n            {\n                dirPath = null;\n            }\n        }\n        //\n        // Creates and saves an Xml file to sourcePath.\n        //\n        private static void WriteFileContent(int totalElements)\n        {\n            XmlDocument doc = new XmlDocument();\n            doc.PreserveWhitespace = true;\n            doc.AppendChild(doc.CreateXmlDeclaration(\"1.0\", null, \"yes\"));\n            doc.AppendChild(doc.CreateWhitespace(\"\\r\\n\"));\n            XmlElement root = doc.CreateElement(\"FileInfo.MoveTo\");\n            root.AppendChild(doc.CreateWhitespace(\"\\r\\n\"));\n            int index = 0;\n            XmlElement elem;\n            while (index &lt; totalElements)\n            {\n                \n                elem = doc.CreateElement(\"MyElement\");\n                elem.SetAttribute(\"Index\", index.ToString());\n                elem.AppendChild(doc.CreateWhitespace(\"\\r\\n\"));\n                elem.AppendChild(doc.CreateTextNode(String.Format\n                    (\"MyElement at position {0}.\", index)));\n                elem.AppendChild(doc.CreateWhitespace(\"\\r\\n\"));\n                root.AppendChild(elem);\n                root.AppendChild(doc.CreateWhitespace(\"\\r\\n\"));\n                index++;\n            }\n            doc.AppendChild(root);\n            doc.AppendChild(doc.CreateWhitespace(\"\\r\\n\"));\n            doc.Save(sourcePath);\n            elem = null;\n            root = null;\n            doc = null;\n        }\n        //\n        // Displays FullName, CreationTime, and LastWriteTime of the supplied\n        // FileInfo instance, then displays the text of the file.\n        //\n        private static void DisplayFileProperties(FileInfo fInfo)\n        {\n            Console.WriteLine(\"The FileInfo instance shows these property values.\");\n            StreamReader reader = null;\n            try\n            {\n                Console.Write(\"FullName: \");\n                Console.WriteLine(fInfo.FullName);\n                Console.Write(\"CreationTime: \");\n                Console.WriteLine(fInfo.CreationTime);\n                Console.Write(\"LastWriteTime: \");\n                Console.WriteLine(fInfo.LastWriteTime);\n                Console.WriteLine();\n                Console.WriteLine(\"File contents:\");\n                Console.WriteLine();\n                reader = new StreamReader(fInfo.FullName);\n                while (!reader.EndOfStream)\n                {\n                    Console.WriteLine(reader.ReadLine());\n                }\n                Console.WriteLine();\n            }\n            catch (Exception ex)\n            {\n                DisplayException(ex);\n            }\n            finally\n            {\n                if (reader != null)\n                {\n                    reader.Close();\n                }\n                reader = null;\n            }\n        }\n        //\n        // Deletes the test directory and all its files and subdirectories.\n        //\n        private static void DeleteFiles()\n        {\n            try\n            {\n                DirectoryInfo dInfo = new DirectoryInfo(Environment.GetFolderPath\n                    (Environment.SpecialFolder.MyDocuments) + \"\\\\FileInfoTestDirectory\");\n                if (dInfo.Exists)\n                {\n                    dInfo.Delete(true);\n                    Console.WriteLine(\"Successfully deleted directories and files.\");\n                }\n                dInfo = null;\n            }\n            catch (Exception ex)\n            {\n                DisplayException(ex);\n            }\n        }\n        //\n        // Displays information about the supplied Exception. This\n        // code is not suitable for production applications.\n        //\n        private static void DisplayException(Exception ex)\n        {\n            StringBuilder sb = new StringBuilder();\n            sb.Append(\"An exception of type \\\"\");\n            sb.Append(ex.GetType().FullName);\n            sb.Append(\"\\\" has occurred.\\r\\n\");\n            sb.Append(ex.Message);\n            sb.Append(\"\\r\\nStack trace information:\\r\\n\");\n            MatchCollection matchCol = Regex.Matches(ex.StackTrace,\n@\"(at\\s)(.+)(\\.)([^\\.]*)(\\()([^\\)]*)(\\))((\\sin\\s)(.+)(:line )([\\d]*))?\");\n            int L = matchCol.Count;\n            string[] argList;\n            Match matchObj;\n            int y, K;\n            for(int x = 0; x &lt; L; x++)\n            {\n                matchObj = matchCol[x];\n                sb.Append(matchObj.Result(\"\\r\\n\\r\\n$1 $2$3$4$5\"));\n                argList = matchObj.Groups[6].Value.Split(new char[] { ',' });\n                K = argList.Length;\n                for (y = 0; y &lt; K; y++)\n                {\n                    sb.Append(\"\\r\\n    \");\n                    sb.Append(argList[y].Trim().Replace(\" \", \"        \"));\n                    sb.Append(',');\n                }\n                sb.Remove(sb.Length - 1, 1);\n                sb.Append(\"\\r\\n)\");\n                if (0 &lt; matchObj.Groups[8].Length)\n                {\n                    sb.Append(matchObj.Result(\"\\r\\n$10\\r\\nline $12\"));\n                }\n            }\n            argList = null;\n            matchObj = null;\n            matchCol = null;\n            Console.WriteLine(sb.ToString());\n            sb = null;\n        }\n    }\n}\n//This code produces output similar to the following;\n//results may vary based on the computer/file structure/etc.:\n//\n// Welcome.\n// This application demonstrates the FileInfo.MoveTo method.\n// Press any key to start.\n//\n//     Checking whether C:\\Documents and Settings\\MyComputer\\My Documents\\FileInfoTestDirectory\\MoveFrom\\FromFile.xml exists.\n// Creating file C:\\Documents and Settings\\MyComputer\\My Documents\\FileInfoTestDirectory\\MoveFrom\\FromFile.xml.\n// Adding data to the file.\n// Successfully created the file.\n// The FileInfo instance shows these property values.\n// FullName: C:\\Documents and Settings\\MyComputer\\My Documents\\FileInfoTestDirectory\\MoveFrom\\FromFile.xml\n// CreationTime: 4/18/2006 1:24:19 PM\n// LastWriteTime: 4/18/2006 1:24:19 PM\n//\n// File contents:\n//\n// &lt;?xml version=\"1.0\" standalone=\"yes\"?&gt;\n// &lt;MyElement Index=\"0\"&gt;\n// MyElement at position 0.\n// &lt;MyElement Index=\"1\"&gt;\n// MyElement at position 1.\n// &lt;MyElement Index=\"2\"&gt;\n// MyElement at position 2.\n// &lt;MyElement Index=\"3\"&gt;\n// MyElement at position 3.\n// &lt;MyElement Index=\"4\"&gt;\n// MyElement at position 4.\n// &lt;MyElement Index=\"5\"&gt;\n// MyElement at position 5.\n// &lt;MyElement Index=\"6\"&gt;\n// MyElement at position 6.\n// &lt;MyElement Index=\"7\"&gt;\n// MyElement at position 7.\n// &lt;MyElement Index=\"8\"&gt;\n// MyElement at position 8.\n// &lt;MyElement Index=\"9\"&gt;\n// MyElement at position 9.\n\n// Preparing to move the file to\n// C:\\Documents and Settings\\MYComputer\\My Documents\\FileInfoTestDirectory\\DestFile.xml.\n// File moved to\n// C:\\Documents and Settings\\MYComputer\\My Documents\\FileInfoTestDirectory\\DestFile.xml\n// The FileInfo instance shows these property values.\n// FullName: C:\\Documents and Settings\\MYComputer\\My Documents\\FileInfoTestDirectory\\DestFile.xml\n// CreationTime: 4/18/2006 1:24:19 PM\n// LastWriteTime: 4/18/2006 1:24:19 PM\n//\n// File contents:\n//\n// &lt;?xml version=\"1.0\" standalone=\"yes\"?&gt;\n// &lt;MyElement Index=\"0\"&gt;\n// MyElement at position 0.\n// &lt;MyElement Index=\"1\"&gt;\n// MyElement at position 1.\n// &lt;MyElement Index=\"2\"&gt;\n// MyElement at position 2.\n// &lt;MyElement Index=\"3\"&gt;\n// MyElement at position 3.\n// &lt;MyElement Index=\"4\"&gt;\n// MyElement at position 4.\n// &lt;MyElement Index=\"5\"&gt;\n// MyElement at position 5.\n// &lt;MyElement Index=\"6\"&gt;\n// MyElement at position 6.\n// &lt;MyElement Index=\"7\"&gt;\n// MyElement at position 7.\n// &lt;MyElement Index=\"8\"&gt;\n// MyElement at position 8.\n// &lt;MyElement Index=\"9\"&gt;\n// MyElement at position 9.\n//\n// Preparing to delete directories.\n// Successfully deleted directories and files.\n// Press the ENTER key to close this application.\n</code></pre>\n<h4><a id=\"__1012\"></a>♍ 注解</h4>\n<p>将 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo?view=net-6.0\">FileInfo</a> 类用于典型的操作，例如复制、移动、重命名、创建、打开、删除和追加到文件。</p>\n<p>如果要对同一文件执行多个操作，则使用 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo?view=net-6.0\">FileInfo</a> 实例方法（而不是类的相应静态方法 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.file?view=net-6.0\">File</a> ）可能更高效，因为安全检查并不总是必要的。</p>\n<p>创建或打开文件时， <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo?view=net-6.0\">FileInfo</a> 许多方法都会返回其他 I/O 类型。 可以使用这些其他类型的进一步操作文件。 有关详细信息，请参阅特定<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo?view=net-6.0\">FileInfo</a>成员，例如<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo.open?view=net-6.0\">Open</a>、、<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo.openread?view=net-6.0\">OpenRead</a><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo.opentext?view=net-6.0\">OpenText</a>、<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo.createtext?view=net-6.0\">CreateText</a>或<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo.create?view=net-6.0\">Create</a>。</p>\n<h4><a id=\"__1023\"></a>♎ 更多方法</h4>\n<blockquote>\n<p>更多方法请查阅官方文档<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo?view=net-6.0\">FileInfo</a> 。</p>\n</blockquote>\n<hr/>\n<blockquote>\n<p>⭐写在结尾：</p>\n<p>文章中出现的任何错误请大家批评指出，一定及时修改。</p>\n<p>希望写在这里的小伙伴能给个<strong>三连支持</strong>！</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}