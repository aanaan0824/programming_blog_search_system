{"blogid": "126472855", "writerAge": "码龄1年", "writerBlogNum": "34", "writerCollect": "373", "writerComment": "523", "writerFan": "797", "writerGrade": "5级", "writerIntegral": "1877", "writerName": "猪皮兄弟", "writerProfileAdress": "writer_image\\profile_126472855.jpg", "writerRankTotal": "10284", "writerRankWeekly": "142", "writerThumb": "614", "writerVisitNum": "30892", "blog_read_count": "888", "blog_time": "已于 2022-08-30 19:46:36 修改", "blog_title": "【数据结构与算法】堆&&堆排序(堆是一种数据结构).", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>🧸🧸🧸<font color=\"red\">各位大佬大家好，我是猪皮兄弟</font>🧸🧸🧸<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a0538806e6ab460399e548c01e7abb41.png\"/></p>\n<p>今天带来的内容是<font color=\"Red\"><strong>堆</strong></font></p>\n<p><font color=\"Red\">这里是下面要讲的知识内容🥳🥳🥳</font></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_13\">一、⚽堆的性质及概念</a></li><li><a href=\"#_32\">二、⚽堆的作用</a></li><li><a href=\"#_36\">三、⚽小堆的插入与删除操作(也有递归)</a></li><li><a href=\"#_141\">四、⚽堆排序</a></li><li><ul><li><a href=\"#1_142\">1.🌈两种建堆方式</a></li><li><a href=\"#2_161\">2.🌈堆排序的时间复杂度分析</a></li><li><a href=\"#3_171\">3.🌈大小堆的选择问题</a></li></ul>\n</li><li><a href=\"#TOPK_181\">五、⚽TOP-K问题</a></li><li><a href=\"#_227\">六、⚽总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_13\"></a>一、⚽堆的性质及概念</h1>\n<p><font color=\"red\"><strong>堆是一种查找算法</strong></font></p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\bacbef0ab3614d3ebd2d3d4a2855a411.png\"/><br/> <mark>堆的性质：<br/> 1.堆中某个节点的值总是不大于或者不小于其父节点的值<br/> 2.堆总是一颗完全二叉树</mark><br/> <font color=\"red\"><strong>大根堆与小根堆</strong></font><br/> <img alt=\"在这里插入图片描述\" src=\"image\\8e43f8cacf604df5af9381996776f701.png\"/></p>\n</blockquote>\n<p><mark>升序打印 ---- 小堆，因为要取最小值<br/> 降序打印 ---- 大堆，因为要取最大值</mark></p>\n<h1><a id=\"_32\"></a>二、⚽堆的作用</h1>\n<p><font color=\"red\"><strong>1.堆排序，时间复杂度O(NlogN)<br/> 2.topk问题，多个数据选出前k个</strong></font></p>\n<h1><a id=\"_36\"></a>三、⚽小堆的插入与删除操作(也有递归)</h1>\n<p><mark>因为堆是一颗完全二叉树，所以，我们采用顺序存储，而不采用链式存储</mark></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//小堆的插入</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span>HPDataType<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&amp;&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> tmp<span class=\"token operator\">=</span><span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>x<span class=\"token operator\">=</span><span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>y<span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">AdjustUp</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> child<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> parent<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>child<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>child<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tchild<span class=\"token operator\">=</span>parent<span class=\"token punctuation\">;</span>\n\t\t\tparent<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>child<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapPush</span><span class=\"token punctuation\">(</span>HP<span class=\"token operator\">*</span> php<span class=\"token punctuation\">,</span>HPDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">HPCheckCapacity</span><span class=\"token punctuation\">(</span>pho<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//因为顺序表涉及到扩容的问题</span>\n\tphp<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>php<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n\tphp<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//在顺序表的最后插入，然后再进行向上调整</span>\n\t<span class=\"token function\">AdjustUp</span><span class=\"token punctuation\">(</span>php<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">,</span>php<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><mark>小堆的删除思想就是将最小的a[0]和a[size-1]上的换一下，然后pop掉顺序表的最后一个，再将换过去的数据向下调整</mark></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//小堆的删除</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>php<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> child<span class=\"token operator\">=</span>parent<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>child<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>child<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span>size<span class=\"token operator\">&amp;&amp;</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>a<span class=\"token punctuation\">[</span>child<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tchild<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tparent<span class=\"token operator\">=</span>child<span class=\"token punctuation\">;</span>\n\t\t\tchild<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>parent<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapPop</span><span class=\"token punctuation\">(</span>HP<span class=\"token operator\">*</span>php<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>php<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>php<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>php<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>php<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tphp<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>php<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">,</span>php<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><mark>如果a[parent]&gt;a[child]一直往下递归，一旦不成立就停止</mark></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//向下调整的递归</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> child<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>parent<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>child<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span>size<span class=\"token operator\">&amp;&amp;</span>a<span class=\"token punctuation\">[</span>child<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tparent<span class=\"token operator\">=</span>child<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<p><font color=\"red\"><strong>小堆和大堆的向上向下调整if的条件变一下就行了</strong></font></p>\n<hr/>\n<h1><a id=\"_141\"></a>四、⚽堆排序</h1>\n<h2><a id=\"1_142\"></a>1.🌈两种建堆方式</h2>\n<p><mark>向上调整建堆和向下调整建堆</mark></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">HeapSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token comment\">//建堆方式1：向上建堆</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">AdjustUp</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\">//因为向下调整建堆需要左右子树都是堆才能调整，所以，从下往上，并且，从有意义的开始，也就是最后一个数据的parent</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&gt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2_161\"></a>2.🌈堆排序的时间复杂度分析</h2>\n<blockquote>\n<p><font color=\"red\"><strong>向下调整建堆O(N)</strong></font><br/> 采用每一层的结点数*最坏轻快下的调整次数，然后错位相减<br/> 分析如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\91f4a6099fb8463a8b765e9ecab41f6d.png\"/></p>\n</blockquote>\n<blockquote>\n<p><font color=\"red\"><strong>向上调整建堆O(NlogN)</strong></font><br/> 几乎每一个结点都需要向上调整，然后最坏情况下调整logN次，所以N*logN</p>\n</blockquote>\n<h2><a id=\"3_171\"></a>3.🌈大小堆的选择问题</h2>\n<blockquote>\n<p><mark>用堆来进行取（HeapTop），再HeapPop操作的话<br/> 1.升序用小堆，每次取最小值<br/> 2.降序用大堆，每次取最大值</mark></p>\n</blockquote>\n<blockquote>\n<p><mark>而如果想再原数组上进行操作的话<br/> 1.排升序，建大堆，取出最大的和最后的数据交换，Swap(&amp;a[0],&amp;a[size-1])<br/> 2.排降序，建小堆，取出最小的和最后的数据交换，Swap(&amp;a[0],&amp;a[size-1])</mark><br/> <img alt=\"在这里插入图片描述\" src=\"image\\62688338982b463193fccf275ddbf154.png\"/></p>\n</blockquote>\n<h1><a id=\"TOPK_181\"></a>五、⚽TOP-K问题</h1>\n<p><mark>建立k个数据的堆，后面的N-k和最小的比较，所以要是小堆，不然怎么找最小的，其次最后要堆这些留下来的数据降序，所以建小堆（前面说过）</mark></p>\n<blockquote>\n<p>TOP-K问题：即求数据结构中前k个最大的元素或者最小的元素，一般情况下数据量都比较大。<br/> 比如：专业前10名，世界500强，富豪榜、游戏中前100的活跃玩家等<br/> 对于TOP-K问题，能想到的最简单直接的方式就是排序，但是：如果数据量非常大，排序就不太现实了（可能数据都不能一下子全部加入到内存中，最佳的方式就是用堆来解决）<br/> <strong>TOP-K就是从N个数中找出最大或者最小的前k个</strong></p>\n</blockquote>\n<blockquote>\n<p>找最大的前k个<br/> 1、排序O(NlogN) 比如堆排序，快排<br/> 2、建N个数的大堆 HeapTop/HeapPop k次 O(N+klogN)<br/> 3、假设N非常大，比如N是100亿，k比较小，k是100，如何求解？（本质上是空间效率更高）</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">PrintTopK</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>kMinHeap<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>kMinHeap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tkMinHeap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&gt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>kMinHeap<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>k<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>kMinHeap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tkMinHeap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>kMinHeap<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>kMinHeap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h1><a id=\"_227\"></a>六、⚽总结</h1>\n<p><font color=\"red\"><strong>堆排序是一种很快的算法，可以匹敌快排了，需要好好的掌握一下，下一篇内容是二叉树oj</strong></font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\cc22094f8d2c4aecb86ec1ac6bd261a1.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}