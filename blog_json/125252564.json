{"blogid": "125252564", "writerAge": "码龄3年", "writerBlogNum": "34", "writerCollect": "26", "writerComment": "1", "writerFan": "2", "writerGrade": "2级", "writerIntegral": "377", "writerName": "大碗4", "writerProfileAdress": "writer_image\\profile_125252564.jpg", "writerRankTotal": "50921", "writerRankWeekly": "420931", "writerThumb": "9", "writerVisitNum": "18500", "blog_read_count": "11195", "blog_time": "于 2022-06-13 00:45:01 发布", "blog_title": "@JsonFormat 使用方法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"JsonFormat_0\"></a>一、什么是@JsonFormat</h1>\n<p>@JsonFormat用来表示json序列化的一种格式或者类型<br/> 例如：</p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@JsonFormat</span><span class=\"token punctuation\">(</span>shape <span class=\"token operator\">=</span><span class=\"token class-name\">JsonFormat<span class=\"token punctuation\">.</span>Shape</span><span class=\"token punctuation\">.</span>STRING<span class=\"token punctuation\">,</span>pattern <span class=\"token operator\">=</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">,</span>timezone <span class=\"token operator\">=</span><span class=\"token string\">\"GMT+8\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDate</span> createTime<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>二、为什么用@JsonFormat<br/>   <code>@JsonFormat注解</code>是一个<code>时间格式化注解</code>，比如我们存储在mysql中的数据是date类型的，当我们读取出来封装在实体类中的时候，就会变成英文时间格式，而不是yyyy-MM-dd HH:mm:ss这样的中文时间，因此我们需要用到JsonFormat注解来格式化我们的时间。<br/>   简而言之，将数据库中的data类型的时间格式化为yyyy-MM-dd HH:mm:ss。</p>\n<h1><a id=\"JsonFormat_11\"></a>二、怎么使用@JsonFormat</h1>\n<h3><a id=\"1maven_12\"></a>1、从maven导入</h3>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.9.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h3><a id=\"2Params_22\"></a>2、Params</h3>\n<ul><li> <p>shape: 表示序列化后的一种类型，枚举（详见后）</p> </li><li> <p>pattern: 表示日期的格式</p> </li><li> <p>timezone: 默认是GMT，中国需要GMT+8</p> </li><li> <p>locale: 根据位置序列化的一种格式</p> </li></ul>\n<pre><code class=\"prism language-java\">\t\t\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{<!-- --></span>\n            ANY<span class=\"token punctuation\">,</span>\n            NATURAL<span class=\"token punctuation\">,</span>\n            SCALAR<span class=\"token punctuation\">,</span>\n            ARRAY<span class=\"token punctuation\">,</span>\n            OBJECT<span class=\"token punctuation\">,</span>\n            NUMBER<span class=\"token punctuation\">,</span>\n            NUMBER_FLOAT<span class=\"token punctuation\">,</span>\n            NUMBER_INT<span class=\"token punctuation\">,</span>\n            STRING<span class=\"token punctuation\">,</span>\n            BOOLEAN<span class=\"token punctuation\">;</span>\n     \n            <span class=\"token keyword\">private</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token punctuation\">}</span>\n     \n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isNumeric</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> NUMBER <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> NUMBER_INT <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> NUMBER_FLOAT<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n     \n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isStructured</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> OBJECT <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> ARRAY<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<blockquote>\n<p>参考：<a href=\"https://blog.csdn.net/weixin_41860630/article/details/101928062\">如何使用@JsonFormat</a></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}