{"blogid": "124865264", "writerAge": "码龄1年", "writerBlogNum": "88", "writerCollect": "91", "writerComment": "19", "writerFan": "22", "writerGrade": "4级", "writerIntegral": "961", "writerName": "一个好好的程序员", "writerProfileAdress": "writer_image\\profile_124865264.jpg", "writerRankTotal": "20557", "writerRankWeekly": "38785", "writerThumb": "38", "writerVisitNum": "42950", "blog_read_count": "4236", "blog_time": "已于 2022-06-04 09:40:10 修改", "blog_title": "vue项目main.js使用方法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2><span style=\"color:#fe2c24;\">第一部分：main.js文件解析</span></h2>\n<ul><li>src/main.js是入口文件，主要作用是初始化vue实例并使用需要的插件</li><li>在main.js文件中定义了一个vue对象,其中el为实例提供挂载元素</li></ul>\n<pre><code>//基础配置\nimport Vue from 'vue'\nimport App from './App.vue'\n\n//引入已经配置好的路由和vuex\nimport router from './router'\nimport store from './store/store'\n\n// 导入less(样式的导入例子，css,less)\n//import '@/assets/xxx.less'\n//导入js(例如)\n//import xxx from 'xxx.js'\n\n// 是否启动生产消息\nVue.config.productionTip = false\n\n//第一种写法\nnew Vue({\n  router,\n  store,\n  render: h =&gt; h(App)\n}).$mount('#app')\n\n//第二种写法\nconst myVue=new Vue({\n  el:'#app',\n  router,\n  store,\n  render: h =&gt; h(App)\n})\n\nexport default myVue\n\n// 其他js文件可以引用main.js的myVue实例从而调用myVue的router、store等等\n//调用注意 main.$store,main.$router即使是vue原型链上的axios也可以被调用\n//main.$axios\n</code></pre>\n<h1 id=\"articleContentId\"><span style=\"color:#fe2c24;\">第二部分：Vue.use的作用以及什么时候使用</span></h1>\n<p>在Vue中引入使用第三方库通常我们都会采用import的形式引入进来，但是有的组件在引入之后又做了Vue.use()操作，有的组件引入进来又进行了Vue.prototype.$something = something，那么它们之间有什么联系呢？</p>\n<ul><li>先说一下Vue.prototype，在Vue项目中通常我们引入axios来进行请求接口数据，通过npm安装之后我们只需在我们的文件中import axios from \"axios\"就可以使用，有时候我们会加上一句Vue.prototype.$axios = axios，prototype我们应该是再熟悉不过了</li></ul>\n<pre><code>import Vue from 'vue'\nimport App from './App.vue'\n//路由导入\nimport router from './router'\n//vuex导入\nimport store from './store'\n//npm下载好的三方axios包\nimport axios from 'axios'\n// 是否启动生产消息\nVue.config.productionTip = false\n// 设置axios的请求根路径\naxios.defaults.baseURL = 'url'\n// 把 axios 挂载到 Vue.prototype 上\nVue.prototype.$http = axios\n//其实是在Vue原型上增加了一个$http，然后在其余的vue组件的文件中,\n//可以通过this.$http直接来使用axios\nnew Vue({\n  router,\n  store,\n  render: h =&gt; h(App)\n}).$mount('#app')</code></pre>\n<h3><strong>Vue.use是什么？（官方文档）</strong></h3>\n<p>通过全局方法 Vue.use() 使用插件，Vue.use 会自动阻止多次注册相同插件，它需要在你调用 new Vue() 启动应用之前完成，Vue.use() 方法至少传入一个参数，该参数类型必须是 Object 或 Function，如果是 Object 那么这个 Object 需要定义一个 install 方法，如果是 Function 那么这个函数就被当做 install 方法。在 Vue.use() 执行时 install 会默认执行，当 install 执行时第一个参数就是 Vue，其他参数是 Vue.use() 执行时传入的其他参数。就是说使用它之后调用的是该组件的install 方法。</p>\n<h3>Vue.use()什么时候使用？</h3>\n<p>它在使用时实际是调用了该插件的install方法，所以引入的当前插件如果含有install方法我们就需要使用Vue.use()，例如在Vue中引用Element如下：</p>\n<pre><code>import Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n// 注册elementUi\nimport ElementUI from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css'\n\nVue.use(ElementUI)\n// 是否启动生产消息\nVue.config.productionTip = false\nnew Vue({\n  router,\n  store,\n  render: h =&gt; h(App)\n}).$mount('#app')</code></pre>\n<p> 利用 <code>Vue.use</code> 统一全局注册组件</p>\n<p>说明:</p>\n<ol><li> <p>Vue.use 可以接收一个对象, Vue.use(obj)</p> </li><li> <p>对象中需要提供一个 install 函数</p> </li><li> <p>install 函数可以拿到参数 Vue, 且将来会在 Vue.use 时, 自动调用该 install 函数</p> </li></ol>\n<p>第一步：提供统一注册的入口文件 <strong><code>src/componets/index.js</code></strong> ​​​​​​​</p>\n<pre><code>// 该文件负责所有的公共组件的全局注册\n// vue插件机制: Vue.use\nimport PageTools from './PageTools'\n\nexport default {\n  install(Vue) {\n    Vue.component('PageTools', PageTools)\n  }\n}</code></pre>\n<p>第二步：在入口处进行注册 <strong><code>src/main.js</code></strong> Vue.use 注册使用自己的插件模块</p>\n<pre><code>import Components from './components'\nVue.use(Components)</code></pre>\n</div>\n</div>"}