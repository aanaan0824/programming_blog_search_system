{"blogid": "126599977", "writerAge": "码龄4年", "writerBlogNum": "774", "writerCollect": "60839", "writerComment": "37072", "writerFan": "104736", "writerGrade": "10级", "writerIntegral": "172230", "writerName": "兔老大RabbitMQ", "writerProfileAdress": "writer_image\\profile_126599977.jpg", "writerRankTotal": "4", "writerRankWeekly": "136", "writerThumb": "88798", "writerVisitNum": "5021249", "blog_read_count": "14228", "blog_time": "于 2022-08-30 11:13:51 发布", "blog_title": "软件测试必须知道的精华总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p style=\"margin-left:.0001pt;text-align:justify;\">上学时的总结，现在看不论是考试还是工作都很有用</p>\n</blockquote>\n<p style=\"margin-left:.0001pt;text-align:justify;\">软件测试的定义</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>使用人工或自动化手段，来运行或测试某个系统的过程，其目的在于检验它是否满足规定的需求或弄清预期结果与实际结果之间的差别。</strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">软件测试的目的</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>根本目的：发现问题、 解决问题；提高用户满意度、优化软件品质</strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">测试的对象：<strong>程序 文档 数据</strong> (软件开发过程中所产生的需求规格说明、概要<br/> 设计规格说明、详细设计规格说明以及源程序、用户文档都是软件测试的对象。 )</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">测试的原则</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>1</strong><strong>、尽早地和及时地进行测试（在需求阶段开始测试）</strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>2</strong><strong>、测试前应当准备好测试数据和与之对应的预期结果这两部分</strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>3</strong><strong>、测试输入数据应包括合理的输入条件和不合理输入条件</strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>4</strong><strong>、程序提交测试后，应当由专门的测试人员进行测试 </strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>5</strong><strong>、严格执行测试计划，排除测试的随意性 </strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>6</strong><strong>、测试用例的所有相关预期结果做全面的检查 </strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">7、充分注意测试当中的群集现象（二八原则）</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">8、注意保存测试计划、测试用例、出错统计和最终分析报告，为维护工作提供充分的资料</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">9、缺陷具有免疫性（每修复3~4个缺陷就会出现一个新的缺陷）</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">测试的误区（<strong>避免误区</strong>）</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1、软件测试技术要求不高，至少比编程容易多了</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2、若发布的软件有质量问题，那是软件测试人员的错</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3、软件测试是测试人员的事，与开发人员无关</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4、根据软件开发瀑布模型，软件测试是开发后期的一个阶段</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">5、有时间就多测试一些，来不及就少测试一些</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">6、软件测试是非建设性的工作，甚至是破坏性的</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">7、测试中发现错误是对责任人工作的一种否定</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">软件开发模型</p>\n<ol><li style=\"text-align:justify;\">大棒开发法：思路简单，可能是开发者的突发奇想，结果不可预知</li><li style=\"text-align:justify;\">边写边改法：</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\">优点：简单考虑到了软件的需求，产品周期短</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">缺点：没有计划和文档的编制，后续维护难度大</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">测试工作： 由于新的版本不断产生，测试工作长期循环</p>\n<ol><li style=\"text-align:justify;\">快速原型法：根据客户需求在较短的时间内解决用户最迫切解决的问题，完成可演示的产品。这个产品只实现最重要功能，在得到用户的更加明确的需求之后，原型将丢弃。</li><li style=\"text-align:justify;\"><strong>瀑布模型：</strong></li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\">阶段：需求分析-系统设计-程序设计-编码-测试-运行及维护</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">特点：依线性顺序联接</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">优点：易理解 阶段性 强调需求分析 明确测试阶段 提供了一套模板</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">缺点：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">线性严格——成果晚出——风险</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">阶段固定——反复&amp;迭代——灵活性</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">单次需求——需求变更——适应性</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">测试滞后——缺陷晚查——代价</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">适用场合：功能性能明确完整 需求固定 无重大变动</p>\n<ol><li style=\"text-align:justify;\">螺旋模型法</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\">步骤：评估可选方案--计划下一阶段--确定下一阶段方法--确定目标、可选方案和限制条件--明确并化解风险--当前阶段开发和测试</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">优点：严格的全过程风险管理；强调各开发阶段的质量；提供机会评估项目是否有价值继续下去。(发现问题早)</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">软件测试模型</p>\n<ol><li style=\"text-align:justify;\">V模型（是最具有代表意义的测试模型）</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"286\" src=\"image\\cfc89686d9864d10ab76a24b27243122.png\" width=\"393\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">优点：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">测试级别清晰（底层：单元测试 高层：系统测试）</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">测试对应开发</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">缺点：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">线性执行——测试滞后编码  关注程序——忽略需求、设计   需求变更——实用性差</p>\n<ol><li style=\"text-align:justify;\">W模型（尽早和不断的进行软件测试）</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\">优点：测试伴随着整个软件开发周期，而且测试的对象不仅仅是程序，需求、 功能、设计同样要测试。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">缺点：1、在小的项目里，W模型不适用 2、不支持迭代，应对需求变化方面不适用</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">软件测试流程</p>\n<ol><li style=\"text-align:justify;\">制定测试流程 2、设计和生成测试用例 3、搭建测试环境</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\"> 4、实施测试 5、测试评估 6、测试总结</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">测试用例相关</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1、解决的问题：要测什么 怎么测 如何衡量</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2、静态测试：不运行程序，只对程序进行检查和审核 动态测试：使用和运行程序进行检查</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3、黑盒测试</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">等价类划分</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">边界值分析（通常作为等价类划分的补充）原则：刚刚等于 刚刚大于 刚刚小于</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">常用控件法：复选框 组合列表框 文本框 按钮 单选按钮 列表框 滚动条（重点参考2-5PPT）</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">错误推测法 借助经验开展测试，推测软件中可能存在或容易产生的缺陷的功能模块</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">（经验分享 在2-6PPT）</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">例题：测试一个对线性表（比如数组）进行排序的程序，可推测列出以下几项需要特别测试的情况：、</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 输入的线性表为空表；</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 表中只含有一个元素；</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 输入表中所有元素已排好序；</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4. 输入表已按逆序排好；</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">5. 输入表中部分或全部元素相同</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4、白盒测试</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">·静态测试</p>\n<ul><li style=\"text-align:justify;\">代码检查法</li></ul>\n<p style=\"margin-left:.0001pt;text-align:justify;\">    a.桌面检查(程序员自己检查自己编的代码，目的是发现错误)</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">b.代码走查</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">C.代码审查（逐条讲解）</p>\n<ul><li style=\"text-align:justify;\">静态结构分析法</li></ul>\n<p style=\"margin-left:.0001pt;text-align:justify;\">使用静态结构分析工具分析程序源代码的内部结构（如：系统结构、数据结构、数据接口、内部控制逻辑）</p>\n<ul><li style=\"text-align:justify;\">代码质量度量</li></ul>\n<ol><li style=\"text-align:justify;\">代码行度量法（<strong>千行bug率</strong>）</li><li style=\"text-align:justify;\">McCabe度量法 <strong>V(G)=m-n+2（弧数减节点数加二）或等于判断语句数+1</strong></li><li style=\"text-align:justify;\">Halstead度量法</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\">程序=运算符号+运算对象结构度量</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>N=N1+N2=n1log2(n1)+n2log2(n2)</strong>（n1=不同运算符的个数 也即– + - * / = if else for …… n2=不同运算对象的个数）</p>\n<ol><li style=\"text-align:justify;\">结构度量法</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\">扇入：调用该模块的模块计数</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">扇出：该模块所调用的模块计数</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>具有大扇入和大扇出的模块可能是不良设计。程序复杂性与扇出的平方成正比</strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">·动态测试（重点PPT2-9）</p>\n<ul><li style=\"text-align:justify;\">逻辑覆盖</li><li style=\"text-align:justify;\">语句覆盖</li><li style=\"text-align:justify;\">判定覆盖</li><li style=\"text-align:justify;\">条件覆盖</li></ul>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<ol><li style=\"text-align:justify;\">单元测试</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\">单元：一个最小的单元应有明确的功能、性能定义、接口定义而且可以清晰地与其他单元区</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">分开来。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">单元测试：</p>\n<ul><li style=\"text-align:justify;\">定义：单元测试又称为模块测试, 是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。程序单元是应用的最小可测试部件</li><li style=\"text-align:justify;\">目标：确保每个模块都能正常工作</li><li style=\"text-align:justify;\">时间：编码--编译--单元测试</li><li style=\"text-align:justify;\">依据：详细设计说明</li><li style=\"text-align:justify;\">单元测试的内容：（详见PPT 4.1 page 24）</li></ul>\n<ol><li style=\"text-align:justify;\">模块接口 ：检查进出程序单元的数据流是否准确（在其他测试之前进行）也即检查输入参数与模块的形式参数在个数、属性、顺序上是否匹配</li><li style=\"text-align:justify;\">局部数据结构：如类型说明是否一致，初始化或默认值是否一致、溢出检测、拼写错误的变量名等</li><li style=\"text-align:justify;\">边界条件：可能与边界值有关的数据类型，如字符、数值、位置等如：运算或判断中取最大值、最小值时是否有错误。在n次循环的第0次、 1次、 n次是否有错误。数据流、控制流中刚好等于、大于、小于确定的比较值是否出现错误</li><li style=\"text-align:justify;\">出错处理：关注模块在工作中发生错误时，出错处理设施是否有效。如：HTTP500错误：web服务器不能执行此请求 HTTP404 找不到您所请求的文本或脚本。</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\">路径测试：</p>\n<ul><li style=\"text-align:justify;\">定义：针对程序路径进行测试，关注由于计算错误、判定错误或不正常的控制流二产生的错误。</li><li style=\"text-align:justify;\">实例：</li></ul>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"408\" src=\"image\\b7e89a8f722449b999a3e83e62bf663b.png\" width=\"570\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">软件缺陷相关</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1、什么是缺陷</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">从产品内部看：软件缺陷是软件产品开发或维护过程中所存在的错误、毛病等各种问题；</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">从产品外部看：软件缺陷是系统所需要实现的某种功能的失效或违背。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>2</strong><strong>、如何编写缺陷报告</strong>（一个缺陷一个报告）</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>举例</strong>：使用“记事本”仅保存“联通”二字后再打开该文件，出现乱码。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">•描述步骤：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">–点击“开始” -&gt;“程序” -&gt;“附件” -&gt;“记事本”打开记事本软件；</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">–仅输入“联通”二字后，点击“文件” -&gt;“保存”；</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">–在打开的“另存为”对话框中保存文件， 退出（文件名、保存位置任意）；</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">–打开保存的文件，出现乱码，不是“联通”二字。</p>\n<ol><li style=\"text-align:justify;\">缺陷的严重性和优先级</li></ol>\n<ul><li style=\"text-align:justify;\">Fault  致命的错误 造成系统或应用程序崩溃，主要功能完全丧失</li><li style=\"text-align:justify;\">Critical：严重错误，主要指功能或特性没有实现，主要功能部分丧失，次要功能完全丧失</li><li style=\"text-align:justify;\">Major：主要错误，这样的缺陷虽然不影响系统的使用，但没有很好地实现功能。</li><li style=\"text-align:justify;\">Minor: 一些小问题，不影响功能</li><li style=\"text-align:justify;\">Suggestion：一些友好的建议</li></ul>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>一般情况下，严重程度高的缺陷优先级高，班没有必然联系，需结合实际综合思考</strong></p>\n<ol><li style=\"text-align:justify;\">缺陷状态</li></ol>\n<ul><li style=\"text-align:justify;\">定义：缺陷通过一个跟踪修复过程的进展情况，也就是在缺陷生命周期中的状态基本定义</li><li style=\"text-align:justify;\">缺陷状态：</li></ul>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"339\" src=\"image\\406f47b6f13b479aa99fe881fadc375a.png\" width=\"548\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"407\" src=\"image\\b106278b4ea749d7aff771d9c4da1828.png\" width=\"548\"/></p>\n<ol><li style=\"text-align:justify;\">缺陷状态流转</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"306\" src=\"image\\692980eec5b94a39921ecb784fe502fa.png\" width=\"247\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">易用性测试：易用性是交互的适应性、功能性和有效性的集中体现</p>\n<ul><li style=\"text-align:justify;\">界面（UI）</li></ul>\n<p style=\"margin-left:.0001pt;text-align:justify;\">    标准和规范</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">直观 正确 一致（如果软件或者平台有统一标准，遵循标准。如果没有，就注意软件的特性，确保相似操作以相似的方式进行） 灵活（状态终止和跳转、数据输入和输出） 舒适 实用</p>\n<ul><li style=\"text-align:justify;\">辅助功能选项（为有残疾障碍的人测试）</li></ul>\n<ol><li style=\"text-align:justify;\">操作系统内置</li><li style=\"text-align:justify;\">平台</li></ol>\n<ul><li style=\"text-align:justify;\">为什么要进行易用性测试：软件难以理解，不易使用，运行缓慢，或者从测试人员或用户的角度认为不好。</li></ul>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">兼容性测试：指软件之间能否正确的交互和共享信息。</p>\n<ol><li style=\"text-align:justify;\">兼容性测试标准</li></ol>\n<ul><li style=\"text-align:justify;\">向前兼容（可以使用软件以前的版本 如：Office 2007/2013 可以打开Office 2003下存储的文档）</li><li style=\"text-align:justify;\">向后兼容（可以使用软件以后的版本 如：Office 2003可以打开Office2013存储的文档）</li></ul>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2、</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"310\" src=\"image\\1b119f5be5914ad38d4460749c4377df.png\" width=\"656\"/></p>\n<ol><li style=\"text-align:justify;\">数据兼容性指要在应用程序之间共享数据</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">安全性测试</p>\n<ul><li style=\"text-align:justify;\">定义：检查系统对非法侵入的防范能力</li><li style=\"text-align:justify;\">原因：验证安装在系统内的保护机制能否在实际中保护系统且不受非法入侵， 不受非法干扰。（应对入侵）</li><li style=\"text-align:justify;\">如何做安全性测试：</li></ul>\n<ol><li style=\"text-align:justify;\">代码角度</li></ol>\n<ol><li style=\"text-align:justify;\">使用安全函数</li><li style=\"text-align:justify;\">防止缓冲区溢出</li></ol>\n<ol><li style=\"text-align:justify;\">外部攻击角度</li></ol>\n<ol><li style=\"text-align:justify;\">跨站脚本攻击</li><li style=\"text-align:justify;\">SQL注入（通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令）如：穿过防火墙，入侵检测系统；执行增、删、改、查脚本；尝试输入特殊字符</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">回归测试</p>\n<ul><li style=\"text-align:justify;\">定义：验证被修复软件缺陷是否已经被解决，并且保证以前运行的功能依旧保持正常，而不受修改的影响</li><li style=\"text-align:justify;\">测试点</li></ul>\n<ol><li style=\"text-align:justify;\">测试修改的模块</li><li style=\"text-align:justify;\">有可能会受到影响的模块</li></ol>\n<ul><li style=\"text-align:justify;\"></li></ul>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"339\" src=\"image\\ad24d7169ea7433d93d9c4142401f7f1.png\" width=\"546\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">验收测试</p>\n<ol><li style=\"text-align:justify;\">定义：对软件的新的版本测试时，对新版本进行重新测试，这时的测试不仅是验证被修复的软件缺陷是否被解决了，且要保证以前所有运行正常的功能依旧保持正常，而不要受到这次修改的影响</li><li style=\"text-align:justify;\">验收测试依据：软件需求说明文档</li><li style=\"text-align:justify;\">谁来做验收测试</li></ol>\n<ol><li style=\"text-align:justify;\">产品软件验收</li><li style=\"text-align:justify;\">项目软件验收</li></ol>\n<ol><li style=\"text-align:justify;\">验收测试的实施</li></ol>\n<ol><li style=\"text-align:justify;\">α测试：开发公司组织内部人员进行测试</li><li style=\"text-align:justify;\">β测试：内测之后的公测，组织外部典型性用户进行测试</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">软件质量相关（见）</p>\n<ol><li style=\"text-align:justify;\">质量定义范围-3A</li></ol>\n<ol><li style=\"text-align:justify;\">可说明性</li><li style=\"text-align:justify;\">有效性</li><li style=\"text-align:justify;\">易用性</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2、软件质量标准</p>\n<ol><li style=\"text-align:justify;\">产品质量模型（人们实践产物的属性和行为）：McCall  ISO9126  Boehm</li><li style=\"text-align:justify;\">过程质量模型（人们产生产品的过程的好坏）: CMM ISO9000</li></ol>\n<ol><li style=\"text-align:justify;\">SQA</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\">       QA职责：（过程管理和过程改进） QC职责（发现软件问题）</p>\n</div>\n</div>"}