{"blogid": "126450514", "writerAge": "码龄3年", "writerBlogNum": "112", "writerCollect": "5597", "writerComment": "5226", "writerFan": "16771", "writerGrade": "7级", "writerIntegral": "12515", "writerName": "苏凉.py", "writerProfileAdress": "writer_image\\profile_126450514.jpg", "writerRankTotal": "920", "writerRankWeekly": "99", "writerThumb": "4357", "writerVisitNum": "179486", "blog_read_count": "2507", "blog_time": "于 2022-08-21 15:05:23 发布", "blog_title": "【微信小程序】组件的生命周期", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night-eighties\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_1\">组件的生命周期</a></li><li><a href=\"#_6\">自定义组件的生命周期函数</a></li><li><ul><li><a href=\"#_18\">执行顺序</a></li><li><a href=\"#_22\">组件常用的生命周期函数</a></li><li><a href=\"#lifetimes_34\">lifetimes节点</a></li></ul>\n</li><li><a href=\"#_53\">组件所在页面的生命周期函数</a></li><li><ul><li><a href=\"#pageLifetimes_64\">pageLifetimes节点</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_1\"></a>组件的生命周期</h2>\n<p>组件的生命周期，指的是<strong>组件自身</strong>的一些函数，这些函数在特殊的时间点或遇到一些特殊的框架事件时被自动触发。<br/> 其中，最重要的生命周期是 created、attached、 detached ，包含一个组件实例生命流程的最主要时间点。</p>\n<h2><a id=\"_6\"></a>自定义组件的生命周期函数</h2>\n<p>小程序组件可用的全部生命周期如下表所示:</p>\n<table><thead><tr><th>生命周期函数</th><th>参数</th><th>描述说明</th></tr></thead><tbody><tr><td>created</td><td>无</td><td>在组件实例刚刚被创建时执行</td></tr><tr><td>attached</td><td>无</td><td>在组件实例进入页面节点树时执行</td></tr><tr><td>ready</td><td>无</td><td>在组件在视图层布局完成后执行</td></tr><tr><td>moved</td><td>无</td><td>在组件实例被移动到节点树另一个位置时执行</td></tr><tr><td>detached</td><td>无</td><td>在组件实例被从页面节点树移除时执行</td></tr><tr><td>error</td><td>Object Error</td><td>每当组件方法抛出错误时执行</td></tr></tbody></table>\n<h3><a id=\"_18\"></a>执行顺序</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f075cbe8b4014c139e2e40b4497d369f.png\"/></p>\n<p>从该图中可以看出组件的 ready 与 detached 执行顺序并没有明确的先后关系。</p>\n<h3><a id=\"_22\"></a>组件常用的生命周期函数</h3>\n<p>在小程序组件中，最重要的生命周期函数有3个，分别是<code>created</code>、<code>attached</code>.<br/> <code>detached</code>。它们各自的特点。如下︰</p>\n<ul><li>组件实例刚被创建好的时候，<mark>created</mark>生命周期函数会被触发<br/> 此时还不能调用setData，通常在这个生命周期函数中，只应该用于给组件的this添加一些自定义的属性字段在组件</li><li>完全初始化完毕、进入页面节点树后，<mark>attached</mark>生命周期函数会被触发<br/> 此时, this.data已被初始化完毕。这个生命周期很有用，绝大多数初始化的工作可以在这个时机进行（例如发请求获取初始数据)</li><li>在组件离开页面节点树后，<mark>detached</mark>生命周期函数会被触发<br/> 退出一个页面时，会触发页面内每个自定义组件的detached生命周期函数此时适合做一些清理性质的工作</li></ul>\n<h3><a id=\"lifetimes_34\"></a>lifetimes节点</h3>\n<p>在小程序组件中，生命周期函数可以直接定义在<strong>Component构造器</strong>的第一级参数中，可以在 lifetimes字段内进行声明（这是推荐的方式，其优先级最高）。如下:</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token literal-property property\">lifetimes</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n\t   <span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'created'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t   <span class=\"token function\">attached</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'attached'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意：若不写在lifetime节点中且同时存在lifetime节点，优先执行lifetime节点中的生命周期函数，并覆盖掉节点之外的生命周期函数。</p>\n<h2><a id=\"_53\"></a>组件所在页面的生命周期函数</h2>\n<p>有时，自定义组件的行为依赖于页面状态的变化，此时就需要用到组件所在页面的生命周期。<br/> 在自定义组件中，组件所在页面的生命周期函数有如下3个，分别是:</p>\n<table><thead><tr><th>生命周期函数</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>show</td><td>无</td><td>组件所在的页面被展示时执行</td></tr><tr><td>hide</td><td>无</td><td>组件所在的页面被隐藏时执行</td></tr><tr><td>resize</td><td>object Size</td><td>组件所在的页面尺寸变化时执行</td></tr></tbody></table>\n<h3><a id=\"pageLifetimes_64\"></a>pageLifetimes节点</h3>\n<p>组件所在页面的生命周期函数，需要定义在<strong>pageLifetimes</strong>节点中，如下:</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token literal-property property\">pageLifetimes</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n      \t<span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n           console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"show!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n           console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hide!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n           console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resize\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\t\t\t\t\t\t\n   <span class=\"token punctuation\">}</span>\t\t\t\t\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当页面显示和隐藏时触发<br/> <img alt=\"在这里插入图片描述\" src=\"image\\78ce24fb144d4789852ed767a2f0b913.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}