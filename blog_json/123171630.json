{"blogid": "123171630", "writerAge": "码龄11年", "writerBlogNum": "3784", "writerCollect": "5265", "writerComment": "522", "writerFan": "2658", "writerGrade": "9级", "writerIntegral": "63882", "writerName": "allway2", "writerProfileAdress": "writer_image\\profile_123171630.jpg", "writerRankTotal": "50", "writerRankWeekly": "1307", "writerThumb": "1068", "writerVisitNum": "4700617", "blog_read_count": "9504", "blog_time": "于 2022-02-28 06:39:09 发布", "blog_title": "MySQL BIGINT 数据类型", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p></p>\n<p>本文重点介绍 MySQL BIGINT 数据类型，并研究我们如何使用它来存储整数值。我们还将了解它的范围、存储大小和各种属性，包括有符号、无符号和零填充。</p>\n<div style=\"margin-left:0;\">\n<div style=\"margin-left:0;\">\n<div style=\"margin-left:0;\">\n<h3 style=\"margin-left:0;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><span style=\"color:#555555;\">整数类型（精确值） - INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT</span></span></span></h3>\n</div>\n</div>\n</div>\n<p style=\"margin-left:0;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\">MySQL 支持 SQL 标准整数类型 <code>INTEGER</code>（或<code>INT</code>）和 <code>SMALLINT</code>. 作为标准的扩展，MySQL 还支持整数类型 <code>TINYINT</code>、<code>MEDIUMINT</code>和 <code>BIGINT</code>. 下表显示了每种整数类型所需的存储空间和范围。</span></span></p>\n<div style=\"margin-left:0;\">\n<span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><a name=\"integer-type-storage-and-range\"></a></span></span>\n<p style=\"margin-left:0;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><strong>表 11.1 MySQL 支持的整数类型所需的存储和范围</strong></span></span></p>\n<div style=\"margin-left:0;\">\n<table border=\"1\" cellspacing=\"0\"><thead><tr><th style=\"text-align:left;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\">类型</span></span></th><th style=\"text-align:left;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\">存储（字节）</span></span></th><th style=\"text-align:left;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\">签名的最小值</span></span></th><th style=\"text-align:left;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\">最小值无符号</span></span></th><th style=\"text-align:left;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\">签署的最大值</span></span></th><th style=\"text-align:left;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\">最大值无符号</span></span></th></tr></thead><tbody><tr><th style=\"text-align:left;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>TINYINT</code></span></span></th><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\">1</span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>-128</code></span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>0</code></span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>127</code></span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>255</code></span></span></td></tr><tr><th style=\"text-align:left;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>SMALLINT</code></span></span></th><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\">2</span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>-32768</code></span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>0</code></span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>32767</code></span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>65535</code></span></span></td></tr><tr><th style=\"text-align:left;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>MEDIUMINT</code></span></span></th><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\">3</span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>-8388608</code></span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>0</code></span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>8388607</code></span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>16777215</code></span></span></td></tr><tr><th style=\"text-align:left;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>INT</code></span></span></th><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\">4</span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>-2147483648</code></span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>0</code></span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>2147483647</code></span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>4294967295</code></span></span></td></tr><tr><th style=\"text-align:left;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>BIGINT</code></span></span></th><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\">8</span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>-263</code></span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>0</code></span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>263-1</code></span></span></td><td style=\"border-color:#808080;vertical-align:baseline;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#555555;\"><code>264-1</code></span></span></td></tr></tbody></table>\n</div>\n</div>\n<p></p>\n<p style=\"margin-left:0;\"></p>\n<h2 style=\"margin-left:0;\"><strong><span style=\"color:#ba3925;\"><span style=\"background-color:#ffffff;\">MySQL BIGINT</span></span></strong></h2>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\">BIGINT 是 ab 字节或 64 位整数值，在存储大整数值时非常有用。</span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\">MySQL BIGINT 与任何其他 MySQL 整数数据类型一样，可以是有符号或无符号的。有符号数据类型表示该列可以存储正整数和负整数值。这是 MySQL 中大多数整数类型的默认类型。因此，除非明确指定，否则任何整数类型列都可以存储正整数和负整数。</span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\">另一方面，无符号数据类型表示该列只能存储正整数值。</span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\">签名 MySQL BIGINT 类型的范围在 -9223372036854775808 和 9223372036854775807 之间</span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\">对于无符号 BIGINT 类型，取值范围为 0 到 18446744073709551615。</span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\">BIGINT 类型的另一个属性是 ZEROFILL。在列上指定此属性后，该列将自动设置为 UNSIGNED。</span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\">zerofill 属性也用零填充空格。</span></span></p>\n<div id=\"AdThrive_Content_2_desktop\" style=\"margin-left:0;text-align:center;\">\n<div id=\"google_ads_iframe_/18190176,22488008280/AdThrive_Content_2/5c9b6001b80bec0dfaf0b493_0__container__\" style=\"margin-left:0;\"></div>\n</div>\n<h2 style=\"margin-left:0;\"><strong><span style=\"color:#ba3925;\"><span style=\"background-color:#ffffff;\">例子</span></span></strong></h2>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\">让我们看几个例子来说明如何使用 BIGINT 类型。</span></span></p>\n<pre><code class=\"language-sql\">CREATE DATABASE IF NOT EXISTS integers;\nUSE integers;</code></pre>\n<p style=\"margin-left:0;\">接<span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\">下来，让我们创建一个表并用各种 BIGINT 列填充它，如下面的查询所示：</span></span></p>\n<pre><code class=\"language-sql\">CREATE TABLE examples(x BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY, y BIGINT UNSIGNED, z BIGINT ZEROFILL );</code></pre>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\"><strong>示例 1</strong><br/> 让我们首先尝试将所有正值添加到表中：</span></span></p>\n<pre><code class=\"language-sql\">INSERT INTO examples(x,y,z) VALUES (1,2,3);</code></pre>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\">在上面的示例查询中，这些值是可接受的，因为它们在有符号、无符号和 zerofill BIGINT 类型的范围内。</span></span></p>\n<pre><code class=\"language-sql\">SELECT * FROM examples;\n+---+------+----------------------+\n| x | y    | z                    |\n+---+------+----------------------+\n| 1 |    2 | 00000000000000000003 |\n+---+------+----------------------+\n1 row in &lt;strong&gt;set&lt;/strong&gt; (0.01 sec)</code></pre>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\"><strong>示例 2</strong><br/> 在下一个案例中，让我们尝试添加所有负值。示例查询如下：</span></span></p>\n<pre><code class=\"language-sql\">INSERT INTO examples(x,y,z) VALUES (-1,-2,-3);\nERROR 1264 (22003): Out of range value for column 'y' at row 1</code></pre>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\">在这种情况下，查询失败，因为 y 列是无符号的。因此，为列分配负值超出了列范围。</span></span></p>\n<div id=\"AdThrive_Content_4_desktop\" style=\"margin-left:0;text-align:center;\">\n<div id=\"google_ads_iframe_/18190176,22488008280/AdThrive_Content_4/5c9b6001b80bec0dfaf0b493_0__container__\" style=\"margin-left:0;\"></div>\n</div>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\"><strong>示例 3</strong><br/> 我们可以观察到与上述第三列类似的情况。zerofill 属性自动使列无符号，使添加负值超出范围。一个例子是：</span></span></p>\n<pre><code class=\"language-sql\">INSERT INTO examples(x,y,z) VALUES (-1,2,-3);\nERROR 1264 (22003): Out of range value for column 'z' at row 1</code></pre>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\"><strong>示例 4</strong><br/> 现在让我们尝试添加每种类型的最大值。一个示例查询是：</span></span></p>\n<pre><code class=\"language-sql\">INSERT INTO examples(x,y,z) VALUES (-9223372036854775808, 9223372036854775808, 9223372036854775808);</code></pre>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\">在上面的示例中，由于所有值都在范围内，因此查询成功执行。</span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\">考虑下面的查询：</span></span></p>\n<pre><code class=\"language-sql\">INSERT INTO examples(x,y,z) VALUES (9223372036854775807, 9223372036854775808, 9223372036854775808);</code></pre>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\">您会注意到所有值都在最大值上。由于 x 列设置为 AUTO_INCREMENT，因此向其添加值将失败。</span></span></p>\n<pre><code class=\"language-sql\">INSERT INTO examples(y,z) VALUES (9223372036854775808, 9223372036854775808);\nERROR 1062 (23000): Duplicate entry '9223372036854775807' for key 'examples.PRIMARY'</code></pre>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\">但是，如果在 MySQL 中禁用了严格模式，您可以插入超出范围的值。</span></span></p>\n<pre><code class=\"language-sql\">SELECT * FROM examples;</code></pre>\n<p style=\"margin-left:0;\"><img alt=\"\" height=\"216\" src=\"image\\b767e293ad8a423aa48389189788e4be.png\" width=\"974\"/></p>\n<p></p>\n<p style=\"margin-left:0;\"><strong><span style=\"color:#ba3925;\"><span style=\"background-color:#ffffff;\">结论</span></span></strong></p>\n<p style=\"margin-left:0;\"><span style=\"color:#444444;\"><span style=\"background-color:#ffffff;\">在本教程中，我们讨论了 MySQL BININT 类型及其各种属性的范围。</span></span></p>\n<p></p>\n</div>\n</div>"}