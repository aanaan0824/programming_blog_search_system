{"blogid": "123792571", "writerAge": "码龄12年", "writerBlogNum": "236", "writerCollect": "444", "writerComment": "90", "writerFan": "60", "writerGrade": "6级", "writerIntegral": "5222", "writerName": "liberg", "writerProfileAdress": "writer_image\\profile_123792571.jpg", "writerRankTotal": "6699", "writerRankWeekly": "20160", "writerThumb": "257", "writerVisitNum": "417364", "blog_read_count": "1172", "blog_time": "已于 2022-04-12 16:44:43 修改", "blog_title": "Rust 07: 生命周期标注（‘a, ‘static）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><ul><li><a href=\"#_1\">所有权机制回顾</a></li><li><a href=\"#_6\">为何需要生命周期标注</a></li><li><a href=\"#_19\">如何标注生命周期</a></li><li><ul><li><a href=\"#_24\">输出依赖于输入参数的生命周期</a></li><li><a href=\"#static_32\">输出为'static</a></li></ul>\n</li><li><a href=\"#struct_40\">struct中引用类型的标注</a></li><li><a href=\"#_50\">编译器自动标注</a></li><li><a href=\"#_57\">总结</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h3><a id=\"_1\"></a>所有权机制回顾</h3>\n<p>先来回顾一下前面的内容：</p>\n<ol><li>Rust的单一所有权机制，让编译器能够准确跟踪所有者的作用域，从而在在所有者超出作用域的时候进行值内存的释放。</li><li>在同一作用域之下，编译器能够准确判断所有借用（borrow）的使用情况，保证借用的生命周期不会超过值本身的生命周期。</li></ol>\n<h3><a id=\"_6\"></a>为何需要生命周期标注</h3>\n<p>尽管单一所有权机制能妥善处理大部分情况。但是，如果<strong>将借用（引用）作为函数返回值类型</strong>的时候，编译器就不干了：<strong>因为缺少足够的信息，无法判断返回的借用是否仍然有效，如果有效那么到何时失效的问题</strong>。<br/> 也就是说，编译器缺少被借用的值的生命周期信息。</p>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">max1</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token keyword\">if</span> x<span class=\"token operator\">&gt;</span>y <span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>y<span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上面的代码编译会报错：<strong>缺少具名的生命周期参数</strong>。</p>\n<pre><code class=\"prism language-text\">fn max1(x: &amp;i32, y: &amp;i32) -&gt; &amp;i32 {\n           ----     ----     ^ expected named lifetime parameter\n</code></pre>\n<h3><a id=\"_19\"></a>如何标注生命周期</h3>\n<p>对于返回借用类型缺少生命周期的问题解决，Rust的做法是，对函数返回值进行<strong>生命周期参数标注</strong>。<br/> <strong>返回的借用的生命周期，要么由输入参数的生命周期来标定，要么就是全局静态的</strong>（在整个程序运行期间有效），即<code>'static</code>。<br/> Rust中生命周期参数的格式为：<code>'1到多个小写字母</code>。<br/> 比如，<code>'a</code>、<code>'input</code>都是合法的生命周期参数。</p>\n<h4><a id=\"_24\"></a>输出依赖于输入参数的生命周期</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 输入的两个引用参数具有相同的生命周期参数'a，返回的引用也是</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">max2</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> x<span class=\"token operator\">&gt;</span>y <span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>y<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">max2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//19</span>\n</code></pre>\n<h4><a id=\"static_32\"></a>输出为’static</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">lifetime1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'static</span> <span class=\"token keyword\">str</span> <span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token comment\">//字符串字面量位于ROData区，生命周期是全局静态的</span>\n    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"struct_40\"></a>struct中引用类型的标注</h3>\n<p>写个小例子吧：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">TreeNode1</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    val<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n    left<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token class-name\">TreeNode1</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">,</span>\n    right<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token class-name\">TreeNode1</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_50\"></a>编译器自动标注</h3>\n<p>事实上，所有引用参数、引用返回值都需要生命周期标注，那为什么很多函数的参数或者返回值都使用了引用，编译器却没有提示我要额外标注生命周期呢？<br/> 答案是，编译器会通过一些简单的规则为函数自动添加标注：</p>\n<ol><li><strong>所有引用类型的参数都有独立的生命周期 'a 、'b 等</strong>。</li><li><strong>如果只有一个引用型输入，它的生命周期会赋给所有输出</strong>。</li><li><strong>如果有多个引用类型的参数，其中一个是 self，那么它的生命周期会赋给所有输出</strong>。</li></ol>\n<h3><a id=\"_57\"></a>总结</h3>\n<p>函数的引用参数和引用返回值需要生命周期参数进行标注，帮助编译器建立和编译时检查引用之间的生命周期约束关系。<br/> 返回引用的生命周期，需要依赖于输入参数的生命周期，或者是整个程序的运行周期（即：静态生命周期<code>'static</code>）。<br/> 编译器根据几条简单的规则对常见情况的引用参数自动进行标注，减轻开发者的负担。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}