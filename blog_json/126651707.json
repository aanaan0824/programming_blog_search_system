{"blogid": "126651707", "writerAge": "码龄3年", "writerBlogNum": "86", "writerCollect": "108", "writerComment": "7", "writerFan": "7", "writerGrade": "4级", "writerIntegral": "892", "writerName": "32码奴", "writerProfileAdress": "writer_image\\profile_126651707.jpg", "writerRankTotal": "21725", "writerRankWeekly": "4358", "writerThumb": "19", "writerVisitNum": "36992", "blog_read_count": "120", "blog_time": "已于 2022-09-03 18:41:17 修改", "blog_title": "STM32F407的USART", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#STM32_1\">STM32串口介绍</a></li><li><ul><li><a href=\"#STM32F103_2\">STM32F103串口</a></li><li><a href=\"#STM32F407_8\">STM32F407串口</a></li><li><a href=\"#printf_10\">串口对printf的支持</a></li></ul>\n</li><li><a href=\"#_12\">串口连接</a></li><li><ul><li><a href=\"#USARTUSART_13\">USART主机接USART从机</a></li><li><a href=\"#USARTUSB_15\">USART主机接电脑USB</a></li><li><a href=\"#USARTRS232_28\">USART主机接RS232从机</a></li><li><a href=\"#USARTRS485_35\">USART主机接RS485从机</a></li></ul>\n</li><li><a href=\"#_40\">串口初始化设置</a></li><li><ul><li><a href=\"#_42\">配置中断优先级</a></li><li><a href=\"#_47\">设置抢占优先级值和响应优先级</a></li><li><a href=\"#GPIO_58\">串口时钟使能，GPIO时钟使能</a></li><li><a href=\"#_65\">配置相应的引脚复用器映射</a></li><li><a href=\"#_94\">串口复位</a></li><li><a href=\"#GPIO_101\">GPIO端口设置及初始化</a></li><li><a href=\"#_116\">串口参数初始化</a></li><li><a href=\"#_167\">开启串口中断</a></li><li><a href=\"#_188\">串口使能</a></li><li><a href=\"#_196\">编写中断处理函数</a></li><li><ul><li><a href=\"#_198\">中断编写</a></li><li><a href=\"#_251\">数据发送与接收</a></li><li><a href=\"#_277\">串口状态</a></li></ul>\n</li><li><a href=\"#_306\">主函数调用</a></li><li><a href=\"#_351\">串口使用总结</a></li></ul>\n</li><li><a href=\"#_363\">端口重映射</a></li><li><ul><li><a href=\"#_372\">串口重映射步骤</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"STM32_1\"></a>STM32串口介绍</h1>\n<h2><a id=\"STM32F103_2\"></a>STM32F103串口</h2>\n<p>STM32F103ZET6 最多可提供 5 路串口，有分数波特率发生器、支持同步单线通信和半双工单线通讯、支持 LIN、支持调制解调器操作、智能卡协议和 IrDA SIR ENDEC 规范、具有 DMA等。</p>\n<ul><li>三个通用同步异步收发器USART</li><li>两个通用异步收发器UART \n  <ul><li>二者区别就在于一根时钟线，UART少一根线<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e1e1f22fc77c414ea0c8f421a452d70b.png\"/></li></ul> </li></ul>\n<h2><a id=\"STM32F407_8\"></a>STM32F407串口</h2>\n<p>最多可提供 6 路串口</p>\n<h2><a id=\"printf_10\"></a>串口对printf的支持</h2>\n<p>F4开发指南5.3.1，P142</p>\n<h1><a id=\"_12\"></a>串口连接</h1>\n<h2><a id=\"USARTUSART_13\"></a>USART主机接USART从机</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a2f5869780bb438088058deb0bd90f9f.png\"/></p>\n<h2><a id=\"USARTUSB_15\"></a>USART主机接电脑USB</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7ba4d158b0024b51a87f42cfff3de234.png\"/><br/> 一般的单片机硬件设计都会预留一个USART连接电脑，用于在调试程序时可以将调试信息打印在电脑端的串口调试助手。<br/> 但单片机的USART无法直接与PC通讯，需要借助CH340或CP2102等芯片实现USB与USART的相互转化。</p>\n<p>STM32F103 板载的 USB 串口和 STM32F103ZET6 的串口是通过 P4 连接起来的<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e0d17991b53742b785c673e1535db9b7.png\"/></p>\n<p>P4 是 PA9 和 PA10 的引出口。这里我们把 P4 的 RXD 和 TXD 用跳线帽与 PA9 和 PA10 连接起来。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ebf8fb63c7994502bad691059320cec1.png\"/></p>\n<p>TXD/RXD 是相对 CH340G 来说的，也就是 USB 串口的发送和接收引脚。</p>\n<ul><li>这样设计的好处就是使用上非常灵活。比如需要用到外部 TTL 串口和 STM32 通信的时候，只需要拔了跳线帽，通过杜邦线连接外部 TTL 串口，就可以实现和外部设备的串口通信了；</li></ul>\n<h2><a id=\"USARTRS232_28\"></a>USART主机接RS232从机</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0feadf96c9db419a995e856f67c033af.png\"/><br/> 单片机的USART无法直接与232设备通讯，需要借助MAX232等芯片实现232与USART的相互转化。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9659fbbc7a2847e587c4784d3f86a1cc.png\"/></p>\n<h2><a id=\"USARTRS485_35\"></a>USART主机接RS485从机</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f505007701ed465cafbb67b2fc237b71.png\"/></p>\n<h1><a id=\"_40\"></a>串口初始化设置</h1>\n<p>F4开发指南5.3.2，P143</p>\n<h2><a id=\"_42\"></a>配置中断优先级</h2>\n<pre><code class=\"prism language-c\"><span class=\"token function\">NVIC_PriorityGroupConfig</span><span class=\"token punctuation\">(</span>NVIC_PriorityGroup_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设 置 NVIC 中 断 分 组 2</span>\n</code></pre>\n<h2><a id=\"_47\"></a>设置抢占优先级值和响应优先级</h2>\n<pre><code class=\"prism language-c\">NVIC_InitStructure<span class=\"token punctuation\">.</span>NVIC_IRQChannel <span class=\"token operator\">=</span> USART1_IRQn<span class=\"token punctuation\">;</span> <span class=\"token comment\">//Usart1 中断配置</span>\nNVIC_InitStructure<span class=\"token punctuation\">.</span>NVIC_IRQChannelPreemptionPriority<span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">//抢占优先级 3</span>\nNVIC_InitStructure<span class=\"token punctuation\">.</span>NVIC_IRQChannelSubPriority <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//响应优先级 3</span>\nNVIC_InitStructure<span class=\"token punctuation\">.</span>NVIC_IRQChannelCmd <span class=\"token operator\">=</span> ENABLE<span class=\"token punctuation\">;</span> <span class=\"token comment\">//IRQ 通道使能</span>\n<span class=\"token function\">NVIC_Init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>NVIC_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//根据指定的参数初始化 VIC 寄存器</span>\n</code></pre>\n<h2><a id=\"GPIO_58\"></a>串口时钟使能，GPIO时钟使能</h2>\n<p>串口1是挂载在APB2 下面的外设，所以使能函数为：</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">RCC_AHB1PeriphClockCmd</span><span class=\"token punctuation\">(</span>RCC_AHB1Periph_GPIOA<span class=\"token punctuation\">,</span>ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//使能 GPIOA 时钟</span>\n<span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span>RCC_APB2Periph_USART1<span class=\"token punctuation\">,</span>ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使能 USART1 时钟</span>\n</code></pre>\n<h2><a id=\"_65\"></a>配置相应的引脚复用器映射</h2>\n<pre><code class=\"prism language-c\"><span class=\"token function\">GPIO_PinAFConfig</span><span class=\"token punctuation\">(</span>GPIOA<span class=\"token punctuation\">,</span>GPIO_PinSource9<span class=\"token punctuation\">,</span>GPIO_AF_USART1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//PA9 复用为 USART1</span>\n<span class=\"token function\">GPIO_PinAFConfig</span><span class=\"token punctuation\">(</span>GPIOA<span class=\"token punctuation\">,</span>GPIO_PinSource10<span class=\"token punctuation\">,</span>GPIO_AF_USART1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//PA10复用为USART1</span>\n</code></pre>\n<p>详细不分可以参考F4开发指南4.4，IO 引脚复用器和映射P117</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">IS_GPIO_AF</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_RTC_50Hz<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_TIM14<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_MCO<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_TAMPER<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_SWJ<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_TRACE<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_TIM1<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_TIM2<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_TIM3<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_TIM4<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_TIM5<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_TIM8<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_I2C1<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_I2C2<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_I2C3<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_SPI1<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_SPI2<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_TIM13<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_SPI3<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_TIM14<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_USART1<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_USART2<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_USART3<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_UART4<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_UART5<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_USART6<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_CAN1<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_CAN2<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_OTG_FS<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_OTG_HS<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_ETH<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_OTG_HS_FS<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_SDIO<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_DCMI<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_EVENTOUT<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AF<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GPIO_AF_FSMC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n</code></pre>\n<h2><a id=\"_94\"></a>串口复位</h2>\n<p>当外设出现异常的时候可以通过复位设置，实现该外设的复位，然后重新配置这个外设达到让其重新工作的目的。<br/> 一般在系统刚开始配置外设的时候，都会先执行复位该外设的操作。复位的是在函数 USART_DeInit()中完成：<br/> void USART_DeInit(USART_TypeDef* USARTx);//串口复位<br/> 比如我们要复位串口 1，方法为：<br/> USART_DeInit(USART1); //复位串口 1</p>\n<h2><a id=\"GPIO_101\"></a>GPIO端口设置及初始化</h2>\n<pre><code class=\"prism language-c\">GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Pin <span class=\"token operator\">=</span> GPIO_Pin_9 <span class=\"token operator\">|</span> GPIO_Pin_10<span class=\"token punctuation\">;</span> <span class=\"token comment\">//GPIOA9 与 GPIOA10</span>\nGPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Mode <span class=\"token operator\">=</span> GPIO_Mode_AF<span class=\"token punctuation\">;</span><span class=\"token comment\">//复用功能</span>\nGPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Speed <span class=\"token operator\">=</span> GPIO_Speed_50MHz<span class=\"token punctuation\">;</span> <span class=\"token comment\">//速度 50MHz</span>\nGPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_OType <span class=\"token operator\">=</span> GPIO_OType_PP<span class=\"token punctuation\">;</span> <span class=\"token comment\">//推挽复用输出</span>\nGPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_PuPd <span class=\"token operator\">=</span> GPIO_PuPd_UP<span class=\"token punctuation\">;</span> <span class=\"token comment\">//上拉</span>\n<span class=\"token function\">GPIO_Init</span><span class=\"token punctuation\">(</span>GPIOA<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>GPIO_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//初始化 PA9，PA10</span>\n</code></pre>\n<p>中文参考手册：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\15123f209839495ca403afb75e659a14.png\"/></p>\n<h2><a id=\"_116\"></a>串口参数初始化</h2>\n<p>usart.c里面包含了2个函数<br/> 一个是void USART1_IRQHandler(void);<br/> 另外一个是void uart_init(u32bound);</p>\n<p>串口初始化是通过 USART_Init()函数实现的，</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">USART_Init</span><span class=\"token punctuation\">(</span>USART_TypeDef<span class=\"token operator\">*</span> USARTx<span class=\"token punctuation\">,</span> USART_InitTypeDef<span class=\"token operator\">*</span> USART_InitStruct<span class=\"token punctuation\">)</span>；\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token class-name\">uint32_t</span> USART_BaudRate<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">uint16_t</span> USART_WordLength<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">uint16_t</span> USART_StopBits<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">uint16_t</span> USART_Parity<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">uint16_t</span> USART_Mode<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">uint16_t</span> USART_HardwareFlowControl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> USART_InitTypeDef<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这个结构体有 6 个成员变量，所以我们有 6 个参数需要初始化。</p>\n<ul><li> <p>USART_BaudRate 为串口波特率，波特率可以说是串口最重要的参数了。参见波特率寄存器(USART_BRR)</p> </li><li> <p>USART_WordLength 为字长，这里我们设置为 8 位字长数据格式。参见 控制寄存器 1(USART_CR1)</p> </li><li> <p>USART_StopBits 为停止位设置，我们设置为 1 位停止位。参见控制寄存器 2(USART_CR2)第12位<br/> <img alt=\"在这里插入图片描述\" src=\"image\\777da03d8c2146e59fc2388d4b3b093e.png\"/></p> </li><li> <p>USART_Parity 设定是否需要奇偶校验，我们设定为无奇偶校验位。参见控制寄存器 1(USART_CR1)第9位。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\26a5ee9439bb4148a8f8e809ba7fec9f.png\"/></p> </li><li> <p>USART_Mode 为串口模式，我们设置为全双工收发模式。参见 控制寄存器 3(USART_CR3)第三位</p> </li><li> <p>第六个参数为是否支持硬件流控制，我们设置为无硬件流控制。</p> </li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\cd8c357e8a3144779f6da3b29d1f4521.png\"/></p>\n<pre><code class=\"prism language-c\">USART_InitTypeDef USART_InitStructure<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//USART 初始化设置，接下来我们要设置串口 1 的初始化参数：</span>\nUSART_InitStructure<span class=\"token punctuation\">.</span>USART_BaudRate <span class=\"token operator\">=</span> bound<span class=\"token punctuation\">;</span><span class=\"token comment\">//波特率设置;</span>\nUSART_InitStructure<span class=\"token punctuation\">.</span>USART_WordLength <span class=\"token operator\">=</span> USART_WordLength_8b<span class=\"token punctuation\">;</span><span class=\"token comment\">//字长为 8 位</span>\nUSART_InitStructure<span class=\"token punctuation\">.</span>USART_StopBits <span class=\"token operator\">=</span> USART_StopBits_1<span class=\"token punctuation\">;</span><span class=\"token comment\">//一个停止位</span>\nUSART_InitStructure<span class=\"token punctuation\">.</span>USART_Parity <span class=\"token operator\">=</span> USART_Parity_No<span class=\"token punctuation\">;</span> <span class=\"token comment\">//无奇偶校验位</span>\nUSART_InitStructure<span class=\"token punctuation\">.</span>USART_HardwareFlowControl<span class=\"token operator\">=</span>\nUSART_HardwareFlowControl_None<span class=\"token punctuation\">;</span><span class=\"token comment\">//无硬件数据流控制</span>\nUSART_InitStructure<span class=\"token punctuation\">.</span>USART_Mode <span class=\"token operator\">=</span> USART_Mode_Rx <span class=\"token operator\">|</span>USART_Mode_Tx<span class=\"token punctuation\">;</span><span class=\"token comment\">//收发模式</span>\n<span class=\"token function\">USART_Init</span><span class=\"token punctuation\">(</span>USART1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>USART_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//初始化串口</span>\n</code></pre>\n<p>如果有过采样的话有8和16可以选择，一般选择16。</p>\n<h2><a id=\"_167\"></a>开启串口中断</h2>\n<p>如果需要开启中断的话。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">USART_ITConfig</span><span class=\"token punctuation\">(</span>USART_TypeDef<span class=\"token operator\">*</span> USARTx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> USART_IT<span class=\"token punctuation\">,</span>FunctionalState NewState<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>函数的第二个入口参数标识使能串口的类型，也就是使能哪种中断。<br/> 比如在接收到数据的时候（RXNE 读数据寄存器非空）要产生中断，那么我们开启中断的方法是：</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">USART_ITConfig</span><span class=\"token punctuation\">(</span>USART1<span class=\"token punctuation\">,</span> USART_IT_RXNE<span class=\"token punctuation\">,</span> ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//开启中断，接收到数据中断</span>\n</code></pre>\n<p>我们在发送数据结束的时候（TC，发送完成）要产生中断，那么方法是：</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">USART_ITConfig</span><span class=\"token punctuation\">(</span>USART1，USART_IT_TC，ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e871545dfc894b8e8eadf2122da653a6.png\"/></p>\n<h2><a id=\"_188\"></a>串口使能</h2>\n<p>串口使能是通过函数 USART_Cmd()来实现的，这个很容易理解，使用方法是：</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">USART_Cmd</span><span class=\"token punctuation\">(</span>USART1<span class=\"token punctuation\">,</span> ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//使能串口</span>\n</code></pre>\n<h2><a id=\"_196\"></a>编写中断处理函数</h2>\n<h3><a id=\"_198\"></a>中断编写</h3>\n<p>void USART1_IRQHandler(void)函数是串口 1 的中断响应函数，当串口 1 发生了相应的中断后，就会跳到该函数执行。</p>\n<pre><code class=\"prism language-c\"> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">USART_GetITStatus</span><span class=\"token punctuation\">(</span>USART1<span class=\"token punctuation\">,</span> USART_IT_RXNE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> RESET<span class=\"token punctuation\">)</span>\nRes <span class=\"token operator\">=</span><span class=\"token function\">USART_ReceiveData</span><span class=\"token punctuation\">(</span>USART1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//(USART1-&gt;DR); //读取接收到的数据</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d328995ec24c49c784bc67f6bd94fac3.png\"/></p>\n<p>这里我们设计了一个小小的接收协议，具体协议参见F4开发指南5.3.3的145页。</p>\n<p>具体函数：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">USART1_IRQHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//串口 1 中断服务程序</span>\n<span class=\"token punctuation\">{<!-- --></span>\nu8 Res<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">SYSTEM_SUPPORT_OS </span><span class=\"token comment\">//如果 SYSTEM_SUPPORT_OS 为真，则需要支持 OS</span></span>\n<span class=\"token function\">OSIntEnter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">USART_GetITStatus</span><span class=\"token punctuation\">(</span>USART1<span class=\"token punctuation\">,</span> USART_IT_RXNE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> RESET<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//接收中断(接收到的数据必须是 0x0d 0x0a 结尾)</span>\n<span class=\"token punctuation\">{<!-- --></span>\nRes <span class=\"token operator\">=</span><span class=\"token function\">USART_ReceiveData</span><span class=\"token punctuation\">(</span>USART1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//(USART1-&gt;DR); //读取接收到的数据</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>USART_RX_STA<span class=\"token operator\">&amp;</span><span class=\"token number\">0x8000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//接收未完成，后边清零器，第十六位是0则0，是1则1；</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>USART_RX_STA<span class=\"token operator\">&amp;</span><span class=\"token number\">0x4000</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//接收到了 0x0d</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Res<span class=\"token operator\">!=</span><span class=\"token number\">0x0a</span><span class=\"token punctuation\">)</span>USART_RX_STA<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//接收错误,重新开始</span>\n<span class=\"token keyword\">else</span> USART_RX_STA<span class=\"token operator\">|=</span><span class=\"token number\">0x8000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//接收完成了</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span> <span class=\"token comment\">//还没收到 0X0D</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Res<span class=\"token operator\">==</span><span class=\"token number\">0x0d</span><span class=\"token punctuation\">)</span>USART_RX_STA<span class=\"token operator\">|=</span><span class=\"token number\">0x4000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token punctuation\">{<!-- --></span>\nUSART_RX_BUF<span class=\"token punctuation\">[</span>USART_RX_STA<span class=\"token operator\">&amp;</span><span class=\"token number\">0X3FFF</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Res <span class=\"token punctuation\">;</span>\nUSART_RX_STA<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>USART_RX_STA<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>USART_REC_LEN<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>USART_RX_STA<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//接收数据错误,重新开始接收</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">SYSTEM_SUPPORT_OS </span><span class=\"token comment\">//如果 SYSTEM_SUPPORT_OS 为真，则需要支持 OS.</span></span>\n<span class=\"token function\">OSIntExit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_251\"></a>数据发送与接收</h3>\n<p>STM32 的发送与接收是通过数据寄存器 USART_DR 来实现的，这是一个双寄存器，包含了 TDR 和 RDR。<br/> 当向该寄存器写数据的时候，串口就会自动发送，当收到数据的时候，也是存在该寄存器内。</p>\n<p>STM32 库函数操作 USART_DR 寄存器发送数据的函数是：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">USART_SendData</span><span class=\"token punctuation\">(</span>USART_TypeDef<span class=\"token operator\">*</span> USARTx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>通过该函数向串口寄存器 USART_DR 写入一个数据。</p>\n<p>STM32 库函数操作 USART_DR 寄存器读取串口接收到的数据的函数是：</p>\n<pre><code class=\"prism language-c\"><span class=\"token class-name\">uint16_t</span> <span class=\"token function\">USART_ReceiveData</span><span class=\"token punctuation\">(</span>USART_TypeDef<span class=\"token operator\">*</span> USARTx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>通过该函数可以读取串口接受到的数据。</p>\n<pre><code class=\"prism language-c\">Res <span class=\"token operator\">=</span><span class=\"token function\">USART_ReceiveData</span><span class=\"token punctuation\">(</span>USART1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//(USART1-&gt;DR); //读取接收到的数据</span>\n</code></pre>\n<p>RS485发送和接收数据</p>\n<h3><a id=\"_277\"></a>串口状态</h3>\n<p>串口的状态可以通过状态寄存器 USART_SR 状态寄存器读取。</p>\n<p>在固件库函数里面，读取串口状态的函数是：</p>\n<pre><code class=\"prism language-c\">FlagStatus <span class=\"token function\">USART_GetFlagStatus</span><span class=\"token punctuation\">(</span>USART_TypeDef<span class=\"token operator\">*</span> USARTx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> USART_FLAG<span class=\"token punctuation\">)</span>；\n</code></pre>\n<p>串口状态与中断状态很类似，这里不多说了<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ea71f219ecfd4f1d98a634ac9acadf54.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USART_IT_PE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0028</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USART_IT_TXE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0727</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USART_IT_TC</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0626</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USART_IT_RXNE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0525</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USART_IT_IDLE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0424</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USART_IT_LBD</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0846</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USART_IT_CTS</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x096A</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USART_IT_ERR</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0060</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USART_IT_ORE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0360</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USART_IT_NE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0260</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USART_IT_FE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0160</span><span class=\"token punctuation\">)</span></span></span>\n</code></pre>\n<h2><a id=\"_306\"></a>主函数调用</h2>\n<p>回到 main.c，在 main.c 里面编写如下代码：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"led.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"delay.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"key.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"sys.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"usart.h\"</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\nu8 t<span class=\"token punctuation\">;</span>\nu8 len<span class=\"token punctuation\">;</span>\nu16 times<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">delay_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//延时函数初始化</span>\n<span class=\"token function\">NVIC_PriorityGroupConfig</span><span class=\"token punctuation\">(</span>NVIC_PriorityGroup_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设 置 NVIC 中 断 分 组 2</span>\n<span class=\"token function\">uart_init</span><span class=\"token punctuation\">(</span><span class=\"token number\">115200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//串口初始化波特率为 115200</span>\n<span class=\"token function\">LED_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//LED 端口初始化</span>\n<span class=\"token function\">KEY_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//初始化与按键连接的硬件接口</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>USART_RX_STA<span class=\"token operator\">&amp;</span><span class=\"token number\">0x8000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span> len<span class=\"token operator\">=</span>USART_RX_STA<span class=\"token operator\">&amp;</span><span class=\"token number\">0x3f</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//得到此次接收到的数据长度</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n 您发送的消息为:\\r\\n\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>t<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span> <span class=\"token function\">USART_SendData</span><span class=\"token punctuation\">(</span>USART1<span class=\"token punctuation\">,</span> USART_RX_BUF<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//向串口 1 发送数据</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">USART_GetFlagStatus</span><span class=\"token punctuation\">(</span>USART1<span class=\"token punctuation\">,</span>USART_FLAG_TC<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//等待发送结束</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//插入换行</span>\nUSART_RX_STA<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span>\n<span class=\"token punctuation\">{<!-- --></span> times<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>times<span class=\"token operator\">%</span><span class=\"token number\">5000</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n 战舰 STM32 开发板 串口实验\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正点原子@ALIENTEK\\r\\n\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>times<span class=\"token operator\">%</span><span class=\"token number\">200</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数据,以回车键结束\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>times<span class=\"token operator\">%</span><span class=\"token number\">30</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>LED0<span class=\"token operator\">=</span><span class=\"token operator\">!</span>LED0<span class=\"token punctuation\">;</span> <span class=\"token comment\">//闪烁 LED,提示系统正在运行.</span>\n<span class=\"token function\">delay_ms</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_351\"></a>串口使用总结</h2>\n<ul><li>如果用到了中断，首先要配置嵌套中断向量组</li><li>嵌套中断向量组配置了就该配置中断优先级和中断通道</li><li>中断初始化，中断使能</li><li>根据串口挂载使能相应时钟，根据串口发送接收线使能相应端口</li><li>端口初始化</li><li>串口复位</li><li>设置串口参数(波特率，帧结构，收发模式)</li><li>串口初始化，串口使能</li><li>中断处理函数</li></ul>\n<h1><a id=\"_363\"></a>端口重映射</h1>\n<p>为了使不同器件封装的外设 IO 功能数量达到最优，可以把一些复用功能重新映射到其他一些引脚上（remap）。<br/> 即一个外设的引脚除了具有默认的端口外，还可以通过设置重映射寄存器的方式，把这个外设的引脚映射到其它的端口。<br/> 简单的讲就是把管脚的外设功能映射到另一个管脚，但不是可以随便映射的，具体对应关系《STM32 中文参考手册 V10》<br/> 拿串口 1 为例来讲解。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0bea7d122516498bbcc67d78d1474d5c.png\"/></p>\n<p>从表中可以看出，默认情况下，串口 1 复用的时候的引脚位 PA9,PA10，同时我们可以将 TX 和 RX 重新映射到管脚 PB6 和 PB7 上面去。</p>\n<h2><a id=\"_372\"></a>串口重映射步骤</h2>\n<p>重映射我们同样要使能复用功能的时候讲解的 2 个时钟外，还要使能 AFIO 功能时钟，然后调用重映射函数。<br/> 1）使能 GPIOB 时钟：<br/> RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);<br/> 2）使能串口 1 时钟：<br/> RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);<br/> 3）使能 AFIO 时钟：<br/> RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);<br/> 4）开启重映射：<br/> GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE);<br/> USART1 只有一种重映射，而对于 USART3,存在部分重映射和完全重映射。所谓部分重映射就是部分管脚和默认的是一样的，而部分管脚是重新映射到其他管脚。而完全重映射就是所有管脚都重新映射到其他管脚。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1cfb283837d04759a50effd47468eefd.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}