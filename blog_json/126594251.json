{"blogid": "126594251", "writerAge": "码龄2年", "writerBlogNum": "146", "writerCollect": "3852", "writerComment": "172", "writerFan": "11944", "writerGrade": "5级", "writerIntegral": "4388", "writerName": "嵌入式基地", "writerProfileAdress": "writer_image\\profile_126594251.jpg", "writerRankTotal": "3626", "writerRankWeekly": "1902", "writerThumb": "447", "writerVisitNum": "325125", "blog_read_count": "382", "blog_time": "已于 2022-08-29 23:20:54 修改", "blog_title": "牛客网C语言刷题（指针篇）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>✅作者简介：大家好我是：嵌入式基地，是一名嵌入式工程师，希望一起努力，一起进步！<br/> 📃个人主页：<a href=\"https://blog.csdn.net/m0_51061483?spm=1000.2115.3001.5343\">嵌入式基地</a><br/> 🔥系列专栏：<a href=\"https://blog.csdn.net/m0_51061483/category_11988254.html\">牛客网C语言刷题专栏</a><br/> 💬推荐一款模拟面试、刷题神器，从基础到大厂面试题👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_qrsjd_c\">点击跳转刷题网站进行注册学习</a></p>\n</blockquote>\n<p><img alt=\"\" src=\"image\\fc48bb4aba8e4bf79de82cfd9820e072.png\"/><br/> </p>\n<div class=\"toc\">\n<h3>牛客网C语言刷题（指针篇）</h3>\n<ul><li><a href=\"#_8\">习题一：获取字符串长度</a></li><li><a href=\"#_54\">习题二：复制部分字符串</a></li><li><a href=\"#_111\">习题三：编写函数实现两数交换（指针方式）</a></li><li><a href=\"#_168\">习题四：利用指针遍历数组</a></li><li><a href=\"#_225\">习题五：牛牛的新数组求和</a></li><li><a href=\"#_277\">习题六：牛牛的排序</a></li><li><a href=\"#_341\">结束语</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_8\"></a>习题一：获取字符串长度</h1>\n<p><strong>描述</strong></p>\n<ul><li>键盘输入一个字符串，编写代码获取字符串的长度并输出，要求使用字符指针实现。</li></ul>\n<p><strong>输入描述</strong></p>\n<ul><li>键盘输入一个字符串</li></ul>\n<p><strong>输出描述</strong></p>\n<ul><li>输出字符串的长度</li></ul>\n<p><strong>示例</strong></p>\n<pre><code class=\"prism language-c\">输入：\nhelloworld\n输出：\n<span class=\"token number\">10</span>\n</code></pre>\n<p><strong>解析</strong></p>\n<ul><li>定义一个指针指向字符串开头。</li><li>只要指针对应元素不是’\\n’，将指针后移，同时长度加1。</li></ul>\n<p><strong>代码实现</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>str<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//只要指针没有指向换行符位置</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token operator\">!=</span><span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//长度加1，指针p后移</span>\n        len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>len<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_54\"></a>习题二：复制部分字符串</h1>\n<p><strong>描述</strong></p>\n<ul><li>键盘输入一个长度为len（1 &lt;= len &lt; 30）的字符串，再输入一个正整数 m（1 &lt;= m &lt;= len），将此字符串中从第 m 个字符开始的剩余全部字符复制成为另一个字符串，并将这个新字符串输出。要求用指针处理字符串。</li></ul>\n<p><strong>输入描述</strong></p>\n<ul><li>键盘输入一个长度为len（1 &lt;= len &lt; 30）的字符串，再输入一个正整数 m（1 &lt;= m &lt;= len）</li></ul>\n<p><strong>输出描述</strong></p>\n<ul><li>输出复制的新字符串</li></ul>\n<p><strong>示例</strong></p>\n<pre><code class=\"prism language-c\">输入：\nhelloworld\n<span class=\"token number\">6</span>\n输出：\nworld\n</code></pre>\n<p><strong>解析</strong></p>\n<blockquote>\n<p>题目所给的代码中，输入的字符串是一个字符数组，采用getline函数输入，这样会在输入的末尾增加一个’\\0’表示字符串的结束，如果长度小于数组长度，输入所有字符后加’\\0’，如果长度大于数组长度，截断输入的前面部分再在最后加’\\0’。</p>\n<p>我们准备一个新串来保存复制后的字符串，因为原串大小不会超过30，因此新串的大小也不会超过30.</p>\n<p>题目要求使用指针，我们可以用两个指针，指针p一开始指向原串的第m个位置，指针q一开始指向新串的起始位置。然后利用指针p遍历原串，到末尾的’\\0’结束，遍历过程中像指针q指向的地址复制指针p指向元素的值，然后指针同步后移。</p>\n</blockquote>\n<p><img alt=\"\" src=\"image\\756c50712f7148bc9d82da538fad6ae9.png\"/></p>\n<p><strong>代码实现</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">&gt;&gt;</span> m<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// write your code here......</span>\n    <span class=\"token keyword\">char</span> copystr<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> str <span class=\"token operator\">+</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//指向字符数组第m个元素</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> q <span class=\"token operator\">=</span> copystr<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//直到字符串结果</span>\n        <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//复制</span>\n        p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//两边指针都后移</span>\n        q<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> copystr <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1><a id=\"_111\"></a>习题三：编写函数实现两数交换（指针方式）</h1>\n<p><strong>描述</strong></p>\n<ul><li>键盘输入一个长度为len（1 &lt;= len &lt; 30）的字符串，再输入一个正整数 m（1 &lt;= m &lt;= len），将此字符串中从第 m 个字符开始的剩余全部字符复制成为另一个字符串，并将这个新字符串输出。要求用指针处理字符串。</li></ul>\n<p><strong>输入描述</strong></p>\n<ul><li>键盘输入2个整数 m 和 n</li></ul>\n<p><strong>输出描述</strong></p>\n<ul><li>输出交换后m 和 n 的值，中间使用空格隔开</li></ul>\n<p><strong>示例</strong></p>\n<pre><code class=\"prism language-c\">输入：\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\n输出：\n<span class=\"token number\">3</span> <span class=\"token number\">2</span>\n</code></pre>\n<p><strong>代码实现</strong></p>\n<pre><code class=\"prism language-c\">using namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// write your code here......</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swapp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">&gt;&gt;</span> m<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">&gt;&gt;</span> n<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// write your code here......</span>\n<span class=\"token comment\">//     swap(m,n); // 指针变量</span>\n    <span class=\"token function\">swapp</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//引用变量</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> m <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>q<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swapp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_168\"></a>习题四：利用指针遍历数组</h1>\n<p><strong>描述</strong></p>\n<ul><li>键盘随机输入 6 个整数，将这些数据保存到数组中，利用指针遍历数组中的元素并打印。</li></ul>\n<p><strong>输入描述</strong></p>\n<ul><li>键盘随机输入 6 个整数</li></ul>\n<p><strong>输出描述</strong></p>\n<ul><li>输出数组中的所有元素，每个元素中间使用空格隔开</li><li>例如：10 20 30 40 50 60</li></ul>\n<p><strong>示例</strong></p>\n<pre><code class=\"prism language-c\">输入：\n<span class=\"token number\">10</span>\n<span class=\"token number\">20</span>\n<span class=\"token number\">30</span> \n<span class=\"token number\">40</span>\n<span class=\"token number\">50</span>\n<span class=\"token number\">60</span>\n\n输出：\n<span class=\"token number\">10</span> <span class=\"token number\">20</span> <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span> <span class=\"token number\">60</span>\n</code></pre>\n<p><strong>解析</strong></p>\n<ul><li>利用指针遍历数组， 数组名就是数组第一个元素的地址</li><li>因此将地址范围知道，就可以访问每一个元素的值</li><li>这里的指针4个字节（64位的话8个字节）作为一整块</li></ul>\n<p><strong>代码实现</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cin <span class=\"token operator\">&gt;&gt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ptr <span class=\"token punctuation\">;</span> ptr <span class=\"token operator\">&lt;</span> arr <span class=\"token operator\">+</span> len <span class=\"token punctuation\">;</span> ptr<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span>  <span class=\"token operator\">*</span>ptr<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_225\"></a>习题五：牛牛的新数组求和</h1>\n<p><strong>描述</strong></p>\n<ul><li>牛牛学习了指针相关的知识，想实现一个 int cal(int *array,int n) 的函数求出长度为 n 的数组的和。</li></ul>\n<p><strong>输入描述</strong></p>\n<ul><li>第一行输入一个正整数 n ，表示数组的长度</li><li>第二行输入 n 个正整数，表示数组中每个数字的值</li></ul>\n<p><strong>输出描述</strong></p>\n<ul><li>实现 int cal(int *array,int n) 求出数组array的和</li></ul>\n<p><strong>示例</strong></p>\n<pre><code class=\"prism language-c\">输入：\n<span class=\"token number\">5</span>\n<span class=\"token number\">2</span> <span class=\"token number\">8</span> <span class=\"token number\">1</span> <span class=\"token number\">9</span> <span class=\"token number\">5</span>\n\n输出：\n<span class=\"token number\">25</span>\n</code></pre>\n<p><strong>代码实现</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>array<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> array<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n       sum<span class=\"token operator\">+=</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n         p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   \n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">&gt;&gt;</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cin<span class=\"token operator\">&gt;&gt;</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_277\"></a>习题六：牛牛的排序</h1>\n<p><strong>描述</strong></p>\n<ul><li>牛牛试图给一个长度为 n 整数数组排序，即实现一个 void sort(int *array,int n)</li></ul>\n<p><strong>输入描述</strong></p>\n<ul><li>第一行输入一个正整数 n ，表示数组长度。</li><li>第二行输入 n 个正整数，表示数组中每个元素的值</li></ul>\n<p><strong>输出描述</strong></p>\n<ul><li>输出排序后的数组</li></ul>\n<p><strong>示例</strong></p>\n<pre><code class=\"prism language-c\">输入：\n<span class=\"token number\">5</span>\n<span class=\"token number\">2</span> <span class=\"token number\">9</span> <span class=\"token number\">8</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span>\n\n输出：\n<span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">8</span> <span class=\"token number\">9</span>\n</code></pre>\n<p><strong>代码实现</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sort</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>    <span class=\"token comment\">//冒泡排序</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">int</span> tmp<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>   \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        \n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1><a id=\"_341\"></a>结束语</h1>\n<blockquote>\n<p>你想要的牛客都有，各种大厂面试真题在等你哦！快快通过下方链接注册加入刷题大军吧！<br/> 💬刷题神器，从基础到大厂面试题👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_qrsjd_c\">点击跳转刷题网站</a></p>\n</blockquote>\n<p><img alt=\"\" src=\"image\\8a3149e909534ca2b9a134ac1b535448.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}