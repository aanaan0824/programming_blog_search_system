{"blogid": "126730502", "writerAge": "码龄2年", "writerBlogNum": "40", "writerCollect": "140", "writerComment": "220", "writerFan": "333", "writerGrade": "4级", "writerIntegral": "912", "writerName": "念舒_C.ying", "writerProfileAdress": "writer_image\\profile_126730502.jpg", "writerRankTotal": "25979", "writerRankWeekly": "662", "writerThumb": "247", "writerVisitNum": "7397", "blog_read_count": "59", "blog_time": "于 2022-09-06 18:23:45 发布", "blog_title": "【云原生 · Kubernetes】部署kube-apiserver集群", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p><font face=\"楷体\" size=\"3\"><strong>个人名片：</strong><br/> 因为云计算成为了监控工程师👨🏻‍💻<br/> <font color=\"#FF0000\" face=\"楷体\" size=\"3\">个人博客🏆：<a href=\"https://nianshu2022.github.io/\">念舒_C.ying</a><br/> CSDN主页✏️：<a href=\"https://blog.csdn.net/qq_52716296?spm=1011.2415.3001.5343\">念舒_C.ying</a></font></font></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>部署kube-apiserver集群</h3>\n<ul><li><ul><li><ul><li><a href=\"#101_kubeapiserver__10\">10.1 创建kube-apiserver 证书</a></li><li><a href=\"#102__66\">10.2 创建加密配置文件</a></li><li><a href=\"#103__Kubernetes_webhook__87\">10.3 创建 Kubernetes webhook 证书</a></li><li><a href=\"#104__kubeapiserver__127\">10.4 创建 kube-apiserver 配置文件</a></li><li><a href=\"#105_kubeapiserver__312\">10.5 分发kube-apiserver 证书及配置</a></li><li><a href=\"#106__kubeapiserver_systemd_unit__333\">10.6 创建 kube-apiserver systemd unit 文件</a></li><li><a href=\"#107__kubeapiserver__355\">10.7 启动 kube-apiserver 服务</a></li><li><a href=\"#108__366\">10.8 检查启动结果</a></li><li><a href=\"#109__378\">10.9 验证服务状态</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<br/>\n<strong>集群规划：</strong>\n<br/> 服务网段：10.66.0.0/16\n<br/> Pod 网段：10.80.0.0/12\n<br/> 集群域名：cluster.local\n<p></p>\n<h3><a id=\"101_kubeapiserver__10\"></a>10.1 创建kube-apiserver 证书</h3>\n<p>创建证书签名请求：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">cd</span> /opt/k8s/work\n<span class=\"token function\">cat</span> <span class=\"token operator\">&gt;</span> /opt/k8s/cfssl/k8s/k8s-apiserver.json <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">EOF\n{\n\"CN\": \"kubernetes\",\n\"hosts\": [\n\"192.168.2.175\",\"192.168.2.176\",\"192.168.2.177\",\n\"10.66.0.1\",\n\"192.168.2.175\",\"127.0.0.1\",\n\"kubernetes\",\n\"kubernetes.default\",\n\"kubernetes.default.svc\",\n\"kubernetes.default.svc.cluster.local\"\n],\n\"key\": {\n\"algo\": \"rsa\",\n\"size\": 2048\n},\n\"names\": [\n{\n\"C\": \"CN\",\n\"ST\": \"GuangDong\",\n\"L\": \"GuangZhou\",\n\"O\": \"k8s\",\n\"OU\": \"Qist\"\n}\n]\n}\nEOF</span>\n</code></pre>\n<ul><li>hosts 字段指定授权使用该证书的 IP 和域名列表，这里列出了 master 节点 IP、kubernetes 服务的IP 和域名；</li></ul>\n<blockquote>\n<ul><li>10.66.0.1：kube-apiserver service ip 一般是service第一个ip service-cluster-ip-range 参数</li><li>“192.168.2.175”,“192.168.2.176”,“192.168.2.177”： master 节点IP</li><li>“192.168.2.175”,“127.0.0.1”：192.168.2.175 vip ip 方便客户端访问 本地127IP 能访问</li><li>kube-ha-proxy使用\"kubernetes.default.svc.cluster.local\"：全局域名访问cluster.local 可以是其它域</li></ul>\n</blockquote>\n<p>生成 Kubernetes API Server 证书和私钥</p>\n<pre><code class=\"prism language-bash\">cfssl gencert \\\n-ca<span class=\"token operator\">=</span>/opt/k8s/cfssl/pki/k8s/k8s-ca.pem \\\n-ca-key<span class=\"token operator\">=</span>/opt/k8s/cfssl/pki/k8s/k8s-ca-key.pem \\\n-config<span class=\"token operator\">=</span>/opt/k8s/cfssl/ca-config.json \\\n-profile<span class=\"token operator\">=</span>kubernetes \\\n/opt/k8s/cfssl/k8s/k8s-apiserver.json <span class=\"token operator\">|</span> \\\ncfssljson -bare /opt/k8s/cfssl/pki/k8s/k8s-server\n</code></pre>\n<h3><a id=\"102__66\"></a>10.2 创建加密配置文件</h3>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 生成 EncryptionConfig 所需的加密 key</span>\n<span class=\"token function\">export</span> ENCRYPTION_KEY<span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">head</span> -c 32 /dev/urandom <span class=\"token operator\">|</span> base64<span class=\"token variable\">)</span></span>\n<span class=\"token function\">cd</span> /opt/k8s/work\n<span class=\"token function\">mkdir</span> config\n<span class=\"token function\">cat</span> <span class=\"token operator\">&gt;</span> config/encryption-config.yaml <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">EOF\nkind: EncryptionConfig\napiVersion: v1\nresources:\n- resources:\n- secrets\nproviders:\n- aescbc:\nkeys:\n- name: key1\nsecret: <span class=\"token variable\">${ENCRYPTION_KEY}</span>\n- identity: {}\nEOF</span>\n</code></pre>\n<h3><a id=\"103__Kubernetes_webhook__87\"></a>10.3 创建 Kubernetes webhook 证书</h3>\n<p>创建证书签名请求：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">cd</span> /opt/k8s/work\n<span class=\"token function\">cat</span> <span class=\"token operator\">&gt;</span> /opt/k8s/cfssl/k8s/aggregator.json <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">EOF\n{\n\"CN\": \"aggregator\",\n\"hosts\": [\"\"],\n\"key\": {\n\"algo\": \"rsa\",\n\"size\": 2048\n},\n\"names\": [\n{\n\"C\": \"CN\",\n\"ST\": \"GuangDong\",\n\"L\": \"GuangZhou\",\n\"O\": \"k8s\",\n\"OU\": \"Qist\"\n}\n]\n}\nEOF</span>\n</code></pre>\n<ul><li>CN 名称需要位于 kube-apiserver 的 --requestheader-allowed-names<br/> 参数中，否则后续访问metrics 时会提示权限不足。</li></ul>\n<p>生成 Kubernetes webhook 证书和私钥</p>\n<pre><code class=\"prism language-bash\">cfssl gencert \\\n-ca<span class=\"token operator\">=</span>/opt/k8s/cfssl/pki/k8s/k8s-ca.pem \\\n-ca-key<span class=\"token operator\">=</span>/opt/k8s/cfssl/pki/k8s/k8s-ca-key.pem \\\n-config<span class=\"token operator\">=</span>/opt/k8s/cfssl/ca-config.json \\\n-profile<span class=\"token operator\">=</span>kubernetes \\\n/opt/k8s/cfssl/k8s/aggregator.json <span class=\"token operator\">|</span> \\\ncfssljson -bare /opt/k8s/cfssl/pki/k8s/aggregator\n</code></pre>\n<h3><a id=\"104__kubeapiserver__127\"></a>10.4 创建 kube-apiserver 配置文件</h3>\n<ul><li>192.168.2.175节点：<br/> k8s-master-1 节点上执行</li></ul>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">cat</span> <span class=\"token operator\">&gt;</span>/apps/k8s/conf/kube-apiserver <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\nKUBE_APISERVER_OPTS=\"--logtostderr=true \\\n--bind-address=192.168.2.175 \\\n--advertise-address=192.168.2.175 \\\n--secure-port=5443 \\\n--insecure-port=0 \\\n--service-cluster-ip-range=10.66.0.0/16 \\\n--service-node-port-range=30000-65535 \\\n--etcd-cafile=/apps/k8s/ssl/etcd/etcd-ca.pem \\\n--etcd-certfile=/apps/k8s/ssl/etcd/etcd-client.pem \\\n--etcd-keyfile=/apps/k8s/ssl/etcd/etcd-client-key.pem \\\n--etcd-prefix=/registry \\\n--etcdservers=https://192.168.2.175:2379,https://192.168.2.176:2379,https://192.168.2.177:2\n379 \\\n--client-ca-file=/apps/k8s/ssl/k8s/k8s-ca.pem \\\n--tls-cert-file=/apps/k8s/ssl/k8s/k8s-server.pem \\\n--tls-private-key-file=/apps/k8s/ssl/k8s/k8s-server-key.pem \\\n--kubelet-client-certificate=/apps/k8s/ssl/k8s/k8s-server.pem \\\n--kubelet-client-key=/apps/k8s/ssl/k8s/k8s-server-key.pem \\\n--service-account-key-file=/apps/k8s/ssl/k8s/k8s-ca.pem \\\n--requestheader-client-ca-file=/apps/k8s/ssl/k8s/k8s-ca.pem \\\n--proxy-client-cert-file=/apps/k8s/ssl/k8s/aggregator.pem \\\n--proxy-client-key-file=/apps/k8s/ssl/k8s/aggregator-key.pem \\\n--service-account-issuer=https://kubernetes.default.svc.cluster.local \\\n--service-account-signing-key-file=/apps/k8s/ssl/k8s/k8s-ca-key.pem \\\n--requestheader-allowed-names=aggregator \\\n--requestheader-group-headers=X-Remote-Group \\\n--requestheader-extra-headers-prefix=X-Remote-Extra- \\\n--requestheader-username-headers=X-Remote-User \\\n--enable-aggregator-routing=true \\\n--anonymous-auth=false \\\n--experimental-encryption-provider-config=/apps/k8s/config/encryptionconfig.yaml \\\n--enable-admissionplugins=DefaultStorageClass,DefaultTolerationSeconds,LimitRanger,NamespaceExists,Name\nspaceLifecycle,NodeRestriction,PodNodeSelector,PersistentVolumeClaimResize,PodTolerat\nionRestriction,ResourceQuota,ServiceAccount,StorageObjectInUseProtection,MutatingAdmi\nssionWebhook,ValidatingAdmissionWebhook \\\n--disable-admissionplugins=ExtendedResourceToleration,ImagePolicyWebhook,LimitPodHardAntiAffinityTopolog\ny,NamespaceAutoProvision,Priority,EventRateLimit,PodSecurityPolicy \\\n--cors-allowed-origins=.* \\\n--enable-swagger-ui \\\n--runtime-config=api/all=true \\\n--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname \\\n--authorization-mode=Node,RBAC \\\n--allow-privileged=true \\\n--apiserver-count=3 \\\n--audit-log-maxage=30 \\\n--audit-log-maxbackup=3 \\\n--audit-log-maxsize=100 \\\n--default-not-ready-toleration-seconds=30 \\\n--default-unreachable-toleration-seconds=30 \\\n--audit-log-truncate-enabled \\\n--audit-log-path=/apps/k8s/log/api-server-audit.log \\\n--profiling \\\n--http2-max-streams-per-connection=10000 \\\n--event-ttl=1h \\\n--enable-bootstrap-token-auth=true \\\n--alsologtostderr=true \\\n--log-dir=/apps/k8s/log \\\n--v=2 \\\n--tls-ciphersuites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,\nTLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDH\nE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES\n_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256 \\\n--endpoint-reconciler-type=lease \\\n--max-mutating-requests-inflight=500 \\\n--max-requests-inflight=1500 \\\n--target-ram-mb=300\"\nEOF</span>\n</code></pre>\n<ul><li>192.168.2.176节点：<br/> k8s-master-2 节点上执行</li></ul>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">cat</span> <span class=\"token operator\">&gt;</span>/apps/k8s/conf/kube-apiserver <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\nKUBE_APISERVER_OPTS=\"--logtostderr=true \\\n--bind-address=192.168.2.176 \\\n--advertise-address=192.168.2.176 \\\n--secure-port=5443 \\\n--insecure-port=0 \\\n--service-cluster-ip-range=10.66.0.0/16 \\\n--service-node-port-range=30000-65535 \\\n--etcd-cafile=/apps/k8s/ssl/etcd/etcd-ca.pem \\\n--etcd-certfile=/apps/k8s/ssl/etcd/etcd-client.pem \\\n--etcd-keyfile=/apps/k8s/ssl/etcd/etcd-client-key.pem \\\n--etcd-prefix=/registry \\\n--etcdservers=https://192.168.2.175:2379,https://192.168.2.176:2379,https://192.168.2.177:2\n379 \\\n--client-ca-file=/apps/k8s/ssl/k8s/k8s-ca.pem \\\n--tls-cert-file=/apps/k8s/ssl/k8s/k8s-server.pem \\\n--tls-private-key-file=/apps/k8s/ssl/k8s/k8s-server-key.pem \\\n--kubelet-client-certificate=/apps/k8s/ssl/k8s/k8s-server.pem \\\n--kubelet-client-key=/apps/k8s/ssl/k8s/k8s-server-key.pem \\\n--service-account-key-file=/apps/k8s/ssl/k8s/k8s-ca.pem \\\n--requestheader-client-ca-file=/apps/k8s/ssl/k8s/k8s-ca.pem \\\n--proxy-client-cert-file=/apps/k8s/ssl/k8s/aggregator.pem \\\n--proxy-client-key-file=/apps/k8s/ssl/k8s/aggregator-key.pem \\\n--service-account-issuer=https://kubernetes.default.svc.cluster.local \\\n--service-account-signing-key-file=/apps/k8s/ssl/k8s/k8s-ca-key.pem \\\n--requestheader-allowed-names=aggregator \\\n--requestheader-group-headers=X-Remote-Group \\\n--requestheader-extra-headers-prefix=X-Remote-Extra- \\\n--requestheader-username-headers=X-Remote-User \\\n--enable-aggregator-routing=true \\\n--anonymous-auth=false \\\n--experimental-encryption-provider-config=/apps/k8s/config/encryptionconfig.yaml \\\n--enable-admissionplugins=DefaultStorageClass,DefaultTolerationSeconds,LimitRanger,NamespaceExists,Name\nspaceLifecycle,NodeRestriction,PodNodeSelector,PersistentVolumeClaimResize,PodTolerat\nionRestriction,ResourceQuota,ServiceAccount,StorageObjectInUseProtection,MutatingAdmi\nssionWebhook,ValidatingAdmissionWebhook \\\n--disable-admission-\nplugins=ExtendedResourceTolerati\nplugins=ExtendedResourceToleration,ImagePolicyWebhook,LimitPodHardAntiAffinityTopolog\ny,NamespaceAutoProvision,Priority,EventRateLimit,PodSecurityPolicy \\\n--cors-allowed-origins=.* \\\n--enable-swagger-ui \\\n--runtime-config=api/all=true \\\n--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname \\\n--authorization-mode=Node,RBAC \\\n--allow-privileged=true \\\n--apiserver-count=3 \\\n--audit-log-maxage=30 \\\n--audit-log-maxbackup=3 \\\n--audit-log-maxsize=100 \\\n--default-not-ready-toleration-seconds=30 \\\n--default-unreachable-toleration-seconds=30 \\\n--audit-log-truncate-enabled \\\n--audit-log-path=/apps/k8s/log/api-server-audit.log \\\n--profiling \\\n--http2-max-streams-per-connection=10000 \\\n--event-ttl=1h \\\n--enable-bootstrap-token-auth=true \\\n--alsologtostderr=true \\\n--log-dir=/apps/k8s/log \\\n--v=2 \\\n--tls-ciphersuites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,\nTLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDH\nE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES\n_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256 \\\n--endpoint-reconciler-type=lease \\\n--max-mutating-requests-inflight=500 \\\n--max-requests-inflight=1500 \\\n--target-ram-mb=300\"\nEOF</span>\n</code></pre>\n<ul><li>advertise-address ：apiserver 对外通告的 IP（kubernetes 服务后端节点 IP）；</li><li>default-*-toleration-seconds ：设置节点异常相关的阈值；</li><li>max-*-requests-inflight ：请求相关的最大阈值；</li><li>etcd-* ：访问 etcd 的证书和 etcd 服务器地址；</li><li>bind-address ： https 监听的 IP，不能为 127.0.0.1 ，否则外界不能访问它的安全端口 5443；</li><li>secret-port ：https 监听端口；</li><li>insecure-port=0 ：关闭监听 http 非安全端口(8080)；</li><li>tls-*-file ：指定 apiserver 使用的证书、私钥和 CA 文件；</li><li>audit-* ：配置审计策略和审计日志文件相关的参数；</li><li>client-ca-file ：验证 client (kue-controller-manager、kube-scheduler、kubelet、kube-proxy<br/> 等)请求所带的证书；</li><li>enable-bootstrap-token-auth ：启用 kubelet bootstrap 的 token 认证；</li><li>requestheader-* ：kube-apiserver 的 aggregator layer 相关的配置参数，proxy-client &amp; HPA 需要使用；</li><li>requestheader-client-ca-file ：用于签名 --proxy-client-cert-file 和 --proxy-client-keyfile 指定的证书；在启用了 metric aggregator 时使用；</li><li>requestheader-allowed-names ：不能为空，值为逗号分割的 --proxy-client-cert-file 证书的 CN<br/> 名称，这里设置为 “aggregator”；</li><li>service-account-key-file ：签名 ServiceAccount Token 的公钥文件，kube-controller-manager<br/> 的 --service-account-private-key-file 指定私钥文件，两者配对使用；</li><li>runtime-config=api/all=true ： 启用所有版本的 APIs，如 autoscaling/v2alpha1；</li><li>authorization-mode=Node,RBAC 、 --anonymous-auth=false ： 开启 Node 和 RBAC 授权模式，拒绝未授权的请求；</li><li>enable-admission-plugins ：启用一些默认关闭的 plugins；</li><li>allow-privileged ：运行执行 privileged 权限的容器；</li><li>apiserver-count=3 ：指定 apiserver 实例的数量；</li><li>event-ttl ：指定 events 的保存时间；</li><li>kubelet-* ：如果指定，则使用 https 访问 kubelet APIs；需要为证书对应的用户(上面<br/> kubernetes*.pem 证书的用户为 kubernetes) 用户定义 RBAC 规则，否则访问 kubelet API 时提示未<br/> 授权；</li><li>proxy-client-* ：apiserver 访问 metrics-server 使用的证书；</li><li>service-cluster-ip-range ： 指定 Service Cluster IP 地址段；</li><li>service-node-port-range ： 指定 NodePort 的端口范围；<br/> <strong>如果 kube-apiserver 机器没有运行 kube-proxy，则还需要添加 --enable-aggregator-routing=true 参数；</strong></li></ul>\n<h3><a id=\"105_kubeapiserver__312\"></a>10.5 分发kube-apiserver 证书及配置</h3>\n<p>证书分发</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 分发server 证书</span>\n<span class=\"token function\">scp</span> -r /opt/k8s/cfssl/pki/k8s/k8s-server* root@192.168.2.175:/apps/k8s/ssl/k8s\n<span class=\"token function\">scp</span> -r /opt/k8s/cfssl/pki/k8s/k8s-server* root@192.168.2.176:/apps/k8s/ssl/k8s\n<span class=\"token function\">scp</span> -r /opt/k8s/cfssl/pki/k8s/k8s-server* root@192.168.2.177:/apps/k8s/ssl/k8s\n<span class=\"token comment\"># 分发webhook证书</span>\n<span class=\"token function\">scp</span> -r /opt/k8s/cfssl/pki/k8s/aggregator* root@192.168.2.175:/apps/k8s/ssl/k8s\n<span class=\"token function\">scp</span> -r /opt/k8s/cfssl/pki/k8s/aggregator* root@192.168.2.176:/apps/k8s/ssl/k8s\n<span class=\"token function\">scp</span> -r /opt/k8s/cfssl/pki/k8s/aggregator* root@192.168.2.177:/apps/k8s/ssl/k8s\n</code></pre>\n<p>配置分发</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">cd</span> /opt/k8s/work\n<span class=\"token function\">scp</span> -r config root@192.168.2.175:/apps/k8s/\n<span class=\"token function\">scp</span> -r config root@192.168.2.176:/apps/k8s/\n<span class=\"token function\">scp</span> -r config root@192.168.2.177:/apps/k8s/\n</code></pre>\n<h3><a id=\"106__kubeapiserver_systemd_unit__333\"></a>10.6 创建 kube-apiserver systemd unit 文件</h3>\n<p>k8s-master-1 k8s-master-2 k8s-master-3 节点上执行</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">cat</span> <span class=\"token operator\">&gt;</span> /usr/lib/systemd/system/kube-apiserver.service <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n[Unit]\nDescription=Kubernetes API Server\nDocumentation=https://github.com/kubernetes/kubernetes\n[Service]\nType=notify\nLimitNOFILE=655350\nLimitNPROC=655350\nLimitCORE=infinity\nLimitMEMLOCK=infinity\nEnvironmentFile=-/apps/k8s/conf/kube-apiserver\nExecStart=/apps/k8s/bin/kube-apiserver \\<span class=\"token variable\">$KUBE_APISERVER_OPTS</span>\nRestart=on-failure\nRestartSec=5\n[Install]\nWantedBy=multi-user.target\nEOF</span>\n</code></pre>\n<h3><a id=\"107__kubeapiserver__355\"></a>10.7 启动 kube-apiserver 服务</h3>\n<p>k8s-master-1 k8s-master-2 k8s-master-3 节点上执行</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 全局刷新service</span>\nsystemctl daemon-reload\n<span class=\"token comment\"># 设置kube-apiserver开机启动</span>\nsystemctl <span class=\"token function\">enable</span> kube-apiserver\n<span class=\"token comment\">#重启kube-apiserver</span>\nsystemctl restart kube-apiserver\n</code></pre>\n<h3><a id=\"108__366\"></a>10.8 检查启动结果</h3>\n<p>k8s-master-1 k8s-master-2 k8s-master-3 节点上执行</p>\n<pre><code class=\"prism language-bash\">systemctl status kube-apiserver<span class=\"token operator\">|</span><span class=\"token function\">grep</span> Active\n<span class=\"token punctuation\">[</span>root@k8s-master-1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl status kube-apiserver|grep Active</span>\nActive: active <span class=\"token punctuation\">(</span>running<span class=\"token punctuation\">)</span> since Fri 2022-02-11 13:49:41 CST<span class=\"token punctuation\">;</span> 3 days ago\n<span class=\"token punctuation\">[</span>root@k8s-master-2 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl status kube-apiserver|grep Active</span>\nActive: active <span class=\"token punctuation\">(</span>running<span class=\"token punctuation\">)</span> since Fri 2022-02-11 13:49:40 CST<span class=\"token punctuation\">;</span> 3 days ago\n<span class=\"token punctuation\">[</span>root@k8s-master-3 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl status kube-apiserver|grep Active</span>\nActive: active <span class=\"token punctuation\">(</span>running<span class=\"token punctuation\">)</span> since Mon 2022-02-14 14:39:40 CST<span class=\"token punctuation\">;</span> 1h 4min ago\n</code></pre>\n<h3><a id=\"109__378\"></a>10.9 验证服务状态</h3>\n<p><strong>qist 节点上执行</strong><br/> 部署完 kube-apiserver 集群后，在任一 qist 节点上执行如下命令：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 配置环境变量</span>\n<span class=\"token function\">export</span> KUBECONFIG<span class=\"token operator\">=</span>/opt/k8s/kubeconfig/admin.kubeconfig\nroot@Qist work<span class=\"token comment\"># kubectl get cs</span>\nWarning: v1 ComponentStatus is deprecated <span class=\"token keyword\">in</span> v1.19+\nNAME STATUS MESSAGE\nERROR\nscheduler Unhealthy Get https://127.0.0.1:10259/healthz: dial tcp\n127.0.0.1:10259: connect: connection refused\ncontroller-manager Unhealthy Get https://127.0.0.1:10257/healthz: dial tcp\n127.0.0.1:10257: connect: connection refused\netcd-0 Healthy <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"health\"</span><span class=\"token keyword\">:</span><span class=\"token string\">\"true\"</span>,<span class=\"token string\">\"reason\"</span><span class=\"token keyword\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">}</span>\netcd-2 Healthy <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"health\"</span><span class=\"token keyword\">:</span><span class=\"token string\">\"true\"</span>,<span class=\"token string\">\"reason\"</span><span class=\"token keyword\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">}</span>\netcd-1 Healthy <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"health\"</span><span class=\"token keyword\">:</span><span class=\"token string\">\"true\"</span>,<span class=\"token string\">\"reason\"</span><span class=\"token keyword\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>kubectl cluster-info<br/> 预期输出：</p>\n<pre><code class=\"prism language-bash\">root@Qist work<span class=\"token comment\"># kubectl cluster-info</span>\nKubernetes control plane is running at https://192.168.2.175:6443\nTo further debug and diagnose cluster problems, use <span class=\"token string\">'kubectl cluster-info dump'</span><span class=\"token keyword\">.</span>\n</code></pre>\n<p>正常输出表示集群正常</p>\n<blockquote>\n<p>期待下次的分享，别忘了三连支持博主呀~<br/> 我是 <strong><a href=\"https://blog.csdn.net/qq_52716296?type=blog\">念舒_C.ying</a></strong> ，期待你的关注~💪💪💪</p>\n</blockquote>\n<p>附专栏链接<br/> <a href=\"https://mp.csdn.net/mp_blog/creation/editor/126717401\">【云原生 · Kubernetes】runtime组件</a><br/> <a href=\"https://blog.csdn.net/qq_52716296/article/details/126703722\">【云原生 · Kubernetes】apiserver高可用</a><br/> <a href=\"https://editor.csdn.net/md/?articleId=126673652\">【云原生 · Kubernetes】kubernetes v1.23.3 二进制部署（三）</a><br/> <a href=\"https://editor.csdn.net/md/?articleId=126657607\">【云原生 · Kubernetes】kubernetes v1.23.3 二进制部署（二）</a><br/> <a href=\"https://editor.csdn.net/md/?articleId=126565454\">【云原生 · Kubernetes】kubernetes v1.23.3 二进制部署（一）</a><br/> <a href=\"https://editor.csdn.net/md/?articleId=126447755\">【云原生 · Kubernetes】Kubernetes 编排部署GPMall（一）</a><br/> <a href=\"https://mp.csdn.net/mp_blog/creation/editor/126188025\">【云原生 · Kubernetes】Kubernetes容器云平台部署与运维</a><br/> <a href=\"https://mp.csdn.net/mp_blog/creation/editor/126163946\">【云原生 · Kubernetes】部署博客系统</a><br/> <a href=\"https://editor.csdn.net/md/?articleId=126133208\">【云原生 · Kubernetes】部署Kubernetes集群</a><br/> <a href=\"https://editor.csdn.net/md/?articleId=126096419\">【云原生 · Kubernetes】Kubernetes基础环境搭建</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}