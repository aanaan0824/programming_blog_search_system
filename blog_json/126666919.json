{"blogid": "126666919", "writerAge": "码龄8年", "writerBlogNum": "100", "writerCollect": "769", "writerComment": "113", "writerFan": "539", "writerGrade": "5级", "writerIntegral": "3111", "writerName": "物联网_咸鱼", "writerProfileAdress": "writer_image\\profile_126666919.jpg", "writerRankTotal": "6062", "writerRankWeekly": "2742", "writerThumb": "178", "writerVisitNum": "333269", "blog_read_count": "312", "blog_time": "于 2022-09-02 17:26:25 发布", "blog_title": "Python 基于OpenCV+face_recognition+tkinter实现人脸特征监测", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>1.安装包依赖</h1>\n<p>安装好依赖包opencv-python、face-recognition、tkinter</p>\n<pre><code class=\"hljs\">pip install opencv-python\npip install face-recognition</code></pre>\n<p>安装可以参考之前的文章：<a class=\"link-info\" href=\"https://blog.csdn.net/qq_17486399/article/details/126608176?spm=1001.2014.3001.5501\" title=\"Python 基于OpenCV+face_recognition实现人脸捕捉与人脸识别\">Python 基于OpenCV+face_recognition实现人脸捕捉与人脸识别</a>。由于python3以上版本已经将tkinter内置到环境，所以这里不需要单独安装依赖。</p>\n<h1>2.代码示例</h1>\n<pre><code class=\"language-python\">import os\nimport cv2\nimport face_recognition\nimport tkinter as tk  \nimport tkinter.filedialog\nfrom PIL import Image,ImageTk \n\n#选择一个图片并显示在界面上\ndef choosepic():\n    choosepath = tkinter.filedialog.askopenfilename()\n    path.set(choosepath)\n    img_open = Image.open(entry.get()).resize((530,750))\n    img = ImageTk.PhotoImage(img_open)\n    lableShowImage.config(image=img)\n    lableShowImage.image = img\n    lableShowImage.place(x=30, y=70, width=530, height=750)\n    showHandledImg(choosepath)\n\n#处理人脸特征\ndef handleFacialFeatures(image, face_marks):\n    for marks_dict in face_marks:\n        for marks_key in marks_dict.keys():\n            for point in marks_dict[marks_key]: \n                cv2.circle(image, point, 2, (0,0,255), -1)\n    return image\n\n#显示处理后的照片\ndef showHandledImg(choosepath):\n    frame=cv2.imread(choosepath)\n    frame=cv2.resize(src=frame,dsize=(530,750))\n    #转成RGB灰度图\n    frameRGB=cv2.cvtColor(src=frame,code=cv2.COLOR_BGR2RGB)\n    #获取人脸关键点\n    face_marks = face_recognition.face_landmarks(frameRGB, None, \"large\")\n    #返回处理后的结果\n    imgHandledArr = handleFacialFeatures(frame, face_marks)\n    #将处理后的照片数组转成图片\n    imgHandled = Image.fromarray(imgHandledArr)\n    img = ImageTk.PhotoImage(imgHandled)\n    lableShowImage2.config(image=img)\n    lableShowImage2.image = img\n    lableShowImage2.place(x=630, y=70, width=530, height=750)\n\nif __name__ == '__main__':\n    app = tk.Tk()  \n    #窗体标题\n    app.title(\"show pictue\")  \n    #窗体大小\n    app.geometry(\"1200x900+200+50\")\n    path = tk.StringVar()\n    #将路径展示框只读\n    entry = tk.Entry(app, state='readonly', text=path,width = 100)\n    entry.pack()\n    #显示原图\n    lableShowImage = tk.Label(app)\n    lableShowImage.pack()\n    #显示处理后的效果图\n    lableShowImage2 = tk.Label(app)\n    lableShowImage2.pack()\n    #点击选择图片触发choosepic()方法\n    buttonSelImage = tk.Button(app, text='choose picture', command=choosepic)\n    buttonSelImage.pack()\n    app.mainloop()</code></pre>\n<h1>3.说明</h1>\n<p>整个源码中核心就是face_recognition.face_landmarks来获取人脸特征点集合。</p>\n<p>face_landmarks(<em>face_image</em>, <em>face_locations=None</em>, <em>model='large'</em>)参数说明：</p>\n<ul><li><em>face_image</em>：要处理的图像</li><li><em>face_locations</em>：可选提供要检查的脸部位置列表，none 表示不确定人脸所在的位置，自动找。</li><li><em>model</em>：模型，large获取68个点集合，small获取5个点集合，small处理速度快</li></ul>\n<p><img alt=\"\" height=\"267\" src=\"image\\4f4b7086bcfc4142b8a7fa9dbb14acad.png\" width=\"519\"/></p>\n<p>将图片数据数组转成图片有9种不同的方式，大家可以一一去尝试</p>\n<table><thead><tr><th>modes</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>1位像素，黑和白，存成8位的像素</td></tr><tr><td>L</td><td>8位像素，黑白</td></tr><tr><td>P</td><td>8位像素，使用调色板映射到任何其他模式</td></tr><tr><td>RGB</td><td>3× 8位像素，真彩</td></tr><tr><td>RGBA</td><td>4×8位像素，真彩+透明通道</td></tr><tr><td>CMYK</td><td>4×8位像素，颜色隔离</td></tr><tr><td>YCbCr</td><td>3×8位像素，彩色视频格式</td></tr><tr><td>I</td><td>32位整型像素</td></tr><tr><td>F</td><td>32位浮点型像素</td></tr></tbody></table>\n<h1>4.实现效果 </h1>\n<p> <img alt=\"\" height=\"938\" src=\"image\\d7cbc6bab32a4eaca9a21d2f08c675e0.jpeg\" width=\"1200\"/></p>\n<p> <img alt=\"\" height=\"938\" src=\"image\\be0dc2c8c72b45fd8475a21f62354776.jpeg\" width=\"1200\"/></p>\n<p> </p>\n</div>\n</div>"}