{"blogid": "126527025", "writerAge": "码龄4年", "writerBlogNum": "138", "writerCollect": "1858", "writerComment": "2015", "writerFan": "3975", "writerGrade": "6级", "writerIntegral": "6407", "writerName": "不会压弯的小飞侠", "writerProfileAdress": "writer_image\\profile_126527025.jpg", "writerRankTotal": "2406", "writerRankWeekly": "35", "writerThumb": "1685", "writerVisitNum": "158905", "blog_read_count": "789", "blog_time": "于 2022-08-26 08:17:22 发布", "blog_title": "【微服务】SpringCloud-Feign远程调用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/f9e7290d231c413fbc3f595656951ea9.gif#pic_center\"/></p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7e2fbc76b4204f17a877e3ec28ae9696.jpeg\"/><br/> 🍁<code>博客主页：</code><a href=\"https://blog.csdn.net/qq_43514330?type=blog\">@不会压弯的小飞侠</a><br/> ✨<code>欢迎关注：</code>👉<code>点赞</code>👍<code>收藏</code>⭐<code>留言</code>✒<br/> ✨<code>系列专栏：</code>👉<a href=\"https://blog.csdn.net/qq_43514330/category_11944099.html?spm=1001.2014.3001.5482\">SpringCloud专栏</a><br/> ✨<code>欢迎加入社区：</code> 👉<a href=\"https://bbs.csdn.net/forums/bhywdxfx\">不会压弯的小飞侠</a><br/> ✨<code>人生格言：知足上进，不负野心。</code><br/> 🔥<code>欢迎大佬指正，一起学习！一起加油！</code></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/f9e7290d231c413fbc3f595656951ea9.gif#pic_center\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#Feign_15\">🍁Feign的介绍</a></li><li><a href=\"#Feign_19\">🍁定义和使用Feign客户端</a></li><li><a href=\"#_89\">🍁自定义配置</a></li><li><ul><li><a href=\"#_101\">🔥配置文件方式</a></li><li><a href=\"#_132\">🔥代码方式</a></li></ul>\n</li><li><a href=\"#Feign_158\">🍁Feign使用优化</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"Feign_15\"></a>🍁Feign的介绍</h1>\n<ul><li>Feign是一个声明式的http客户端，官方地址:<a href=\"https://github.com/0penFeign/feign\"> https://github.com/0penFeign/feign</a>作用就是帮助我们优雅的实现http请求的发送，解决上面提到的问题。</li></ul>\n<h1><a id=\"Feign_19\"></a>🍁定义和使用Feign客户端</h1>\n<ul><li>1.引入依赖</li><li>在order-service服务的pom文件中引入feign的依赖：</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>openfeign<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n\n</code></pre>\n<ul><li>2.在order-service的启动类添加注解开启Feign的功能</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.jkj.order.mapper\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@EnableFeignClients</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderApplication</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>3.编写Feign的客户端</li><li>在order-service中新建一个UserClient接口</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userservice\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserClient</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">User</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>这个客户端主要是基于SpringMVC的注解来声明远程调用的信息，比如： \n  <ul><li>服务名称：userservice</li><li>请求方式：GET</li><li>请求路径：/user/{id}</li><li>请求参数：Long id</li><li>返回值类型：User</li></ul> </li><li>4.测试</li><li>修改order-service中的OrderService类中的queryOrderById方法，使用Feign客户端代替RestTemplate</li></ul>\n<pre><code class=\"prism language-java\"> <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserClient</span> userClient<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Order</span> <span class=\"token function\">queryOrderById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> orderId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 1.查询订单</span>\n        <span class=\"token class-name\">Order</span> order <span class=\"token operator\">=</span> orderMapper<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2.用Feign远程调用</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userClient<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span><span class=\"token function\">getUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//3.封装user到order</span>\n        order<span class=\"token punctuation\">.</span><span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 4.返回</span>\n        <span class=\"token keyword\">return</span> order<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>Feign的使用步骤 \n  <ul><li>引入依赖</li><li>添加@EnableFeignClients注解</li><li>编写FeignClient接口</li><li>使用FeignClient中定义的方法代替RestTemplate</li></ul> </li></ul>\n<h1><a id=\"_89\"></a>🍁自定义配置</h1>\n<ul><li>Feign支持自定义配置，如下所示：</li></ul>\n<table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>feign.Logger.Level</td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>feign. Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign. Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table>\n<h2><a id=\"_101\"></a>🔥配置文件方式</h2>\n<ul><li>基于配置文件修改feign的日志级别可以针对单个服务：</li></ul>\n<pre><code class=\"prism language-java\">feign<span class=\"token operator\">:</span>  \n  client<span class=\"token operator\">:</span>\n    config<span class=\"token operator\">:</span> \n      userservice<span class=\"token operator\">:</span> # 针对某个微服务的配置\n        loggerLevel<span class=\"token operator\">:</span> FULL #  日志级别 \n\n</code></pre>\n<ul><li>针对所有服务：</li></ul>\n<pre><code class=\"prism language-java\">feign<span class=\"token operator\">:</span>  \n  client<span class=\"token operator\">:</span>\n    config<span class=\"token operator\">:</span> \n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> # 这里用<span class=\"token keyword\">default</span>就是全局配置，如果是写服务名称，则是针对某个微服务的配置\n        loggerLevel<span class=\"token operator\">:</span> FULL #  日志级别 \n\n</code></pre>\n<ul><li>日志的级别分为四种： \n  <ul><li>NONE：不记录任何日志信息，这是默认值。</li><li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li><li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li><li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul> </li></ul>\n<h2><a id=\"_132\"></a>🔥代码方式</h2>\n<ul><li>基于Java代码来修改日志级别，先声明一个类，然后声明一个Logger.Level的对象：</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultFeignConfiguration</span>  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Logger<span class=\"token punctuation\">.</span>Level</span> <span class=\"token function\">feignLogLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Logger<span class=\"token punctuation\">.</span>Level</span><span class=\"token punctuation\">.</span>BASIC<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 日志级别为BASIC</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<ul><li>如果要全局生效，将其放到启动类的@EnableFeignClients这个注解中：</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@EnableFeignClients</span><span class=\"token punctuation\">(</span>defaultConfiguration <span class=\"token operator\">=</span> <span class=\"token class-name\">DefaultFeignConfiguration</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> \n</code></pre>\n<ul><li>如果是局部生效，则把它放到对应的@FeignClient这个注解中：</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"userservice\"</span><span class=\"token punctuation\">,</span> configuration <span class=\"token operator\">=</span> <span class=\"token class-name\">DefaultFeignConfiguration</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> \n</code></pre>\n<h1><a id=\"Feign_158\"></a>🍁Feign使用优化</h1>\n<ul><li> <p>Feign底层发起http请求，依赖于其它的框架。其底层客户端实现包括：</p> </li><li> <p>URLConnection：默认实现，不支持连接池</p> </li><li> <p>Apache HttpClient ：支持连接池</p> </li><li> <p>OKHttp：支持连接池</p> </li><li> <p>因此提高Feign的性能主要手段就是使用连接池代替默认的URLConnection。</p> </li><li> <p>1.引入依赖</p>\n<ul><li>在order-service的pom文件中引入Apache的HttpClient依赖：</li></ul> </li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>httpClient的依赖 <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>io<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>openfeign<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>feign<span class=\"token operator\">-</span>httpclient<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n</code></pre>\n<ul><li>2.配置连接池 \n  <ul><li>在order-service的application.yml中添加配置：</li></ul> </li></ul>\n<pre><code class=\"prism language-java\">feign<span class=\"token operator\">:</span>\n  client<span class=\"token operator\">:</span>\n    config<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> # <span class=\"token keyword\">default</span>全局的配置\n        loggerLevel<span class=\"token operator\">:</span> BASIC # 日志级别，BASIC就是基本的请求和响应信息\n  httpclient<span class=\"token operator\">:</span>\n    enabled<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> # 开启feign对<span class=\"token class-name\">HttpClient</span>的支持\n    max<span class=\"token operator\">-</span>connections<span class=\"token operator\">:</span> <span class=\"token number\">200</span> # 最大的连接数\n    max<span class=\"token operator\">-</span>connections<span class=\"token operator\">-</span>per<span class=\"token operator\">-</span>route<span class=\"token operator\">:</span> <span class=\"token number\">50</span> # 每个路径的最大连接数\n</code></pre>\n<p>然后在FeignClientFactoryBean中的loadBalance方法中打断点，Debug方式启动order-service服务，可以看到这里的client，底层就是Apache HttpClient。</p>\n<ul><li>Feign的优化： \n  <ul><li>1.日志级别尽量用basic</li><li>2.使用HttpClient或OKHttp代替URLConnection \n    <ul><li>引入feign-httpClient依赖</li><li>配置文件开启httpClient功能，设置连接池参数</li></ul> </li></ul> </li></ul>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\78a2e208b59549ccb3782503cebd6d93.jpeg\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}