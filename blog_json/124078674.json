{"blogid": "124078674", "writerAge": "码龄3年", "writerBlogNum": "117", "writerCollect": "6145", "writerComment": "3237", "writerFan": "26550", "writerGrade": "7级", "writerIntegral": "11277", "writerName": "Mr.Winter`", "writerProfileAdress": "writer_image\\profile_124078674.jpg", "writerRankTotal": "986", "writerRankWeekly": "37", "writerThumb": "4302", "writerVisitNum": "393313", "blog_read_count": "6844", "blog_time": "已于 2022-07-14 10:41:23 修改", "blog_title": "Anaconda安装与Python虚拟环境配置保姆级图文教程(附速查字典)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#1_Python_4\">1 混乱的Python库</a></li><li><a href=\"#2_Anaconda_25\">2 什么是Anaconda？</a></li><li><a href=\"#3_Anaconda_36\">3 Anaconda的安装</a></li><li><ul><li><a href=\"#31_Windows_43\">3.1 Windows系统</a></li><li><a href=\"#32_Linux_69\">3.2 Linux系统</a></li><li><a href=\"#33__80\">3.3 测试</a></li></ul>\n</li><li><a href=\"#4__108\">4 虚拟环境管理(速查字典)</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1_Python_4\"></a>1 混乱的Python库</h1>\n<p>你有没有遇到过这样的问题</p>\n<blockquote>\n<p>在项目A中需要用到某个Python库<code>PkgA</code>，且项目A的其他库要求<code>PkgA</code>的版本必须为<code>v3.0</code>以上，你按要求安装了<code>PkgA v3.0</code>；过了一段时间，老板交给你一个项目B，又用到了<code>PkgA</code>，但这次其他库要求<code>PkgA</code>的版本必须为<code>v2.0</code>及以上，这时候你怎么办？<br/> <br/> 安装<code>PkgA v3.0</code>则新项目B无法运行，安装<code>PkgA v2.0</code>则旧项目A无法运行，要想同时在一个环境里使用两个项目，必须不停地重装<code>PkgA</code>来更换版本。</p>\n</blockquote>\n<p>上面的例子只涉及两个项目的一个依赖库冲突，如果多个项目呢？如果多个依赖冲突呢？</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\46bcedb130f14b69bc9e522ea7f1d53c.png\"/><br/> 上面的例子说明了什么呢？其实就是Python语言的痛点：</p>\n<ul><li> <p><font color=\"#f00\"><strong>依赖网复杂</strong></font></p> <p>Python的包非常丰富，轮子相当多，开发者在工作时难免会调用这样或那样的包，久而久之，一个功能依赖另一个功能，形成复杂的依赖网络</p> </li><li> <p><font color=\"#f00\"><strong>包管理混乱</strong></font></p> <p>通过报错信息不断安装依赖包终于解决了依赖库的问题，但随之而来的就是版本问题，也就是上面例子所体现的依赖冲突，本质上是某个包开发时的不向下兼容导致的</p> </li></ul>\n<p>为了解决上面的问题，更好地管理Python库，让其扬长避短，就必须使用环境管理工具，例如本文介绍的<code>Anaconda</code>。</p>\n<h1><a id=\"2_Anaconda_25\"></a>2 什么是Anaconda？</h1>\n<blockquote>\n<p><code>Anaconda</code>是一个开源的跨平台Python发行版本，支持</p>\n<ul><li>Windows</li><li>macOS</li><li>Linux</li></ul>\n<p>操作系统。<code>Anaconda</code>中包含了<code>conda</code>等180多个科学包及其依赖项。其中<code>conda</code>则是一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\22df3957a898473888ef7030700af7d8.png\"/></p>\n<h1><a id=\"3_Anaconda_36\"></a>3 Anaconda的安装</h1>\n<p>进入<a href=\"https://www.anaconda.com/products/distribution\">Anaconda下载界面</a>选择相应的操作系统，本文主要介绍在Windows与Linux下的安装流程。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\71f3eb00d321468b943db7c4e8f62f5d.png\"/></p>\n<h2><a id=\"31_Windows_43\"></a>3.1 Windows系统</h2>\n<p>Windows有图形化的安装向导，按下面的步骤一步步安装即可</p>\n<ul><li>运行安装向导</li></ul>\n<p><img alt=\"在这里插入图片描述\" height=\"260\" src=\"image\\5516b485e8244e2ab03f4c52a36da262.png\"/></p>\n<ul><li>选择<code>I Agree</code></li></ul>\n<p><img alt=\"在这里插入图片描述\" height=\"260\" src=\"image\\f83b41394e4b44b58061284f63512c74.png\"/></p>\n<ul><li>选择<code>All Users</code>，其实选<code>Just Me</code>也可以，但这台主机的其他用户就无法使用<code>Anaconda</code>了</li></ul>\n<p><img alt=\"在这里插入图片描述\" height=\"260\" src=\"image\\4b36004d8b6443b2a8eadaa453b445b7.png\"/></p>\n<ul><li>选择安装路径</li></ul>\n<p><img alt=\"在这里插入图片描述\" height=\"260\" src=\"image\\3dbc2ee138074d40801d7dabfa5ae454.png\"/></p>\n<ul><li>保持默认选项</li></ul>\n<p><img alt=\"在这里插入图片描述\" height=\"260\" src=\"image\\0beca8b822a945a6b0f5a3b02591f8cb.png\"/></p>\n<ul><li>等待安装结束</li></ul>\n<p><img alt=\"在这里插入图片描述\" height=\"260\" src=\"image\\cec84410a54f4d7ba074eb8cea8bcaee.png\"/></p>\n<ul><li>配置环境变量</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2a05e7d6fd714588b33d9749a566f11f.png\"/></p>\n<h2><a id=\"32_Linux_69\"></a>3.2 Linux系统</h2>\n<p>对于Linux系统，没有图形化的安装界面，按下面输入终端命令即可</p>\n<ul><li>进入Anaconda安装目录并运行官方安装程序<pre><code class=\"prism language-shell\"><span class=\"token function\">bash</span> ./Anaconda3-2021.11-Linux-x86_64.sh\n</code></pre> </li><li>添加环境变量，其中<code>~/Project/anaconda3/bin</code>替换成自己的安装目录<pre><code class=\"prism language-shell\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export PATH=\"~/Project/anaconda3/bin:$PATH\"'</span> <span class=\"token operator\">&gt;&gt;</span> ~/.bashrc\n<span class=\"token builtin class-name\">source</span> ~/.bashrc\n</code></pre> </li></ul>\n<h2><a id=\"33__80\"></a>3.3 测试</h2>\n<p>打开<code>cmd</code>(Windows)或<code>Terminal</code>(Linux)，输入</p>\n<pre><code class=\"prism language-shell\">conda --version\n</code></pre>\n<p>如果输出版本号则说明安装成功，如下所示。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\01160b84f99f4a86b2accad978ba4766.png\"/><br/> 注意，若运行python脚本时仍然是原环境而非<code>Anaconda</code>环境，则需要注意配置编辑器的python解释器路径。VSCode中，在<code>tasks.json</code>中的<code>args</code>参数中配置</p>\n<pre><code class=\"prism language-shell\"><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string\">\"version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2.0.0\"</span>,\n    <span class=\"token string\">\"tasks\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token string\">\"label\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"catkin_make:debug\"</span>,\n            <span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"shell\"</span>,\n            <span class=\"token string\">\"command\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"catkin_make\"</span>,\n            <span class=\"token string\">\"args\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"-DPYTHON_EXECUTABLE=/home/winter/Project/anaconda3/envs/server/bin/python \"</span><span class=\"token punctuation\">]</span>,\n            <span class=\"token string\">\"group\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"kind\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"build\"</span>,<span class=\"token string\">\"isDefault\"</span>:true<span class=\"token punctuation\">}</span>,\n            <span class=\"token string\">\"presentation\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token string\">\"reveal\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"always\"</span>\n            <span class=\"token punctuation\">}</span>,\n            <span class=\"token string\">\"problemMatcher\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"<span class=\"token variable\">$msCompile</span>\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"4__108\"></a>4 虚拟环境管理(速查字典)</h1>\n<p>用<code>Anaconda</code>可以创建虚拟环境，虚拟环境间彼此隔离，可以解决依赖混乱的情况。虚拟环境管理主要涉及以下的命令，可以作为速查字典以备不时之需</p>\n<ul><li> <p><font color=\"#4a86e8\"><strong>创建虚拟环境</strong></font></p> <pre><code class=\"prism language-shell\">conda create -n <span class=\"token builtin class-name\">test</span> <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.8</span>\n</code></pre> <p>创建了一个名为<code>test</code>的采用3.8版本Python解释器的虚拟环境</p> </li><li> <p><font color=\"#4a86e8\"><strong>切换虚拟环境</strong></font></p> <pre><code class=\"prism language-shell\">conda activate <span class=\"token builtin class-name\">test</span>\n</code></pre> <p>切换到名为<code>test</code>的虚拟环境。默认地，用户会进入<code>Anaconda</code>自带的<code>base</code>环境，注意<code>base</code>环境已经与安装<code>Anaconda</code>前的环境不同，因此第一次使用<code>Anaconda</code>可能会产生依赖冲突和缺失。</p> </li><li> <p><font color=\"#4a86e8\"><strong>查看虚拟环境</strong></font></p> <pre><code class=\"prism language-shell\">conda <span class=\"token function\">env</span> list\n</code></pre> </li><li> <p><font color=\"#4a86e8\"><strong>依赖安装与卸载</strong></font></p> <pre><code class=\"prism language-shell\"><span class=\"token comment\"># 安装</span>\nconda <span class=\"token function\">install</span> pkg\npip <span class=\"token function\">install</span> pkg\n<span class=\"token comment\"># 卸载</span>\nconda remove pkg\npip uninstall pkg\n</code></pre> <p>这里推荐使用清华源加快安装速度，使用方法是</p> <pre><code class=\"prism language-shell\">pip <span class=\"token function\">install</span> -i https://pypi.tuna.tsinghua.edu.cn/simple <span class=\"token assign-left variable\">pkg</span><span class=\"token operator\">==</span>version \n</code></pre> <p>即安装了名为<code>pkg</code>，版本为<code>version</code>的包<br/> 如果依赖很多，建议使用<code>requirements.txt</code>批量配置，命令为</p> <pre><code class=\"prism language-shell\">pip <span class=\"token function\">install</span> -i https://pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt\n</code></pre> </li><li> <p><font color=\"#4a86e8\"><strong>查看环境依赖</strong></font></p> <pre><code class=\"prism language-shell\">conda list\n</code></pre> </li><li> <p><font color=\"#4a86e8\"><strong>复制虚拟环境</strong></font></p> <pre><code class=\"prism language-shell\">conda <span class=\"token function\">env</span> <span class=\"token builtin class-name\">export</span> <span class=\"token operator\">&gt;</span> test_env.yaml\nconda <span class=\"token function\">env</span> create -f test_env.yaml\n</code></pre> <p>常用于导出当前虚拟环境的信息或复制虚拟环境</p> </li><li> <p><font color=\"#4a86e8\"><strong>删除虚拟环境</strong></font></p> <pre><code class=\"prism language-shell\">conda remove -n <span class=\"token builtin class-name\">test</span> --all\n</code></pre> <p>删除名为<code>test</code>的虚拟环境</p> </li></ul>\n<hr color=\"#FFF\" size='1\"'/>\n<p>🔥 <strong>更多精彩专栏</strong>：</p>\n<ul><li><a href=\"https://blog.csdn.net/frigidwinter/category_11541346.html\">《ROS从入门到精通》</a></li><li><a href=\"https://blog.csdn.net/frigidwinter/category_11410243.html\">《机器人原理与技术》</a></li><li><a href=\"https://blog.csdn.net/frigidwinter/category_10302228.html\">《机器学习强基计划》</a></li><li><a href=\"https://blog.csdn.net/frigidwinter/category_11195510.html\">《计算机视觉教程》</a></li><li>…</li></ul>\n<br/>\n<center>\n 👇源码获取 · 技术交流 · 抱团学习 · 咨询分享 请联系👇 \n</center>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}