{"blogid": "126236449", "writerAge": "码龄1年", "writerBlogNum": "43", "writerCollect": "658", "writerComment": "2057", "writerFan": "2894", "writerGrade": "5级", "writerIntegral": "4005", "writerName": "令辰柒", "writerProfileAdress": "writer_image\\profile_126236449.jpg", "writerRankTotal": "4450", "writerRankWeekly": "86", "writerThumb": "1227", "writerVisitNum": "19645", "blog_read_count": "769", "blog_time": "于 2022-08-08 22:12:28 发布", "blog_title": "【JavaSE】抽象类与接口（上篇）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p>✨hello，进来的小伙伴们，你们好呐！✨</p>\n<p>✈️✈️系列专栏【JavaSE】</p>\n<p>🚜🚜本篇内容：JavaSE部分的抽象类与接口的概念初篇（对准知识点阅读喔！)</p>\n<p>🍊🍊作者简介：一名大二即将升大三的科班小白，我很平凡，学会努力！</p>\n<p>🍱🍱码云存放仓库gitee：<a class=\"link-info\" href=\"https://gitee.com/king-zhou-of-java/java-se.git\" title=\"https://gitee.com/king-zhou-of-java/java-se.git\">https://gitee.com/king-zhou-of-java/java-se.git</a></p>\n</blockquote>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB\">一、抽象类</a></p>\n<p id=\"%F0%9F%8D%8A%E4%B8%80%E3%80%81%E6%A6%82%E5%BF%B5-toc\" style=\"margin-left:80px;\"><a href=\"#%F0%9F%8D%8A%E4%B8%80%E3%80%81%E6%A6%82%E5%BF%B5\">🍊一、概念</a></p>\n<p id=\"%C2%A0%F0%9F%8D%8A%E4%BA%8C%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E8%AF%AD%E6%B3%95-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%F0%9F%8D%8A%E4%BA%8C%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E8%AF%AD%E6%B3%95\">🍊二、抽象类语法</a></p>\n<p id=\"%F0%9F%8D%8A%E4%B8%89%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%89%B9%E6%80%A7-toc\" style=\"margin-left:80px;\"><a href=\"#%F0%9F%8D%8A%E4%B8%89%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%89%B9%E6%80%A7\">🍊三、抽象类特性</a></p>\n<p id=\"%F0%9F%8D%8A%E5%9B%9B%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E4%BD%9C%E7%94%A8-toc\" style=\"margin-left:80px;\"><a href=\"#%F0%9F%8D%8A%E5%9B%9B%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E4%BD%9C%E7%94%A8\">🍊四、抽象类的作用</a></p>\n<hr id=\"hr-toc\"/>\n<h1 id=\"%E4%B8%80%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB\">一、抽象类</h1>\n<h3 id=\"%F0%9F%8D%8A%E4%B8%80%E3%80%81%E6%A6%82%E5%BF%B5\">🍊一、概念</h3>\n<p>⛵如果一个类中没有包含足够的信息来<strong>描绘一个具体的对象，</strong>这样的类就是抽象类。</p>\n<p><span style=\"color:#0d0016;\">🍼比如：Animal类是动物类，在这个类中定义一个方法bark()，但由于Animal不是一个具体的动物，因此其内部的方法bark()无法具体实现。Dog是动物，继承Animal类，由于Dog是动物，狗叫汪汪汪，可以实现bark()方法。因此Animal类可以设计为抽象类</span>。</p>\n<h3 id=\"%E2%80%8B%E7%BC%96%E8%BE%91\" style=\"text-align:center;\"><img alt=\"972c9c70cbfd4525ba6388420afba0d3.jpeg\" src=\"image\\972c9c70cbfd4525ba6388420afba0d3.jpeg\"/></h3>\n<h3 id=\"%C2%A0%F0%9F%8D%8A%E4%BA%8C%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E8%AF%AD%E6%B3%95\"> 🍊二、抽象类语法</h3>\n<p><span style=\"color:#0d0016;\"><strong>在Java中，一个类如果被 abstract 修饰称为抽象类，抽象类中被 abstract 修饰的方法称为抽象方法，抽象方法不用给出具体的实现体。🥞🥞</strong></span></p>\n<pre><code class=\"language-java\">// 抽象类：被abstract修饰的类\npublic abstract class Demo2 {\n    // 抽象方法：被abstract修饰的方法，没有方法体\n    abstract public void eat();\n    abstract public void drink();\n    // 抽象类也是类，也可以增加普通方法和属性\n    public String name;\n    public String color;\n    public void doclass(){\n        System.out.println(\"做作业\");\n    }</code></pre>\n<h3 id=\"%F0%9F%8D%8A%E4%B8%89%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%89%B9%E6%80%A7\">🍊三、抽象类特性</h3>\n<p><strong>🍓1. 抽象类不能直接实例化对象。</strong></p>\n<pre><code class=\"language-cpp\">public static void main(String[] args) {\n    Demo2 de = new Demo2();//抽象类不能直接实例化对象\n    }</code></pre>\n<p style=\"text-align:center;\"><img alt=\"c06b61f2299a4bc390879f1935f04cf3.png\" src=\"image\\c06b61f2299a4bc390879f1935f04cf3.png\"/></p>\n<p> 我们发现，如果尝试实例化对象，编译器会自动报错！</p>\n<p><strong>🍔2. 抽象方法不能是 private 的。</strong></p>\n<pre><code class=\"language-cpp\"> abstract private void nice();//抽象方法不能是private的</code></pre>\n<p style=\"text-align:center;\"><img alt=\"646853a1bc1d478484b14c7c8ade1347.png\" src=\"image\\646853a1bc1d478484b14c7c8ade1347.png\"/></p>\n<p> 注意：抽象方法没有加访问限定符时，默认是public。</p>\n<p><strong>🍇3. 抽象方法不能被final和static修饰，因为抽象方法要被子类重写。</strong></p>\n<pre><code class=\"language-cpp\"> abstract public final void methodA();//抽象方法不能被final static 修饰</code></pre>\n<p style=\"text-align:center;\"><img alt=\"1f75b6389e20444d91362f40cf8b232e.png\" src=\"image\\1f75b6389e20444d91362f40cf8b232e.png\"/></p>\n<p><strong>🍬4.抽象类必须被继承，并且继承后子类要重写父类中的抽象方法，否则子类也是抽象类，必须要使用 abstract 修饰 。</strong></p>\n<p>情况1：我们实现父类的eat()方法，Cat子类可以不用定义成abstract类型。</p>\n<pre><code class=\"language-cpp\">public abstract class Demo2 {\n    abstract public void eat();\n    public String name;\n    public String color;\n    class Cat extends Demo2{\n        public void eat(){\n            System.out.println(name+\"猫吃鱼\");\n        }\n    }</code></pre>\n<p>情况2：我们只继承父类，但不重写eat()方法。（编译器会报错）</p>\n<p style=\"text-align:center;\"><img alt=\"e964eec485d744b8bba5f87477040abf.png\" src=\"image\\e964eec485d744b8bba5f87477040abf.png\"/></p>\n<p> 解决方法：将Cat类型定义成abstract类型。</p>\n<p style=\"text-align:center;\"><img alt=\"eeb4227eafd9465ba74870047cf27651.png\" src=\"image\\eeb4227eafd9465ba74870047cf27651.png\"/></p>\n<blockquote>\n<p><strong> <span style=\"color:#956fe7;\">🍼🍼重要结论：</span></strong></p>\n<p><strong><span style=\"color:#956fe7;\">🥪1. 抽象类中不一定包含抽象方法，但是有抽象方法的类一定是抽象类.<br/> 🥞2. 抽象类中可以有构造方法，供子类创建对象时，初始化父类的成员变量。</span></strong></p>\n</blockquote>\n<h3 id=\"%F0%9F%8D%8A%E5%9B%9B%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E4%BD%9C%E7%94%A8\">🍊四、抽象类的作用</h3>\n<blockquote>\n<p><span style=\"color:#0d0016;\">🍮🍮在实际工作中，当需求不应该由父类完成, 而应由子类完成. 那么此时如果不小心误用成父类了, 使用普通类编译器是不会报错的. 但是父类是抽象类就会在实例化的时候提示错误, 让我们尽早发现问题。</span></p>\n<p><span style=\"color:#0d0016;\">🍤🍤学会充分利用编译器的功能，使得开发过程更加的方便，安全！</span></p>\n</blockquote>\n<p><strong>💝OK，那么本篇到此告一段落，先给大家简介一下抽象类的概念，下一篇博客我将详细讲解接口的概念已经使用，感谢阅读，期待一键三连！🌯🌯</strong></p>\n<p></p>\n</div>\n</div>"}