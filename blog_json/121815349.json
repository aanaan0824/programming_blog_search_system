{"blogid": "121815349", "writerAge": "码龄15年", "writerBlogNum": "613", "writerCollect": "728", "writerComment": "275", "writerFan": "3270", "writerGrade": "8级", "writerIntegral": "29092", "writerName": "孙飞 Sunface", "writerProfileAdress": "writer_image\\profile_121815349.jpg", "writerRankTotal": "93833", "writerRankWeekly": "10657", "writerThumb": "845", "writerVisitNum": "2511164", "blog_read_count": "2216", "blog_time": "于 2021-12-09 12:50:15 发布", "blog_title": "Rust学习教程18 - 数组", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>本文节选自<a href=\"https://github.com/sunface/rust-course\">&lt;&lt;Rust语言圣经&gt;&gt;</a>一书<br/> 欢迎大家加入Rust编程学院，一起学习交流:<br/> QQ群：1009730433</p>\n</blockquote>\n<h1><a id=\"_7\"></a>数组</h1>\n<p>在日常开发中，使用最广的数据结构之一就是数组，在Rust中，最常用的数组有两个，第一个是长度固定且很快速的<code>array</code>，第二个是可动态增长的但是有一点性能损耗的<code>Vector</code>，在本书中，我们称呼<code>array</code>为数组，<code>Vector</code>为动态数组。</p>\n<p>不知道你们发现没，这两个数组的关系跟<code>&amp;str</code>与<code>String</code>的关系很像，前者是长度固定的字符串切片，后者是可动态增长的字符串。其实，在Rust中无论是<code>String</code>还是<code>Vector</code>，它们都是Rust的高级类型：集合类型，在后面章节会有详细介绍。</p>\n<p>对于本章节，我们的重点还是放在数组<code>array</code>上。数组的具体定义很简单：将多个类型相同的元素依次组合在一起，就是一个数组。结合上面的内容，可以得出数组的三要素：</p>\n<ul><li>长度固定</li><li>元素必须有相同的类型</li><li>依次线性排列</li></ul>\n<p>这里再啰嗦一句，<strong>我们这里说的数组是Rust的基本类型，因此长度是固定的，这个跟其他编程语言不同，而其它编程语言的数组往往对应的是Rust中的动态数组<code>Vector</code></strong>，希望读者大大牢记此点。</p>\n<h3><a id=\"_20\"></a>创建数组</h3>\n<p>在Rust中，数组是这样定义的：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>数组语法跟<code>javascript</code>很像，也跟大多数编程语言很像。由于它的元素类型大小固定，且长度也是固定，因此<strong>数组是存储在栈上</strong>，性能也会非常优秀。与此对应，动态数组<code>Vector</code>是存储在堆上，因此长度可以动态改变。当你不确定是使用数组还是动态数组时，那就应该使用后者，具体见[动态数组Vector]一章.</p>\n<p>举个例子，在需要知道一年中各个月份名称的程序中，你很可能希望使用的是数组而不是动态数组。因为月份是固定的，它总是包含 12 个元素：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> months <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"January\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"February\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"March\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"April\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"May\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"June\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"July\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">\"August\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"September\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"October\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"November\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"December\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在一些时候，还需要为<strong>数组声明类型</strong>，如下所示：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里，数组类型是通过方括号语法声明，<code>i32</code>是元素类型，分号后面的数字<code>5</code>是数组长度，数组类型也从侧面说明了<strong>数组的元素类型要统一，长度要固定</strong>.</p>\n<p>还可以使用下面的语法初始化一个<strong>某个值重复出现N次的数组</strong>:</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>a</code>数组包含<code>5</code>个元素,这些元素的初始化值为<code>3</code>，聪明的读者已经发现，这种语法跟数组类型的声明语法其实是保持一致的：<code>[3;5]</code> 和<code>[类型;长度]</code>.</p>\n<p>在元素重复的场景，这种写法要简单的多，否则你就得疯狂敲击键盘：<code>let a = [3, 3, 3, 3, 3];</code>,不过老板可能很喜欢你的这种疯狂编程的状态。</p>\n<h3><a id=\"_50\"></a>访问数组元素</h3>\n<p>因为数组是连续存放元素的，因此可以通过索引的方式来访问存放其中的元素：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> first <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取a数组第一个元素</span>\n    <span class=\"token keyword\">let</span> second <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取第二个元素</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>此处，<code>first</code>获取到的值是<code>9</code>,<code>second</code>是<code>8</code>。</p>\n<h4><a id=\"_63\"></a>越界访问</h4>\n<p>假如使用超出数组范围的索引访问数组元素，就发生什么？下面是一个接收用户的控制台输入，然后用于访问数组元素的例子：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter an array index.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> index <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 读取控制台的输出</span>\n    <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> index<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to read line\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> index<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span> <span class=\"token operator\">=</span> index\n        <span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index entered was not a number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> element <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"The value of the element at index {} is: {}\"</span><span class=\"token punctuation\">,</span>\n        index<span class=\"token punctuation\">,</span> element\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>使用<code>cargo run</code>来运行代码，因为数组只有5个元素，如果我们试图输入<code>5</code>去访问第<code>6</code>个元素，则会访问到不存在的数组元素，最终程序会崩溃退出：</p>\n<pre><code class=\"prism language-console\">Please enter an array index.\n5\nthread 'main' panicked at 'index out of bounds: the len is 5 but the index is 5', src/main.rs:19:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre>\n<p>这就是数组访问越界，访问了数组中不存在的元素，导致Rust运行时错误。程序因此退出并显示错误消息，未执行最后的<code>println!</code>语句。</p>\n<p>当你尝试使用索引访问元素时，Rust 将检查你指定的索引是否小于数组长度。如果索引大于或等于数组长度，Rust会出现 panic。这种检查必须在运行时进行，尤其是在这种情况下，因为编译器无法在编译期知道用户之后运行代码时将输入什么值。</p>\n<p>这种就是Rust的安全特性之一。在很多系统编程语言中，并不会检查数组越界问题，你会访问到无效的内存地址获取到一个风马牛不相及的值，最终导致在程序逻辑上出现大问题，而且这种问题会非常难以检查。</p>\n<h2><a id=\"_107\"></a>数组切片</h2>\n<p>在之前的<a href=\"./string-slice.md#%E5%88%87%E7%89%87%28slice%29\">章节</a>，我们有讲到<code>切片</code>这个概念,它允许你引用集合中的某个连续片段，而不是整个集合，对于数组也是，数组切片允许我们引用数组的一部分：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> slice<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>上面的数组切片<code>slice</code>的类型是<code>&amp;[i32]</code>,与之对比，数组的类型是<code>[i32;5]</code>，简单总结下切片的特点：</p>\n<ul><li>切片的长度与数组不同，并不是固定的，而是取决于你使用时指定的开始和结束位置</li><li>创建切片的代价非常小，因为切片只是针对底层数组的一个引用</li><li>切片类型[T]拥有不固定的大小，而切片引用类型&amp;[T]则具有固定的大小，因为Rust很多时候都需要固定大小数据类型，因此&amp;[T]更有用,<code>&amp;str</code>字符串切片也同理</li></ul>\n<h2><a id=\"_123\"></a>总结</h2>\n<p>最后，让我们以一个综合性使用数组的例子，来结束本章节的学习：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 编译器自动推导出one的类型</span>\n  <span class=\"token keyword\">let</span> one             <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 显式类型标注</span>\n  <span class=\"token keyword\">let</span> two<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>    <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> blank1          <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> blank2<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n  <span class=\"token comment\">// arrays是一个二维数组，其中每一个元素都是一个数组，元素类型是[u8; 3]</span>\n  <span class=\"token keyword\">let</span> arrays<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> blank1<span class=\"token punctuation\">,</span> blank2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// 借用arrays的元素用作循环中</span>\n  <span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span>arrays <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}: \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 将a变成一个迭代器，用于循环</span>\n    <span class=\"token comment\">// 你也可以直接用for n in a {}来进行循环</span>\n    <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t{} + 10 = {}\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 0..a.len,是一个Rust的语法糖，其实就等于一个数组，元素是从0,1,2一直增加到到a.len-1</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      sum <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t({:?} = {})\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>做个总结，数组虽然很简单，但是其实还是存在几个要注意的点：</p>\n<ul><li><strong>数组类型容易跟数组切片混淆</strong>,[T;n]描述了一个数组的类型，而[T]描述了切片的类型, 因为切片是运行期的数据结构，因此它不具备编译器的长度，因此不能用[T;n]的形式去描述</li><li><code>[u8; 3]</code>和<code>[u8;4]是不同的类型</code>，数组的长度也是类型的一部分</li><li><strong>在实践中，使用最多的是数组切片[T]</strong>，我们往往通过引用的方式去使用<code>&amp;[T]</code>,因为后者有固定的类型大小.</li></ul>\n<p>至此，关于数据类型部分，我们已经全部学完了，对于Rust学习而言，我们也迈出了坚定的第一步，后面将开始对更高级特性的学习。未来如果大家有疑惑需要检索知识，一样可以继续回顾过往的章节，因为本书不仅仅是一门Rust的教程，还是一本厚重的Rust工具书。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}