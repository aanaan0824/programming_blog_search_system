{"blogid": "125613915", "writerAge": "码龄8年", "writerBlogNum": "4", "writerCollect": "28", "writerComment": "5", "writerFan": "4", "writerGrade": "1级", "writerIntegral": "56", "writerName": "欧根老婆的狗", "writerProfileAdress": "writer_image\\profile_125613915.jpg", "writerRankTotal": "116399", "writerRankWeekly": "360108", "writerThumb": "10", "writerVisitNum": "3563", "blog_read_count": "2912", "blog_time": "已于 2022-07-05 14:27:06 修改", "blog_title": "vue实现列表自动滚动的方式（一）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>      虽然是标题是《vue实现列表自动滚动的方式》，但其它前端框架应该也可以通过这种方式实现，本案例中没有使用任何第三方插件，全部使用vue中相关的js、css以及定时器方式实现。</p>\n<p>      解决问题的第一步不是找代码，而是分析问题。列表自动滚动常见方式有两种（上下左右的滚动不赘述，只是方向的问题，本案例以向上自动滚动为例）：（1）匀速滚动   （2）有间隔的平滑滚动。本案例先给出匀速滚动的方案。</p>\n<p>     这篇文章是原创，代码是项目中自己编写的，所以运行肯定没有问题。</p>\n<p>     要匀速向上滚动，以我的经验，最容易想到的是用定时器实现，每隔一个时间差，列表向上移动一个像素（大于一个像素，可能会在视觉上给人卡顿掉帧的感觉），在时间够短的前提下，就会给人一种匀速向上的感觉。然后需要考虑列表衔接的问题，列表再长也有尽头，需要考虑滚动到最后一条数据出现时的问题。</p>\n<p>     我给出的方案是，在列表的末尾拼接一个同样内容的列表，形成长度为原列表两倍的列表（如果考虑性能问题，在原列表后拼接上原列表的前几条数据就可以，具体几条根据滚动可视范围内的最大完整数据条数而定，具体往下看就明白了），然后当拼接列表滚动到可视范围内的内容和初始状态一致时（即拼接列表的上半段的最后一条记录向上滚动至完全消失时），将拼接列表向上滚动的距离归零，即可在视觉上给人一种匀速向上，且无限循环的感觉。</p>\n<p>     先上定时器这块方法的代码。</p>\n<pre><code class=\"language-javascript\">//根据列表长度是否超过可视范围内能够显示的最大完整数据条数，来控制列表是否需要滚动\ntableActionFun() {\n      this.tableListSize = this.tableList.length;\n      //下面的visibleSize是可视范围内能够显示的最大完整数据条数\n      if (this.tableListSize &gt; this.visibleSize) {\n        this.tableList = this.tableList.concat(this.tableList);\n        this.tableTimerFun();  //列表滚动方法\n      } else {\n        this.fillTableList();  //无需滚动时的数据填充方法，如果没必要，可以删掉\n      }\n},\n\n//列表滚动方法\ntableTimerFun() {\n      var count = 0;\n      this.tableTimer = setInterval(() =&gt; {\n        if (count &lt; (this.tableList.length / 2) * this.lineHeight) {\n          this.tableTop -= 1;\n          count++;\n        } else {\n          count = 0;\n          this.tableTop = 0;\n        }\n      }, this.tableTimerInterval);\n},</code></pre>\n<p>      上面的代码段中提到了可视范围内能够显示的最大完整数据条数 visibleSize，直接上案例里的截图，一看就明白了。截图中可以看到第一条数据和最后一条数据并没有完全显示，因为他们超出父容器的部分被 overflow: hidden 了，所以案例中的 visibleSize = 6. </p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"431\" src=\"image\\3c0e7447f0a34b71b46f39c21168d688.png\" width=\"639\"/></p>\n<p>     所以本案例是通过列表不断上移，父容器隐藏超出部分来实现列表自动迅速滚动的。讲解的过程中可能有遗漏，直接上完整代码，重要部分都写了注释。下面的代码直接粘贴运行不会运行成功，因为下面的完整代码涉及接口调用，但所有功能已经一步到位，希望在看的你能通过注释更多地去理解，而不是简单地复制粘贴。希望能对你有所帮助。</p>\n<pre><code class=\"language-javascript\">&lt;template&gt;\n  &lt;div class=\"productProcess\"&gt;\n    \n    &lt;!-- 如果页面刷新数据比较频繁，可以将loading、showFlag的相关代码删除，防止过于频繁的出现加载动画 --&gt;\n    &lt;div class=\"loading_div\" v-show=\"!showFlag\"&gt;\n      &lt;div&gt;Loading...&lt;/div&gt;  &lt;!-- 这个loading自己写，代码没贴出来 --&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"success_info_body\" v-show=\"showFlag\"&gt;\n      \n      &lt;!-- 标准title可以调用组件 --&gt;\n      &lt;div class=\"title_div\"&gt;\n        &lt;!--  &lt;titleComponent :title=\"title\"&gt;&lt;/titleComponent&gt; --&gt;  &lt;!-- 标题组件自己写，代码没贴出来 --&gt;\n      &lt;/div&gt;\n\n      &lt;!-- 参数名称、列数根据实际情况调整 --&gt;\n      &lt;div class=\"table_body\"&gt;\n        &lt;div class=\"table_th\"&gt;\n          &lt;div class=\"tr1 th_style\"&gt;排产编号&lt;/div&gt;\n          &lt;div class=\"tr2 th_style\"&gt;类型&lt;/div&gt;\n          &lt;div class=\"tr3 th_style\"&gt;日期&lt;/div&gt;\n          &lt;div class=\"tr4 th_style\"&gt;进度&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"table_main_body\"&gt;\n          &lt;div class=\"table_inner_body\" :style=\"{top: tableTop + 'px'}\"&gt;\n            &lt;div class=\"table_tr\" v-for=\"(item,index) in tableList\" :key=\"index\"&gt;\n              &lt;div class=\"tr1 tr\"&gt;{<!-- -->{item.planNo}}&lt;/div&gt;\n              &lt;div class=\"tr2 tr\"&gt;{<!-- -->{item.type}}&lt;/div&gt;\n              &lt;div class=\"tr3 tr\" v-if=\"item.startDate!='-'\"&gt;{<!-- -->{item.startDate}} ~ {<!-- -->{item.endDate}}&lt;/div&gt;\n              &lt;div class=\"tr3 tr\" v-else&gt;-&lt;/div&gt;\n              &lt;div class=\"tr4 tr\" v-if=\"item.process!='-'\"&gt;{<!-- -->{Number(item.process).toFixed(2)}} %&lt;/div&gt;\n              &lt;div class=\"tr4 tr\" v-else&gt;-&lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport titleComponent from \"@/components/titleComponent\";\nexport default {\n  components: {\n    titleComponent\n  },\n  data() {\n    return {\n      showFlag: true,\n      tableTimer: null,\n      tableTop: 0,\n      tableList: [],\n      /* tableList 参考格式\n        [{\n          \"process\":0.0000,\n          \"planNo\":\"BP2022060701\",\n          \"endDate\":\"2022-06-07\",\n          \"type\":\"砌块\",\n          \"startDate\":\"2022-06-07\"\n        },\n        {\n          \"process\":0.0000,\n          \"planNo\":\"WP2022061301\",\n          \"endDate\":\"2022-06-13\",\n          \"type\":\"墙板\",\n          \"startDate\":\"2022-06-13\"\n        }]\n      */\n      tableListSize: 0,\n      componentTimer: null,\n\n      //需要根据情况设置的参数\n      title: \"排产进度\",\n      visibleSize: 6, //容器内可视最大完整行数\n      lineHeight: 49, //每行的实际高度（包含margin-top/bottom,border等）\n      componentTimerInterval: 3600000, //刷新数据的时间间隔\n      tableTimerInterval: 100 //向上滚动 1px 所需要的时间，越小越快，推荐值 100\n    };\n  },\n\n  //如果没有父元素传值，将watch内的内容搬至mounted中即可\n  props: [\"activeFactoryId\"],\n  watch: {\n    activeFactoryId(val, oldVal) {\n      clearInterval(this.componentTimer);\n      this.bsGetProductProcess();\n      this.componentTimerFun();\n    }\n  },\n  mounted() {\n\n  },\n  beforeDestroy() {\n    clearInterval(this.componentTimer);\n    clearInterval(this.tableTimer);\n  },\n  methods: {\n    //调用数据接口，获取列表数据，根据自己情况填接口url\n    bsGetProductProcess() {\n      clearInterval(this.tableTimer);\n      this.tableTop = 0;\n      if (this.activeFactoryId != \"\") {\n        this.showFlag = false;\n        this.$ajax({\n          method: \"get\",\n          url: `` //根据自己情况填接口url\n        })\n          .then(res =&gt; {\n            this.tableList = res.data.data;\n            this.showFlag = true;\n            this.tableActionFun();\n          })\n          .catch(function(err) {\n            console.log(\"bsGetProductProcess error!\");\n          });\n      }\n    },\n    tableActionFun() {\n      this.tableListSize = this.tableList.length;\n      if (this.tableListSize &gt; this.visibleSize) {\n        this.tableList = this.tableList.concat(this.tableList);\n        this.tableTimerFun();\n      } else {\n        this.fillTableList();\n      }\n    },\n    //当数据过少时，不触发自动轮播事件，并填充没有数据的行，参数根据实际情况修改即可\n    fillTableList() {\n      var addLength = this.visibleSize - this.tableListSize;\n      for (var i = 0; i &lt; addLength; i++) {\n        this.tableList.push({\n          planNo: \"-\",\n          type: \"-\",\n          startDate: \"-\",\n          endDate: \"-\",\n          process: \"-\"\n        });\n      }\n    },\n    tableTimerFun() {\n      var count = 0;\n      this.tableTimer = setInterval(() =&gt; {\n        if (count &lt; (this.tableList.length / 2) * this.lineHeight) {\n          this.tableTop -= 1;\n          count++;\n        } else {\n          count = 0;\n          this.tableTop = 0;\n        }\n      }, this.tableTimerInterval);\n    },\n    componentTimerFun() {\n      this.componentTimer = setInterval(() =&gt; {\n        this.bsGetProductProcess();\n      }, this.componentTimerInterval);\n    }\n  }\n};\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.productProcess {\n  width: 550px;\n  height: 415px;\n}\n.loading_div {\n  color: #eee;\n  padding-top: 100px;\n}\n.title_div {\n  width: 100%;\n}\n.table_body {\n  width: 100%;\n  margin-top: 15px;\n}\n.table_th {\n  width: 100%;\n  display: flex;\n  height: 40px;\n  line-height: 40px;\n}\n.tr {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  box-sizing: border-box;\n  padding: 0 5px;\n  text-align: center;\n  font-size: 14px;\n}\n.tr1 {\n  width: 28%;\n}\n.tr2 {\n  width: 15%;\n}\n.tr3 {\n  width: 35%;\n  font-size: 13px;\n}\n\n.tr4 {\n  flex: 1;\n}\n\n.th_style {\n  color: rgb(0, 221, 253);\n  font-weight: bold;\n  font-size: 18px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  box-sizing: border-box;\n  padding: 0 5px;\n  text-align: center;\n}\n.table_main_body {\n  width: 100%;\n  height: 294px;\n  overflow: hidden;\n  position: relative;\n}\n.table_inner_body {\n  width: 100%;\n  position: absolute;\n  left: 0;\n}\n.table_tr {\n  display: flex;\n  height: 40px;\n  line-height: 40px;\n  color: #eee;\n  font-size: 15px;\n  background: rgba(3, 145, 167, 0.1);\n  border: 1px solid rgb(4, 114, 131);\n  margin-top: 7px;\n}\n&lt;/style&gt;\n</code></pre>\n<p>      最后是效果视频。</p>\n<div class=\"csdn-video-box\">\n<iframe allowfullscreen=\"true\" data-mediaembed=\"csdn\" id=\"kGvaeukR-1657000604541\" src=\"https://live.csdn.net/v/embed/221997\"></iframe>\n<p></p>\n</div>\n<p>     下一篇文章将讲解有间隔的平滑滚动如何实现，虽然同样会使用到定时器，但会更多的使用到css的一些功能。</p>\n<p>     大家若有什么疑问或者有其它想法可以在评论区留言，我会尽量解答和回复的。</p>\n</div>\n</div>"}