{"blogid": "124214034", "writerAge": "码龄1年", "writerBlogNum": "55", "writerCollect": "137", "writerComment": "24", "writerFan": "346", "writerGrade": "3级", "writerIntegral": "726", "writerName": "cookcyq", "writerProfileAdress": "writer_image\\profile_124214034.jpg", "writerRankTotal": "33500", "writerRankWeekly": "360646", "writerThumb": "160", "writerVisitNum": "52328", "blog_read_count": "1034", "blog_time": "于 2022-04-19 14:19:16 发布", "blog_title": "PHP & Laravel & 掌握 api 生成 token 的几种方式以及一些注意事项（坑）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>介绍</h2>\n<p>本章略长，采用了 3 种创建 token 方式，读者可以选择任意一节阅读，但本人建议全部看完，掌握多种生成 token 方式何乐而不为呢。</p>\n<h2><a id=\"_3\"></a>准备工作</h2>\n<ol><li>创建 Laravel 项目并命名为 example-app</li></ol>\n<pre><code class=\"prism language-cmd\">composer create-project laravel/laravel example-app\ncd example-app\nphp artisan serve\n</code></pre>\n<p>没有特殊情况的话可以看到项目已正常运行输出</p>\n<pre><code class=\"prism language-cmd\">Starting Laravel development server: http://127.0.0.1:8000\n</code></pre>\n<ol start=\"2\"><li>本章所使用的 php 版本是 7.3</li><li>本章所使用的 Laravel 版本是 8X ，Laravel 7X 没有试过。</li></ol>\n<h2><a id=\"1__Sanctrum_19\"></a>1. 使用 Sanctrum</h2>\n<p>Laravel 默认采用 web session 认证机制，没有提供 api 认证，但最新版 Laravel 中内置了 santum，它是专门用来 api 认证生成 token 的扩展包，不过需要自己配置才能使用。</p>\n<h3><a id=\"11__22\"></a>1.1 配置数据库</h3>\n<p><code>sanctum</code> 对 token 的管理是在数据库中，我们还需要到 <code>.env</code> 环境变量文件里进行配置</p>\n<pre><code class=\"prism language-cmd\">DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\n# 填上你的数据库名、数据库用户、数据库密码\nDB_DATABASE=product\nDB_USERNAME=root\nDB_PASSWORD=123456\n</code></pre>\n<h3><a id=\"12__sanctum_33\"></a>1.2 安装 sanctum</h3>\n<p>1.2.1 下载 sanctum</p>\n<blockquote>\n<p>提示：最新 Laravel 已经提前下载好 sanctum 我们可以在 compose.json 中查看，如果没有找到则可以使用下面命令下载</p>\n</blockquote>\n<pre><code class=\"prism language-cmd\"># 下载 sanctum\ncomposer require laravel/sanctum\n# 发布并更新配置\n# 修改内容包括 migrage 、app/Models/User.php、以及 routes/api.php \nphp artisan vendor:publish --provider=\"Laravel\\Sanctum\\SanctumServiceProvider\"\n# 生成 sanctum 定义好的表\nphp artisan migrate\n</code></pre>\n<p>1.2.2 配置 <code>config/auth.php</code></p>\n<pre><code class=\"prism language-php\"><span class=\"token string single-quoted-string\">'guards'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'web'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string single-quoted-string\">'driver'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'session'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'provider'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'users'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 新增 api 士兵</span>\n        <span class=\"token string single-quoted-string\">'api'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string single-quoted-string\">'driver'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'sanctum'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'provider'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'users'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<h3><a id=\"13__token__61\"></a>1.3 新增创建 token 接口</h3>\n<p><code>routes/api.php</code> 代码如下</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Route</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name static-context\">Route</span><span class=\"token operator\">::</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/tokens/create'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Request</span> <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\"># 创建用户，这里写死作为案例。</span>\n    <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">User</span><span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'name'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'cookcyq'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'email'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'10086@qq.com'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'password'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token class-name static-context\">Hash</span><span class=\"token operator\">::</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'123457'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 给 cookcyq 用户生成 token， $key 是秘钥，平时秘钥一定设置复杂点，这里仅作为案例。</span>\n    <span class=\"token variable\">$key</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'hello'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$token</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">createToken</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 返回</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'token'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$token</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">plainTextToken</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>接下来使用 postman 访问 <code>http://localhost:8000/api/tokens/create</code><br/> <strong>注意要带上 api 前缀</strong><br/> 效果如图：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3c2a591ffe4e4c8f8987eaea593f9798.png\"/><br/> 可以看到成功创建用户并返回 token，现在来看看<code>users</code> 表是存在此用户<br/> <img alt=\"在这里插入图片描述\" src=\"image\\feed762792bf41fa898fb873cffdd46d.png\"/><br/> 再来看看 <code>personal_access_tokens</code> 表，这个表就是 sanctum 定义的，我们来看看是否存放用户对应的 token 相关字段信息<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a0b943da8aef4e3da23357813a27d424.png\"/><br/> 如图所示一切正常，你可能注意到 <code>personal_access_tokens</code> 表里的 token 内容与 postman 返回的token 不一致，这个无需担心，这是 sanctum 自己要处理的逻辑，我们只需拿接口返回的 token 去使用即可。</p>\n<h3><a id=\"14___92\"></a>1.4 新增获取用户信息接口</h3>\n<p>拿到 token 后，我们开始新增用户信息接口来验证 token 是否对应上该用户。<br/> <code>routes/api.php</code> 代码如下</p>\n<pre><code class=\"prism language-php\"><span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// 以上省略</span>\n\n<span class=\"token comment\">// 新增</span>\n<span class=\"token class-name static-context\">Route</span><span class=\"token operator\">::</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/getProfile'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Request</span> <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 获取用户信息：sanctum 帮我们从数据库中寻找，它能寻找是因为我们已经在 auth.php 中配置好 provider:users 对应的 Elquent User 模型</span>\n    <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 也可以用以下方式获取</span>\n    <span class=\"token comment\">// $user = auth()-&gt;guard('api')-&gt;user();</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'data'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$user</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'auth:api'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>现在拿刚才接口返回的 token 去访问<code>http://localhost:8000/api/getProfile</code><br/> sanctum 是采用 <code>Bearer Token</code> 形式，需要带上 Bearer 前缀，header 请求格式如下：<br/> <code>Authorization: Bearer 1|Vjq5FOkhnwX6laVxNLE2YAEZTrMopmQeHtC4KyA2</code></p>\n<p>访问效果图：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\11e1d5f82686437aaf5ffe405c611f25.png\"/><br/> 可以看到根据 token 可以返回对应的用户信息，现在我们用无效的 token 试试<br/> <strong>注意：在使用前，确保 postman 里的 header 设置为 Accept:application/json</strong><br/> 否则会报如下错误：Route[login] not defined.<br/> <img alt=\"在这里插入图片描述\" src=\"image\\43aaeca4ebac4138a97aa8e7c9c746f7.png\"/><br/> 这个报错是因为 Laravel 默认情况下会对 Access 做出相应的认证判断，由于 postman header 默认设置为 Access: * ，而 Laravel 默认的授权认证是采用 web session 机制，所以未授权的用户都会重定向到 login 页面，触发逻辑代码可在 <code>app/http/Middleware/Authenticate.php</code> 中看到</p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">class</span> Authenticate <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Middleware</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/**\n     * Get the path the user should be redirected to when they are not authenticated.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return string|null\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">redirectTo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">expectsJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>由于我们是针对 api 不是 web ，不需要重定向，这里可以重写一下逻辑。</p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">class</span> Authenticate <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Middleware</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/**\n     * Get the path the user should be redirected to when they are not authenticated.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return string|null\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">redirectTo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">expectsJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 换成这句</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n\t\t\t\t<span class=\"token string single-quoted-string\">'msg'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'请登录'</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string single-quoted-string\">'code'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">10000</span>\n\t\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>现在继续拿错误的 token 来访问，正常来讲会按照上面的格式来返回吧？然而并没有，看图<br/> <img alt=\"在这里插入图片描述\" src=\"image\\68cfb5e8e1bf478da929d7a48b03d7b7.png\"/></p>\n<p>报了另外一个错误：ErrorException: Header may not contain more than a single header, new line detected in file …<br/> 这个错误的根源就是上面提到：postman 的 header 没有设置 <strong>Accept:application/json</strong> 而导致的。<br/> 好了，现在我们设置下看看效果。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d95a934bffe843d2ae76d58f52839a3f.png\"/><br/> 错误倒是没有了，但返回的格式跟上面写的也不一样啊，难道 redirectTo 函数没有触发？触发是有的，只是没有进 <code>if (! $request-&gt;expectsJson()) {}</code> 这句判断，正是 postman 的 header 没有设置相应的 Access 导致阴差阳错触发了 Laravel 默认对 header Access 处理的机制，也就是说这句判断压根就不是为 api 服务的，是给 web session 提供的，所以 redirectTo 函数我们可以注释掉。</p>\n<p>现在我们希望能按照上面的格式返回应该怎么做？实现方式有几种，这里简单用 Laravel 提供的 <code>unauthenticated</code> 方法，还是在<code>app/http/Middleware/Authenticate.php</code> 里面修改</p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">redirectTo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// ....}</span>\n<span class=\"token comment\">// 新增这个方法</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">unauthenticated</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">array</span> <span class=\"token variable\">$guards</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            <span class=\"token string single-quoted-string\">'code'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'msg'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'请登录'</span>\n         <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>现在来看看效果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\43169a8313c04207bc4e5ff79cfaf8f0.png\"/><br/> 经过了一般折腾终于正常了，此方法在最新 7X 8X 9X 文档中没有呈现，我是在 5.7 X 发现的 ，说真的， Laravel 文档对于刚入门的初学者来说我觉得不太友好， 上手起来总会遇到额外的情况需要自己去摸索，由于 Laravel 框架内置功能太多，这不后来新增了 Laravel/lumen 框架，此框架去掉了许多 Laravel 内置功能，上手较快，感兴趣的同学可以自行了解。</p>\n<h2><a id=\"2__tymonjwtauth_189\"></a>2. 使用 tymon/jwt-auth</h2>\n<h3><a id=\"_190\"></a>准备工作</h3>\n<p>为了让案例易于理解，本文将继续新建 Laravel 项目，然后配置数据库，这些操作就不演示了，具体可翻到最顶部查看如何操作。</p>\n<h3><a id=\"21__jwtauth_193\"></a>2.1 安装 jwt-auth</h3>\n<p>2.1.1 下载 jwt-auth</p>\n<pre><code class=\"prism language-cmd\">composer require tymon/jwt-auth\n</code></pre>\n<p>2.1.2 在 <code>config/app.php</code> 新增服务</p>\n<pre><code class=\"prism language-php\"><span class=\"token string single-quoted-string\">'providers'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token class-name class-name-fully-qualified static-context\">Tymon<span class=\"token punctuation\">\\</span>JWTAuth<span class=\"token punctuation\">\\</span>Providers<span class=\"token punctuation\">\\</span>LaravelServiceProvider</span><span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<p>2.1.3 发布配置</p>\n<pre><code class=\"prism language-cmd\">php artisan vendor:publish --provider=\"Tymon\\JWTAuth\\Providers\\LaravelServiceProvider\"\n</code></pre>\n<p>2.1.4 生成秘钥</p>\n<pre><code class=\"prism language-cmd\"># 该秘钥会放到 .env 变量环境里面，JWT_SECRET = xxxx\nphp artisan jwt:secret\n</code></pre>\n<h3><a id=\"22__jwtauth_215\"></a>2.2 配置 jwt-auth</h3>\n<p>2.2.1 在 <code>app/Models/User.php</code> User 模型中实现 JWTSubject 接口</p>\n<pre><code class=\"prism language-php\"><span class=\"token comment\">//...省略</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Tymon<span class=\"token punctuation\">\\</span>JWTAuth<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>JWTSubject</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入接口</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Authenticatable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">JWTSubject</span><span class=\"token punctuation\">{<!-- --></span>\n\t\n\t<span class=\"token comment\">// ...省略</span>\n\t\n\t\n\t<span class=\"token comment\">// 将官方提供实现接口的两个方法搬过来放到这里</span>\n\t<span class=\"token comment\">/**\n     * Get the identifier that will be stored in the subject claim of the JWT.\n     *\n     * @return mixed\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getJWTIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * Return a key value array, containing any custom claims to be added to the JWT.\n     *\n     * @return array\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getJWTCustomClaims</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>2.2.2 配置 <code>config/auth.php</code></p>\n<pre><code class=\"prism language-php\"><span class=\"token operator\">...</span><span class=\"token operator\">.</span>\n<span class=\"token string single-quoted-string\">'defaults'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n\t <span class=\"token comment\">// 将 api 作为默认士兵 ，这样每次使用 auth() 或 Auth:: 就是 api 而不是 web 了。</span>\n     <span class=\"token string single-quoted-string\">'guard'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'api'</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string single-quoted-string\">'passwords'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'users'</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token string single-quoted-string\">'guards'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n     <span class=\"token string single-quoted-string\">'web'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string single-quoted-string\">'driver'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'session'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string single-quoted-string\">'provider'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'users'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 新增 api 士兵</span>\n      <span class=\"token string single-quoted-string\">'api'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string single-quoted-string\">'driver'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'jwt'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string single-quoted-string\">'provider'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'users'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<h3><a id=\"22__token__268\"></a>2.2 新增创建 token 接口</h3>\n<p>2.2.1 新建 <code>AuthController.php</code> 文件（名字随便定义）</p>\n<pre><code class=\"prism language-cmd\">php artisan make:controller AuthController\n</code></pre>\n<p>2.2.2 <code>app/Http/Controolers/AuthController.php</code> 代码如下</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">JWTAuth</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用 JWT 库</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 创建用户并生成对应的 token</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string single-quoted-string\">'name'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'Cookcyq2'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'email'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'100862@qq.com'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'password'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">bcrypt</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'1234567'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">User</span><span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$token</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">JWTAuth</span><span class=\"token operator\">::</span><span class=\"token function\">fromUser</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 返回 token </span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> \n            <span class=\"token string single-quoted-string\">'token'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$token</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'token_type'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'bearer'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 过期时间</span>\n            <span class=\"token string single-quoted-string\">'expires_in'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getTTL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>2.2.3 配置 <code>routes/api.php</code> 路由</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Route</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>AuthController</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name static-context\">Route</span><span class=\"token operator\">::</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/tokens/create'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token class-name static-context\">AuthController</span><span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'create'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>现在我们来访问：<code>http://localhost:8000/api/tokens/create</code><br/> <strong>注意要带上 api 前缀</strong><br/> 效果如图：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\19437f5acb4c49e2bf7308d4275a56e9.png\"/><br/> 一切正常，此时数据库中也有对应的用户<br/> <img alt=\"在这里插入图片描述\" src=\"image\\94578db9fb8c4513bdb1f96af8c2360e.png\"/></p>\n<h3><a id=\"23__317\"></a>2.3 新增获取用户信息接口</h3>\n<p>现在我们来验证 token 是否对应上用户信息<br/> 2.2.2 <code>app/Http/Controolers/AuthCroller.php</code> 代码如下</p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">class</span> AuthController <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// 新增 getProfile 方法</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getProfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            <span class=\"token string single-quoted-string\">'data'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>2.2.2 配置 <code>routes/api.php</code> 路由</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Route</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>AuthController</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name static-context\">Route</span><span class=\"token operator\">::</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/tokens/create'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token class-name static-context\">AuthController</span><span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'create'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 新增 getProfile</span>\n<span class=\"token class-name static-context\">Route</span><span class=\"token operator\">::</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/getProfile'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token class-name static-context\">AuthController</span><span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'getProfile'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'auth:api'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>接下来访问 <code>http://localhost:8000/api/getProfile</code><br/> <strong>注意：postman 的 header 的 Access 要设置为：Accept:application/json</strong><br/> 效果如图：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ca5c00839ea741e4a04cb56475045728.png\"/><br/> 可以看到 token 是正确的并返回相应的用户信息，现在我们用无效的 token 试试。<br/> 效果如图：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d801303a3d934ea49c035d23297ca0e6.png\"/><br/> 可以看到中间件拦截到并响应未授权信息，如果你想自定义响应格式可以到 <code>app/Exceptions/Handle.php</code> 配置如下：</p>\n<pre><code class=\"prism language-php\"><span class=\"token comment\">// ... 省略</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>AuthenticationException</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Handler</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ExceptionHandler</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// ... 省略</span>\n\t<span class=\"token comment\">// 新增这个方法</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">unauthenticated</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> <span class=\"token class-name type-declaration\">AuthenticationException</span> <span class=\"token variable\">$exception</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">{<!-- --></span>\n\t        <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n\t            <span class=\"token string single-quoted-string\">'msg'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'未授权，请先登录'</span><span class=\"token punctuation\">,</span>\n\t            <span class=\"token string single-quoted-string\">'code'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">10000</span>\n\t        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>再来看看效果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\63e3af4844594942b29fa9fe2ee6714b.png\"/></p>\n<h3><a id=\"24_jwtphp__369\"></a>2.4 jwt.php 配置文件</h3>\n<p>2.4.1 设置 token 过期时间</p>\n<pre><code class=\"prism language-php\"><span class=\"token comment\">// 读取 JWT_TTL，没有的话默认过期时间为 60 分钟。</span>\n<span class=\"token string single-quoted-string\">'ttl'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'JWT_TTL'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> \n</code></pre>\n<p>2.4.2 设置刷新 token 时间有效期限</p>\n<pre><code class=\"prism language-php\"><span class=\"token comment\">// 默认 token 在 2 周内都可以进行刷新重复使用。</span>\n<span class=\"token string single-quoted-string\">'refresh_ttl'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'JWT_REFRESH_TTL'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20160</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p>其它配置具体就不详细多说了， 可参考官方文档。</p>\n<h2><a id=\"3__firebasephpjwt_382\"></a>3. 使用 firebase/php-jwt</h2>\n<h3><a id=\"_383\"></a>准备工作</h3>\n<ol><li>还是老样子，我们新建一个 Laravel 项目并配置好数据库，怎么操作可翻到最顶部观看。</li><li>firebase/php-jwt 库要求 php7 以上</li></ol>\n<h3><a id=\"31__phpjwt_386\"></a>3.1 安装 php-jwt</h3>\n<pre><code class=\"prism language-cmd\">composer require firebase/php-jwt\n</code></pre>\n<h3><a id=\"33__token__390\"></a>3.3 新增创建 token 接口</h3>\n<p>3.3.1 配置 <code>routes/api.php</code> 路由</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Route</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Firebase<span class=\"token punctuation\">\\</span>JWT<span class=\"token punctuation\">\\</span>JWT</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name static-context\">Route</span><span class=\"token operator\">::</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'tokens/create'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 创建用户</span>\n    <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">User</span><span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'name'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'cookcyq3'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'email'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'1008666@qq.com'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'password'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">bcrypt</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'1234567'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 秘钥，实际使用时记得设置复杂些。</span>\n    <span class=\"token variable\">$key</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 元数据</span>\n    <span class=\"token variable\">$payload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">// 用户 id 用来解 token 时所需要的关键信息。</span>\n        <span class=\"token string single-quoted-string\">'user_id'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'user_name'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// token 过期时间，这里设置一个小时。</span>\n        <span class=\"token string single-quoted-string\">'exp'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3600</span>\n        <span class=\"token comment\">// 你还可以添加任意元数据</span>\n        <span class=\"token comment\">// ....</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 生成 token</span>\n    <span class=\"token variable\">$jwt</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">JWT</span><span class=\"token operator\">::</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$payload</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'HS256'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'token'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$jwt</span> \n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>接下来使用 postman 访问 <code>http://localhost:8000/api/tokens/create</code><br/> 效果如图：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\87ccb5ca9c6f444a9d89e3dd024fa4aa.png\"/><br/> 再来看看用户是否存在数据库中<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5ff654798c1f4ff6bc83bc5711c35683.png\"/></p>\n<h3><a id=\"34__token_429\"></a>3.4 验证 token</h3>\n<p>在定义获取用户信息接口前，我们还面临验证 token 的问题，只有 token 有效我们才能将用户信息传递给接口，无效的 token 则响应未授权信息，前面介绍的 <code>laravel/sanctum</code> 和 <code>tymon/jwt-auth</code> 都已经内置好这些功能了，这里我们需要自己手动搞一个。</p>\n<p>在动手前我们先回顾前面两种获取用户信息接口时用到哪些东西，貌似也就多了 <code>middleware('auth:api');</code> 这句话，其它没什么变化吧？为避免有些读者刚入门，我还是解释一下这句话的含义吧：</p>\n<ol><li>auth 是一个中间件，可以在 <code>app/Http/Kernel.php</code> 中的 <code>$routeMiddleware</code> 属性找到，它映射了 <code>\\App\\Http\\Middleware\\Authenticate::class</code> 中间件。</li><li>api 是使用士兵的名字，也就是我们在 <code>config/auth.php</code> 中定义的。</li></ol>\n<p>这个 auth 中间件可以理解，但是这个 api 士兵的真正作用到底是干嘛的呢？为什么要指定 api？ 直接用 auth 不行么？这是因为 auth 中间件默认情况下会分配一位士兵，这个士兵就是 web ，所以如果你把 api 去掉就等同于 <code>middleware('auth:web')</code> ，很明显我们并不需要 web 士兵，否则当你验证 token 时又会报什么Route [login] not defined. 的错误了。</p>\n<blockquote>\n<p>只有 <code>auth:士兵名</code>，如果是自定义中间件，则格式为 <code>中间件:参数</code>，这些参数对应中间件 handle 方法第的三个参数，具体使用细节就不细说了，可以参考文档。</p>\n</blockquote>\n<p>现在我们知道 auth 是 Laravel 内置的中间件，拿来就用，我们只差一个类似 api 的士兵，我们仔细观察 api 下面还有个 driver 和 provider，这个 driver 可以理解为引入真正的士兵，而 provider 则是 user 用户数据模型，user 也有了，我们只需创建 driver 士兵不就可以了？Laravel 提供了几种自定义士兵的方式，我们使用其中的 <code>Auth::viaRequest(guard_name, callback)</code> 函数来定义士兵即可, 这是最快捷的一种方式，其它的就不细说了，后续我会专门开一篇文章来讲解士兵相关内容，现在不懂这些概念也没关系，用的多了就懂了，我们先让功能能用起来再说。</p>\n<p>3.4.1 在 <code>app/Providers/AuthServiceProvider.php</code> 文件中改动如下：</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Providers<span class=\"token punctuation\">\\</span>AuthServiceProvider</span> <span class=\"token keyword\">as</span> ServiceProvider<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Auth</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Firebase<span class=\"token punctuation\">\\</span>JWT<span class=\"token punctuation\">\\</span>JWT</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Firebase<span class=\"token punctuation\">\\</span>JWT<span class=\"token punctuation\">\\</span>Key</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/**\n     * The policy mappings for the application.\n     *\n     * @var array&lt;class-string, class-string&gt;\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$policies</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">// 'App\\Models\\Model' =&gt; 'App\\Policies\\ModelPolicy',</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Register any authentication / authorization services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">registerPolicies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 新增</span>\n\t\t<span class=\"token comment\">// jwt 就是创建士兵的名字，后续通过 driver:jwt 引入。</span>\n        <span class=\"token class-name static-context\">Auth</span><span class=\"token operator\">::</span><span class=\"token function\">viaRequest</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'jwt'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Request</span> <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t            <span class=\"token comment\">// 根据 token 找到用户并 return $user;</span>\n\t        \t<span class=\"token comment\">// 这样就可以通过 Auth::user() 来获取对应的用户数据。</span>\n\t        \t<span class=\"token comment\">// 如果 return null，则 Auth::user() 返回的就是 null</span>\n\t        \t<span class=\"token comment\">// 暂且理解为 Auth::xx 系列方法就是由 jwt 士兵提供的。</span>\n                <span class=\"token variable\">$token</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'token'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token variable\">$key</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'hello'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$token</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">return</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token variable\">$payload</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">JWT</span><span class=\"token operator\">::</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$token</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'HS256'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">User</span><span class=\"token operator\">::</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$payload</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">user_id</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \n                <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>3.4.2 在 <code>config/auth.php</code> 改动如下：</p>\n<pre><code class=\"prism language-php\"> <span class=\"token string single-quoted-string\">'defaults'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'guard'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'api'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认是 web，这里改成 api</span>\n        <span class=\"token string single-quoted-string\">'passwords'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'users'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token string single-quoted-string\">'guards'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'web'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string single-quoted-string\">'driver'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'session'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'provider'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'users'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 此士兵用于 api 的</span>\n        <span class=\"token string single-quoted-string\">'api'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string single-quoted-string\">'driver'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'jwt'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 引入这位士兵</span>\n            <span class=\"token string single-quoted-string\">'provider'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'users'</span>  \n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 此士兵是用于 admin 的</span>\n        <span class=\"token string single-quoted-string\">'admin'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string single-quoted-string\">'driver'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'jwt'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 引入这位士兵</span>\n            <span class=\"token string single-quoted-string\">'provider'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'users'</span>  \n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p><strong><code>现在我们可以理解为 api / admin 就是士兵具体应用场景分类所抽象出来的别名</code></strong></p>\n<p>士兵搞好了，我们还差 token 验证，如果 token 失效则返回未授权信息。</p>\n<p>3.4.3 在 <code>app/Http/Middleware/Authenticate.php</code> （也就是 auth 中间件）改动如下：</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>php\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>Authenticate</span> <span class=\"token keyword\">as</span> Middleware<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Closure</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Firebase<span class=\"token punctuation\">\\</span>JWT<span class=\"token punctuation\">\\</span>JWT</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Firebase<span class=\"token punctuation\">\\</span>JWT<span class=\"token punctuation\">\\</span>Key</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Auth</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Authenticate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Middleware</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/**\n     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Illuminate\\Http\\Response|\\Illuminate\\Http\\RedirectResponse)  $next\n     * @return \\Illuminate\\Http\\Response|\\Illuminate\\Http\\RedirectResponse\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Request</span> <span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> <span class=\"token class-name type-declaration\">Closure</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/**\n         * jwt 的过期、签名错误的底层处理是通过抛异常机制实现的，\n         * 所以我们要通过捕获的形式来响应。\n         */</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token variable\">$token</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'token'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$key</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'hello'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$token</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n                    <span class=\"token string single-quoted-string\">'msg'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'缺少 token'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string single-quoted-string\">'code'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">10000</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 尝试解析，如果解析成功则可以进入 next 反之进入 catch 捕获异常</span>\n            <span class=\"token variable\">$payload</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">JWT</span><span class=\"token operator\">::</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$token</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'HS256'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name class-name-fully-qualified\"><span class=\"token punctuation\">\\</span>Firebase<span class=\"token punctuation\">\\</span>JWT<span class=\"token punctuation\">\\</span>ExpiredException</span> <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n                <span class=\"token string single-quoted-string\">'msg'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'token 已过期'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string single-quoted-string\">'code'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">10000</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n        <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name class-name-fully-qualified\"><span class=\"token punctuation\">\\</span>Exception</span> <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n                <span class=\"token string single-quoted-string\">'msg'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'token 格式有误: '</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string single-quoted-string\">'code'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">20000</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 验证通过</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<blockquote>\n<p>handle 方法是每个中间件都自带的，auth 中间件自然也不例外。</p>\n</blockquote>\n<h3><a id=\"34__588\"></a>3.4 新增获取用户信息接口</h3>\n<p>3.4.1 配置 <code>routes/api.php</code> 路由</p>\n<pre><code class=\"prism language-php\"><span class=\"token comment\">// 新增这段</span>\n<span class=\"token class-name static-context\">Route</span><span class=\"token operator\">::</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'getProfile'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// auth() 默认是 web，现在已经改成 api了，无需再指定 auth()-&gt;guard('api')-&gt;user()</span>\n    <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'data'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$user</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'auth:api'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>接下来使用不同的 token 来请求 <code>http://localhost:8000/api/getProfile</code></p>\n<p>3.4.2 传递空的 token<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e6421b8340474be0b01f60bb192e8753.png\"/><br/> 3.4.2 传递格式错误的 token<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f7f228a0710a4c24b9c0745746b1c63e.png\"/><br/> 3.4.4 传递已过期的 token：这里分为几步骤</p>\n<p>a) 将原来的创建 token 接口代码稍作改动下，将创建用户改为查找用户，把过期时间改为 5 秒，代码如下</p>\n<pre><code class=\"prism language-php\"><span class=\"token class-name static-context\">Route</span><span class=\"token operator\">::</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'tokens/create'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 前面已经创建过了，我们只需找到这位用户即可。</span>\n    <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">User</span><span class=\"token operator\">::</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'name'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'cookcyq3'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$key</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$payload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string single-quoted-string\">'user_id'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'user_name'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// token 过期时间为 5秒</span>\n        <span class=\"token string single-quoted-string\">'exp'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$jwt</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">JWT</span><span class=\"token operator\">::</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$payload</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'HS256'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'token'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$jwt</span> \n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>b) 请求获取 token 接口（token 5秒后就过期）<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6af8aca6c5944de58a28faf54632b0b4.png\"/><br/> c) 5秒过后，将 token 传递请求用户信息接口:<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ea29649bcf044d789d5ca26059894136.png\"/><br/> d) 传递正确且有效的 token:<br/> PS：将上面的 token 过期时间设置长一点重新获取一遍 token 即可。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6dd5cc278a914e6aa93f7b546e378e33.png\"/></p>\n<h3><a id=\"_639\"></a>总结</h3>\n<ol><li>sanctum 和 jwt-auth 都是集成好的扩展包，上手快，开箱即用，安全性处理好。</li><li>firebase/php-jwt 偏向自定义风格，如 token 验证、token 的解/编码，自定义士兵等，如果你对中间件、士兵这些抽概念还不清楚的话，选择前面任意一种使用就可以了。</li><li>具体用哪种因人而异，本人偏向 firebase/php-jwt 和 tymom/jwt-auth。</li></ol>\n<p>好了本文就到这里，有问题欢迎指出，喜欢的话可以点赞收藏。</p>\n<p>文献：<br/> <a href=\"https://laravel.com/docs/8.x/sanctum\">https://laravel.com/docs/8.x/sanctum</a><br/> <a href=\"https://jwt-auth.readthedocs.io/en/develop/quick-start/\">https://jwt-auth.readthedocs.io/en/develop/quick-start/</a><br/> <a href=\"https://github.com/firebase/php-jwt\">https://github.com/firebase/php-jwt</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}