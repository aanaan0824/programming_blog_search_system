{"blogid": "113195335", "writerAge": "码龄4年", "writerBlogNum": "38", "writerCollect": "1200", "writerComment": "28", "writerFan": "84", "writerGrade": "4级", "writerIntegral": "802", "writerName": "Sylvia_2000", "writerProfileAdress": "writer_image\\profile_113195335.jpg", "writerRankTotal": "1860938", "writerRankWeekly": "84265", "writerThumb": "203", "writerVisitNum": "36519", "blog_read_count": "24939", "blog_time": "于 2021-01-31 21:53:16 发布", "blog_title": "关于es6新特性的总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"1let__const_0\"></a>1.let &amp; const</h1>\n<h2><a id=\"1_letvar_1\"></a>1) let，作用与var类似，用于声明变量</h2>\n<p>特性：</p>\n<ol><li>let 不能重复声明变量，var 可以重复声明变量；</li><li>块级作用域，es5中存在全局作用域、函数作用域、eval作用域；es6中引入了块级作用域，let声明的变量在块级作用域<code>{}</code>内有效</li><li>let声明的变量不存在var的变量提升问题</li></ol>\n<p>举个例子：</p>\n<pre><code class=\"prism language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>page-header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>点击切换颜色<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script language-javascript\">\n        <span class=\"token comment\">// 获取div对象</span>\n        <span class=\"token keyword\">let</span> items <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'item'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 遍历并绑定事件 遍历时let i</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">'pink'</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/*\n        相当于在3个块级作用域内分别声明了i\n        {\n            let i = 0\n            items[i].onclick = function(){\n                items[i].style.background = 'pink'\n            }\n        }\n        {\n            let i = 1\n            items[i].onclick = function(){\n                items[i].style.background = 'pink'\n            }\n        }\n        {\n            let i = 2\n            items[i].onclick = function(){\n                items[i].style.background = 'pink'\n            }\n        }\n        */</span>\n\n        <span class=\"token comment\">/*\n        // 遍历并绑定事件 遍历时var i\n        for(var i = 0; i &lt; items.length; i++){\n            items[i].onclick = function(){\n                // 修改当前元素的背景颜色\n                this.style.background = 'pink' // 此处this指向’被绑定的元素对象‘，即调用该函数的对象\n                // 此处不能和上文一样使用 items[i].style.background = 'pink'，\n                // 因为var的i不考虑块级作用域， 则相当于在全局声明了一个变量，循环结束后i=3，\n                // 函数执行时向上层寻找最终得到全局变量i=3，而items[3]为undefined\n            }\n        }\n        相当于\n        {\n            var i = 0\n            // ...\n\n        }\n        {\n            var i = 1\n            // ...\n        }\n        {\n            var i = 2\n            // ...\n        }\n        {\n            var i = 3\n        }\n\n        */</span>\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style language-css\">\n    <span class=\"token selector\">.item</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 2%<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> brown<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h2><a id=\"2_const__103\"></a>2) const 用于声明常量</h2>\n<p>注意事项：</p>\n<ol><li>一定要赋初始值</li><li>一般常量使用大写(属于编程规范)</li><li>常量值不能修改</li><li>存在块级作用域</li><li>对于数组和对象的元素修改，不算做对常量的修改，不会报错(因为引用数据类型保存的是内存地址，所以声明数组和对象时可以使用const声明，以此保证其保存的内存地址不变)</li></ol>\n<h1><a id=\"2_110\"></a>2.解构赋值</h1>\n<p>ES6允许按照一定模式从数组和对象中提取值，对变量进行赋值</p>\n<h2><a id=\"1__112\"></a>1) 数组的解构</h2>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">const</span> Web <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'javascript'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>tool1<span class=\"token punctuation\">,</span> tool2<span class=\"token punctuation\">,</span> tool3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Web\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tool1-----'</span><span class=\"token punctuation\">,</span> tool1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// html</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tool2-----'</span><span class=\"token punctuation\">,</span> tool2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// css</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tool3-----'</span><span class=\"token punctuation\">,</span> tool3<span class=\"token punctuation\">)</span> <span class=\"token comment\">// javascript</span>\n</code></pre>\n<h2><a id=\"2__121\"></a>2) 对象的解构</h2>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">const</span> liMing <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'liMing'</span><span class=\"token punctuation\">,</span>\n            age<span class=\"token punctuation\">:</span> <span class=\"token string\">'22'</span><span class=\"token punctuation\">,</span>\n            tell<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`I am liMing`</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{<!-- --></span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> tell<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> liMing\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'liMing'</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// '22'</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tell<span class=\"token punctuation\">)</span> <span class=\"token comment\">// f(){...}</span>\n        <span class=\"token function\">tell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// I am liMing</span>\n</code></pre>\n<h1><a id=\"3_138\"></a>3.模板字符串</h1>\n<p>特性：</p>\n<ol><li>` `(反引号)内容中可以直接出现换行符，’ '和\" \"中则不可以，出现会报错</li><li>可以直接进行变量拼接</li></ol>\n<h1><a id=\"4_142\"></a>4.简化对象写法</h1>\n<p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法（在属性名和变量名相同的情况下），这样的书写更加简洁</p>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'LiMing'</span>\n        <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">tell</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I am LiMing'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> liMing <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n            name<span class=\"token punctuation\">,</span>\n            tell<span class=\"token punctuation\">,</span>\n            <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 等效于</span>\n        <span class=\"token comment\">// const liMing = {<!-- --></span>\n        <span class=\"token comment\">//     name: name,</span>\n        <span class=\"token comment\">//     tell: tell,</span>\n        <span class=\"token comment\">//     sayHi: function(){<!-- --></span>\n        <span class=\"token comment\">//         console.log('hello')</span>\n        <span class=\"token comment\">//     }</span>\n        <span class=\"token comment\">// }</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>liMing<span class=\"token punctuation\">)</span>\n        liMing<span class=\"token punctuation\">.</span><span class=\"token function\">tell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        liMing<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"5_171\"></a>5.箭头函数</h1>\n<p>与function声明的区别：</p>\n<ol><li>箭头函数this是静态的。 \n  <ul><li>箭头函数内的this指向上层对象；始终指向函数声明时所在作用域下的this的值，无法被call改变</li><li>普通函数内的this指向调用其函数的对象</li></ul> </li></ol>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">getName2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 设置window对象的name属性</span>\n        window<span class=\"token punctuation\">.</span>student <span class=\"token operator\">=</span> <span class=\"token string\">'LiMing'</span>\n        <span class=\"token keyword\">const</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'HanMei'</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 直接调用</span>\n        <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// LiMing</span>\n        <span class=\"token function\">getName2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// LiMing</span>\n\n        <span class=\"token comment\">// call方法调用</span>\n        getName<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span> <span class=\"token comment\">// HanMei</span>\n        getName2<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span> <span class=\"token comment\">// LiMing</span>\n</code></pre>\n<ol start=\"2\"><li>箭头函数不能作为构造函数实例化对象</li></ol>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'LiMing'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 报错：Uncaught TypeError: Person is not a constructor</span>\n</code></pre>\n<ol start=\"3\"><li>箭头函数不能使用arguments变量，但是可以使用<code>....rest</code></li></ol>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 报错：Uncaught ReferenceError: arguments is not defined</span>\n        \n\n        <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fn2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// a b c</span>\n</code></pre>\n<ol start=\"4\"><li>箭头函数的简写<br/> ① 当形参有且只有一个的时候，可以省略<code>()</code><br/> ② 当代码体只有一条语句的时候，可以省略<code>{}</code>，此时<code>return</code>必须省略，而且语句的执行结果就是函数的返回值</li></ol>\n<pre><code class=\"prism language-javascript\">        <span class=\"token comment\">// 当形参有且只有一个的时候，可以省略`()`</span>\n        <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> n\n        <span class=\"token punctuation\">}</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 当代码体只有一条语句的时候，可以省略`{}`，此时`return`必须省略，而且语句的执行结果就是函数的返回值</span>\n        <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">pow</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">=&gt;</span> n<span class=\"token operator\">*</span>n\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>5.箭头函数的例子<br/> 箭头函数适合与this无关的回调，比如定时器<code>setTimeout(()=&gt;{...}, 2000)</code>、数组的方法回调<code>arr.filter((item)=&gt;{...})</code>；<br/> 不适合与this有关的回调，比如dom元素的事件回调<code>ad.addEventListener('click', function(){...}</code>、对象内的方法定义<code>{name: 'LiMing', getName: function(){this.name}}</code><br/> 例1：</p>\n<pre><code class=\"prism language-javascript\">        <span class=\"token comment\">// 需求-1 点击div 2s后颜色变红</span>\n        \n        <span class=\"token comment\">// 获取元素</span>\n        <span class=\"token keyword\">let</span> ad <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 绑定事件</span>\n        ad<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 定时器里的this指向window</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">'brown'</span> <span class=\"token comment\">// 报错</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">//解决方案1</span>\n        <span class=\"token comment\">// ad.addEventListener('click', function(){<!-- --></span>\n        <span class=\"token comment\">//     // 保存this的值</span>\n        <span class=\"token comment\">//     let _this = this // _this指向ad</span>\n        <span class=\"token comment\">//     setTimeout(function(){<!-- --></span>\n        <span class=\"token comment\">//         console.log(_this) </span>\n        <span class=\"token comment\">//         _this.style.background = 'brown'</span>\n        <span class=\"token comment\">//     }, 2000)</span>\n        <span class=\"token comment\">// })</span>\n\n        <span class=\"token comment\">// 解决方案2</span>\n        <span class=\"token comment\">// ad.addEventListener('click', function(){<!-- --></span>\n        <span class=\"token comment\">//     setTimeout(()=&gt;{<!-- --></span>\n        <span class=\"token comment\">//         console.log(this) </span>\n        <span class=\"token comment\">//         this.style.background = 'brown' // this指向函数声明时所在作用域下this的值 即ad</span>\n        <span class=\"token comment\">//     }, 2000)</span>\n        <span class=\"token comment\">// })</span>\n</code></pre>\n<p>例2：</p>\n<pre><code class=\"prism language-javascript\">        <span class=\"token comment\">// 需求-2 从数组中返回偶数的元素</span>\n        <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 可以用箭头函数</span>\n        <span class=\"token comment\">// const result = arr.filter(item =&gt; {<!-- --></span>\n        <span class=\"token comment\">//     if(item % 2 === 0){<!-- --></span>\n        <span class=\"token comment\">//         return true</span>\n        <span class=\"token comment\">//     }else{<!-- --></span>\n        <span class=\"token comment\">//         return false</span>\n        <span class=\"token comment\">//     }</span>\n        <span class=\"token comment\">// })</span>\n        <span class=\"token comment\">// 还可以简写为</span>\n        <span class=\"token comment\">// const result = arr.filter(item =&gt; item % 2 === 0)</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"6_300\"></a>6.函数参数的默认值设置</h1>\n<p>ES6允许给函数参数赋初始值</p>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 具有默认值的参数，一般位置要靠后</span>\n            <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c\n        <span class=\"token punctuation\">}</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>可以与解构赋值一起使用</p>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">function</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>host<span class=\"token operator\">=</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n            port<span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span><span class=\"token punctuation\">,</span>\n            username<span class=\"token punctuation\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n            password<span class=\"token punctuation\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"7rest_321\"></a>7.rest参数</h1>\n<p>ES6引入rest参数，用于获取函数的实参，用来代替arguments</p>\n<pre><code class=\"prism language-javascript\">        <span class=\"token comment\">// ES5获取实参的方式</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">printStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span> <span class=\"token comment\">// arguments为一个对象</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printStudent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'LiMing'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'HanMeimei'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// ES6获取实参的方式</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">printFriend</span><span class=\"token punctuation\">(</span>friend1<span class=\"token punctuation\">,</span> friend2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// rest参数必须放在形参列表最后，否则会报错</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>friend1<span class=\"token punctuation\">)</span> \n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>friend2<span class=\"token punctuation\">)</span> \n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 得到一个数组，可以使用数组api</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printFriend</span><span class=\"token punctuation\">(</span><span class=\"token string\">'小猫'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小狗'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'兔子'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'鸭子'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 小猫</span>\n        <span class=\"token comment\">// 小狗</span>\n        <span class=\"token comment\">// ['兔子','鸭子']</span>\n</code></pre>\n<h1><a id=\"8_341\"></a>8.扩展运算符</h1>\n<p><code>...</code>能将「数组」转为逗号分隔的「参数序列」<br/> 注：虽然形式与rest参数类似，但是rest参数是用在函数定义时的形参位置，扩展运算符是用在函数实际调用时的实参位置</p>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">const</span> <span class=\"token constant\">STUDENTS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小芳'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">printStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">printStudent</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STUDENTS</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 参数为一个数组，数组内包含3个元素</span>\n        <span class=\"token function\">printStudent</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token constant\">STUDENTS</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 参数为3个元素</span>\n</code></pre>\n<p>应用场景：</p>\n<ol><li>数组的合并</li></ol>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">const</span> <span class=\"token constant\">STUDENTS1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小芳'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">const</span> <span class=\"token constant\">STUDENTS2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'小吴'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'小王'</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\">// es5写法</span>\n        <span class=\"token keyword\">const</span> <span class=\"token constant\">STUDENTS_ES5</span> <span class=\"token operator\">=</span> <span class=\"token constant\">STUDENTS1</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STUDENTS2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// es6写法</span>\n        <span class=\"token keyword\">const</span> <span class=\"token constant\">STUDENTS_ES6</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">STUDENTS1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">STUDENTS2</span><span class=\"token punctuation\">]</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'es5------'</span><span class=\"token punctuation\">,</span><span class=\"token constant\">STUDENTS_ES5</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'es6------'</span><span class=\"token punctuation\">,</span><span class=\"token constant\">STUDENTS_ES6</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ol start=\"2\"><li>数组的克隆</li></ol>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">const</span> <span class=\"token constant\">STUDENTS1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小芳'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">const</span> <span class=\"token constant\">PUPIL</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">STUDENTS1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 注意：如果数组内元素是引用类型，拷贝的是内存地址，为浅拷贝</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PUPIL----'</span><span class=\"token punctuation\">,</span><span class=\"token constant\">PUPIL</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ol start=\"3\"><li>将伪数组转为真正的数组</li></ol>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">const</span> divs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>divs<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 此处得到的divs实际是一个对象</span>\n\n        <span class=\"token keyword\">const</span> divsArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>divs<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 将其转为真正的数组，从而可以使用数组的api譬如filter、map</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>divsArr<span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"9Symbol_385\"></a>9.Symbol</h1>\n<p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。它是JavaScript语言的第7种数据类型，是一个类似字符串的数据类型</p>\n<h2><a id=\"Symbol_387\"></a>Symbol特点：</h2>\n<ol><li>Symbol的值是唯一的，用来解决命名冲突的问题</li><li>Symbol值不能与其他数据进行运算，也不能与自己进行运算，譬如+、-、*、/、比较运算</li><li>Symbol定义的对象属性不能使用for…in遍历，但是可以使用Reflect.ownKeys来获取对象的所有键名</li></ol>\n<h2><a id=\"Symbol_391\"></a>创建Symbol：</h2>\n<ol><li>通过<code>let s2 = Symbol('张三')</code> 的方式创建Symbol，'张三’作为Symbol描述，作用相当于注释，这种方式创建的Symbol，即使传入的描述一致，但实际返回的值是不同的</li></ol>\n<pre><code class=\"prism language-javascript\">        <span class=\"token comment\">// 创建Symbol</span>\n        <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">typeof</span> s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Symbol() \"symbol\"</span>\n\n        <span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '张三'作为Symbol描述，作用相当于注释</span>\n        <span class=\"token keyword\">let</span> s3 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 即使传入的描述一致，但实际返回的值是不同的</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s2 <span class=\"token operator\">===</span> s3<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n</code></pre>\n<ol start=\"2\"><li>通过<code>Symbol.for()</code>创建Symbol，这种方式创建Symbol，传入的描述一致，实际返回的值也一致，可以得到唯一的Symbol值</li></ol>\n<pre><code class=\"prism language-javascript\">        <span class=\"token comment\">// Symbol.for创建Symbol</span>\n        <span class=\"token keyword\">let</span> s4 <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> s5 <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s4 <span class=\"token operator\">===</span> s5<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre>\n<h2><a id=\"Symbol_409\"></a>Symbol使用场景</h2>\n<ol><li>给对象添加属性和方法。由于Symbol值具有唯一性，所以可以很安全地把属性和方法加入对象中，如下所示</li></ol>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> game <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n            up<span class=\"token punctuation\">:</span> <span class=\"token string\">'upp'</span><span class=\"token punctuation\">,</span>\n            down<span class=\"token punctuation\">:</span> <span class=\"token string\">'doown'</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">let</span> methods <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n            up<span class=\"token punctuation\">:</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            down<span class=\"token punctuation\">:</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 添加方法</span>\n        game<span class=\"token punctuation\">[</span>methods<span class=\"token punctuation\">.</span>up<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'up up up'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        game<span class=\"token punctuation\">[</span>methods<span class=\"token punctuation\">.</span>down<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'down down down'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'game----'</span><span class=\"token punctuation\">,</span> game<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 调用</span>\n        game<span class=\"token punctuation\">[</span>methods<span class=\"token punctuation\">.</span>up<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> youxi <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'狼人杀'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'say'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 此处不能直接写 Symbol('say'): function(){...},因为Symbol('say')是动态的，和上面固定的'name'不一样</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发言'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"Symbol_444\"></a>Symbol内置值</h2>\n<p>ES6除了定义自己使用的Symbol值以外，还提供了11个内置的Symbol值，指向语言内部使用的方法,比如</p>\n<ol><li>Symbol.hasInstance<br/> 当其他对象使用<code>instanceof</code>运算符，判断是否为该对象的实例时，会调用这个方法</li></ol>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">static</span> <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>hasInstance<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'param----'</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'检测类型'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// param---- {}</span>\n        <span class=\"token comment\">// 检测类型</span>\n        <span class=\"token comment\">// false</span>\n</code></pre>\n<ol start=\"2\"><li>Symbol.isConcatSpreadable<br/> 对象的Symbol.isConcatSpreadable属性等于一个bool值，表示该对象用于Array.prototype()时，是否可以展开</li></ol>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n        arr2<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>isConcatSpreadable<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// arr2不可展开</span>\n        <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,3,[4,5,6]]</span>\n</code></pre>\n<ol start=\"3\"><li>Symbol.unscopables<br/> 该对象指定了使用with关键字时，哪些属性会被with环境排除</li><li>Symbol.match<br/> 当执行<code>str.match(myObject)</code>时，如果该属性存在，会调用它，返回该方法的返回值</li><li>Symbol.replace<br/> 当该对象被<code>str.replace(myObject)</code>方法调用时，会返回该方法的返回值</li><li>Symbol.search<br/> 当该对象被<code>str.search(myObject)</code>方法调用时，会返回该方法的返回值</li><li>Symbol.split<br/> 当该对象被<code>str.split(myObject)</code>方法调用时，会返回该方法的返回值</li><li>Symbol.iterator<br/> 对象进行<code>for ... of</code>循环时，会调用Symbol.iterator方法，返回该对象的默认遍历器</li><li>Symbol.toPrimitive<br/> 该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值</li><li>Symbol.toStringTag<br/> 在该对象上调用toString方法时，返回该方法的返回值</li><li>Symbol.species<br/> 创建衍生对象时，会使用该属性</li></ol>\n<h1><a id=\"10_491\"></a>10.迭代器</h1>\n<p>迭代器（iterator）是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署iterator接口，就可以完成遍历操作</p>\n<p>ES6创造了一种新的遍历命令<code>for...of</code>循环，iterator接口主要供<code>for...of</code>消费<br/> <em>注：<code>for...of</code>遍历的是键值，<code>for...in</code>遍历的是键名<br/> <code>for...of</code>不能对属性值进行修改，<code>forEach()</code>可以</em></p>\n<p>原生具备iterator接口的数据（可用<code>for...of</code>遍历）</p>\n<ul><li>Array</li><li>Arguments</li><li>Set</li><li>Map</li><li>String</li><li>TypedArray</li><li>NodeList</li></ul>\n<h2><a id=\"_508\"></a>工作原理：</h2>\n<ol><li>创建一个指针对象，指向当前数据结构的起始位置</li><li>第一次调用对象的next方法，指针自动指向数据结构的第一个成员</li><li>接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员</li><li>每调用next方法返回一个包含value和done属性的对象，<mark>done属性表示遍历是否结束</mark></li></ol>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">const</span> food <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'鱼香肉丝'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'糖醋里脊'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'酸菜鱼'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> food<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> food<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: \"鱼香肉丝\", done: false}</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: \"糖醋里脊\", done: false}</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: \"酸菜鱼\", done: false}</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: undefined, done: true} true 表示遍历已经结束</span>\n</code></pre>\n<p><em>注：需要自定义遍历数据的时候，要想到迭代器</em></p>\n<h2><a id=\"_529\"></a>迭代器应用-自定义遍历数据(即自己手动实现一个迭代器)</h2>\n<pre><code class=\"prism language-javascript\">        <span class=\"token comment\">// 声明一个对象</span>\n        <span class=\"token keyword\">const</span> school <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'三中'</span><span class=\"token punctuation\">,</span>\n            students<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">'LiMing'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'HanMeimei'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'WangFang'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 声明一个索引变量</span>\n                <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n                    next<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>students<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">// if(index &lt; 3){<!-- --></span>\n                            <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>students<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n                            <span class=\"token comment\">// 下标自增</span>\n                            index<span class=\"token operator\">++</span>\n                            <span class=\"token comment\">// 返回结果</span>\n                            <span class=\"token keyword\">return</span> result\n                        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>value<span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 遍历这个对象</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> school<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"11_564\"></a>11.生成器</h1>\n<p>生成器本身是一个特殊的函数，生成器函数是ES6提供的一种异步编程解决方案，语法行为与传统函数不同</p>\n<ul><li>执行生成器函数，返回的是一个迭代器对象，通过<code>iterator.next()</code>调用执行函数内语句</li></ul>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello generator'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回的是一个迭代器对象</span>\n        <span class=\"token comment\">// console.log(iterator)</span>\n        <span class=\"token comment\">// 通过.next()调用执行函数内语句</span>\n        iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hello generator</span>\n</code></pre>\n<ul><li><code>yield</code>是函数代码的分隔符，结合调用<code>iterator.next()</code>方法，实现函数gen1的语句的分段执行</li></ul>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">gen1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--- 1 ---'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token string\">'耳朵'</span> <span class=\"token comment\">// 函数代码的分隔符</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--- 2 ---'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token string\">'尾巴'</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--- 3 ---'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">let</span> iterator1 <span class=\"token operator\">=</span> <span class=\"token function\">gen1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        iterator1<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// --- 1 ---</span>\n        iterator1<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// --- 2 ---</span>\n        iterator1<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// --- 3 ---</span>\n        <span class=\"token comment\">// 通过调用.next()方法，实现函数gen1的语句的分段执行</span>\n</code></pre>\n<ul><li>使用<code>for...of</code>遍历函数执行后返回的迭代器对象，每一次遍历的item为yield后的表达式或者自变量的值</li></ul>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">gen1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">yield</span> <span class=\"token string\">'耳朵'</span> <span class=\"token comment\">// 函数代码的分隔符</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token string\">'尾巴'</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 遍历，每一次遍历的item为yield后的表达式或者自变量的值</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> <span class=\"token function\">gen1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 执行结果：</span>\n        <span class=\"token comment\">// 耳朵</span>\n        <span class=\"token comment\">// 尾巴</span>\n\n        <span class=\"token comment\">// 注：next调用和for...of调用同时存在，只会支持最先的一个</span>\n</code></pre>\n<ul><li>生成器函数的参数传递</li></ul>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'aaa'</span>\n            <span class=\"token keyword\">let</span> one <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token number\">111</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'bbb'</span>\n\n            <span class=\"token keyword\">let</span> two <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token number\">222</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>two<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'ccc'</span>\n            \n            <span class=\"token keyword\">let</span> three <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token number\">333</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>three<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 执行生成器函数获取迭代器对象</span>\n        <span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">)</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: 111, done: false}</span>\n        <span class=\"token comment\">// next方法可以传入实参，传入的实参会作为上一个yield后返回的结果</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bbb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: 222, done: false}</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ccc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: 333, done: false}</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ddd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: undefined, done: true}</span>\n</code></pre>\n<ul><li>生成器函数实例1:<br/> 1s后控制台输出111 --&gt; 2s后控制台输出222 --&gt; 3s后控制台输出333 ==&gt; 总计耗时6s</li></ul>\n<pre><code class=\"prism language-javascript\">       <span class=\"token comment\">// 异步编程，如文件操作、网络请求、数据库操作</span>\n        <span class=\"token comment\">// 1s后控制台输出111 --&gt; 2s后控制台输出222 --&gt; 3s后控制台输出333  ==&gt; 总计耗时6s</span>\n\n        <span class=\"token comment\">// 用生成器函数实现</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">one</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span>\n                iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">function</span> <span class=\"token function\">two</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">222</span><span class=\"token punctuation\">)</span>\n                iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">function</span> <span class=\"token function\">three</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">333</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">yield</span> <span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token function\">two</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token function\">three</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n\n        <span class=\"token comment\">// 以下为回调地域做法</span>\n        <span class=\"token comment\">// setTimeout(()=&gt;{<!-- --></span>\n        <span class=\"token comment\">//     console.log(111)</span>\n        <span class=\"token comment\">//     setTimeout(()=&gt;{<!-- --></span>\n        <span class=\"token comment\">//         console.log(222)</span>\n        <span class=\"token comment\">//         setTimeout(()=&gt;{<!-- --></span>\n        <span class=\"token comment\">//             console.log(333)</span>\n        <span class=\"token comment\">//         }, 3000)</span>\n        <span class=\"token comment\">//     }, 2000)</span>\n        <span class=\"token comment\">// }, 1000)</span>\n</code></pre>\n<ul><li>生成器函数实例2:<br/> 模拟获取 用户数据 --&gt; 订单数据 --&gt; 商品数据</li></ul>\n<pre><code class=\"prism language-javascript\">        <span class=\"token comment\">// 模拟获取 用户数据 --&gt; 订单数据 --&gt; 商品数据</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token string\">'用户数据'</span>\n                iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 相当于把得到的数据，传回users</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">function</span> <span class=\"token function\">getOrders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token string\">'订单数据'</span>\n                iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">function</span> <span class=\"token function\">getGoods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token string\">'商品数据'</span>\n                iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 定义生成器函数</span>\n        <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">gen</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">let</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 用户数据</span>\n\n            <span class=\"token keyword\">let</span> orders <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">getOrders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>orders<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 订单数据</span>\n\n            <span class=\"token keyword\">let</span> goods <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">getGoods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>goods<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 商品数据</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 调用生成器函数，获取迭代器对象</span>\n        <span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"12Promise_723\"></a>12.Promise</h1>\n<p>Promise是ES6引入的异步编程的新解决方案。语法上Promise是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果</p>\n<ol><li>Promise构造函数：Promise(excutor){}</li><li>Promise.prototype.then方法</li><li>Promise.prototype.catch方法</li></ol>\n<h2><a id=\"_728\"></a>基本使用</h2>\n<pre><code class=\"prism language-javascript\">        <span class=\"token comment\">// 实例化Promise对象</span>\n        <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token string\">'数据库中的用户数据'</span>\n                <span class=\"token comment\">// resolve(data)</span>\n                <span class=\"token keyword\">let</span> err <span class=\"token operator\">=</span> <span class=\"token string\">'数据读取失败'</span>\n                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'enter success'</span><span class=\"token punctuation\">)</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>err<span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'enter failed'</span><span class=\"token punctuation\">)</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"Promise_748\"></a>Promise封装读取文件</h2>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 1.引入fs模块 fileSystem 文件系统</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 2.调用方法读取文件</span>\n<span class=\"token comment\">// fs.readFile('./resource/file.md', (err, data)=&gt;{ // data是一个buffer,用来存储2进制文件，用法跟数组类似</span>\n<span class=\"token comment\">//     // 如果失败，抛出错误</span>\n<span class=\"token comment\">//     if(err) throw err</span>\n<span class=\"token comment\">//     // 如果成功，读取文件</span>\n<span class=\"token comment\">//     console.log(data.toString())</span>\n<span class=\"token comment\">// })</span>\n\n<span class=\"token comment\">// 3.使用promise封装</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./resource/file.md'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"Promiseajax_777\"></a>Promise封装ajax</h2>\n<pre><code class=\"prism language-javascript\">        <span class=\"token comment\">// 接口地址：https://api.apiopen.top/getJoke</span>\n        <span class=\"token comment\">// 原生ajax发送请求</span>\n        <span class=\"token comment\">// // 1.创建对象</span>\n        <span class=\"token comment\">// const xhr = new XMLHttpRequest()</span>\n\n        <span class=\"token comment\">// // 2.初始化</span>\n        <span class=\"token comment\">// xhr.open('GET', 'https://api.apiopen.top/getJoke')</span>\n\n        <span class=\"token comment\">// // 3.发送</span>\n        <span class=\"token comment\">// xhr.send()</span>\n\n        <span class=\"token comment\">// // 4.绑定事件</span>\n        <span class=\"token comment\">// xhr.onreadystatechange = function(){<!-- --></span>\n        <span class=\"token comment\">//     // 判断阶段</span>\n        <span class=\"token comment\">//     if(xhr.readyState === 4 ){<!-- --></span>\n        <span class=\"token comment\">//         // 判断响应状态码</span>\n        <span class=\"token comment\">//         if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300){<!-- --></span>\n        <span class=\"token comment\">//             // 如果状态码为成功，打印返回结果</span>\n        <span class=\"token comment\">//             console.log(xhr.response)</span>\n        <span class=\"token comment\">//         }else{<!-- --></span>\n        <span class=\"token comment\">//             // 如果失败</span>\n        <span class=\"token comment\">//             console.error(xhr.status)</span>\n        <span class=\"token comment\">//         }</span>\n        <span class=\"token comment\">//     }</span>\n        <span class=\"token comment\">// }</span>\n\n\n        <span class=\"token comment\">// promise封装发送ajax请求</span>\n        <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://api.apiopen.top/getJoke'</span><span class=\"token punctuation\">)</span>\n            xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&gt;=</span><span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"Promiseprototypethen_827\"></a>Promise.prototype.then方法</h2>\n<p>then方法的返回结果，依然是一个promise对象，其状态的成功或失败，由then里的回调函数的执行结果决定</p>\n<ul><li>如果回调函数中返回的结果是非promise类型的属性，状态为成功，且return的结果就是该promise成功后resolve的值<br/> <em>注: 如果没有return，则默认返回undefined，所以状态依然为成功</em></li><li>如果返回的结果是promise对象，则该promise对象的状态就是then返回的promise对象的状态</li><li>如果是抛出一个值（如一个错误），则状态为失败</li></ul>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'用户数据'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// reject('出错啦')</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// p执行resolve后，状态为成功，执行第一个函数</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value <span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 1.返回非promise对象的情况</span>\n            <span class=\"token comment\">// return 233 // 233</span>\n            <span class=\"token comment\">// 2.返回promise对象</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 状态为成功，值=ok</span>\n                <span class=\"token comment\">// reject('error!!') // 状态为失败</span>\n\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 3.抛出错误</span>\n            <span class=\"token comment\">// throw new Error('error!!!')</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// p执行reject后，状态为失败，执行第二个函数</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// then方法的返回结果，依然是一个promise对象，其状态的成功或失败，由then里的回调函数的执行结果决定</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>then方法的这个特性，决定了then方法可以进行链式调用</p>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'用户数据'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// reject('出错啦')</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 链式调用</span>\n        p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"_876\"></a>通过链式调用实现按顺序读取文件</h3>\n<pre><code class=\"prism language-javascript\">\t<span class=\"token comment\">// 1.引入fs模块 fileSystem 文件系统</span>\n\t<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token comment\">// 使用传统方式实现 读取文件1 =&gt; 读取文件2 =&gt; 读取文件3</span>\n\t<span class=\"token comment\">// fs.readFile('./resource/file1.md', (err, data)=&gt;{<!-- --></span>\n\t<span class=\"token comment\">//     let data1 = data.toString()</span>\n\t<span class=\"token comment\">//     fs.readFile('./resource/file2.md', (err,data)=&gt;{<!-- --></span>\n\t<span class=\"token comment\">//         let data2 = data.toString()</span>\n\t<span class=\"token comment\">//         fs.readFile('./resource/file3.md', (err,data)=&gt;{<!-- --></span>\n\t<span class=\"token comment\">//             let data3 = data.toString()</span>\n\t<span class=\"token comment\">//             let data_all = {data1,data2,data3}</span>\n\t<span class=\"token comment\">//             console.log(data_all)</span>\n\t<span class=\"token comment\">//         })</span>\n\t<span class=\"token comment\">//     })</span>\n\t<span class=\"token comment\">// })</span>\n\t\n\t<span class=\"token comment\">// 使用promise方式实现 读取文件1 =&gt; 读取文件2 =&gt; 读取文件3</span>\n\t<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n\t    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./resource/file1.md'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n\t        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\n\tp<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\t    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n\t        fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./resource/file2.md'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n\t            <span class=\"token keyword\">let</span> data_all <span class=\"token operator\">=</span>  <span class=\"token punctuation\">{<!-- --></span>\n\t                data1<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t                data2<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t            <span class=\"token punctuation\">}</span>\n\t            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data_all<span class=\"token punctuation\">)</span>\n\t        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n\t    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span>reject<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n\t        fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./resource/file3.md'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n\t            value<span class=\"token punctuation\">.</span>data3 <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\t        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n\t    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\t    <span class=\"token comment\">//  { data1: '# 这是文件1', data2: '# 这是文件2', data3: '# 这是文件3' }</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"Promisecatch_923\"></a>Promise对象catch方法</h2>\n<p>用于指定promise对象失败的回调</p>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span>reject<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 设置p对象的状态为失败</span>\n                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opps error'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// p.then((value)=&gt;{}, (reason)=&gt;{<!-- --></span>\n        <span class=\"token comment\">//     console.error(reason)</span>\n        <span class=\"token comment\">// })</span>\n        \n        <span class=\"token comment\">// 相当于then里面的第二个回调函数</span>\n        p<span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"13set_942\"></a>13.set（集合）</h1>\n<p>ES6提供了新的数据结构set(集合)，本质上是一个对象。它类似于数组，但成员的值都是唯一的，集合实现了iterator接口，所以可以使用「扩展运算符」和<code>for...of</code>进行遍历<br/> 集合的属性和方法：</p>\n<ul><li>size，返回集合的元素个数</li><li>add，增加一个新元素，返回当前集合</li><li>delete，删除元素，返回Boolean值</li><li>has，检测集合中是否包含某个元素，返回Boolean值</li></ul>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'风声'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'雨声'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'读书声'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'风声'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 可以接受可迭代数据，一般传入数组</span>\n        <span class=\"token comment\">// '风声','雨声','读书声'</span>\n\n        <span class=\"token keyword\">let</span> size <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>size <span class=\"token comment\">// 查看元素个数</span>\n        <span class=\"token keyword\">let</span> has <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'读书声'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 检测是否含该元素 true</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'水声'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 添加元素</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'读书声'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 删除元素</span>\n        <span class=\"token keyword\">let</span> has2 <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'读书声'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 检测是否含该元素 false</span>\n        \n        <span class=\"token comment\">// 遍历集合</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 清空集合</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> has<span class=\"token punctuation\">,</span>has2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> s<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"set_967\"></a>set的应用</h2>\n<h3><a id=\"_968\"></a>数组去重</h3>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\">// 数组去重</span>\n        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3, 4, 5]</span>\n</code></pre>\n<h3><a id=\"_975\"></a>求交集</h3>\n<pre><code class=\"prism language-javascript\">        \n        <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\">// 求交集</span>\n        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 对arr去重并进行遍历</span>\n            <span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 将arr2变为元素不重复的集合</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 如果元素存在s2中</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [4, 5]</span>\n\n        <span class=\"token comment\">// 简化写法</span>\n        <span class=\"token keyword\">let</span> result2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"_997\"></a>求并集</h3>\n<pre><code class=\"prism language-javascript\">\n        <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\">// 求并集：连接两个数组 =&gt; 转为元素不重复的集合 =&gt; 转为数组</span>\n        <span class=\"token keyword\">let</span> union <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>union<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// [1, 2, 3, 4, 5, 6]</span>\n        \n</code></pre>\n<h3><a id=\"_1009\"></a>求差集</h3>\n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\">// 求差集-arr对arr2求差集，即求arr里面有但是arr2里没有的元素，相当于求交集的逆运算</span>\n        <span class=\"token keyword\">let</span> diff <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3]</span>\n</code></pre>\n<h1><a id=\"14Map_1018\"></a>14.Map</h1>\n<p>ES6提供了Map数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当做键。Map也实现了iterator接口，所以可以使用「扩展运算符」和<code>for...of</code>进行遍历<br/> Map的属性和方法：</p>\n<ul><li>size，返回Map的元素个数</li><li>set，增加一个新元素，返回当前Map</li><li>get，返回键名对象的键值</li><li>has，检测Map中是否包含某个元素，返回Boolean值</li><li>clear，清空集合，返回undefined</li></ul>\n<pre><code class=\"prism language-javascript\">        <span class=\"token comment\">// 声明Map</span>\n        <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 添加元素</span>\n        m<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'LiMing'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 键名，键值</span>\n        m<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tell'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I am LiMing '</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> friend <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n            school<span class=\"token punctuation\">:</span> <span class=\"token string\">'三中'</span>\n        <span class=\"token punctuation\">}</span>\n        m<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>friend<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'小吴'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小王'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小芳'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 删除元素</span>\n        m<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tell'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 获取元素</span>\n        <span class=\"token keyword\">let</span> friends <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>friend<span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>friends<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 获取元素个数</span>\n        <span class=\"token keyword\">let</span> size <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>size\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 遍历Map</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'item---'</span><span class=\"token punctuation\">,</span>item<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 每一个item都是一个数组，第一个元素为键，第二个元素为值</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">// 清空Map</span>\n        m<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> m<span class=\"token punctuation\">)</span>\n        \n</code></pre>\n<h1><a id=\"class_1063\"></a>class</h1>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}