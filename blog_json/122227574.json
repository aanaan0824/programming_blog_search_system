{"blogid": "122227574", "writerAge": "码龄5年", "writerBlogNum": "104", "writerCollect": "1229", "writerComment": "120", "writerFan": "527", "writerGrade": "4级", "writerIntegral": "984", "writerName": "wujiangzhu_xjtu", "writerProfileAdress": "writer_image\\profile_122227574.jpg", "writerRankTotal": "19287", "writerRankWeekly": "13362", "writerThumb": "227", "writerVisitNum": "93339", "blog_read_count": "3607", "blog_time": "于 2021-12-30 00:48:53 发布", "blog_title": "Apollo control模块纵向控制原理及核心代码逐行解析", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>前言</h1>\n<p>2021/12/30</p>\n<p>前段时间一直在看Apollo的控制代码，因为工作较忙，只能抽时间整理下代码笔记，可能稍显粗糙，部分图片手绘，作为日后调试之参照。以后有时间再优化排版，再把涉及到的其他概念补上。<span style=\"background-color:#ffd900;\">看完这篇文章，你会对apollo纵向控制有一个整体的概念。</span></p>\n<h1>1.纵向控制原理框图</h1>\n<p><img alt=\"\" height=\"1200\" src=\"image\\1cc7a5db79584ab2b84180c1ff1c6576.png\" width=\"1200\"/></p>\n<h1>2.纵向控制关键代码逐行解析</h1>\n<p>纵向控制主要看纵向控制器LonController类的实现，本节将对</p>\n<p>apollo/modules/control/controller/lon_controller.h</p>\n<p>apollo/modules/control/controller/lon_controller.cc</p>\n<p>两个源文件代码进行逐行解析，可以结合代码和上述框图一起看</p>\n<h2>2.1 lon_controller.h</h2>\n<p>纵向控制器LonController类的声明</p>\n<pre><code class=\"language-cpp\">//LonController纵向控制器类定义\n#pragma once\n\n#include &lt;memory&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\n#include \"modules/common/configs/proto/vehicle_config.pb.h\"\n#include \"modules/common/filters/digital_filter.h\"\n#include \"modules/common/filters/digital_filter_coefficients.h\"\n#include \"modules/control/common/interpolation_2d.h\"\n#include \"modules/control/common/leadlag_controller.h\"\n#include \"modules/control/common/pid_controller.h\"\n#include \"modules/control/common/trajectory_analyzer.h\"\n#include \"modules/control/controller/controller.h\"\n\n//LonController类在apollo::control命名空间下定义\nnamespace apollo {\nnamespace control {\n\n//LonController类，纵向控制器, 来计算 brake/throttle 值.\n//实际是继承基类Controller类，Controller类也有必要看一下\n//命名规律，类单词首字母大写，实际对象都小写\nclass LonController : public Controller {\n public:\n  //类构造函数\n  LonController();\n\n  //类析构函数\n  virtual ~LonController();\n\n  //Init()函数初始化纵向控制器，\n  //参数：injector车辆当前状态信息，将其读取到LonController类成员变量injector_里\n  //参数：control_conf控制配置信息，将其读取到LonController类成员变量control_conf_里\n  common::Status Init(std::shared_ptr&lt;DependencyInjector&gt; injector,\n                      const ControlConf *control_conf) override;\n\n  //计算 刹车/油门值基于当前车辆的状态和目标轨迹\n  //参数：车辆定位信息 指针localization\n  //参数：chassis车辆底盘反馈状态信息 指针chassis\n  //参数：规划发布的轨迹信息 指针trajectory\n  //参数：控制指令 指针cmd，实际上是计算出的控制指令往cmd里填充\n  //返回计算状态码\n  common::Status ComputeControlCommand(\n      const localization::LocalizationEstimate *localization,\n      const canbus::Chassis *chassis, const planning::ADCTrajectory *trajectory,\n      control::ControlCommand *cmd) override;\n\n  //复位纵向控制器。返回复位的状态码\n  common::Status Reset() override;\n\n  /**\n   * @brief stop longitudinal controller\n   */\n  //停止纵向控制器，override说明在基类中Stop()接口已经被声明为虚函数，调用的是派生类里的定义\n  void Stop() override;\n\n  //纵向控制器的名字\n  //返回纵向控制器的名字字符串\n  //override说明在基类中接口已经被声明为虚函数，调用的是派生类里的定义\n  std::string Name() const override;\n\n protected:\n  //计算纵向误差函数\n  //参数：轨迹信息指针trajectory\n  //参数：预览时间preview_time\n  //参数：控制周期ts\n  //参数：调试信息指针debug用来存放计算的纵向误差信息\n  //该函数在control_component.cc中被调用\n  void ComputeLongitudinalErrors(const TrajectoryAnalyzer *trajectory,\n                                 const double preview_time, const double ts,\n                                 SimpleLongitudinalDebug *debug);\n\n  //根据规划发布的轨迹msg寻找轨迹点上接下来的第一个停车点\n  //停车点信息存到debug里，这个参数又是用来装结果的\n  void GetPathRemain(SimpleLongitudinalDebug *debug);\n\n private:\n  //设置Pitch车辆俯仰角\n  //参数：lon_controller_conf是纵向控制器配置类对象，该类由modules/control/proto/.proto文件生成\n  //从该对象中读取截至频率，控制周期等参数来设置pitch角滤波器\n  //pitch角用来进行车辆的坡道补偿，默认坡道补偿是关闭的\n  void SetDigitalFilterPitchAngle(const LonControllerConf &amp;lon_controller_conf);\n\n  //加载控制标定表函数\n  //参数：lon_controller_conf是纵向控制器配置类对象，该类由modules/control/proto/.proto文件生成\n  //从纵向控制器配置对象中读取车速-加速度-控制百分数标定表\n  void LoadControlCalibrationTable(\n      const LonControllerConf &amp;lon_controller_conf);\n\n  //设置数字滤波器函数\n  //参数：控制周期ts\n  //参数：截至频率cutoff_freq\n  //参数：数字滤波器类对象digital_filter，前面两项参数就是为了设置这个对象\n  void SetDigitalFilter(double ts, double cutoff_freq,\n                        common::DigitalFilter *digital_filter);\n\n  //关闭日志文件函数\n  void CloseLogFile();\n\n  //定义成员常量指针localization_，存放的是定位来的信息，初始化为空指针\n  const localization::LocalizationEstimate *localization_ = nullptr;\n  //定义成员常量指针chassis_，存放的是来自canbus的车辆状态反馈信息，初始化为空指针\n  const canbus::Chassis *chassis_ = nullptr;\n\n  //定义成员二维插值点指针control_interpolation_，实际就是存放标定表及插值功能\n  std::unique_ptr&lt;Interpolation2D&gt; control_interpolation_;\n  //定义常量轨迹msg类指针trajectory_message_，是用来存放规划模块发来的轨迹消息\n  const planning::ADCTrajectory *trajectory_message_ = nullptr;\n  //定义轨迹分析者类对象trajectory_analyzer_，用来实现对各种轨迹信息的解析\n  std::unique_ptr&lt;TrajectoryAnalyzer&gt; trajectory_analyzer_;\n\n  //定义成员name_，就是控制器的名称\n  std::string name_;\n  //定义成员controller_initialized_，实际上就是表明控制器是否被初始化成功\n  bool controller_initialized_ = false;\n\n  //定义成员上一时刻的加速度\n  double previous_acceleration_ = 0.0;\n  //定义成员上一时刻的参考加速度\n  double previous_acceleration_reference_ = 0.0;\n\n  //定义PID控制器类对象speed_pid_controller_，纵向控制器里的速度控制器\n  PIDController speed_pid_controller_;\n  //定义PID控制器类对象station_pid_controller_，纵向控制器里的位置控制器\n  PIDController station_pid_controller_;\n\n  //纵向上leadlag控制器默认关闭\n  //定义超前滞后控制器类对象 speed_leadlag_controller_，用于速度的控制\n  LeadlagController speed_leadlag_controller_;\n  //定义超前滞后控制器类对象 station_leadlag_controller_，用于位置的控制\n  LeadlagController station_leadlag_controller_;\n\n  //定义文件类对象 speed_log_file_用于存放纵向上的日志信息，默认也关闭csv日志\n  FILE *speed_log_file_ = nullptr;\n\n  //定义数字滤波器类对象digital_filter_pitch_angle_，用于对俯仰角pitch进行滤波\n  common::DigitalFilter digital_filter_pitch_angle_;\n  //定义常量成员控制配置类对象control_conf_指针，用于存放配置文件中加载进来的控制配置\n  const ControlConf *control_conf_ = nullptr;\n\n  // 定义成员车辆参数类对象，用于存放车辆的实际尺寸参数等\n  common::VehicleParam vehicle_param_;\n  //定义成员车辆状态信息类对象injector_,用于存放当前车辆的状态信息\n  std::shared_ptr&lt;DependencyInjector&gt; injector_;\n  \n  //可以看到所有类内要用到的数据基本都在类内再定义了个相对应的数据成员，比如给定位模块来的信息又起了个别名localization_，有利于各个模块间解耦\n  //类内所有操作都是假设这些参数已知的情况下，然后只要把这些别名接口与外部模块对齐即可\n};\n}  // namespace control\n}  // namespace apollo\n\n</code></pre>\n<h2>2.2 lon_controller.cc</h2>\n<p>纵向控制器LonController类的具体实现，是apollo纵向控制的核心代码</p>\n<pre><code class=\"language-cpp\">//modules/control/controller/lon_controller.cc\n//Line29-36\n\t//代码定义再apollo::control::命名空间下\n\tnamespace apollo {\n\tnamespace control {\n\t\n\t//纵向控制用到了apollo/common的故障码，状态码，轨迹点，车辆状态信息类\n\t//还用到了apollo/cyber/Time类\n\tusing apollo::common::ErrorCode;\n\tusing apollo::common::Status;\n\tusing apollo::common::TrajectoryPoint;\n\tusing apollo::common::VehicleStateProvider;\n\tusing apollo::cyber::Time;\n\t\n//Line38\n\t//定义常量重力加速度 9.8\n\tconstexpr double GRA_ACC = 9.8;\n\t\n//Line40-80\n\t//纵向控制器LonController类的构造函数\n\tLonController::LonController()\n\t    : name_(ControlConf_ControllerType_Name(ControlConf::LON_CONTROLLER)) {\n\t  if (FLAGS_enable_csv_debug) { //是否打开csv debug的功能，默认false，见modules/control/common/control_gflags.cc\n\t  \t\t\t\t //DEFINE_bool(enable_csv_debug, false\n\t  \t\t\t\t //如果打开就是创建一个以时间命名的csv文件，写入表头用来存放各种纵向的debug信息\n\t  \t\t\t\t //默认关闭，不赘述\n\t    time_t rawtime;\n\t    char name_buffer[80];\n\t    std::time(&amp;rawtime);\n\t    std::tm time_tm;\n\t    localtime_r(&amp;rawtime, &amp;time_tm);\n\t    strftime(name_buffer, 80, \"/tmp/speed_log__%F_%H%M%S.csv\", &amp;time_tm);\n\t    speed_log_file_ = fopen(name_buffer, \"w\");\n\t    if (speed_log_file_ == nullptr) {\n\t      AERROR &lt;&lt; \"Fail to open file:\" &lt;&lt; name_buffer;\n\t      FLAGS_enable_csv_debug = false;\n\t    }\n\t    if (speed_log_file_ != nullptr) {\n\t      fprintf(speed_log_file_,\n\t\t      \"station_reference,\"\n\t\t      \"station_error,\"\n\t\t      \"station_error_limited,\"\n\t\t      \"preview_station_error,\"\n\t\t      \"speed_reference,\"\n\t\t      \"speed_error,\"\n\t\t      \"speed_error_limited,\"\n\t\t      \"preview_speed_reference,\"\n\t\t      \"preview_speed_error,\"\n\t\t      \"preview_acceleration_reference,\"\n\t\t      \"acceleration_cmd_closeloop,\"\n\t\t      \"acceleration_cmd,\"\n\t\t      \"acceleration_lookup,\"\n\t\t      \"speed_lookup,\"\n\t\t      \"calibration_value,\"\n\t\t      \"throttle_cmd,\"\n\t\t      \"brake_cmd,\"\n\t\t      \"is_full_stop,\"\n\t\t      \"\\r\\n\");\n\n\t      fflush(speed_log_file_);\n\t    }\n\t    AINFO &lt;&lt; name_ &lt;&lt; \" used.\";\n\t  }\n\t}\n\t\n\t\n//Line82-92\n\t//关闭log日志文件函数主要fclose实现，本身enable_csv_debug就没打开，略过\n\tvoid LonController::CloseLogFile() {\n\t  if (FLAGS_enable_csv_debug) {\n\t    if (speed_log_file_ != nullptr) {\n\t      fclose(speed_log_file_);\n\t      speed_log_file_ = nullptr;\n\t    }\n\t  }\n\t}\n\t//Stop()函数调用的就是上面的关闭日志文件函数\n\tvoid LonController::Stop() { CloseLogFile(); }\n\t//LonController类的析构函数调用的就是上面的关闭日志文件函数\n\tLonController::~LonController() { CloseLogFile(); }\n\t\n//Line94-129\n\t//纵向控制器的初始化函数\n\t//输入参数是DependencyInjector类对象指针injector主要是用来获取车辆状态信息的\n\t//control_conf控制的配置类对象指针\n\t//ControlConf是由control模块下的proto文件control_conf.proto生成的message类\n\tStatus LonController::Init(std::shared_ptr&lt;DependencyInjector&gt; injector,\n\t\t                   const ControlConf *control_conf) {\n\t  //将传进来的参数赋给LonController类数据成员control_conf_\n\t  control_conf_ = control_conf;   \n\t  //如果加载的配置为空，则直接返回错误信息\n\t  if (control_conf_ == nullptr) {\n\t    //控制器初始化标志位\n\t    controller_initialized_ = false;\n\t    AERROR &lt;&lt; \"get_longitudinal_param() nullptr\";\n\t    return Status(ErrorCode::CONTROL_INIT_ERROR,\n\t\t          \"Failed to load LonController conf\");\n\t  }\n\t  //将传进来的参数车辆状态信息injector赋给LonController类数据成员injector_\n\t  injector_ = injector;\n\t  //纵向控制器的配置加载，实际上读取的是modules/control/conf/control_conf.pb.txt下\n\t  //的lon_controller_conf里的内容\n\t  const LonControllerConf &amp;lon_controller_conf =\n\t      control_conf_-&gt;lon_controller_conf();\n\t  //从纵向控制器的配置里读取控制周期ts\n\t  double ts = lon_controller_conf.ts();\n\t  //是否打开超前滞后控制器从纵向控制器配置里读取到\n\t  //modules/control/conf/control_conf.pb.txt下lon_controller_conf里enable_reverse_leadlag_compensation\n\t  //默认false\n\t  bool enable_leadlag =\n\t      lon_controller_conf.enable_reverse_leadlag_compensation();\n\t  \n\t  //位置PID控制器的初始化从modules/control/conf/control_conf.pb.txt-&gt;lon_controller_conf-&gt;station_pid_conf读取\n\t  station_pid_controller_.Init(lon_controller_conf.station_pid_conf());\n\t  //速度控制器的初始化也是加载control_conf.pb.txt-&gt;lon_controller_conf里的相关参数\n\t  speed_pid_controller_.Init(lon_controller_conf.low_speed_pid_conf());\n\n\t  //如果打开超前滞后控制器，因为默认关闭，略过\n\t  if (enable_leadlag) {\n\t    station_leadlag_controller_.Init(\n\t\tlon_controller_conf.reverse_station_leadlag_conf(), ts);\n\t    speed_leadlag_controller_.Init(\n\t\tlon_controller_conf.reverse_speed_leadlag_conf(), ts);\n\t  }\n\t  //车辆的参数从VehicleConfigHelper类的成员函数GetConfig()加载\n\t  //参见VehicleConfigHelper.cc Line33可知 Init() { Init(FLAGS_vehicle_config_path); }\n\t  //vehicle_config_path在modules/common/configs/config_gflags.cc定义gflags理解成一个全局变量前面加Flags_可取出其值\n\t  //DEFINE_string(vehicle_config_path, \"/apollo/modules/common/data/vehicle_param.pb.txt\"这个就是车辆参数配置文件路径\n\t  vehicle_param_.CopyFrom( //从上述路径拷贝车辆参数配置到vehicle_param_(LonController类的数据成员)\n\t      common::VehicleConfigHelper::Instance()-&gt;GetConfig().vehicle_param());\n\n\t  //从modules/control/conf/control_conf.pb.txt-&gt;lon_controller_conf里加载数字滤波器的参数\n\t  //加载滤波器参数到LonController类的成员变量digital_filter_pitch_angle_\n\t  //这个滤波器是用于对pitch角(车辆的俯仰角)进行滤波，pitch角是用于对车辆控制时的坡道补偿，后面介绍\n\t  SetDigitalFilterPitchAngle(lon_controller_conf);\n\n\t  //从modules/control/conf/control_conf.pb.txt-&gt;lon_controller_conf里加载标定表(不同车速下，加速度到油门/制动标定表)\n\t  //加载的标定表放入control_interpolation_中\n\t  LoadControlCalibrationTable(lon_controller_conf);\n\t  //执行到这里，纵向控制器被初始化的标志位置为true，这个标志位也属于LonController类的数据成员\n\t  controller_initialized_ = true;\n\n\t  return Status::OK();\n\t}\n\n//Line131-154\n\t//SetDigitalFilterPitchAngle()函数就是上面Init函数末尾调用的设置数字滤波器的函数的具体定义\n\t//输入参数是纵向控制器的配置对象\n\tvoid LonController::SetDigitalFilterPitchAngle(\n\t    const LonControllerConf &amp;lon_controller_conf) {   \n\t  //配置中读到的参数滤波器的截止频率存到变量cutoff_freq中\n\t  double cutoff_freq =  \n\t      lon_controller_conf.pitch_angle_filter_conf().cutoff_freq();\n\t  //配置中读到的参数滤波器的采样周期存到变量ts中\n\t  double ts = lon_controller_conf.ts();\n\t  //将ts，cutoff_freq作为输入参数调用函数SetDigitalFilter()\n\t  //将参数全部设置到LonController类的数据成员滤波器类对象digital_filter_pitch_angle_中\n\t  SetDigitalFilter(ts, cutoff_freq, &amp;digital_filter_pitch_angle_);\n\t}\n\t\n\t//LoadControlCalibrationTable()函数就是上面Init函数末尾调用的加载标定表的函数的具体定义\n\t//输入参数是纵向控制器的配置对象\n\tvoid LonController::LoadControlCalibrationTable(\n\t    const LonControllerConf &amp;lon_controller_conf) {\n\t  //lon_controller_conf是从控制器配置文件中读出来的\n\t  //首先将从lon_controller_conf中读到的标定表存入control_table中\n\t  //引用变量control_table就是lon_controller_conf.calibration_table()，auto根据等式右边自动设定类型\n\t  //加const修饰防止引用变量别名更改原变量\n\t  const auto &amp;control_table = lon_controller_conf.calibration_table();\n\t  //屏幕上打印标定表成功加载信息\n\t  AINFO &lt;&lt; \"Control calibration table loaded\";\n\t  AINFO &lt;&lt; \"Control calibration table size is \"\n\t\t&lt;&lt; control_table.calibration_size();\n\t  //定义DataType类型变量xyz\n\t  //Apollo类型定义typedef std::vector&lt;std::tuple&lt;double, double, double&gt;&gt; DataType;\n\t  //DataType实际上就是一个三维容器，存放很多组对应的速度，加速度，油门/制动百分数数据\n\t  Interpolation2D::DataType xyz;\n\t  for (const auto &amp;calibration : control_table.calibration()) {\n\t    //依次control_table下的calibration读入速度，加速度，油门/制动百分数数据压入xyz中\n\t    xyz.push_back(std::make_tuple(calibration.speed(),\n\t\t                          calibration.acceleration(),\n\t\t                          calibration.command()));\n\t  }\n\t  //std::unique_ptr指针的清空复位，将LonController类数据成员control_interpolation_清空\n\t  control_interpolation_.reset(new Interpolation2D);\n\t  //control_interpolation_调用Init函数,xyz作为参数输入，\n\t  //将标定表读取到LonController类的数据成员xyz_里(特定车速下的加速度对应的控制量百分数)\n\t  ACHECK(control_interpolation_-&gt;Init(xyz))\n\t      &lt;&lt; \"Fail to load control calibration table\";\n\t}\n\t\n//Line156-369\n\t//计算纵向控制指令\n\t//输入定位信息指针localization\n\t//输入底盘信息指针chassis\n\t//输入规划轨迹信息指针planning_published_trajectory\n\t//输出全部都填入ControlCommand类对象指针cmd\n\t//ControlCommand类是由modules/control/proto/control_cmd.proto里定义的message ControlCommand类\n\t//由proto文件可以生成类定义的.cc和.h文件\n\tStatus LonController::ComputeControlCommand(\n\t    const localization::LocalizationEstimate *localization,\n\t    const canbus::Chassis *chassis,\n\t    const planning::ADCTrajectory *planning_published_trajectory,\n\t    control::ControlCommand *cmd) {\n\t  //localization/chassis/planning_published_trajectory都是const只允许读取\n\t  //将输入的定位，底盘信息分别读取到LonController类的数据成员localization_,chassis_里\n\t  localization_ = localization;\n\t  chassis_ = chassis;\n\n\t  //将输入的规划轨迹信息分别读取到LonController类的数据成员trajectory_message_\n\t  trajectory_message_ = planning_published_trajectory;\n\t  if (!control_interpolation_) {\n\t    //如果标定表为空返回错误信息\n\t    AERROR &lt;&lt; \"Fail to initialize calibration table.\";\n\t    return Status(ErrorCode::CONTROL_COMPUTE_ERROR,\n\t\t          \"Fail to initialize calibration table.\");\n\t  }\n\n\t  //如果规划轨迹信息指针为空或者轨迹分析器里的序号和轨迹message的序号不相等时复位\n\t  //trajectory_analyzer_是LonController类的数据成员，属于类TrajectoryAnalyzer在apollo/modules/control/common/下定义\n\t  //trajectory_message_也是LonController类数据成员，属于类ADCTrajectory由apollo/modules/planning/proto/planning.proto定义的消息类\n\t  if (trajectory_analyzer_ == nullptr ||\n\t      trajectory_analyzer_-&gt;seq_num() !=\n\t\t  trajectory_message_-&gt;header().sequence_num()) {\n\t    trajectory_analyzer_.reset(new TrajectoryAnalyzer(trajectory_message_));\n\t  }\n\t  //定义常引用变量lon_controller_conf为control_conf.pb.txtx里读取到配置\n\t  const LonControllerConf &amp;lon_controller_conf =\n\t      control_conf_-&gt;lon_controller_conf();\n\n\t  //定义临时变量debug是cmd.debug.simple_lon_debug \n\t  //因为cmd是指针所以这样访问数据成员，cmd所属类型包含一个数据成员debug专门用来存放调试信息\n\t  auto debug = cmd-&gt;mutable_debug()-&gt;mutable_simple_lon_debug();\n\t  //首先将debug清空\n\t  debug-&gt;Clear();\n\n\t  //初始化刹车，油门控制命令为0\n\t  double brake_cmd = 0.0;\n\t  double throttle_cmd = 0.0;\n\t  //初始化采样周期ts从lon_controller_conf里读到，lon_controller_conf也是从control_conf.pb.txt中读取到的\n\t  double ts = lon_controller_conf.ts();\n\t  //preview预览时间=lon_controller_conf读到的纵向预览窗口大小*采样时间ts\n\t  double preview_time = lon_controller_conf.preview_window() * ts;\n\t  //定义 enable_leadlag是否打开超前-滞后控制器从lon_controller_conf-enable_reverse_leadlag_compensation读取到的\n\t  //默认也是false不打开\n\t  bool enable_leadlag =\n\t      lon_controller_conf.enable_reverse_leadlag_compensation();\n\n\t  //如果预览窗口读到的是负数则提示错误信息并返回\n\t  if (preview_time &lt; 0.0) {\n\t    const auto error_msg =\n\t\tabsl::StrCat(\"Preview time set as: \", preview_time, \" less than 0\");\n\t    AERROR &lt;&lt; error_msg;\n\t    return Status(ErrorCode::CONTROL_COMPUTE_ERROR, error_msg);\n\t  }\n\t  //调用计算纵向误差函数，输入参数：\n\t  //trajectory_analyzer_.get()获得轨迹信息指针用于提供轨迹点的速度加速度，匹配点参考点等信息\n\t  //preview_time预览时间\n\t  //ts采样周期\n\t  //debug计算得到的误差放入debug中，纵向误差计算的细节在下面函数定义时再详细介绍\n\t  ComputeLongitudinalErrors(trajectory_analyzer_.get(), preview_time, ts,\n\t\t                    debug);\n\t\t\n\t  //定义临时变量station_error_limit纵向位置误差限制\n\t  //从配置文件control_conf.pb.txt-lon_controller_conf-station_error_limit中读取到\n\t  //默认是2.0m\n\t  double station_error_limit = lon_controller_conf.station_error_limit();\n\t  //定义临时变量station_error_limited为限幅后的纵向位置误差\n\t  double station_error_limited = 0.0;\n\t  //如果打开速度-位置预览，FLAGS_enable_speed_station_preview就是\n\t  //从apollo/modules/control/common/control_gflags.cc中取出全局变量enable_speed_station_preview\n\t  //这种前面加FLAGS_取出全局变量值的用法是由gflags库定义，这里不赘述\n\t  //默认为true打开speed_station_preview\n\t  if (FLAGS_enable_speed_station_preview) {\n\t    //基本概念 预览点：当前时间加上预览时间在轨迹上对应的点，车辆将要到达的纵向位置\n\t    //基本概念 参考点：当前时间在轨迹上对应的点，车辆此刻应该到达的纵向位置\n\t    //基本概念 匹配点：当前时间在轨迹上对应的点，车辆此刻应该到达的纵向位置\n\t    //有两种位置误差\n\t    //第一种, preview_station_error=预览点纵向位置 - 匹配点纵向位置\n\t    //第二种, station_error=参考点纵向位置-匹配点纵向位置\n\t    //如果打开此开关则采用第一种纵向位置误差，纵向误差的计算结果都是存在debug里\n\t    station_error_limited =\n\t\tcommon::math::Clamp(debug-&gt;preview_station_error(),\n\t\t                    -station_error_limit, station_error_limit);\n\t  } else {\n\t    //否则采用第二种纵向位置误差，纵向误差的计算结果都是存在debug里\n\t    station_error_limited = common::math::Clamp(\n\t\tdebug-&gt;station_error(), -station_error_limit, station_error_limit);\n\t  }\n\n\t  //如果轨迹msg信息指针里的档位信息是R档\n\t  if (trajectory_message_-&gt;gear() == canbus::Chassis::GEAR_REVERSE) { \n\t    //从配置文件加载lon_controller_conf里的倒车PID参数配置加载到位置PID控制器对象station_pid_controller_\n\t    //station_pid_controller_是LonController类里的数据成员，是PIDController类对象\n\t    station_pid_controller_.SetPID(//将配置参数加载到对象里\n\t\tlon_controller_conf.reverse_station_pid_conf());\n\t    //speed_pid_controller_是LonController类里的数据成员，是PIDController类对象\n\t    speed_pid_controller_.SetPID(lon_controller_conf.reverse_speed_pid_conf());//将配置参数加载到对象里\n\t    //如果打开enable_leadlag超前滞后控制器，默认是关闭直接略过\n\t    //lon_controller_conf.enable_reverse_leadlag_compensation去control_conf.pb.txt里查看\n\t    if (enable_leadlag) {\n\t      station_leadlag_controller_.SetLeadlag(\n\t\t  lon_controller_conf.reverse_station_leadlag_conf());\n\t      speed_leadlag_controller_.SetLeadlag(\n\t\t  lon_controller_conf.reverse_speed_leadlag_conf());\n\t    }\n\t    //若非R档 且 当前车速&lt;=高低速切换的转换速度switch_speed\n\t    //switch_speed也是从控制配置文件lon_controller_conf里加载的\n\t  } else if (injector_-&gt;vehicle_state()-&gt;linear_velocity() &lt;=\n\t\t     lon_controller_conf.switch_speed()) {\n\t    //速度PID控制器对象speed_pid_controller_加载控制配置文件中低速PID参数\n\t    speed_pid_controller_.SetPID(lon_controller_conf.low_speed_pid_conf());\n\t  } else {\n\t    //否则速度PID控制器对象加载控制配置文件中高速PID参数，通常低速PID参数要更大些\n\t    speed_pid_controller_.SetPID(lon_controller_conf.high_speed_pid_conf());\n\t  }\n\t  \n\t  //非R档情况下，定义临时变量speed_offset速度偏差\n\t  //速度偏差=位置控制器根据(限幅后位置误差，采样周期)计算出控制量即速度\n\t  double speed_offset =\n\t      //Control()是PID控制器的成员函数，根据PID控制器原理计算控制量速度作为speed_offset\n\t      station_pid_controller_.Control(station_error_limited, ts);\n\t  if (enable_leadlag) { //如果打开超前-滞后控制器，默认不打开，略过\n\t    speed_offset = station_leadlag_controller_.Control(speed_offset, ts);\n\t  }\n\n\t  //定义一个临时变量速度控制器的输入speed_controller_input为0\n\t  double speed_controller_input = 0.0;\n\t  //从配置文件加载速度控制器输入限幅control_conf.pb.txt--lon_controller_conf--speed_controller_input_limit\n\t  //速度控制器输入就是PID的输入\n\t  double speed_controller_input_limit =\n\t      lon_controller_conf.speed_controller_input_limit();\n\t  \n\t  //注意这个是limited而不是limit指的是经过限幅之后的速度控制器的输入\n\t  //定义临时变量限幅后的速度控制器输入speed_controller_input_limited为0 \n\t  double speed_controller_input_limited = 0.0;\n\t  //打开speed_station_preview?从control_gflags.cc看是默认打开的\n\t  if (FLAGS_enable_speed_station_preview) {\n\t    //打开的话速度控制器的输入 = 位置控制器计算出的speed_offset + 当前时间向前加上预览时间在轨迹上的对应点的速度和当前车速的偏差\n\t    speed_controller_input = speed_offset + debug-&gt;preview_speed_error();\n\t  } else {\n\t    //不打开的话速度控制器的输入 = 位置控制器计算出的speed_offset + 参考点车速和当前车速的偏差\n\t    speed_controller_input = speed_offset + debug-&gt;speed_error();\n\t  }\n\t  //计算得到的速度控制器的输入再进行限幅\n\t  speed_controller_input_limited =\n\t      common::math::Clamp(speed_controller_input, -speed_controller_input_limit,\n\t\t                  speed_controller_input_limit);\n\n\t  //定义临时变量acceleration_cmd_closeloop闭环加速度指令初始化为0\n\t  double acceleration_cmd_closeloop = 0.0;\n\n\t  //闭环的加速度指令就等于速度PID控制器根据速度控制器的输入，以及采样周期去计算，PID控制器原理不再赘述\n\t  acceleration_cmd_closeloop =\n\t      speed_pid_controller_.Control(speed_controller_input_limited, ts);\n\t  //将速度PID控制器中积分器的饱和状态设置到debug.pid_saturation_status里\n\t  debug-&gt;set_pid_saturation_status(\n\t      speed_pid_controller_.IntegratorSaturationStatus());\n\t  //如果打开超前滞后控制器，默认关闭，略过\n\t  if (enable_leadlag) {\n\t    acceleration_cmd_closeloop =\n\t\tspeed_leadlag_controller_.Control(acceleration_cmd_closeloop, ts);\n\t    debug-&gt;set_leadlag_saturation_status(\n\t\tspeed_leadlag_controller_.InnerstateSaturationStatus());\n\t  }\n\n\t  //定义斜坡补偿加速度 = (重力加速度 * 车辆俯仰角的正弦值)再经过数字滤波器滤波得到斜坡加速度补偿\n\t  //slope_offset_compensation是临时变量\n\t  double slope_offset_compensation = digital_filter_pitch_angle_.Filter(\n\t      GRA_ACC * std::sin(injector_-&gt;vehicle_state()-&gt;pitch()));\n\n\t  //判断坡道补偿加速度是否为非数NaN，当浮点数过小下溢就可能出现NaN非数\n\t  if (std::isnan(slope_offset_compensation)) {\n\t    slope_offset_compensation = 0;\n\t  }\n\t  \n\t  //将斜坡补偿加速度设置到debug里，debug.slope_offset_compensation=slope_offset_compensation protobuf\n\t  debug-&gt;set_slope_offset_compensation(slope_offset_compensation);\n\n\t  //定义1个临时变量acceleration_cmd\n\t  //总的加速度指令 = 闭环加速度指令 + 预览参考加速度 + 坡道补偿加速度(如果打开坡道补偿的话)\n\t  double acceleration_cmd =\n\t      acceleration_cmd_closeloop + debug-&gt;preview_acceleration_reference() +\n\t      FLAGS_enable_slope_offset * debug-&gt;slope_offset_compensation();\n\t  //设置debug的is_full_stop标志位为false,proto类数据成员的赋值方式\n\t  debug-&gt;set_is_full_stop(false);\n\t  //获取停车点的一个函数，后面介绍，找到当前规划模块发布的轨迹msg里的第一个v,a都小于一个很小值的点作为停车点\n\t  //找到的这个停车点的纵向位置和当前车辆纵向位置的偏差设置到debug里面去，debug.path_remain()\n\t  GetPathRemain(debug);\n\n\t  // 在快要停车的阶段，用一个固定的standstill的减速度代替刹车控制指令\n\t  //简而言之就是快到停车点时给一个固定-0.3m/s^2的减速度(数值控制配置里设置)\n\t  //trajectory_message_是由apollo/modules/planning/planning.proto定义的message ADCTrajectory类对象\n\t  if ((trajectory_message_-&gt;trajectory_type() ==    //轨迹类型还有路径后退，速度后退等参见planning.proto\n\t       apollo::planning::ADCTrajectory::NORMAL) &amp;&amp;  //当轨迹msg中的type是normal(估计应该是向前的正常轨迹) 且\n\t      ((std::fabs(debug-&gt;preview_acceleration_reference()) &lt;= //预览点的加速度&lt;=控制配置里的停车时最大允许加速度\n\t\t    control_conf_-&gt;max_acceleration_when_stopped() &amp;&amp; //见control_conf.pb.txt默认为0.01    \n\t\tstd::fabs(debug-&gt;preview_speed_reference()) &lt;=        //且 预览点速度小于车辆参数中的最大允许停车速度\n\t\t    vehicle_param_.max_abs_speed_when_stopped()) ||   //见apollo/modules/common/vehicle_param.pb.txt 默认为0.2\n\t       std::abs(debug-&gt;path_remain()) &lt;        \t\t//或当前纵向位置到停止点纵向位置偏差小于控制配置\n\t\t   control_conf_-&gt;max_path_remain_when_stopped())) {//里max_path_remain_when_stopped默认0.3m  \n          //总结上述条件，轨迹类型normal且(预览点加速度小于阈值且预览点速度小于阈值)或到停车点纵向偏差&lt;阈值    \n          //符合条件时，加速度指令按如下方式计算                                \n\t    acceleration_cmd =  //R档略过\n\t\t(chassis-&gt;gear_location() == canbus::Chassis::GEAR_REVERSE)\n\t\t    ? std::max(acceleration_cmd,\n\t\t               -lon_controller_conf.standstill_acceleration())\n\t\t                //非R档取控制器计算加速度指令，standstill减速度中最小值\n\t\t                //standstill减速度见控制配置control_conf.pb.txt--lon_controller_conf--standstill_acceleration\n\t\t    \t\t //standstill_acceleration默认为-0.3 m/s^2\n\t\t    : std::min(acceleration_cmd,\n\t\t               lon_controller_conf.standstill_acceleration());\n\t    ADEBUG &lt;&lt; \"Stop location reached\";\n\t    //若正常执行到这里，车辆就已经完全停住了，设置debug.is_full_stop为true\n\t    debug-&gt;set_is_full_stop(true);\n\t  }\n\n\t  //定义油门指令的下边界，为 车辆配置里的throttle_deadzone 和 lon_controller_conf配置里的throttle_minimum_action\n\t  //两者中的较大值\n\t  double throttle_lowerbound =\n\t      std::max(vehicle_param_.throttle_deadzone(),\n\t\t       lon_controller_conf.throttle_minimum_action());\n\t  //定义刹车指令的下边界\n\t  double brake_lowerbound =\n\t      std::max(vehicle_param_.brake_deadzone(),\n\t\t       lon_controller_conf.brake_minimum_action());\n\t  //定义临时变量calibration_value标定值初始化为0\n\t  double calibration_value = 0.0;\n\t  //要用来查表加速度，若R档为加速度控制指令取反，非R档保持加速度控制指令\n\t  double acceleration_lookup =\n\t      (chassis-&gt;gear_location() == canbus::Chassis::GEAR_REVERSE)\n\t\t  ? -acceleration_cmd\n\t\t  : acceleration_cmd;\n\n\t  //是否用预览点速度来查标定表(车速-加速度-控制指令百分数)\n\t  //FLAGS去control_gflags.cc里取出use_preview_speed_for_table的值，默认是false\n\t  if (FLAGS_use_preview_speed_for_table) {  //默认false略过\n\t    calibration_value = control_interpolation_-&gt;Interpolate(\n\t\tstd::make_pair(debug-&gt;preview_speed_reference(), acceleration_lookup));\n\t  } else {\n\t    //use_preview_speed_for_table为false的话，查标定表就用chassis里反馈的实际车速去查\n\t    //用速度加速度根据标定表线性插值得到控制量百分数calibration_value\n\t    calibration_value = control_interpolation_-&gt;Interpolate(\n\t\tstd::make_pair(chassis_-&gt;speed_mps(), acceleration_lookup));\n\t  }\n\n\t  //如果请求查表加速度&gt;=0\n\t  if (acceleration_lookup &gt;= 0) {\n\t    //如果计算得到的控制百分数&gt;=0\n\t    if (calibration_value &gt;= 0) {\n\t      //设置油门控制百分数，为油门下边界和查表得到的控制百分数之间的较大值\n\t      throttle_cmd = std::max(calibration_value, throttle_lowerbound);\n\t    } else {\n\t    //如果计算得到的控制百分数&lt;0,但是加速度又大于0\n\t      //设置油门控制百分数为油门下边界\n\t      throttle_cmd = throttle_lowerbound;\n\t    }\n\t    //刹车指令为0，如果要加速\n\t    brake_cmd = 0.0;\n\t  } else {\n\t  //如果请求的查表加速度&lt;0,油门指令置0\n\t    throttle_cmd = 0.0;\n\t    //如果计算得到的控制百分数&gt;=0\n\t    if (calibration_value &gt;= 0) {\n\t      //刹车指令就取刹车下边界\n\t      brake_cmd = brake_lowerbound;\n\t    } else {\n\t    //如果计算得到的控制百分数&lt;0 刹车指令就取标定值相反数和刹车下边界里较大值，其实就是取标定值进行限幅不能太小\n\t      brake_cmd = std::max(-calibration_value, brake_lowerbound);\n\t    }\n\t  }\n\n\t  //将被限制的纵向位置误差设置到debug.station_error_limited,指针对象成员-&gt;这样访问\n\t  debug-&gt;set_station_error_limited(station_error_limited);\n\t  //位置控制器的输出设置到debug.speedoffset\n\t  debug-&gt;set_speed_offset(speed_offset);\n\t  //被限幅的速度控制器的输入设置到debug.speed_controller_input_limited\n\t  debug-&gt;set_speed_controller_input_limited(speed_controller_input_limited);\n\t  //计算到的加速度指令设置到debug.acceleration_cmd\n\t  debug-&gt;set_acceleration_cmd(acceleration_cmd);\n\t  //计算到的油门指令设置到debug.throttle_cmd\n\t  debug-&gt;set_throttle_cmd(throttle_cmd);\n\t  //计算到的刹车指令设置到debug.brake_cmd\n\t  debug-&gt;set_brake_cmd(brake_cmd);\n\t  //去查标定表的请求加速度设置到debug.acceleration_lookup\n\t  debug-&gt;set_acceleration_lookup(acceleration_lookup);\n\t  //去查标定表的速度将chassis反馈值设置到debug.speed_lookup\n\t  debug-&gt;set_speed_lookup(chassis_-&gt;speed_mps());\n\t  //将标定表中查到的控制百分数值calibration_value设置到debug.calibration_value\n\t  debug-&gt;set_calibration_value(calibration_value);\n\t  //将闭环反馈速度控制器计算得到的控制量加速度设置到debug.acceleration_cmd_closeloop\n\t  debug-&gt;set_acceleration_cmd_closeloop(acceleration_cmd_closeloop);\n\n\t  //如果打开csv日志记录默认false\n\t  //总之就往csv里写中间各个变量的值用作调试之用\n\t  if (FLAGS_enable_csv_debug &amp;&amp; speed_log_file_ != nullptr) {\n\t    fprintf(speed_log_file_,\n\t\t    \"%.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f,\"\n\t\t    \"%.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %d,\\r\\n\",\n\t\t    debug-&gt;station_reference(), debug-&gt;station_error(),\n\t\t    station_error_limited, debug-&gt;preview_station_error(),\n\t\t    debug-&gt;speed_reference(), debug-&gt;speed_error(),\n\t\t    speed_controller_input_limited, debug-&gt;preview_speed_reference(),\n\t\t    debug-&gt;preview_speed_error(),\n\t\t    debug-&gt;preview_acceleration_reference(), acceleration_cmd_closeloop,\n\t\t    acceleration_cmd, debug-&gt;acceleration_lookup(),\n\t\t    debug-&gt;speed_lookup(), calibration_value, throttle_cmd, brake_cmd,\n\t\t    debug-&gt;is_full_stop());\n\t  }\n\n\t  //如果车辆是以加速度驱动，那么可以忽略下面的油门，制动指令值\n\t  cmd-&gt;set_throttle(throttle_cmd);\n\t  cmd-&gt;set_brake(brake_cmd);\n\t  cmd-&gt;set_acceleration(acceleration_cmd);\n\n\t  //如果车辆的纵向速度绝对u值&lt;=车辆参数配置里设定的停车最大速度绝对值\n\t  //简单理解就是车辆的纵向速度小于某阈值或者chassis反馈的档为信息是N档就认为车已经停住了，下发车辆的换档指令\n\t  if (std::fabs(injector_-&gt;vehicle_state()-&gt;linear_velocity()) &lt;=\n\t\t  vehicle_param_.max_abs_speed_when_stopped() ||\n\t      chassis-&gt;gear_location() == canbus::Chassis::GEAR_NEUTRAL) {\n\t    //若车辆处于停车或N档时下发规划发布的轨迹msg里的档位\n\t    cmd-&gt;set_gear_location(trajectory_message_-&gt;gear());\n\t  } else {\n\t    //若车辆不处于停车且不在N档时下发chassis反馈的车辆实际档位\n\t    cmd-&gt;set_gear_location(chassis-&gt;gear_location());\n\t  }\n          //返回状态码ok\n\t  return Status::OK();\n\t}\n\t\n//Line377\n\t//获取LonController的名字name_,是LonController类的数据成员\n\t//LonController::LonController()\n   \t//   : name_(ControlConf_ControllerType_Name(ControlConf::LON_CONTROLLER)) \n   \t//在lon_controller.cc Line41 LonController类的构造函数初始化时就初始化name_为\"LON_CONTROLLER\"\n\tstd::string LonController::Name() const { return name_; }\n\t\n//Line379-461\n\t//该函数是计算纵向误差的\n\t//输入参数规划发布轨迹信息TrajectoryAnalyzer类指针对象trajectory_analyzer\n\t//输入参数preview_time,预览时间，在控制配置文件里面设置\n\t//输入参数ts，采样时间，在控制配置文件里设置\n\t//输入参数debug，SimpleLongitudinalDebug类指针对象debug用来存放计算得到纵向误差信息\n\t//其他函数通过debug指针进行访问这些纵向误差\n\tvoid LonController::ComputeLongitudinalErrors(\n\t    const TrajectoryAnalyzer *trajectory_analyzer, const double preview_time,\n\t    const double ts, SimpleLongitudinalDebug *debug) {\n\t  // 分解车辆运动到Frenet坐标，就是分为纵向和横向\n\t  // s: 纵向累积走过的距离沿着参考轨迹\n\t  // s_dot: 纵向沿着参考轨迹的速度\n\t  // d: 相对参考轨迹的横向距离\n\t  // d_dot: 横向距离的变化率\n\t  //matched:匹配点，在参考轨迹上距离当前车辆距离最近的点\n\t  //初始化匹配点处的s,s',d,d'\n\t  double s_matched = 0.0;\n\t  double s_dot_matched = 0.0;\n\t  double d_matched = 0.0;\n\t  double d_dot_matched = 0.0;\n\n\t  //定义车辆状态通过LonController类的数据成员injector_去访问其自身的成员函数从而获得车辆当前状态\n\t  auto vehicle_state = injector_-&gt;vehicle_state();\n\t  //匹配点为将车辆当前状态的x,y坐标代入去查找轨迹上的最近点\n\t  auto matched_point = trajectory_analyzer-&gt;QueryMatchedPathPoint(\n\t      vehicle_state-&gt;x(), vehicle_state-&gt;y());\n\n\t  //轨迹信息将当前点x,y,theta,v以及参考点信息输入，输出当前点的s,d,s',d'\n\t  //简而言之就是将大地坐标系转化为Frenet坐标\n\t  //d是横向偏差，s是累积的弧长即纵向上走过的距离\n\t  //函数参数最后几个都带&amp;，熟悉的套路，引用变量传值，最后带&amp;的几个变量都是待填充函数结果的变量\n\t  trajectory_analyzer-&gt;ToTrajectoryFrame(\n\t      vehicle_state-&gt;x(), vehicle_state-&gt;y(), vehicle_state-&gt;heading(),\n\t      vehicle_state-&gt;linear_velocity(), matched_point, &amp;s_matched,\n\t      &amp;s_dot_matched, &amp;d_matched, &amp;d_dot_matched);\n\n\t  //定义临时变量当前控制时间=当前时间\n\t  double current_control_time = Time::Now().ToSecond();\n\t  //定义临时变量预览控制时间=当前时间+预览时间\n\t  double preview_control_time = current_control_time + preview_time;\n\t\n\t  //参考点就是用当前时间去轨迹上查时间最近点\n\t  TrajectoryPoint reference_point =\n\t      trajectory_analyzer-&gt;QueryNearestPointByAbsoluteTime(\n\t\t  current_control_time);\n          //预览点就是去轨迹上查预览时间对应的点，就是当前时间向前看一段时间对应轨迹上的点\n\t  TrajectoryPoint preview_point =\n\t      trajectory_analyzer-&gt;QueryNearestPointByAbsoluteTime(\n\t\t  preview_control_time);\n\n\t  //所有的计算结果都是存到debug这个指针对象里\n\t  //debug.matched_point.pathpoint.x=匹配点x  这样表达只是为了简单说明含义，实际指针对象需要通过-&gt;访问成员\n\t  debug-&gt;mutable_current_matched_point()-&gt;mutable_path_point()-&gt;set_x(\n\t      matched_point.x());\n\t  //debug.matched_point.pathpoint.y=匹配点y\n\t  debug-&gt;mutable_current_matched_point()-&gt;mutable_path_point()-&gt;set_y(\n\t      matched_point.y());\n          //debug.reference_point.pathpoint.x=参考点x\t      \n\t  debug-&gt;mutable_current_reference_point()-&gt;mutable_path_point()-&gt;set_x(\n\t      reference_point.path_point().x());\n\t  //debug.reference_point.pathpoint.y=参考点y\t\n\t  debug-&gt;mutable_current_reference_point()-&gt;mutable_path_point()-&gt;set_y(\n\t      reference_point.path_point().y());\n\t  //debug.preview_point.pathpoint.x=预览点x\n\t  debug-&gt;mutable_preview_reference_point()-&gt;mutable_path_point()-&gt;set_x(\n\t      preview_point.path_point().x());\n\t  debug.preview_point.pathpoint.y=预览点y\n\t  debug-&gt;mutable_preview_reference_point()-&gt;mutable_path_point()-&gt;set_y(\n\t      preview_point.path_point().y());\n\n\t  //打印匹配点，参考点，预览点信息\n\t  ADEBUG &lt;&lt; \"matched point:\" &lt;&lt; matched_point.DebugString();\n\t  ADEBUG &lt;&lt; \"reference point:\" &lt;&lt; reference_point.DebugString();\n\t  ADEBUG &lt;&lt; \"preview point:\" &lt;&lt; preview_point.DebugString();\n\n\t  //航向角误差 = 车辆当前状态航向角 - 匹配点的航向角\n\t  //NormalizeAngle角度的规范化，就是将所有角度规范到-pi,pi\n\t  double heading_error = common::math::NormalizeAngle(vehicle_state-&gt;heading() -\n\t\t                                              matched_point.theta());\n          //纵向速度 = 车辆速度 * cos(当前航向角 - 轨迹上距离最近点航向角)\n\t  double lon_speed = vehicle_state-&gt;linear_velocity() * std::cos(heading_error);\n\t  //纵向加速度 = 车辆加速度 * cos(当前航向角 - 轨迹上距离最近点航向角)\n\t  double lon_acceleration =\n\t      vehicle_state-&gt;linear_acceleration() * std::cos(heading_error);\n\t  //1-kd就是将大地坐标系转化到Frenet坐标纵向上引入的\n\t  double one_minus_kappa_lat_error = 1 - reference_point.path_point().kappa() *\n\t\t                                     vehicle_state-&gt;linear_velocity() *\n\t\t                                     std::sin(heading_error);\n\n\t  //计算的相关误差等结果全部存放到指针debug里供类内其他函数调用\n\t  //参考的纵向位置debug.station_reference=参考点的累积弧长\n\t  debug-&gt;set_station_reference(reference_point.path_point().s());\n\t  //当前的纵向位置debug.current_station=当前点的累积弧长\n\t  debug-&gt;set_current_station(s_matched);\n\t  //纵向位置误差debug.station_error=参考点路径点的累积弧长-匹配点的累积弧长(匹配点就是路径最近点)\n\t  debug-&gt;set_station_error(reference_point.path_point().s() - s_matched);\n\t  //速度参考值就是参考点的速度debug.speed_reference\n\t  debug-&gt;set_speed_reference(reference_point.v());\n\t  //当前车速就是纵向速度debug.current_speed=lon_speed\n\t  debug-&gt;set_current_speed(lon_speed);\n\t  //速度误差就是参考点速度减匹配点速度 debug.speed_error\n\t  debug-&gt;set_speed_error(reference_point.v() - s_dot_matched);\n\t  //加速度参考就是参考点的加速度存到debug里\n\t  debug-&gt;set_acceleration_reference(reference_point.a());\n\t  //纵向加速度存到debug里\n\t  debug-&gt;set_current_acceleration(lon_acceleration);\n\t  //设定加速度误差=参考点加速度-纵向加速度/(1-kd)  1-kd由全局坐标转换到Frenet坐标引入，kappa就是曲率\n\t  debug-&gt;set_acceleration_error(reference_point.a() -\n\t\t                        lon_acceleration / one_minus_kappa_lat_error);\n\t  //参考的加加速度=(参考点加速度-上一时刻的参考加速度)/采样时间\n\t  double jerk_reference =\n\t      (debug-&gt;acceleration_reference() - previous_acceleration_reference_) / ts;\n\t  //纵向加加速度=(当前加速度-上一时刻加速度)/采样时间\n\t  double lon_jerk =\n\t      (debug-&gt;current_acceleration() - previous_acceleration_) / ts;\n\t  //参考加加速度存到debug\n\t  debug-&gt;set_jerk_reference(jerk_reference);\n\t  //当前的加加速度存到debug\n\t  debug-&gt;set_current_jerk(lon_jerk);\n\t  //加加速度误差=加加速度参考-纵向加加速度/(1-kd)存到debug里\n\t  debug-&gt;set_jerk_error(jerk_reference - lon_jerk / one_minus_kappa_lat_error);\n\t  //将此刻的参考加速度赋给上一时刻参考加速度进行迭代\n\t  previous_acceleration_reference_ = debug-&gt;acceleration_reference();\n\t  //将当前的加速度赋给上一时刻的当前加速度，这样迭代一般都是为了计算差分来近似导数\n\t  previous_acceleration_ = debug-&gt;current_acceleration();\n\n          //预览点位置误差=预览点的纵向位置s-匹配点纵向位置s结果存到debug中去\n\t  debug-&gt;set_preview_station_error(preview_point.path_point().s() - s_matched);\n\t  //预览点速度误差=预览点的纵向速度v-匹配点纵向速度 结果存到debug中去\n\t  debug-&gt;set_preview_speed_error(preview_point.v() - s_dot_matched);\n\t  //预览点速度设置到debug中\n\t  debug-&gt;set_preview_speed_reference(preview_point.v());\n\t  //预览点加速度设置到debug中\n\t  debug-&gt;set_preview_acceleration_reference(preview_point.a());\n\t}\n\t\n//Line463-469\n\t//这个函数是设置数字滤波器，输入采样时间，截至频率\n\t//digital_filter指针是数字滤波器对象，用ts,cutoff_freq去设置这个滤波器对象，这个对象指针其实是最终的结果\n\tvoid LonController::SetDigitalFilter(double ts, double cutoff_freq,\n\t\t                             common::DigitalFilter *digital_filter) {\n\t  std::vector&lt;double&gt; denominators;\n\t  std::vector&lt;double&gt; numerators;\n\t  common::LpfCoefficients(ts, cutoff_freq, &amp;denominators, &amp;numerators);\n\t  digital_filter-&gt;set_coefficients(denominators, numerators);\n\t}\n\t\n//Line472-517 end\n\t//这个函数输入是debug指针，就是去轨迹点上找第一个符合条件的停止点，并将结果存在debug指针\n\t//在ComputeControlCommand()函数中调用了该函数，目的就是先找到最新发布的轨迹上的第一个停车点，\n\t//然后快到停车点时，就给一个固定的standstill减速度，配置里默认设置-0.3\n\tvoid LonController:: GetPathRemain(SimpleLongitudinalDebug *debug) {\n\t  //首先定义初始化了停止点在规划发布轨迹点中的下标为0\n\t  int stop_index = 0;\n\t  //定义了静态常量速度阈值，速度小于此阈值认为是停止条件之一\n\t  static constexpr double kSpeedThreshold = 1e-3;\n\t  //定义了静态常量加速度常量 前进档时加速度&gt;此阈值且&lt;0认为是停止条件之一\n\t  static constexpr double kForwardAccThreshold = -1e-2;\n\t  //定义了静态常量加速度常量 R档时加速度&lt;此阈值且&gt;0认为是停止条件之一\n\t  static constexpr double kBackwardAccThreshold = 1e-1;\n\t  //定义了静态常量驻车速度，也是判断停车点的一个依据\n\t  static constexpr double kParkingSpeed = 0.1;\n\n\t  //若规划发布的轨迹信息trajectory_message_中档位为D档\n\t  //trajectory_message_是LonController类的成员，是ADCTrajectory message类对象\n\t  //ADCTrajectory message类由planning.proto生成 参见google protobuf库的使用\n\t  if (trajectory_message_-&gt;gear() == canbus::Chassis::GEAR_DRIVE) {\n\t    //_size()用于访问message类下repeated数组成员的长度\n\t    //trajectory_point_size()返回的是trajectory_message_指针中的轨迹点个数\n\t    //这里就是stop_index停车点下标从0开始遍历当前规划发布轨迹所有点\n\t    while (stop_index &lt; trajectory_message_-&gt;trajectory_point_size()) {\n\t      //定义当前此次循环遍历的轨迹点为轨迹msg中下标为stop_index的那个点\n\t      auto &amp;current_trajectory_point =\n\t\t  trajectory_message_-&gt;trajectory_point(stop_index);\n\t      //若当前遍历的轨迹点速度绝对值 &lt; 速度阈值 且 当前遍历的轨迹点加速度 &gt; 前进加速度阈值 且 当前遍历的轨迹点加速度 &lt; 0\n\t      //若符合这条件则找到了停车点直接break跳出while遍历循环\n\t      if (fabs(current_trajectory_point.v()) &lt; kSpeedThreshold &amp;&amp;\n\t\t  current_trajectory_point.a() &gt; kForwardAccThreshold &amp;&amp;\n\t\t  current_trajectory_point.a() &lt; 0.0) {\n\t\tbreak;\n\t      }\n\t      //若此次循环不符合上述停车点的判定条件，则遍历规划发布的轨迹msg中的下一个点\n\t      ++stop_index;\n\t    }\n\t  } else { \n\t    //若为非前进档的停车点下标搜索，不再赘述\n\t    while (stop_index &lt; trajectory_message_-&gt;trajectory_point_size()) {\n\t      auto &amp;current_trajectory_point =\n\t\t  trajectory_message_-&gt;trajectory_point(stop_index);\n\t      if (current_trajectory_point.v() &lt; kSpeedThreshold &amp;&amp;\n\t\t  current_trajectory_point.a() &lt; kBackwardAccThreshold &amp;&amp;\n\t\t  current_trajectory_point.a() &gt; 0.0) {\n\t\tbreak;\n\t      }\n\t      ++stop_index;\n\t    }\n\t  }\n\t  //如果到了轨迹msg的最后一个点都没有符合上边符合要求的就将最后一个轨迹点为停止点\n\t  if (stop_index == trajectory_message_-&gt;trajectory_point_size()) {\n\t    //c++数组最后一个数下标=数组长度-1，因为第一个是从0开始，所以这里减1\n\t    --stop_index;\n\t    //若最后一个轨迹点速度绝对值 &lt; 驻车速度阈值\n\t    if (fabs(trajectory_message_-&gt;trajectory_point(stop_index).v()) &lt;\n\t\tkParkingSpeed) {\n\t      //显示打印信息，最后一个点被选为停车点\n\t      ADEBUG &lt;&lt; \"the last point is selected as parking point\";\n\t    } else {\n\t      //否则的话也只是提示终点的速度 &gt; 速度死区而已，停车点仍是选这个，仅仅打印信息不同\n\t      ADEBUG &lt;&lt; \"the last point found in path and speed &gt; speed_deadzone\";\n\t    }\n\t  }\n\t  //将停车点的纵向位置与当前点的纵向位置之差存到debug.path_remain里\n\t  debug-&gt;set_path_remain(\n\t      trajectory_message_-&gt;trajectory_point(stop_index).path_point().s() -\n\t      debug-&gt;current_station());\n\t}\n\n\t}  // namespace control\n\t}  // namespace apollo\n</code></pre>\n<p></p>\n</div>\n</div>"}