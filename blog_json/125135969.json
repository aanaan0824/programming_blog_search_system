{"blogid": "125135969", "writerAge": "码龄137天", "writerBlogNum": "13", "writerCollect": "370", "writerComment": "244", "writerFan": "1958", "writerGrade": "4级", "writerIntegral": "870", "writerName": "毕加锁", "writerProfileAdress": "writer_image\\profile_125135969.jpg", "writerRankTotal": "26560", "writerRankWeekly": "5859", "writerThumb": "307", "writerVisitNum": "14710", "blog_read_count": "6370", "blog_time": "于 2022-06-05 20:17:10 发布", "blog_title": "Ai实现FPS游戏自动瞄准 yolov5fps自瞄", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>大家好 我是<span style=\"color:#956fe7;\">毕加锁</span> (锁!)</p>\n<p>今天来分享一个Yolov5 FPS跟枪的源码解析和原理讲解。代码比较粗糙 各位有什么优化的方式可以留言指出，可以一起交流学习。 </p>\n<p><br/><strong><span style=\"color:#0d0016;\">需要了解的东西和可能会遇到的问题</span></strong><br/><span style=\"color:#fe2c24;\">1.xy坐标点与当前鼠标的xy坐标点距离计算</span></p>\n<p><br/><span style=\"color:#fe2c24;\">2.获取窗口句柄，本文使用的是根据窗口名称获取句柄</span></p>\n<p><br/><span style=\"color:#fe2c24;\">3.推理方式：本文使用的是GPU(为啥呢？速度快噻，因为我3060显卡噻~)。</span></p>\n<p><br/><span style=\"color:#fe2c24;\">4.屏幕宽高获取和敌人坐标获取和计算哪个是最近的敌人并控制鼠标去敌人身上和头上。（为什么说是身体和头部呢，因为还有一个方式，就是只需要敌人身体坐标就可以计算得出敌人头部坐标）干货噢~</span></p>\n<p><br/><span style=\"color:#fe2c24;\">5.还有鼠标按键状态获取。</span></p>\n<p><br/> 正文开始吧，我们就从头开始代码解析吧。<br/><strong>先来一个两个xy坐标的距离计算</strong></p>\n<pre><code>\nclass Point():\n    def __init__(self, x1, y1, x2, y2):\n        self.x1 = x1\n        self.y1 = y1\n        self.x2 = x2\n        self.y2 = y2\n\n\nclass Line(Point):\n    def __init__(self, x1, y1, x2, y2):\n        super().__init__(x1, y1, x2, y2)\n\n    def getlen(self):\n        changdu = math.sqrt(math.pow((self.x1 - self.x2), 2) + math.pow((self.y1 - self.y2), 2))\n        return changdu</code></pre>\n<p><br/> 上面这段代码的使用方式如下</p>\n<p></p>\n<pre><code>L1 = Line(x1, y1, x2, y2)  #传入两个xy坐标\nL1.getlen() #return出两个坐标点的直线距离</code></pre>\n<p><br/> 接下来直接上全代码解析 各位可以把类和方法分离出去</p>\n<pre><code># 这里是导入依赖，需要这些库\nimport math\nimport sys\nimport time\n\nimport torch\nimport win32api\nimport win32con\nimport win32gui\nfrom PyQt5.QtWidgets import QApplication\nfrom pynput.mouse import Controller\nimport mouse\n\n#这里这俩class就是文章上面说的那个传入两个坐标点，计算直线距离的\nclass Point():\n    def __init__(self, x1, y1, x2, y2):\n        self.x1 = x1\n        self.y1 = y1\n        self.x2 = x2\n        self.y2 = y2\nclass Line(Point):\n    def __init__(self, x1, y1, x2, y2):\n        super().__init__(x1, y1, x2, y2)\n\n    def getlen(self):\n        changdu = math.sqrt(math.pow((self.x1 - self.x2), 2) + math.pow((self.y1 - self.y2), 2))\n        return changdu\n\n#第一步：我们获取到某FPS游戏的窗口句柄\nhwnd = win32gui.FindWindow(None, \"穿越火线\")\n#这个方法是获取上面句柄窗口的窗口截图，用的是PyQt截图，有速度更快更好的方式的话可以换上\n#截图完毕后保存在根目录的cfbg.bmp文件\ndef screen_record():\n    app = QApplication(sys.argv)\n    screen = QApplication.primaryScreen()\n    img = screen.grabWindow(hwnd).toImage()\n    img.save(\"cfbg.bmp\")\n\n\n#这里就是调用我们那yolo模型来进行推理啦，我设置的是cuda，也就是英伟达的GPU，因为cpu太慢了。\n#如果自己的不能使用GPU推理的话把下面这两行改改，改成cpu的就可以了。\ndevice = torch.device(\"cuda\")\nmodel = torch.hub.load('F:/yolov5-master', 'custom', 'F:/yolov5-master/yolov5n6.pt',\n                       source='local', force_reload=False)  # 加载本地模型\n# 这里是定义屏幕宽高[其实这俩就是游戏所对应的分辨率，比如：游戏里1920*1080这里就是1920*1080]\ngame_width = 1024\ngame_height = 768\n# 这边就是开始实时进行游戏窗口推理了\n#无限循环 -&gt; 截取屏幕 -&gt; 推理模型获取到每个敌人坐标 -&gt; 计算每个敌人中心坐标 -&gt; 挑选距离准星最近的敌人 -&gt; 如果左键是按下状态则控制鼠标移动到敌人的身体或者头部(本文计算方式是移动到头部)\nwhile True:\n    # 截取屏幕\n    screen_record()\n    # 使用模型\n    model = model.to(device)\n    img = 'cfbg.bmp' \n    # 开始推理\n    results = model(img)\n    # 过滤模型\n    xmins = results.pandas().xyxy[0]['xmin']\n    ymins = results.pandas().xyxy[0]['ymin']\n    xmaxs = results.pandas().xyxy[0]['xmax']\n    ymaxs = results.pandas().xyxy[0]['ymax']\n    class_list = results.pandas().xyxy[0]['class']\n    confidences = results.pandas().xyxy[0]['confidence']\n    newlist = []\n    for xmin, ymin, xmax, ymax, classitem, conf in zip(xmins, ymins, xmaxs, ymaxs, class_list, confidences):\n        if classitem == 0 and conf &gt; 0.5:\n            newlist.append([int(xmin), int(ymin), int(xmax), int(ymax), conf])\n    # 循环遍历每个敌人的坐标信息传入距离计算方法获取每个敌人距离鼠标的距离\n    if len(newlist) &gt; 0:\n        # 存放距离数据\n        cdList = []\n        xyList = []\n        for listItem in newlist:\n            # 当前遍历的人物中心坐标\n            xindex = int(listItem[2] - (listItem[2] - listItem[0]) / 2)\n            yindex = int(listItem[3] - (listItem[3] - listItem[1]) / 2)\n            mouseModal = Controller()\n            x, y = mouseModal.position\n            L1 = Line(x, y, xindex, yindex)\n            # 获取到距离并且存放在cdList集合中\n            cdList.append(int(L1.getlen()))\n            xyList.append([xindex, yindex, listItem[0], listItem[1], listItem[2], listItem[3]])\n        # 这里就得到了距离最近的敌人位置了\n        minCD = min(cdList)\n        # 如果敌人距离鼠标坐标小于150则自动进行瞄准，这里可以改大改小，小的话跟枪会显得自然些\n        if minCD &lt; 150:\n            for cdItem, xyItem in zip(cdList, xyList):\n                if cdItem == minCD:\n                    # 锁头算法：使用win32api获取左键按下状态，如果按下则开始自动跟枪\n                    if win32api.GetAsyncKeyState(0x01):\n                        # 控制鼠标移动到某个点：看不懂计算方式的话看文章下面讲解吧O(∩_∩)O\n                        win32api.mouse_event(win32con.MOUSEEVENTF_MOVE, int(xyItem[0] - game_width // 2),int(xyItem[1] - (game_height - (xyItem[3] - xyItem[5])) // 2), 0, 0)\n                    break</code></pre>\n<p>好了，我们来讲解下这行代码<br/><span style=\"color:#fe2c24;\">win32api.mouse_event(鼠标行为：这里用的是MOVE相对移动, x坐标,y坐标, 0, 0)</span><br/> 第一个参数，先设定鼠标的行为：使用相对移动，为什么不用绝对移动呢，因为绝对移动在游戏里是无效的<br/> 第二个参数，x轴相对移动的距离：敌人x坐标 - (屏幕宽度 / 2)<br/> 第三个参数，y轴相对移动的距离：敌人y坐标 - (屏幕高度 - (敌人最大y坐标 - 敌人最小y坐标) / 2)<br/> 第一第二个参数相对来说比较好理解，但是可能有人对于第三个y的相对移动的计算方式有点懵，我画了个图，希望可以看明白。</p>\n<p><br/><strong>实例图   图比较简陋 勿喷</strong></p>\n<p><img alt=\"\" height=\"548\" src=\"image\\d35a549d00a04de8badee4b721db328d.jpeg\" width=\"1080\"/><br/>  </p>\n<p><strong>在其他fps游戏，我们只需要修改窗口名称参数和分辨率参数即可。</strong></p>\n<p>以上就是Yolov5 FPS跟枪的源码解析和原理讲解了 感谢大家支持</p>\n<p>我是毕加锁 期待你的关注</p>\n<p><img alt=\"\" height=\"182\" src=\"image\\f1f5a215452d446bbefe1f5492a375af.jpeg\" width=\"186\"/></p>\n<p> </p>\n</div>\n</div>"}