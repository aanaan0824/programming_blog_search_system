{"blogid": "125451926", "writerAge": "码龄7年", "writerBlogNum": "448", "writerCollect": "2662", "writerComment": "807", "writerFan": "2738", "writerGrade": "8级", "writerIntegral": "29846", "writerName": "暮志未晚Webgl", "writerProfileAdress": "writer_image\\profile_125451926.jpg", "writerRankTotal": "319", "writerRankWeekly": "7427", "writerThumb": "1357", "writerVisitNum": "3571815", "blog_read_count": "934", "blog_time": "于 2022-06-24 21:28:16 发布", "blog_title": "unity URP内置shader lit解析", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>unity内置的pbr渲染shader<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ae753e2b1ca94446898580ff07efaac4.png\"/><br/> Properties为shader相关属性<br/> 两个SubShader里面为相应的渲染内容，第二个为降级处理渲染，如果第一个SubShader不兼容，才会渲染第二个。<br/> FallBack为回退，直接显示报错的红色。<br/> CustomEditor为自定义材质调试UI，可以设置相应的c#脚本对默认的材质属性进行设置。我一般设置为设置相应属性时，对宏的开关进行设置，以及隐藏一些不需要美术调整的配置项。具体其的实现就是另一篇文章了。</p>\n<p>接下来看一下SubShader的Pass<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d621f9172f4a4584a538e2be71bf13d5.png\"/><br/> SubShader内包含一个tag标签以及多个pass组成，每个pass都有它自己的用途。<br/> 上面注释的意思是，告诉你在通用渲染管线内，tag标签的设置是必须的。如果你使用了urp但是没有设置tag标签，那么这个SubShader就没用。你可以在SubShader下面添加Fallback使其能会退到built-in渲染管线，让这个shader同时兼容urp和built-in。<br/> 正常情况，我们使用了urp，就是为了一些urp的功能，怎么可能会退到built-in。所以，还是老老实实的添加好tag标签就好。<br/> SubShader下的标签，最主要的就是要设置RenderPipeline为通用渲染管线 “RenderPipeline” = “UniversalPipeline” 告诉引擎这是urp的shader。<br/> LOD主要是为了shader分级，如果你的项目需要发多个设备的版本，在移动端想要提高性能，你可以再开一个SubShader，来实现移动端适用的高性能的版本渲染。具体实现看我其他的文章。</p>\n<p>接下来，讲一下，这个SubShader里面包含哪些pass，由于urp里面不像built-in一样，多了一个光源，就需要额外的多渲染一个pass，所以，它的pass现在每一个都是一种用途的，额外的光源渲染也不需要再增加一个forwadAdd这样的pass去实现了。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0407c2adb89447c68b86593d9dcafbd0.png\"/><br/> 先讲一下pass结构，上面也是tag标签，LightMode来定义这个pass是用来实现哪些功能的，Name就是给这个pass命名，有什么用我现在还不知道。下面就是标准的 混合模式 深度是否写入 是否裁切。<br/> urp的pass都是使用hlsl代码来编写的 only_renderers是设置只在这几种平台上面运行，还有一个剔除平台的，一般我不会设置。<br/> 下面就是 shader_feature_local shader_feature_local_fragment multi_compile multi_compile_fragment<br/> 这些都是用来定义宏的，带feature的话是按需生成shader变体，如果不带的话不管你项目里面用没用，都会生成相应的宏变体。<br/> 还有这种 #pragma multi_compile _ LIGHTMAP_SHADOW_MIXING 后面带下划线的，是使用引擎内置的变体，里面会包含多个宏。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0342baf909f14b14afdd5bb31d20a0fd.png\"/><br/> 前两行定义了这个pass的顶点着色器和片原着色器函数名称，渲染时，会自动调用函数生成渲染所需的数据。<br/> 后面两个就是类似于代码引入的方式，引入相应所需的内容，在这里就不多说了。<br/> 对了，再补充一句，如果你的built-in的shader里面没有使用光照相关的代码，也可以直接在urp管线里面直接使用，不会产生报错。</p>\n<p>接下来列一下内置的lit带的这些pass都是干啥用的：</p>\n<pre><code>Tags{\"LightMode\" = \"UniversalForward\"}\n</code></pre>\n<p>这个是urp的默认渲染pass，里面可以处理多光源，自发光，以及环境光和雾等等。</p>\n<pre><code>Tags{\"LightMode\" = \"ShadowCaster\"}\n</code></pre>\n<p>这个是用来渲染物体阴影投射的</p>\n<pre><code>Tags{\"LightMode\" = \"DepthOnly\"}\n</code></pre>\n<p>这个是渲染深度图的，如果你要在屏幕空间做一些东西，需要渲染此pass渲染。</p>\n<pre><code>Tags{\"LightMode\" = \"DepthNormals\"}\n</code></pre>\n<p>这个是渲染一张带有深度和法向的纹理图的</p>\n<pre><code>Tags{\"LightMode\" = \"Meta\"}\n</code></pre>\n<p>这个pass是用来烘焙光照贴图的</p>\n<pre><code>Tags{ \"LightMode\" = \"Universal2D\" }\n</code></pre>\n<p>这个是用作2d渲染中的，一般我们用unity都是3d，所以这个pass我是直接忽略了。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}