{"blogid": "126685726", "writerAge": "码龄8年", "writerBlogNum": "394", "writerCollect": "443", "writerComment": "40", "writerFan": "292", "writerGrade": "5级", "writerIntegral": "4383", "writerName": "东方不败就是我", "writerProfileAdress": "writer_image\\profile_126685726.jpg", "writerRankTotal": "4303", "writerRankWeekly": "3339", "writerThumb": "75", "writerVisitNum": "181985", "blog_read_count": "740", "blog_time": "于 2022-09-04 22:30:15 发布", "blog_title": "Web自动化之Selenium常用操作", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>本文总结使用selenium进行web/UI自动化时，会用到的一些常用操作。</p>\n<h1>定位元素</h1>\n<blockquote>\n<pre>driver.find_element_by_xpath()#1、绝对路径 2、元素属性 3、层级和属性结合 4、使用逻辑运算符\ndriver.find_element_by_id()#根据id定位，HTML规定id属性在HTML文档中必须是唯一的\ndriver.find_element_by_name()#name属性定位\ndriver.find_element_by_class_name()#class属性定位\ndriver.find_element_by_tag_name()#标签名字定位 因为标签基本都不是唯一的，所以不用这个\ndriver.find_element_by_link_text()#定位文本链接，需要对应的元素有href属性\ndriver.find_element_by_partial_link_text()#模糊定位文本链接\ndriver.find_element_by_css_selector()#CSS选择器</pre>\n</blockquote>\n<h2>By定位元素</h2>\n<p>是元素定位另外一种方式，跟上面的8种底层一样。</p>\n<blockquote>\n<pre>from selenium.webdriver.common import By\ndriver.find_element(By.ID,'kw')</pre>\n</blockquote>\n<h1>定位一组元素</h1>\n<blockquote>\n<pre>driver.find_elements_by_xpath()#其他方法同理\n</pre>\n<pre>driver.find_elements(By.XPATH,'') </pre>\n</blockquote>\n<h1>浏览器操作</h1>\n<blockquote>\n<pre>driver.set_window_size()#设置浏览器大小，可以设置成移动端大小\ndriver.back()#浏览器后退\ndriver.forward()#浏览器前进\ndriver.set_window_position()\ndriver.set_window_rect()\ndriver.refresh()#模拟浏览器刷新\ndriver.maximize_window()#最大化浏览器\n</pre>\n</blockquote>\n<h1>设置浏览器参数</h1>\n<p>在定义driver的时候设置chrome_options参数，该参数是一个Options类所实例化的对象。其中，常用的参数是设置浏览器是否可视化和浏览器的请求头等信息，前者可以加快代码的运行速度，后者可以有效地防止网站的反爬虫检测</p>\n<pre><code class=\"language-python\">from selenium.webdriver.chrome.options import Options\nurl='https://movie.douban.com/'\n#Options类实例化\nchrome_options=Options()\n#设置浏览器参数\n#--headless是不 显示浏览器启动和执行过程c\nchrome_options.add_argument('--headless')\n#设置lang和User-Agent信息，防止反爬虫检测\nchrome_options.add_argument('lang=zh_CN.UTF-8')\nUserAgent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.101 Safari/537.36'\nchrome_options.add_argument('User-Agent='+UserAgent)\n#启动浏览器并设置chrome_options参数\n\ndriver=webdriver.Chrome(options=chrome_options)\ndriver.get(url)\ndriver.maximize_window()\nprint(driver.title)\n# print(driver.page_source) #获取网页的html代码\n</code></pre>\n<p> </p>\n<h1>元素操作</h1>\n<blockquote>\n<pre>driver.find_element_by_xpath().click()#点击元素\ndriver.find_element_by_xpath().clear()#清空文本\ndriver.find_element_by_xpath().send_keys()#模拟键盘输入\n</pre>\n</blockquote>\n<h1> 页面交互</h1>\n<p>webElement接口提供了一些可以与页面交互的方法</p>\n<p>submit和click在某些情况下可以互换，submit只用于表单的提交按钮。</p>\n<blockquote>\n<pre>driver.find_element_by_xpath().submit()#提交输入框的内容 类似于回车提交搜索框内容\ndriver.find_element_by_xpath().size#返回元素尺寸\ndriver.find_element_by_xpath().text#获取元素文本\ndriver.find_element_by_xpath().get_attribute()#获取元素属性值\ndriver.find_element_by_xpath().is_selected()#是否被选中\ndriver.find_element_by_xpath().is_enabled()#判断元素是否可以使用\ndriver.find_element_by_xpath().is_displayed()#返回元素是否用户可见</pre>\n</blockquote>\n<h1>鼠标事件</h1>\n<p>关于鼠标操作的方法都封装在Actionchains中</p>\n<blockquote>\n<pre>from selenium.webdriver.common.action_chains import ActionChains\nrigt_check=driver.find_element_by_id('kw')\nActionChains(driver).context_click(rigt_check).perform()#context_click对元素右击操作\n#perform()执行所有ActionChains中存储的行为\nActionChains(driver).move_to_element(rigt_check).perform()#鼠标悬停\nActionChains(driver).double_click(rigt_check).perform()#鼠标双击\nActionChains(driver).drag_and_drop(source,target).perform()#鼠标由源元素拖动至目标元素\n</pre>\n<p> </p>\n</blockquote>\n<pre><code class=\"language-python\">url='https://passport.bilibili.com/login'\n\ndriver=webdriver.Chrome()\ndriver.get(url)\n#双击登录按钮\nele=driver.find_element_by_class_name('tit')\nActionChains(driver).double_click(ele).perform()\nsleep(2)\n#拖拽滑块\nele=driver.find_element_by_class_name('gt_slider_knob,gt_show')\nActionChains(driver).drag_and_drop_by_offset(ele,100,0).perform()\n\n</code></pre>\n<p> </p>\n<p><img alt=\"\" height=\"587\" src=\"image\\53d833bf3e9747cd830913c26ec98fbb.png\" width=\"417\"/> </p>\n<p> </p>\n<h1>键盘事件</h1>\n<p>模拟键盘输入，可以是按键，组合键。</p>\n<blockquote>\n<pre>from selenium.webdriver.common.keys import Keys\ndriver.find_element_by_xpath().send_keys(Keys.BACK_SPACE)#对该元素操作一次backspace\ndriver.find_element_by_xpath().send_keys(Keys.SPACE)#对该元素输入空格\ndriver.find_element_by_xpath().send_keys(Keys.CONTROL,'a')#ctrl+A全选输入框内容\ndriver.find_element_by_xpath().send_keys(Keys.CONTROL,'x')#ctrl+x剪切输入框内容\ndriver.find_element_by_xpath().send_keys(Keys.CONTROL,'v')#ctrl+v粘贴内容到输入框\ndriver.find_element_by_xpath().send_keys(Keys.ENTER)#通过回车键代替单击操作\ndriver.find_element_by_xpath().send_keys(Keys.F1)#键盘F1</pre>\n<p> </p>\n</blockquote>\n<pre><code class=\"language-python\">from selenium import webdriver\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.common.by import By\nfrom time import sleep\nurl='https://www.baidu.com'\n\ndriver=webdriver.Chrome()\ndriver.get(url)\nele=driver.find_element_by_id('kw')\nele.send_keys(\"selenium\")\nsleep(2)\n#删除最后一个文字\nele.send_keys(Keys.BACK_SPACE)\nsleep(2)\n\n#添加空格键+教程\nele.send_keys(Keys.SPACE)\nele.send_keys(\"教程\")\nsleep(2)\n\n#ctrl+a全选输入框内容\nele.send_keys(Keys.CONTROL,'a')\nsleep(2)\n\n\n#ctrl+x 剪切输入框内容\nele.send_keys(Keys.CONTROL,'x')\nsleep(2)\n\n\n#ctrl+v 粘贴内容到输入框\nele.send_keys(Keys.CONTROL,'v')\nsleep(2)\n\n#回车键代替单击\ndriver.find_element_by_id('su').send_keys(Keys.ENTER)\n</code></pre>\n<p> </p>\n<h1>获得验证信息</h1>\n<p>自动化用例执行完成后，可以从页面上获取一些信息来证明用例执行成功或者失败</p>\n<blockquote>\n<pre>driver.title #获得页面title\ndriver.current_url#获得页面curl\ndriver.find_element_by_xpath().text#获取元素文本</pre>\n</blockquote>\n<h1> 元素等待</h1>\n<p>由于web页面多数使用AJAX技术，浏览器在加载页面时，页面上的元素可能不是同时被加载完成的，需要加入等待。</p>\n<p>显式等待：显性等待能够根据判断条件而灵活地等待，程序每隔一段时间检测一次，如果检测结果与条件相符，就执行下一步，否则继续等待，直到超过设置的最长时间为止</p>\n<blockquote>\n<pre>from selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nelement=WebDriverWait(driver,5,0.5).until(EC.presence_of_element_located(By.ID,'kw'))\n#每0.5秒检测一次这个元素能否被定位到，5秒后超时\n#expected_conditions提供了很多预期条件判断方法\n#也可以用is_displayed()判断元素是否可见</pre>\n</blockquote>\n<p>隐式等待</p>\n<p>隐性等待是指在一个设定的时间内检测网页是否加载完成，也就是一般情况下用户看到浏览器标签栏那个小圈不再转，才会执行下一步。比如代码中设置30秒等待时间，网页只要在30秒内完成加载就会自动执行下一步，如果超出30秒就会抛出异常。值得注意的是，隐性等待对整个driver的周期都起作用，所以只要设置一次即可。</p>\n<p>通过一定的时长等待页面上某元素加载完成，如果超出了设置的时长元素，还没有被加载，则抛出没有元素异常。</p>\n<p>通常设置在driver后面。</p>\n<blockquote>\n<p> </p>\n<pre>driver.implicitly_wait(10)</pre>\n</blockquote>\n<p>sleep休眠方法</p>\n<p>在需要的地方添加。</p>\n<blockquote>\n<pre>from time import sleep\nsleep(3)\n</pre>\n</blockquote>\n<p>隐性等待和显性等待相比于time.sleep这种强制等待更为灵活和智能，可解决各种网络延误的问题，隐性等待和显性等待可以同时使用，但最长的等待时间取决于两者之间的最大数，如上述代码的隐性等待时间为30秒，显性等待时间为20秒，则该代码的最长等待时间为隐性等待时间。 </p>\n<h1>多框架切换</h1>\n<p>frame是一个框架页面，在HTML 5中已经不支持使用框架，但在一些网站中依然会看到它的身影。frame的作用是在HTML代码中嵌套一个或多个不同的HTML代码，每嵌套一个HTML代码都需要由frame来实现</p>\n<p>iframe和frame实现的功能是相同的，只不过使用方式和灵活性有所不同，无论是iframe还是frame，Selenium的定位和操作方式都是一样的</p>\n<p>由于一个HTML可以嵌套一个或多个iframe，因此Selenium在操作不同的iframe时需要通过switch_to.frame()来切换到指定的iframe，再执行相应的操作 </p>\n<blockquote>\n<pre>driver.switch_to.frame('kw')#可以直接取表单的id或者name属性，如果表单没有这两个属性，可以先定位表单元素，再切换\ndriver.switch_to.parent_frame('kw')#跳出当前一级表单\ndriver.switch_to.default_content('kw')#跳回最外层页面\n#根据索引定位\ndriver.switch_to_frame(0)\n#根据id或者name属性\ndriver.switch_to_frame('framea')\n新版本 driver.switch_to.frame(0)</pre>\n</blockquote>\n<p>如百度知道的文本框<img alt=\"\" height=\"571\" src=\"image\\6bb07990e9e64fb3b3f301a194e6ed4d.png\" width=\"1125\"/> </p>\n<p>如下代码实现打开百度知道题目页面，点击我要回答，定位至iframe，输入内容，跳出iframe，并点击提交回答按钮</p>\n<pre><code class=\"language-python\">url='https://zhidao.baidu.com/question/1903337615241287780.html'\n\ndriver=webdriver.Chrome()\ndriver.get(url)\ndriver.maximize_window()\n#点击我要回答\ndriver.find_element_by_id('answer-bar').click()\n#切换到frame内部的html\ndriver.switch_to.frame('ueditor_0')\n#定位frame内部的元素\ndriver.find_element_by_xpath('/html/body').send_keys('美国')\n#跳回网页HTML 如果不切回网页，则找不到提交回答按钮，且js代码也执行不了\n# driver.switch_to.default_content()\njs='window.scrollTo(0,100)'\ndriver.execute_script(js)\nsleep(3)\n#点击网页提交回答按钮\ndriver.find_element_by_xpath(\"//div[@class='addons line']/a\").click()</code></pre>\n<p> </p>\n<h1> 多窗口切换</h1>\n<blockquote>\n<pre>search_windows=driver.current_window_handle #获得当前窗口句柄\n</pre>\n<pre>all_handles=driver.window_handles #获得所有窗口的句柄</pre>\n<pre>driver.switch_to.window(handle)#切换窗口</pre>\n<pre>handles=driver.window_handles\ndriver.switch_to_window(handles[0])\ndriver.switch_to_window(handles[1])</pre>\n</blockquote>\n<p>应用</p>\n<pre><code class=\"language-python\">from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nurl='https://www.baidu.com/'\ndriver=webdriver.Chrome()\ndriver.get(url)\ndriver.implicitly_wait(10)\nsearch_windows=driver.current_window_handle #获得窗口句柄\ndriver.find_element_by_link_text('登录').click()\ndriver.find_element_by_link_text('立即注册').click()\nimport time\n\n#获得所有窗口的句柄\nall_handles=driver.window_handles\n\n#切换到注册窗口\nfor handle in all_handles:\n    if handle!=search_windows:\n        driver.switch_to.window(handle)\n        print(\"当前是注册窗口\")\n        time.sleep(2)\n\n#回到搜索窗口\nfor handle in all_handles:\n    if handle==search_windows:\n        driver.switch_to.window(handle)\n        print(\"当前是搜索窗口\")\n        driver.find_element_by_id('TANGRAM__PSP_4__closeBtn').click()#关闭注册窗口\n        driver.find_element_by_id('kw').send_keys(\"selenium\")\n        driver.find_element_by_id('su').click()\n        time.sleep(2)\ndriver.quit()\n\n\n\n</code></pre>\n<h1>警告框处理</h1>\n<p>webdriver中处理JavaScript生成的alert,confirm,prompt十分简单，具体做法是使用switch_to_alert方法定位到alert/confirm/prompt，然后使用text/accept/dismiss/send_keys等方法进行操作。</p>\n<p>text：返回alert/confirm/prompt中的文字信息</p>\n<p>accept()：接受现有警告框</p>\n<p>dismiss()：解散现有警告框</p>\n<p>send_keys:发送文本至警告框</p>\n<p>应用，如图切换至alert并接受</p>\n<p><img alt=\"\" height=\"580\" src=\"image\\6b45f23548d943a1ad971d8d41239e8f.png\" width=\"1159\"/></p>\n<pre><code class=\"language-python\">from selenium import webdriver\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium.webdriver.common.by import By\nfrom time import sleep\nurl='https://www.baidu.com/'\ndriver=webdriver.Chrome()\ndriver.get(url)\ndriver.maximize_window()\ndriver.implicitly_wait(10)\n#鼠标悬停至设置链接\nlink=driver.find_element_by_id(\"s-usersetting-top\")\nActionChains(driver).move_to_element(link).perform()\n\ndriver.find_element_by_link_text('搜索设置').click()\n\n#保存设置\ndriver.find_element_by_class_name('prefpanelgo').click()\nsleep(2)\n#接受警告框\n# driver.switch_to_alert().accept()\n\ndriver.quit()\n</code></pre>\n<h1> 上传文件</h1>\n<p>一般文件上传，是打开windows窗口从窗口中选择本地文件，但webdriver无法操作windows控件。</p>\n<p>1、普通上传 将本地文件路径作为值传给input标签，注意必须是input标签</p>\n<p>2、插件上传，基于flash,js,Ajax等技术实现上传</p>\n<blockquote>\n<pre>#定位上传按钮，添加本地文件\ndriver.find_element_by_name('file').send_keys(\"D:\\\\upload_file.txt\")</pre>\n</blockquote>\n<p>另一种方法为基于AutoIt软件来实现上传。但是不推荐，因为不在Python范围。</p>\n<h1>下载文件</h1>\n<p>webdriver允许设置默认的文件下载路径，文件会被自动下载并存放到设置的目录中</p>\n<h1>操作cookie</h1>\n<p>什么情况下回用到cookie操作？当开发人员开发一个功能，当用户登录后，会将用户的用户名写入浏览器cookie，指定key为username，就可以通过get_cookies()找到username，打印value。</p>\n<pre><code class=\"language-python\">url='https://www.youdao.com/'\n\ndriver=webdriver.Chrome()\ndriver.get(url)\ndriver.maximize_window()\ndriver.implicitly_wait(10)\n\n# #获得cookie\n\ndriver.add_cookie({'name':'Login_User','value':'Password'})\ncookie=driver.get_cookies()\nprint(\"所有Cookie为\",cookie)\n#获取name为Login_User的cookie\none_cookie=driver.get_cookie('Login_User')\nprint(\"Login_User的Cookie为\",one_cookie)\n# \"删除name为Login_User的cookie\ndriver.delete_cookie('Login_User')\n\nsurplus_cookies=driver.get_cookies()\nprint(\"剩余的cookie为:\",surplus_cookies)\n\ndriver.delete_all_cookies()\nsurplus_cookies=driver.get_cookies()\nprint(\"剩余的cookie为:\",surplus_cookies)\ndriver.quit()</code></pre>\n<p>返回结果为</p>\n<pre><code class=\"language-python\">所有Cookie为[{\n\t'domain': 'www.youdao.com',\n\t'httpOnly': False,\n\t'name': '___rl__test__cookies',\n\t'path': '/',\n\t'secure': False,\n\t'value': '1662293521877'\n}, {\n\t'domain': '.youdao.com',\n\t'expiry': 1696853521,\n\t'httpOnly': False,\n\t'name': 'OUTFOX_SEARCH_USER_ID',\n\t'path': '/',\n\t'secure': False,\n\t'value': '\"555592633@10.108.162.135\"'\n}, {\n\t'domain': 'www.youdao.com',\n\t'httpOnly': False,\n\t'name': 'Login_User',\n\t'path': '/',\n\t'secure': True,\n\t'value': 'Password'\n}, {\n\t'domain': '.youdao.com',\n\t'expiry': 1696853520,\n\t'httpOnly': False,\n\t'name': 'OUTFOX_SEARCH_USER_ID_NCOO',\n\t'path': '/',\n\t'secure': False,\n\t'value': '1883563674.2397'\n}]\nLogin_User的Cookie为 {\n\t'domain': 'www.youdao.com',\n\t'httpOnly': False,\n\t'name': 'Login_User',\n\t'path': '/',\n\t'secure': True,\n\t'value': 'Password'\n}\n剩余的cookie为: [{\n\t'domain': 'www.youdao.com',\n\t'httpOnly': False,\n\t'name': '___rl__test__cookies',\n\t'path': '/',\n\t'secure': False,\n\t'value': '1662293521877'\n}, {\n\t'domain': '.youdao.com',\n\t'expiry': 1696853521,\n\t'httpOnly': False,\n\t'name': 'OUTFOX_SEARCH_USER_ID',\n\t'path': '/',\n\t'secure': False,\n\t'value': '\"555592633@10.108.162.135\"'\n}, {\n\t'domain': '.youdao.com',\n\t'expiry': 1696853520,\n\t'httpOnly': False,\n\t'name': 'OUTFOX_SEARCH_USER_ID_NCOO',\n\t'path': '/',\n\t'secure': False,\n\t'value': '1883563674.2397'\n}]\n剩余的cookie为: []</code></pre>\n<h1>调用Javascript</h1>\n<p>可以用来控制浏览器滚动条</p>\n<pre><code class=\"language-python\">url='https://www.baidu.com/'\n\ndriver=webdriver.Chrome()\ndriver.get(url)\n\ndriver.find_element_by_id('kw').send_keys(\"selenium\")\ndriver.find_element_by_id('su').click()\ndriver.set_window_size(600,600)\n#通过js设置浏览器窗口的滚动条位置\njs=\"window.scrollTo(500,500);\"\ndriver.execute_script(js)\n\n</code></pre>\n<p><img alt=\"\" height=\"599\" src=\"image\\ba6be203aa7345d8b98ebdfda097e697.png\" width=\"583\"/></p>\n<h1> 窗口截图</h1>\n<pre><code class=\"language-python\">url='https://www.baidu.com/'\n\ndriver=webdriver.Chrome()\ndriver.get(url)\n\ndriver.find_element_by_id('kw').send_keys(\"selenium\")\ndriver.find_element_by_id('su').click()\nsleep(2)\ndriver.get_screenshot_as_file(\"C:\\\\Users\\\\yangyl13\\\\Desktop\\\\3.png\")\ndriver.quit()\n</code></pre>\n<h1>关闭窗口</h1>\n<blockquote>\n<p>driver.quit() #退出相关驱动程序，关闭所有窗口</p>\n<p>driver.close()#关闭单个窗口。</p>\n</blockquote>\n<h1>验证码处理</h1>\n<p>1、测试环境去掉验证码</p>\n<p>2、万能验证码</p>\n<p>3、验证码识别技术 如python-tesseract</p>\n<p>4、记录cookie</p>\n<h1>下拉框选择</h1>\n<blockquote>\n<pre>from selenium.webdriver.support.select import Select\nSelect(driver.find_element_by_id('')).select_by_index('2')#根据下拉框索引选择\nSelect(driver.find_element_by_id('')).select_by_value('Python')#根据下拉框value属性选择\nSelect(driver.find_element_by_id('')).select_by_visible_text('Python')#根据下拉框可见文本选择\n</pre>\n</blockquote>\n</div>\n</div>"}