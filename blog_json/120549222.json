{"blogid": "120549222", "writerAge": "码龄3年", "writerBlogNum": "135", "writerCollect": "1916", "writerComment": "242", "writerFan": "2539", "writerGrade": "5级", "writerIntegral": "2469", "writerName": "小赵小赵福星高照～", "writerProfileAdress": "writer_image\\profile_120549222.jpg", "writerRankTotal": "12149", "writerRankWeekly": "24975", "writerThumb": "616", "writerVisitNum": "114000", "blog_read_count": "12854", "blog_time": "于 2021-09-29 15:18:31 发布", "blog_title": "硬核两万字文章带你C++入门", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"C_0\"></a>C++入门</h1>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#C_0\">C++入门</a></li><li><ul><li><a href=\"#C_3\">C++关键字</a></li><li><a href=\"#_22\">命名空间</a></li><li><a href=\"#C_259\">C++输入&amp;输出</a></li><li><a href=\"#_365\">缺省参数</a></li><li><ul><li><a href=\"#_367\">缺省参数概念</a></li><li><a href=\"#_419\">缺省参数分类</a></li><li><ul><li><a href=\"#_421\">全缺省参数</a></li><li><a href=\"#_440\">半缺省参数</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_513\">函数重载</a></li><li><ul><li><a href=\"#_515\">函数重载概念</a></li><li><a href=\"#_574\">名字修饰</a></li><li><a href=\"#externC_576\">extern\"C\"</a></li></ul>\n</li><li><a href=\"#_632\">引用</a></li><li><ul><li><a href=\"#_634\">引用概念</a></li><li><a href=\"#_691\">引用特性</a></li><li><a href=\"#_733\">常引用</a></li><li><a href=\"#_882\">引用的使用场景</a></li><li><ul><li><a href=\"#_884\">传参</a></li><li><a href=\"#_944\">返回值</a></li></ul>\n</li><li><a href=\"#_1038\">传值、传引用效率比较</a></li><li><ul><li><a href=\"#_1040\">函数传参传值和传引用的效率比较</a></li><li><a href=\"#_1071\">值和引用作为返回值类型的性能比较</a></li></ul>\n</li><li><a href=\"#_1106\">引用和指针的区别</a></li></ul>\n</li><li><a href=\"#_1159\">内联函数</a></li><li><ul><li><a href=\"#_1179\">概念</a></li><li><a href=\"#_1204\">特性</a></li></ul>\n</li><li><a href=\"#autoC11_1214\">auto关键字(C++11)</a></li><li><ul><li><a href=\"#auto_1216\">auto的使用细则</a></li><li><a href=\"#auto_1266\">auto不能推导的场景</a></li></ul>\n</li><li><a href=\"#forC11_1296\">基于范围的for循环(C++11)</a></li><li><ul><li><a href=\"#for_1298\">范围for的语法</a></li><li><a href=\"#for_1342\">范围for的使用条件</a></li></ul>\n</li><li><a href=\"#nullptrC11_1365\">指针空值---nullptr(C++11)</a></li><li><ul><li><a href=\"#C98_1367\">C++98中的指针空值</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"C_3\"></a>C++关键字</h2>\n<p>C语言关健字32个，C++关键字63个关键字</p>\n<table><thead><tr><th align=\"center\">asm</th><th align=\"center\">do</th><th align=\"center\">if</th><th align=\"center\">return</th><th align=\"center\">try</th><th align=\"center\">continue</th></tr></thead><tbody><tr><td align=\"center\"><strong>auto</strong></td><td align=\"center\"><strong>double</strong></td><td align=\"center\"><strong>inline</strong></td><td align=\"center\"><strong>short</strong></td><td align=\"center\"><strong>typedef</strong></td><td align=\"center\"><strong>for</strong></td></tr><tr><td align=\"center\"><strong>bool</strong></td><td align=\"center\"><strong>dynamic_cast</strong></td><td align=\"center\"><strong>int</strong></td><td align=\"center\"><strong>signed</strong></td><td align=\"center\"><strong>typeid</strong></td><td align=\"center\"><strong>public</strong></td></tr><tr><td align=\"center\"><strong>break</strong></td><td align=\"center\"><strong>else</strong></td><td align=\"center\"><strong>long</strong></td><td align=\"center\"><strong>sizeof</strong></td><td align=\"center\"><strong>typename</strong></td><td align=\"center\"><strong>throw</strong></td></tr><tr><td align=\"center\"><strong>case</strong></td><td align=\"center\"><strong>enum</strong></td><td align=\"center\"><strong>mutable</strong></td><td align=\"center\"><strong>static</strong></td><td align=\"center\"><strong>union</strong></td><td align=\"center\"><strong>wchar_t</strong></td></tr><tr><td align=\"center\"><strong>catch</strong></td><td align=\"center\"><strong>explicit</strong></td><td align=\"center\"><strong>namespace</strong></td><td align=\"center\"><strong>static_cast</strong></td><td align=\"center\"><strong>unsigned</strong></td><td align=\"center\"><strong>default</strong></td></tr><tr><td align=\"center\"><strong>char</strong></td><td align=\"center\"><strong>export</strong></td><td align=\"center\"><strong>new</strong></td><td align=\"center\"><strong>struct</strong></td><td align=\"center\"><strong>using</strong></td><td align=\"center\"><strong>friend</strong></td></tr><tr><td align=\"center\"><strong>class</strong></td><td align=\"center\"><strong>extern</strong></td><td align=\"center\"><strong>operator</strong></td><td align=\"center\"><strong>switch</strong></td><td align=\"center\"><strong>virtual</strong></td><td align=\"center\"><strong>register</strong></td></tr><tr><td align=\"center\"><strong>const</strong></td><td align=\"center\"><strong>false</strong></td><td align=\"center\"><strong>private</strong></td><td align=\"center\"><strong>template</strong></td><td align=\"center\"><strong>void</strong></td><td align=\"center\"><strong>true</strong></td></tr><tr><td align=\"center\"><strong>const_cast</strong></td><td align=\"center\"><strong>float</strong></td><td align=\"center\"><strong>protected</strong></td><td align=\"center\"><strong>this</strong></td><td align=\"center\"><strong>volatile</strong></td><td align=\"center\"><strong>while</strong></td></tr><tr><td align=\"center\"><strong>delete</strong></td><td align=\"center\"><strong>goto</strong></td><td align=\"center\"><strong>reinterpret_cast</strong></td><td align=\"center\"></td><td align=\"center\"></td><td align=\"center\"></td></tr></tbody></table>\n<p>C++是在C的基础上发展起来的，C++是兼容C的大多数的语法</p>\n<h2><a id=\"_22\"></a>命名空间</h2>\n<p>C++是怎么输出hello world的呢？和C语言有什么区别呢？</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"hello world\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20210924222743007\" src=\"image\\e2a0fb221a96b46c2c78b5792b105fe9.png\"/></p>\n<blockquote>\n<p><strong>我们创建一个C++文件后，写出上面代码就会在屏幕上打印hello world，那么上面代码中的using namespace std;是什么意思呢？这就是我们要讲的命名空间。</strong></p>\n</blockquote>\n<p>C++增加命名空间是为了解决C语言的不足，在一段C语言代码中，我们编译下面的代码会报错：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token keyword\">int</span> rand <span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> max<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>rand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20210924223143111\" src=\"image\\88f4e3471e34dc3f9524d768376fcbea.png\"/></p>\n<p>那么为什么会报错呢？是因为我们包含了stdlib.h这个头文件</p>\n<p>这是一个命名重定义的问题，在我们编写C语言代码时，我们定义变量名时，可能与库函数中的命名冲突了，实际大型项目开发，还存在同事之间定义的变量、函数、类型命名冲突等等</p>\n<p>所以为了弥补C语言的不足，C++提出了命名空间来解决命名冲突的问题</p>\n<p>那么命名空间是怎么定义的呢？</p>\n<blockquote>\n<p><strong>定义命名空间，需要使用到namespace关键字，后面跟命名空间的名字，然后接一对{}即可，{}中即为命名空间的成员。注意：一个命名空间就定义了一个新的作用域，命名空间中的所有内容都局限于该命名空间中</strong></p>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token keyword\">namespace</span> Z<span class=\"token comment\">//会将外面的定义的变量隔离开来，定义了一个命名空间域，名字叫Z</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//可以定义变量、函数、类型</span>\n    <span class=\"token keyword\">int</span> rand <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>Z<span class=\"token operator\">::</span>rand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//::域作用限定符</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>::是域作用限定符，通过这个我们可以找到命名空间中的定义的变量或者其他东西，这样我们就可以定义rand，并可以成功的打印它</strong></p>\n</blockquote>\n<p><img alt=\"image-20210924224726053\" src=\"image\\4b48527fa7829fa79b87a2cb178aafb1.png\"/></p>\n<p>我们也可以在里面定义函数：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token keyword\">namespace</span> Z<span class=\"token comment\">//会将外面的定义的变量隔离开来，定义了一个命名空间域，名字叫Z</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//可以定义变量、函数、类型</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> left<span class=\"token operator\">+</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//直接调用他找不到，因为他只会在全局里面找，不会去域里面</span>\n    <span class=\"token class-name\">Z</span><span class=\"token operator\">::</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>  \n</code></pre>\n<blockquote>\n<p><strong>这里需要注意的是直接调用他找不到，因为他只会在全局里面找，不会去域里面，所以我们需要利用域作用限定符去调用Add函数</strong></p>\n</blockquote>\n<p><strong>命名空间还可以嵌套定义：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> Z<span class=\"token comment\">//会将外面的定义的变量隔离开来，定义了一个命名空间域</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//定义变量、函数、类型</span>\n    <span class=\"token keyword\">int</span> rand <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> left<span class=\"token operator\">+</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">namespace</span> S<span class=\"token comment\">//会将外面的定义的变量隔离开来，定义了一个命名空间域</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> left<span class=\"token operator\">-</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//直接调用他找不到，因为他只会在全局里面找，不会去域里面</span>\n    <span class=\"token class-name\">Z</span><span class=\"token operator\">::</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Z<span class=\"token operator\">::</span><span class=\"token class-name\">S</span><span class=\"token operator\">::</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>  \n</code></pre>\n<blockquote>\n<p><strong>我们在调用嵌套的命名空间的函数时，比如我们现在调用Sub函数，我们需要用Z::S::Sub(1,2);去调用该函数</strong></p>\n</blockquote>\n<p>在一项工程当中不同文件的命名空间的定义名字可以相同，并且该命名空间中的定义编译器会合并在一起，比如：</p>\n<p>在Add.cpp这个文件中我们定义了一个命名空间</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> Z<span class=\"token comment\">//会将外面的定义的变量隔离开来，定义了一个命名空间域</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//定义变量、函数、类型</span>\n    <span class=\"token keyword\">int</span> rand <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在Add.h中我们定义了命名空间</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> Z<span class=\"token comment\">//会将外面的定义的变量隔离开来，定义了一个命名空间域</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//定义变量、函数、类型</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> left<span class=\"token operator\">+</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>编译器会将这两个文件中定义的空间进行合并：</p>\n<pre><code class=\"prism language-c\">namespace Z<span class=\"token comment\">//会将外面的定义的变量隔离开来，定义了一个命名空间域</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//定义变量、函数、类型</span>\n    <span class=\"token keyword\">int</span> rand <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> left<span class=\"token operator\">+</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>那么我们如何使用命名空间的东西呢？</p>\n<p><strong>有三种方式：</strong></p>\n<ul><li><strong>1、全部直接展开到全局</strong></li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> Z<span class=\"token comment\">//会将外面的定义的变量隔离开来，定义了一个命名空间域</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//定义变量、函数、类型</span>\n    <span class=\"token keyword\">int</span> rand <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> left<span class=\"token operator\">+</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> Z<span class=\"token punctuation\">;</span><span class=\"token comment\">//将Z命名空间展开</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>优点是用起来方便。缺点是把自己的定义暴露出去了，导致命名污染</strong></p>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><span class=\"token comment\">//std是包含C++标准库的命名空间</span>\n</code></pre>\n<blockquote>\n<p><strong>std是包含C++标准库的命名空间，这里其实就将C++标准库展开了，这就解释了我们开头打印hello world时，前面为什么有一个using namespace std;这里就很好的解释了这个代码的意思</strong></p>\n</blockquote>\n<ul><li><strong>2、访问每个命名空间中的东西时，指定命名空间</strong></li></ul>\n<pre><code class=\"prism language-c\">namespace Z<span class=\"token comment\">//会将外面的定义的变量隔离开来，定义了一个命名空间域</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//定义变量、函数、类型</span>\n    <span class=\"token keyword\">int</span> rand <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> left<span class=\"token operator\">+</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Z<span class=\"token operator\">::</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>优点：不存在命名污染。缺点：用起来麻烦，每个都得去指定命名空间</strong></p>\n</blockquote>\n<ul><li><strong>3、将命名空间中常用的展开</strong></li></ul>\n<pre><code class=\"prism language-c\">namespace Z<span class=\"token comment\">//会将外面的定义的变量隔离开来，定义了一个命名空间域，名字叫Z</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//可以定义变量、函数、类型</span>\n    <span class=\"token keyword\">int</span> rand <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    using Z<span class=\"token operator\">::</span>Add<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>不会造成大面积的污染，也可以解决每个都指定命名空间的问题，这是一个将1和2折中的解决方案</strong></p>\n</blockquote>\n<hr/>\n<h2><a id=\"C_259\"></a>C++输入&amp;输出</h2>\n<p>这又回到了我们开始提到的C++是怎么输出hello world到屏幕上的，我们来看下C++是如何来实现的：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token comment\">//展开常用的</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"hello world\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>按照上面我们所讲的，std是一个命名空间，命名空间中有我们要使用的cout和endl，所以我们这里只将常用的展开，但是在日常学习中，我们并不需要像项目中那么规范，我们可以直接将std命名空间展开。</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token comment\">//展开常用的</span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"hello world\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们了解了输出，那么C++是如何进行输入的呢？我们使用cin标准输入，看下面代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token comment\">//展开常用的</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">&gt;&gt;</span> n<span class=\"token punctuation\">;</span><span class=\"token comment\">//&gt;&gt;输入运算符 流提取运算符</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cin<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n    \tcout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&lt;&lt;输出运算符/流插入运算符  可以连续输出</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//等价于</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20210924231820389\" src=\"image\\2fa81f2f1a74e4e4104ff0fcd2623902.png\"/></p>\n<blockquote>\n<p><strong>注意：使用cout标准输出(控制台)和cin标准输入(键盘)时，必须包含&lt; iostream &gt;头文件以及std标准命名空间。早期标准库将所有功能在全局域中实现，声明在.h后缀的头文件中，使用时只需包含对应头文件即可，后来将其实现在std命名空间下，为了和C头文件区分，也为了正确使用命名空间，规定C++头文件不带.h；旧编译器(vc 6.0)中还支持&lt;iostream.h&gt;格式，后续编译器已不支持，因此推荐使用+std的方式。</strong></p>\n<p><strong>我们在输出时可以连续输出，cout&lt;&lt;endl;实际上就等价于cout&lt;&lt;\"\\n\"。</strong></p>\n</blockquote>\n<p>另外C语言输入输出时需要指定类型的，C++不用指定类型可以自动识别类型：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">double</span><span class=\"token operator\">*</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cin<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//自动识别类型</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">1.111</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pi <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span>endl\n    cout<span class=\"token operator\">&lt;&lt;</span>d<span class=\"token operator\">&lt;&lt;</span>endl\n    cout<span class=\"token operator\">&lt;&lt;</span>pi<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20210924232142152\" src=\"image\\bface1a2f77ae6ba52e8ff050f4ad753.png\"/></p>\n<blockquote>\n<p><strong>在写C语言printf和scanf函数时，前面我们需要指定输入输出的格式，而C++则是自动识别类型。</strong></p>\n</blockquote>\n<p>而在下面的场景中，用printf会更好一点</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"名字:\"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"年龄:\"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"名字:%s 年龄:%d\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h2><a id=\"_365\"></a>缺省参数</h2>\n<h3><a id=\"_367\"></a>缺省参数概念</h3>\n<blockquote>\n<p><strong>所谓缺省参数，顾名思义，就是在声明函数的某个参数的时候为之指定一个默认值，在调用该函数的时候如果采用该默认值，你就不需要传参。可以传参数，也可以不传，如果不传，函数参数用缺省的</strong></p>\n</blockquote>\n<p>我们看下面代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//参数缺省值</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//不传会用默认值</span>\n    <span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//传了就缺省参数就没用了</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20210924232602375\" src=\"image\\db5f8d9060f00687806a5c2aa341685b.png\"/></p>\n<blockquote>\n<p><strong>我们可以看到没有传参的使用了缺省值，而传参的就忽略缺省值了，只考虑传过来的参数</strong></p>\n</blockquote>\n<p><strong>那么缺省参数有什么用呢？</strong></p>\n<p>我们在数据结构中，设计栈这个数据结构时：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">StackInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">*</span> ps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> defaultCP<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 假设我明确知道这里至少要存100个数据到st1里面去</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span> st1<span class=\"token punctuation\">;</span> \n<span class=\"token function\">StackInit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st1<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><strong>如果我们假设明确知道一个栈st1最少使用100个空间，我们给栈的容量初始化为100，所以这时我们在栈初始化这个接口引入一个参数defaultCP，我们想要弄100个容量，我们直接传参100就可以了。</strong></p>\n</blockquote>\n<p>但是当我们不能明确知道栈st2的需要使用的空间，如果上面不设置缺省参数，那么我们必须要传一个值进去，那我们传的值大了的话，会造成空间浪费，传的小了的话会不够用，那么此时这个缺省参数就派上用场了，我们这样定义：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">StackInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">*</span> ps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> defaultCP <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span> st2<span class=\"token punctuation\">;</span> \n<span class=\"token function\">StackInit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><strong>不传值时默认它为4，不够了再进行扩容就可以了</strong></p>\n</blockquote>\n<hr/>\n<h3><a id=\"_419\"></a>缺省参数分类</h3>\n<h4><a id=\"_421\"></a>全缺省参数</h4>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"a = \"</span><span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"b = \"</span><span class=\"token operator\">&lt;&lt;</span>b<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"c = \"</span><span class=\"token operator\">&lt;&lt;</span>c<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>全缺省参数顾名思义就是全部都有缺省参数，我们在传参时不能间隔着传，比如：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这样是错误的</span>\n</code></pre>\n<p><strong>编译器是不允许这样进行传参的</strong></p>\n</blockquote>\n<h4><a id=\"_440\"></a>半缺省参数</h4>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"a = \"</span><span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"b = \"</span><span class=\"token operator\">&lt;&lt;</span>b<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"c = \"</span><span class=\"token operator\">&lt;&lt;</span>c<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//没有缺省的必须传参</span>\n    <span class=\"token comment\">//半缺省参数必须从右往左依次来给出，不能间隔着给</span>\n    <span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><mark>注意：</mark></p>\n<ul><li><code>没有缺省的必须传参</code></li></ul>\n<blockquote>\n<p><strong>比如这上面的a参数必须要传参</strong></p>\n</blockquote>\n<ul><li><code>半缺省参数必须从右往左依次来给出，不能间隔着给</code></li></ul>\n<p><strong>比如：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p><strong>这样就是错误的，没有按照从右往左的顺序</strong></p>\n</blockquote>\n<p><strong>也不能这样：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li><code>缺省参数不能在函数声明和定义中同时出现</code></li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//a.h</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//a.c</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 注意：如果生命与定义位置同时出现，恰巧两个位置提供的值不同，那编译器就无法确定到底该用那个缺省值。</span>\n</code></pre>\n<blockquote>\n<p><strong>如果生命与定义位置同时出现，恰巧两个位置提供的值不同，那编译器就无法确定到底该用那个缺省值。</strong></p>\n</blockquote>\n<ul><li><code>缺省值必须是常量或者全局变量</code></li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//error</span>\n</code></pre>\n<ul><li><code>C语言不支持（编译器不支持）</code></li></ul>\n<blockquote>\n<p><strong>C语言是不支持缺省参数的。</strong></p>\n</blockquote>\n<hr/>\n<h2><a id=\"_513\"></a>函数重载</h2>\n<h3><a id=\"_515\"></a>函数重载概念</h3>\n<blockquote>\n<p><strong>重载函数是函数的一种特殊情况，为方便使用，C++允许在同一范围中声明几个功能类似的同名函数，但是这些同名函数的形式参数（指参数的个数、类型或者类型顺序）必须不同，也就是说用同一个函数完成不同的功能。</strong></p>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//函数重载</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> left<span class=\"token operator\">+</span>right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> left<span class=\"token operator\">+</span>right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">long</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> left<span class=\"token operator\">+</span>right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//会调用对应参数类型的函数</span>\n    <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">20.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10L</span><span class=\"token punctuation\">,</span><span class=\"token number\">20L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>函数重载面试：为什么C++支持函数重载，而C语言不支持？</p>\n<blockquote>\n<p><strong>C编译器，直接用函数名关联，当函数名相同时，它无法区分</strong></p>\n<p><strong>C++如何支持重载呢？</strong></p>\n<p><strong>函数名修饰规则：不能直接用函数名对函数进行修饰，代入参数特点修饰，函数名相同，只要参数不同，修饰出来的名字就不同，就可以区分两个函数了，就支持重载了，把定义在文件中的函数调用，地址找到(符号表里找)，链接在一起，所有.o文件进行合并，生成一个执行文件。</strong></p>\n</blockquote>\n<p><strong>函数重载：</strong></p>\n<p>要求参数不同，因为参数不同修饰出来的名字就不同</p>\n<p>编译器能不能实现函数名相同参数相同返回值不同，就能构成重载？</p>\n<blockquote>\n<p>不行</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//-&gt; _Z4ifunc</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//-&gt; _Z4dfunc</span>\n</code></pre>\n<p><strong>如果把返回值带进修饰规则，那么编译器层面是可以区分的。但是语法调用层面，无法区分，带有严重的歧义！</strong></p>\n<p><strong>执行func()时;调用时，到底是调用哪个呢？这是不知道的，所以不能</strong></p>\n</blockquote>\n<hr/>\n<h3><a id=\"_574\"></a>名字修饰</h3>\n<h3><a id=\"externC_576\"></a>extern\"C\"</h3>\n<p>对于extern\"C\"的讲解我们举一个例子：</p>\n<blockquote>\n<p><strong>C++实现编写成动态库或者静态库，写一个C++的程序去调用这个库是没问题的，但是我们写一个C程序就不行，程序是因为链接时会有问题，比如静态库有一个函数void* tcmalloc(size_t n) (谷歌提供的更高效替代malloc的库)<br/> C程序在链接时，直接用函数名tcmalloc去找函数的地址，但是因为C++有名字修饰，而生成的符号表是：0x662521：_Z8tcmallocui，而C++是用_Z8tcmallocui去找的，C++可以找到，因为该动态库是C++写的，而C语言程序就找不到，因为直接用函数名tcmalloc去找函数的地址，匹配不到</strong></p>\n</blockquote>\n<p><strong>那么有什么方式能让C程序和C++的程序都能用这个C++的库呢？</strong></p>\n<blockquote>\n<p><strong>C++就出现了extern\"C\"，在声明tcmalloc这个函数时在前面加extern\"C\" void* tcmalloc(size_t n)，此时符号表按C语言修饰规则就成为了0x662521：tcmalloc，这时C程序就能正确的找到了，C++程序中有tcmaloc函数的声明，此时它发现前面有extern\"C\"，就按C语言修饰规则去找，因为C++兼容C，所有C的修饰规则它也是知道的。</strong></p>\n</blockquote>\n<p><strong>总结：</strong></p>\n<blockquote>\n<p><strong>当C的程序和C++的程序都想调用一个C++实现的模块时，C++可以调，但C语言不能调，那么两个都想调用时，我们就在C++实现的该模块里面函数声明时在前面加extern\"C\"，那么生成的符号表里面就不对这个函数进行修饰了，这时C语言实现的程序就可以调用它了，紧接着C++程序在调用时，因为C++是兼容C的，发现函数的声明有extern\"C\"，所以就在链接的时候按C的规则去找这个模块的函数</strong></p>\n</blockquote>\n<p><strong>面试题：</strong></p>\n<p>下面两个函数能不能构成函数重载？</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"void TestFunc(int)\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"void TestFunc(int)\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ra <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span><span class=\"token comment\">//&lt;====定义引用类型</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ra<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>不行，重载必须要函数参数列表不同，因为这样才在名字修饰时有所区别，能够区分函数。</strong></p>\n</blockquote>\n<p>C语言中为什么不能支持函数重载？</p>\n<blockquote>\n<p><strong>C编译器，直接用函数名关联，当函数名相同时，它无法区分</strong></p>\n</blockquote>\n<p>C++中函数重载底层是怎么处理的？</p>\n<blockquote>\n<p><strong>在链接阶段，有符号表的合并与重定义，那么函数名相同那么他们重载函数符号表会不会冲突呢？答案是不会的，C++有自己的名字修饰规则，比如重载函数参数类型一个为int，另一个为float，在名字修饰时，就会将这些信息代入进去，这样就区分了两个函数。</strong></p>\n</blockquote>\n<p>C++中能否将一个函数按照C的风格来编译？</p>\n<blockquote>\n<p><strong>可以，在该函数前面加extern\"C\"即可，C++程序中有函数的声明，发现有extern\"C\"，就按C语言修饰规则去找，因为C++兼容C，所有C的修饰规则它也是知道的</strong></p>\n</blockquote>\n<hr/>\n<h2><a id=\"_632\"></a>引用</h2>\n<h3><a id=\"_634\"></a>引用概念</h3>\n<blockquote>\n<p><strong>引用并不是新定义一个变量，而是给已存在的变量取了一个别名，编译器不会为引用变量开辟内存空间，它和它引用的变量共用同一块内存空间</strong></p>\n<p><strong>语法：类型&amp; 引用变量名 = 引用实体;</strong></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ra <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span><span class=\"token comment\">//ra是a的引用，引用也就是别名，a再取了一个名称ra</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>ra是a的引用，引用也就是别名，a再取了一个名称ra</strong></p>\n</blockquote>\n<p>我们可以重复引用，也可以对本身是引用的变量名再次进行引用，例如：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ra <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> c <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们随便改变一个变量都会变，因为他们共用同一块空间 ：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ra <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> c <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n    \n    b<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们可以进行调试观察：</p>\n<p><img alt=\"image-20210925170136531\" src=\"image\\44e8109c87d56de0b0f4d0ad632f576d.png\"/></p>\n<p><img alt=\"image-20210926195245139\" src=\"image\\057455a76958a79b59177281ca8130e4.png\"/></p>\n<blockquote>\n<p><strong>发现四个变量都变成了4，并且他们共用一块空间</strong></p>\n</blockquote>\n<hr/>\n<h3><a id=\"_691\"></a>引用特性</h3>\n<ul><li class=\"task-list-item\"><input checked=\"true\" class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>引用必须在定义的时候初始化</strong></li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ra<span class=\"token punctuation\">;</span><span class=\"token comment\">//error</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20210925170938884\" src=\"image\\570e2d7953bbbf4aa8bbf96b0a77c91d.png\"/></p>\n<ul><li class=\"task-list-item\"><input checked=\"true\" class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>一个变量可以多个引用</strong></li></ul>\n<blockquote>\n<p><strong>这个在前面已经证实了</strong></p>\n</blockquote>\n<ul><li class=\"task-list-item\"><input checked=\"true\" class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> <strong>一个引用有了一个实体就不能有其他实体</strong></li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token operator\">=</span>d<span class=\"token punctuation\">;</span><span class=\"token comment\">//分析：这里是c变成了d的引用呢还是将d赋值给c</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20210925171623078\" src=\"image\\9b4e1197625c99dac1907b4b0ebfb1dc.png\"/></p>\n<blockquote>\n<p><strong>我们可以看到a和c的地址是一样的，说明c没有变成d的引用，而a变成了2，说明c=d而是将d赋值给c</strong></p>\n</blockquote>\n<hr/>\n<h3><a id=\"_733\"></a>常引用</h3>\n<p>我们前面说的引用是这样的：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\">//b的类型是int，而不是int&amp;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这样当然是可以的，但是看下面代码，这样可以吗？</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\">//b的类型是int，编译不通过，原因：a是只读，b的类型是int，也就是可读可写的，所以不行</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>b的类型是int，编译不通过，原因：a是只读，b的类型是int，也就是可读可写的，变成你的别名，还能修改你，所以不行</strong></p>\n</blockquote>\n<p>所以需要这样写：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>那么这样写可以吗？</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\">//行不行？</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>这样写是可以的，a是可读可写的，b变成别名是只读，变成a的别名，不修改你，这样是可以的。但是b是不可以改的(b是const修饰，只读不能写)，但是a可以改，并不是每个别名和原名字有一样的权限</strong></p>\n</blockquote>\n<p><strong>总结：</strong></p>\n<blockquote>\n<p><strong>引用取别名时，变量访问的权限可以缩小，不能放大</strong></p>\n</blockquote>\n<p>**那么这个有什么用呢？**比如我们再学习数据结构—栈的实现时：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> top<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>ST<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackInit</span><span class=\"token punctuation\">(</span>ST<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 这里传引用是为了形参的改变，影响实参</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\ts<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintStack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ST<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>  \n<span class=\"token comment\">// 1、传引用是为了减少传值传参时的拷贝  </span>\n<span class=\"token comment\">// 2、可以保护形参形参不会被改变</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 总结：函数传参如果想减少拷贝用了引用传参，如果函数中不改变这个参数</span>\n<span class=\"token comment\">// 最好用const 引用传参</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tST st<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">StackInit</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// ...</span>\n\t<span class=\"token function\">PrintStack</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>我们通常是结构体传指针，因为这样可以不进行拷贝，就节省了空间的消耗，我们现在用引用也可以实现，PrintStack这个函数的实现我们不希望修改结构体成员变量，故这就用到了我们前面讲的常引用，在前面加const就不能改变结构体成员变量了，这样可以增加代码的健壮性，假设函数里面有修改结构体成员变量的操作，这里就会被检查报错，总结一下：传引用的好处是什么呢？</strong> <mark>1、传引用是为了减少传值传参时的拷贝 2、可以保护形参，形参不会被改变</mark></p>\n</blockquote>\n<p><strong>const引用做参数的第二个好处：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// const引用做参数的第二个好处，既可接收变量，也可以接收常量</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<blockquote>\n<p><strong>func该函数既可接收变量，也可以接收常量，const引用在实际当中的作用：函数传参如果想减少拷贝用引用传参，如果函数中不改变这个参数，最好用const引用传参</strong></p>\n</blockquote>\n<p>下面我们再来看常引用的另外的知识，首先我们看下面代码：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">//隐式类型转化</span>\n</code></pre>\n<p>这样写是可以的，那么这样写可以嘛？</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>d <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>f <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><strong>这样是不行的，但是加上const就可以了</strong></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>d <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>f <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>为什么呢？要理解这个我们首先就要看一下这个赋值：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">//隐式类型转化</span>\n</code></pre>\n<blockquote>\n<p><strong>这里的赋值实际上并没有直接把i给d，隐式类型转化实际上中间产生了一个double的临时变量，i给这个临时变量，这个临时变量再给d，不光隐式类型转化产生临时变量，而且整型提升也会产生临时变量</strong></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>d <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>f <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><strong>这里就可以解释为什么加const可以，不加const不可以了，因为中间会产生一个double的临时变量，它们引用的不是i，而是引用的这个临时变量，而临时变量具有常性，而没有const时，d和f都是可读可写的，而该临时变量是只读的，故将权限放大了，所以不行，加上const，都是只读的，所以是可以的。</strong></p>\n</blockquote>\n<hr/>\n<h3><a id=\"_882\"></a>引用的使用场景</h3>\n<h4><a id=\"_884\"></a>传参</h4>\n<p>我们之前是如何编写一个函数交换两个数的呢？我们需要传地址，用指针去接收</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p2<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这是之前我们交换两个数的代码，但是有了引用之后我们可以这样写：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> rx<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ry<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> rx<span class=\"token punctuation\">;</span>\n    rx <span class=\"token operator\">=</span> ry<span class=\"token punctuation\">;</span>\n    ry <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>因为rx是x的引用，ry是y的引用，他们的地址是一样的，操作rx和ry就相当于操作x和y</strong></p>\n</blockquote>\n<p>下面我们来看一个指针变量的引用：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span> p3 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span><span class=\"token comment\">//p3是p1的别名</span>\n    <span class=\"token operator\">*</span>p3 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    p3 <span class=\"token operator\">=</span>p2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20210926204302620\" src=\"image\\b1f7d64c6f0db8ab52c09e642994f20e.png\"/></p>\n<p>这是前六行代码的图解，那么第7行第8行代码执行后会是什么样子呢？</p>\n<p><img alt=\"image-20210926204556796\" src=\"image\\06ec21dacec3909e0f0e3b577b60dc07.png\"/></p>\n<blockquote>\n<p>x变成10，p1和p2、p3都指向了y</p>\n</blockquote>\n<h4><a id=\"_944\"></a>返回值</h4>\n<p>首先我们先看这个代码：</p>\n<p><strong>传值返回：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Add(1, 2) is :\"</span><span class=\"token operator\">&lt;&lt;</span> ret <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>这里返回的不是c，是将c拷贝给临时变量，临时变量做返回值</strong></p>\n<p><strong>如果比较小，通常是寄存器</strong></p>\n<p><strong>如果比较大，会在main中开一块临时空间</strong></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Add(1, 2) is :\"</span><span class=\"token operator\">&lt;&lt;</span> ret <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>这里返回的不是c，将c拷贝给临时变量，而是临时变量做返回值，而临时变量具有常性，所以接受的ret引用返回值需要加const</strong></p>\n</blockquote>\n<p><strong>下面这段代码会输出什么呢？</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Add(1, 2) is :\"</span><span class=\"token operator\">&lt;&lt;</span> ret <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20210927150519136\" src=\"image\\0e8dd2a0d81d2c6ae228c73a606141f4.png\"/></p>\n<blockquote>\n<p><strong>函数Add在返回时，int&amp; temp = c;temp是c的别名，将c的别名temp返回(其实就是n)，ret是temp的别名，即ret是c的别名，返回后第一次调用的Add函数栈帧就销毁了，但是这里销毁并不是空间不存在了，而是空间的使用权不是你的了，再次调用时，开辟相同大小的栈帧，c变成了7，又因为ret是c的别名，故ret最后打印为7，这里就算不调用Add(3,4)程序也是有问题的，结果是不确定的，因为这取决于编译器在栈帧销毁的时候会不会清理，如果恰好编译器没有清理，那么结果可能是对的，但是过程是不正确的，要是编译器清理了的话，就会是随机值</strong></p>\n</blockquote>\n<p><img alt=\"image-20210927155703583\" src=\"image\\ec97f3e456e5daf56ce604fe2094b479.png\"/></p>\n<p>这里说明了如果返回的变量是一个局部变量时，引用返回是不安全的，因为当你调用完函数后，会销毁函数栈帧，这块空间已经不属于你了，但是你还是在通过引用能使用到，故这里发生了非法访问空间</p>\n<p>那么这段代码有没有解决方法呢？c前面加static就可以了：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Add(1, 2) is :\"</span><span class=\"token operator\">&lt;&lt;</span> ret <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>因为在加了static后，c就不是在Add函数的栈帧建立空间了，而是在静态区建立空间</strong></p>\n</blockquote>\n<p><strong>总结：</strong></p>\n<blockquote>\n<p><strong>一个函数要使用引用返回，该返回变量出了这个函数的作用域还存在，就可以使用引用返回，否则返回变量会销毁，就不安全</strong></p>\n</blockquote>\n<hr/>\n<h3><a id=\"_1038\"></a>传值、传引用效率比较</h3>\n<h4><a id=\"_1040\"></a>函数传参传值和传引用的效率比较</h4>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h&gt;</span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestFunc1</span><span class=\"token punctuation\">(</span>A a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestFunc2</span><span class=\"token punctuation\">(</span>A<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestRefAndValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    A a<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 以值作为函数参数</span>\n    <span class=\"token class-name\">size_t</span> begin1 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    \t<span class=\"token function\">TestFunc1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">size_t</span> end1 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 以引用作为函数参数</span>\n    <span class=\"token class-name\">size_t</span> begin2 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    \t<span class=\"token function\">TestFunc2</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">size_t</span> end2 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 分别计算两个函数运行结束后的时间</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"TestFunc1(A)-time:\"</span> <span class=\"token operator\">&lt;&lt;</span> end1 <span class=\"token operator\">-</span> begin1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"TestFunc2(A&amp;)-time:\"</span> <span class=\"token operator\">&lt;&lt;</span> end2 <span class=\"token operator\">-</span> begin2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20210929101913524\" src=\"image\\bc14dcdadae298d3edfe92729fda4f63.png\"/></p>\n<h4><a id=\"_1071\"></a>值和引用作为返回值类型的性能比较</h4>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h&gt;</span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nA a<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 值返回</span>\nA <span class=\"token function\">TestFunc1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 引用返回</span>\nA<span class=\"token operator\">&amp;</span> <span class=\"token function\">TestFunc2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestReturnByRefOrValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 以值作为函数的返回值类型</span>\n    <span class=\"token class-name\">size_t</span> begin1 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    \t<span class=\"token function\">TestFunc1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">size_t</span> end1 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 以引用作为函数的返回值类型</span>\n    <span class=\"token class-name\">size_t</span> begin2 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    \t<span class=\"token function\">TestFunc2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">size_t</span> end2 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 计算两个函数运算完成之后的时间</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"TestFunc1 time:\"</span> <span class=\"token operator\">&lt;&lt;</span> end1 <span class=\"token operator\">-</span> begin1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"TestFunc2 time:\"</span> <span class=\"token operator\">&lt;&lt;</span> end2 <span class=\"token operator\">-</span> begin2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20210929123209100\" src=\"image\\d0366fa834dce6a8e72bbaf78a8e562b.png\"/></p>\n<hr/>\n<h3><a id=\"_1106\"></a>引用和指针的区别</h3>\n<blockquote>\n<p><strong>在语法概念上引用就是一个别名，没有独立空间，和其引用实体共用一块空间，指针变量是开辟一块空间，存储变量的地址</strong></p>\n<p><strong>在底层实现的角度，引用也是有空间的，因为引用是按指针的方式来实现的</strong></p>\n</blockquote>\n<p><strong>指针的汇编代码：</strong></p>\n<p><img alt=\"image-20210929124506503\" src=\"image\\d8893763455ebeaee9fd2a6b36b50f89.png\"/></p>\n<p><strong>引用的汇编代码：</strong></p>\n<p><img alt=\"image-20210929124540648\" src=\"image\\8e0086bf311a347d14710b804753a169.png\"/></p>\n<blockquote>\n<p><strong>引用的定义和引用访问跟指针定义和指针解引用在汇编层完全类似。</strong></p>\n</blockquote>\n<p><strong>引用和指针的不同点:</strong></p>\n<ul><li> <p>引用在定义时必须初始化，指针没有要求</p> </li><li> <p>引用概念上定义一个变量的别名，指针存储一个变量地址</p> </li><li> <p>引用在初始化时引用一个实体后，就不能再引用其他实体，而指针可以在任何时候指向任何一个同类型实体</p> </li><li> <p>没有NULL引用，但有NULL指针</p> </li><li> <p>在sizeof中含义不同：引用结果为引用类型的大小(与类型有关)，但指针始终是地址空间所占字节个数(32位平台下占4个字节)(与类型无关)</p> </li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span><span class=\"token operator\">*</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> ra <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\tra <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"指针pa的大小：%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"引用ra的大小：%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ra<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><img alt=\"image-20210929125134754\" src=\"image\\ed9caf879b6c152b0c1c2b10130501b0.png\"/></p>\n</blockquote>\n<ul><li> <p>引用自加即引用的实体增加1，指针自加即指针向后偏移一个类型的大小</p> </li><li> <p>访问实体方式不同，指针需要显式解引用，引用编译器自己处理</p> </li><li> <p>引用比指针使用起来相对更安全</p> </li></ul>\n<hr/>\n<h2><a id=\"_1159\"></a>内联函数</h2>\n<p>假设swap这样的函数被频繁调用，能否有什么优化的方法？用法不变，不建立栈帧呢？</p>\n<p>C语言的方法是什么呢？宏</p>\n<blockquote>\n<p><strong>宏这个东西虽然很有价值，但是他有不少缺点</strong></p>\n<p><strong>1、语法复杂，主义的细节多，容易出错</strong></p>\n<p><strong>2、没有类型安全的检查，在预处理阶段已经替换</strong></p>\n<p><strong>3、不能调试</strong></p>\n</blockquote>\n<p>又有些东西来替代宏：推荐用const、enum、inline替代宏</p>\n<hr/>\n<h3><a id=\"_1179\"></a>概念</h3>\n<blockquote>\n<p><strong>如果一个函数是内联的，那么在编译时，编译器会把该函数的代码副本放置在每个调用该函数的地方。对内联函数进行任何修改，都需要重新编译函数的所有客户端，因为编译器需要重新更换一次所有的代码，否则将会继续使用旧的函数。如果想把一个函数定义为内联函数，则需要在函数名前面放置关键字<code>inline</code>，在调用函数之前需要对函数进行定义。</strong></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//调用的地方展开，没有函数栈帧的建立</span>\n<span class=\"token comment\">//inline debug是不会展开的，是可以调试的</span>\n<span class=\"token comment\">//release或者debug设置一下优化等级才会展开</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20210928092920661\" src=\"image\\9745ffadf3cb90691d446f3f529d9f7b.png\"/></p>\n<blockquote>\n<p><strong>我们可以看到汇编代码中，没有Add函数的call</strong></p>\n</blockquote>\n<hr/>\n<h3><a id=\"_1204\"></a>特性</h3>\n<ol><li>inline是一种以空间换时间的做法，省去调用函数额开销。所以代码很长或者有循环/递归的函数不适宜使用作为内联函数。</li><li>inline对于编译器而言只是一个建议，编译器会自动优化，如果定义为inline的函数体内有循环/递归等，编译器优化时会忽略掉内联。</li><li>inline不建议声明和定义分离，分离会导致链接错误。因为inline被展开，就没有函数地址了，链接就会找不到。</li></ol>\n<blockquote>\n<p><strong>普通函数在链接阶段找函数定义，而内联是在编译阶段找函数定义，如果内联函数定义定义在头文件中，所有包含该头文件的编译单元都可以正确找到函数定义，然而，如果内联函数定义在编译单元A中，那么在其他编译单元中调用fun()的地方将无法解析该符号，因为编译单元A生成目标文件A.obj，内联函数fun()已经被替换掉，A.obj中不再有fun这个符号，链接器自然无法解析，所以，如果一个内联函数会在多个源文件当中用到，那么必须定义在头文件中</strong></p>\n</blockquote>\n<hr/>\n<h2><a id=\"autoC11_1214\"></a>auto关键字(C++11)</h2>\n<h3><a id=\"auto_1216\"></a>auto的使用细则</h3>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> b<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//通过右边赋值对象，自动推到变量类型</span>\n    <span class=\"token comment\">//简化代码</span>\n    <span class=\"token keyword\">auto</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> d <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>类型太复杂，太长，auto自动推导变量类型，简化代码</p>\n<p>缺点：<strong>一定程度上牺牲了代码的可读性</strong></p>\n<p><strong>typeid可以去看变量的实际类型</strong></p>\n<pre><code class=\"prism language-c\">cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">typeid</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\ncout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">typeid</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"image-20210927221000148\" src=\"image\\75beee1e158347e88e55c74ac1c4b287.png\"/></p>\n<p>下面再看一个程序：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span><span class=\"token operator\">*</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> c <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">typeid</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">typeid</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">typeid</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20210927220900019\" src=\"image\\1c25f601bcb318f1e93b4ba32d4e1731.png\"/></p>\n<hr/>\n<h3><a id=\"auto_1266\"></a>auto不能推导的场景</h3>\n<ul><li class=\"task-list-item\"><input checked=\"true\" class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> auto不能作为函数的参数</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 此处代码编译失败，auto不能作为形参类型，因为编译器无法对a的实际类型进行推导</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestAuto</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>只有赋值才能推导出类型</p>\n</blockquote>\n<ul><li class=\"task-list-item\"><input checked=\"true\" class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> auto不能直接用来声明数组</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">TestAuto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">4</span>，<span class=\"token number\">5</span>，<span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li class=\"task-list-item\"><input checked=\"true\" class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 为了避免与C++98中的auto发生混淆，C++11只保留了auto作为类型指示符的用法</li></ul>\n<blockquote>\n<p><strong>C++98auto作用反正也没价值，所以C++只保留了auto作为类型指示符的用法</strong></p>\n</blockquote>\n<hr/>\n<h2><a id=\"forC11_1296\"></a>基于范围的for循环(C++11)</h2>\n<h3><a id=\"for_1298\"></a>范围for的语法</h3>\n<p>C++11提供一种新的访问数组的方式</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//自动依次取数组中的值赋值给e，自动判断结束</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e<span class=\"token operator\">:</span>array<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>e<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20210927220229069\" src=\"image\\565e76d2aae1db493989fccc00936837.png\"/></p>\n<p>上面是打印，那么我们能改变数组吗？</p>\n<p>答案是可以的，但是我们e需要是引用，因为需要修改数组需要修改数组本身</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//自动依次取数组中的值赋值给e，自动判断结束</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e<span class=\"token operator\">:</span>array<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        e<span class=\"token operator\">*=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e<span class=\"token operator\">:</span>array<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>e<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20210927220305366\" src=\"image\\7b33efb67ce0ee1e8c09e7c8f3726f98.png\"/></p>\n<hr/>\n<h3><a id=\"for_1342\"></a>范围for的使用条件</h3>\n<p><strong>for循环迭代的范围必须是确定的</strong></p>\n<blockquote>\n<p><strong>对于数组而言，就是数组中第一个元素和最后一个元素的范围；对于类而言，应该提供begin和end的方法，begin和end就是for循环迭代的范围。</strong><br/> <strong>注意：以下代码就有问题，因为for的范围不确定</strong></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">TestFor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">TestFor</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>范围for看起来很厉害，实际没什么东西，都是替换成普通访问了</p>\n<h2><a id=\"nullptrC11_1365\"></a>指针空值—nullptr(C++11)</h2>\n<h3><a id=\"C98_1367\"></a>C++98中的指针空值</h3>\n<p>我们在定义一个指针变量时，都需要给它进行初始化，否则可能会造成野指针的问题，在C++98中初始化指针：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>而C++11中初始化指针：</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//C++11  推荐用它当空指针使用</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><strong>指针本质是内存按字节为单位空间的编号，空指针并不是不存在的指针，而是内存第一个字节的编号，一般我们不使用这个字节存有效数据，用空指针一般用来初始化，表示指针指向没有存储一块有效数据的空间</strong></p>\n</blockquote>\n<p>NULL实际是一个宏，在传统的C头文件(stddef.h)中，可以看到如下代码：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\"><span class=\"token constant\">NULL</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NULL</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NULL</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n</code></pre>\n<p>可以看到，NULL可能被定义为字面常量0，或者被定义为无类型指针(void*)的常量。不论采取何种定义，在使用空值的指针时，都不可避免的会遇到一些麻烦，比如：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"f(int)\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"f(int*)\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20210927215408017\" src=\"image\\948e6cd81e35c89e47af3ef098b76e14.png\"/></p>\n<blockquote>\n<p><strong>我们的本意是想通过f(NULL)来调用f(int*)函数，但是由于NULL被替换成了0，编译器将他看成了整形数字，所以进入了f(int)</strong></p>\n</blockquote>\n<p>C++11中，所以我们可以这样：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"image-20210927215731322\" src=\"image\\45618ed97c27aff8e8df49cee2f64505.png\"/></p>\n<blockquote>\n<p><strong>这时就调用了f(int*)函数</strong></p>\n</blockquote>\n<p><strong>欢迎大家评论区学习交流！！！</strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}