{"blogid": "124413342", "writerAge": "码龄1年", "writerBlogNum": "48", "writerCollect": "3127", "writerComment": "1674", "writerFan": "14769", "writerGrade": "6级", "writerIntegral": "5816", "writerName": "乔 巴", "writerProfileAdress": "writer_image\\profile_124413342.jpg", "writerRankTotal": "2663", "writerRankWeekly": "1846", "writerThumb": "2254", "writerVisitNum": "213828", "blog_read_count": "1150", "blog_time": "于 2022-08-02 17:36:18 发布", "blog_title": "植物大战 C++ ——基础特性", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>“青青子衿,悠悠我心。但为君故,沉吟至今。”</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>这里是目录</h3>\n<ul><li><a href=\"#_3\">前言</a></li><li><a href=\"#_9\">一、命名空间</a></li><li><ul><li><a href=\"#1_11\">1.什么是命名空间？</a></li></ul>\n</li><li><a href=\"#C_27\">二、C++输入输出</a></li><li><a href=\"#_30\">三、缺省参数</a></li><li><ul><li><a href=\"#1_31\">1.什么是缺省参数？</a></li><li><a href=\"#2_34\">2.全缺省参数</a></li><li><a href=\"#3_44\">3.半缺省参数</a></li></ul>\n</li><li><a href=\"#_53\">四、函数重载</a></li><li><ul><li><a href=\"#1_55\">1.什么是函数重载？</a></li><li><a href=\"#2_59\">2.重载规定</a></li></ul>\n</li><li><a href=\"#_61\">五、重载原理</a></li><li><ul><li><a href=\"#1CC_62\">1.为什么C语言不支持函数重载，而C++支持？</a></li></ul>\n</li><li><a href=\"#extern_C_67\">六、extern \"C\"</a></li><li><a href=\"#_69\">七、引用</a></li><li><ul><li><a href=\"#1_87\">1.引用特性</a></li><li><a href=\"#2_90\">2.常引用(重点)</a></li><li><a href=\"#3_107\">3.引用做形参</a></li><li><a href=\"#4_122\">4.引用作返回值</a></li></ul>\n</li><li><a href=\"#_134\">八、内联函数</a></li><li><ul><li><a href=\"#1_135\">1.什么是内联函数？</a></li><li><a href=\"#2_137\">2.内联函数特性</a></li></ul>\n</li><li><a href=\"#autoC11_141\">auto关键字(C++11)</a></li><li><ul><li><a href=\"#1auto_142\">1.什么是auto</a></li><li><a href=\"#2auto_145\">2.auto使用规则</a></li><li><a href=\"#3auto_169\">3.auto与指针引用结合起来使用</a></li><li><a href=\"#4_187\">4.如何在同一行定义多个变量？</a></li><li><a href=\"#5_auto_198\">5. auto不能推导的场景</a></li></ul>\n</li><li><a href=\"#forc11_219\">九、基于范围的for循环(c++11)</a></li><li><ul><li><a href=\"#1for_241\">1.范围for的使用条件</a></li></ul>\n</li><li><a href=\"#nullptrC11_246\">十、空指针nullptr(C++11)特性</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_3\"></a>前言</h1>\n<p>1.C++很难学？——是的<br/> C++整体学习难度和Java整体学习难度是一样的<br/> 不要想着精通C++。<br/> <img alt=\"请添加图片描述\" src=\"image\\adfb8adabc9042b2af4cf7d76168eefb.jpeg\"/></p>\n<h1><a id=\"_9\"></a>一、命名空间</h1>\n<p>命名空间是为了防止冲突，有时候全局变量定义了好多，这时候会导致命名冲突，这时候的命名空间的作用就是给文件定了一个作用域，在这里就可以限定<strong>变量，函数</strong>的名称。</p>\n<h2><a id=\"1_11\"></a>1.什么是命名空间？</h2>\n<p>命名空间就是namespace 后面跟的一串字符。这一串字符就叫做命名空间。命名空间的名字可以随便起。</p>\n<p>代码举例定义：<br/> 命名空间里的变量a，和函数Add是独立的。和其他命名空间隔开的。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> N1<span class=\"token comment\">//N1就是命名空间</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"C_27\"></a>二、C++输入输出</h1>\n<p>C++的输入输出函数是cin和cout。从英语可以看出，in就是输入，out就是输出。cin输入就相当于C语言中的sancf，cout就相当于C语言中的输出。<br/> 这两个函数学习起来成本有点高现在学了不一定能学懂，以后再说。</p>\n<h1><a id=\"_30\"></a>三、缺省参数</h1>\n<h2><a id=\"1_31\"></a>1.什么是缺省参数？</h2>\n<p>缺省参数就相当于C语言中的形参可以赋初始值，也就是为形参指定了默认值。<br/> 规则：如果没有实参穿过去，则使用该默认值。否则使用形参的值。</p>\n<h2><a id=\"2_34\"></a>2.全缺省参数</h2>\n<p>全缺省就是全部形参都设置默认值</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span>a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3_44\"></a>3.半缺省参数</h2>\n<p>半缺省参数是有的形参没有设置初始值。但是缺省只能从右往左缺省。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span>a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_53\"></a>四、函数重载</h1>\n<p>函数重载是什么？</p>\n<h2><a id=\"1_55\"></a>1.什么是函数重载？</h2>\n<p>函数重载也是为了解决C语言的不便。假如需要调用Add加法的函数，如果没有函数重载的话就需要写不止一个Add函数。因为数有整数int，有浮点数float，有double类型的。这样就需要写三个版本的Add函数了。<br/> 但是C++的函数重载解决了这个问题。你想要不同类型的任何的数字相加都可以。都可以实现调用Add这一个名字，而不需要写为其他名字。</p>\n<h2><a id=\"2_59\"></a>2.重载规定</h2>\n<p>函数重载的这些同名函数必须 <strong>形参列表不同</strong>。形参列表不同指的是：<strong>形参顺序不同，形参类型不同，形参个数不同。</strong></p>\n<h1><a id=\"_61\"></a>五、重载原理</h1>\n<h2><a id=\"1CC_62\"></a>1.为什么C语言不支持函数重载，而C++支持？</h2>\n<p>不论是C/C++,都要经历，预处理，编译，汇编，链接。在编译的阶段，C语言会将函数名形成一个符号表，假如函数是Add(int x, double y);那么C语言形成的符号表里的函数名也是Add。但是C++他不一样呀，他为了弥补C语言这个小傻瓜的空白，在编译后形成的符号是：_ZAddid。格式是什么呢？格式是：_Z + 函数名 + 类型首字母，这就是C++支持函数重载的原因。</p>\n<p>这样我们就理解函数重载要求 参数不同，和返回值没关系。</p>\n<h1><a id=\"extern_C_67\"></a>六、extern “C”</h1>\n<p>extern C是在C++工程中想让代码按照C语言的方式编译，或者想调用C语言工程时所用的。函数前面加extern C 是高数编译器，该代码或者函数需要按照C语言的规则编译。</p>\n<h1><a id=\"_69\"></a>七、引用</h1>\n<p>引用就是取别名<br/> 引用就是重用了C语言的取地址符号&amp;。<br/> 代码举例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>b称为a的引用。<br/> 引用格式：类型&amp; 引用变量名 = 引用实体。</p>\n<h2><a id=\"1_87\"></a>1.引用特性</h2>\n<p>1.引用在定义时必须初始化。<br/> 2.引用只能引用一个实体。什么意思呢？意思就是b引用了a之后，就不能再引用其他变量了。</p>\n<h2><a id=\"2_90\"></a>2.常引用(重点)</h2>\n<p>什么是常引用？<br/> 在前面加了const修饰的就是常引用。<br/> 常引用涉及到了权限放大缩小的问题。权限指的是变量的读和写。<br/> 被const修饰的变量不能改变其值。所以只能读取。<br/> 读就相当于你看书，写就相当于你在书上做笔记。</p>\n<p>代码举例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//int&amp; ra = a;错误，权限放大。因为a是只读的，而int是可以读写的。</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ra <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3_107\"></a>3.引用做形参</h2>\n<p>引用做形参就可以不用传指针了。<br/> 这样就方便了我们写程序的效率。<br/> 代码举例：<br/> 这里的x和y是实参的引用。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//交换函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tt <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\tx <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"4_122\"></a>4.引用作返回值</h2>\n<p>引用可以做返回值。但是要注意：只有出了作用域，被返回的值没有销毁，才可以用引用做返回值。所以我们定义的变量必须是static修饰的或者是动态开辟的，或者是全局变量等不会随着函数调用的结束而销毁的变量。<br/> 代码举例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意：如果函数返回时，出了函数作用域，返回对象未还给系统，则可以使用引用返回；如果已经还给系统了，则必须使用传值返回。</p>\n<h1><a id=\"_134\"></a>八、内联函数</h1>\n<h2><a id=\"1_135\"></a>1.什么是内联函数？</h2>\n<p>以inline修饰的函数叫做内联函数，编译时C++编译器会在调用的地方展开。使用时只用在函数前面加上inline，但是inline只是一种建议，具体实现还是看编译器。</p>\n<h2><a id=\"2_137\"></a>2.内联函数特性</h2>\n<p>1.函数会在调用的地方展开没有函数压栈的开销，内联函数的使用可以提升程序的运行效率。频繁调用的小函数建议定义成内联函数<br/> 2.inline对于编译器只是一个建议，编译器会自动优化。<br/> 3.inline不建议声明和定义分离，因为inline是在函数调用的地方展开，编译的时候不会给函数分配地址，所以会导致连接错误。</p>\n<h1><a id=\"autoC11_141\"></a>auto关键字(C++11)</h1>\n<h2><a id=\"1auto_142\"></a>1.什么是auto</h2>\n<p>在C++11中，标准委员会赋予了auto全新的含义：auto不再是一个存储类型的指示符，而是作为一个新的类型指示符来指示编译器，auto生命的变量必须有编译器在编译使其推导而得。</p>\n<h2><a id=\"2auto_145\"></a>2.auto使用规则</h2>\n<p>1.使用auto变量时必须初始化，在编译阶段编译器需要根据初始化表达式来推导auto的实际类型，编译器在编译期间会将auto替换为变量实际类型。</p>\n<p>代码举例</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">Fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'A'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> d <span class=\"token operator\">=</span><span class=\"token function\">Fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"3auto_169\"></a>3.auto与指针引用结合起来使用</h2>\n<p>用auto声明指针类型时，用auto和auto*没有任何区别，<strong>但用auto声明引用类型时必须加&amp;。</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span><span class=\"token operator\">*</span> c <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> d <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"4_187\"></a>4.如何在同一行定义多个变量？</h2>\n<p>在同一行声明多个变量时，这一行的变量必须是相同的类型，否则编译器会报错，因为编译器实际只对第一个类型进行推导，然后用推导出来的类型定义其他变量。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">auto</span> a<span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"5_auto_198\"></a>5. auto不能推导的场景</h2>\n<p>1.auto不能作为函数的参数</p>\n<p>因为无法知道实参的类型</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">TestAuto</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>2.auto不能直接用来声明数组</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1><a id=\"forc11_219\"></a>九、基于范围的for循环(c++11)</h1>\n<p>不同于平时的for循环。C++11引入了基于范围的for循环。<br/> 概念：for循环后的括号由冒号分为两部分：前半部分是<strong>范围内用于迭代的变量，<strong>后半部分</strong>是表示被迭代的范围</strong>。</p>\n<p>代码举例</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//将数组元素的值都乘以2</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\te <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//打印数组中的所有元素</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ncout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>可以用continue来结束本次循环，也可以用break来跳出整个循环。</p>\n<h2><a id=\"1for_241\"></a>1.范围for的使用条件</h2>\n<p>1.for循环迭代的范围必须是确定的。<br/> 对于数组而言，就是数组中第一个元素和最后一个元素的范围；对于类而言，应该提供begin和end的方法，begin和end就是for循环迭代的范围。<br/> 2.迭代的对象要实现++和==的操作。<br/> 以后再详细了解</p>\n<h1><a id=\"nullptrC11_246\"></a>十、空指针nullptr(C++11)特性</h1>\n<p>1.在使用nullptr表示指针空值时，不需要包含头文件，因为nullptr是C++11作为关键字引入的。<br/> 2.在C++11中，sizeof(nullptr)和sizeof((void*)0)所占字节数相同。<br/> 3.为了提高代码的健壮性，在以后的代码中表示指针空值时最好使用nullptr。不建议用C语言中NULL。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}