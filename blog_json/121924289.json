{"blogid": "121924289", "writerAge": "码龄2年", "writerBlogNum": "10", "writerCollect": "72", "writerComment": "1", "writerFan": "10", "writerGrade": "2级", "writerIntegral": "121", "writerName": "lowDA", "writerProfileAdress": "writer_image\\profile_121924289.jpg", "writerRankTotal": "254338", "writerRankWeekly": "960574", "writerThumb": "10", "writerVisitNum": "14523", "blog_read_count": "11341", "blog_time": "于 2021-12-14 12:16:05 发布", "blog_title": "qt基础入门教程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p></p>\n<p></p>\n<h1>1、t的介绍、优点、成功案例             5.8.0</h1>\n<p>Qt是一个跨平台的C++图形用户界面应用程序框架。它为应用程序开发者提供建立艺术级图形界面所需的所有功能。爸是完全面向对象的，很容易扩展，并且允许真正的组件编程。</p>\n<p><img alt=\"\" height=\"39\" src=\"image\\a642065f902f4bea98e66b5a25c5940a.png\" width=\"469\"/>  推荐安装</p>\n<p> wps   linux 桌面环境   虚拟机软件  屏幕共享</p>\n<p><img alt=\"\" height=\"351\" src=\"image\\6c32fd7a295d4afea864e63ea4d97c16.png\" width=\"459\"/></p>\n<p></p>\n<p></p>\n<p></p>\n<p> <span style=\"background-color:#a2e043;\">QT名称中不支持中文命名和中午路径 不能添加空格</span></p>\n<p></p>\n<p>子父类的关系   </p>\n<p>qwidget  单纯窗口</p>\n<p>QMainWindow  页面扩展菜单栏 </p>\n<p>QDialog  弹出对话框</p>\n<p><img alt=\"\" height=\"271\" src=\"image\\3bc6bcacdc5f474ebc4cb5751d11b1e5.png\" width=\"516\"/></p>\n<p> 项目文件</p>\n<p><img alt=\"\" height=\"222\" src=\"image\\ce64a4aa70574d158c5d81e1f20aedd4.png\" width=\"589\"/></p>\n<h1> 第一个qt程序    （main.cpp文件内的编写）</h1>\n<p><img alt=\"\" height=\"564\" src=\"image\\ba35329fff2d47f19cfbc2e21bb57085.png\" width=\"1024\"/></p>\n<p></p>\n<pre><code class=\"language-cpp\">#include\"mywidget.h\"\n#include &lt;QApplication&gt;//包含头文件应用程序\n//程序入口argc命令行变量数量    argv命令行变量数组\n5.int main（int argc，char*argv[]）\n//应用程序对象a，Qt中有且仅有一个应用程序对象\nQApplication a（argc，argv）；\n//创建Mywidget对象w Mywidget基类\n Qwidget MyWidget w；\n///窗口默认是不会弹出的，如果想弹出调用show方法\n\nw.show（）；\n//a.exec（）进入消息循环机制 pause\n return a.exec（）；\n//while（1）\n//{\n//if（点击叉子）\n//{\n//break；\n//}//）\n}</code></pre>\n<p></p>\n<h1>pro文件详解</h1>\n<pre><code class=\"language-cpp\">Qr +=core gui//qt包含的模块\ngreater Than（QTIAJORVERSION，4）：QT +=widsets//大于4版本包含widset横块\nTARGET=01_Qt_First//目标。生成的.exe可执行文件的名称   后期可手动更改生成的文件\n\nTRIPLATE=app//模板应用程序\nSOURCES+=main.cpp\\//源文件\nmywidget.cpp \n\nHEADERS +=mywidget.h I//头文件</code></pre>\n<p>头文件的解析</p>\n<pre><code class=\"language-cpp\">#ifndef MYWIDGET_H\n#define MYWIDGET_H\n#include &lt;Qwidget&gt;\nclass Mywidget:public Qwidget   //Mywidget继承Qwidget\n{ Q_OBJECT//Q0BJEC宏写了这个宏就支持了Qt中的信号和槽机制\n\npublic：Mywidget（QWidget*parent=0）；//构造函数\n~Mywidget（）；//析构函数\n\n}；\n#endif//MYWIDGET_H</code></pre>\n<h1>快捷键 以及命名规范</h1>\n<p>/类名首字母大写单词与单词之间首字母大写<br/> 函数、变量首字母小写单词与单词之间首字母大写<br/> 快捷键<br/> 运行ctrl+R<br/> 编译 ctrl+B<br/> 查找ctrl+F<br/> 帮助文档F1<br/> 字体缩放ctr1+鼠标滚轮<br/> 自动对齐 ctrl+i<br/> 整行移动ctr1+ shift+上键或者：<br/> /同名之间的.h.cpp切换F4<br/> 帮助文档第一种：F1第二种：左侧按钮第三种：  在文件管理中找文档exe</p>\n<p>ctrl +？ 注释</p>\n<p></p>\n<p></p>\n<p><u>检查是否有对应的类的头文件</u></p>\n<p><img alt=\"\" height=\"504\" src=\"image\\b8574e9734434d8597d4a94637dc82f3.png\" width=\"966\"/></p>\n<p>查询文档基本信息</p>\n<p> <img alt=\"\" height=\"296\" src=\"image\\3f762a0ae8ec43df97e23789e7ca0aa0.png\" width=\"584\"/></p>\n<p>设置编码格式防止乱码问题</p>\n<p><img alt=\"\" height=\"576\" src=\"image\\d6bd09b5bfbb4a959dcfe68dda874c56.png\" width=\"865\"/></p>\n<h1>创建按钮</h1>\n<pre><code class=\"language-cpp\">Mywidget::Mywidget（QWidget *parent）\n  ：QWidget（parent）//初始化列表  调用父类的构造函数\n//按钮\nQPushButton *btn =new QPushButton；\n//btn-&gt;show（）；//show用顶层方式弹出，如果想在MyWidget窗口中显示，就需要依赖Mywidget窗口  设置父类\n/∥设置父亲\nbtn-&gt;setParent（this）；\n//设置文字\nbtn-&gt;settext（“德玛西亚\"）；  //将char*隐式类型转为Qstring\n\n//创建按钮第二种方式窗口会按照 btn2大小进行显示\nQPushButton *btn2=new QPushButton（\"第二按钮\"，this）；\n//重置窗口大小   这种会改变窗口大小 和按钮大小相同\nresize（600，400）；\n//移动第二个按钮\nbtn2-&gt;move（100，100）；\n//按钮是否可以重置大小resize？可以\nbtn2-&gt;resize（50，50）；\n//重置窗口标题\nsetWindowTit1e（“Qt第一个窗口叶）；          \n}</code></pre>\n<p>qt一定程度减轻了内存回收机制</p>\n<h1>对象树  （所有用new生成的对象不用手动去进行释放）</h1>\n<p> <img alt=\"\" height=\"325\" src=\"image\\1effe271370c4e3faf59edde67df360f.png\" width=\"510\"/></p>\n<p> 程序运行完成后逐个释放</p>\n<p></p>\n<p><img alt=\"\" height=\"965\" src=\"image\\f13399dee01f4b59879bf7d3904d2365.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"651\" src=\"image\\50320d2fd7e843b5b0a1217cd57bee58.png\" width=\"1200\"/></p>\n<p></p>\n<p>执行析构的时候，先去执行析构函数的操作，再释放掉内存</p>\n<p> <img alt=\"\" height=\"130\" src=\"image\\5193a233bd114e10b5ab5239016969b9.png\" width=\"485\"/></p>\n<p><span style=\"background-color:#a2e043;\">打印函数 qDebug()&lt;&lt;\"打印内容\"；</span></p>\n<p></p>\n<h1>QT中的坐标系</h1>\n<p><img alt=\"\" height=\"550\" src=\"image\\9ed01b99c4594ef4872278dd829d7405.png\" width=\"897\"/></p>\n<p></p>\n<h1>QT中的信号和槽（重要）</h1>\n<p><img alt=\"\" height=\"191\" src=\"image\\3beaa297326f418b9da75fa5ceccb6d3.png\" width=\"1200\"/></p>\n<p> sloct槽的引文单词</p>\n<blockquote>\n<p>点击myBtn关闭窗口<br/> //  <span style=\"background-color:#a2e043;\"> 信号的发送者</span>    <span style=\"background-color:#a2e043;\">发送的信号参数</span>    <span style=\"background-color:#a2e043;\">信号的接受者</span>       <span style=\"background-color:#a2e043;\"> 处理的槽函数</span><br/> //connect（myBtn，&amp;MyButton:：clicked，this，&amp;Mywidget:：close）；</p>\n</blockquote>\n<p>或者是父类的对象</p>\n<p>松散耦合的优势    </p>\n<p><img alt=\"\" height=\"391\" src=\"image\\a254910c858642b88decbaac9f17bf67.png\" width=\"1048\"/></p>\n<p></p>\n<h1>自定义的信号和槽</h1>\n<p>创建一个普通类，不用窗口，使用QObject类  </p>\n<p><img alt=\"\" height=\"534\" src=\"image\\ade5621551094442bfc4303ff967e378.png\" width=\"804\"/></p>\n<h2> 自定义信号：</h2>\n<p>//自定义信号需要<span style=\"background-color:#a2e043;\">写到signals下</span><br/> //返回类型必须void<br/> //信号只需要声明                                                                                                                             // //不需要实现                                                                                                                                        //信号可以有参数，可以重载                                                                                                              void hungFy（）；</p>\n<h2>自定义槽函数：</h2>\n<p>//自定义槽函数<br/> //高版本<span style=\"background-color:#a2e043;\">可以写到public下或者全局函数</span><br/> //槽函数<span style=\"background-color:#a2e043;\">返回值void</span><br/> //槽函数需要声明也<span style=\"background-color:#fe2c24;\">需要实现    </span>           可以有参数和重载                                                                      void treat（）；</p>\n<p>emit()函数触发信号   出发函数才能发出信号 c++中的调用</p>\n<p></p>\n<p><span style=\"background-color:#a2e043;\">老师饿了---》学生请老师吃饭</span></p>\n<p><img alt=\"\" height=\"383\" src=\"image\\cc200a9822034f1dba3108114b42e617.png\" width=\"564\"/></p>\n<p></p>\n<p> <img alt=\"\" height=\"356\" src=\"image\\13501df9deb84167a5623e2d206f77d4.png\" width=\"484\"/></p>\n<p> <img alt=\"\" height=\"426\" src=\"image\\9c3a38d933fe499c92fdb83091cfe4fc.png\" width=\"590\"/></p>\n<p><img alt=\"\" height=\"277\" src=\"image\\f66fe24c9b41456388f7a1db876455d2.png\" width=\"1029\"/></p>\n<blockquote>\n<p>指针函数  返回的是指针 即地址                                                                                                函数指针 用指针指向不同的函数 实现调用 </p>\n</blockquote>\n<p><img alt=\"\" height=\"716\" src=\"image\\0b68fd6b6f4845378f80da1d4d057585.png\" width=\"1180\"/></p>\n<p></p>\n<h1>  QT4信号槽和信号的写法</h1>\n<p><img alt=\"\" height=\"528\" src=\"image\\4f54b48b4ee74e9b853ab8e25dcd5e69.png\" width=\"1085\"/></p>\n<p></p>\n<blockquote>\n<p>//Qt4版本信号和槽写法</p>\n<p>类型匹配不检测 </p>\n<p>7/不推荐Qt4版本信号槽写法，原因：类型匹配不检测//优点：</p>\n<p>参数类型比较直观，发生重载也不用写函数指针  （直接将对应的参数变成了字符串处理）</p>\n</blockquote>\n<pre><code class=\"language-cpp\">connect（zt，SIGNAL（hungry（void）），st，SLoT（treat（&amp;string）））；</code></pre>\n<p>connect（zt，<span style=\"background-color:#a2e043;\">SIGNAL（hungry（void））</span>，st，<span style=\"background-color:#a2e043;\">SLoT（treat（&amp;string））</span>）；</p>\n<p></p>\n<p>信号：SIGNAL</p>\n<p>槽    ：sLoT下优点参数直观</p>\n<p><span style=\"background-color:#a2e043;\">不用写函数指针不会做类型检测。</span></p>\n<p></p>\n<h1>Lambda  表达式</h1>\n<p></p>\n<p>C++11中的Lambda表达式用于定义并<span style=\"background-color:#a2e043;\">创建匿名的函数对象</span>，以简化编程工作。<br/> 首先看一下Lambda表达式的基本构成：</p>\n<p></p>\n<p><img alt=\"\" height=\"587\" src=\"image\\48c9b08327594996ac4539108dfc008d.png\" width=\"1200\"/></p>\n<p> <img alt=\"\" height=\"526\" src=\"image\\37df5dc713ad428e96e4e5b1d2262710.png\" width=\"1200\"/></p>\n<p></p>\n<p><img alt=\"\" height=\"608\" src=\"image\\107a011a30e24227a09ab9c5479fd0ec.png\" width=\"1060\"/></p>\n<p>[](){} </p>\n<p><span style=\"background-color:#a2e043;\">[]内部=值传递推荐</span>     &amp;引用传递不推荐</p>\n<p>()参数T<br/> {}函数实现体<br/> mutable 改变值传递的内部变量。<br/><span style=\"background-color:#a2e043;\">返回值[]()-&gt;type{}</span></p>\n<p>Qwindow是一个为用户提供主窗口程序的类，合一个菜单（menu bar）、多个工具栏（toolbars）、多个缆越都件（dock widgets）、一个状态栏（status bar）<br/> 及一个中心部伴（central widget），是许多应用程序的基础，如文本编辆器，图片编辑器等。</p>\n<h1>菜单栏的创建</h1>\n<p><img alt=\"\" height=\"525\" src=\"image\\189e1806d6a04281a0693d56952ab709.png\" width=\"742\"/></p>\n<p> <img alt=\"\" height=\"568\" src=\"image\\3d5fd46f4eb54b10b59d86905f3eeaa5.png\" width=\"1022\"/></p>\n<p> 菜单栏<br/> 1.1只能有一个。<br/> 1.2 menuBar（）返回一个QMenuBar\"bar；<br/> 1.3将bar放入到窗口中setMenuBar（bar）<br/> 1.4添加菜单 addMenu（“文件”）<br/> 1.5添加菜单项addAction（“新建”<br/> 1.6分割线addSeparator（）工具栏<br/> 2.1可以多个。<br/> 2.2QToolBar<br/> 2.3addToolBar（停靠位置，toolbar）<br/> 2.4设置停靠、浮动、移动。<br/> 2.5工具栏中可以添加菜单项<br/> 2.6也添加分割线</p>\n<p></p>\n<h1>状态栏 核心部件</h1>\n<p><img alt=\"\" height=\"354\" src=\"image\\787c03dd98354abdadc94f7bffafe4d8.png\" width=\"709\"/></p>\n<p></p>\n<p><img alt=\"\" height=\"292\" src=\"image\\6a6047da740040589d0fdbcaba3fb7d5.png\" width=\"864\"/></p>\n<p></p>\n<h1>模态和非模态</h1>\n<p>点击新建弹出对话框</p>\n<p></p>\n<p>兼容设置<img alt=\"\" height=\"765\" src=\"image\\cb5cfb0d2ed648b79596afc2caac9022.png\" width=\"1200\"/></p>\n<p><span style=\"background-color:#a2e043;\"> 模态是不可以对其他按钮进行操作</span><img alt=\"\" height=\"857\" src=\"image\\33e810b7f51e425a8c355638e7ccd681.png\" width=\"1200\"/></p>\n<p> 创建指针是为了创建的到堆上不会被释放（但是存在内存溢出的风险）</p>\n<p> <img alt=\"\" height=\"88\" src=\"image\\5628bf3dd1f845d3b44940eb73946494.png\" width=\"605\"/></p>\n<p> 创建属性，关闭时会销毁堆上的内存</p>\n<p>系统默认对话框设置和自定义对话框</p>\n<p><img alt=\"\" height=\"974\" src=\"image\\9ff079e769d14ff7a15e205cdd5b7289.png\" width=\"1200\"/></p>\n<h1></h1>\n<p> 标准颜色对话框·<br/> 7.4.1QColorDialog<br/> 7.4.2 getColor 返回 QColor标准文件对话框。<br/> 7.5.1QFileDialog（）<br/> 7.5.2getOpenfileName（父亲，标题，默认路径，过滤文件格式）</p>\n<h1> 其他作用的对话框</h1>\n<p><img alt=\"\" height=\"458\" src=\"image\\46bc571859f848e89765c34bfafafc6f.png\" width=\"1200\"/></p>\n<h1>设置ui界面</h1>\n<p>登陆界面<br/> 8.1利用Widget做容器，容器内部进行水平、垂直布局<br/> 8.2灵活运用弹簧。<br/> 8.3设置属性间隙默认99998.4垂直策略<br/>  </p>\n<h1>常用控件</h1>\n<p><img alt=\"\" height=\"1200\" src=\"image\\29aefec0a02e4806bd345aaecb67f257.png\" width=\"1200\"/></p>\n<p> 选择资源文件</p>\n<p>radio button单选框</p>\n<p></p>\n<p>对话框<br/> 7.1模态对话框<br/> 7.1.1 exec（） 阻塞<br/> 7.2非模态对话框。<br/> 7.2.1show在越上会一闪而过。<br/> 7.2.2所以new在堆区…<br/> 7.2.3设置属性dlg2-&gt; setAtribute（Qt:WA.DeleteOnClosel；</p>\n<p>系统标准对话框QMessageBox<br/> 7.3.1静态成员函数<br/> 7.3.2QMessageBox:：警告、信息、错误、问题。<br/> 7.3.35个参数父亲、标题、提示内容、按健类型、关联回合按键</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p>状态栏<br/> 3.1只能有一个<br/> 3.2 statusBar（）返回 ostatus*sBar<br/> 3.3 addStatusBar（sBar）<br/> 3.4添加内容addWidget（Qlabel）<br/> 3.5添加右侧信息<br/> 铆接部件<br/> 4.1可以有多个<br/> 4.2QDockWidget<br/> 4.3 addDockWidget（停靠位置，….<br/> 4.4后期设置停靠</p>\n<p>核心部件    （ 用set设定的只能有一个 而add可以有多个） </p>\n<p>setCenteralWidget()</p>\n<p></p>\n<h1>资源文件</h1>\n<p><img alt=\"\" height=\"537\" src=\"image\\1d86ee81dbff48f5985fa98b943d4d12.png\" width=\"592\"/></p>\n<p><br/> 6.1将使用的图片资源放入到项目中6.2右键项目-添加新文件-Qt-ResourceFile<br/> 6.3起名称res生成res.qrc<br/> 6.4右键res.qrc open in editor<br/> 6.5添加前缀添加文件。<br/> 6.6使用：+前缀名+文件名</p>\n<p></p>\n<p></p>\n<h1>常用控件</h1>\n<p> 按钮组<br/> 9.1.1 PushButton 按钮<br/> 9.1.2 ToolButton 工具按钮多用于显示图片，ToolButtonstyle修改风格 autoRaise透明风格<br/> 9.1.3 RadioButton.单选 setChecked（ture）<br/> 9.1.4 CheckBox 多选statechange独特的信号0未选中1半选</p>\n<p><img alt=\"\" height=\"797\" src=\"image\\17a384ba1fec4f54bd5afa67538bab4e.png\" width=\"1200\"/></p>\n<p>复选框</p>\n<p></p>\n<p><img alt=\"\" height=\"741\" src=\"image\\39fdd00eba0449f1a4176514fa818921.png\" width=\"1200\"/></p>\n<p> 通过对象或者匿名对象的方法</p>\n<p>listWidget 控件。<br/> 9.2.1 QListWidgettem 每一个项目<br/> 9.2.2 item可以设置对齐方式<br/> 9.2.3 item-&gt;set TextAlignment（Ot:AlignHCenter）；…<br/> 9.2.4一次性的将所有内容添加<br/> 9.2.5 addltems（QStringList）</p>\n<h1>tree控件</h1>\n<p><img alt=\"\" height=\"1200\" src=\"image\\854ca5131a8d481a9e7850b97a1700d2.png\" width=\"1200\"/></p>\n<p> QTreeWidget控件使用<br/> 9.3.1设置头setHeaderlabels（QStringlist（）&lt;&lt;“英雄”…）<br/> 9.3.2每个项目QTreeWidgetitem<br/> 9.3.3添加顶层项目 addTopleaveltem<br/> 9.3.4添加子项目addChil</p>\n<p></p>\n<h1>自定义控件</h1>\n<p><img alt=\"\" height=\"818\" src=\"image\\c36f6c6477244ef594957f5ac7fec858.png\" width=\"1132\"/></p>\n<p> <img alt=\"\" height=\"841\" src=\"image\\2eb443f16e99442aab891a1e558d9484.png\" width=\"993\"/></p>\n<p></p>\n<p>自定义控件封装<br/> 1.1创建Qr-设计师界面类，<br/> 1.2拖拽Widget 右键提升为-类名写入-全局包含-添加-提升。<br/> 1.3QSpinBox 移动Slider 跟着移动。<br/> 1.4对外接口  封装一些函数 </p>\n<h1>鼠标事件</h1>\n<p><img alt=\"\" height=\"721\" src=\"image\\d3691a4a5ce1435faaa81307dd8237e1.png\" width=\"1200\"/></p>\n<p> <img alt=\"\" height=\"925\" src=\"image\\c51fcef413a64b65a4cec50fc34165c0.png\" width=\"1192\"/></p>\n<p> <img alt=\"\" height=\"581\" src=\"image\\27384f9bb39e4293abc58cb3569cee78.png\" width=\"1060\"/></p>\n<p></p>\n<p></p>\n<p></p>\n<p>鼠标事件<br/> 2.1鼠标进入enterEvent2.2鼠标离开leaveEvent<br/> 2.3鼠标按下、释放、移动。<br/> 2.3.1通过ev获取到xy<br/> 2.3.2 ev判断鼠标左右键2.3.3 QString格式化字符串%1%2a</p>\n<p></p>\n<h1>定时器</h1>\n<p><img alt=\"\" height=\"814\" src=\"image\\1cd7e2449c514840bd7820c568f911cb.png\" width=\"1200\"/></p>\n<p></p>\n<p>定时器使用<br/> 3.1 timerEvent 事件。<br/> 3.2启动定时器 startTimer（毫）返回值就是ld号<br/> 3.3区分定时器timerld-T</p>\n<p>第二中定时器的方法</p>\n<p><img alt=\"\" height=\"790\" src=\"image\\eb9000fdeea64a99b1f7322c481869de.png\" width=\"1200\"/></p>\n<p> <img alt=\"\" height=\"776\" src=\"image\\35deaa6554b141c19dcf755799d13dab.png\" width=\"1200\"/></p>\n<h1>事件的分发</h1>\n<p><img alt=\"\" height=\"764\" src=\"image\\bb0cbc3541e64e0fb7479a28532652aa.png\" width=\"1200\"/></p>\n<p></p>\n<h1>事件过滤器</h1>\n<p><img alt=\"\" height=\"609\" src=\"image\\12788cd1fee84cb09023cce315bf9cde.png\" width=\"1200\"/></p>\n<p></p>\n<p></p>\n<p></p>\n<p><img alt=\"\" height=\"732\" src=\"image\\538748da50464ecd83f29015702f2362.png\" width=\"1200\"/></p>\n<p>事件过滤器<br/> 6.1哪个控件需求过滤事件就给哪个控件安装过滤器<br/> 6.2步骤1安装过滤器<br/> 6.3 ui-&gt;label-&gt;installEventFilter（this）；<br/> 6.4步骤26.4.1重写事件</p>\n<h1>绘图工具</h1>\n<p><img alt=\"\" height=\"743\" src=\"image\\446d46daa42b41dcb012193fc88ac4d8.png\" width=\"1200\"/></p>\n<p> <img alt=\"\" height=\"909\" src=\"image\\822fffcb38e44f7d83b1652dded0a61b.png\" width=\"1195\"/></p>\n<p> 7.1绘图事件 paintEvent<br/> 7.2 QPainter painter（绘图设备 this）<br/> 7.3 draw..线圆矩形文字<br/> 7.4 QPen 设置笔宽度样式}<br/> 7.5QBrush 设置画刷样式</p>\n<p><img alt=\"\" height=\"828\" src=\"image\\a8a4634fab874955a629afccfb11f2df.png\" width=\"1200\"/></p>\n<p> 8.1抗锯齿<br/> 8.1.1 painter.setRenderHint（QPainter:：Antialiasing）；<br/> 8.2画家移动<br/> 8.2.1 painter.translate（QPoint（100，0））；<br/> 8.3画家状态</p>\n<p>save()  保存状态保存位置     restore()       归位</p>\n<p></p>\n<h1>点击按钮 图片滑动</h1>\n<p></p>\n<p><img alt=\"\" height=\"630\" src=\"image\\ccb3fe37e4c1461884170b3311693b89.png\" width=\"789\"/></p>\n<p></p>\n<p><img alt=\"\" height=\"1146\" src=\"image\\3e5b9089d8be4ffeadedef8fc4ce713b.png\" width=\"1200\"/></p>\n<p></p>\n<p>手动调用绘图事件<br/> 9.1 update<br/> 9.2画家可以画图片<br/> 9.3 drawPixmap（x，y “dizhi ”)</p>\n<h1>绘图设备保存到磁盘上</h1>\n<p><img alt=\"\" height=\"462\" src=\"image\\294e3bcb9ae24269ba0cc219be425cf5.png\" width=\"774\"/></p>\n<p></p>\n<p><img alt=\"\" height=\"797\" src=\"image\\5ba0b69dfb324e11afabdc3dbde3baac.png\" width=\"875\"/></p>\n<p></p>\n<h1>文件操作</h1>\n<p></p>\n<p><img alt=\"\" height=\"782\" src=\"image\\e9d3274b4bed4d2f926866f8fd94eec6.png\" width=\"996\"/></p>\n<p> <img alt=\"\" height=\"659\" src=\"image\\521f4ace6f55474d909c95f8364a7ca5.png\" width=\"1127\"/></p>\n<p> 11.1 QFile file（路径）<br/> 11.2fle.open 打开方式QloDevice:：ReadOnly<br/> 11.3 fle.readAll readline（file.atEnd 判断是否到文件尾<br/> 11.4写QlODevice:：WriteOnly<br/> 11.5 file.write（\"..\"）</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p>小结：</p>\n<p>4.Pro文件。<br/> 4.1QT+=所属模块widget4版本以上                                                                                                    4.2 TARGET 生成exe 程序名称。<br/> 4.3TEMPLATE app 应用程序模板。<br/> 4.4 SOURCE HEADER 源文件头文件。<br/> 5Main函数<br/> 5.1QApplication a应用程序对象有且仅有一个。<br/> 5.2a.exec（）进行消息循环阻塞。<br/> 5.3 MyWidgetw窗口对象。<br/> 5.4默认不会弹出窗口想要显示窗口需要调用show.<br/> 6QPushButton<br/> 6.1 QPushButton\"btn =new QPushButton；<br/> 6.2btn-&gt;setParent（this）设置父亲。<br/> 6.3 btn-&gt;setText（\"aaa\"）<br/> 6.4 btn-&gt;move（xy）<br/> 6.5重置窗口大小 resize（wh）<br/> 7.1所有new出来的对象不用管释放。<br/> 7.2原因children表中的对象会在窗口关闭后进行自动释放8t中的坐标系8.1x正向→<br/> 8.2y正向<br/> 9Qt中的信号和措<br/> 9.1需求点击按钮关闭窗口。<br/> 9.2 connect（信号发送者，发送的信号，信号接受者，处理槽函数）<br/> 9.3优点松散耦合。<br/> 10t中的自定义信号和撞<br/> 10.1自定义信号<br/> 10.1.1返回值void<br/> 10.1.2需要声明个需要实现。<br/> 10.13可以有参数。<br/> 10.2自定义槽函数。<br/> 10.2.1返回值 void<br/> 10.2.2需要声明需要实现。<br/> 10.2.3可以有参数。<br/> 10.3触发自定义的信号<br/> 10.3.1 emit  实现触发调用<br/> 10.4当自定义信号和撞出现重载时候，原先写法失效，因为执行的函数地址不明确                        10.5解决方法：利用函数指针来明确指向哪个函数的地址。<br/> 10.6 QString 转 char*toutf8 转   QBtyeArray   类型在利用 data 转成 char*   否则输出有引号</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>"}