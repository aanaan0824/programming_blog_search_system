{"blogid": "122928182", "writerAge": "码龄1年", "writerBlogNum": "5", "writerCollect": "195", "writerComment": "7", "writerFan": "24", "writerGrade": "1级", "writerIntegral": "96", "writerName": "偷油婆_ERP", "writerProfileAdress": "writer_image\\profile_122928182.jpg", "writerRankTotal": "185746", "writerRankWeekly": "1006176", "writerThumb": "47", "writerVisitNum": "22274", "blog_read_count": "18228", "blog_time": "于 2022-02-14 18:08:32 发布", "blog_title": "Servlet基础详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<div>\n<p id=\"%E5%89%8D%E8%A8%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n<p id=\"%E4%B8%80%E3%80%81Servlet%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81Servlet%E7%AE%80%E4%BB%8B\">一、Servlet简介</a></p>\n<p id=\"%E4%BA%8C%E3%80%81Servlet%E7%9A%84%E4%BD%9C%E7%94%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81Servlet%E7%9A%84%E4%BD%9C%E7%94%A8\">二、Servlet的作用</a></p>\n<p id=\"%E4%B8%89%E3%80%81Servlet%E5%A4%84%E7%90%86%E7%9A%84%E4%BF%A1%E6%81%AF%E6%98%AF%E4%BB%80%E4%B9%88-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81Servlet%E5%A4%84%E7%90%86%E7%9A%84%E4%BF%A1%E6%81%AF%E6%98%AF%E4%BB%80%E4%B9%88\">三、Servlet处理的信息是什么</a></p>\n<p id=\"%E5%9B%9B%E3%80%81Servlet%E7%9A%84%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81Servlet%E7%9A%84%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B\">四、Servlet的开发流程</a></p>\n<p id=\"%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%81%E5%AE%9E%E7%8E%B0Servlet%E6%8E%A5%E5%8F%A3%E6%88%96%E8%80%85%E7%BB%A7%E6%89%BFHttpServlet%E7%B1%BB-toc\" style=\"margin-left:40px;\"><a href=\"#%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%81%E5%AE%9E%E7%8E%B0Servlet%E6%8E%A5%E5%8F%A3%E6%88%96%E8%80%85%E7%BB%A7%E6%89%BFHttpServlet%E7%B1%BB\">（一）、实现Servlet接口或者继承HttpServlet类</a></p>\n<p id=\"%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%81%E9%87%8D%E5%86%99HttpServlet%E7%B1%BB%E7%9A%84doGet()%E5%92%8CdoPost()%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%81%E9%87%8D%E5%86%99HttpServlet%E7%B1%BB%E7%9A%84doGet%28%29%E5%92%8CdoPost%28%29%E6%96%B9%E6%B3%95\">（二）、重写HttpServlet类的doGet()和doPost()方法</a></p>\n<p id=\"%EF%BC%88%E4%B8%89%EF%BC%89%E3%80%81%E9%85%8D%E7%BD%AEweb.xml%E6%96%87%E4%BB%B6%E6%88%96%E8%80%85%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%AF%B9servlet%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE-toc\" style=\"margin-left:40px;\"><a href=\"#%EF%BC%88%E4%B8%89%EF%BC%89%E3%80%81%E9%85%8D%E7%BD%AEweb.xml%E6%96%87%E4%BB%B6%E6%88%96%E8%80%85%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%AF%B9servlet%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE\">（三）、配置web.xml文件或者使用注解对servlet进行配置</a></p>\n<p id=\"%E4%BA%94%E3%80%81Servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81Servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">五、Servlet的生命周期</a></p>\n<p id=\"%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%81%E9%80%9A%E8%BF%87web.xml%E6%96%87%E4%BB%B6%E6%9D%A5%E9%85%8D%E7%BD%AEload-on-startup%EF%BC%88%E5%90%AF%E5%8A%A8%E6%97%B6%E5%8A%A0%E8%BD%BD%EF%BC%89%E4%BC%98%E5%85%88%E7%BA%A7-toc\" style=\"margin-left:40px;\"><a href=\"#%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%81%E9%80%9A%E8%BF%87web.xml%E6%96%87%E4%BB%B6%E6%9D%A5%E9%85%8D%E7%BD%AEload-on-startup%EF%BC%88%E5%90%AF%E5%8A%A8%E6%97%B6%E5%8A%A0%E8%BD%BD%EF%BC%89%E4%BC%98%E5%85%88%E7%BA%A7\">（一）、通过web.xml文件来配置load-on-startup（启动时加载）优先级</a></p>\n<p id=\"%E2%80%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%81%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E6%9D%A5%E9%85%8D%E7%BD%AEload-on-startup%EF%BC%88%E5%90%AF%E5%8A%A8%E6%97%B6%E5%8A%A0%E8%BD%BD%EF%BC%89%E4%BC%98%E5%85%88%E7%BA%A7-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%80%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%81%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E6%9D%A5%E9%85%8D%E7%BD%AEload-on-startup%EF%BC%88%E5%90%AF%E5%8A%A8%E6%97%B6%E5%8A%A0%E8%BD%BD%EF%BC%89%E4%BC%98%E5%85%88%E7%BA%A7\">​（二）、通过注解来配置load-on-startup（启动时加载）优先级</a></p>\n<p id=\"%E5%85%AD%E3%80%81Servlet%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%AD%E3%80%81Servlet%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95\">六、Servlet获取参数的方法</a></p>\n<p id=\"%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%81%E5%8D%95%E4%B8%AA%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%81%E5%8D%95%E4%B8%AA%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95\">（一）、单个获取请求参数的方法</a></p>\n<p id=\"%E2%80%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%81%E8%8E%B7%E5%8F%96%E9%94%AE%E5%80%BC%E5%AF%B9%E5%BD%A2%E5%BC%8F%E7%9A%84%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%80%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%81%E8%8E%B7%E5%8F%96%E9%94%AE%E5%80%BC%E5%AF%B9%E5%BD%A2%E5%BC%8F%E7%9A%84%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95\">​（二）、获取键值对形式的请求参数的方法</a></p>\n<p id=\"%E2%80%8B%EF%BC%88%E4%B8%89%EF%BC%89%E3%80%81get%E7%89%B9%E6%9C%89%E7%9A%84%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8Apost%E4%BB%A5%E6%B5%81%E7%9A%84%E5%BD%A2%E5%BC%8F%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%80%8B%EF%BC%88%E4%B8%89%EF%BC%89%E3%80%81get%E7%89%B9%E6%9C%89%E7%9A%84%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8Apost%E4%BB%A5%E6%B5%81%E7%9A%84%E5%BD%A2%E5%BC%8F%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82\">​（三）、get特有的查询字符串的方法以及post以流的形式查询字符串的方法。</a></p>\n<p id=\"%E4%B8%83%E3%80%81Servlet%E5%93%8D%E5%BA%94%E9%A1%B5%E9%9D%A2%E5%92%8C%E6%95%B0%E6%8D%AE-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%83%E3%80%81Servlet%E5%93%8D%E5%BA%94%E9%A1%B5%E9%9D%A2%E5%92%8C%E6%95%B0%E6%8D%AE\">七、Servlet响应页面和数据</a></p>\n<p id=\"%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%81Servlet%E5%93%8D%E5%BA%94%E9%A1%B5%E9%9D%A2-toc\" style=\"margin-left:40px;\"><a href=\"#%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%81Servlet%E5%93%8D%E5%BA%94%E9%A1%B5%E9%9D%A2\">（一）、Servlet响应页面</a></p>\n<p id=\"%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%81Servlet%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE-toc\" style=\"margin-left:40px;\"><a href=\"#%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%81Servlet%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE\">（二）、Servlet响应数据</a></p>\n<p id=\"%E2%80%8B%E5%85%AB%E3%80%81Web%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:0px;\"><a href=\"#%E2%80%8B%E5%85%AB%E3%80%81Web%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0\">​八、Web项目的初始化参数</a></p>\n<p id=\"%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%81Servlet%E4%B8%AD%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96-toc\" style=\"margin-left:40px;\"><a href=\"#%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%81Servlet%E4%B8%AD%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96\">（一）、Servlet中的初始化参数如何配置及如何获取</a></p>\n<p id=\"%E2%80%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%81application%E5%9C%A8%E5%BA%94%E7%94%A8%E4%B8%AD%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0%E5%A6%82%E9%85%8D%E6%94%BE%E7%BD%AE%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%80%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%81application%E5%9C%A8%E5%BA%94%E7%94%A8%E4%B8%AD%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0%E5%A6%82%E9%85%8D%E6%94%BE%E7%BD%AE%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96\">​（二）、application在应用中初始化参数如配放置如何获取</a></p>\n<p id=\"%E2%80%8B%EF%BC%88%E4%B8%89%EF%BC%89%E3%80%81tomcat%E4%B8%AD%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%80%8B%EF%BC%88%E4%B8%89%EF%BC%89%E3%80%81tomcat%E4%B8%AD%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96\">​（三）、tomcat中初始化参数如何配置如何获取</a></p>\n<p id=\"%E2%80%8B%E4%B9%9D%E3%80%81Servlet%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98-toc\" style=\"margin-left:0px;\"><a href=\"#%E2%80%8B%E4%B9%9D%E3%80%81Servlet%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98\">​九、Servlet的线程安全问题</a></p>\n<p id=\"%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></p>\n<hr id=\"hr-toc\"/>\n</div>\n<hr/>\n<h1 id=\"%E5%89%8D%E8%A8%80\"><a id=\"_10\"></a>前言</h1>\n<p><span style=\"color:#4da8ee;\"><strong>Servlet是开发动态Web资源的一项技术，在整个开发架构中主要承担控制器（Controller）的作用，刚开始本章主要学习了解Servlet的基础概念及使用规范。</strong></span></p>\n<hr/>\n<h1 id=\"%E4%B8%80%E3%80%81Servlet%E7%AE%80%E4%BB%8B\">一、Servlet简介</h1>\n<p>Servlet是Server Applet的简称，翻译过来就是服务程序。是由sun公司提供的一门用于开发动态Web资源的技术。简单的讲，Servlet就是运行在服务器上的一个小程序，用来处理服务器接收到的请求。</p>\n<p>比如一般的网页程序，是由我们通过浏览器来访问实现的，在这个过程中，我们的浏览器发送访问请求，服务器接收到请求，并对浏览器的请求做出相应的处理，这就是我们熟悉的B/S模型（浏览器—服务器模型）。而Servlet就是对请求做出处理的组件，运行于支持java的应用服务器中。</p>\n<p>Servlet从狭义上说白了就是个接口，从广义上说就是实现了这个接口的所有的子类。</p>\n<p><strong>附加：</strong>我们打开项目目录下的JSP文件查看其源码，可以发现JSP底层也是实现了Servlet接口的，所以JSP它本质上就是一个Servlet。</p>\n<h1 id=\"%E4%BA%8C%E3%80%81Servlet%E7%9A%84%E4%BD%9C%E7%94%A8\">二、Servlet的作用</h1>\n<p>在Servlet刚刚出现的年代，Servlet的作用十分复杂，即承担了处理数据的作用，又承担了展示页面的作用，导致代码的耦合性过高,不易于维护。随着时间的推移，出现了<span style=\"color:#fe2c24;\">MVC思想，也就是模型 - 界面 - 控制器思想</span>，极大的简便了开发，也明确了Servlet的作用。</p>\n<p><strong>附加：</strong>最经典的MVC模型是：JSP+JavaBean+Servlet开发模式。</p>\n<p><img alt=\"\" height=\"333\" src=\"image\\b3580c8208cb4bcc8a322b7e6b9d9e9f.png\" width=\"378\"/></p>\n<p> 根据上图我们可以知道，<span style=\"color:#fe2c24;\">Servlet在其中承担的作用是Controller（控制器）</span>,起到对数据进行操作的作用。</p>\n<h1 id=\"%E4%B8%89%E3%80%81Servlet%E5%A4%84%E7%90%86%E7%9A%84%E4%BF%A1%E6%81%AF%E6%98%AF%E4%BB%80%E4%B9%88\">三、Servlet处理的信息是什么</h1>\n<p>如图：我们查找Servlet底层的实现类以及实现类的子类。</p>\n<p><img alt=\"\" height=\"335\" src=\"image\\a618b925ba04464f8ab374ed77ca1a87.png\" width=\"585\"/></p>\n<p>除了自定义的实现类以外，还有GenericServlet实现类，该实现类中的service()方法没有实现接口中对应的方法，而是继续抽象下去。</p>\n<p><img alt=\"\" height=\"618\" src=\"image\\8a73a0c481a445ecbb26430e29400182.png\" width=\"1200\"/></p>\n<p>继续查找service()方法是在哪个类中实现的。随之就找到了HttpServlet这个子类。如图：</p>\n<p><img alt=\"\" height=\"786\" src=\"image\\5e1efca8db41477880a5ee604cdcbf53.png\" width=\"1200\"/>HttpServlet是直接继承的GenericServlet，从上图所见，客户端发送到服务器的请求类型是多样化的，而<span style=\"color:#fe2c24;\">Servlet作为控制器处理的就是这些请求报文</span><span style=\"color:#0d0016;\">（request）</span>。</p>\n<p>如下图：对客户端传过来的请求类型进行判断，更具传过来的类型执行对应的处理请求数据的方法。</p>\n<p><img alt=\"\" height=\"996\" src=\"image\\d129492b23b948bf8f99e992557a0990.png\" width=\"1200\"/><span style=\"color:#fe2c24;\">注意：我们的Web应用完全是基于http协议的。而http有请求报文（request）和响应报文（response）,请求报文就是浏览器向服务器发送的数据形成的数据对象，同理，响应报文就是服务器向浏览器发送的数据形成的数据对象，而http有两个重要的方法，也就是上图中HttpServlet中的doPost()和doGet()方法。这两个方法对应的post和get，就是前端表单中使用的。比如你登录某网站首页时，提交用户名和密码，就是被http协议封装成请求报文的形式发送到服务器的，这样，servlet就能够读取请求报文的类容，并对报文进行处理。</span></p>\n<h1 id=\"%E5%9B%9B%E3%80%81Servlet%E7%9A%84%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B\">四、Servlet的开发流程</h1>\n<h2 id=\"%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%81%E5%AE%9E%E7%8E%B0Servlet%E6%8E%A5%E5%8F%A3%E6%88%96%E8%80%85%E7%BB%A7%E6%89%BFHttpServlet%E7%B1%BB\">（一）、实现Servlet接口或者继承HttpServlet类</h2>\n<p><strong>注：</strong>继承HttpServlet类更简洁更常用。</p>\n<h2 id=\"%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%81%E9%87%8D%E5%86%99HttpServlet%E7%B1%BB%E7%9A%84doGet()%E5%92%8CdoPost()%E6%96%B9%E6%B3%95\">（二）、重写HttpServlet类的doGet()和doPost()方法</h2>\n<h2 id=\"%EF%BC%88%E4%B8%89%EF%BC%89%E3%80%81%E9%85%8D%E7%BD%AEweb.xml%E6%96%87%E4%BB%B6%E6%88%96%E8%80%85%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%AF%B9servlet%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE\">（三）、配置web.xml文件或者使用注解对servlet进行配置</h2>\n<p><strong>1、首先在maven配置文件pom.xml中导入Servlet - API的依赖</strong></p>\n<p><img alt=\"\" height=\"698\" src=\"image\\fe66e0975c8e44d4bf55b8689fe918f0.png\" width=\"1200\"/><strong>2、使用web.xml配置servlet访问路径</strong></p>\n<p><img alt=\"\" height=\"397\" src=\"image\\1d037b62e9ca4d0eaa2138e687c05153.png\" width=\"641\"/></p>\n<p><strong>3、使用注解配置servlet访问路径</strong></p>\n<p><img alt=\"\" height=\"342\" src=\"image\\d34ebcd29e6f4967a23a8837a6d341f8.png\" width=\"650\"/><span style=\"color:#fe2c24;\"><strong>注意：</strong></span>配置访问路径，注解和web.xml两者二选一即可，避免混淆！</p>\n<h1 id=\"%E4%BA%94%E3%80%81Servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">五、Servlet的生命周期</h1>\n<p>我们通过去实现Servlet接口的方式观察Servlet的生命周期。如图：</p>\n<p><img alt=\"\" height=\"393\" src=\"image\\6eb036ffbc6548ccb98441141e56a3b9.png\" width=\"646\"/></p>\n<p>所谓生命周期，就是Servlet什么时候创建，调用了何种方法，最后在什么时候被销毁。我们之前学过的对象都是自己手动创建的，最后由JVM来销毁，而Servlet的整个生命周期，都是由tomcat服务器来控制的。</p>\n<p>由上图所示，程序运行后得出结论，<strong>Servlet的生命周期是：</strong></p>\n<p><strong>实例化 --》初始化 --》多次调用service服务 --》 tomcat容器关闭时销毁</strong></p>\n<ul><li><strong>默认情况下</strong>Servlet是在第一次访问的时候实例化和初始化的</li><li>第一次访问就会调用service()服务方法</li><li>直到关闭服务器时，Servlet才会被销毁</li></ul>\n<p>除了默认情况，我们也可以通过<strong>load-on-startup</strong>来控制Servlet在服务器启动的时候就加载（实例化+初始化）</p>\n<h2 id=\"%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%81%E9%80%9A%E8%BF%87web.xml%E6%96%87%E4%BB%B6%E6%9D%A5%E9%85%8D%E7%BD%AEload-on-startup%EF%BC%88%E5%90%AF%E5%8A%A8%E6%97%B6%E5%8A%A0%E8%BD%BD%EF%BC%89%E4%BC%98%E5%85%88%E7%BA%A7\">（一）、通过web.xml文件来配置load-on-startup（启动时加载）优先级</h2>\n<h2 id=\"%E2%80%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%81%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E6%9D%A5%E9%85%8D%E7%BD%AEload-on-startup%EF%BC%88%E5%90%AF%E5%8A%A8%E6%97%B6%E5%8A%A0%E8%BD%BD%EF%BC%89%E4%BC%98%E5%85%88%E7%BA%A7\"><img alt=\"\" height=\"949\" src=\"image\\b33acd801df642c79e90a5e675618ab6.png\" width=\"1200\"/>（二）、通过注解来配置load-on-startup（启动时加载）优先级</h2>\n<p><img alt=\"\" height=\"687\" src=\"image\\76e1cd5d8d8b4a98b1230efcb76f2576.png\" width=\"1200\"/><span style=\"color:#fe2c24;\"><strong>注意：</strong></span>配置load-on-startup启动时加载时，web.xml和注解两种方式，二选一即可。</p>\n<h1 id=\"%E5%85%AD%E3%80%81Servlet%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95\">六、Servlet获取参数的方法</h1>\n<p>这里主要解析Servlet获取get和post参数的方式，主要有三种：</p>\n<ol><li>使用getParameter()获取参数方法，单个获取。</li><li>使用getParameterMap()获取Map键值对参数的方法。</li><li>get特有的查询字符串的方法以及post以流的形式查询字符串的方法。</li></ol>\n<h2 id=\"%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%81%E5%8D%95%E4%B8%AA%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95\">（一）、单个获取请求参数的方法</h2>\n<h2 id=\"%E2%80%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%81%E8%8E%B7%E5%8F%96%E9%94%AE%E5%80%BC%E5%AF%B9%E5%BD%A2%E5%BC%8F%E7%9A%84%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95\"><img alt=\"\" height=\"835\" src=\"image\\8a137b69d8874fb0bade02c3dc5671e9.png\" width=\"1200\"/>（二）、获取键值对形式的请求参数的方法</h2>\n<p>注意该方法获取到的请求参数是以Map键值对的形式存在的，并且在构造实体时，我们还需要将获取到的Map类型的参数通过BeanUtils工具类转换为需要的实体类类型进行构造。所以需要先导入BeanUtils的依赖。</p>\n<p><strong>1、在maven配置文件中导入BeanUtils工具类的依赖</strong></p>\n<p><img alt=\"\" height=\"658\" src=\"image\\b43c8dbb1a1c4a9bac9e0bc794faf121.png\" width=\"1200\"/><strong>2、获取参数，构造实体</strong></p>\n<h2 id=\"%E2%80%8B%EF%BC%88%E4%B8%89%EF%BC%89%E3%80%81get%E7%89%B9%E6%9C%89%E7%9A%84%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8Apost%E4%BB%A5%E6%B5%81%E7%9A%84%E5%BD%A2%E5%BC%8F%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82\"><img alt=\"\" height=\"849\" src=\"image\\9021daaa620b4e99b1f71b310ba778d5.png\" width=\"1200\"/>（三）、get特有的查询字符串的方法以及post以流的形式查询字符串的方法。</h2>\n<p>这两种获取字符串的方式比较特别，get获取的是浏览器中URL地址栏访问路径?后面的参数，而post是从请求体中获取参数，这两者获取到的字符串参数都是URL编过码的，所以在获取参数时候都需要<strong>解码</strong>。</p>\n<p><strong>1、get请求特有的查询字符串方法</strong></p>\n<p><img alt=\"\" height=\"349\" src=\"image\\7f1eed4dfbc24f2f9657bf087c62b876.png\" width=\"1200\"/><strong>2、post请求以流的形式获取请求体中的字符串参数</strong></p>\n<p>在使用该方法前，我们需要先简单了解下tomcat的工作原理：</p>\n<p><img alt=\"\" height=\"360\" src=\"image\\634bf26b818b47bda41cfbaae54e445c.png\" width=\"604\"/></p>\n<p>如图所示，整个过程都是以流的形式传输的，所以在post请求中要获取请求体中的字符串参数，就需要先获取到这条输入流。</p>\n<p><img alt=\"\" height=\"898\" src=\"image\\5543963ffcfa4d348283b8b480163ca5.png\" width=\"1200\"/><span style=\"color:#fe2c24;\"><strong>注意：</strong></span>获取流查询字符串参数的方式要放在最前面执行，因为流是只能消耗一次，放在其它操作过流的方法后面该方法就获取不到数据了，因为流被消耗了。</p>\n<h1 id=\"%E4%B8%83%E3%80%81Servlet%E5%93%8D%E5%BA%94%E9%A1%B5%E9%9D%A2%E5%92%8C%E6%95%B0%E6%8D%AE\">七、Servlet响应页面和数据</h1>\n<h2 id=\"%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%81Servlet%E5%93%8D%E5%BA%94%E9%A1%B5%E9%9D%A2\">（一）、Servlet响应页面</h2>\n<p>响应页面，也就是收到前端的请求响应需要跳转的页面。Servlet响应页面有<strong>转发</strong>和<strong>重定向</strong>两种方式（之前JSP的章节也讲过）：</p>\n<p><strong>1、转发 — 也就是携带客户端发送的请求转发跳转到下一个页面，使用的是request请求对象。</strong></p>\n<pre><code class=\"language-java\">//转发可以将请求中的数据带到新的页面。\n//getRequestDispatcher()：表示获取请求转发器的方法\n//forward():表示将请求及响应对象一并转发到下一个新页面\nrequest.getRequestDispatcher(\"跳转页面路径\").forward(request,response);</code></pre>\n<p><strong>2、重定向 — 服务器接收到前端请求，通过响应将要跳转的页面地址响应给客户端，客户端再重新发送请求跳转到目标页面。</strong></p>\n<pre><code class=\"language-java\">//重定向是将要跳转的页面路径交给前端重新发送请求跳转页面。\n//相当于客户端发送了两次请求，所以原来请求中的数据就没有了。\nresponse.sendRedirect(\"响应的页面路径\")</code></pre>\n<h2 id=\"%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%81Servlet%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE\">（二）、Servlet响应数据</h2>\n<p>响应数据也是通过流的方式响应给前端，这里主要用到的是一条打印流（也就是之前JSP中的内置对象out）.响应数据一般都是响应的json格式的数据，前端获取到json格式的数据就相当于拿到了一个对象，通过对象的方式去获取数据。</p>\n<p><strong>1、获取到打印流响应普通数据（注意：有乱码要设置编码格式）</strong></p>\n<p><img alt=\"\" height=\"772\" src=\"image\\1f75774cfae64dee9b7ab1f7338ebcea.png\" width=\"1200\"/><strong>2、响应json字符串格式的数据</strong></p>\n<ul><li><strong>首先我们需要先在maven中导入json的依赖，如图：</strong></li></ul>\n<p><img alt=\"\" height=\"360\" src=\"image\\4d144e73adfb42b48e61a128db9bff53.png\" width=\"653\"/></p>\n<ul><li><strong>响应json格式数据</strong></li></ul>\n<h1 id=\"%E2%80%8B%E5%85%AB%E3%80%81Web%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0\"><img alt=\"\" height=\"401\" src=\"image\\df6b88385f444943aa9b3d069e90a0e6.png\" width=\"1200\"/>八、Web项目的初始化参数</h1>\n<p>在web项目中初始化参数有三种：</p>\n<ol><li>每个Servlet可以有自己的初始化参数。</li><li>一个应用程序application也有自己的初始化参数</li><li>一个tomcat也有自己的初始化参数。</li></ol>\n<h2 id=\"%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%81Servlet%E4%B8%AD%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96\">（一）、Servlet中的初始化参数如何配置及如何获取</h2>\n<p><strong>1、配置Servlet初始化参数</strong></p>\n<p><img alt=\"\" height=\"322\" src=\"image\\b1291d6c96bc466ca995ded56f32fbbb.png\" width=\"617\"/></p>\n<p><strong>2、获取Servlet初始化参数</strong></p>\n<ul><li><strong>通过Servlet对象本身this获取Servlet初始化参数</strong></li></ul>\n<p><img alt=\"\" height=\"701\" src=\"image\\4d66b9d2259f41b7b7ae3db0a0e74836.png\" width=\"1200\"/></p>\n<ul><li><strong>通过Servlet的初始化方法中的config配置对象获取Servlet初始化参数</strong></li></ul>\n<h2 id=\"%E2%80%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%81application%E5%9C%A8%E5%BA%94%E7%94%A8%E4%B8%AD%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0%E5%A6%82%E9%85%8D%E6%94%BE%E7%BD%AE%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96\"><img alt=\"\" height=\"519\" src=\"image\\d5650f9c4afa414e81cb7d58a59c2936.png\" width=\"1200\"/>（二）、application在应用中初始化参数如配放置如何获取</h2>\n<p><strong>1、配置应用中的初始化参数</strong></p>\n<p><img alt=\"\" height=\"637\" src=\"image\\fa1a06d288b64c249351c73b2837f43f.png\" width=\"1200\"/><strong>2、获取application应用中的初始化参数</strong></p>\n<h2 id=\"%E2%80%8B%EF%BC%88%E4%B8%89%EF%BC%89%E3%80%81tomcat%E4%B8%AD%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96\"><img alt=\"\" height=\"561\" src=\"image\\7652d312dc0c4bcd89a90dc1aec9ebc8.png\" width=\"1200\"/>（三）、tomcat中初始化参数如何配置如何获取</h2>\n<p>配置tomcat的初始化参数，需要到tomcat的conf文件目录中找到context.xml文件源码进行配置。</p>\n<p><img alt=\"\" height=\"693\" src=\"image\\49f152f60df247fd9338b4d4a5f3f988.png\" width=\"1200\"/>这里会使用到<strong>jndi规范（java naming directory interface译：java命名目录接口）</strong>进行配置。jndi也就是通过命名和资源关联起来的一种编程规范。</p>\n<p><strong>1、配置tomcat的初始化参数</strong></p>\n<p><img alt=\"\" height=\"613\" src=\"image\\64654764524a4a71af77882d0aa6c0eb.png\" width=\"1200\"/><strong>2、获取tomcat的初始化参数</strong></p>\n<h1 id=\"%E2%80%8B%E4%B9%9D%E3%80%81Servlet%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98\"><img alt=\"\" height=\"800\" src=\"image\\2f293f9b4e4d46f29e1ee35577b3f50e.png\" width=\"1200\"/>九、Servlet的线程安全问题</h1>\n<p>同一个Servlet在服务器中只会存在一个实例，不论是多少个访问，都调用的是同一个实例，也就是Servlet是单实例多线程的。这就存在着一定的线程安全问题，如果在Servlet中定义一个全局变量，那么程序运行这个变量的值很有可能会不是我们所预期的，所以<strong>在Servlet中要尽量避免使用全局变量。</strong></p>\n<p>运行如下程序实例Servlet的线程安全问题：</p>\n<p><img alt=\"\" height=\"966\" src=\"image\\abd5c427ed374a8d94ad24dcb000de9e.png\" width=\"1200\"/>运行结果反应出Servlet中出现成员变量导致线程不安全：</p>\n<p><img alt=\"\" height=\"420\" src=\"image\\8fe2121afb6945d8adbb6f9d5f58cf5a.png\" width=\"1200\"/>所以Servlet中尽量避免出现成员变量。</p>\n<hr/>\n<h1 id=\"%E6%80%BB%E7%BB%93\"><a id=\"_63\"></a>总结</h1>\n<p><span style=\"color:#ad720d;\"><strong>Servlet的基础概念及使用规范，还有上篇讲的JSP技术都是为开发Web项目做准备。后续还会更新过滤器以及MVC和三层架构等……</strong></span></p>\n</div>\n</div>"}