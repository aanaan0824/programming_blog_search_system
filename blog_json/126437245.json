{"blogid": "126437245", "writerAge": "码龄1年", "writerBlogNum": "152", "writerCollect": "7434", "writerComment": "3381", "writerFan": "23130", "writerGrade": "7级", "writerIntegral": "9727", "writerName": "执久呀", "writerProfileAdress": "writer_image\\profile_126437245.jpg", "writerRankTotal": "1179", "writerRankWeekly": "127", "writerThumb": "4051", "writerVisitNum": "320666", "blog_read_count": "532", "blog_time": "于 2022-08-20 11:01:18 发布", "blog_title": "MyBatis的相应API与传统和代理开发的Dao层实现", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%C2%A0%C2%A0MyBatis%E7%9A%84%E7%9B%B8%E5%BA%94API-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%C2%A0MyBatis%E7%9A%84%E7%9B%B8%E5%BA%94API\">  MyBatis的相应API</a></p>\n<p id=\"SqlSession%E5%B7%A5%E5%8E%82%E6%9E%84%E5%BB%BA%E5%99%A8SqlSessionFactoryBuilder-toc\" style=\"margin-left:40px;\"><a href=\"#SqlSession%E5%B7%A5%E5%8E%82%E6%9E%84%E5%BB%BA%E5%99%A8SqlSessionFactoryBuilder\">1、SqlSession工厂构建器SqlSessionFactoryBuilder</a></p>\n<p id=\"SqlSession%E4%BC%9A%E8%AF%9D%E5%AF%B9%E8%B1%A1-toc\" style=\"margin-left:40px;\"><a href=\"#SqlSession%E4%BC%9A%E8%AF%9D%E5%AF%B9%E8%B1%A1\">2、SqlSession会话对象</a></p>\n<p id=\"Mybatis%E7%9A%84Dao%E5%B1%82%E5%AE%9E%E7%8E%B0-toc\" style=\"margin-left:0px;\"><a href=\"#Mybatis%E7%9A%84Dao%E5%B1%82%E5%AE%9E%E7%8E%B0\">Mybatis的Dao层实现</a></p>\n<p id=\"%E4%BC%A0%E7%BB%9F%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F-%E7%BC%96%E5%86%99UserDao%E6%8E%A5%E5%8F%A3-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BC%A0%E7%BB%9F%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F-%E7%BC%96%E5%86%99UserDao%E6%8E%A5%E5%8F%A3\">1、传统开发方式-编写UserDao接口</a></p>\n<p id=\"%E6%B5%8B%E8%AF%95%E7%BC%96%E5%86%99UserDao%E6%8E%A5%E5%8F%A3-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%B5%8B%E8%AF%95%E7%BC%96%E5%86%99UserDao%E6%8E%A5%E5%8F%A3\">测试编写UserDao接口</a></p>\n<p id=\"%C2%A0%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F\"> 2、代理开发方式</a></p>\n<p id=\"%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91%C2%A0\">代码测试代理开发 </a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%C2%A0%C2%A0MyBatis%E7%9A%84%E7%9B%B8%E5%BA%94API\">  MyBatis的相应API</h1>\n<h2 id=\"SqlSession%E5%B7%A5%E5%8E%82%E6%9E%84%E5%BB%BA%E5%99%A8SqlSessionFactoryBuilder\">1、SqlSession工厂构建器SqlSessionFactoryBuilder</h2>\n<p>常用API：SqlSessionFactory  build(InputStream inputStream)</p>\n<p>通过加载mybatis的核心文件的输入流的形式构建一个SqlSessionFactory对象</p>\n<p class=\"img-center\"><img alt=\"\" height=\"100\" src=\"image\\8a6439826121480988d570eabdbf57ec.png\" width=\"607\"/></p>\n<p> 其中，<strong>mybatis-config.xml是类加载器的路径，在maven工程下就是resource资源下</strong><strong>，</strong>Resources工具类，这个类在org.apache.ibatis.io包中。Resource类帮助你从类路径下、文件系统或一个webURL中加载资源文件。</p>\n<p>sqkSessionFactory有多个方法创建SqlSession实例，常用的有两个</p>\n<p class=\"img-center\"><img alt=\"\" height=\"123\" src=\"image\\ff4acd26f76c4aa8887bb7658107a18a.png\" width=\"576\"/></p>\n<h2 id=\"SqlSession%E4%BC%9A%E8%AF%9D%E5%AF%B9%E8%B1%A1\">2、SqlSession会话对象</h2>\n<p>SqlSession实例在MyBatis是非常强大的一个类，在这里会看到所有执行语句、提交或回滚事务和获取映射实例的方法有</p>\n<p class=\"img-center\"><img alt=\"\" height=\"150\" src=\"image\\656794e953ee4d0bba874af92adf04bb.png\" width=\"703\"/></p>\n<p> 操作事务的方法主要有</p>\n<p class=\"img-center\"><img alt=\"\" height=\"60\" src=\"image\\f630b7d8bcbb4d778a53dac056ed7368.png\" width=\"483\"/></p>\n<h1 id=\"Mybatis%E7%9A%84Dao%E5%B1%82%E5%AE%9E%E7%8E%B0\">Mybatis的Dao层实现</h1>\n<h2 id=\"%E4%BC%A0%E7%BB%9F%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F-%E7%BC%96%E5%86%99UserDao%E6%8E%A5%E5%8F%A3\">1、传统开发方式-编写UserDao接口</h2>\n<h3 id=\"%E6%B5%8B%E8%AF%95%E7%BC%96%E5%86%99UserDao%E6%8E%A5%E5%8F%A3\">测试编写UserDao接口</h3>\n<blockquote>\n<p>controller包下UserController类下</p>\n</blockquote>\n<pre><code class=\"language-java\">package com_Dao.controller;\n\nimport com_Dao.service.Impl.UserServiceImpl;\nimport com_Dao.service.UserService;\nimport com_mybatis.pojo.User;\n\nimport java.io.IOException;\nimport java.util.List;\n\npublic class UserController {\n    public static void main(String[] args) throws IOException {\n        UserService userService=new UserServiceImpl();\n        List&lt;User&gt; userList = userService.findAll();\n        System.out.println(userList);\n    }\n\n}\n</code></pre>\n<blockquote>\n<p>service包下UserService下</p>\n</blockquote>\n<p>接口</p>\n<pre><code class=\"language-java\">package com_Dao.service;\n\nimport com_mybatis.pojo.User;\n\nimport java.io.IOException;\nimport java.util.List;\n\npublic interface UserService {\n\n public List&lt;User&gt; findAll() throws IOException;\n}\n</code></pre>\n<p>实现类下</p>\n<pre><code class=\"language-java\">package com_Dao.service.Impl;\n\nimport com_Dao.Dao.Impl.UserDaoImpl;\nimport com_Dao.Dao.UserDao;\nimport com_Dao.service.UserService;\nimport com_mybatis.pojo.User;\n\nimport java.io.IOException;\nimport java.util.List;\n\npublic class UserServiceImpl implements UserService {\n UserDao userDao=new UserDaoImpl();\n    @Override\n    public List&lt;User&gt; findAll() throws IOException {\n        return userDao.findAll();\n    }\n}\n</code></pre>\n<blockquote>\n<p>dao包下的UserDao下</p>\n</blockquote>\n<p>接口下</p>\n<pre><code class=\"language-java\">package com_Dao.Dao;\n\nimport com_mybatis.pojo.User;\n\nimport java.io.IOException;\nimport java.util.List;\n\npublic interface UserDao {\n    public List&lt;User&gt; findAll() throws IOException;\n}\n</code></pre>\n<p>实现类下</p>\n<pre><code class=\"language-java\">package com_Dao.Dao.Impl;\n\nimport com_Dao.Dao.UserDao;\nimport com_mybatis.pojo.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\n\npublic class UserDaoImpl implements UserDao {\n    @Override\n    public List&lt;User&gt; findAll() throws IOException {\n\n        //获得核心配置文件\n        InputStream resourceAsFile = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n        //获得session工厂对象\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsFile);\n        //获得session会话对象\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n        //执行操作 参数：namespace+id\n        List&lt;User&gt; userList = sqlSession.selectList(\"userMapper.findAll\");\n        return userList;\n    }\n}\n</code></pre>\n<p><strong>其他文件，如sqlMapConfig.xml和UserMapper.xml等中的配置和之前的一致</strong></p>\n<p><strong>运行结果</strong></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\8eba636858434dfab612a2e9b81538d3.png\" width=\"882\"/></p>\n<h2 id=\"%C2%A0%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F\"> 2、代理开发方式</h2>\n<p>介绍</p>\n<p>采用Mybatis的电路考法方式实现Dao层的开发，这种方式是我们进入企业的主流。</p>\n<p>Mapper接口开发方法<strong>只需要程序员编写Mapper接口(相当于Dao接口)</strong>，由Mybatis框架根据接口定义创建接口的动态代理对象，代理对象的方法体同上边Dao接口实现类方法。 Mapper接口开发需要遵循以下规范:</p>\n<ol><li>Mapper.xml文件中的namespace与mapper接口的全限定名相同</li><li>Mapper接口方法名和Mapperxml中定义的每个statement的id相同</li><li>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql的parameterType的类型相同</li><li>Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</li></ol>\n<p>规范图示对应</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\9f87336e972e4065b9e9ef35d2566fce.png\" width=\"1083\"/></p>\n<h3 id=\"%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91%C2%A0\">代码测试代理开发 </h3>\n<blockquote>\n<p> UserDao下</p>\n</blockquote>\n<pre><code class=\"language-java\">package com_Dao_DaiLi.Dao;\nimport com_mybatis.pojo.User;\nimport java.io.IOException;\n\npublic interface  UserDao {\n    public User findById(int id) throws IOException;\n}\n</code></pre>\n<blockquote>\n<p> service包下</p>\n</blockquote>\n<pre><code class=\"language-java\">package com_Dao_DaiLi.service;\n\nimport com_Dao_DaiLi.Dao.UserDao;\nimport com_mybatis.pojo.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class ServiceTest {\n    public static void main(String[] args) throws IOException {\n        InputStream resourceAsStream = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n\n        UserDao mapper = sqlSession.getMapper(UserDao.class);\n        User user = mapper.findById(1);\n        System.out.println(user);\n\n    }\n}\n</code></pre>\n<blockquote>\n<p>UserMapper1.xml下 </p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"com_Dao_DaiLi.Dao.UserDao\"&gt;\n\n\n&lt;!--根据id进行查询--&gt;\n    &lt;select id=\"findById\" parameterType=\"int\" resultType=\"user\"&gt;\n        select *from user where id=#{id}\n    &lt;/select&gt;\n\n\n\n&lt;/mapper&gt;</code></pre>\n<blockquote>\n<p> 还需注意将sqlMapConfig.xml下加载UserMapper1.xml下 </p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\bc19b2add1094ad59014f45d34327392.png\" width=\"1200\"/></p>\n<p></p>\n<p>运行结果</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\8702188a29eb485c82086a1008d61672.png\" width=\"937\"/></p>\n<p></p>\n</div>\n</div>"}