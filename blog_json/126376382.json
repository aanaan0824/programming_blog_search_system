{"blogid": "126376382", "writerAge": "码龄163天", "writerBlogNum": "80", "writerCollect": "2734", "writerComment": "3081", "writerFan": "3573", "writerGrade": "6级", "writerIntegral": "7846", "writerName": "北极的三哈", "writerProfileAdress": "writer_image\\profile_126376382.jpg", "writerRankTotal": "1807", "writerRankWeekly": "16", "writerThumb": "2690", "writerVisitNum": "648840", "blog_read_count": "17090", "blog_time": "已于 2022-08-24 09:52:31 修改", "blog_title": "Python面向对象三大特征", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/4f047c5263c3424b9353a21c7f6ccf8b.gif#pic_center\"/></p>\n<blockquote>\n<p>🤵‍♂️ 个人主页: <a href=\"https://blog.csdn.net/m0_68744965?spm=1000.2115.3001.5343\">@Flyme awei 个主页</a><br/> 👨‍💻 作者简介：<code>Python</code>领域新星创作者。<br/> 📒 系列专栏：《<a href=\"https://blog.csdn.net/m0_68744965/category_11957439.html?spm=1001.2014.3001.5482\">在线编程-Python篇</a>》<br/> 🌐推荐一款<code>找工作神器</code>网站：《<a href=\"https://www.nowcoder.com/link/pc_csdncpt_flyme_python\">牛客网</a>》|<code>笔试题库</code>|<code>面试经验</code>|<code>实习经验内推</code>|<br/> 🐋 希望大家多多支持😘一起进步呀！<br/> 📝 如果文章对你有帮助的话，欢迎评论 💬点赞 👍收藏 📂加关注</p>\n</blockquote>\n<hr/>\n<p><strong>前言</strong></p>\n<blockquote>\n<p>  今天是《<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\">CSDN21天学习挑战赛</a>》的第17天<br/>   上一节学习了<a href=\"http://t.csdn.cn/XlsuW\">Python基础语法类和对象</a><br/>   今天将Python面向三大特征：封装、继承、多态</p>\n</blockquote>\n<hr/>\n<p><strong>《<a href=\"https://www.nowcoder.com/link/pc_csdncpt_flyme_python\">牛客题库-Python篇</a>》</strong></p>\n<p><code>python</code>的学习还是得基础知识+自己动手同步进行。如果是<code>python</code>新手，需要找一个可以在线练习得网站，我建议你去<a href=\"https://www.nowcoder.com/link/pc_csdncpt_flyme_python\">牛客网</a>多练习。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5307c0c83e4a4ee6a4c3a94b167f0cba.png\"/></p>\n<blockquote>\n<p>活动地址：<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\">CSDN21天学习挑战赛</a></p>\n</blockquote>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#python_29\">python面向对象三大特征</a></li><li><a href=\"#_38\">一、封装</a></li><li><a href=\"#_100\">二、继承</a></li><li><ul><li><a href=\"#1_153\">1.方法重写</a></li><li><a href=\"#2object_207\">2.object类</a></li><li><a href=\"#3_242\">3.多重继承</a></li></ul>\n</li><li><a href=\"#_267\">三、多态</a></li><li><ul><li><a href=\"#1_322\">1.动态语言与静态语言</a></li></ul>\n</li><li><a href=\"#_336\">四、类的特殊属性和方法</a></li><li><ul><li><a href=\"#1_338\">1.特殊属性</a></li><li><a href=\"#2_385\">2.特殊方法</a></li><li><ul><li><a href=\"#__len_____add____393\">`__len__()`方法和 `__add__()` 方法</a></li><li><a href=\"#__new___440\">`__new__`方法</a></li><li><a href=\"#__init___476\">`__init__`方法</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_509\">五、变量的赋值操作</a></li><li><a href=\"#_545\">六、对象的浅拷贝和深拷贝</a></li><li><ul><li><a href=\"#1_547\">1.浅拷贝</a></li><li><a href=\"#2_601\">2.深拷贝</a></li></ul>\n</li><li><a href=\"#_647\">七、总结</a></li><li><ul><li><ul><li><a href=\"#__662\">**`推 荐:牛客题霸-经典高频面试题库`**</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"python_29\"></a>python面向对象三大特征</h1>\n<blockquote>\n<p><code>封装</code>：将数据（属性）和行为（方法）包装到类对象中。在方法内部对属性进行操作，在类对象的外部调用方法。这样，无需关心方法内部的具体实现细节，从而隔离了复杂度。</p>\n</blockquote>\n<blockquote>\n<p><code>继承</code>：子类可以继承父类的属性和方法，提高代码的复用性。</p>\n</blockquote>\n<blockquote>\n<p><code>多态</code>：多态就是具有多种形态，即便不知道一个变量所引用的对象是什么类型，仍然可以使用这个变量调用方法。</p>\n</blockquote>\n<h1><a id=\"_38\"></a>一、封装</h1>\n<blockquote>\n<p><code>封装</code>：将属性和方法包装到类对象中，在方法内部对属性进行操作，在类对象外部调用方法。</p>\n</blockquote>\n<p>代码实现：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token comment\"># 封装:提高程序的安全性</span>\n<span class=\"token comment\"># 将属性和方法包装到类对象中</span>\n<span class=\"token comment\"># 在方法内部对属性进行操作，在类对象外部调用方法</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> brand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> brand  <span class=\"token comment\"># 实例属性</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 静态方法</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'汽车已启动...'</span><span class=\"token punctuation\">)</span>\n\n\ncar <span class=\"token operator\">=</span> Car<span class=\"token punctuation\">(</span><span class=\"token string\">'奥迪A8'</span><span class=\"token punctuation\">)</span>\ncar<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8c0c57301bba4dbfbbda1ea6da5f8bd5.png\"/></p>\n<blockquote>\n<p>如果不希望实例属性在类的外部被使用，可以在前面加上两个下划线\"<code>_</code>\"</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>__age <span class=\"token operator\">=</span> age  <span class=\"token comment\"># 如果不希望实例属性在类的外部被使用，所以在前面加上两个下划线</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>__age\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'吃'</span><span class=\"token punctuation\">)</span>\n\n\nstu1 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'李华'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nstu1<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 调用方法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>stu1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看对象可以用的属性</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-------------'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> stu1<span class=\"token punctuation\">.</span>_Student__age<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 在类外部通过_Student__age访问实例属性self.__age</span>\nstu1<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1f1716d7aa2d4fcf8dc42f38b917b99d.png\"/></p>\n<h1><a id=\"_100\"></a>二、继承</h1>\n<blockquote>\n<p><code>继承</code>:子类可以继承父类的属性和方法，提高代码的复用性。<br/> 如果一个对象没有继承任何类，则默认继承<code>objec</code>t类</p>\n</blockquote>\n<p>语法格式:</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> 子类名<span class=\"token punctuation\">(</span>父类<span class=\"token number\">1</span>，父类<span class=\"token number\">2</span>，<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n</code></pre>\n<p>代码实现：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> stu_nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 继承父类的属性</span>\n        self<span class=\"token punctuation\">.</span>stu_nb <span class=\"token operator\">=</span> stu_nb  <span class=\"token comment\"># 新增属性</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>stu_nb\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Teach</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> teach_of_year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Teach<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>teach_of_year <span class=\"token operator\">=</span> teach_of_year\n\n\nstudent <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1001'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建对象</span>\nteacher <span class=\"token operator\">=</span> Teach<span class=\"token punctuation\">(</span><span class=\"token string\">'杨老师'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\nstudent<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nteacher<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span>__str__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span>stu_nb<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>teacher<span class=\"token punctuation\">.</span>teach_of_year<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1f21c5344b784e27bceab7f3a4d16856.png\"/></p>\n<h2><a id=\"1_153\"></a>1.方法重写</h2>\n<blockquote>\n<p>如果子类对继承自己父类的某个属性不满意，可以在子类对其（方法体）进行重新编写。</p>\n</blockquote>\n<blockquote>\n<p>子类重写后的方法通过 <code>super().方法名()</code> 调用父类中被重写的方法。</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token comment\"># 如果子类对继承自己父类的某个属性不满意，可以在子类对其（方法体）进行重新编写</span>\n<span class=\"token comment\"># 子类重写后的方法通过 super()...方法名() 调用父类中被重写的方法</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> stu_nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>stu_nb <span class=\"token operator\">=</span> stu_nb\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 方法重写</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 调用父类中方法</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'学号:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>self<span class=\"token punctuation\">.</span>stu_nb<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># f''格式化字符串</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Teach</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> teach_of_year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Teach<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>teach_of_year <span class=\"token operator\">=</span> teach_of_year\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 方法重写</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'教龄{0}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>teach_of_year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 格式化字符串</span>\n\n\nstudent <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1001'</span><span class=\"token punctuation\">)</span>\nteacher <span class=\"token operator\">=</span> Teach<span class=\"token punctuation\">(</span><span class=\"token string\">'杨老师'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\nstudent<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------'</span><span class=\"token punctuation\">)</span>\nteacher<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7903a3064ff24e72ae1d88a2f292eddb.png\"/></p>\n<h2><a id=\"2object_207\"></a>2.object类</h2>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token triple-quoted-string string\">'''\nobject 类是所有类的父类，所有类都有object类的属性和方法\n内置函数dir（）可以查看指定对象所有属性\nObject有一个__str__方法，用于返回一个对于”对象的描述\n对应内置函数str（）通常用于print（）方法，帮我们查看对象的信息，所以经常会对__str__进行重写“'''</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 重写父类object中的方法</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'我的名字是{0}，今年{1}岁了'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n\n\nstu <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看stu这个对象的所有属性和方法 从object类中继承的</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 默认调用__str__()这样的方法 输出:我的名字是张三，今年20岁了</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class '__main__.Student'&gt;  Student类型</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1d9062591c874418a0afff7d2e894983.png\"/></p>\n<h2><a id=\"3_242\"></a>3.多重继承</h2>\n<blockquote>\n<p>一个子类可以有多个“直接父类”，这样，就具备了“多个父类”的特点，通过类的特殊属性<code>__mro__</code> 可以查看类的组织结构。</p>\n</blockquote>\n<blockquote>\n<p>定义子类时，必须在其构造函数中调用父类的构造函数</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token comment\"># 多继承</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n</code></pre>\n<h1><a id=\"_267\"></a>三、多态</h1>\n<blockquote>\n<p><code>多态</code>:多态就是具有多种形态，即便不知道一个变量所引用的对象是什么类型，仍然可以使用这个变量调用方法，在运行过程中根据变量所引用的对象类型，动态决定调用那个对象中的方法。</p>\n</blockquote>\n<p>代码实现：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token triple-quoted-string string\">''' \n多态:多态就是具有多种形态，即便不知道一个变量所引用的对象是什么类型，仍然可以使用这个变量调用方法，在运行过程中根据变量所引用的对象类型，动态决定调用那个对象中的方法'''</span>\n\n<span class=\"token comment\"># 动态语言多崇尚鸭子类型，当一只鸟走起来向鸭子，游起来以向鸭子，看起来也像鸭子，那么这只鸟及可以被称为鸭子</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'动物会吃'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'够吃骨头'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'猫吃小鱼'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'人吃五谷杂粮'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 定义一个函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>fun1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    fun1<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 调用对象的eat()方法</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 开始调用函数</span>\n    fun<span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Cat继承了Animal Dog继承了Animal</span>\n    fun<span class=\"token punctuation\">(</span>Cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Cat 和Dog是重写了父类中的eat方法，调用了自己重写后的内容</span>\n    fun<span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'------------------'</span><span class=\"token punctuation\">)</span>\n    fun<span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Person 没有继承关系 但是有eat方法，直接调用eat方法</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5ea3b0f28dbd4c35bfa09fce17d0205a.png\"/></p>\n<h2><a id=\"1_322\"></a>1.动态语言与静态语言</h2>\n<blockquote>\n<p><code>Python</code>是一门动态语言，可以在创建对象后动态的绑定属性和方法，</p>\n</blockquote>\n<p>静态语言和动态语言关于多态的区别：</p>\n<blockquote>\n<p><code>静态语言</code>实现多态的三个必要条件(<code>Java</code>)<br/> 1. 继承<br/> 2. 方法重写<br/> 3. 父类引用指向子类对象</p>\n</blockquote>\n<blockquote>\n<p><code>动态语言</code>：(<code>Python)</code><br/> 动态语言的多态崇尚 “<code>鸭子类型</code>“ 一只鸟走起来像鸭子，游起来像鸭子，那么这只鸟就可以被称为鸭子。在鸭子类型中，不需要关心对象是什么类型，到底是不是鸭子，只关心对象的<code>行为</code>’‘’</p>\n</blockquote>\n<h1><a id=\"_336\"></a>四、类的特殊属性和方法</h1>\n<h2><a id=\"1_338\"></a>1.特殊属性</h2>\n<table><thead><tr><th>特殊属性</th><th>描述</th></tr></thead><tbody><tr><td><code>__dict__</code></td><td>获得类对象或实例对象所绑定的所有属性的方法的字典</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token comment\"># 特殊属性 __dict__ 获得类对象或实例对象所绑定的所有 属性 或 方法 的字典</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 实例属性</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># 创建C类的对象</span>\n    x <span class=\"token operator\">=</span> C<span class=\"token punctuation\">(</span><span class=\"token string\">'Jack'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># x是C类的一个实例对象</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获得实例对象属性的字典</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获得类对象的属性和方法的字典</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出对象所属的类</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">.</span>__bases__<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C类父类类型的元组  (&lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">.</span>__base__<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 类的基类  离C类最近的父类</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">.</span>__mro__<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看类的层次结构</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>__subclasses__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 子类的列表</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\88aacc6a3cf5426a9e29303fd57a4390.png\"/></p>\n<h2><a id=\"2_385\"></a>2.特殊方法</h2>\n<table><thead><tr><th>特殊方法</th><th>描述</th></tr></thead><tbody><tr><td><code>__len__()</code></td><td>通过重写 <code>__len__()</code>方法，让内置函数<code>len()</code>的参数可以是自定义类型</td></tr><tr><td><code>__add__()</code></td><td>通过重写<code>__add__()</code>方法，可以让自定义对象具有<code>+</code>的功能</td></tr><tr><td><code>__new__()</code></td><td>用于创建对象</td></tr><tr><td><code>__init__()</code></td><td>对创建的对象进行初始化</td></tr></tbody></table>\n<h3><a id=\"__len_____add____393\"></a><code>__len__()</code>方法和 <code>__add__()</code> 方法</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token comment\"># 1.特殊方法  __add__()</span>\n<span class=\"token comment\"># 通过重写 __add__()方法，可以使自定义对象具有 “+” 的功能</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b  <span class=\"token comment\"># 两个整数类型的对象的相加操作</span>\nd <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>__add__<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span>\n    sex <span class=\"token operator\">=</span> <span class=\"token string\">'女'</span>  <span class=\"token comment\"># 类属性</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 初始化方法</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__add__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 重写 __add__()方法 可以使自定义对象具有 “+” 的功能</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> other<span class=\"token punctuation\">.</span>name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 重写 __len__方法 让自定义函数len()的参数可以是自定义类型</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\n\nstu1 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'Jack'</span><span class=\"token punctuation\">)</span>\nstu2 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">)</span>\ns <span class=\"token operator\">=</span> stu1 <span class=\"token operator\">+</span> stu2  <span class=\"token comment\"># 实现了两个对象的加法运算（因为在Student类中 编写__add__()特殊的方法）</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2.特殊方法  __len__()</span>\n<span class=\"token comment\"># 通过重写__len__()方法，让自定义函数len()的参数可以是自定义类型</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># len是内置函数，可以计算列表的一个长度</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">.</span>__len__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 特殊方法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>stu1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8b1346cc336745299117ce6422c5d611.png\"/></p>\n<h3><a id=\"__new___440\"></a><code>__new__</code>方法</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 创建对象</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'__new__()方法被调用执行了，cls的id值为{0}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        obj <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建对象 obj</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'创建对象(obj)的id值为:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class '__main__.Person'&gt;</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;__main__.Person object at 0x000001C8B13D9CA0&gt;</span>\n        <span class=\"token keyword\">return</span> obj\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 对对象的属性进行初始化</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'__init__()被调用执行了，self的id值为</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>nane <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'object这个类对象的id为:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Person这个类对象的id为:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 创建Person类的实例对象</span>\n    p1 <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'p1这个Person类的实例对象的id为</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a0db850ca06748d4a37b708528439ceb.png\"/></p>\n<h3><a id=\"__init___476\"></a><code>__init__</code>方法</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/15 23:27</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 创建对象</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'__new__()方法被调用执行了，cls的id值为{0}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        obj <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建对象 obj</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'创建对象(obj)的id值为:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> obj\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 对对象的属性进行初始化</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'__init__()被调用执行了，self的id值为</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>nane <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'object这个类对象的id为:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Person这个类对象的id为:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 创建Person类的实例对象</span>\np1 <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'p1这个Person类的实例对象的id为</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\76cda310952f476bb8e14e5a23cc3730.png\"/></p>\n<h1><a id=\"_509\"></a>五、变量的赋值操作</h1>\n<blockquote>\n<p>只是多生成了一个变量，实际上还是指向同一个对象</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># author : Flyme awei </span>\n<span class=\"token comment\"># 开发时间: 2022/7/1 15:32</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CPU</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Disk</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> cpu<span class=\"token punctuation\">,</span> disk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 给对象的实例属性进行初始化</span>\n        self<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">=</span> cpu\n        self<span class=\"token punctuation\">.</span>disk <span class=\"token operator\">=</span> disk\n\n\n<span class=\"token comment\"># 变量的赋值</span>\ncp1 <span class=\"token operator\">=</span> Computer<span class=\"token punctuation\">(</span>cpu<span class=\"token operator\">=</span><span class=\"token string\">'CPU'</span><span class=\"token punctuation\">,</span> disk<span class=\"token operator\">=</span><span class=\"token string\">'DISK'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建CPU类的实例对象</span>\ncp2 <span class=\"token operator\">=</span> cp1  \n<span class=\"token comment\"># 变量的赋值,一个对象的实例采用两个变量存储，实际上还是指向一个对象</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cp1<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>cp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cp2<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>cp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a8cbdaa68a8d45a7adb0eaec5dd59ab9.png\"/></p>\n<p><strong>赋值（=），就是创建了对象的一个新的引用，修改其中任意一个变量都会影响到另一个。</strong></p>\n<hr/>\n<h1><a id=\"_545\"></a>六、对象的浅拷贝和深拷贝</h1>\n<h2><a id=\"1_547\"></a>1.浅拷贝</h2>\n<blockquote>\n<p><code>Python</code>拷贝一般都是<code>浅拷贝</code>，拷贝时，对象包含的子对象内容不拷贝，因此，源对象与拷贝对象会引用同一个子对象。</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># author : Flyme awei </span>\n<span class=\"token comment\"># 开发时间: 2022/7/1 15:32</span>\n\n<span class=\"token keyword\">import</span> copy\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CPU</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Disk</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> cpu<span class=\"token punctuation\">,</span> disk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 给对象的实例属性进行初始化</span>\n        self<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">=</span> cpu\n        self<span class=\"token punctuation\">.</span>disk <span class=\"token operator\">=</span> disk\n\n\ncpu <span class=\"token operator\">=</span> CPU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一个 CPU 类的实例对象</span>\ndisk <span class=\"token operator\">=</span> Disk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一个Disk 类对象</span>\ncomputer <span class=\"token operator\">=</span> Computer<span class=\"token punctuation\">(</span>cpu<span class=\"token punctuation\">,</span> disk<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一个Computer类的实例对象</span>\n\n<span class=\"token comment\"># 浅拷贝</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cpu<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>disk<span class=\"token punctuation\">)</span>\ncomputer2 <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>computer<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 子对象不拷贝</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>computer<span class=\"token punctuation\">,</span> computer<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">,</span> computer<span class=\"token punctuation\">.</span>disk<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>computer2<span class=\"token punctuation\">,</span> computer2<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">,</span> computer2<span class=\"token punctuation\">.</span>disk<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 类的浅拷贝:</span>\n<span class=\"token comment\"># Python的拷贝一般都是浅拷贝，拷贝时，对象包含的子对象内容不拷贝</span>\n<span class=\"token comment\"># 因此，源对象与拷贝对象会引用同一个子对象</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2e17e02207ca4906862628af4162d81b.png\"/></p>\n<p><strong>浅拷贝：创建一个新的对象，但它包含的是对原始对象中包含项的引用<br/> （如果用引用的方式修改其中一个对象，另外一个也会修改改变）</strong></p>\n<blockquote>\n<p>哪些是浅拷贝：</p>\n<ol><li>完全切片方法；</li><li>工厂函数，如<code>list()</code>；</li><li><code>copy</code>模块的<code>copy()</code>函数。</li></ol>\n</blockquote>\n<hr/>\n<h2><a id=\"2_601\"></a>2.深拷贝</h2>\n<blockquote>\n<p>使用<code>copy</code>模块的<code>deepcopy</code>函数，递归拷贝对象中包含的子对象，源对象和拷贝对象所有的子对象也不相同。</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># author : Flyme awei </span>\n<span class=\"token comment\"># 开发时间: 2022/7/1 15:32</span>\n\n<span class=\"token keyword\">import</span> copy\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CPU</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Disk</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> cpu<span class=\"token punctuation\">,</span> disk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 给对象的实例属性进行初始化</span>\n        self<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">=</span> cpu\n        self<span class=\"token punctuation\">.</span>disk <span class=\"token operator\">=</span> disk\n\n\ncpu <span class=\"token operator\">=</span> CPU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一个 CPU 对象</span>\ndisk <span class=\"token operator\">=</span> Disk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一个硬盘类对象</span>\ncomputer <span class=\"token operator\">=</span> Computer<span class=\"token punctuation\">(</span>cpu<span class=\"token punctuation\">,</span> disk<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一个计算机类对象</span>\n\n<span class=\"token comment\"># 深拷贝</span>\ncomputer1 <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>computer<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>computer<span class=\"token punctuation\">,</span> computer<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">,</span> computer<span class=\"token punctuation\">.</span>disk<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>computer1<span class=\"token punctuation\">,</span> computer1<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">,</span> computer1<span class=\"token punctuation\">.</span>disk<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 类的深拷贝</span>\n<span class=\"token comment\"># 使用copy模块的deepcopy函数，递归拷贝对象中包含的子对象</span>\n<span class=\"token comment\"># 源对象和拷贝对象所有的子对象也不同</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4af3418bc8d64214b343f942eab09f8a.png\"/></p>\n<p><strong>深拷贝：创建一个新的对象，并且递归的复制它所包含的对象。</strong></p>\n<blockquote>\n<p>修改其中一个，另外一个不会改变。因此，新对象和原对象没有任何关联。<br/> 例如：{<!-- --><code>copy</code>模块的<code>deepcopy(</code>)函数}</p>\n</blockquote>\n<h1><a id=\"_647\"></a>七、总结</h1>\n<blockquote>\n<p><code>面向对象三大特征</code>：</p>\n<ol><li><code>封装</code>：将属性和方法包装到类对象中，在方法内部对属性进行操作，在类对象外部调用方法。</li><li><code>继承</code>：多继承、方法重写</li><li><code>多态</code>：即便不知道一个变量所引用的对象是什么类型，仍然可以使用这个变量调用方法，在运行过程中根据变量所引用的对象类型，动态决定调用那个对象中的方法。</li></ol>\n<blockquote>\n<ul><li>动态语言：关注对象的行为</li><li>静态语言：继承、方法重写、父类引用指向子类对象</li></ul>\n</blockquote>\n</blockquote>\n<blockquote>\n<p><code>object</code>类</p>\n<ol><li>所有类的父类</li><li><code>__new__()</code>创建对象</li><li><code>__init__()</code>初始化对象</li><li><code>__str__()</code>返回对象的描述<br/> ​</li></ol>\n</blockquote>\n<hr/>\n<h3><a id=\"__662\"></a><strong><code>推 荐:牛客题霸-经典高频面试题库</code></strong></h3>\n<blockquote>\n<p>🌐 <code>找工作神器-|笔试题库|面试经验|大厂面试题</code> 👉 <a href=\"https://www.nowcoder.com/link/pc_csdncpt_flyme_python\">点击链接进行注册学习</a><br/> <img alt=\"在这里插入图片描述\" src=\"image\\49a08629e93f405d9c3431d811a77fff.png\"/></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}