{"blogid": "125767058", "writerAge": "码龄2年", "writerBlogNum": "5", "writerCollect": "5", "writerComment": "0", "writerFan": "1", "writerGrade": "1级", "writerIntegral": "71", "writerName": "我就是CC啊", "writerProfileAdress": "writer_image\\profile_125767058.jpg", "writerRankTotal": "116822", "writerRankWeekly": "1112746", "writerThumb": "10", "writerVisitNum": "5020", "blog_read_count": "1157", "blog_time": "于 2022-07-14 18:02:58 发布", "blog_title": "Unity实现人物移动和镜头跟随", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>这是我作为初学者学习出来的一个实现人物移动和镜头跟随的办法，那来看看我是怎么学习的 </p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1%E3%80%81%E9%95%9C%E5%A4%B4%E6%A0%B9%E6%8D%AE%E9%BC%A0%E6%A0%87%E8%BE%93%E5%85%A5%E8%BF%9B%E8%A1%8C%E6%97%8B%E8%BD%AC-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E9%95%9C%E5%A4%B4%E6%A0%B9%E6%8D%AE%E9%BC%A0%E6%A0%87%E8%BE%93%E5%85%A5%E8%BF%9B%E8%A1%8C%E6%97%8B%E8%BD%AC\">一、镜头根据鼠标输入进行旋转</a></p>\n<p id=\"%E7%89%A9%E4%BD%93%E6%A0%B9%E6%8D%AE%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E8%BF%9B%E8%A1%8C%E7%A7%BB%E5%8A%A8-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%89%A9%E4%BD%93%E6%A0%B9%E6%8D%AE%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E8%BF%9B%E8%A1%8C%E7%A7%BB%E5%8A%A8\">二、物体根据键盘输入进行移动</a></p>\n<p id=\"1%E3%80%81%E5%88%9B%E5%BB%BA%E7%A7%BB%E5%8A%A8%E7%89%A9%E4%BD%93%E8%84%9A%E6%9C%AC-toc\" style=\"margin-left:80px;\"><a href=\"#1%E3%80%81%E5%88%9B%E5%BB%BA%E7%A7%BB%E5%8A%A8%E7%89%A9%E4%BD%93%E8%84%9A%E6%9C%AC\">1、创建移动物体脚本</a></p>\n<p id=\"%C2%A02%E3%80%81%E5%88%9B%E5%BB%BA%E8%BE%93%E5%85%A5%E6%8E%A7%E5%88%B6%E8%84%9A%E6%9C%AC-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A02%E3%80%81%E5%88%9B%E5%BB%BA%E8%BE%93%E5%85%A5%E6%8E%A7%E5%88%B6%E8%84%9A%E6%9C%AC\"> 2、创建输入控制脚本</a></p>\n<p id=\"%C2%A03%E3%80%81%E7%A1%AE%E5%AE%9A%E7%89%A9%E4%BD%93%E7%A7%BB%E5%8A%A8%E7%9A%84%E5%89%8D%E8%BF%9B%E6%96%B9%E5%90%91-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A03%E3%80%81%E7%A1%AE%E5%AE%9A%E7%89%A9%E4%BD%93%E7%A7%BB%E5%8A%A8%E7%9A%84%E5%89%8D%E8%BF%9B%E6%96%B9%E5%90%91\"> 3、确定物体移动的前进方向</a></p>\n<p id=\"%E6%91%84%E5%83%8F%E6%9C%BA%E8%B7%9F%E9%9A%8F%E4%BA%BA%E7%89%A9-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%91%84%E5%83%8F%E6%9C%BA%E8%B7%9F%E9%9A%8F%E4%BA%BA%E7%89%A9\">三、摄像机跟随人物</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E6%91%84%E5%83%8F%E6%9C%BA%E7%9A%84%E6%94%BE%E5%A4%A7%E4%B8%8E%E7%BC%A9%E5%B0%8F-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%9B%9B%E3%80%81%E6%91%84%E5%83%8F%E6%9C%BA%E7%9A%84%E6%94%BE%E5%A4%A7%E4%B8%8E%E7%BC%A9%E5%B0%8F\">四、摄像机的放大与缩小</a></p>\n<p id=\"%E4%BA%94%E3%80%81%E7%89%A9%E4%BD%93%E8%87%AA%E8%BA%AB%E7%9A%84%E6%97%8B%E8%BD%AC-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BA%94%E3%80%81%E7%89%A9%E4%BD%93%E8%87%AA%E8%BA%AB%E7%9A%84%E6%97%8B%E8%BD%AC\">五、物体自身的旋转</a></p>\n<p id=\"%C2%A0%E5%85%AD%E3%80%81%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E5%85%AD%E3%80%81%E6%80%BB%E7%BB%93\"> 六、总结</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h2 id=\"1%E3%80%81%E9%95%9C%E5%A4%B4%E6%A0%B9%E6%8D%AE%E9%BC%A0%E6%A0%87%E8%BE%93%E5%85%A5%E8%BF%9B%E8%A1%8C%E6%97%8B%E8%BD%AC\">一、镜头根据鼠标输入进行旋转</h2>\n<p>首先我们在Unity中建一个空物体（Photographer）坐标就设为（0，0，0），然后将摄像机作为我们的空物体的子物体Transform改为（0，0，-10），这样代表摄像机的这个子物体的局部位移往后平移10个单位，这样之后我们在旋转空物体（Photographer）的时候就有一个摄像机围绕它旋转的效果。</p>\n<p><img alt=\"\" height=\"531\" src=\"image\\f6f0a61acefa48118aefc360b5980303.png\" width=\"1164\"/></p>\n<p> 我们应该知道Unity的蓝色箭头是Z，绿色箭头是Y，红色箭头是X。</p>\n<p><img alt=\"\" height=\"234\" src=\"image\\b4ea9383c9804f1ca39b40e7d75286ae.png\" width=\"341\"/></p>\n<p>接下来就是给空物体（Photographer）新建一个脚本了C#命名为Photographer。</p>\n<p>如果我们绕着X轴旋转，那么视角就是一个上下的效果。如果我们绕着Y轴旋转，那么视角就是一个左右的旋转。所以我们定义两个属性Pitch和Yaw分别代表X轴旋转和绕着Y轴旋转的旋转量是多少。</p>\n<p> 然后我们的旋转是有灵敏度的，我们再定义一个mouseSensitivity来控制旋转的灵敏度，具体就是给它一直值去乘我们通过Input.GetAxis（\"Mouse X\"）获取的变化量，这里Mouse X本身就是个变化量，乘上一个数值就是用来扩大获缩小它变化本身的值。（这里如果是手柄输入的话就不是这样了，手柄是一个渐进的过程，有兴趣的小伙伴可以去研究一下）</p>\n<p> <img alt=\"\" height=\"191\" src=\"image\\bb1281d156544915a814c06e34a6f436.png\" width=\"404\"/></p>\n<p>接下来我们写一个方法UpdateRotation来实现旋转，然后我们人在左右时可以控制我们的身体旋转在得到360度的视角，而上下只能控制我们的头抬起或者俯看，不可能头能上下旋转360度吧，所以我们的在绕着X轴旋转也就是视角上下的时候是有角度限制的，我们用到了Mathf.Clamp()来限制上下的角度，最后将我们Pitch和Yaw设为欧拉角的X和Y，也就是Quaternion.Evler（Pitch，Yaw，0）赋值给transform.rotation。然后将函数放到Update里运行。</p>\n<p><img alt=\"\" height=\"272\" src=\"image\\09dfd49bfa2344b081887ad359e9bf13.png\" width=\"512\"/></p>\n<p>（+=我的理解是一个累加的过程。Yaw和Input.GetAxis（\"Mouse X\"）这里我都理解是一个数。Yaw累加了我们输入的每一个Input.GetAxis（\"Mouse X\"）的数）</p>\n<p> 这样我们就实现了基本的上下左右视角啦。这里有可能上下的方向是反的，把Mouse X的invert勾上就可以啦。</p>\n<p><img alt=\"\" height=\"101\" src=\"image\\dadd00ef0c294e89918bfc46f4bdfad2.png\" width=\"267\"/></p>\n<hr/>\n<h2 id=\"%E7%89%A9%E4%BD%93%E6%A0%B9%E6%8D%AE%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E8%BF%9B%E8%A1%8C%E7%A7%BB%E5%8A%A8\">二、物体根据键盘输入进行移动</h2>\n<h3 id=\"1%E3%80%81%E5%88%9B%E5%BB%BA%E7%A7%BB%E5%8A%A8%E7%89%A9%E4%BD%93%E8%84%9A%E6%9C%AC\">1、创建移动物体脚本</h3>\n<p>接下来我们再新建一个空物体（Player）下面放一个胶囊体来代表我们的人物，然后我们创建一个C#脚本命名CharacterMovement，这个脚本主要是用来控制角色移动的，这个移动不仅可以给玩家用，可以可以给NPC用，接下来我们就来看看这个脚本吧</p>\n<p>首先我们再开头写上[RequireComponent(typeof(Rigidbody))]</p>\n<p><img alt=\"\" height=\"158\" src=\"image\\332428cdb2614336893b8a88bef08f59.png\" width=\"363\"/></p>\n<p>这个代表使用这个脚本必须拥有刚体，当你没有刚体的时候，系统会自动给你创建一个刚体。接下来我们创建一个刚体，并在Awake()里用GetComponent&lt;Rigidbody&gt;()去获取到刚体，然后我们开始写属性，先用Vector3定义一个向量属性CurrentInput来代表输入一个0到1向量，它有方向和大小，方向代表移动方向，大小代表移动的单位速度。0到1的过程是判断有没有到满速的过程，再定义一个速度MaxWalkSpeed来与它相乘，我们就可以在这个速度上输入数值来控制他的快慢了</p>\n<p><img alt=\"\" height=\"235\" src=\"image\\eafb195016d64b2385b78c3e3a9609cd.png\" width=\"422\"/></p>\n<p>因为是物理系统移动跟物理演算有关，所以我们选择在FixedUpdate()里进行移动。一般刚体的移动我们可以更改他的velocity，但是我们这个里用了一个MovePosition()的一个方法,这个方法怎么用呢，就是传入一个你要把物体移动的目标位置的参数，他还会计算移动到这个目标位置是否会发生碰撞，如果有碰撞是移动不过去的，所以很好用。这里我们的目标位置是什么呢，是自己的位置_rigidbody.position加上CurrentInput * MaxWalkSpeed * Time.fixedDeltaTime，加上的部分是路程，所以是（速度 * 时间）。因为我们还没有输入CurrentInput，所以默认值是0所以就不会移动。</p>\n<p><img alt=\"\" height=\"104\" src=\"image\\71d2c03d4cdc4e1988ee21276bd08e37.png\" width=\"730\"/></p>\n<p> 然后我们就开始写输入的方法，这个方法中我们给CurrentInput加一个限制，因为他有可能传进来的数超过1，但我们希望他是0到1之间的向量，所以我们用Vector3.ClampMagnitude()来限制他的摩长，当超过1的时候会截断成1。（这里我觉得跟normalized很像的功能，简称归一化，这样不会出现斜着走比横着走快）</p>\n<p><img alt=\"\" height=\"103\" src=\"image\\88a25f1babf84205b5a191c48811f6c3.png\" width=\"409\"/></p>\n<h3 id=\"%C2%A02%E3%80%81%E5%88%9B%E5%BB%BA%E8%BE%93%E5%85%A5%E6%8E%A7%E5%88%B6%E8%84%9A%E6%9C%AC\"> 2、创建输入控制脚本</h3>\n<p>接下来我们来创建输入的脚本PlayerCharacter，为什么要分开写成两个脚本呢，这个是因为之后可以服务于NPC，因为NPC是用AI来控制人物移动的。好的我们在脚本里把CharacterMovement组件对象拿过来</p>\n<p><img alt=\"\" height=\"207\" src=\"image\\edc32e9bf697428683b8eed31a2adbfa.png\" width=\"472\"/></p>\n<p> 然后写方法就是监听输入</p>\n<p><img alt=\"\" height=\"111\" src=\"image\\d30072cd12fb42fc8338b50dc75f468a.png\" width=\"811\"/></p>\n<h3 id=\"%C2%A03%E3%80%81%E7%A1%AE%E5%AE%9A%E7%89%A9%E4%BD%93%E7%A7%BB%E5%8A%A8%E7%9A%84%E5%89%8D%E8%BF%9B%E6%96%B9%E5%90%91\"> 3、确定物体移动的前进方向</h3>\n<p>好了，这样我们就实现了控制物体移动，但是现在这个移动是按照Z轴为前进方向固定来移动的，所以我们还得把我们镜头旋转的正方向设置成前进方向。那么我们开始来拿镜头的方向，老样子先把对象拿过来，这里可以忽略[SerializeField]，它就是允许外界可以对私有的对象序列化。</p>\n<p> <img alt=\"\" height=\"120\" src=\"image\\318c12c22e5e4f4cb44c9482ddaa6b2a.png\" width=\"296\"/><img alt=\"\" height=\"106\" src=\"image\\a48d3f3b29d44221baff0ad10b4938dd.png\" width=\"379\"/></p>\n<p> 然后我们用一个四元数通过欧拉角来代表左右方向旋转量，用到了之前我们定义的Yaw来代表旋转量。然后用朝向前方Vector3.forward的向量乘上这个四元数，就代表向前的向量加上欧拉角旋转量后得到的新向量。拿着这个新的向量去乘我们输入的摩尔向量就得到一个又有方向又有大小的向量啦（这里可能稍微有点难理解，可以多看看代码，或者换代码看看人物的移动情况，这样可以帮助你理解）我们的代码会变成这样</p>\n<p><img alt=\"\" height=\"165\" src=\"image\\46057638edab4fc1a3dd3700709d1d4a.png\" width=\"671\"/></p>\n<hr/>\n<h2 id=\"%E6%91%84%E5%83%8F%E6%9C%BA%E8%B7%9F%E9%9A%8F%E4%BA%BA%E7%89%A9\">三、摄像机跟随人物</h2>\n<p> OK，确定完前进方向后，我们要做摄像机的跟随，跟随有一个简单简单粗暴的方法，就是把摄像机放到物体的子物体里就行了。当然这样可以实现简单的跟随，但是一般高级的游戏采用的都是水平跟随，而上下方向也就是竖直方向上带有一定的差值效果甚至不会跟随，只有人物到达新高度时候才会改变，那么怎么实现这个效果呢？</p>\n<p>我们可以在Photographer上加一个Transform对象_target用来接收传入的目标位置，还有一个用来控制差值大小的变量cameraYSpeed然后初始化我们的摄像机。让_target等于我们传进来的target参数</p>\n<p><img alt=\"\" height=\"218\" src=\"image\\0a4834a762e949b8a7a433837c76f22e.png\" width=\"378\"/></p>\n<p>实现镜头跟随的方法里我们用到Mathf.Lerp()方法来做差值的过度，用法就是传入参数（初始位置，目标位置，过度时间Time.deltaTime * cameraYSpeed） 然后把他赋值给float类型的newY，（我的理解是代表一个变的数），最后让镜头目标的transform.position的Y等于newY</p>\n<p>，然后再Update()函数上加上 UpdatePosition();</p>\n<p><img alt=\"\" height=\"154\" src=\"image\\041d1fe600ce46fdb5ec2a30774845f9.png\" width=\"748\"/></p>\n<p>这样我们的镜头垂直跟随就有差值啦</p>\n<hr/>\n<h2 id=\"%E5%9B%9B%E3%80%81%E6%91%84%E5%83%8F%E6%9C%BA%E7%9A%84%E6%94%BE%E5%A4%A7%E4%B8%8E%E7%BC%A9%E5%B0%8F\">四、摄像机的放大与缩小</h2>\n<p>根据我们玩游戏的经验，当摄像机从上往下看会拉得远一点，当摄像机从下往上看的时候会拉得比较近一点（可以防止在地形下出现穿帮），接下来我们就来实现这个效果</p>\n<p>先加入一个AnimationCurve曲线字段armLengthCurve，用来做摄像机臂长的曲线，这个曲线的横坐标我准备表示摄像机上下角度从多少度到多少度，纵坐标表示缩放的大小。在创建一个Transform的_camera,可以把相机获得的位置赋值给他。然后我们拿到这个相机组件，因为是子组件，我们直接在Awake()用_camera = transform.GetChild(0);获得</p>\n<p><img alt=\"\" height=\"116\" src=\"image\\949f0a4279054af9a5dd429b24afbc48.png\" width=\"333\"/>     <img alt=\"\" height=\"106\" src=\"image\\aa8e0758ec124974872d1171ba03048c.png\" width=\"310\"/> </p>\n<p>OK，我们开始写方法UpdateArmLength()</p>\n<p><img alt=\"\" height=\"134\" src=\"image\\80135616ebce4bcd8a2b726dab0f7ba2.png\" width=\"629\"/></p>\n<p> 这里-1是因为往上是要缩小刚好倒过来了，接下来我们就可以物体里打开曲线并编辑它了<img alt=\"\" height=\"185\" src=\"image\\7acc77ca02bb443096b5c5c333e3d375.png\" width=\"453\"/><img alt=\"\" height=\"220\" src=\"image\\1c7c4931abec4e2e81613dc7b5ae1f5f.png\" width=\"222\"/></p>\n<p>这样我们就实现放大缩小的效果了</p>\n<hr/>\n<h2 id=\"%E4%BA%94%E3%80%81%E7%89%A9%E4%BD%93%E8%87%AA%E8%BA%AB%E7%9A%84%E6%97%8B%E8%BD%AC\">五、物体自身的旋转</h2>\n<p>因为我们在移动的时候，物体的正前方肯定是要朝向我们前进的方向的，所以我们给胶囊提改进一下，在他的Z轴方向上加上一个蓝色方块表示他的朝向，如图<img alt=\"\" height=\"303\" src=\"image\\920db86c280c493a955ad0857c0cc6e5.png\" width=\"554\"/></p>\n<p>我们在CharacterMovement脚本里加上旋转部分，首先我们用if语句判断一下是否监听到键盘输入，否则我们不会改变朝向。rotateSpeed旋转速度我们自己定义一个就可以了。然后我们要用到Quaternion的两个方法，一个是Quaternion.LookRotation()用来获得旋转量，Quaternion.Slerp()用来缓慢的旋转物体（Slerp和Lerp的区别：Slerp是弧形插值是平分角度而Lerp是线性插值，在两点之间进行插值计算。）具体用法看代码</p>\n<p><img alt=\"\" height=\"210\" src=\"image\\9d43ebf56c2c436085b3b6d2ba7c3c38.png\" width=\"824\"/><span title=\"点击并拖拽以改变尺寸\">​</span></p>\n<p>注释掉的是Quaternion的另外一种方法，也可以实现。好了我们的旋转也完成了，那本章的所以内容就结束了。</p>\n<hr/>\n<p> </p>\n<h2 id=\"%C2%A0%E5%85%AD%E3%80%81%E6%80%BB%E7%BB%93\"> 六、总结</h2>\n<p>在研究向量、旋转量这些的时候可能一开始会有的吃力，因为有些是矢量有些是数值，什么时候用乘什么时候用加有时搞不清楚，我现在对这些也是只知道大概，有必要学习一下四元数研究一下。</p>\n<p>好了，当我们学这些后呢，我们就可以自己做出自己想要的视角效果了，第一人称也能轻松做出来，（其实就是改变镜头的初始位置，关闭缩放），如果加上一些导入的资源包，我们甚至可以做出一下简单的3D游戏出来。当然啦，除了移动，人物还需要跳跃，攻击，射击等其他功能，所以我们下一个目标就是把这些做出来啦</p>\n<p>最后，这些都是我作为初学者研究出来的，有什么错误的地方还希望大佬们指出开来，谢谢！</p>\n<p></p>\n</div>\n</div>"}