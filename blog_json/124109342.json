{"blogid": "124109342", "writerAge": "码龄6年", "writerBlogNum": "7", "writerCollect": "0", "writerComment": "0", "writerFan": "0", "writerGrade": "1级", "writerIntegral": "75", "writerName": "Jonpgo", "writerProfileAdress": "writer_image\\profile_124109342.jpg", "writerRankTotal": "167334", "writerRankWeekly": "355371", "writerThumb": "5", "writerVisitNum": "2430", "blog_read_count": "1084", "blog_time": "已于 2022-06-18 19:05:16 修改", "blog_title": "windows10 安装 Docker 集成到 WSL 2虚拟机以及Doceker下面安装Hyperf 系统 下面Go安装配置 下载Gin框架", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p></p>\n<p></p>\n<ol><li>查看windows系统的版本号 </li></ol>\n<p>        windows 系统到 win10 v2004 的<strong>内部版本 19041</strong> 或更高版本， 可以使用win10自带的WSL1或WSL2.    1和2的区别：<br/><img alt=\"\" src=\"image\\20200813153322572.png\"/></p>\n<p>打开powershell 管理员身份运行<img alt=\"\" height=\"651\" src=\"image\\9877e757cf014090af9271863c0b6a01.png\" width=\"620\"/> </p>\n<p><span style=\"color:#fe2c24;\">输入 <code>winver</code></span>，版本如果达不到。如果不是，到微软官网更新系统。<a href=\"https://www.microsoft.com/zh-cn/software-download/windows10\" title=\"win10更新\">win10更新</a></p>\n<p><img alt=\"\" height=\"695\" src=\"image\\04c2d5e8eaf3456f92505fdd962d9a64.png\" width=\"780\"/></p>\n<p> 2 <span style=\"color:#fe2c24;\">此电脑 --点击属性--控制面板\\程序\\程序和功能 勾选之后  保存</span></p>\n<p><img alt=\"\" height=\"856\" src=\"image\\f8424175579444b397072cb0fa4cd51e.png\" width=\"513\"/></p>\n<p><span style=\"color:#fe2c24;\">然后重启电脑</span></p>\n<p><span style=\"color:#0d0016;\">3 </span>确保在BIOS中启用虚拟化。可根据电脑厂家型号查找进入bios方法(开机时狂按某键)，以及如何设置。</p>\n<p>4 <span style=\"color:#fe2c24;\">开始执行如下命令</span></p>\n<pre><code>//启用“适用于 Linux 的 Windows 子系统”可选功能\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n\n//启用虚拟机平台可选功能\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n\n//设置WSL2为默认版本\nwsl --set-default-version 2\n\n//设置默认的WSL系统Linux版本\n</code></pre>\n<p><img alt=\"\" height=\"489\" src=\"image\\2d77eb67c1f54521b59ab65a2c4db60c.png\" width=\"909\"/></p>\n<p> <span style=\"color:#fe2c24;\">然后重启电脑</span></p>\n<p> 开机后执行  然后提示 我们开始安装wsl（windows system Linux）子系统的内核 </p>\n<p>，输入 <span style=\"color:#fe2c24;\"><code>wsl --set-default-version 2</code></span>，如果出现错误代码，则到WSL官网下载linux内核并安装，然后重复一次此步骤。（<code>wsl --help</code>为检测WSL是否安装成功的指令） <a href=\"https://aka.ms/wsl2kernel\" title=\"WSL\">WSL</a> </p>\n<p><a href=\"https://link.csdn.net/?target=https%3A%2F%2Fwslstorestorage.blob.core.windows.net%2Fwslblob%2Fwsl_update_x64.msi\" title=\"csdn - 安全中心\">csdn - 安全中心</a></p>\n<p>Error: 0x800701bc WSL 2 ?????????????????? https://aka.ms/wsl2kernel 出现类似的报错  就是Linux的内核忘记安装   需要安装Linux 的内核系统 </p>\n<p><img alt=\"\" height=\"257\" src=\"image\\6b874817b74240c295496307368ce375.png\" width=\"823\"/></p>\n<p>完成后到微软商店下载分发版linux。<a href=\"https://aka.ms/wslstore\" title=\"微软商店\">微软商店</a>，ubuntu默认下载20.04版本</p>\n<p><img alt=\"\" height=\"756\" src=\"image\\f50e859f41bd48a99a6df03412022f8a.png\" width=\"1200\"/></p>\n<p> <span style=\"color:#fe2c24;\">设置用户名  密码</span></p>\n<p></p>\n<p>5输入 <code>sudo apt install net-tools</code>，下载工具。</p>\n<p>在powershelll中输入<code>wsl --list --verbose</code>，检查WSL用的linux分发版和WSL的版本。</p>\n<p>wsl -l -v 查看安装wsl的版本   </p>\n<pre><code>//查看安装的wsl版本列表\nwsl -l -v\n//配置某个linux发行版为版本2\nwsl --set-version (distro name) 2\n//配置wsl默认版本为版本2\nwsl --set-default-version 2\n//以某个特定用户运行某一个发行版\nwsl -u &lt;Username&gt;\n//注销（卸载）某个发行版以重新安装\nwsl --unregister &lt;DistributionName&gt;\n//为某个发行版配置默认用户\n&lt;DistributionName&gt; config --default-user &lt;Username&gt;\n//停止所有正在运行的WSL子系统\nwsl --shutdown</code></pre>\n<p>7 安装docker</p>\n<p><a href=\"https://docs.docker.com/desktop/windows/install/\" title=\"Install Docker Desktop on Windows | Docker Documentation\">Install Docker Desktop on Windows | Docker Documentation</a>（后续的补充   这个是最新的版本  可以直接的安装 ）</p>\n<p>下载<a href=\"https://download.docker.com/win/edge/40807/Docker%20Desktop%20Installer.exe\" title=\"Docker Desktop Edge 2.1.6.0\">Docker Desktop Edge 2.1.6.0</a>或更高版本。</p>\n<p>请遵循通常的Docker Desktop安装说明来安装Docker Desktop 。 一路安装即可</p>\n<p> <span style=\"color:#fe2c24;\">然后重启电脑</span></p>\n<p>安装完成后可以更新更高版本 我这里更新到了4.6</p>\n<p><img alt=\"\" height=\"515\" src=\"image\\a3b0083b4f24469cb662b10e7941a5dd.png\" width=\"732\"/></p>\n<p></p>\n<p>8开始设置wsl 与docker的映射关系  </p>\n<p><img alt=\"\" height=\"738\" src=\"image\\6f53ce0285cc46348bad7817aa089c88.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"715\" src=\"image\\25fe2e68b07c49b392ee32df2b0764cf.png\" width=\"1200\"/></p>\n<p> 开始愉快的docker之旅吧  更多学习参考</p>\n<p><a href=\"http://c.biancheng.net/view/3118.html\" title=\"Docker简介以及Docker历史\">Docker简介以及Docker历史</a><a href=\"https://blog.csdn.net/u010358168/article/details/86711551\" title=\"Docker核心概念、安装、端口映射及常用操作命令（细到令人发指）_小洋人最happy的博客-CSDN博客\">Docker核心概念、安装、端口映射及常用操作命令（细到令人发指）_小洋人最happy的博客-CSDN博客</a></p>\n<p> <a href=\"https://blog.csdn.net/chengxuyuanyonghu/article/details/54315861\" title=\"Docker常用命令_chengxuyuanyonghu的博客-CSDN博客_查看docker版本命令\">Docker常用命令_chengxuyuanyonghu的博客-CSDN博客_查看docker版本命令</a></p>\n<p>9 安装PHP   目前最前沿的框架    hyperf</p>\n<p><a href=\"https://hyperf.wiki/2.2/#/zh-cn/quick-start/install\" title=\"https://hyperf.wiki/2.2/#/zh-cn/quick-start/install\">https://hyperf.wiki/2.2/#/zh-cn/quick-start/install</a></p>\n<p>开始安装  官网示例</p>\n<pre><code>docker run --name hyperf \\\n-v /workspace/skeleton:/data/project \\\n-p 9501:9501 -it \\\n--privileged -u root \\\n--entrypoint /bin/sh \\\nhyperf/hyperf:7.4-alpine-v3.11-swoole</code></pre>\n<p> 我们自己windows下面  这样安装</p>\n<p>设置阿里镜像源重启docker </p>\n<p> \"registry-mirrors\": [<br/>     \"https://xxxxx.mirror.aliyuncs.com\",<br/>     \"http://hub-mirror.c.163.com\"<br/>   ],</p>\n<p><img alt=\"\" height=\"694\" src=\"image\\87450c20524d4521be8fbb0e19c7900b.png\" width=\"1200\"/></p>\n<p> 9.1  powershell 拉取镜像： docker pull hyperf/hyperf:7.4-alpine-v3.11-swoole</p>\n<p></p>\n<p>9.2 启动镜像</p>\n<p> docker run --name hyperfs -v D:/workspace/skeleton:/data/project -p 9501:9501 -it --privileged -u root --entrypoint /bin/sh hyperf/hyperf:7.4-alpine-v3.11-swoole</p>\n<p> <img alt=\"\" height=\"358\" src=\"image\\23d67f4072ed48c79f60972cf3abc02c.png\" width=\"881\"/></p>\n<p>9.3 开启hyperf项目  愉快的php协程框架</p>\n<p>设置阿里composer 速度更快 下载composer包</p>\n<p><span style=\"color:#fe2c24;\"> composer config -g repo.packagist composer <a href=\"https://mirrors.aliyun.com/composer\" title=\"https://mirrors.aliyun.com/composer\">https://mirrors.aliyun.com/composer</a></span></p>\n<p><span style=\"color:#fe2c24;\"> cd /data/project </span></p>\n<p><span style=\"color:#fe2c24;\">cd hyperf-skeleton php bin/hyperf.php start</span></p>\n<p><img alt=\"\" height=\"486\" src=\"image\\eccc4106a40248048f6e6bd8dcc15633.png\" width=\"1200\"/></p>\n<p>打开浏览器  成功访问</p>\n<p> <img alt=\"\" height=\"190\" src=\"image\\b2966d900a4d448f90777a2468f9071c.png\" width=\"385\"/></p>\n<p> 10  安装Go </p>\n<p>  10.1 <a href=\"https://golang.google.cn/dl/\" title=\"Downloads - The Go Programming Language\">Downloads - The Go Programming Language</a> 去下载  </p>\n<p>下载完成后   默认安装c盘  或者自定义安装目录后面会用到 </p>\n<p><img alt=\"\" height=\"425\" src=\"image\\6710ccd6d36c4083aa325b9a8b2a7d28.png\" width=\"623\"/></p>\n<p> 安装完成后开始设置 GOROOT   GOPATTH   注意在系统的环境变量里面设置 我的电脑-》属性 环境变量设置 </p>\n<p>在d盘  设置3个文件夹 src 放项目   pkg 放第三方依赖包 bin编译二进制文件 </p>\n<p>安装成功后   查看默认设置 </p>\n<p><img alt=\"\" height=\"644\" src=\"image\\b5957eaeef5d4c01a311857e93393c2a.png\" width=\"847\"/></p>\n<p>我们开始设置我们自己的 </p>\n<p><img alt=\"\" height=\"213\" src=\"image\\23e1669bb114486cb89ce6b71d6b1e04.png\" width=\"582\"/></p>\n<p> <img alt=\"\" height=\"416\" src=\"image\\0916bca53a2b475e81a6da51ac21b2db.png\" width=\"397\"/></p>\n<p><span style=\"color:#fe2c24;\">注意上面如果用户环境变量里面被系统里面默认设置了GROOT 删除</span></p>\n<p> 开启中国最先开始使用go语言生产项目的公司  七牛云 代理  目前中国声称最靠谱的代理 下载go项目 依赖包贼快  </p>\n<p>开启  <code>GO111MODULE</code></p>\n<ul><li><code>GO111MODULE=off</code> 无模块支持，go 会从 GOPATH 和 vendor 文件夹寻找包。</li><li><code>GO111MODULE=on</code> 模块支持，go 会忽略 GOPATH 和 vendor 文件夹，只根据 <code>go.mod</code> 下载依赖。</li><li><code>GO111MODULE=auto</code> 在 <code>$GOPATH/src</code> 外面且根目录有 <code>go.mod</code> 文件时，开启模块支</li></ul>\n<pre><code>go env -w GO111MODULE=on\ngo env -w GOPROXY=https://goproxy.cn,https://goproxy.io,direct</code></pre>\n<p><img alt=\"\" height=\"681\" src=\"image\\c02c94d6d27546b291aa863f42287ff4.png\" width=\"854\"/></p>\n<p> ok 安装成功  写个hello world     src 文件夹下建个hello.go  </p>\n<p><img alt=\"\" height=\"203\" src=\"image\\2ea07f3ac3f743489391e4507a9a011e.png\" width=\"538\"/></p>\n<p> 在src下面见一个hello文件夹  然后 写个hello.go文件  </p>\n<p>执行go mod init hello 初始化当前的文件夹  安装模块依赖      类似于php的composer  此时在下图发现我们的新建的 pkg文件夹下面多了mod 以及cache </p>\n<p>go install  会把刚刚的hello.go文件生成二进制文件放在bin 下面  </p>\n<p>go build 会生成二进制文件在当前的文件夹下面 </p>\n<p>执行hello.exe 会得到  go run hello.go 相同的结果</p>\n<p></p>\n<p><img alt=\"\" height=\"166\" src=\"image\\f9a8798af95547d4a1de1a77dbdbd554.png\" width=\"979\"/></p>\n<p><img alt=\"\" height=\"606\" src=\"image\\4100148ff8bd40fbaecf67af013b17d1.png\" width=\"1200\"/></p>\n<p></p>\n<p></p>\n<p><img alt=\"\" height=\"661\" src=\"image\\96fb99526e384379bf56d5b57cb60c23.png\" width=\"693\"/></p>\n<p> 11 好的   我们开始安装最后一部   安装star星数最多的go 语言写的web框架 </p>\n<p>       11.1 新建一个文件夹放gin框架  我们取名jonpgo_gin</p>\n<p>       11.2 开始初始化go.mod文件   </p>\n<p>      11.3 下载安装依赖包  go get -u github.com/gin-gonic/gin</p>\n<p><img alt=\"\" height=\"309\" src=\"image\\5bcffdf536dd4ed9adee4748d5a0c227.png\" width=\"666\"/></p>\n<p><img alt=\"\" height=\"436\" src=\"image\\aec461468fa04a7584f7cd9661c41a0e.png\" width=\"1200\"/></p>\n<p>    11.4 新建一个main.go文件</p>\n<p>      切换git 命令 </p>\n<p>     curl https://raw.githubusercontent.com/gin-gonic/examples/master/basic/main.go &gt; main.go          执行上述命令快速生成</p>\n<p>    11.5 下面的代码  放到里面去</p>\n<p>     </p>\n<pre><code>package main\n\nimport (\n  \"net/http\"\n\n  \"github.com/gin-gonic/gin\"\n)\n\n// 通过字典模拟 DB\nvar db = make(map[string]string)\n\nfunc setupRouter() *gin.Engine {\n  // 初始化 Gin 框架默认实例，该实例包含了路由、中间件以及配置信息\n  r := gin.Default()\n\n  // Ping 测试路由\n  r.GET(\"/ping\", func(c *gin.Context) {\n    c.String(http.StatusOK, \"pong\")\n  })\n\n  // 获取用户数据路由\n  r.GET(\"/user/:name\", func(c *gin.Context) {\n    user := c.Params.ByName(\"name\")\n    value, ok := db[user]\n    if ok {\n      c.JSON(http.StatusOK, gin.H{\"user\": user, \"value\": value})\n    } else {\n      c.JSON(http.StatusOK, gin.H{\"user\": user, \"status\": \"no value\"})\n    }\n  })\n\n  // 需要 HTTP 基本授权认证的子路由群组设置\n  authorized := r.Group(\"/\", gin.BasicAuth(gin.Accounts{\n    \"foo\":  \"bar\", // 用户名:foo 密码:bar\n    \"manu\": \"123\", // 用户名:manu 密码:123\n  }))\n\n  // 保存用户信息路由\n  authorized.POST(\"admin\", func(c *gin.Context) {\n    user := c.MustGet(gin.AuthUserKey).(string)\n\n    // 解析并验证 JSON 格式请求数据\n    var json struct {\n      Value string `json:\"value\" binding:\"required\"`\n    }\n\n    if c.Bind(&amp;json) == nil {\n      db[user] = json.Value\n      c.JSON(http.StatusOK, gin.H{\"status\": \"ok\"})\n    }\n  })\n\n  return r\n}\n\nfunc main() {\n  // 设置路由信息\n  r := setupRouter()\n  // 启动服务器并监听 8080 端口\n  r.Run(\":8080\")\n}</code></pre>\n<p>     11.4 开始启动项目   访问路由   go run main.go</p>\n<p><img alt=\"\" height=\"305\" src=\"image\\1a76c221acf647439fd979ed8c885967.png\" width=\"833\"/></p>\n<p> <img alt=\"\" height=\"211\" src=\"image\\e3bad95df0c842bd9648b83157173e2d.png\" width=\"631\"/></p>\n<p> <img alt=\"\" height=\"274\" src=\"image\\1d476a7b517049aba4d862dac776cab1.png\" width=\"739\"/></p>\n<p>Gin框架安装  测试完成   更多的go  gin 知识大家慢慢学习      谢谢大家的观帖   也写了不少  点个赞吧    </p>\n</div>\n</div>"}