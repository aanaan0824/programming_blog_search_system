{"blogid": "124839662", "writerAge": "码龄1年", "writerBlogNum": "126", "writerCollect": "3888", "writerComment": "3714", "writerFan": "16288", "writerGrade": "7级", "writerIntegral": "14538", "writerName": "可口也可樂、", "writerProfileAdress": "writer_image\\profile_124839662.jpg", "writerRankTotal": "701", "writerRankWeekly": "203", "writerThumb": "5359", "writerVisitNum": "97092", "blog_read_count": "932", "blog_time": "已于 2022-05-30 22:13:15 修改", "blog_title": "C++11-lambda表达式/包装器/线程库", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>C++11篇三</h3>\n<ul><li><a href=\"#_2\">零、前言</a></li><li><a href=\"#lambda_6\">一、lambda表达式</a></li><li><ul><li><a href=\"#1lambda_8\">1、lambda的引入</a></li><li><a href=\"#2lambda_93\">2、lambda表达式语法</a></li><li><a href=\"#3_163\">3、捕获列表说明</a></li><li><a href=\"#4lambda_214\">4、函数对象与lambda表达式</a></li></ul>\n</li><li><a href=\"#_256\">二、包装器</a></li><li><ul><li><a href=\"#1function_258\">1、function包装器</a></li><li><a href=\"#2bind_427\">2、bind</a></li></ul>\n</li><li><a href=\"#_490\">三、线程库</a></li><li><ul><li><a href=\"#1_492\">1、线程的概念及使用</a></li><li><a href=\"#2_609\">2、线程函数参数</a></li><li><a href=\"#3atomic_692\">3、原子性操作库(atomic)</a></li><li><a href=\"#4lock_guardunique_lock_851\">4、lock_guard与unique_lock</a></li><li><ul><li><a href=\"#1mutex_861\">1、mutex的种类</a></li><li><a href=\"#1lock_guard_905\">1、lock_guard</a></li><li><a href=\"#3unique_lock_945\">3、unique_lock</a></li></ul>\n</li><li><a href=\"#5_955\">5、两个线程交替打印奇数偶数</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>零、前言</h1>\n<blockquote>\n<p>本章是讲解学习C++11语法新特性的第三篇文章，主要学习lambda表达式，包装器，线程库</p>\n</blockquote>\n<h1><a id=\"lambda_6\"></a>一、lambda表达式</h1>\n<h2><a id=\"1lambda_8\"></a>1、lambda的引入</h2>\n<blockquote>\n<p>在C++98中，如果想要对一个数据集合中的元素进行排序，可以使用std::sort方法</p>\n</blockquote>\n<ul><li>示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 默认按照小于比较，排出来结果是升序</span>\n\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> array <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 如果需要降序，需要改变元素的比较规则</span>\n\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> array <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">greater</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>效果：</li></ul>\n<img alt=\"image-20220509110928065\" src=\"image\\image-20220509110928065.png\"/>\n<blockquote>\n<p>注：如果待排序元素为自定义类型，需要用户定义排序时的比较规则</p>\n</blockquote>\n<ul><li>示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Goods</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring _name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> _price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Compare</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Goods<span class=\"token operator\">&amp;</span> gl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Goods<span class=\"token operator\">&amp;</span> gr<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> gl<span class=\"token punctuation\">.</span>_price <span class=\"token operator\">&lt;=</span> gr<span class=\"token punctuation\">.</span>_price<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tGoods gds<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"苹果\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"香蕉\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"橙子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"菠萝\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>gds<span class=\"token punctuation\">,</span> gds <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>gds<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>gds<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Compare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> gds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>_name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span><span class=\"token operator\">&lt;&lt;</span>gds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>_price<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>效果：</li></ul>\n<img alt=\"image-20220509111242047\" src=\"image\\image-20220509111242047.png\"/>\n<ul><li>概念及引入：</li></ul>\n<blockquote>\n<p>随着C++语法的发展，人们开始觉得上面的写法太复杂了，每次为了实现一个algorithm算法， 都要重新去写一个类，如果每次比较的逻辑不一样，还要去实现多个类，特别是相同类的命名，这些都给编程者带来了极大的不便。因此，在C11语法中出现了Lambda表达式</p>\n</blockquote>\n<ul><li>示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tGoods gds<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"苹果\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"香蕉\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"橙子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"菠萝\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>gds<span class=\"token punctuation\">,</span> gds <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>gds<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>gds<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Goods<span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Goods<span class=\"token operator\">&amp;</span> r<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">-&gt;</span><span class=\"token keyword\">bool</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> l<span class=\"token punctuation\">.</span>_price <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">.</span>_price<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>注：可以看出lamb表达式实际是一个匿名函数</p>\n</blockquote>\n<h2><a id=\"2lambda_93\"></a>2、lambda表达式语法</h2>\n<ul><li>lambda表达式书写格式：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token punctuation\">[</span>capture<span class=\"token operator\">-</span>list<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> <span class=\"token operator\">-&gt;</span> <span class=\"token keyword\">return</span><span class=\"token operator\">-</span>type <span class=\"token punctuation\">{<!-- --></span> statement <span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>lambda表达式各部分说明：</li></ul>\n<blockquote>\n<ol><li>[capture-list] :</li></ol>\n<p>捕捉列表，该列表总是出现在lambda函数的开始位置，编译器根据[]来判断接下来的代码是否为lambda函数，捕捉列表能够捕捉上下文中的变量供lambda函数使用</p>\n<ol start=\"2\"><li>(parameters)：</li></ol>\n<p>参数列表，与普通函数的参数列表一致，如果不需要参数传递，则可以连同()一起省略</p>\n<ol start=\"3\"><li>mutable：</li></ol>\n<p>默认情况下，lambda函数总是一个const函数， mutable的作用就是让传值捕捉的对象可以修改，但是你修改的是传值拷贝的对象，不影响外面对象，使用该修饰符时，参数列表不可省略(即使参数为空)</p>\n<p>注：实际中mutable意义不大，除非你就是想传值捕捉过来，lambda中修改，不影响外面的值</p>\n<ol start=\"4\"><li>-&gt;returntype：</li></ol>\n<p>返回值类型，用追踪返回类型形式声明函数的返回值类型，没有返回值时此部分可省略；返回值类型明确情况下，也可省略，由编译器对返回类型进行推导</p>\n<ol start=\"5\"><li>{statement}：</li></ol>\n<p>函数体，在该函数体内，除了可以使用其参数外，还可以使用所有捕获到的变量</p>\n<p>注：在lambda函数定义中，参数列表和返回值类型都是可选部分，而捕捉列表和函数体可以为空，即C++11中最简单的lambda函数为：[]{}; 该lambda函数不能做任何事情</p>\n</blockquote>\n<ul><li>示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 最简单的lambda表达式, 该lambda表达式没有任何意义</span>\n\t<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 省略参数列表和返回值类型，返回值类型由编译器推导为int</span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 省略了返回值类型，无返回值类型</span>\n\t<span class=\"token keyword\">auto</span> fun1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> b <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 各部分都很完善的lambda函数</span>\n\t<span class=\"token keyword\">auto</span> fun2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">return</span> b <span class=\"token operator\">+=</span> a <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 复制捕捉x</span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> add_x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token keyword\">mutable</span> <span class=\"token punctuation\">{<!-- --></span> x <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//传值捕捉修改需要mutable修饰</span>\n\t<span class=\"token keyword\">auto</span> add_x1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> x <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//引用捕捉不用</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">add_x</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">add_x1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>效果：</li></ul>\n<img alt=\"image-20220512174151648\" src=\"image\\image-20220512174151648.png\"/>\n<blockquote>\n<p>注：lambda表达式实际上可以理解为无名函数，该函数无法直接调用，如果想要直接调用，可借助auto将其赋值给一个变量</p>\n</blockquote>\n<h2><a id=\"3_163\"></a>3、捕获列表说明</h2>\n<ul><li>概念：</li></ul>\n<blockquote>\n<p>捕捉列表描述了上下文中那些数据可以被lambda使用，以及使用的方式传值还是传引用</p>\n</blockquote>\n<ul><li>使用方式：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token punctuation\">[</span>var<span class=\"token punctuation\">]</span>：表示值传递方式捕捉变量var\n<span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span>：表示值传递方式捕获所有父作用域中的变量<span class=\"token punctuation\">(</span>包括<span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>var<span class=\"token punctuation\">]</span>：表示引用传递捕捉变量var\n<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span>：表示引用传递捕捉所有父作用域中的变量<span class=\"token punctuation\">(</span>包括<span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span>：表示值传递方式捕捉当前的<span class=\"token keyword\">this</span>指针\n</code></pre>\n<ul><li>注意：</li></ul>\n<blockquote>\n<ol><li> <p>父作用域指包含lambda函数的语句块</p> </li><li> <p>语法上捕捉列表可由多个捕捉项组成，并以逗号分割：比如：[=, &amp;a, &amp;b]：以引用传递的方式捕捉变量a和b，值传递方式捕捉其他所有变量 [&amp;，a, this]：值传递方式捕捉变量a和this，引用方式捕捉其他变量</p> </li><li> <p>捕捉列表不允许变量重复传递，否则就会导致编译错误：比如：[=, a]：=已经以值传递方式捕捉了所有变量，捕捉a重复</p> </li><li> <p>在块作用域以外的lambda函数捕捉列表必须为空；在块作用域中的lambda函数仅能捕捉父作用域中局部变量</p> </li><li> <p>lambda表达式之间不能相互赋值，即使看起来类型相同</p> </li></ol>\n</blockquote>\n<ul><li>示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>PF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">auto</span> f1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"hello world\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> f2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"hello world\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//f1 = f2; // 编译失败---&gt;提示找不到operator=()</span>\n    <span class=\"token comment\">// 允许使用一个lambda表达式拷贝构造一个新的副本</span>\n    <span class=\"token keyword\">auto</span> <span class=\"token function\">f3</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">f3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 可以将没有捕获任何变量的lambda表达式赋值给相同类型的函数指针</span>\n    PF <span class=\"token operator\">=</span> f2<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">PF</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>解释：</li></ul>\n<blockquote>\n<p>Lambda是实现了函数调用<a href=\"https://so.csdn.net/so/search?q=%E8%BF%90%E7%AE%97%E7%AC%A6&amp;spm=1001.2101.3001.7020\">运算符</a>的匿名类(anonymous class)。对于每一个Lambda，编译器创建匿名类，并定义相应的数据成员存储Lambda捕获的变量。没有捕获变量的Lambda不包含任何含成员变量。一个没有任何成员变量(包括没有虚函数表指针)的类型，在空指针上调用成员函数也不会有任何的问题，因为它的成员函数不会通过this指针访问内存。当Lambda向函数指针的转换时，编译器为Lambda的匿名类实现函数指针类型转换运算符</p>\n</blockquote>\n<h2><a id=\"4lambda_214\"></a>4、函数对象与lambda表达式</h2>\n<blockquote>\n<p>函数对象，又称为仿函数，即可以想函数一样使用的对象，就是在类中重载了operator()运算符的类对象</p>\n</blockquote>\n<ul><li>示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rate</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Rate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> rate<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">_rate</span><span class=\"token punctuation\">(</span>rate<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">double</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> money<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span> \n        <span class=\"token keyword\">return</span> money <span class=\"token operator\">*</span> _rate <span class=\"token operator\">*</span> year<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> _rate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 函数对象</span>\n    <span class=\"token keyword\">double</span> rate <span class=\"token operator\">=</span> <span class=\"token number\">0.49</span><span class=\"token punctuation\">;</span>\n    Rate <span class=\"token function\">r1</span><span class=\"token punctuation\">(</span>rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">r1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// lamber</span>\n    <span class=\"token keyword\">auto</span> r2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> monty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">return</span> monty<span class=\"token operator\">*</span>rate<span class=\"token operator\">*</span>year<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">r2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>说明：</li></ul>\n<blockquote>\n<p>从使用方式上来看，函数对象与lambda表达式完全一样：函数对象将rate作为其成员变量，在定义对象时给出初始值即可，lambda表达式通过捕获列表可以直接将该变量捕获到</p>\n</blockquote>\n<ul><li>示图：</li></ul>\n<img alt=\"image-20220509112322100\" src=\"image\\image-20220509112322100.png\"/>\n<blockquote>\n<p>注：实际在底层编译器对于lambda表达式的处理方式，完全就是按照函数对象的方式处理的</p>\n</blockquote>\n<h1><a id=\"_256\"></a>二、包装器</h1>\n<h2><a id=\"1function_258\"></a>1、function包装器</h2>\n<ul><li>概念：</li></ul>\n<blockquote>\n<p>function包装器也叫作适配器，C++中的function本质是一个类模板，也是一个包装器</p>\n<p>由于C++的历史遗留问题，导致如果想实现一个函数功能，可以采用函数名、函数指针、<a href=\"https://so.csdn.net/so/search?q=%E4%BB%BF%E5%87%BD%E6%95%B0&amp;spm=1001.2101.3001.7020\">仿函数</a>、有名称的lambda表达式，所有这些都是可调用的类型</p>\n</blockquote>\n<ul><li>存在的问题：</li></ul>\n<blockquote>\n<ol><li>函数指针类型太复杂，不方便使用和理解</li><li>仿函数类型是一个类名，没有指定调用参数和返回值，得去看operator()的实现才能看出来</li><li>lambda表达式在语法层，看不到类型，只能在底层看到其类型，基本都是lambda_uuid</li></ol>\n</blockquote>\n<ul><li>示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\nT <span class=\"token function\">useF</span><span class=\"token punctuation\">(</span>F f<span class=\"token punctuation\">,</span> T x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"count:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">++</span>count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"count:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> i <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Functor</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">double</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> d <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 函数名</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">useF</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">11.11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 函数对象</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">useF</span><span class=\"token punctuation\">(</span><span class=\"token function\">Functor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11.11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// lamber表达式</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">useF</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> d<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token keyword\">double</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> d <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11.11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>效果：</li></ul>\n<img alt=\"image-20220512181306891\" src=\"image\\image-20220512181306891.png\"/>\n<p>注：对于函数名称，仿函数对象，lambda表达式对象这些都是可调用的类型，我们发现发现useF函数模板实例化了三份，所以如此丰富的类型，可能会导致模板的效率低下，包装器可以很好的解决该问题</p>\n<ul><li>包装器原型：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 类模板原型如下</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> function<span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ret</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">function</span><span class=\"token operator\">&lt;</span><span class=\"token function\">Ret</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<p>模板参数说明：</p>\n<p>Ret: 被调用函数的返回类型</p>\n<p>Args…：被调用函数的形参</p>\n<p>注：std::function在头文件&lt; functional &gt;</p>\n<p>示例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Functor</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Plus</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">plusi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">double</span> <span class=\"token function\">plusd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 函数名(函数指针)</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> func1 <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 函数对象</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> func2 <span class=\"token operator\">=</span> <span class=\"token function\">Functor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// lamber表达式</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> func3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func3</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 类的成员函数</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> func4 <span class=\"token operator\">=</span> Plus<span class=\"token double-colon punctuation\">::</span>plusi<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func4</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>Plus<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> func5 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Plus<span class=\"token double-colon punctuation\">::</span>plusd<span class=\"token punctuation\">;</span><span class=\"token comment\">//对于普通成员的包装一定要加上&amp;，需要通过指针进行调用成员函数</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func5</span><span class=\"token punctuation\">(</span><span class=\"token function\">Plus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//传入类对象，通过对象进行调用</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>效果：</li></ul>\n<img alt=\"image-20220512230505507\" src=\"image\\image-20220512230505507.png\"/>\n<ul><li>包装器解决模板实例化多份的问题：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional&gt;</span></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\nT <span class=\"token function\">useF</span><span class=\"token punctuation\">(</span>F f<span class=\"token punctuation\">,</span> T x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"count:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">++</span>count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"count:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> i <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Functor</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">double</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> d <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//将多个可调用类型进行封装成相同类型，便于统一调用</span>\n\t<span class=\"token comment\">// 函数名</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> func1 <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">useF</span><span class=\"token punctuation\">(</span>func1<span class=\"token punctuation\">,</span> <span class=\"token number\">11.11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 函数对象</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> func2 <span class=\"token operator\">=</span> <span class=\"token function\">Functor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">useF</span><span class=\"token punctuation\">(</span>func2<span class=\"token punctuation\">,</span> <span class=\"token number\">11.11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// lamber表达式</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> func3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> d<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token keyword\">double</span> <span class=\"token punctuation\">{<!-- --></span> \n\t\t<span class=\"token keyword\">return</span> d <span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">useF</span><span class=\"token punctuation\">(</span>func3<span class=\"token punctuation\">,</span> <span class=\"token number\">11.11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>效果：</li></ul>\n<p><img alt=\"image-20220512230833720\" src=\"image\\e08a19afcced6a4df4adbdc23500c6b2.png\"/></p>\n<h2><a id=\"2bind_427\"></a>2、bind</h2>\n<ul><li>概念：</li></ul>\n<blockquote>\n<ol><li>std::bind函数定义在头文件中，是一个函数模板，它就像一个函数包装器(适配器)，接受一个可调用对象（callable object），生成一个新的可调用对象来“适应”原对象的参数列表</li><li>一般而言，我们用它可以把一个原本接收N个参数的函数fn，通过绑定一些参数，返回一个接收M个（M可以大于N，但这么做没什么意义）参数的新函数；同时，使用std::bind函数还可以实现参数顺序调整等操作</li></ol>\n</blockquote>\n<ul><li>示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">Plus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sub</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sub1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//普通函数的绑定</span>\n\t<span class=\"token comment\">//表示绑定函数plus 参数分别由调用 func1 的第一，二个参数指定(placeholders用来表示参数位占位)</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> func1 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>Plus<span class=\"token punctuation\">,</span> placeholders<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">,</span>placeholders<span class=\"token double-colon punctuation\">::</span>_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//auto func1 = std::bind(Plus, placeholders::_1, placeholders::_2);直接使用auto识别类型</span>\n\n\t<span class=\"token comment\">//表示绑定函数 plus 的第一，二参数为： 1， 2</span>\n\t<span class=\"token keyword\">auto</span> func2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>Plus<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//func2();也可以不用传参数-因为参数已经绑定好了，传入的参数没有实际的作用</span>\n\n\t<span class=\"token comment\">//类函数的绑定</span>\n\t<span class=\"token comment\">//类的成员函数必须通过类的对象或者指针调用，因此在bind时，bind的第一个参数的位置来指定一个类的实列、指针或引用。</span>\n\tSub s<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 绑定成员函数</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> func3 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Sub<span class=\"token double-colon punctuation\">::</span>sub<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span>placeholders<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">,</span> placeholders<span class=\"token double-colon punctuation\">::</span>_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 参数调换顺序</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> func4 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Sub<span class=\"token double-colon punctuation\">::</span>sub<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span>placeholders<span class=\"token double-colon punctuation\">::</span>_2<span class=\"token punctuation\">,</span> placeholders<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> func5 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>Sub<span class=\"token double-colon punctuation\">::</span>sub1<span class=\"token punctuation\">,</span>placeholders<span class=\"token double-colon punctuation\">::</span>_2<span class=\"token punctuation\">,</span> placeholders<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//静态成员函数的绑定-不需要类的示例指针或引用</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func3</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func4</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func5</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>效果：</li></ul>\n<img alt=\"image-20220513103146147\" src=\"image\\image-20220513103146147.png\"/>\n<ul><li>总结：</li></ul>\n<blockquote>\n<p>bind是对包装的可调用类型的进一步封装，可以根据自己的需要进行调整参数的数据及位置，绑定类对象能有优化成员函数的包装使用，更加符合使用习惯</p>\n</blockquote>\n<h1><a id=\"_490\"></a>三、线程库</h1>\n<h2><a id=\"1_492\"></a>1、线程的概念及使用</h2>\n<ul><li>thread类的简单介绍：</li></ul>\n<blockquote>\n<ol><li>在C++11之前，涉及到多线程问题，都是和平台相关的，比如windows和linux下各有自己的接口，这使得代码的可移植性比较差</li><li>C++11中最重要的特性就是对线程进行支持了，使得C++在并行编程时不需要依赖第三方库，而且在原子操作中还引入了原子类的概念</li></ol>\n</blockquote>\n<blockquote>\n<p>注：要使用标准库中的线程，必须包含&lt; thread &gt;头文件</p>\n</blockquote>\n<ul><li>线程常用接口：</li></ul>\n<table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>thread()</td><td>构造一个线程对象，没有关联任何线程函数，即没有启动任何线程</td></tr><tr><td>thread(fn, args1, args2, …)</td><td>构造一个线程对象，并关联线程函数fn，args1，args2，…为线程函数的 参数</td></tr><tr><td>get_id()</td><td>获取线程id</td></tr><tr><td>jionable()</td><td>线程是否还在执行，joinable代表的是一个正在执行中的线程。</td></tr><tr><td>jion()</td><td>该函数调用后会阻塞住线程，当该线程结束后，主线程继续执行</td></tr><tr><td>detach()</td><td>在创建线程对象后马上调用，用于把被创建线程与线程对象分离开，分离 的线程变为后台线程，创建的线程的\"死活\"就与主线程无关</td></tr></tbody></table>\n<ul><li>注意：</li></ul>\n<blockquote>\n<ol><li> <p>线程是操作系统中的一个概念，是进程中的一个执行分支，线程对象可以关联一个线程，用来控制线程以及获取线程的状态</p> </li><li> <p>当创建一个线程对象后，没有提供线程函数，该对象实际没有对应任何线程</p> </li></ol>\n</blockquote>\n<ul><li>示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    std<span class=\"token double-colon punctuation\">::</span>thread t1<span class=\"token punctuation\">;</span><span class=\"token comment\">//空线程</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> t1<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>注：get_id()的返回值类型为id类型，id类型实际为std::thread命名空间下封装的一个类，该类中包含了一个结构体</p>\n</blockquote>\n<ul><li>对应结构体的定义：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// vs下查看</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">/* thread identifier for Win32 */</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>_Hnd<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Win32 HANDLE */</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> _Id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> _Thrd_imp_t<span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"3\"><li>当创建一个线程对象后，并且给线程关联线程函数，该线程就被启动，与主线程一起运行</li></ol>\n<blockquote>\n<ul><li>线程函数一般情况下可按照以下三种方式提供：</li></ul>\n<ol><li>函数指针</li><li>lambda表达式</li><li>函数对象</li></ol>\n</blockquote>\n<ul><li>示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ThreadFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Thread1\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TF</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Thread3\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 线程函数为函数指针</span>\n\tthread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>ThreadFunc<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 线程函数为lambda表达式</span>\n\tthread <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Thread2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 线程函数为函数对象</span>\n\tTF tf<span class=\"token punctuation\">;</span>\n\tthread <span class=\"token function\">t3</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt3<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Main thread!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>效果：</li></ul>\n<img alt=\"image-20220513104734755\" src=\"image\\image-20220513104734755.png\"/>\n<ol start=\"4\"><li>thread类是防拷贝的，不允许拷贝构造以及赋值，但是可以移动构造和移动赋值，即将一个线程对象关联线程的状态转移给其他线程对象，转移期间不影响线程的执行</li></ol>\n<blockquote>\n<p>可以通过jionable()函数判断线程是否是有效的，如果是以下任意情况，则线程无效</p>\n<ul><li>无效的线程：</li></ul>\n<ol><li>采用无参构造函数构造的线程对象</li><li>线程对象的状态已经转移给其他线程对象</li><li>线程已经调用jion或者detach结束</li></ol>\n</blockquote>\n<ul><li>面试题：并发与并行的区别</li></ul>\n<blockquote>\n<ol><li>并发指的是多个事情，在同一时间段内同时发生了；并行指的是多个事情，在同一时间点上同时发生了</li><li>并发的多个任务之间是互相抢占资源的；并行的多个任务之间是不互相抢占资源的，只有在多CPU的情况中才会发生并行</li></ol>\n</blockquote>\n<h2><a id=\"2_609\"></a>2、线程函数参数</h2>\n<blockquote>\n<p>线程函数的参数是以值拷贝的方式拷贝到线程栈空间中的，因此：即使线程参数为引用类型，在线程中修改后也不能修改外部实参，因为其实际引用的是线程栈中的拷贝，而不是外部实参</p>\n</blockquote>\n<ul><li>示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Func1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tx <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Func2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token operator\">*</span>x <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 在线程函数中对a修改，不会影响外部实参，因为：线程函数参数虽然是引用方式，但其实际引用的是线程栈中的拷贝</span>\n\t<span class=\"token comment\">// vs2019会报错-对于引用的参数这么传入</span>\n\t<span class=\"token comment\">//thread t1(Func1, a);</span>\n\t<span class=\"token comment\">//t1.join();</span>\n\t<span class=\"token comment\">//cout &lt;&lt; a &lt;&lt; endl;</span>\n\t<span class=\"token comment\">// 如果想要通过形参改变外部实参时，必须借助std::ref()函数</span>\n\tthread <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span>Func1<span class=\"token punctuation\">,</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 地址的拷贝</span>\n\tthread <span class=\"token function\">t3</span><span class=\"token punctuation\">(</span>Func2<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt3<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>效果：</li></ul>\n<img alt=\"image-20220513110911773\" src=\"image\\image-20220513110911773.png\"/>\n<ul><li>注意：</li></ul>\n<blockquote>\n<p>如果是类成员函数作为线程参数时，必须将this作为线程函数参数</p>\n</blockquote>\n<ul><li>示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Func1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Func2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tA a<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//普通成员函数需要传入类的实例或者指针</span>\n\tthread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>A<span class=\"token double-colon punctuation\">::</span>Func1<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//静态成员函数则不用</span>\n\tthread <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>A<span class=\"token double-colon punctuation\">::</span>Func2<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>效果：</li></ul>\n<img alt=\"image-20220513112613597\" src=\"image\\image-20220513112613597.png\"/>\n<h2><a id=\"3atomic_692\"></a>3、原子性操作库(atomic)</h2>\n<blockquote>\n<p>多线程最主要的问题是共享数据带来的问题(即线程安全)：如果共享数据都是只读的，那么没问题，因为只读操作不会影响到数据，更不会涉及对数据的修改，所以所有线程都会获得同样的数据；但是，当一个或多个线程要修改共享数据时，就会产生很多潜在的麻烦</p>\n</blockquote>\n<ul><li>示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>size_t num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t\tsum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Before joining,sum = \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\tthread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">,</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tthread <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">,</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"After joining,sum = \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>效果：</li></ul>\n<img alt=\"image-20220513112906361\" src=\"image\\image-20220513112906361.png\"/>\n<blockquote>\n<p>C++98中传统的解决方式：可以对共享修改的数据可以加锁保护</p>\n</blockquote>\n<ul><li>示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mutex&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\nstd<span class=\"token double-colon punctuation\">::</span>mutex m<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>size_t num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tm<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tm<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Before joining,sum = \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\tthread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">,</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tthread <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">,</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"After joining,sum = \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>效果：</li></ul>\n<img alt=\"image-20220513113456205\" src=\"image\\image-20220513113456205.png\"/>\n<ul><li>加锁缺陷：</li></ul>\n<blockquote>\n<p>只要一个线程在sum++时，其他线程就会被阻塞，会影响程序运行的效率，而且锁如果控制不好，还容易造成死锁</p>\n</blockquote>\n<blockquote>\n<p>因此C++11中引入了原子操作，所谓原子操作：即不可被中断的一个或一系列操作C++11引入的原子操作类型，使得线程间数据的同步变得非常高效</p>\n</blockquote>\n<ul><li>示图：原子操作类型</li></ul>\n<img alt=\"image-20220513113538668\" src=\"image\\image-20220513113538668.png\"/>\n<blockquote>\n<p>注：需要使用以上原子操作变量时，必须添加头文件#include &lt; atomic &gt;</p>\n</blockquote>\n<ul><li>示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;atomic&gt;</span></span>\n\natomic_long sum<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>size_t num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t\tsum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 原子操作</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Before joining, sum = \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\tthread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">,</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tthread <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">,</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"After joining, sum = \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>效果：</li></ul>\n<img alt=\"image-20220513113742588\" src=\"image\\image-20220513113742588.png\"/>\n<ul><li>注意：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tthread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">,</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tthread <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">,</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//printf(\"%d\\n\", sum);vs2019存在类型不匹配问题</span>\n\t<span class=\"token comment\">//解决方式</span>\n\t<span class=\"token comment\">//1.</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld\\n\"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//2.</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//3.</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>atomic类模板:</li></ul>\n<blockquote>\n<p>在C++11中，程序员不需要对原子类型变量进行加锁解锁操作，线程能够对原子类型变量互斥的访问，更为普遍的，程序员可以使用atomic类模板，定义出需要的任意原子类型</p>\n</blockquote>\n<pre><code class=\"prism language-cpp\">atmoic<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> t<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明一个类型为T的原子类型变量t</span>\n</code></pre>\n<ul><li>注意：</li></ul>\n<blockquote>\n<p>原子类型通常属于\"资源型\"数据，多个线程只能访问单个原子类型的拷贝，因此在C++11中，原子类型只能从其模板参数中进行构造，不允许原子类型进行拷贝构造、移动构造以及operator=等，为了防止意外，标准库已经将atmoic模板类中的拷贝构造、移动构造、赋值运算符重载默认删除掉了</p>\n</blockquote>\n<ul><li>示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;atomic&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    atomic<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">a1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//atomic&lt;int&gt; a2(a1); // 编译失败</span>\n    atomic<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">a2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//a2 = a1; // 编译失败</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"4lock_guardunique_lock_851\"></a>4、lock_guard与unique_lock</h2>\n<ul><li>概念及引入：</li></ul>\n<blockquote>\n<ol><li> <p>在多线程环境下，如果想要保证某个变量的安全性，只要将其设置成对应的原子类型即可，即高效又不容易出现死锁问题</p> </li><li> <p>但是有些情况下，我们可能需要保证一段代码的安全性，那么就只能通过锁的方式来进行控制，锁控制不好时，可能会造成死锁 ，最常见的比如在锁中间代码返回，或者在锁的范围内抛异常</p> </li><li> <p>因此：C++11采用RAII的方式对锁进行了封装，即lock_guard和unique_lock</p> </li></ol>\n</blockquote>\n<h3><a id=\"1mutex_861\"></a>1、mutex的种类</h3>\n<ul><li>在C++11中，Mutex总共包了四个互斥量的种类：</li></ul>\n<ol><li>std::mutex</li></ol>\n<blockquote>\n<p>C++11提供的最基本的互斥量，该类的对象之间不能拷贝，也不能进行移动</p>\n</blockquote>\n<ul><li>mutex最常用的三个函数：</li></ul>\n<table><thead><tr><th>函数名</th><th>函数功能</th></tr></thead><tbody><tr><td>lock()</td><td>上锁：锁住互斥量</td></tr><tr><td>unlock()</td><td>解锁：释放对互斥量的所有权</td></tr><tr><td>try_lock()</td><td>尝试锁住互斥量，如果互斥量被其他线程占有，则当前线程也不会被阻塞</td></tr></tbody></table>\n<ul><li>线程函数调用lock()时可能会发生以下三种情况：</li></ul>\n<blockquote>\n<ol><li>如果该互斥量当前没有被锁住，则调用线程将该互斥量锁住，直到调用 unlock之前，该线程一直拥有该锁</li><li>如果当前互斥量被其他线程锁住，则当前的调用线程被阻塞住</li><li>如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)</li></ol>\n</blockquote>\n<ul><li>线程函数调用try_lock()时可能会发生以下三种情况：</li></ul>\n<blockquote>\n<ol><li>如果当前互斥量没有被其他线程占有，则该线程锁住互斥量，直到该线程调用 unlock 释放互斥量</li><li>如果当前互斥量被其他线程锁住，则当前调用线程返回 false，而并不会被阻塞掉</li><li>如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)</li></ol>\n</blockquote>\n<ol start=\"2\"><li>std::recursive_mutex</li></ol>\n<blockquote>\n<ol><li>其允许同一个线程对互斥量多次上锁（即递归上锁），来获得对互斥量对象的多层所有权，释放互斥量时需要调用与该锁层次深度相同次数的 unlock()</li><li>除此之外，std::recursive_mutex 的特性和 std::mutex 大致相同</li></ol>\n</blockquote>\n<ol start=\"3\"><li>std::timed_mutex</li></ol>\n<blockquote>\n<ol><li>比 std::mutex 多了两个成员函数，try_lock_for()，try_lock_until() ,<br/> try_lock_for()</li><li>接受一个时间范围，表示在这一段时间范围之内线程如果没有获得锁则被阻塞住（与std::mutex 的 try_lock() 不同，try_lock 如果被调用时没有获得锁则直接返回false），如果在此期间其他线程释放了锁，则该线程可以获得对互斥量的锁，如果超时（即在指定时间内还是没有获得锁），则返回 false</li><li>try_lock_until()接受一个时间点作为参数，在指定时间点未到来之前线程如果没有获得锁则被阻塞住，如果在此期间其他线程释放了锁，则该线程可以获得对互斥量的锁，如果超时（即在指定时间内还是没有获得锁），则返回 false</li></ol>\n</blockquote>\n<ol start=\"4\"><li>std::recursive_timed_mutex</li></ol>\n<blockquote>\n<p>recursive_mutex和timed_mutex的结合</p>\n</blockquote>\n<h3><a id=\"1lock_guard_905\"></a>1、lock_guard</h3>\n<p>std::lock_gurad 是 C++11 中定义的模板类。</p>\n<p>定义如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Mutex</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">lock_guard</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// 在构造lock_gard时上锁</span>\n\t<span class=\"token keyword\">explicit</span> <span class=\"token function\">lock_guard</span><span class=\"token punctuation\">(</span>_Mutex<span class=\"token operator\">&amp;</span> _Mtx<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span> <span class=\"token function\">_MyMutex</span><span class=\"token punctuation\">(</span>_Mtx<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t_MyMutex<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">lock_guard</span><span class=\"token punctuation\">(</span>_Mutex <span class=\"token operator\">&amp;</span> _Mtx<span class=\"token punctuation\">,</span> adopt_lock_t<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span> <span class=\"token function\">_MyMutex</span><span class=\"token punctuation\">(</span>_Mtx<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// 在析构lock_gard时解锁</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">lock_guard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> _NOEXCEPT\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t_MyMutex<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">lock_guard</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> lock_guard<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\tlock_guard<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> lock_guard<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t_Mutex<span class=\"token operator\">&amp;</span> _MyMutex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>解释：</li></ul>\n<blockquote>\n<p>lock_guard类模板主要是通过RAII的方式，对其管理的互斥量进行了封装，在需要加锁的地方，只需要用上述介绍的任意互斥体实例化一个lock_guard，调用构造函数成功上锁，出作用域前，lock_guard对象要被销毁，调用析构函数自动解锁，可以有效避免死锁问题</p>\n</blockquote>\n<ul><li>lock_guard的缺陷：</li></ul>\n<blockquote>\n<p>太单一，用户没有办法对该锁进行控制，因此C++11又提供了unique_lock</p>\n</blockquote>\n<h3><a id=\"3unique_lock_945\"></a>3、unique_lock</h3>\n<ul><li>概念及介绍：</li></ul>\n<blockquote>\n<ol><li>与lock_gard类似，unique_lock类模板也是采用RAII的方式对锁进行了封装，并且也是以独占所有权的方式管理mutex对象的上锁和解锁操作，即其对象之间不能发生拷贝</li><li>在构造(或移动(move)赋值)时，unique_lock 对象需要传递一个 Mutex 对象作为它的参数，新创建的unique_lock 对象负责传入的 Mutex 对象的上锁和解锁操作。使用以上类型互斥量实例化unique_lock的对象时，自动调用构造函数上锁，unique_lock对象销毁时自动调用析构函数解锁，可以很方便的防止死锁问题</li><li>与lock_guard不同的是，unique_lock更加的灵活，提供了更多的成员函数：<br/> 上锁/解锁操作：lock、try_lock、try_lock_for、try_lock_until和unlock<br/> 修改操作：移动赋值、交换(swap：与另一个unique_lock对象互换所管理的互斥量所有权)、释放(release：返回它所管理的互斥量对象的指针，并释放所有权) 获取属性：owns_lock(返回当前对象是否上了锁)、operator bool()(与owns_lock()的功能相同)、mutex(返回当前unique_lock所管理的互斥量的指针)</li></ol>\n</blockquote>\n<h2><a id=\"5_955\"></a>5、两个线程交替打印奇数偶数</h2>\n<ul><li>错误示例：使用普通的条件变量</li></ul>\n<blockquote>\n<ol><li>先让打印偶数线程获取到所资源，然后在条件变量下等待并将锁资源释放</li><li>打印奇数获取到锁进行打印，打印后先唤醒在条件变量下等待的线程，再等待在并释放锁资源</li><li>再打印偶数线程被唤醒并竞争到锁资源，进行打印…</li></ol>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mutex&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> flg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\tmutex mtx<span class=\"token punctuation\">;</span>\n\tcondition_variable cv<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//存在时间片切出去的问题</span>\n\tthread <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>mtx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cv<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span>unique_lock<span class=\"token operator\">&lt;</span>mutex<span class=\"token operator\">&gt;</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\tj <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">notify_one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tthread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>mtx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cv<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span>unique_lock<span class=\"token operator\">&lt;</span>mutex<span class=\"token operator\">&gt;</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\ti <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">notify_one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>问题示例：</li></ul>\n<blockquote>\n<p>当打印偶数线程获取锁后，在要等待在条件变量下之前时，时间片到了线程被切出去，再等到打印奇数线程执行唤醒等待条件变量下的线程时没有线程被唤醒，当打印偶数线程时间片切回时，依旧会等待在条件变量下，而此时打印奇数线程也等待在条件变量下，此时没人进行唤醒两线程也就会一直进行等待</p>\n</blockquote>\n<ul><li>效果：</li></ul>\n<img alt=\"image-20220514204054462\" src=\"image\\image-20220514204054462.png\"/>\n<ul><li>正确示例：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mutex&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;condition_variable&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> flg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\tmutex mtx<span class=\"token punctuation\">;</span>\n\tcondition_variable cv<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//正确写法</span>\n\tthread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>mtx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cv<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>flg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span>unique_lock<span class=\"token operator\">&lt;</span>mutex<span class=\"token operator\">&gt;</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>flg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> flg<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//根据条件判断是否需要进行阻塞等待</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\ti<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\tflg <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//更改条件变量-使得另一个线程执行，该线程会等待住</span>\n\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">notify_one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//进行唤醒等待条件变量下的线程</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tthread <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>mtx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cv<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>flg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span>unique_lock<span class=\"token operator\">&lt;</span>mutex<span class=\"token operator\">&gt;</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>flg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>flg<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\tj <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\tflg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">notify_one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>效果：</li></ul>\n<img alt=\"image-20220514204437521\" src=\"image\\image-20220514204437521.png\"/>\n<p>确示例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mutex&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;condition_variable&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> flg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\tmutex mtx<span class=\"token punctuation\">;</span>\n\tcondition_variable cv<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//正确写法</span>\n\tthread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>mtx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cv<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>flg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span>unique_lock<span class=\"token operator\">&lt;</span>mutex<span class=\"token operator\">&gt;</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>flg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> flg<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//根据条件判断是否需要进行阻塞等待</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\ti<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\tflg <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//更改条件变量-使得另一个线程执行，该线程会等待住</span>\n\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">notify_one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//进行唤醒等待条件变量下的线程</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tthread <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>mtx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cv<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>flg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span>unique_lock<span class=\"token operator\">&lt;</span>mutex<span class=\"token operator\">&gt;</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>flg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>flg<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\tj <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\tflg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">notify_one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>效果：</li></ul>\n<img alt=\"image-20220514204437521\" src=\"image\\image-20220514204437521.png\"/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}