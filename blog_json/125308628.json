{"blogid": "125308628", "writerAge": "码龄161天", "writerBlogNum": "91", "writerCollect": "101", "writerComment": "36", "writerFan": "44", "writerGrade": "4级", "writerIntegral": "1091", "writerName": "std7879", "writerProfileAdress": "writer_image\\profile_125308628.jpg", "writerRankTotal": "27444", "writerRankWeekly": "278142", "writerThumb": "80", "writerVisitNum": "50069", "blog_read_count": "5610", "blog_time": "于 2022-06-16 07:49:32 发布", "blog_title": "MySQL分页查询的5种方法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>方式1：</p>\n<p>select * from table order by id limit m, n;</p>\n<p>很简单，该语句的意思就是查询m+n条记录，去掉前m条，返回后n条。无疑该查询能够实现分页，但m越大，查询性能就越低，因为MySQL需要扫描全部m+n条记录。</p>\n<p>方式2：</p>\n<p>select * from table where id &gt; #max_id# order by id limit n;</p>\n<p>该查询同样会返回后n条记录，却无需像方式1扫描前m条记录，但必须在每次查询时拿到上一次查询（上一页）的最大id（或最小id），是比较常用的方式。</p>\n<p>当然该查询的问题也在于我们不一定能拿到这个id，比如当前在第3页，需要查询第5页的数据，就不行了。</p>\n<p></p>\n<p>方式3：</p>\n<p>为了避免方式2不能实现的跨页查询，就需要结合方式1。</p>\n<p>性能需要，m得尽量小。比如当前在第3页，需要查询第5页，每页10条数据，且当前第3页的最大id为#max_id#，则：</p>\n<p>select * from table where id &gt; #max_id# order by id limit 10, 10;</p>\n<p>该方式就部分解决了方式2的问题，但如果当前在第2页，要查第1000页，性能仍然较差。</p>\n<p></p>\n<p>方式4：</p>\n<p>select * from table as a inner join (select id from table order by id limit m, n) as b on a.id = b.id order by a.id;</p>\n<p>该查询同方式1一样，m的值可能很大，但由于内部的子查询只扫描了id字段，而非全表，所以性能要强于方式1，并且能够解决跨页查询问题。</p>\n<p></p>\n<p>方式5：</p>\n<p>select * from table where id &gt; (select id from table order by id limit m, 1) limit n;</p>\n<p>该查询同样是通过子查询扫描字段id，效果同方式4。但方式5的性能会略好于方式4，因为它不需要进行表的关联，而是一个简单的比较，在不知道上一页最大id的情况下，是比较推荐的用法。</p>\n</div>\n</div>"}