{"blogid": "122020643", "writerAge": "码龄3年", "writerBlogNum": "28", "writerCollect": "400", "writerComment": "254", "writerFan": "1130", "writerGrade": "3级", "writerIntegral": "624", "writerName": "Zero___Chen", "writerProfileAdress": "writer_image\\profile_122020643.jpg", "writerRankTotal": "29127", "writerRankWeekly": "8142", "writerThumb": "190", "writerVisitNum": "89057", "blog_read_count": "13805", "blog_time": "已于 2022-05-31 19:03:34 修改", "blog_title": "OpenCV C++案例实战十《车牌号识别》", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>OpenCV C++案例实战十《车牌号识别》</h3>\n<ul><li><a href=\"#_4\">前言</a></li><li><a href=\"#_8\">一、车牌检测</a></li><li><ul><li><a href=\"#11_12\">1.1.图像预处理</a></li><li><a href=\"#12_29\">1.2.轮廓提取</a></li><li><a href=\"#13_70\">1.3.功能效果</a></li><li><a href=\"#14_74\">1.4.功能源码</a></li></ul>\n</li><li><a href=\"#_129\">二、字符切割</a></li><li><ul><li><a href=\"#21_130\">2.1.图像预处理</a></li><li><a href=\"#22_145\">2.2.轮廓提取</a></li><li><a href=\"#23_186\">2.3.功能效果</a></li><li><a href=\"#24_188\">2.4.功能源码</a></li></ul>\n</li><li><a href=\"#_245\">三、字符识别</a></li><li><ul><li><a href=\"#31_246\">3.1.读取文件</a></li><li><a href=\"#32_292\">3.2.字符匹配</a></li><li><a href=\"#33_298\">3.3.功能源码</a></li></ul>\n</li><li><a href=\"#_343\">四、效果显示</a></li><li><a href=\"#_372\">五、源码---版本一</a></li><li><a href=\"#_706\">六、源码---版本二</a></li><li><ul><li><a href=\"#1_1035\">1、效果显示</a></li></ul>\n</li><li><a href=\"#_1042\">总结</a></li><li><a href=\"#freetype_1052\">freetype库配置</a></li></ul>\n</div>\n<p></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_4\"></a>前言</h1>\n<p><font color=\"#999AAA\">本文将使用OpenCV C++ 进行车牌号识别。</font></p>\n<h1><a id=\"_8\"></a>一、车牌检测</h1>\n<p><img alt=\"请添加图片描述\" src=\"image\\e2f9351893a3493b88507c1fb120ecb7.jpg\"/><br/> 原图如图所示。本案例的需求是进行车牌号码识别。所以，首先我们得定位车牌所在的位置，然后将车牌切割出来。接下来我们就来看看是如何实现。</p>\n<h2><a id=\"11_12\"></a>1.1.图像预处理</h2>\n<p>首先经过一些常规的图像预处理，我们可以提取出图像的大致轮廓。然后根据轮廓的特征进一步确定我们所需要查找的轮廓。在这里，不同的图像需要根据本身图像特征设定预处理算法。所以，本案例的一个缺点就是不具有鲁棒性，只针对特定需求。</p>\n<pre><code class=\"prism language-cpp\">\tMat gray<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> gray<span class=\"token punctuation\">,</span> COLOR_BGR2GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tMat thresh<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>gray<span class=\"token punctuation\">,</span> thresh<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> THRESH_BINARY_INV <span class=\"token operator\">|</span> THRESH_OTSU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//使用形态学开操作去除一些小轮廓</span>\n\tMat kernel <span class=\"token operator\">=</span> <span class=\"token function\">getStructuringElement</span><span class=\"token punctuation\">(</span>MORPH_RECT<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMat open<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">morphologyEx</span><span class=\"token punctuation\">(</span>thresh<span class=\"token punctuation\">,</span> open<span class=\"token punctuation\">,</span> MORPH_OPEN<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\3f8712897f734ff19fc58c824228eb1a.jpg\"/><br/> 如图为经过二值化后的图像，接下来我们就可以使用findContours寻找我们需要的轮廓。根据图像的轮廓特征就可以定位到车牌所在位置，然后将其从原图中切割出来，以便后续的识别工作。在这里，我定义了一个License结构体，用于存储ROI图像，以及其相对于原图所在位置。这样在后续的绘制工作中，我们就可以定位到ROI所在位置。</p>\n<h2><a id=\"12_29\"></a>1.2.轮廓提取</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//自定义车牌结构体</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">License</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tMat mat<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//ROI图片</span>\n\tRect rect<span class=\"token punctuation\">;</span> <span class=\"token comment\">//ROI所在矩形</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\">\t<span class=\"token comment\">//使用 RETR_EXTERNAL 找到最外轮廓</span>\n\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">&gt;&gt;</span>contours<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">findContours</span><span class=\"token punctuation\">(</span>open<span class=\"token punctuation\">,</span> contours<span class=\"token punctuation\">,</span> RETR_EXTERNAL<span class=\"token punctuation\">,</span> CHAIN_APPROX_SIMPLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">&gt;&gt;</span><span class=\"token function\">conPoly</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> contours<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">double</span> area <span class=\"token operator\">=</span> <span class=\"token function\">contourArea</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">double</span> peri <span class=\"token operator\">=</span> <span class=\"token function\">arcLength</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//根据面积筛选出可能属于车牌区域的轮廓</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>area <span class=\"token operator\">&gt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//使用多边形近似，进一步确定车牌区域轮廓</span>\n\t\t\t<span class=\"token function\">approxPolyDP</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> conPoly<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.02</span><span class=\"token operator\">*</span>peri<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>conPoly<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t\t\t\t<span class=\"token comment\">//计算矩形区域宽高比</span>\n\t\t\t\tRect box <span class=\"token operator\">=</span> <span class=\"token function\">boundingRect</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">double</span> ratio <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ratio <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> ratio <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">//截取ROI区域</span>\n\t\t\t\t\tRect rect <span class=\"token operator\">=</span> <span class=\"token function\">boundingRect</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tLicense_ROI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token function\">src</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rect <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"13_70\"></a>1.3.功能效果</h2>\n<p><img alt=\"请添加图片描述\" src=\"image\\b1b31e7111de44a18c327ef8f8e9992b.jpg\"/><br/> 如图为从汽车上定位到的车牌，并将其切割出来以便下面的识别工作。</p>\n<h2><a id=\"14_74\"></a>1.4.功能源码</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//获取车牌所在ROI区域--车牌定位</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Get_License_ROI</span><span class=\"token punctuation\">(</span>Mat src<span class=\"token punctuation\">,</span> License <span class=\"token operator\">&amp;</span>License_ROI<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tMat gray<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> gray<span class=\"token punctuation\">,</span> COLOR_BGR2GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tMat thresh<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>gray<span class=\"token punctuation\">,</span> thresh<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> THRESH_BINARY_INV <span class=\"token operator\">|</span> THRESH_OTSU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//使用形态学开操作去除一些小轮廓</span>\n\tMat kernel <span class=\"token operator\">=</span> <span class=\"token function\">getStructuringElement</span><span class=\"token punctuation\">(</span>MORPH_RECT<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMat open<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">morphologyEx</span><span class=\"token punctuation\">(</span>thresh<span class=\"token punctuation\">,</span> open<span class=\"token punctuation\">,</span> MORPH_OPEN<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//使用 RETR_EXTERNAL 找到最外轮廓</span>\n\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">&gt;&gt;</span>contours<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">findContours</span><span class=\"token punctuation\">(</span>open<span class=\"token punctuation\">,</span> contours<span class=\"token punctuation\">,</span> RETR_EXTERNAL<span class=\"token punctuation\">,</span> CHAIN_APPROX_SIMPLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">&gt;&gt;</span><span class=\"token function\">conPoly</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> contours<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">double</span> area <span class=\"token operator\">=</span> <span class=\"token function\">contourArea</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">double</span> peri <span class=\"token operator\">=</span> <span class=\"token function\">arcLength</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//根据面积筛选出可能属于车牌区域的轮廓</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>area <span class=\"token operator\">&gt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//使用多边形近似，进一步确定车牌区域轮廓</span>\n\t\t\t<span class=\"token function\">approxPolyDP</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> conPoly<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.02</span><span class=\"token operator\">*</span>peri<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>conPoly<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t\t\t\t<span class=\"token comment\">//计算矩形区域宽高比</span>\n\t\t\t\tRect box <span class=\"token operator\">=</span> <span class=\"token function\">boundingRect</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">double</span> ratio <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ratio <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> ratio <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">//截取ROI区域</span>\n\t\t\t\t\tRect rect <span class=\"token operator\">=</span> <span class=\"token function\">boundingRect</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tLicense_ROI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token function\">src</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rect <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>License_ROI<span class=\"token punctuation\">.</span>mat<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_129\"></a>二、字符切割</h1>\n<h2><a id=\"21_130\"></a>2.1.图像预处理</h2>\n<p>通过刚才的车牌定位，我们已经将车牌从原图中切割出来了。接下来，我们还需要将车牌上的字符一一切割出来，以便进行后续的识别工作。同理，我们也需要对车牌做同样的预处理操作。</p>\n<pre><code class=\"prism language-cpp\">\tMat gray<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>License_ROI<span class=\"token punctuation\">.</span>mat<span class=\"token punctuation\">,</span> gray<span class=\"token punctuation\">,</span> COLOR_BGR2GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tMat thresh<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>gray<span class=\"token punctuation\">,</span> thresh<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> THRESH_BINARY <span class=\"token operator\">|</span> THRESH_OTSU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tMat kernel <span class=\"token operator\">=</span> <span class=\"token function\">getStructuringElement</span><span class=\"token punctuation\">(</span>MORPH_RECT<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMat close<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">morphologyEx</span><span class=\"token punctuation\">(</span>thresh<span class=\"token punctuation\">,</span> close<span class=\"token punctuation\">,</span> MORPH_CLOSE<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>经过灰度、阈值、形态学操作后的图像如下图所示。<br/> <img alt=\"请添加图片描述\" src=\"image\\0702818daa24416ab11ff499a03ef918.jpg\"/></p>\n<h2><a id=\"22_145\"></a>2.2.轮廓提取</h2>\n<p>接下来我们进行轮廓提取就可以提取出车牌上的每一个字符了。</p>\n<pre><code class=\"prism language-cpp\">\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">&gt;&gt;</span>contours<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">findContours</span><span class=\"token punctuation\">(</span>close<span class=\"token punctuation\">,</span> contours<span class=\"token punctuation\">,</span> RETR_EXTERNAL<span class=\"token punctuation\">,</span> CHAIN_APPROX_SIMPLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> contours<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">double</span> area <span class=\"token operator\">=</span> <span class=\"token function\">contourArea</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//由于我们筛选出来的轮廓是无序的，故后续我们需要将字符重新排序</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>area <span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tRect rect <span class=\"token operator\">=</span> <span class=\"token function\">boundingRect</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//计算外接矩形宽高比</span>\n\t\t\t<span class=\"token keyword\">double</span> ratio <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ratio <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tMat roi <span class=\"token operator\">=</span> License_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">mat</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>roi<span class=\"token punctuation\">,</span> roi<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> INTER_LINEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t \n\t\t\t\tCharacter_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> roi <span class=\"token punctuation\">,</span>rect <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\83ec3db9167a40ff84fde0202175d905.png\"/>如图为切割出来的字符。不过这里有一个小问题就是，我们切割出来的字符并不是按车牌号码那样顺序排列。所以，在这里我们还得对其重新进行排序，使其按车牌顺序排列。</p>\n<pre><code class=\"prism language-cpp\">\t<span class=\"token comment\">//冒泡排序</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Character_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> Character_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Character_ROI<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&gt;</span> Character_ROI<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tLicense temp <span class=\"token operator\">=</span> Character_ROI<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tCharacter_ROI<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Character_ROI<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tCharacter_ROI<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"23_186\"></a>2.3.功能效果</h2>\n<p><img alt=\"请添加图片描述\" src=\"image\\eb23f979b43b4d0c95bb746f7a8fcf9d.png\"/></p>\n<h2><a id=\"24_188\"></a>2.4.功能源码</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//获取车牌每一个字符ROI区域</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Get_Character_ROI</span><span class=\"token punctuation\">(</span>License <span class=\"token operator\">&amp;</span>License_ROI<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>License<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>Character_ROI<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tMat gray<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>License_ROI<span class=\"token punctuation\">.</span>mat<span class=\"token punctuation\">,</span> gray<span class=\"token punctuation\">,</span> COLOR_BGR2GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tMat thresh<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>gray<span class=\"token punctuation\">,</span> thresh<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> THRESH_BINARY <span class=\"token operator\">|</span> THRESH_OTSU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tMat kernel <span class=\"token operator\">=</span> <span class=\"token function\">getStructuringElement</span><span class=\"token punctuation\">(</span>MORPH_RECT<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMat close<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">morphologyEx</span><span class=\"token punctuation\">(</span>thresh<span class=\"token punctuation\">,</span> close<span class=\"token punctuation\">,</span> MORPH_CLOSE<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">&gt;&gt;</span>contours<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">findContours</span><span class=\"token punctuation\">(</span>close<span class=\"token punctuation\">,</span> contours<span class=\"token punctuation\">,</span> RETR_EXTERNAL<span class=\"token punctuation\">,</span> CHAIN_APPROX_SIMPLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> contours<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">double</span> area <span class=\"token operator\">=</span> <span class=\"token function\">contourArea</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//由于我们筛选出来的轮廓是无序的，故后续我们需要将字符重新排序</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>area <span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tRect rect <span class=\"token operator\">=</span> <span class=\"token function\">boundingRect</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//计算外接矩形宽高比</span>\n\t\t\t<span class=\"token keyword\">double</span> ratio <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ratio <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tMat roi <span class=\"token operator\">=</span> License_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">mat</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>roi<span class=\"token punctuation\">,</span> roi<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> INTER_LINEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t \n\t\t\t\tCharacter_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> roi <span class=\"token punctuation\">,</span>rect <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//将筛选出来的字符轮廓 按照其左上角点坐标从左到右依次顺序排列</span>\n\t<span class=\"token comment\">//冒泡排序</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Character_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> Character_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Character_ROI<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&gt;</span> Character_ROI<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tLicense temp <span class=\"token operator\">=</span> Character_ROI<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tCharacter_ROI<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Character_ROI<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tCharacter_ROI<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Character_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_245\"></a>三、字符识别</h1>\n<h2><a id=\"31_246\"></a>3.1.读取文件</h2>\n<p><img alt=\"请添加图片描述\" src=\"image\\10ba919082934cd9978d9639639a6d63.png\"/><br/> 如图所示，为模板图像以及对应的label。我们需要读取文件，进行匹配。在这里我使用UTF8ToGB函数实现读取txt文件，目的是为了在控制台显示中文时，不会出现乱码情况。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//读取文件  图片</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Read_Data</span><span class=\"token punctuation\">(</span>string filename<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span>Mat<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>dataset<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\t\t\n\tvector<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span>imagePathList<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glob</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> imagePathList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imagePathList<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> imagePathList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tMat image <span class=\"token operator\">=</span> <span class=\"token function\">imread</span><span class=\"token punctuation\">(</span>imagePathList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> INTER_LINEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdataset<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//读取文件 标签</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Read_Data</span><span class=\"token punctuation\">(</span>string filename<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>data_name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tfstream fin<span class=\"token punctuation\">;</span>\n\tfin<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"can not open the file!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tstring s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tstring str <span class=\"token operator\">=</span> <span class=\"token function\">UTF8ToGB</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdata_name<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tfin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"32_292\"></a>3.2.字符匹配</h2>\n<p>在这里，我的思路是：使用一个for循环，将我们切割出来的字符与现有的模板进行匹配。而这个匹配算法是求两张图像的像素差，以此来判断图像的相似程度。具体是使用OpenCV absdiff函数计算两张图像的像素差.。<br/> <img alt=\"请添加图片描述\" src=\"image\\d8dff2b37d874d02b79da9a7ad01e8d1.png\"/><br/> <img alt=\"请添加图片描述\" src=\"image\\b57e4d9c537942b998168b35e157c28b.png\"/><br/> 如图为使用absdiff得到的效果图。接下来，我们只需要计算图像中灰度值为0的像素点个数就可以了。像素点个数最少的那个label即为我们的匹配结果。当然，此方法肯定是会存在误识别的情况的。进行字符匹配的方法还有：模板匹配，基于Hu矩轮廓匹配。大家可以试试。</p>\n<h2><a id=\"33_298\"></a>3.3.功能源码</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//识别车牌字符</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">License_Recognition</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>License<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>Character_ROI<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>result_index<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring filename <span class=\"token operator\">=</span> <span class=\"token string\">\"data/\"</span><span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span>Mat<span class=\"token operator\">&gt;</span>dataset<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Read_Data</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Character_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tMat roi_gray<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>Character_ROI<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mat<span class=\"token punctuation\">,</span> roi_gray<span class=\"token punctuation\">,</span> COLOR_BGR2GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tMat roi_thresh<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>roi_gray<span class=\"token punctuation\">,</span> roi_thresh<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> THRESH_BINARY <span class=\"token operator\">|</span> THRESH_OTSU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span> minCount <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> dataset<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tMat temp_gray<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> temp_gray<span class=\"token punctuation\">,</span> COLOR_BGR2GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tMat temp_thresh<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>temp_gray<span class=\"token punctuation\">,</span> temp_thresh<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> THRESH_BINARY <span class=\"token operator\">|</span> THRESH_OTSU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">//计算两张图片的像素差，以此判断两张图片是否相同</span>\n\t\t\tMat dst<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">absdiff</span><span class=\"token punctuation\">(</span>roi_thresh<span class=\"token punctuation\">,</span> temp_thresh<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token function\">pixCount</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> minCount<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tminCount <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n\t\t\t\tindex <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\t\t\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tresult_index<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_343\"></a>四、效果显示</h1>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//显示最终效果</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Draw_Result</span><span class=\"token punctuation\">(</span>Mat src<span class=\"token punctuation\">,</span> License <span class=\"token operator\">&amp;</span>License_ROI<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>License<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>Character_ROI<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>result_index<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> License_ROI<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">,</span> <span class=\"token function\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span>data_name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Read_Data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data_name.txt\"</span><span class=\"token punctuation\">,</span> data_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Character_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> data_name<span class=\"token punctuation\">[</span>result_index<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//putText 中文显示会乱码，所以采用下面代码</span>\n\t\tCvxText <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C://Windows/Fonts/方正粗黑宋简体.ttf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//字体</span>\n\t\tstring str <span class=\"token operator\">=</span> data_name<span class=\"token punctuation\">[</span>result_index<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//string 转 char</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>msg <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tIplImage <span class=\"token operator\">*</span>temp<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//Mat 转 IplImage</span>\n\t\ttemp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">IplImage</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttext<span class=\"token punctuation\">.</span><span class=\"token function\">putText</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span>License_ROI<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> Character_ROI<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> License_ROI<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> Character_ROI<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在这里，为了使用putText显示中文，我这里加了一些额外的代码。如果需要使用putText显示中文效果的朋友可以自行百度一下如何配置环境。<br/> 最终效果如图所示：<br/> <img alt=\"请添加图片描述\" src=\"image\\32acc931f122419d85cbc1b4973a615a.png\"/><br/> <img alt=\"请添加图片描述\" src=\"image\\253894ad6d634a6aa9fbac352ff4cc5a.png\"/><br/> <img alt=\"请添加图片描述\" src=\"image\\79746d19f6ea4afaaa27e64dd8187a81.png\"/></p>\n<h1><a id=\"_372\"></a>五、源码—版本一</h1>\n<p>版本一 ：putText能够显示中文，需要配置freetype库。目前我使用的环境是：win10、vs2017、opencv4.1。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;opencv2/opencv.hpp&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;fstream&gt;</span>   <span class=\"token comment\">//文本读写</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h&gt;</span> <span class=\"token comment\">//控制台输出中文乱码</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"CvxText.h\"</span> <span class=\"token comment\">//putText显示中文乱码</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> cv<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//自定义车牌结构体</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">License</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tMat mat<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//ROI图片</span>\n\tRect rect<span class=\"token punctuation\">;</span> <span class=\"token comment\">//ROI所在矩形</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//获取车牌所在ROI区域--车牌定位</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Get_License_ROI</span><span class=\"token punctuation\">(</span>Mat src<span class=\"token punctuation\">,</span> License <span class=\"token operator\">&amp;</span>License_ROI<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tMat gray<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> gray<span class=\"token punctuation\">,</span> COLOR_BGR2GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tMat thresh<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>gray<span class=\"token punctuation\">,</span> thresh<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> THRESH_BINARY_INV <span class=\"token operator\">|</span> THRESH_OTSU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//使用形态学开操作去除一些小轮廓</span>\n\tMat kernel <span class=\"token operator\">=</span> <span class=\"token function\">getStructuringElement</span><span class=\"token punctuation\">(</span>MORPH_RECT<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMat open<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">morphologyEx</span><span class=\"token punctuation\">(</span>thresh<span class=\"token punctuation\">,</span> open<span class=\"token punctuation\">,</span> MORPH_OPEN<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//使用 RETR_EXTERNAL 找到最外轮廓</span>\n\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">&gt;&gt;</span>contours<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">findContours</span><span class=\"token punctuation\">(</span>open<span class=\"token punctuation\">,</span> contours<span class=\"token punctuation\">,</span> RETR_EXTERNAL<span class=\"token punctuation\">,</span> CHAIN_APPROX_SIMPLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">&gt;&gt;</span><span class=\"token function\">conPoly</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> contours<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">double</span> area <span class=\"token operator\">=</span> <span class=\"token function\">contourArea</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">double</span> peri <span class=\"token operator\">=</span> <span class=\"token function\">arcLength</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//根据面积筛选出可能属于车牌区域的轮廓</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>area <span class=\"token operator\">&gt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//使用多边形近似，进一步确定车牌区域轮廓</span>\n\t\t\t<span class=\"token function\">approxPolyDP</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> conPoly<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.02</span><span class=\"token operator\">*</span>peri<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>conPoly<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t\t\t\t<span class=\"token comment\">//计算矩形区域宽高比</span>\n\t\t\t\tRect box <span class=\"token operator\">=</span> <span class=\"token function\">boundingRect</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">double</span> ratio <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ratio <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> ratio <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">//截取ROI区域</span>\n\t\t\t\t\tRect rect <span class=\"token operator\">=</span> <span class=\"token function\">boundingRect</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tLicense_ROI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token function\">src</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rect <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>License_ROI<span class=\"token punctuation\">.</span>mat<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//获取车牌每一个字符ROI区域</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Get_Character_ROI</span><span class=\"token punctuation\">(</span>License <span class=\"token operator\">&amp;</span>License_ROI<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>License<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>Character_ROI<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tMat gray<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>License_ROI<span class=\"token punctuation\">.</span>mat<span class=\"token punctuation\">,</span> gray<span class=\"token punctuation\">,</span> COLOR_BGR2GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tMat thresh<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>gray<span class=\"token punctuation\">,</span> thresh<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> THRESH_BINARY <span class=\"token operator\">|</span> THRESH_OTSU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tMat kernel <span class=\"token operator\">=</span> <span class=\"token function\">getStructuringElement</span><span class=\"token punctuation\">(</span>MORPH_RECT<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMat close<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">morphologyEx</span><span class=\"token punctuation\">(</span>thresh<span class=\"token punctuation\">,</span> close<span class=\"token punctuation\">,</span> MORPH_CLOSE<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">&gt;&gt;</span>contours<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">findContours</span><span class=\"token punctuation\">(</span>close<span class=\"token punctuation\">,</span> contours<span class=\"token punctuation\">,</span> RETR_EXTERNAL<span class=\"token punctuation\">,</span> CHAIN_APPROX_SIMPLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> contours<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">double</span> area <span class=\"token operator\">=</span> <span class=\"token function\">contourArea</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//由于我们筛选出来的轮廓是无序的，故后续我们需要将字符重新排序</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>area <span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tRect rect <span class=\"token operator\">=</span> <span class=\"token function\">boundingRect</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//计算外接矩形宽高比</span>\n\t\t\t<span class=\"token keyword\">double</span> ratio <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ratio <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tMat roi <span class=\"token operator\">=</span> License_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">mat</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>roi<span class=\"token punctuation\">,</span> roi<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> INTER_LINEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t \n\t\t\t\tCharacter_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> roi <span class=\"token punctuation\">,</span>rect <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//将筛选出来的字符轮廓 按照其左上角点坐标从左到右依次顺序排列</span>\n\t<span class=\"token comment\">//冒泡排序</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Character_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> Character_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Character_ROI<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&gt;</span> Character_ROI<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tLicense temp <span class=\"token operator\">=</span> Character_ROI<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tCharacter_ROI<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Character_ROI<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tCharacter_ROI<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Character_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//从txt文件中读取中文，防止乱码</span>\nstring <span class=\"token function\">UTF8ToGB</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring result<span class=\"token punctuation\">;</span>\n\tWCHAR <span class=\"token operator\">*</span>strSrc<span class=\"token punctuation\">;</span>\n\tLPSTR szRes<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//获得临时变量的大小</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token function\">MultiByteToWideChar</span><span class=\"token punctuation\">(</span>CP_UTF8<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstrSrc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> WCHAR<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MultiByteToWideChar</span><span class=\"token punctuation\">(</span>CP_UTF8<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> strSrc<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//获得临时变量的大小</span>\n\ti <span class=\"token operator\">=</span> <span class=\"token function\">WideCharToMultiByte</span><span class=\"token punctuation\">(</span>CP_ACP<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> strSrc<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tszRes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> CHAR<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">WideCharToMultiByte</span><span class=\"token punctuation\">(</span>CP_ACP<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> strSrc<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> szRes<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tresult <span class=\"token operator\">=</span> szRes<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>strSrc<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>szRes<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//读取文件  图片</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Read_Data</span><span class=\"token punctuation\">(</span>string filename<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span>Mat<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>dataset<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\t\t\n\tvector<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span>imagePathList<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glob</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> imagePathList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imagePathList<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> imagePathList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tMat image <span class=\"token operator\">=</span> <span class=\"token function\">imread</span><span class=\"token punctuation\">(</span>imagePathList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> INTER_LINEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdataset<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//读取文件 标签</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Read_Data</span><span class=\"token punctuation\">(</span>string filename<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>data_name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tfstream fin<span class=\"token punctuation\">;</span>\n\tfin<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"can not open the file!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tstring s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tstring str <span class=\"token operator\">=</span> <span class=\"token function\">UTF8ToGB</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdata_name<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tfin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\">//计算像素点个数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">pixCount</span><span class=\"token punctuation\">(</span>Mat image<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span><span class=\"token function\">channels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> image<span class=\"token punctuation\">.</span>rows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> image<span class=\"token punctuation\">.</span>cols<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>uchar<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//识别车牌字符</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">License_Recognition</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>License<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>Character_ROI<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>result_index<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring filename <span class=\"token operator\">=</span> <span class=\"token string\">\"data/\"</span><span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span>Mat<span class=\"token operator\">&gt;</span>dataset<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Read_Data</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Character_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tMat roi_gray<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>Character_ROI<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mat<span class=\"token punctuation\">,</span> roi_gray<span class=\"token punctuation\">,</span> COLOR_BGR2GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tMat roi_thresh<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>roi_gray<span class=\"token punctuation\">,</span> roi_thresh<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> THRESH_BINARY <span class=\"token operator\">|</span> THRESH_OTSU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span> minCount <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> dataset<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tMat temp_gray<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> temp_gray<span class=\"token punctuation\">,</span> COLOR_BGR2GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tMat temp_thresh<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>temp_gray<span class=\"token punctuation\">,</span> temp_thresh<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> THRESH_BINARY <span class=\"token operator\">|</span> THRESH_OTSU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">//计算两张图片的像素差，以此判断两张图片是否相同</span>\n\t\t\tMat dst<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">absdiff</span><span class=\"token punctuation\">(</span>roi_thresh<span class=\"token punctuation\">,</span> temp_thresh<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token function\">pixCount</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> minCount<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tminCount <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n\t\t\t\tindex <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\t\t\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tresult_index<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//显示最终效果</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Draw_Result</span><span class=\"token punctuation\">(</span>Mat src<span class=\"token punctuation\">,</span> License <span class=\"token operator\">&amp;</span>License_ROI<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>License<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>Character_ROI<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>result_index<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> License_ROI<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">,</span> <span class=\"token function\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span>data_name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Read_Data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data_name.txt\"</span><span class=\"token punctuation\">,</span> data_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Character_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> data_name<span class=\"token punctuation\">[</span>result_index<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//putText 中文显示会乱码，所以采用下面代码</span>\n\t\tCvxText <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C://Windows/Fonts/方正粗黑宋简体.ttf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//字体</span>\n\t\tstring str <span class=\"token operator\">=</span> data_name<span class=\"token punctuation\">[</span>result_index<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//string 转 char</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>msg <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tIplImage <span class=\"token operator\">*</span>temp<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//Mat 转 IplImage</span>\n\t\ttemp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">IplImage</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttext<span class=\"token punctuation\">.</span><span class=\"token function\">putText</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span>License_ROI<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> Character_ROI<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> License_ROI<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> Character_ROI<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n\tMat src <span class=\"token operator\">=</span> <span class=\"token function\">imread</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"car.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"No image!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tLicense License_ROI<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Get_License_ROI</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> License_ROI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tvector<span class=\"token operator\">&lt;</span>License<span class=\"token operator\">&gt;</span>Character_ROI<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Get_Character_ROI</span><span class=\"token punctuation\">(</span>License_ROI<span class=\"token punctuation\">,</span> Character_ROI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span>result_index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">License_Recognition</span><span class=\"token punctuation\">(</span>Character_ROI<span class=\"token punctuation\">,</span> result_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">Draw_Result</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> License_ROI<span class=\"token punctuation\">,</span> Character_ROI<span class=\"token punctuation\">,</span>result_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"未能识别字符！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"未能切割出字符！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"未定位到车牌位置！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token function\">imshow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">waitKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_706\"></a>六、源码—版本二</h1>\n<p>版本二：很多小伙伴向我反馈由于vs、opencv版本问题，利用putText显示中文会出现各种各样的错误。故在这里提供一个putText不显示中文的版本，所以freetype库也不用配置了，直接就可以运行了。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;opencv2/opencv.hpp&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;fstream&gt;</span>   <span class=\"token comment\">//文本读写</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h&gt;</span> <span class=\"token comment\">//控制台输出中文乱码</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> cv<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//自定义车牌结构体</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">License</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tMat mat<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//ROI图片</span>\n\tRect rect<span class=\"token punctuation\">;</span> <span class=\"token comment\">//ROI所在矩形</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//获取车牌所在ROI区域--车牌定位</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Get_License_ROI</span><span class=\"token punctuation\">(</span>Mat src<span class=\"token punctuation\">,</span> License <span class=\"token operator\">&amp;</span>License_ROI<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tMat gray<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> gray<span class=\"token punctuation\">,</span> COLOR_BGR2GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tMat thresh<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>gray<span class=\"token punctuation\">,</span> thresh<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> THRESH_BINARY_INV <span class=\"token operator\">|</span> THRESH_OTSU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//使用形态学开操作去除一些小轮廓</span>\n\tMat kernel <span class=\"token operator\">=</span> <span class=\"token function\">getStructuringElement</span><span class=\"token punctuation\">(</span>MORPH_RECT<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMat open<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">morphologyEx</span><span class=\"token punctuation\">(</span>thresh<span class=\"token punctuation\">,</span> open<span class=\"token punctuation\">,</span> MORPH_OPEN<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//使用 RETR_EXTERNAL 找到最外轮廓</span>\n\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">&gt;&gt;</span>contours<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">findContours</span><span class=\"token punctuation\">(</span>open<span class=\"token punctuation\">,</span> contours<span class=\"token punctuation\">,</span> RETR_EXTERNAL<span class=\"token punctuation\">,</span> CHAIN_APPROX_SIMPLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">&gt;&gt;</span><span class=\"token function\">conPoly</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> contours<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">double</span> area <span class=\"token operator\">=</span> <span class=\"token function\">contourArea</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">double</span> peri <span class=\"token operator\">=</span> <span class=\"token function\">arcLength</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//根据面积筛选出可能属于车牌区域的轮廓</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>area <span class=\"token operator\">&gt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//使用多边形近似，进一步确定车牌区域轮廓</span>\n\t\t\t<span class=\"token function\">approxPolyDP</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> conPoly<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.02</span><span class=\"token operator\">*</span>peri<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>conPoly<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t\t\t\t<span class=\"token comment\">//计算矩形区域宽高比</span>\n\t\t\t\tRect box <span class=\"token operator\">=</span> <span class=\"token function\">boundingRect</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">double</span> ratio <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ratio <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> ratio <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">//截取ROI区域</span>\n\t\t\t\t\tRect rect <span class=\"token operator\">=</span> <span class=\"token function\">boundingRect</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tLicense_ROI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token function\">src</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rect <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>License_ROI<span class=\"token punctuation\">.</span>mat<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//获取车牌每一个字符ROI区域</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Get_Character_ROI</span><span class=\"token punctuation\">(</span>License <span class=\"token operator\">&amp;</span>License_ROI<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>License<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>Character_ROI<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tMat gray<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>License_ROI<span class=\"token punctuation\">.</span>mat<span class=\"token punctuation\">,</span> gray<span class=\"token punctuation\">,</span> COLOR_BGR2GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tMat thresh<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>gray<span class=\"token punctuation\">,</span> thresh<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> THRESH_BINARY <span class=\"token operator\">|</span> THRESH_OTSU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tMat kernel <span class=\"token operator\">=</span> <span class=\"token function\">getStructuringElement</span><span class=\"token punctuation\">(</span>MORPH_RECT<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMat close<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">morphologyEx</span><span class=\"token punctuation\">(</span>thresh<span class=\"token punctuation\">,</span> close<span class=\"token punctuation\">,</span> MORPH_CLOSE<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">&gt;&gt;</span>contours<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">findContours</span><span class=\"token punctuation\">(</span>close<span class=\"token punctuation\">,</span> contours<span class=\"token punctuation\">,</span> RETR_EXTERNAL<span class=\"token punctuation\">,</span> CHAIN_APPROX_SIMPLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> contours<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">double</span> area <span class=\"token operator\">=</span> <span class=\"token function\">contourArea</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//由于我们筛选出来的轮廓是无序的，故后续我们需要将字符重新排序</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>area <span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tRect rect <span class=\"token operator\">=</span> <span class=\"token function\">boundingRect</span><span class=\"token punctuation\">(</span>contours<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//计算外接矩形宽高比</span>\n\t\t\t<span class=\"token keyword\">double</span> ratio <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ratio <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tMat roi <span class=\"token operator\">=</span> License_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">mat</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>roi<span class=\"token punctuation\">,</span> roi<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> INTER_LINEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t \n\t\t\t\tCharacter_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> roi <span class=\"token punctuation\">,</span>rect <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//将筛选出来的字符轮廓 按照其左上角点坐标从左到右依次顺序排列</span>\n\t<span class=\"token comment\">//冒泡排序</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Character_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> Character_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Character_ROI<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&gt;</span> Character_ROI<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tLicense temp <span class=\"token operator\">=</span> Character_ROI<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tCharacter_ROI<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Character_ROI<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tCharacter_ROI<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Character_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//从txt文件中读取中文，防止乱码</span>\nstring <span class=\"token function\">UTF8ToGB</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring result<span class=\"token punctuation\">;</span>\n\tWCHAR <span class=\"token operator\">*</span>strSrc<span class=\"token punctuation\">;</span>\n\tLPSTR szRes<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//获得临时变量的大小</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token function\">MultiByteToWideChar</span><span class=\"token punctuation\">(</span>CP_UTF8<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstrSrc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> WCHAR<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MultiByteToWideChar</span><span class=\"token punctuation\">(</span>CP_UTF8<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> strSrc<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//获得临时变量的大小</span>\n\ti <span class=\"token operator\">=</span> <span class=\"token function\">WideCharToMultiByte</span><span class=\"token punctuation\">(</span>CP_ACP<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> strSrc<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tszRes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> CHAR<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">WideCharToMultiByte</span><span class=\"token punctuation\">(</span>CP_ACP<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> strSrc<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> szRes<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tresult <span class=\"token operator\">=</span> szRes<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>strSrc<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>szRes<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//读取文件  图片</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Read_Data</span><span class=\"token punctuation\">(</span>string filename<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span>Mat<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>dataset<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\t\t\n\tvector<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span>imagePathList<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glob</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> imagePathList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imagePathList<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> imagePathList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tMat image <span class=\"token operator\">=</span> <span class=\"token function\">imread</span><span class=\"token punctuation\">(</span>imagePathList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">,</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> INTER_LINEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdataset<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//读取文件 标签</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Read_Data</span><span class=\"token punctuation\">(</span>string filename<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>data_name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tfstream fin<span class=\"token punctuation\">;</span>\n\tfin<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"can not open the file!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tstring s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tstring str <span class=\"token operator\">=</span> <span class=\"token function\">UTF8ToGB</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdata_name<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tfin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\">//计算像素点个数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">pixCount</span><span class=\"token punctuation\">(</span>Mat image<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span><span class=\"token function\">channels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> image<span class=\"token punctuation\">.</span>rows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> image<span class=\"token punctuation\">.</span>cols<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>uchar<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//识别车牌字符</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">License_Recognition</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>License<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>Character_ROI<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>result_index<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring filename <span class=\"token operator\">=</span> <span class=\"token string\">\"data/\"</span><span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span>Mat<span class=\"token operator\">&gt;</span>dataset<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Read_Data</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Character_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tMat roi_gray<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>Character_ROI<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mat<span class=\"token punctuation\">,</span> roi_gray<span class=\"token punctuation\">,</span> COLOR_BGR2GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tMat roi_thresh<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>roi_gray<span class=\"token punctuation\">,</span> roi_thresh<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> THRESH_BINARY <span class=\"token operator\">|</span> THRESH_OTSU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span> minCount <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> dataset<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tMat temp_gray<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> temp_gray<span class=\"token punctuation\">,</span> COLOR_BGR2GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tMat temp_thresh<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>temp_gray<span class=\"token punctuation\">,</span> temp_thresh<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> THRESH_BINARY <span class=\"token operator\">|</span> THRESH_OTSU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">//计算两张图片的像素差，以此判断两张图片是否相同</span>\n\t\t\tMat dst<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">absdiff</span><span class=\"token punctuation\">(</span>roi_thresh<span class=\"token punctuation\">,</span> temp_thresh<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token function\">pixCount</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> minCount<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tminCount <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n\t\t\t\tindex <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\t\t\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tresult_index<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//显示最终效果</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Draw_Result</span><span class=\"token punctuation\">(</span>Mat src<span class=\"token punctuation\">,</span> License <span class=\"token operator\">&amp;</span>License_ROI<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>License<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>Character_ROI<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>result_index<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> License_ROI<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">,</span> <span class=\"token function\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span>data_name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Read_Data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data_name.txt\"</span><span class=\"token punctuation\">,</span> data_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Character_ROI<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//putText 中文显示会乱码，不进行中文显示</span>\n\t\tstring str <span class=\"token operator\">=</span> data_name<span class=\"token punctuation\">[</span>result_index<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//string 转 char</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">putText</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span>License_ROI<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> Character_ROI<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> License_ROI<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> Character_ROI<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> FONT_HERSHEY_PLAIN<span class=\"token punctuation\">,</span> <span class=\"token function\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n\tMat src <span class=\"token operator\">=</span> <span class=\"token function\">imread</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"car.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"No image!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tLicense License_ROI<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Get_License_ROI</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> License_ROI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tvector<span class=\"token operator\">&lt;</span>License<span class=\"token operator\">&gt;</span>Character_ROI<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Get_Character_ROI</span><span class=\"token punctuation\">(</span>License_ROI<span class=\"token punctuation\">,</span> Character_ROI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span>result_index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">License_Recognition</span><span class=\"token punctuation\">(</span>Character_ROI<span class=\"token punctuation\">,</span> result_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">Draw_Result</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> License_ROI<span class=\"token punctuation\">,</span> Character_ROI<span class=\"token punctuation\">,</span>result_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"未能识别字符！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"未能切割出字符！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"未定位到车牌位置！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">imshow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">waitKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"1_1035\"></a>1、效果显示</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\73a7fe963ab64c2493a27c439156870e.png\"/></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_1042\"></a>总结</h1>\n<p><font color=\"#999AAA\">本文使用OpenCV C++进行车牌号识别，关键步骤有以下几点。<br/> 1、车牌定位。案例需求是进行车牌识别。那么我们就得知道车牌在什么位置。将车牌找到之后，需要将车牌切割出来，作为一个整体进行下面工作。<br/> 2、字符分割。我们得到了车牌，需要将车牌上的字符一一分割出来才能进行下面的识别工作。有个小细节就是需要将字符重新排序。<br/> 3、字符识别。我们将得到的字符与我们准备好的模板一一进行匹配。匹配算法有很多，大家可以自行尝试。我这里使用的是基于两幅图像的像素差进行图像比对。</font></p>\n<p>需要说明的是：本案例是根据特定图像、特定需求设定的算法。并不具有鲁棒性。所有在图像预处理阶段很重要。我们需要提取出我们需要的图像特征，这样才能够进行后续的工作。所以本案例也只是使用传统的图像处理手段实现车牌识别功能。将大致流程作了一个说明，这里只提供一个参考作用！！！</p>\n<p><strong>注：关于有很多小伙伴提出的问题“ “ft2build.h\": No such file or directory”。这是因为由于OpenCV putText 不支持显示中文，在本案例中，我为了显示中文，故编译了freetype库。如果大家觉得有需要的话，可以自行编译配置环境。如果觉得麻烦的话，将源码中的中文显示函数注释掉也是可以直接运行的。</strong></p>\n<h1><a id=\"freetype_1052\"></a>freetype库配置</h1>\n<p><strong>freetype库下载地址：<a href=\"http://download.savannah.gnu.org/releases/freetype/\">http://download.savannah.gnu.org/releases/freetype/</a></strong></p>\n<p><strong>下载解压后，选择合适vs版本进行编译就可以啦！！！</strong><br/> <img alt=\"请添加图片描述\" src=\"image\\25ab54d959304cbca55485a703532f5c.png\"/><br/> <img alt=\"请添加图片描述\" src=\"image\\c93eb37ce01d4107b76bd4e384848361.png\"/><br/> <img alt=\"请添加图片描述\" src=\"image\\598cbec5dfab4c92865d00defcd40f9a.png\"/><br/> <img alt=\"请添加图片描述\" src=\"image\\0956f6afdbb4412fb21b4e94c2097cd8.png\"/><br/> <strong>编译好之后，像配置OpenCV环境一样，将include、lib文件配置在vs环境中就可以了</strong></p>\n<p><strong>欢迎大家点赞、关注，可私信找我领取完整源码、模板图像以及测试图像！！！</strong></p>\n<p><strong>欢迎大家交流学习！！！</strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}