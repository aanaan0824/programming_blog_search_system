{"blogid": "124159977", "writerAge": "码龄12年", "writerBlogNum": "236", "writerCollect": "444", "writerComment": "90", "writerFan": "60", "writerGrade": "6级", "writerIntegral": "5222", "writerName": "liberg", "writerProfileAdress": "writer_image\\profile_124159977.jpg", "writerRankTotal": "6699", "writerRankWeekly": "20160", "writerThumb": "257", "writerVisitNum": "417362", "blog_read_count": "1249", "blog_time": "已于 2022-04-14 11:19:46 修改", "blog_title": "Rust类型转换", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><ul><li><a href=\"#as_6\">原生数值类型借助`as`关键字进行类型转换</a></li><li><a href=\"#_25\">字符串和数值类型的转换</a></li><li><a href=\"#Stringstr_37\">String和&amp;str的转换</a></li><li><a href=\"#trait_From_T__Into_T__50\">trait From&lt; T &gt; 和Into&lt; T &gt;</a></li><li><a href=\"#AsRef__stdopsDeref_92\">AsRef 和 std::ops::Deref</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<p>Rust是强类型的语言，不存在隐式类型转换。<br/> 不过幸好，Rust设计了强大的类型转换机制。</p>\n<h3><a id=\"as_6\"></a>原生数值类型借助<code>as</code>关键字进行类型转换</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// as关键字用于基础原生primitive类型的转换</span>\n<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// i32 -&gt; u8</span>\n<span class=\"token keyword\">let</span> b <span class=\"token punctuation\">:</span> <span class=\"token keyword\">u8</span> <span class=\"token operator\">=</span> i <span class=\"token keyword\">as</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 超出u8范围的，不能转换</span>\n<span class=\"token comment\">// 编译报错：literal out of range for `u8`</span>\n<span class=\"token comment\">// let b = 1000 as u8;</span>\n\n<span class=\"token comment\">// u8 -&gt; i32</span>\n<span class=\"token keyword\">let</span> i <span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> <span class=\"token number\">10u8</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// char -&gt; u8</span>\n<span class=\"token keyword\">let</span> i<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u8</span> <span class=\"token operator\">=</span> <span class=\"token char\">'X'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// i32类型没有sqrt()方法</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">2f32</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4i32</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">f32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_25\"></a>字符串和数值类型的转换</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">//字符串转int等数值类型</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span><span class=\"token keyword\">u8</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u8</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 字符串转u8类型的切片</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 数值类型转String</span>\n<span class=\"token keyword\">let</span> s<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token number\">123i32</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token number\">123u8</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"Stringstr_37\"></a>String和&amp;str的转换</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// &amp;str(字符串切片)转String</span>\n<span class=\"token comment\">// 下面4种方式，本质都是掉clone()方法</span>\n<span class=\"token comment\">// 一般使用第2/3种即可</span>\n<span class=\"token keyword\">let</span> s1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s2<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s3<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s4<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// String转&amp;str</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"trait_From_T__Into_T__50\"></a>trait From&lt; T &gt; 和Into&lt; T &gt;</h3>\n<p>这两个trait在标准库中的定义为：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 实现此trait的类型X，能够通过调用X::from(t)从T类型的t得到一个X类型的对象</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">From</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Sized</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token attribute attr-name\">#[must_use]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">from</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 实现此trait的对象能够将自身转换为T类型，通过调用自身的into()方法</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">Into</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Sized</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token attribute attr-name\">#[must_use]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">into</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>一般来说，我们应该尽量优先选择实现 <code>From&lt;T&gt;</code> 而不是 <code>Into&lt;T&gt;</code> ，因为当你为 <code>U</code> 实现 <code>From&lt;T&gt;</code> ，这也意味着你同时为 <code>T</code>隐式实现了 <code>Into&lt;U&gt;</code> 。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">//From&lt;T&gt; trait 和 Into&lt;T&gt; trait</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Point</span> <span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">Self</span><span class=\"token punctuation\">{<!-- --></span>\n            x<span class=\"token punctuation\">,</span>y\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">From</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Point</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">from</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{},{}\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> point1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> point2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> point_str1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>point1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> point_str2<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> point2<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>point_str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//20,30</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>point_str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//20,30</span>\n</code></pre>\n<p>当转换不能100%确保成功的话，应该使用<code>TryFrom&lt;T&gt;</code>和<code>TryInto&lt;T&gt;</code>，运行转换失败时返回一个错误类型。</p>\n<h3><a id=\"AsRef__stdopsDeref_92\"></a>AsRef 和 std::ops::Deref</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">AsRef</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span><span class=\"token class-name\">Sized</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/// Performs the conversion.</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">as_ref</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">Deref</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/// The resulting type after dereferencing.</span>\n    <span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Target</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span><span class=\"token class-name\">Sized</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/// Dereferences the value.</span>\n    <span class=\"token attribute attr-name\">#[must_use]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">deref</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Target</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}