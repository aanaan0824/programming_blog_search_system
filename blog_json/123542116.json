{"blogid": "123542116", "writerAge": "码龄1年", "writerBlogNum": "18", "writerCollect": "786", "writerComment": "508", "writerFan": "3388", "writerGrade": "5级", "writerIntegral": "1799", "writerName": "琅時壹", "writerProfileAdress": "writer_image\\profile_123542116.jpg", "writerRankTotal": "38342", "writerRankWeekly": "162012", "writerThumb": "740", "writerVisitNum": "32940", "blog_read_count": "2630", "blog_time": "于 2022-03-17 12:27:18 发布", "blog_title": "都说C++难，那是没有学习数据结构【单链表】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>(❁´◡`❁)<br/> 单链表</p>\n<p></p>\n<div class=\"toc\">\n<h3>可有可无的目录</h3>\n<ul><li><a href=\"#_7\">前言</a></li><li><a href=\"#_16\">一、链表是什么</a></li><li><a href=\"#_23\">链表的分类</a></li><li><a href=\"#_35\">二、链表的实现</a></li><li><a href=\"#_284\">总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_7\"></a>前言</h1>\n<p>上篇<a href=\"https://blog.csdn.net/qq_62852431/article/details/123521031?spm=1001.2014.3001.5502\">顺序表</a>结尾了解了顺序表的诸多缺点，链表的特性很好的解决了这些问题，本期我们来认识单链表。<br/> <img alt=\"请添加图片描述\" src=\"https://img-blog.csdnimg.cn/06b6b182565b41d8a285451f9eb3ac30.gif\"/></p>\n<hr/>\n<h1><a id=\"_16\"></a>一、链表是什么</h1>\n<p>链表是一种<strong>物理存储结构上非连续</strong>、非顺序的存储结构，数据元素的<strong>逻辑顺序</strong>是通过链表中的<strong>指针链接</strong>依次实现的。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\bc81226b4a9844d0a5d593d412f84c0d.png\"/></p>\n<ol><li>由图，链式结构在逻辑上是连续的，但是物理上不一定连续</li><li>显示中结点一般是从堆上申请出来的</li><li>从堆上申请的空间，是按照一定的策略划分的，两次申请的空间，可能连续，可能不连续，见<a href=\"https://blog.csdn.net/qq_62852431/article/details/123521031?spm=1001.2014.3001.5502\">顺序表</a></li><li><img alt=\"在这里插入图片描述\" src=\"image\\4be24a3622564ab79b146a428c420aaf.png\"/></li></ol>\n<h1><a id=\"_23\"></a>链表的分类</h1>\n<p>链表也可以分为很多种</p>\n<pre><code>1.  单向或者双向\n2. 带头或者不带头\n3. 循环或非循环\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fa1218732f8546fdbbaa5f7ed3d56c68.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\4850efd7e5de4c719870b6c2e716eb7a.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\23d1261a153e4ba087f60d7f3db820a7.png\"/><br/> 我们最常用的还是<strong>无头单向非循环链表</strong>和<strong>带头双向循环链表</strong><br/> 本篇我们实现无头单向非循环链表增删查改</p>\n<h1><a id=\"_35\"></a>二、链表的实现</h1>\n<p>基本结点结构</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> SLTDateType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> SListNode\n<span class=\"token punctuation\">{<!-- --></span>\nSLTDateType data<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> SListNode<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>SListNode<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>头文件</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//llist.h</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> SLTDateType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> SListNode\n<span class=\"token punctuation\">{<!-- --></span>\n\tSLTDateType data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> SListNode<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>SListNode<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 动态申请一个节点</span>\nSListNode<span class=\"token operator\">*</span> <span class=\"token function\">BuySListNode</span><span class=\"token punctuation\">(</span>SLTDateType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表打印</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPrint</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表尾插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPushBack</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">,</span> SLTDateType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表的头插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPushFront</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">,</span> SLTDateType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表的尾删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPopBack</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表头删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPopFront</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表查找</span>\nSListNode<span class=\"token operator\">*</span> <span class=\"token function\">SListFind</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> plist<span class=\"token punctuation\">,</span> SLTDateType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表在pos位置之后插入x</span>\n<span class=\"token comment\">// 分析思考为什么不在pos位置之前插入？</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListInsertAfter</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">,</span> SLTDateType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表删除pos位置之后的值</span>\n<span class=\"token comment\">// 分析思考为什么不删除pos位置？</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListEraseAfter</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表的销毁</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListDestory</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>动态申请一个节点<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3bcb3f25a16a4cd39623ae41015483c4.png\"/></li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 动态申请一个节点</span>\nSListNode<span class=\"token operator\">*</span> <span class=\"token function\">BuySListNode</span><span class=\"token punctuation\">(</span>SLTDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newnode <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//申请失败</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc fail\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tnewnode<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t\tnewnode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> newnode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>                     \n</code></pre>\n<ul><li>单链表打印<br/> 链表单个结点中，data存储数据，next存储下一个结点的地址，可以通过next访问下一个结点<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5487a3bf21e041b597c1355df0d74c97.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\f5c111ed50944289b0ca45ce9d4f47f9.png\"/></li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 单链表打印</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPrint</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> plist<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> plist<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d-&gt;\"</span><span class=\"token punctuation\">,</span> cur<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//访问下一个结点</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NULL\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>单链表尾插<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2822958937024fbcb2b41098832616c1.png\"/><br/> 这里传入了头结点的地址的指针，是因为有可能要改变头结点的情况，传址调用幻术，如果只传入*plist，相当于只改变形参，实参不会有实际改变，通过pplist可以解决这个问题<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f2ff6390c2be437ea9ef1963c0a8e416.png\"/></li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 单链表尾插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPushBack</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">,</span> SLTDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token function\">BuySListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pplist <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//空链表</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token operator\">*</span>pplist <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tSListNode<span class=\"token operator\">*</span> tail <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">;</span><span class=\"token comment\">//遍历至最后插入</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\ttail <span class=\"token operator\">=</span> tail<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\ttail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>单链表的尾删<br/> 一前一后遍历，找到空后直接free（tail），将prev-&gt;next置空即可<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7aa4ee470249435c99fb9be8fa451188.png\"/></li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 单链表的尾删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPopBack</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pplist <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//空链表，无需删除</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tSListNode<span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\tSListNode<span class=\"token operator\">*</span> tail <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tprev <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span>\n\t\t\t\ttail <span class=\"token operator\">=</span> tail<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\ttail <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t\tprev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>单链表的头插<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d125f3bda0a1419483de024ba51b7d9f.png\"/><br/> 有点绕，要多想想</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 单链表的头插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPushFront</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">,</span> SLTDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tSListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token function\">BuySListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>pplist <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>单链表头删<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ba1ade0dc4da47fa8e4b2eb487333029.png\"/><br/> 比较简单</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 单链表头删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPopFront</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pplist <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//链表为空</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tSListNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">*</span>pplist <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li></li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 单链表查找</span>\n遍历即可\nSListNode<span class=\"token operator\">*</span> <span class=\"token function\">SListFind</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> plist<span class=\"token punctuation\">,</span> SLTDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> plist<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> x<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tretuen <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>*单链表在pos位置之后插入x<br/> 为什么不在pos之前插入，由于我们是单向链表，需要从头遍历查找pos，如果在pos之前插入，找到pos还需找到pos之前的地址，对所传参数不友好，所以我们一般在后插入<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a72d8515e8fe4e39bd4d278d71ba16e6.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//单链表在pos位置之后插入x</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListInsertAfter</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">,</span> SLTDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tSListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token function\">BuySListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\tpos<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>单链表删除pos位置之后的值<br/> 为什么不删除pos位置，同上，在逻辑上和传参不友好.<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ae2c891ef5aa45f8bfd70aa8eefc0582.png\"/></li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 单链表删除pos位置之后的值</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListEraseAfter</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tSListNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tpos<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnext <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>单链表的销毁<br/> 链表不像顺序表连续删头就可以，由于链表是一个一个分散的结点，需要逐一删除<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d4dfc0e75fd44e099a9e3b1329d09d1a.png\"/></li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 单链表的销毁</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListDestory</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tSListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tSListNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">*</span>pplist <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_284\"></a>总结</h1>\n<p>链表相比但链表难度提升不少，对c的掌握也变大，不清晰的地方要多想多画图。还请斧正</p>\n<p><img alt=\"请添加图片描述\" src=\"https://img-blog.csdnimg.cn/3eb570a99092461cb9d5b2f8ba953561.gif\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}