{"blogid": "126588149", "writerAge": "码龄3年", "writerBlogNum": "180", "writerCollect": "1731", "writerComment": "1685", "writerFan": "2712", "writerGrade": "6级", "writerIntegral": "4860", "writerName": "前端杂货铺", "writerProfileAdress": "writer_image\\profile_126588149.jpg", "writerRankTotal": "3710", "writerRankWeekly": "50", "writerThumb": "1124", "writerVisitNum": "96668", "blog_read_count": "1101", "blog_time": "已于 2022-08-31 18:34:01 修改", "blog_title": "web前端面试高频考点——Vue面试题", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>以下问题的详细解答，参照下面链接：</strong></p>\n<table><thead><tr><th>内容</th><th>参考链接</th></tr></thead><tbody><tr><td>Vue基本使用</td><td><a href=\"https://blog.csdn.net/qq_45902692/article/details/126415651?spm=1001.2014.3001.5501\">Vue的基本使用（一文掌握Vue最基础的知识点）</a></td></tr><tr><td>Vue通信和高级特性</td><td><a href=\"https://blog.csdn.net/qq_45902692/article/details/126453192?spm=1001.2014.3001.5501\">Vue组件间的通信及高级特性（多种组件间的通信、自定义v-model、nextTick、插槽）</a></td></tr><tr><td>Vue高级特性</td><td><a href=\"https://blog.csdn.net/qq_45902692/article/details/126478821?spm=1001.2014.3001.5501\">Vue的高级特性（动态组件、异步加载、keep-alive、mixin、Vuex、Vue-Router）</a></td></tr><tr><td>Vue原理1</td><td><a href=\"https://blog.csdn.net/qq_45902692/article/details/126516912?spm=1001.2014.3001.5501\">Vue原理（理解MVVM模型、深度/监听data变化、监听数组变化、深入了解虚拟DOM）</a></td></tr><tr><td>Vue原理2</td><td><a href=\"https://blog.csdn.net/qq_45902692/article/details/126565768?spm=1001.2014.3001.5501\">Vue原理（diff算法、模板编译、组件渲染和更新、JS实现路由）</a></td></tr></tbody></table>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><ul><li><a href=\"#1vshow__vif__17\">1、v-show 和 v-if 的区别</a></li><li><a href=\"#2_vfor__key_21\">2、为何在 v-for 中使用 key</a></li><li><a href=\"#3_Vue__25\">3、描述 Vue 组件生命周期（父子组件）</a></li><li><a href=\"#4Vue__32\">4、Vue 组件如何通讯（常见）</a></li><li><a href=\"#5_37\">5、描述组件渲染和更新的过程</a></li><li><a href=\"#6_vmodel__41\">6、双向数据绑定 v-model 的实现原理</a></li><li><a href=\"#7MVVM_45\">7、对MVVM的理解</a></li><li><a href=\"#8computed__47\">8、computed 的特点</a></li><li><a href=\"#9_data__51\">9、为何组件 data 必须是一个函数</a></li><li><a href=\"#10ajax__56\">10、ajax 请求应该放在哪个生命周期</a></li><li><a href=\"#11_props__61\">11、如何将组件所有 props 传递给子组件</a></li><li><a href=\"#12_vmodel_66\">12、如何自己实现 v-model</a></li><li><a href=\"#13_90\">13、多个组件有相同的逻辑，如何抽离？</a></li><li><a href=\"#14_94\">14、何时使用异步组件？</a></li><li><a href=\"#15_keepalive_98\">15、何时使用 keep-alive</a></li><li><a href=\"#16_beforeDestory_103\">16、何时需要使用 beforeDestory</a></li><li><a href=\"#17_108\">17、什么是作用域插槽</a></li><li><a href=\"#18Vuex__action__mutation__134\">18、Vuex 中 action 和 mutation 有什么区别</a></li><li><a href=\"#19Vuerouter__139\">19、Vue-router 常用的路由模式</a></li><li><a href=\"#20_Vuerouter__143\">20、如何配置 Vue-router 异步加载</a></li><li><a href=\"#21_vnode__DOM__147\">21、用 vnode 描述一个 DOM 结构</a></li><li><a href=\"#22_data__API__185\">22、监听 data 变化的核心 API 是什么</a></li><li><a href=\"#23Vue__190\">23、Vue 如何监听数组变化</a></li><li><a href=\"#24_195\">24、描述响应式原理</a></li><li><a href=\"#25diff__199\">25、diff 算法的时间复杂度</a></li><li><a href=\"#26_diff__202\">26、简述 diff 算法过程</a></li><li><a href=\"#27Vue_nextTick__207\">27、Vue 为何是异步渲染，$nextTick 何用？</a></li><li><a href=\"#28Vue__211\">28、Vue 常见性能优化方式</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h3><a id=\"1vshow__vif__17\"></a>1、v-show 和 v-if 的区别</h3>\n<ul><li>v-show 通过 CSS display 控制显示和隐藏</li><li>v-if 组件真正的渲染和销毁，而不是显示和隐藏</li><li>频繁切换显示状态用 v-show，否则用 v-if</li></ul>\n<h3><a id=\"2_vfor__key_21\"></a>2、为何在 v-for 中使用 key</h3>\n<ul><li>必须用 key，且不能是 index 和 random</li><li>diff 算法中通过 tag 和 key 来判断，是否是 sameNode</li><li>减少渲染次数，提升渲染性能</li></ul>\n<h3><a id=\"3_Vue__25\"></a>3、描述 Vue 组件生命周期（父子组件）</h3>\n<ul><li> <p>单组件生命周期图（摘自官网）<br/> <img alt=\"在这里插入图片描述\" src=\"image\\818683df27a844a08e3ff955d9d907c0.png\"/></p> </li><li> <p>父子组件生命周期关系</p> </li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2c0553eaf3924af7bb1f101382ac8979.png\"/></p>\n<h3><a id=\"4Vue__32\"></a>4、Vue 组件如何通讯（常见）</h3>\n<ul><li>父子组件 props 和 this.$emit</li><li>自定义事件 <code>event.$on</code> <code>event.$off</code> <code>event.$emit</code></li><li>vuex</li></ul>\n<h3><a id=\"5_37\"></a>5、描述组件渲染和更新的过程</h3>\n<ul><li>vue原理的三大模块：响应式、vdom和diff、模板编译</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d4241b45763042a788ab9e822515c2cb.png\"/></p>\n<h3><a id=\"6_vmodel__41\"></a>6、双向数据绑定 v-model 的实现原理</h3>\n<ul><li>input 元素的 value = this.name</li><li>绑定 input 事件 this.name = $event.target.value</li><li>data 更新触发 re-render</li></ul>\n<h3><a id=\"7MVVM_45\"></a>7、对MVVM的理解</h3>\n<h3><a id=\"8computed__47\"></a>8、computed 的特点</h3>\n<ul><li>缓存，data 不变不会重新计算</li><li>提高性能</li></ul>\n<h3><a id=\"9_data__51\"></a>9、为何组件 data 必须是一个函数</h3>\n<ul><li>实际上，<code>.vue</code> 文件被编写出来其实是一个 class 类</li><li>在每个地方使用组件的时候，相当于是实例化</li><li>在实例化的时候去执行 data，如果 data 不是函数的话，那么每一个组件实例的数据就共享了</li></ul>\n<h3><a id=\"10ajax__56\"></a>10、ajax 请求应该放在哪个生命周期</h3>\n<ul><li>mounted（组件渲染完成，DOM加载完成）</li><li>JS 是单线程的，ajax 异步获取数据</li><li>放在 mounted 之前没有用，只会让逻辑更加混乱</li></ul>\n<h3><a id=\"11_props__61\"></a>11、如何将组件所有 props 传递给子组件</h3>\n<ul><li>$props</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>User v<span class=\"token operator\">-</span>bind <span class=\"token operator\">=</span> <span class=\"token string\">\"$props\"</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"12_vmodel_66\"></a>12、如何自己实现 v-model</h3>\n<ul><li>使用 <code>:value</code> 而没用 v-model</li><li>change 和 model.event 名字对应起来即可</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>input\n    type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n    <span class=\"token operator\">:</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n    @input<span class=\"token operator\">=</span><span class=\"token string\">\"$emit('change', $event.target.value)\"</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">prop</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//对应到 props text</span>\n    <span class=\"token literal-property property\">event</span><span class=\"token operator\">:</span> <span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"13_90\"></a>13、多个组件有相同的逻辑，如何抽离？</h3>\n<p><a href=\"https://blog.csdn.net/qq_45902692/article/details/126478821?spm=1001.2014.3001.5501\">参考链接</a></p>\n<ul><li>mixin</li><li>以及 mixin 的一些缺点</li></ul>\n<h3><a id=\"14_94\"></a>14、何时使用异步组件？</h3>\n<ul><li>加载大组件</li><li>路由异步加载</li></ul>\n<h3><a id=\"15_keepalive_98\"></a>15、何时使用 keep-alive</h3>\n<ul><li>缓存组件，不需要重复渲染</li><li>如多个静态 tab 页的切换</li><li>优化性能</li></ul>\n<h3><a id=\"16_beforeDestory_103\"></a>16、何时需要使用 beforeDestory</h3>\n<ul><li>绑定自定义事件 event.$off</li><li>清除定时器</li><li>绑定自定义的 DOM 事件，如 window scroll 等</li></ul>\n<h3><a id=\"17_108\"></a>17、什么是作用域插槽</h3>\n<ul><li>插槽的内容可能想要同时使用父组件域内和子组件域内的数据</li></ul>\n<p><mark>父组件：</mark></p>\n<ul><li>用父组件的 url &amp;&amp; 子组件的 title</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>ScopedSlot <span class=\"token operator\">:</span>url<span class=\"token operator\">=</span><span class=\"token string\">\"website.url\"</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>template v<span class=\"token operator\">-</span>slot<span class=\"token operator\">=</span><span class=\"token string\">\"slotProps\"</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> slotProps<span class=\"token punctuation\">.</span>slotData<span class=\"token punctuation\">.</span>title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ScopedSlot<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><mark>子组件：</mark></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>a <span class=\"token operator\">:</span>href<span class=\"token operator\">=</span><span class=\"token string\">\"url\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>slot <span class=\"token operator\">:</span>slotData<span class=\"token operator\">=</span><span class=\"token string\">\"website\"</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> website<span class=\"token punctuation\">.</span>subTitle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"18Vuex__action__mutation__134\"></a>18、Vuex 中 action 和 mutation 有什么区别</h3>\n<ul><li>action 中可以处理异步，mutation 不可以</li><li>mutation 做原子操作</li><li>action 可以整合多个 mutation</li></ul>\n<h3><a id=\"19Vuerouter__139\"></a>19、Vue-router 常用的路由模式</h3>\n<ul><li>hsah 模式</li><li>H5 histoty（需要服务器支持）</li><li>两者的比较</li></ul>\n<h3><a id=\"20_Vuerouter__143\"></a>20、如何配置 Vue-router 异步加载</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span> <span class=\"token string\">'./xxx'</span>\n</code></pre>\n<h3><a id=\"21_vnode__DOM__147\"></a>21、用 vnode 描述一个 DOM 结构</h3>\n<p><strong>DOM 结构</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"div1\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>vdom<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>ul style<span class=\"token operator\">=</span><span class=\"token string\">\"font-size: 20px\"</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span>a<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>vnode 形式</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'container'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'div1'</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">'vdom'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token string\">'font-size: 20px'</span><span class=\"token punctuation\">}</span>\n      <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">'a'</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"22_data__API__185\"></a>22、监听 data 变化的核心 API 是什么</h3>\n<ul><li>Object.defineProperty</li><li>以及深度监听、监听数组</li><li>但也有缺点</li></ul>\n<h3><a id=\"23Vue__190\"></a>23、Vue 如何监听数组变化</h3>\n<ul><li>Object.defineProperty 不能监听数组变化</li><li>重新定义原型，重写 push pop 等方法，实现监听</li><li>Proxy 可以原生支持监听数组变化</li></ul>\n<h3><a id=\"24_195\"></a>24、描述响应式原理</h3>\n<ul><li>监听 data 变化</li><li>组件渲染和更新的流程</li></ul>\n<h3><a id=\"25diff__199\"></a>25、diff 算法的时间复杂度</h3>\n<ul><li>O(n)</li><li>在 O（n^3）基础上做了一些调整</li></ul>\n<h3><a id=\"26_diff__202\"></a>26、简述 diff 算法过程</h3>\n<ul><li>patch(elem, vnode) 和 patch(vnode, newVnode)<br/> -patchVnode 和 addVnodes 和 removeVnodes</li><li>updateChildren（key 的重要性）</li></ul>\n<h3><a id=\"27Vue_nextTick__207\"></a>27、Vue 为何是异步渲染，$nextTick 何用？</h3>\n<ul><li>异步渲染（以及合并 data 修改），以提高渲染性能</li><li>$nextTick 在 DOM 更新完之后，触发回调</li></ul>\n<h3><a id=\"28Vue__211\"></a>28、Vue 常见性能优化方式</h3>\n<ul><li>合理使用 v-show 和 v-if</li><li>合理使用 computed</li><li>v-for 时加 key，以及避免和 v-if 同时使用</li><li>自定义事件、DOM 事件及时销毁</li><li>合理使用异步组件</li><li>合理使用 keep-alive</li><li>data 层级不要太深</li><li>使用 vue-loader 在开发环境做模板编译（预编译）</li><li>webpack 层面的优化</li><li>前端通用的性能优化，如图片懒加载</li></ul>\n<p><code>不积跬步无以至千里，不积小流无以成江海</code></p>\n<p><mark>点个关注不迷路，持续更新中…</mark></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}