{"blogid": "125416084", "writerAge": "码龄5年", "writerBlogNum": "4", "writerCollect": "14", "writerComment": "4", "writerFan": "1", "writerGrade": "1级", "writerIntegral": "73", "writerName": "你开心的样子我好喜欢", "writerProfileAdress": "writer_image\\profile_125416084.jpg", "writerRankTotal": "128799", "writerRankWeekly": "444095", "writerThumb": "5", "writerVisitNum": "7721", "blog_read_count": "1847", "blog_time": "已于 2022-06-23 11:04:45 修改", "blog_title": "关于Vue3使用axios的配置教程详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>1.安装</h1>\n<pre><code class=\"language-bash\">npm install --save axios vue-axios\n</code></pre>\n<h1>2.在src根目录创建service文件夹。然后创建axios.js</h1>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\c78824a78ced417e85894f16932037ef.png\"/></p>\n<h1>2.1在axios.js添加拦截器,请求拦截:initAxios.interceptors.request;响应拦截:initAxios.interceptors.response</h1>\n<pre><code>import axios from \"axios\";\n\nconst initAxios = axios.create({\n  timeout: 1800000//数据响应过期时间\n})\n\n//请求拦截器\ninitAxios.interceptors.request.use((config) =&gt; {\n  //在发送之前做点什么\n  return config\n}, (error) =&gt; {\n  //对请求错误做点什么\n  return error\n})\n\n//响应拦截器\ninitAxios.interceptors.response.use((response) =&gt; {\n  if (response.resultCode === 200 ) {\n    return response.data\n  } else {\n    return {resultCode: -1}\n  }\n})\n//导出\nexport default () =&gt; {\n  return initAxios\n}</code></pre>\n<p></p>\n<h1>3.在文件夹再创建一个service.js文件</h1>\n<pre><code>//引入封装好的 axios\nimport Axios from './axios'\n\n//实例化\nconst instance = Axios()\n\n//创建需要的请求方法:get post put delete\n//url:请求的接口地址\n//params:请求参数\n//headers:请求头\nexport default {\n  get(url, params, headers) {\n    return instance.get(url, {params, headers})\n  },\n  post(url, params, headers) {\n    return instance.post(url, params, {headers})\n  },\n  put(url, params, headers) {\n    return instance.put(url, params, {headers})\n  },\n  delete(url, params, headers) {\n    return instance.delete(url, {params, headers})\n  }\n}</code></pre>\n<h1> 4.再创建一个index.js</h1>\n<pre><code>//引入封装好的 service\nimport service from \"@/service/service\";\n\n//声明一个基础接口变量\nlet baseURL;\n\n//配置开发环境\nif (process.env.NODE_ENV === 'development') {\n    baseURL = 'http://www.****.com:8000/';\n}\n\n// 配置生产环境\nif (process.env.NODE_ENV === 'production') {\n  baseURL = 'http://www.*****.com:8001/';\n}\n\n//设置请求头（如果请求头统一的话可以在axios文件设置，则无须从这里传过去）\nconst header = {\n  Accept: 'application/json;charset=UTF-8',\n}\n\n//根据自身需求\nlet _service={\n    getList(data) {\n        const url = baseURL + 'index/getList';\n        return service.post(url, data, header);\n    }\n}\n\n\n//导出\nexport default {\n  _service\n}</code></pre>\n<h1>5.使用方法</h1>\n<p></p>\n<pre><code>\nimport _service from \"@/service\";\n\n_service.getList({你的参数}).then(res =&gt; {\n   console.log(res)\n})</code></pre>\n<h3><span style=\"color:#4da8ee;\">附: vue3没有this.所以使用的时候直接引用就好,如果项目比较大,接口多,可以分模块定义接口,使用的时候也是分模块导入.  以admin模块接口举例</span></h3>\n<h3><span style=\"color:#0d0016;\">说明:因为我的项目只有post请求,我就把请求头写在post方法里面了.后续的接口定义就省去了请求头的参数.</span><img alt=\"\" src=\"image\\a1a97acd8a54454bb94dd51fab860748.png\"/></h3>\n<p></p>\n<h1>1.admin模块,admin.js </h1>\n<p><img alt=\"\" src=\"image\\ca5b6c2db7314e7cb72c64742749ace5.png\"/>​​​​​​​</p>\n<p> </p>\n<h1>2.index.js 引入接口统一导出</h1>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"245\" src=\"image\\e9b265c075c54f64975cbf3525de633e.png\" width=\"694\"/></p>\n<h1>3.vue页面引用 ,此时只有admin.js定义的接口.</h1>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\11215802f6ec4d348c0bfbb9d68121ec.png\"/></p>\n<h1>4.methods方法调用接口,其中 _utils.setFormData(this.searchModel) 是我项目里自定义的一个参数格式转化,this.loadData(res) 是我项目里对响应数据统一处理的方法</h1>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\afcef7299ac7444c9c82c62c94229dcb.png\"/></p>\n<h1>总结</h1>\n<p>以上就是vue3的配置</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>"}