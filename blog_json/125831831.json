{"blogid": "125831831", "writerAge": "码龄109天", "writerBlogNum": "49", "writerCollect": "722", "writerComment": "1425", "writerFan": "1735", "writerGrade": "5级", "writerIntegral": "2943", "writerName": "柒小莫", "writerProfileAdress": "writer_image\\profile_125831831.jpg", "writerRankTotal": "6740", "writerRankWeekly": "256", "writerThumb": "843", "writerVisitNum": "11568", "blog_read_count": "863", "blog_time": "已于 2022-08-15 18:36:38 修改", "blog_title": "JavaScript DOM基础", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_5\">前言</a></li><li><a href=\"#DOM__13\">一、DOM 简介</a></li><li><ul><li><a href=\"#11__DOM_14\">1.1 什么是 DOM</a></li><li><a href=\"#12_DOM__29\">1.2 DOM 树</a></li></ul>\n</li><li><a href=\"#_36\">二、获取元素</a></li><li><ul><li><a href=\"#21__37\">2.1 如何获取页面元素</a></li><li><a href=\"#22__ID__45\">2.2 根据 ID 获取</a></li><li><a href=\"#23__54\">2.3 根据标签名获取</a></li><li><a href=\"#24__HTML5__66\">2.4 通过 HTML5 新增的方法获取</a></li><li><a href=\"#25_bodyhtml_77\">2.5 获取特殊元素（body，html）</a></li></ul>\n</li><li><a href=\"#_91\">三、事件基础</a></li><li><ul><li><a href=\"#31__92\">3.1 事件概述</a></li><li><a href=\"#32__98\">3.2 事件三要素</a></li><li><a href=\"#33__112\">3.3 执行事件的步骤</a></li><li><a href=\"#33__117\">3.3 常见的鼠标事件</a></li><li><a href=\"#34__121\">3.4 分析事件三要素</a></li></ul>\n</li><li><a href=\"#_129\">四、操作元素</a></li><li><ul><li><a href=\"#41__132\">4.1 改变元素内容</a></li><li><a href=\"#42__146\">4.2 常用元素的属性操作</a></li><li><a href=\"#43__154\">4.3 表单元素的属性操作</a></li><li><a href=\"#44__160\">4.4 样式属性操作</a></li><li><a href=\"#45__172\">4.5 排他思想</a></li><li><a href=\"#46__180\">4.6 自定义属性的操作</a></li><li><a href=\"#47_H5_200\">4.7 H5自定义属性</a></li></ul>\n</li><li><a href=\"#_220\">五、节点操作</a></li><li><ul><li><a href=\"#52__233\">5.2 节点概述</a></li><li><a href=\"#53__246\">5.3 节点层级</a></li></ul>\n</li><li><a href=\"#_304\">总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_5\"></a>前言</h1>\n<p>本文简单的讲解了JavaScript的DOM基础，适合初学的朋友们，如果本文对你有所帮助请三连支持博主，你的支持是我更新的动力。<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/3d66b956a88e47158ea94b0fecabbd13.gif#pic_center\"/></p>\n<hr/>\n<p><code>以下是本篇文章正文内容</code></p>\n<h1><a id=\"DOM__13\"></a>一、DOM 简介</h1>\n<h2><a id=\"11__DOM_14\"></a>1.1 什么是 DOM</h2>\n<p>一个完整的 JavaScript 实现由以下 3 个不同部分组成：</p>\n<ul><li> <p>核心（ECMAScript）：语言核心部分，描述了该语言的语法和基本对象。</p> </li><li> <p>文档对象模型（Document Object Model，DOM）：网页文档操作标准，描述处理网页内容的方法和接口。</p> </li><li> <p>浏览器对象模型（BOM）：客户端和浏览器窗口操作基础，描述与浏览器进行交互的方法和接口。</p> </li></ul>\n<p>文档对象模型（<code>Document Object Model，简称 DOM</code>），是 W3C 组织推荐的处理可扩展标记语言（HTML或者XML）的标准<code>编程接口</code>。<br/> W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p>\n<p><strong>官方语言：</strong> 文档对象模型（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展置标语言的标准编程接口。它是一种与平台和语言无关的应用程序接口(API),它可以动态地访问程序和脚本,更新其内容、结构和www文档的风格(HTML和XML文档是通过说明部分定义的)。文档可以进一步被处理，处理的结果可以加入到当前的页面。DOM是一种基于树的API文档，它要求在处理过程中整个文档都表示在存储器中。另外一种简单的API是基于事件的SAX，它可以用于处理很大的XML文档，由于大，所以不适合全部放在存储器中处理。</p>\n<hr/>\n<h2><a id=\"12_DOM__29\"></a>1.2 DOM 树</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a24aa7d227bd45dfa7a71af90ce37089.png\"/></p>\n<ul><li>文档：一个页面就是一个文档，DOM 中使用 document 表示</li><li>元素：页面中的所有标签都是元素，DOM 中使用 element 表示</li><li>节点：网页中的所有内容都是节点（标签、属性、文本、注释等），DOM 中使用 node 表示</li></ul>\n<p><strong><code>DOM 把以上内容都看做是对象</code></strong></p>\n<h1><a id=\"_36\"></a>二、获取元素</h1>\n<h2><a id=\"21__37\"></a>2.1 如何获取页面元素</h2>\n<p>DOM在我们实际开发中主要用来操作元素。<br/> 我们如何来获取页面中的元素呢?获取页面中的元素可以使用以下几种方式:</p>\n<ul><li>根据 ID 获取</li><li>根据标签名获取</li><li>通过 HTML5 新增的方法获取</li><li>特殊元素获取<br/> __</li></ul>\n<h2><a id=\"22__ID__45\"></a>2.2 根据 ID 获取</h2>\n<p>使用 getElementById() 方法可以获取带有 ID 的元素对象。</p>\n<pre><code class=\"prism language-javascript\"> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>使用 console.dir() 可以打印我们获取的元素对象，更好的查看对象里面的属性和方法。</p>\n<hr/>\n<h2><a id=\"23__54\"></a>2.3 根据标签名获取</h2>\n<p>使用 getElementsByTagName() 方法可以返回带有指定标签名的对象的集合。</p>\n<pre><code class=\"prism language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'标签名'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>注意：</p>\n<ol><li>因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历。</li><li>得到元素对象是动态的</li></ol>\n<hr/>\n<h2><a id=\"24__HTML5__66\"></a>2.4 通过 HTML5 新增的方法获取</h2>\n<pre><code class=\"prism language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span>‘类名’<span class=\"token punctuation\">)</span>；<span class=\"token comment\">// 根据类名返回元素对象集合</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'选择器'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 根据指定选择器返回第一个元素对象</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'选择器'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 根据指定选择器返回</span>\n</code></pre>\n<p><strong><code>注意：</code></strong><br/> querySelector 和 querySelectorAll里面的选择器需要加符号<br/> 比如:document.querySelector(’#nav’);</p>\n<hr/>\n<h2><a id=\"25_bodyhtml_77\"></a>2.5 获取特殊元素（body，html）</h2>\n<p>1.获取body元素</p>\n<pre><code class=\"prism language-javascript\">doucumnet<span class=\"token punctuation\">.</span>body <span class=\"token comment\">// 返回body元素对象</span>\n</code></pre>\n<p>2.获取html元素</p>\n<pre><code class=\"prism language-javascript\">document<span class=\"token punctuation\">.</span>documentElement <span class=\"token comment\">// 返回html元素对象</span>\n</code></pre>\n<hr/>\n<h1><a id=\"_91\"></a>三、事件基础</h1>\n<h2><a id=\"31__92\"></a>3.1 事件概述</h2>\n<p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。<br/> <code>简单理解： 触发--- 响应机制。</code><br/> 网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个事件，然后去执行某些操作。</p>\n<hr/>\n<h2><a id=\"32__98\"></a>3.2 事件三要素</h2>\n<ol><li>事件源 （谁）</li><li>事件类型 （什么事件）</li><li>事件处理程序 （做啥）</li></ol>\n<p><strong>案例：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbtn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你好吗'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h2><a id=\"33__112\"></a>3.3 执行事件的步骤</h2>\n<ol><li>获取事件源</li><li>注册事件（绑定事件）</li><li>添加事件处理程序（采取函数赋值形式）</li></ol>\n<hr/>\n<h2><a id=\"33__117\"></a>3.3 常见的鼠标事件</h2>\n<p><strong><code>注：以下图片的事件只是常见的并不代表所有</code></strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\2937073b2d084fc4ad500a73d90d3844.png\"/></p>\n<hr/>\n<h2><a id=\"34__121\"></a>3.4 分析事件三要素</h2>\n<p>事件三要素：<br/> 1.事件源（你是要对什么东西进行操作）</p>\n<p>2.事件（你要做什么实现所要的交互效果）</p>\n<p>3.处理函数（在事件进行后你要目标变成什么样子）</p>\n<hr/>\n<h1><a id=\"_129\"></a>四、操作元素</h1>\n<p>JavaScript 的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内容 、属性等。注意以下都是属性</p>\n<h2><a id=\"41__132\"></a>4.1 改变元素内容</h2>\n<pre><code class=\"prism language-javascript\">element<span class=\"token punctuation\">.</span>innerText\n</code></pre>\n<p>从起始位置到终止位置的内容, 但它去除 html 标签， 同时空格和换行也会去掉</p>\n<pre><code class=\"prism language-javascript\">element<span class=\"token punctuation\">.</span>innerHTML\n</code></pre>\n<p>起始位置到终止位置的全部内容，包括 html 标签，同时保留空格和换行</p>\n<hr/>\n<h2><a id=\"42__146\"></a>4.2 常用元素的属性操作</h2>\n<blockquote>\n<p>innerText、innerHTML 改变元素内容<br/> src、href<br/> id、alt、title</p>\n</blockquote>\n<hr/>\n<h2><a id=\"43__154\"></a>4.3 表单元素的属性操作</h2>\n<p>利用 DOM 可以操作如下表单元素的属性：</p>\n<blockquote>\n<p>type、value、checked、selected、disabled</p>\n</blockquote>\n<hr/>\n<h2><a id=\"44__160\"></a>4.4 样式属性操作</h2>\n<p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p>\n<ol><li>element.style 行内样式操作</li><li>element.className 类名样式操作</li></ol>\n<p><code>注意：</code><br/> <code>1.JS 里面的样式采取驼峰命名法 比如 fontSize、 backgroundColor</code><br/> <code>2.JS 修改 style 样式操作，产生的是行内样式，CSS 权重比较高</code></p>\n<p><strong>操作元素是 DOM 核心内容</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\6ad18b3b27374121927636c4f0504ba3.png\"/></p>\n<hr/>\n<h2><a id=\"45__172\"></a>4.5 排他思想</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\97cfd86261e14d93bbfcbfcfeb06b397.png\"/></p>\n<p>如果有同一组元素，我们想要某一个元素实现某种样式， 需要用到循环的排他思想算法：</p>\n<ol><li>所有元素全部清除样式（干掉其他人）</li><li>给当前元素设置样式 （留下我自己）</li><li>注意顺序不能颠倒，首先干掉其他人，再设置自己</li></ol>\n<hr/>\n<h2><a id=\"46__180\"></a>4.6 自定义属性的操作</h2>\n<p><strong>1. 获取属性值</strong></p>\n<ul><li>element.属性 获取属性值。</li><li>element.getAttribute(‘属性’);</li></ul>\n<p><strong>区别：</strong></p>\n<ul><li>element.属性 获取内置属性值（元素本身自带的属性）</li><li>element.getAttribute(‘属性’); 主要获得自定义的属性 （标准） 我们程序员自定义的属性</li></ul>\n<hr/>\n<p><strong>2. 设置属性值</strong></p>\n<ul><li>element.属性 = ‘值’ 设置内置属性值。</li><li>element.setAttribute(‘属性’, ‘值’);</li></ul>\n<p><strong>区别：</strong></p>\n<ul><li>element.属性 设置内置属性值</li><li>element.setAttribute(‘属性’); 主要设置自定义的属性 （标准）</li></ul>\n<hr/>\n<p><strong>3. 移除属性</strong></p>\n<ul><li>element.removeAttribute(‘属性’);</li></ul>\n<hr/>\n<h2><a id=\"47_H5_200\"></a>4.7 H5自定义属性</h2>\n<p><code>自定义属性目的：是为了保存并使用数据。有些数据可以保存到页面中而不用保存到数据库中。</code></p>\n<p>自定义属性获取是通过getAttribute(‘属性’) 获取。<br/> 但是有些自定义属性很容易引起歧义，不容易判断是元素的内置属性还是自定义属性。</p>\n<p>H5给我们新增了自定义属性：</p>\n<p><strong>1.设置H5自定义属性</strong></p>\n<p>H5规定自定义属性data-开头做为属性名并且赋值。</p>\n<p>或者使用 JS 设置</p>\n<blockquote>\n<p>element.setAttribute(‘data-index’, 2)</p>\n</blockquote>\n<p><strong>2. 获取H5自定义属性</strong><br/> 兼容性获取 element.getAttribute(‘data-index’);<br/> H5新增 element.dataset.index 或者 element.dataset[‘index’] ie 11才开始支持</p>\n<hr/>\n<h1><a id=\"_220\"></a>五、节点操作</h1>\n<p>获取元素通常使用两种方式：<br/> <strong>1. 利用 DOM 提供的方法获取元素</strong></p>\n<ul><li>document.getElementById()</li><li>document.getElementsByTagName()</li><li>document.querySelector 等  逻辑性不强、繁琐</li></ul>\n<p><strong>2. 利用节点层级关系获取元素</strong></p>\n<ul><li>利用父子兄节点关系获取元素</li><li>逻辑性强， 但是兼容性稍差</li></ul>\n<p><strong>这两种方式都可以获取元素节点，后面都会使用，但是节点操作更简单</strong></p>\n<hr/>\n<h2><a id=\"52__233\"></a>5.2 节点概述</h2>\n<p>网页中的所有内容都是节点（标签、属性、文本、注释等），在DOM 中，节点使用 node 来表示。<br/> HTML DOM 树中的所有节点均可通过 JavaScript 进行访问，所有 HTML 元素（节点）均可被修改，也可以创建或删除</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ee10eb09372a406f9500c26e0a5b7960.png\"/><br/> 一般地，节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性。</p>\n<ul><li>元素节点 nodeType 为 1</li><li>属性节点 nodeType 为 2</li><li>文本节点 nodeType 为 3 （文本节点包含文字、空格、换行等）</li></ul>\n<p><code>我们在实际开发中，节点操作主要操作的是元素节点</code></p>\n<hr/>\n<h2><a id=\"53__246\"></a>5.3 节点层级</h2>\n<p>利用 DOM 树可以把节点划分为不同的层级关系，常见的是<code>父子兄层级关系</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\74e895a935604fa9975277149ba69fa8.png\"/><br/> <strong>1. 父级节点</strong></p>\n<blockquote>\n<p>node.parentNode</p>\n</blockquote>\n<ul><li>parentNode 属性可返回某节点的父节点，注意是最近的一个父节点</li><li>如果指定的节点没有父节点则返回 null</li></ul>\n<hr/>\n<p><strong>2. 子节点</strong></p>\n<blockquote>\n<p>parentNode.childNodes（标准）</p>\n</blockquote>\n<p>parentNode.childNodes 返回包含指定节点的子节点的集合，该集合为即时更新的集合。<br/> 注意：返回值里面包含了所有的子节点，包括元素节点，文本节点等。<br/> 如果只想要获得里面的元素节点，则需要专门处理。 所以我们一般不提倡使用childNodes</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span> <span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>‘ul’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ul<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ul<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token comment\">// ul.childNodes[i] 是元素节点</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ul<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<ol start=\"2\"><li>parentNode.children（非标准）</li></ol>\n</blockquote>\n<p>parentNode.children 是一个只读属性，返回所有的子元素节点。它只返回子元素节点，其余节点不返回 （这个是我们重点掌握的）。<br/> 虽然children 是一个非标准，但是得到了各个浏览器的支持，因此我们可以放心使用</p>\n<blockquote>\n<ol start=\"3\"><li>parentNode.firstChild</li></ol>\n</blockquote>\n<p>firstChild 返回第一个子节点，找不到则返回null。同样，也是包含所有的节点。</p>\n<blockquote>\n<ol start=\"4\"><li>parentNode.lastChild</li></ol>\n</blockquote>\n<p>lastChild 返回最后一个子节点，找不到则返回null。同样，也是包含所有的节点</p>\n<blockquote>\n<ol start=\"5\"><li>parentNode.firstElementChild</li></ol>\n</blockquote>\n<p>firstElementChild 返回第一个子元素节点，找不到则返回null。</p>\n<blockquote>\n<ol start=\"6\"><li>parentNode.lastElementChild</li></ol>\n</blockquote>\n<p>lastElementChild 返回最后一个子元素节点，找不到则返回null。<br/> <code>注意：这两个方法有兼容性问题，IE9 以上才支持</code></p>\n<p>实际开发中，firstChild 和 lastChild 包含其他节点，操作不方便<br/> 而 firstElementChild 和lastElementChild 又有兼容性问题，那么我们如何获取第一个子元素节点或最后一个子元素节点呢？<br/> 解决方案：</p>\n<ol><li>如果想要第一个子元素节点，可以使用 parentNode.chilren[0]</li><li>如果想要最后一个子元素节点，可以使用</li></ol>\n<blockquote>\n<p>parentNode.chilren[parentNode.chilren.length - 1]</p>\n</blockquote>\n<hr/>\n<h1><a id=\"_304\"></a>总结</h1>\n<p>文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（HTML或者XML）的标准编程接口。</p>\n<p>W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p>\n<p>对于JavaScript，为了能够使JavaScript操作HTML，JavaScript就有了一套自己的dom编程接口。</p>\n<p>对于HTML，dom使得html形成一棵dom树. 包含 文档、元素、节点</p>\n<p>我们获取过来的DOM元素是一个对象（object），所以称为 文档对象模型</p>\n<p>关于dom操作，我们主要针对于元素的操作。主要有创建、增、删、改、查、属性操作、事件操作。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e0a06f5323ca4c64808132932e37caba.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}