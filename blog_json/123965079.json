{"blogid": "123965079", "writerAge": "码龄2年", "writerBlogNum": "108", "writerCollect": "230", "writerComment": "7", "writerFan": "28", "writerGrade": "4级", "writerIntegral": "1191", "writerName": "m0_51551385", "writerProfileAdress": "writer_image\\profile_123965079.jpg", "writerRankTotal": "30877", "writerRankWeekly": "282215", "writerThumb": "50", "writerVisitNum": "68739", "blog_read_count": "2492", "blog_time": "于 2022-04-05 10:37:21 发布", "blog_title": "C++ std::ref————详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><a href=\"http://t.csdn.cn/XM9ce\">想学习ref，必须先学习reference_rapper</a></p>\n<h1><a id=\"1_1\"></a>1、是什么？</h1>\n<p><code>ref</code>是个函数模板：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3acdecd77dc0497a948ed7632842d9a0.png\"/><br/> 用来构建一个<code>reference_wrapper</code>对象并返回，该对象拥有传入的<code>elem</code>变量的引用。如果参数本身是一个<code>reference_wrapper</code>类型的对象，则创建该对象的一个副本，并返回。</p>\n<h1><a id=\"2ref_6\"></a>2、为什么要有<code>ref</code></h1>\n<p><code>std::ref</code>主要在函数式编程（如<code>std::bind</code>）时使用，<code>bind</code>是对参数直接拷贝，无法传入引用（即使你传入的实参是引用类型也不行），故引入<code>std::ref()</code>。使用<code>std::ref</code>可以在模板传参的时候传入引用。</p>\n<p><code>ref</code>能使用<code>reference_wrapper</code>包装好的引用对象代替原本会被识别的值类型，而<code>reference_wrapper</code>能隐式转换为被引用的值的引用类型。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\nstd<span class=\"token double-colon punctuation\">::</span>ref主要是考虑函数式编程（如std<span class=\"token double-colon punctuation\">::</span>bind）在使用时，是对参数直接拷贝，而不是引用\n<span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"in function a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  c = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"in function a = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  b = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  c = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    c <span class=\"token operator\">+=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> n3 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> r1 <span class=\"token operator\">=</span> n1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> r2 <span class=\"token operator\">=</span> n2<span class=\"token punctuation\">;</span>\n\n    function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> f1 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> r1<span class=\"token punctuation\">,</span> r2<span class=\"token punctuation\">,</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>n3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\n    前两个参数即便是引用类型，bind 传入的还是其值的拷贝，第三个参数传入 reference_wrapper 对象，该对象可隐式的转换为值的引用\n\n    <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"out function a = \"</span> <span class=\"token operator\">&lt;&lt;</span> n1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  b = \"</span> <span class=\"token operator\">&lt;&lt;</span> n2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  c = \"</span> <span class=\"token operator\">&lt;&lt;</span> n3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"out function a = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>n1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  b = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>n2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  c = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>n3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"out function a = \"</span> <span class=\"token operator\">&lt;&lt;</span> n1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  b = \"</span> <span class=\"token operator\">&lt;&lt;</span> n2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  c = \"</span> <span class=\"token operator\">&lt;&lt;</span> n3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"out function a = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>n1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  b = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>n2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  c = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>n3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">in</span> <span class=\"token class-name\">function</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  b <span class=\"token operator\">=</span> <span class=\"token number\">10</span>  c <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token keyword\">in</span> <span class=\"token class-name\">function</span> a <span class=\"token operator\">=</span> 0000006B90EFF710  b <span class=\"token operator\">=</span> 0000006B90EFF708  c <span class=\"token operator\">=</span> 0000006B90EFF684\n<span class=\"token keyword\">out</span> <span class=\"token class-name\">function</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  b <span class=\"token operator\">=</span> <span class=\"token number\">10</span>  c <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n<span class=\"token keyword\">out</span> <span class=\"token class-name\">function</span> a <span class=\"token operator\">=</span> 0000006B90EFF644  b <span class=\"token operator\">=</span> 0000006B90EFF664  c <span class=\"token operator\">=</span> 0000006B90EFF684\n<span class=\"token keyword\">in</span> <span class=\"token class-name\">function</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>  b <span class=\"token operator\">=</span> <span class=\"token number\">20</span>  c <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n<span class=\"token keyword\">in</span> <span class=\"token class-name\">function</span> a <span class=\"token operator\">=</span> 0000006B90EFF710  b <span class=\"token operator\">=</span> 0000006B90EFF708  c <span class=\"token operator\">=</span> 0000006B90EFF684\n<span class=\"token keyword\">out</span> <span class=\"token class-name\">function</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  b <span class=\"token operator\">=</span> <span class=\"token number\">10</span>  c <span class=\"token operator\">=</span> <span class=\"token number\">300</span>\n<span class=\"token keyword\">out</span> <span class=\"token class-name\">function</span> a <span class=\"token operator\">=</span> 0000006B90EFF644  b <span class=\"token operator\">=</span> 0000006B90EFF664  c <span class=\"token operator\">=</span> 0000006B90EFF684\n</code></pre>\n<p>不仅仅是在使用<code>bind</code>时，在使用<code>thread</code>进行编程时，也会发生这样的问题，<code>thread</code>的方法传递引用的时候，必须用<code>ref</code>来进行引用传递，否则就是浅拷贝。</p>\n<h1><a id=\"3ref_58\"></a>3、<code>ref</code>和引用的区别</h1>\n<p>首先就是，上面的例子里，使用<code>bind</code>的时候，普通引用和<code>ref</code>引用有区别。</p>\n<p><code>std::ref</code>只是尝试模拟引用传递，并不能真正变成引用，在非模板情况下，<code>std::ref</code>根本没法实现引用传递，只有<strong>模板自动推导类型</strong>或<strong>类型隐式转换</strong>时，<code>ref</code>能用包装类型<code>reference_wrapper</code>来代替原本会被识别的值类型，而<code>reference_wrapper</code>能隐式转换为被引用的值的引用类型。</p>\n<p>目前我只遇到过类型转换时，<code>ref</code>和普通引用的区别，模板自动推导类型的情况还没遇到过。</p>\n<br/>\n<br/>\n<br/>\n<p><a href=\"http://t.csdn.cn/huxJP\">参考：http://t.csdn.cn/huxJP</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}