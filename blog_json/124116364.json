{"blogid": "124116364", "writerAge": "码龄3年", "writerBlogNum": "8", "writerCollect": "4", "writerComment": "0", "writerFan": "74", "writerGrade": "1级", "writerIntegral": "61", "writerName": "土豆丶杨", "writerProfileAdress": "writer_image\\profile_124116364.jpg", "writerRankTotal": "162874", "writerRankWeekly": "278285", "writerThumb": "1", "writerVisitNum": "9648", "blog_read_count": "3921", "blog_time": "于 2022-04-12 09:44:59 发布", "blog_title": "c#强制类型转换int", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>在 C# 中有三种方法把其它类型转为整型，分别是 int.Parse()、强制转换(int) 和 Convert.ToInt32()，下面探讨它们各自的特点及效率。</p>\n<p></p>\n<p><strong>1、int.Parse() 方法</strong></p>\n<p>该方法只能把字符型（string）转换为整型（int），如果用它把非字符型转为 int，则会产生异常，举例如下：</p>\n<p>int i = int.Parse(\"100\");</p>\n<p><strong>注意：</strong>如果把不能转换为 int 字符转换为 int，也会发生异常，如：</p>\n<p>int text = int.Parse(\"转为整型\");</p>\n<p></p>\n<p><strong>2、Convert.ToInt32() 方法</strong></p>\n<p>该方法是把对象型（object）转换为整型（int），由于 C# 把各种数据类型都看作对象，所以可以把所有类型都转换为 int；遇到不能转换为 int 的类型，则返回 0，举例如下：</p>\n<p>int n = Convert.ToInt32(Cache[\"totalOnline\"]); //把对象型转为 int</p>\n<p>bool flag = true;<br/>   int b = Convert.ToInt32(flag); //把布尔型转为 int，结果返回 0</p>\n<p>int m = Convert.ToInt32(null);//把“空”转为 int，结果返回 0</p>\n<p></p>\n<p><strong>3、强制转换(int)</strong></p>\n<p>强制转换通常用在待转换的类型转换后是数字比较明确的情况，不然对不能转换为 int 的数据类型用强制转换就会产生异常，举例如下：</p>\n<p>int n = (int)Cache[\"totalOnline\"]; //把缓存的在线人数转为 int</p>\n<p>byte b = 8;<br/>   int i = (int)b;</p>\n<p>double d = 15.26;<br/>   int i = (int)d; //结果为 15</p>\n<p></p>\n<p><strong>4、效率比较</strong></p>\n<p>由于在转换过程中，Convert.ToInt32() 方法最终也是先调用 int.Parse() 方法，所以 int.Parse() 方法的效率自然比 Convert.ToInt32() 方法高。</p>\n<p>如果待转换的类型转换后一定是数字，建议使用 int.Parse() 方法和强制转换(int)，以提高程序执行效率；如果不能断定，只能用Convert.ToInt32() 方法，或用 Convert.ToInt32() 方法加异常处理，即：</p>\n<p>int i;<br/>   try<br/>   {<!-- --><br/>     i = int.Parse(Cache[\"totalOnline\"]);<br/>   }<br/>   catch<br/>   {<!-- --><br/>     i = 0;<br/>   }</p>\n</div>\n</div>"}