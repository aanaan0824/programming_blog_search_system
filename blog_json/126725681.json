{"blogid": "126725681", "writerAge": "码龄1年", "writerBlogNum": "217", "writerCollect": "713", "writerComment": "134", "writerFan": "10514", "writerGrade": "5级", "writerIntegral": "3255", "writerName": "夏志121", "writerProfileAdress": "writer_image\\profile_126725681.jpg", "writerRankTotal": "5447", "writerRankWeekly": "193", "writerThumb": "888", "writerVisitNum": "148167", "blog_read_count": "82", "blog_time": "于 2022-09-06 15:50:49 发布", "blog_title": "【Java基础】时间日期类之Date类、SimplDateFormat类、Calendar类及二月天案例", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81Date%E7%B1%BB\">一、Date类</a></p>\n<p id=\"%E4%BA%8C%E3%80%81SimpleDateFormat%E7%B1%BB-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81SimpleDateFormat%E7%B1%BB\">二、SimpleDateFormat类</a></p>\n<p id=\"%E4%B8%89%E3%80%81Calendar%E7%B1%BB-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81Calendar%E7%B1%BB\">三、Calendar类</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E4%BA%8C%E6%9C%88%E5%A4%A9%E6%A1%88%E4%BE%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E4%BA%8C%E6%9C%88%E5%A4%A9%E6%A1%88%E4%BE%8B\">四、二月天案例</a></p>\n<hr id=\"hr-toc\"/>\n<h1>一、Date类</h1>\n<p>Date代表一个特定的时间，精确到毫秒</p>\n<p>Date构造方法：</p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><td>方法名</td><td>说明</td></tr><tr><td>public Date()</td><td>分配一个Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒</td></tr><tr><td>public Date(long date)</td><td>分配一个Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数</td></tr></tbody></table>\n<p>示例代码：</p>\n<pre><code class=\"language-java\">public class DateDemo01 {\n\t    public static void main(String[] args) {\n        //public Date()：分配一个 Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒\n        Date d1 = new Date();\n        System.out.println(d1);\n\n\t    //public Date(long date)：分配一个 Date对象，并将其初始化为表示从标准基准时间起\n指定的毫秒数\n        long date = 1000*60*60;\n        Date d2 = new Date(date);\n        System.out.println(d2);\n    }\n}\n</code></pre>\n<p>Date类常用方法：</p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><td>方法名</td><td>说明</td></tr><tr><td>public long getTime()</td><td>获取的是日期对象从1970年1月1日 00:00:00到现在的毫秒值</td></tr><tr><td>public void setTime(long time)</td><td>设置时间，给的是毫秒值</td></tr></tbody></table>\n<p>示例代码：</p>\n<pre><code class=\"language-java\">public class DateDemo02 {\n\t    public static void main(String[] args) {\n        //创建日期对象\n        Date d = new Date();\n\t        //public long getTime():获取的是日期对象从1970年1月1日 00:00:00到现在的毫秒值\n//        System.out.println(d.getTime());\n//        System.out.println(d.getTime() * 1.0 / 1000 / 60 / 60 / 24 / 365 + \"年\");\n\t      //public void setTime(long time):设置时间，给的是毫秒值\n//        long time = 1000*60*60;\n\n        long time = System.currentTimeMillis();\n        d.setTime(time);\n\n        System.out.println(d);\n    }\n}\n</code></pre>\n<h1 id=\"%E4%BA%8C%E3%80%81SimpleDateFormat%E7%B1%BB\">二、SimpleDateFormat类</h1>\n<p>SimpleDateFormat是一个具体的类，用以区域设置敏感的方式格式化和解析日期。</p>\n<p>SimpleDateFormat类构造方法</p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><td>方法名</td><td>说明</td></tr><tr><td>public SimpleDateFormat()</td><td>构造一个SimpleDateFormat，使用默认模式和日期格式</td></tr><tr><td>public SimpleDateFormat(String pattern)</td><td>构造一个SimpleDateFormat使用给定的模式和默认日期格式</td></tr></tbody></table>\n<p>SimpleDateFormat类的常用方法</p>\n<p>格式化（<span style=\"color:#fe2c24;\"><strong>从Date到String</strong></span>）</p>\n<blockquote>\n<p>public final String format(Date date)：将日期格式化成日期/时间字符串</p>\n</blockquote>\n<p>解析（<strong><span style=\"color:#fe2c24;\">从String到Date</span></strong>）</p>\n<blockquote>\n<p>public Date parse(String source)：从给定字符串的开始解析文本以生成日期</p>\n</blockquote>\n<p>示例代码：</p>\n<pre><code class=\"language-java\">public class SimpleDateFormatDemo {\n    public static void main(String[] args) throws ParseException {\n        //格式化：从 Date 到 String\n        Date d = new Date();\n\t//        SimpleDateFormat sdf = new SimpleDateFormat();\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy年MM月dd日 HH:mm:ss\");\n        String s = sdf.format(d);\n        System.out.println(s);\n\t    System.out.println(\"--------\");\n\n        //从 String 到 Date\n        String ss = \"2048-08-09 11:11:11\";\n        //ParseException \n        SimpleDateFormat sdf2 = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"); \n        Date dd = sdf2.parse(ss); System.out.println(dd); \n    } \n}</code></pre>\n<h1 id=\"%E4%B8%89%E3%80%81Calendar%E7%B1%BB\">三、Calendar类</h1>\n<p>Calendar为特定瞬间与一组日历字段字节的转换提供了一些方法，并为操作日历字段提供了一些方法</p>\n<blockquote>\n<p>Calendar提供了一个类方法getInstance用于获取这种类型的一般有用的对象。</p>\n<p>该方法返回一个Calendar对象。</p>\n<p>其日历字段已使用当前日期和时间初始化：Calendar rightNow = Calendar.getInstance();</p>\n</blockquote>\n<p>Calendar类常用方法：</p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><td>方法名</td><td>说明</td></tr><tr><td>public int get(int field)</td><td>返回给定日历字段的值</td></tr><tr><td>public abstract void add(int field,int amount)</td><td>根据日历的规则，将指定的时间量添加或减去给定的日历字段</td></tr><tr><td>public final void set(int year,int month,int date)</td><td>设置当前日历的年月日</td></tr></tbody></table>\n<p>示例代码：</p>\n<pre><code class=\"language-java\">public class CalendarDemo {\n\t    public static void main(String[] args) {\n        //获取日历类对象\n\t        Calendar c = Calendar.getInstance();\n        //public int get(int field):返回给定日历字段的值\n        int year = c.get(Calendar.YEAR);\n        int month = c.get(Calendar.MONTH) + 1;\n        int date = c.get(Calendar.DATE);\n        System.out.println(year + \"年\" + month + \"月\" + date + \"日\");\n        //public abstract void add(int field, int amount):根据日历的规则，将指定的时\n// 间量添加或减去给定的日历字段\n        //需求1:3年前的今天\n        c.add(Calendar.YEAR,-3);\n        year = c.get(Calendar.YEAR);\n        month = c.get(Calendar.MONTH) + 1;\n        date = c.get(Calendar.DATE);\n        System.out.println(year + \"年\" + month + \"月\" + date + \"日\");\n\n        //需求2:10年后的10天前\n        c.add(Calendar.YEAR,10);\n        c.add(Calendar.DATE,-10);\n        year = c.get(Calendar.YEAR);\n        month = c.get(Calendar.MONTH) + 1;\n        date = c.get(Calendar.DATE);\n        System.out.println(year + \"年\" + month + \"月\" + date + \"日\");\n       \n\n        //public final void set(int year,int month,int date):设置当前日历的年月日\n        c.set(2050,10,10);\n        year = c.get(Calendar.YEAR);\n        month = c.get(Calendar.MONTH) + 1;\n        date = c.get(Calendar.DATE);\n\t    System.out.println(year + \"年\" + month + \"月\" + date + \"日\");\n\n    }\n}\n</code></pre>\n<h1 id=\"%E5%9B%9B%E3%80%81%E4%BA%8C%E6%9C%88%E5%A4%A9%E6%A1%88%E4%BE%8B\">四、二月天案例</h1>\n<p>需求：获取任意一年的二月有多少天</p>\n<p>代码实现：</p>\n<pre><code class=\"language-java\">public class CalendarTest { \n    public static void main(String[] args) { \n        //键盘录入任意的年份 \n        Scanner sc = new Scanner(System.in); \n        System.out.println(\"请输入年：\"); \n        int year = sc.nextInt(); \n\n        //设置日历对象的年、月、日 \n        Calendar c = Calendar.getInstance(); \n        c.set(year, 2, 1); \n\n        //3月1日往前推一天，就是2月的最后一天 \n        c.add(Calendar.DATE, -1); \n\n        //获取这一天输出即可 \n        int date = c.get(Calendar.DATE); \n        System.out.println(year + \"年的2月份有\" + date + \"天\"); \n    } \n}\n</code></pre>\n</div>\n</div>"}