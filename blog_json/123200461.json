{"blogid": "123200461", "writerAge": "码龄9年", "writerBlogNum": "34", "writerCollect": "30", "writerComment": "5", "writerFan": "2", "writerGrade": "3级", "writerIntegral": "512", "writerName": "戏台无戏子&youngthful", "writerProfileAdress": "writer_image\\profile_123200461.jpg", "writerRankTotal": "52914", "writerRankWeekly": "149909", "writerThumb": "20", "writerVisitNum": "29237", "blog_read_count": "2571", "blog_time": "已于 2022-03-03 11:10:51 修改", "blog_title": "Cargo+Ndk实现Android平台的rust源码交叉编译", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>一.目标</h1>\n<p>使用cargo和ndk交叉编译工具链，编译rust源码，能够在android设备上运行。</p>\n<h1>二.开发环境</h1>\n<p>VM Box + Ubuntu 20.04.1</p>\n<h1>三.方法</h1>\n<h2>3.1 下载ndk</h2>\n<p>最方便的方法是安装Android Studio，再使用其Sdk Manager下载指定的ndk版本，本人使用的ndk版本是：21.4.7075529</p>\n<p>下载之后，ndk所在路径：~/Android/Sdk/ndk/21.4.7075529/</p>\n<h2>3.2 基于ndk生成独立的交叉编译工具链</h2>\n<p>本文需要生成sdk版本为30（Android R），目标版本为arm64（即：aarch64/arm8-v8a）的交叉编译工具链，命令如下：</p>\n<pre><code>${ANDROID_NDK_HOME}/build/tools/make_standalone_toolchain.py --api 30 --arch arm64 --install-dir ./arm64</code></pre>\n<p>其中：</p>\n<p>1）${ANDROID_NDK_HOME}：替换为下载的ndk目录，本文为：~/Android/Sdk/ndk/21.4.7075529/</p>\n<p>2）--api 30：指定sdk版本为30，即Android R</p>\n<p>3）--arch arm64：目标版本为arm 64，也就是常说的aarch64或arm8-v8a</p>\n<p>4）--install-dir ./arm64：生成的交叉编译工具链保存目录，arm64为新建的本地目录，需自己创建</p>\n<p>之后，等待命令执行完成，可以在./arm64下看到完整的工具链</p>\n<h2>3.3 rust安装支持交叉编译的基础库</h2>\n<p>rust默认的基础库是主机版本的，本文为x86_64，因此，需要从rust仓库中下载arm64版本的基础库：</p>\n<pre><code>youthful@youthful-VirtualBox-Ubuntu:~/Android/Sdk/ndk/21.4.7075529$ rustup target add aarch64-linux-android</code></pre>\n<h2>3.4 rust源码工程配置ndk交叉编译工具链</h2>\n<p>前面的步骤已经在本地环境配置好了交叉编译需要的开发工具，最后，需要在rust源码工程中指定交叉编译工具链。</p>\n<p>1）在rust工程根目录创建&lt;project_root_path&gt;/.cargo/config.toml文件(&lt;project_root_path&gt;：真实的工程根目录)：</p>\n<pre><code>youthful@youthful-VirtualBox-Ubuntu:~/test$ mkdir .cargo\nyouthful@youthful-VirtualBox-Ubuntu:~/test$ touch .cargo/config.toml</code></pre>\n<p>2）将如下内容添加到新建的config.toml文件：</p>\n<pre><code>[target.aarch64-linux-android]\nar = \"&lt;your_toolchain_path&gt;/bin/aarch64-linux-android-ar\"\nlinker = \"&lt;your_toolchain_path&gt;/bin/aarch64-linux-android-gcc\"\nrustflags = [\"-L\", \"&lt;your_toolchain_path&gt;/sysroot/usr/lib/aarch64-linux-android/30\",\n\"-L\", \"./libfuse_libs/3.10/static_lib\",\n\"-l\", \"fuse3\"]</code></pre>\n<p>其中，</p>\n<p>-1）&lt;your_toolchain_path_prefix&gt;替换为你前面保存ndk生成的交叉工具链的目录，本文为：</p>\n<p>/home/work/ndk_standalone_21.4.7075529/arm64</p>\n<p>-2）rustflags：指定了交叉工具链的库路径，需要手动指定，否则无法链接到正确的库。</p>\n<p>3.5 交叉编译目标版文件</p>\n<p>上述配置完成之后，就可以编译arm64的目标文件了，工程根目录执行如下命令即可：</p>\n<pre><code>cargo build --example simple --target=aarch64-linux-android</code></pre>\n<p>其中，</p>\n<p>--example simple：需替换为真实的工程源码</p>\n<p>编译结果：./target/aarch64-linux-android/debug/examples/simple</p>\n</div>\n</div>"}