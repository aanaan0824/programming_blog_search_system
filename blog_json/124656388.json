{"blogid": "124656388", "writerAge": "码龄4年", "writerBlogNum": "281", "writerCollect": "1754", "writerComment": "148", "writerFan": "15148", "writerGrade": "5级", "writerIntegral": "3399", "writerName": "求则得之，舍则失之", "writerProfileAdress": "writer_image\\profile_124656388.jpg", "writerRankTotal": "5908", "writerRankWeekly": "736", "writerThumb": "265", "writerVisitNum": "261138", "blog_read_count": "1701", "blog_time": "于 2022-05-10 23:00:00 发布", "blog_title": "C++ 正则表达式教程：C++ 中的正则表达式与示例", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>C++ 正则表达式教程解释了 C++ 中正则表达式的工作，包括正则表达式匹配、搜索、替换、输入验证和标记化的功能。</p>\n<p>几乎所有的编程语言都支持正则表达式。 C++ 从 C++11 开始直接支持正则表达式。除了编程语言之外，大多数文本处理程序（如词法分析器、高级文本编辑器等）都使用正则表达式。</p>\n<p>在本教程中，我们将探讨正则表达式的一般细节以及 C++ 编程方面的细节。</p>\n<p>正则匹配中的基础符号</p>\n<pre><code class=\"prism language-shell\">^开头\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>组\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>或,\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>几次\n$结尾\n</code></pre>\n<h1><a id=\"1_C__Regex_16\"></a>1. C++ 中的正则表达式 (Regex)</h1>\n<p>正则表达式是包含一系列字符的表达式，这些字符定义了可用于字符串搜索算法、查找或查找/替换算法等的特定搜索模式。正则表达式也用于输入验证。</p>\n<p>大多数编程语言要么为正则表达式提供内置功能，要么通过库提供。从 C++11 开始，C++ 通过 标准库提供正则表达式支持。</p>\n<p>用于解析正则表达式的正则表达式处理器将其转换为内部表示，该表示被执行并与表示正在搜索的文本的字符串匹配。 C++11 使用 ECMAScript 语法作为正则表达式的默认语法。 ECMAScript 很简单，但它提供了强大的正则表达式功能。 让我们看看我们在正则表达式中指定的一些模式，如范围规范、重复模式等。</p>\n<h2><a id=\"11__23\"></a>1.1 范围规范</h2>\n<p>指定字符或文字的范围是正则表达式中使用的最简单的标准之一。</p>\n<p>例如，我们可以指定一个从a到z的小写字母范围，如下所示:<strong>[a-z]</strong>，这将只匹配一个小写字符。</p>\n<p>下列条件：<strong>[A-Za-z0-9]</strong><br/> 上面的表达式指定了包含一个大写字母、一个小写字母和0到9之间的数字的范围。</p>\n<p>上述表达式中的方括号([])具有特殊含义，即用于指定范围。如果你想包含一个括号作为表达式的一部分，那么你需要转义它。</p>\n<p>那么下面的表达式，<strong>[\\[0-9]</strong><br/> 上面的表达式表示一个左括号和一个0到9范围内的数字作为正则表达式。</p>\n<p>但请注意，当我们使用 C++ 编程时，我们需要使用 C++ 特定的转义序列，如下所示：<strong>[\\\\[0-9]</strong></p>\n<h2><a id=\"12__37\"></a>1.2 重复模式</h2>\n<p>我们上面指定的范围示例只匹配一个字符或文字。如果我们想匹配多个字符，我们通常在模式中指定“表达式修饰符”，从而使其成为一个重复的模式。</p>\n<p>表达式修饰符可以是<code>+</code>，表示匹配一个模式出现一次或多次，也可以是<code>*</code>，表示匹配一个模式出现零次或多次。</p>\n<p>例如，下面的表达式，<br/> <code>[a-z]+</code> 匹配 <code>a、aaa、abcd、softwaretestinghelp</code> 等字符串。请注意，它永远不会匹配空白字符串。<br/> <code>[a-z]*</code>将匹配一个空白字符串或任何上面的字符串。</p>\n<p>如果要指定一组字符匹配一次或多次，则可以使用括号，如下所示：<strong>(Xyz)+</strong></p>\n<p>上面的表达式将匹配<code>Xyz、XyzXyz</code>和<code>XyzXyz</code>等等。</p>\n<h1><a id=\"2_C_50\"></a>2. C++正则表达式的例子</h1>\n<p>考虑一个匹配 MS-DOS 文件名的正则表达式，如下所示。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">char</span> regex_filename<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> “<span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>zA<span class=\"token operator\">-</span>Z_<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>zA<span class=\"token operator\">-</span>Z_0<span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>\\\\<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>zA<span class=\"token operator\">-</span>Z0<span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>”<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>上面的正则表达式可以解释如下：<br/> 匹配一个字母(小写，然后大写)或下划线。然后匹配零个或多个字符，其中每个字符可以是字母、下划线或数字。然后匹配文字点(.)。在点之后，匹配一个或多个字符，其中每个字符可以是表示文件扩展名的字母或数字。</p>\n<h1><a id=\"3_C_59\"></a>3. C++正则表达式中使用的函数模板</h1>\n<p>现在让我们讨论在 C++ 中编写正则表达式时的一些重要函数模板。</p>\n<h2><a id=\"31_regex_match_61\"></a>3.1 regex_match()</h2>\n<p>此函数模板用于匹配给定的模式。如果给定的表达式与字符串匹配，则此函数返回 <code>true</code>。否则，该函数返回 <code>false</code>。</p>\n<p>以下是演示 <code>regex_match</code> 函数的 C++ 编程示例。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;regex&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n \n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">regex_match</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"softwareTesting\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">regex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(soft)(.*)\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"string:literal =&gt; matched\\n\"</span><span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> mystr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"SoftwareTestingHelp\"</span><span class=\"token punctuation\">;</span>\n   string <span class=\"token function\">str</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"software\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   regex <span class=\"token function\">str_expr</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"(soft)(.*)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">regex_match</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>str_expr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"string:object =&gt; matched\\n\"</span><span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">regex_match</span> <span class=\"token punctuation\">(</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> str_expr <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"string:range(begin-end)=&gt; matched\\n\"</span><span class=\"token punctuation\">;</span>\n \n   cmatch cm<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//匹配的词语检索出来</span>\n   <span class=\"token function\">regex_match</span> <span class=\"token punctuation\">(</span>mystr<span class=\"token punctuation\">,</span>cm<span class=\"token punctuation\">,</span>str_expr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n   smatch sm<span class=\"token punctuation\">;</span>\n   <span class=\"token function\">regex_match</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>sm<span class=\"token punctuation\">,</span>str_expr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n   <span class=\"token function\">regex_match</span> <span class=\"token punctuation\">(</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sm<span class=\"token punctuation\">,</span> str_expr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"String:range, size:\"</span> <span class=\"token operator\">&lt;&lt;</span> sm<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" matches\\n\"</span><span class=\"token punctuation\">;</span>\n \n   \n   <span class=\"token function\">regex_match</span> <span class=\"token punctuation\">(</span> mystr<span class=\"token punctuation\">,</span> cm<span class=\"token punctuation\">,</span> str_expr<span class=\"token punctuation\">,</span> regex_constants<span class=\"token double-colon punctuation\">::</span>match_default <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"the matches are: \"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>sm<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">&lt;&lt;</span> sm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] \"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n \n   cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\447143e708c442f4b45d054e42176080.png\"/><br/> 在上面的程序中，首先，我们使用<code>regex_match</code>函数将字符串<code>\" softwareTesting \"</code>与正则表达式<code>\" (soft)(.*) \"</code>匹配。随后，我们还通过向<code>regex_match</code>传递字符串对象、范围等来演示<code>regex_match</code>的不同变体。</p>\n<h2><a id=\"32_regex_search_111\"></a>3.2 regex_search()</h2>\n<p>函数<code>regex_search()</code>用于在字符串中搜索匹配正则表达式的模式。</p>\n<p>考虑下面的c++程序，它显示了<code>regex_search()</code>的用法。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span> </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;regex&gt;</span> </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h&gt;</span> </span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> \n   \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token comment\">//string to be searched</span>\n    string mystr <span class=\"token operator\">=</span> <span class=\"token string\">\"She sells_sea shells in the sea shore\"</span><span class=\"token punctuation\">;</span> \n   \n    <span class=\"token comment\">// regex expression for pattern to be searched </span>\n    regex <span class=\"token function\">regexp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s[a-z_]+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n   \n    <span class=\"token comment\">// flag type for determining the matching behavior (in this case on string objects)</span>\n     smatch m<span class=\"token punctuation\">;</span> \n   \n    <span class=\"token comment\">// regex_search that searches pattern regexp in the string mystr  </span>\n    <span class=\"token function\">regex_search</span><span class=\"token punctuation\">(</span>mystr<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  \n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"String that matches the pattern:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> m<span class=\"token punctuation\">)</span> \n        cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\0646421a170c44b9b26268cc02a08f35.png\"/><br/> 我们先指定一个字符串，然后使用<code>regex</code>对象指定一个正则表达式。这个字符串和<code>regex</code>连同<code>smatch</code>标志类型一起被传递给<code>regex_search</code>函数。该函数在输入字符串中搜索第一个出现的模式，并返回匹配的字符串。</p>\n<h2><a id=\"33_regex_replace_144\"></a>3.3 regex_replace()</h2>\n<p>函数<code>regex_replace()</code>用于用字符串替换与正则表达式匹配的模式。</p>\n<p>让我们使用一个c++程序来演示<code>regex_replace()</code>函数。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span> </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span> </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;regex&gt;</span> </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iterator&gt;</span> </span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> \n   \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>  \n    string mystr <span class=\"token operator\">=</span> <span class=\"token string\">\"This is software testing Help portal \\n\"</span><span class=\"token punctuation\">;</span> \n     \n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Input string: \"</span><span class=\"token operator\">&lt;&lt;</span>mystr<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n       \n    <span class=\"token comment\">// regex to match string beginning with 'p' </span>\n    regex <span class=\"token function\">regexp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p[a-zA-z]+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Replace the word 'portal' with word 'website' : \"</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// regex_replace() for replacing the match with the word 'website'  </span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">regex_replace</span><span class=\"token punctuation\">(</span>mystr<span class=\"token punctuation\">,</span> regexp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"website\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n     \n    string result<span class=\"token punctuation\">;</span> \n       \n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Replace the word 'website' back to 'portal': \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// regex_replace( ) for replacing the match back with 'portal' </span>\n    <span class=\"token function\">regex_replace</span><span class=\"token punctuation\">(</span><span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mystr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mystr<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                  regexp<span class=\"token punctuation\">,</span>  <span class=\"token string\">\"portal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n   \n    cout <span class=\"token operator\">&lt;&lt;</span> result<span class=\"token punctuation\">;</span> \n   \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\8406b46cfd42400097e499e7cef40bb6.png\"/><br/> 这里，我们有一个输入字符串。我们提供了一个正则表达式来匹配以 <code>p</code> 开头的字符串。然后我们将匹配的单词替换为<code>website</code>。接下来，我们将<code>website</code>替换回<code>portal</code>。</p>\n<h1><a id=\"4C_182\"></a>4.C++输入验证</h1>\n<p>我们已经讨论了使用<code>regex</code>进行模式匹配的主要函数模板。值得注意的是，<code>regex</code>服务的主要目的是输入验证。可以使用<code>regex</code>表达式验证从标准输入设备输入的输入。</p>\n<p>检查下面的程序，以演示如何使用<code>regex</code>验证传入的数据。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;regex&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    string input<span class=\"token punctuation\">;</span>\n    regex <span class=\"token function\">integer_expr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\\\\+|-)?[[:digit:]]+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//As long as the input is correct ask for another number</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Enter the input: \"</span><span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">&gt;&gt;</span>input<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//Exit when the user inputs q</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">==</span><span class=\"token string\">\"q\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">regex_match</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span>integer_expr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Input is an integer\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Invalid input : Not an integer\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\43a707d819164f019647622d487f0cc9.png\"/><br/> 这个程序匹配用户输入的输入，以验证它是否是整数。上面的输出显示，当输入一个整数时，它会给出一个适当的消息，而当输入任何其他数据时，它会将该消息作为无效输入。</p>\n<h1><a id=\"5_216\"></a>5.总结</h1>\n<p><code>Regex</code>在搜索引擎中用于搜索模式，搜索和替换应用程序的对话框，如字处理器和文本编辑器。<code>Regex</code>也用于UNIX实用程序，如<code>sed、awk</code>以及程序的词法分析。</p>\n<p>在本教程中，我们已经看到了用于匹配、搜索和替换模式的函数。使用这些函数，我们基本上可以开发一个高效的应用程序，使用<code>regex</code>实现所需的功能。</p>\n<p><code>Regex</code>允许通过修补模式有效地验证输入或搜索并替换字符串，这可以使用很少的行来完成。</p>\n<h1><a id=\"_223\"></a>参考目录</h1>\n<p><a href=\"https://www.softwaretestinghelp.com/regex-in-cpp/\">https://www.softwaretestinghelp.com/regex-in-cpp/</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}