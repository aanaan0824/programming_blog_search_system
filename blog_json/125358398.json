{"blogid": "125358398", "writerAge": "码龄174天", "writerBlogNum": "14", "writerCollect": "9", "writerComment": "2", "writerFan": "1", "writerGrade": "2级", "writerIntegral": "153", "writerName": "小镇驿站", "writerProfileAdress": "writer_image\\profile_125358398.jpg", "writerRankTotal": "96630", "writerRankWeekly": "595208", "writerThumb": "1", "writerVisitNum": "3932", "blog_read_count": "1838", "blog_time": "于 2022-06-19 19:54:34 发布", "blog_title": "初识C语言---野指针", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><span style=\"color:#0d0016;\"><strong><span style=\"background-color:#fe2c24;\"> 野指针概念</span></strong></span>： 野指针就是指针指向的位置是不可知的（随机的、不正确的、没有明确限制的）。</p>\n<p> </p>\n<h1><span style=\"color:#fe2c24;\"> 一、野指针成因</span></h1>\n<p><span style=\"color:#956fe7;\"><strong>1、指针未初始化就使用</strong></span></p>\n<blockquote>\n<p></p>\n<pre><code class=\"language-cs\">#include&lt;stdio.h&gt;\nint main()\n{\n\tint* p;                       \n\t*p = 10;  \n\t\n\treturn 0;\n}\n</code></pre>\n<p>此段代码中，局部变量p未初始化，也就意味着p为随机值没有方向，*p就会非法访问内存空间，此时p就为野指针。</p>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#0d0016;\"><span style=\"background-color:#fe2c24;\"><strong>有效改善方法：</strong> </span>   </span><span style=\"color:#fe2c24;\"><strong>初始化为空指针。</strong></span>如果定义指针的时候实在不知道赋什么值，可以先将其定义为空指针，即int*p=NULL;，NULL是代表空指针的意思，后面如果用到指针的话再让指针指向具有实际意义的地址，然后通过指针的解引用改变其指向的内容。</p>\n<pre><code class=\"language-cs\">#include&lt;stdio.h&gt;\nint main()\n{\n\tint* p=NULL;\n\t\n\n\tint b = 8;\n\tp = &amp;b;         \n\t*p = 100;\n    printf(\"%d\",*p);\n\treturn 0;\n}\n</code></pre>\n</blockquote>\n<p><span style=\"color:#956fe7;\"><strong>2、指针越界访问</strong></span> </p>\n<blockquote>\n<pre><code class=\"language-cs\">#include&lt;stdio.h&gt;\nint main()\n{\n\tint arr[10] = { 0 };\n\tint i = 0;\n\tint* p = arr;\n\tfor (i = 0; i &lt;= 10; i++)\n\t{\n\t\t*p = i;                   //i=10时越界\n\t}\n\treturn 0;\n}\n\n\n</code></pre>\n<p> <img alt=\"\" height=\"443\" src=\"image\\07ae20f8e8f4476d919becf9a6491985.png\" width=\"1200\"/></p>\n<p> arr整型数组，有10个元素，初始化元素值为0，arr数组名表示首元素地址传给了指针p，通过对指针解引用改变数组元素值，当i=10时，此时*p访问的内存空间不在数组有效范围内，，此时*p就属于非法访问内存空间，p为野指针</p>\n</blockquote>\n<p> </p>\n<p></p>\n<p><span style=\"color:#956fe7;\"><strong>3、指针指向空间的释放、</strong></span></p>\n<blockquote>\n<p></p>\n<pre><code class=\"language-cs\">#include&lt;stdio.h&gt;\nint* test()\n{\n\tint a = 10;\n\treturn &amp;a;          //&amp;a=0x0012ff40\n}\nint main()\n{\n\tint* p = test();\n\treturn 0;\n}\n</code></pre>\n<p>程序开始后首先进入主函数，执行第一步，调用test函数将返回值赋给p,test函数的返回值是局部变量a的地址，假设a的地址为0x0012ff40,由于a只在test函数内有效，出了test函数其内存空间就被释放，也就意味着a的地址编号不存在，短时间内如果再次利用这块地址，它的值还未被改变也就是0x0012ff40还存在，p的值为0x0012ff40，但此时p为野指针，因为p里面所存放的地址是无效的。</p>\n</blockquote>\n<h1><span style=\"color:#fe2c24;\">二、 野指针的避免</span></h1>\n<blockquote>\n<p>1. 指针初始化<br/> 2. 小心指针越界<br/> 3. 指针指向空间释放即使置NULL<br/> 4. 避免返回局部变量的地址<br/> 5. 指针使用之前检查有效性</p>\n</blockquote>\n<p><strong><span style=\"color:#956fe7;\"> </span></strong></p>\n<h1><span style=\"color:#fe2c24;\"><strong> 三、关于内存空间释放的补充</strong></span></h1>\n<p></p>\n<p> <strong><span style=\"color:#0d0016;\"><span style=\"background-color:#fe2c24;\">代码：</span></span></strong></p>\n<pre><code class=\"language-cs\">\n#include&lt;stdio.h&gt;\nint* test()\n{\n\tint a = 10;\n\treturn &amp;a;\n}\nint main()\n{\n\tint* p = test();\n\tprintf(\"%d\", *p);\n\treturn 0;\n}</code></pre>\n<p><strong><span style=\"color:#0d0016;\"><span style=\"background-color:#fe2c24;\"> 运行结果：</span></span></strong></p>\n<p><img alt=\"\" height=\"154\" src=\"image\\0ee16763a79045f696b2dbf6ce2f6f89.png\" width=\"924\"/> </p>\n<p><strong><span style=\"color:#0d0016;\"><span style=\"background-color:#fe2c24;\"> 分析：</span></span></strong></p>\n<blockquote>\n<p><img alt=\"\" height=\"436\" src=\"image\\0c2a8d5dce4e40e3a17d252032bd432d.png\" width=\"1180\"/></p>\n<p>由于a是test函数内的局部变量，而局部变量只有被调用时才会为其分配内存空间，所以进入主函数但未进入test函数时变量a没有内存空间，如上图所示</p>\n<p><img alt=\"\" height=\"476\" src=\"image\\51f05fe59b6b4a058ebb3874334cf87e.png\" width=\"1000\"/></p>\n<p> 主函数的第一步首先调用test函数，进入test函数后执行到局部变量的定义时就会为其分配内存空间，如上图所示</p>\n<p> ​​​​​​​<img alt=\"\" height=\"468\" src=\"image\\b957974e76cf427cb8d6e24fcbefdab6.png\" width=\"951\"/></p>\n<p> 通过对变量的赋值进而对内存空间赋予编号地址，如上图所示</p>\n<p> </p>\n<p><img alt=\"\" height=\"268\" src=\"image\\269c9c5711d1470d8c35802312c0f352.png\" width=\"1112\"/></p>\n<p> test函数将局部变量a(int占4个字节)的地址返回给p，即p=0x005BF850，如上图所示</p>\n<p> </p>\n<p><img alt=\"\" height=\"498\" src=\"image\\17d2706bb404456a8e09546e81417014.png\" width=\"997\"/></p>\n<p></p>\n<p><img alt=\"\" height=\"294\" src=\"image\\b3e403c126b14875a1f062b177da17fd.png\" width=\"1200\"/></p>\n<p>  由于test函数运行完后test函数内的局部变量所占的内存空间会被释放，即a的内存空间编号0x005BF850不存在，但那块地址还是在的只不过不属于a了,如果没有其他函数调用这块地址，那块地址的名称暂时可能还是0x005BF850 ，观察图中内存窗口程序执行到p定义那一行时内存并未发生变化因为暂无其他函数使用这块空间，如上图所示</p>\n<p></p>\n<p>所以进行printf函数时打印p所指向的内容*p时还为10，但此时p为非法访问内存空间，为野指针。但如果在打印之前有其他函数调用了这块地址，这块地址的名称就会发生变化，不再是0x005BF850，打印p所指向的内容*p时不再为10。</p>\n<p><img alt=\"\" height=\"475\" src=\"image\\763dff6c6add4cc2862afa54670d14d3.png\" width=\"1010\"/></p>\n<p> 观察图中内存窗口可以发现，执行完printf(\"%d\", *p);后内存发生了变化</p>\n</blockquote>\n<p><span style=\"color:#0d0016;\"><strong><span style=\"background-color:#fe2c24;\">代码：</span></strong></span></p>\n<p> </p>\n<pre><code class=\"language-cs\">#include&lt;stdio.h&gt;\nint* test()\n{\n\tint a = 10;\n\treturn &amp;a;\n}\nint main()\n{\n\tint* p = test();\n\tprintf(\"Hello\\n\");\n\tprintf(\"%d\", *p);\n\treturn 0;\n}</code></pre>\n<pre><code class=\"language-cs\">#include&lt;stdio.h&gt;\nint* test()\n{\n\tint a = 10;\n\treturn &amp;a;\n}\nint main()\n{\n\tint* p = test();\n\tprintf(\"Hello\\n\");\n\tprintf(\"Welcome!\\n\");\n\tprintf(\"%d\", *p);\n\treturn 0;\n}\n\n\n</code></pre>\n<p> </p>\n<p></p>\n<p><span style=\"color:#0d0016;\"><strong><span style=\"background-color:#fe2c24;\"> 运行结果：</span></strong></span></p>\n<p><img alt=\"\" height=\"182\" src=\"image\\93db6e077aa944f2b21d15474546b7b4.png\" width=\"911\"/></p>\n<p> <img alt=\"\" height=\"204\" src=\"image\\3965840d0e314d5ca95a850d2f43b076.png\" width=\"982\"/></p>\n<p> </p>\n<p><span style=\"color:#0d0016;\"><strong><span style=\"background-color:#fe2c24;\"> 分析：</span></strong></span> </p>\n<blockquote>\n<p>由于进行printf函数打印p所指向的内容*p之前，Hello利用了那块儿内存，使得那块儿内存的名字不再是0x005BF850,变成了Hello地址的编号，所以打印p所指向的内容*p时的值不再是10，此时就为随机值了。<img alt=\"\" height=\"479\" src=\"image\\11fa787b910e4cb4beab442c4f859cb6.png\" width=\"936\"/></p>\n<p> 观察图中数据可以发现，程序执行完printf(\"Hello\\n\");时内存单元就发生了变化，是因此printf函数调用了内存，使得p的值发生了变化，*p也随着变化。</p>\n<p></p>\n<p><img alt=\"\" height=\"481\" src=\"image\\8ff70af928a744e1904f330ed0008c9c.png\" width=\"1015\"/></p>\n<p>再执行完printf(\"Welcome!\\n\");时内存单元又发生了变化，是因此printf函数调用了内存使得p的值发生了变化，*p也随着变化。</p>\n<p><img alt=\"\" height=\"481\" src=\"image\\ba521a873ef846069266e70f73d862ad.png\" width=\"883\"/></p>\n<p> </p>\n<p> 执行完printf(\"%d\", *p);时内存单元又发生了变化，是因此printf函数调用了内存使得p的值发生了变化，*p也随着变化。</p>\n</blockquote>\n</div>\n</div>"}