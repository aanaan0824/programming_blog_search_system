{"blogid": "126200392", "writerAge": "码龄1年", "writerBlogNum": "91", "writerCollect": "6699", "writerComment": "12541", "writerFan": "13071", "writerGrade": "7级", "writerIntegral": "19618", "writerName": "微凉秋意", "writerProfileAdress": "writer_image\\profile_126200392.jpg", "writerRankTotal": "415", "writerRankWeekly": "1", "writerThumb": "7505", "writerVisitNum": "122061", "blog_read_count": "616", "blog_time": "已于 2022-08-13 19:45:21 修改", "blog_title": "【Rust指南】快速入门|开发环境|hello world", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0bd668bffeb048f59ffaf7ccadbf6191.png\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#emspemsp_4\">  前言</a></li><li><a href=\"#Rust_8\">一、Rust语言的背景和特点</a></li><li><ul><li><a href=\"#1Rust_9\">1、为什么要用Rust？</a></li><li><a href=\"#2_16\">2、与其他编程语言相比较</a></li><li><a href=\"#3Rust_23\">3、Rust特别擅长的领域</a></li><li><a href=\"#4Rust_30\">4、Rust的用户和案例</a></li><li><a href=\"#5Rust_36\">5、Rust的优缺点</a></li></ul>\n</li><li><a href=\"#Rust_45\">二、Rust的安装与开发工具</a></li><li><ul><li><a href=\"#1Rust_46\">1、安装Rust</a></li><li><a href=\"#2_58\">2、开发工具</a></li></ul>\n</li><li><a href=\"#hello_world_71\">三、编写hello world</a></li><li><ul><li><a href=\"#1hello_world_72\">1、从零到一打印hello world</a></li><li><a href=\"#2_85\">2、代码与运行过程分析</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"emspemsp_4\"></a>  前言</h1>\n<p>  本篇博客是Rust语言系列的开篇之作，以后有关Rust语言的文章也都会收录在我的 <strong>《进军Rust》</strong> 专栏里，我会精心打造这个专栏，帮助大家快速入门Rust语言，享受Rust语言带来的编程乐趣。虽然Rust相比其他语言入门慢，但这恰巧说明了Rust语言的特色——安全高效。对Rust语言感兴趣的朋友可以订阅此专栏，我将会持续输出Rust语言编程技能。</p>\n<hr/>\n<h1><a id=\"Rust_8\"></a>一、Rust语言的背景和特点</h1>\n<h2><a id=\"1Rust_9\"></a>1、为什么要用Rust？</h2>\n<ol><li><strong>Rust</strong> 是一种令人兴奋的新编程语言，它可以让开发者编写可靠且高效的软件。</li><li>它可以用来替换C/C++，这是因为Rust具有和他们同样的性能，但是<strong>使用Rust可以将很多常见Bug消灭在编译阶段</strong>。</li><li>Rust是一种通用的编程语言，而且更善于以下场景： \n  <ul><li>高效率</li><li>内存安全</li><li>更好的利用多处理器</li></ul> </li></ol>\n<h2><a id=\"2_16\"></a>2、与其他编程语言相比较</h2>\n<ul><li>C/C++性能很好，但是系统类型和内存都不太安全。</li><li>Java/C#，拥有GC机制，能保证内存安全，特性也优秀，但是性能不行</li><li>Rust： \n  <ul><li>安全</li><li>无需GC</li><li>代码安全高效，易于维护、调试</li></ul> </li></ul>\n<h2><a id=\"3Rust_23\"></a>3、Rust特别擅长的领域</h2>\n<ol><li>高性能Web Service</li><li>WebAssembly</li><li>命令行工具</li><li>网络编程</li><li>嵌入式设备</li><li>系统编程</li></ol>\n<h2><a id=\"4Rust_30\"></a>4、Rust的用户和案例</h2>\n<ul><li>Google：新操作系统Fuschia，其中Rust代码量约占30%</li><li>Amazon：基于Linux开发的直接可以在裸机、虚机上运行容器的操作系统</li><li>System76：纯Rust开发了下一代安全操作系统Redox</li><li>斯坦福和密歇根大学：嵌入式实时操作系统</li><li>微软：正在使用Rust重写Windows系统中的一些低级组件以及开设Rust项目</li></ul>\n<h2><a id=\"5Rust_36\"></a>5、Rust的优缺点</h2>\n<ul><li>优点： \n  <ul><li>高性能</li><li>安全性</li><li>无所畏惧的并发(高并发)</li></ul> </li><li>缺点： \n  <ul><li>“难学”</li><li>Rust有很多独有的概念，和现在大多主流语言不同 \n    <ul><li>所以想学好这门语言必须从基础概念一步一步学，不要好高骛远</li></ul> </li></ul> </li></ul>\n<h1><a id=\"Rust_45\"></a>二、Rust的安装与开发工具</h1>\n<h2><a id=\"1Rust_46\"></a>1、安装Rust</h2>\n<ul><li>官网链接：<a href=\"https://www.rust-lang.org/\">https://www.rust-lang.org/</a></li><li>流程：点击<code>GET STARTED</code>，跳转后根据电脑选择对应版本(32or64)<br/> 下载完成后是一个可执行文件，双击后出现以下页面：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\80f87e7037a14d54befc2545fe4ab7eb.png\"/><br/> 这里选择<code>1</code>默认安装即可，路径在图片的第二行位置，需要一小会时间来自动安装</li><li>常用命令 \n  <ul><li>安装验证：<code>rustc --version</code></li><li>更新：<code>rustup update</code></li><li>卸载：<code>rustup self uninstall</code></li><li>本地文档：<code>rustup doc</code>\n<ul><li>可在浏览器打开本地文档(离线可使用)</li></ul> </li></ul> </li></ul>\n<h2><a id=\"2_58\"></a>2、开发工具</h2>\n<p><em>两种供选择的工具：</em></p>\n<ol><li>Visual Stduio Code \n  <ul><li>Rust 插件</li></ul> </li><li>Clion（Intellij Idea 系列） \n  <ul><li>Rust 插件</li></ul> </li></ol>\n<blockquote>\n<p><strong>博主选择的是Visual Stduio Code，并安装Rust插件（也叫扩展）</strong></p>\n</blockquote>\n<p><em>安装插件：</em></p>\n<ul><li>在Vsc扩展里搜索Rust<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6e1e29d5f49d47869f675d8ae44c8ff1.png\"/></li></ul>\n<blockquote>\n<p><strong>第一个被舍弃了，所以安装 <code>rust-analyzer</code></strong> 这个插件</p>\n</blockquote>\n<h1><a id=\"hello_world_71\"></a>三、编写hello world</h1>\n<h2><a id=\"1hello_world_72\"></a>1、从零到一打印hello world</h2>\n<p><code>hello world</code>是我们接触新语言中的”元老级人物“了，那么该怎样进行编写呢？</p>\n<p>我们先把文件创建好，就比如在根目录创建<code>RustProgram</code>文件夹，然后进入黑窗口中：</p>\n<ol><li>可以在此处创建项目并进入Vsc：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\bca717e6bbb14f148a28ebf762a71d22.png\"/></li><li>然后在资源管理器处新建文件<code>hello_world.rs</code>，并敲入代码：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\23760e76a87644018805184fec8be115.png\"/></li><li>在黑窗口有序输入<code>rustc hello_world.rs</code>和<code>hello_world</code>：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3e69ed6317044883816f5d3ad3e888ab.png\"/></li><li>此时Vsc中自动生成了其他文件：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\46efa078146d4a0eaa6b2d9a12cdab2c.png\"/></li></ol>\n<blockquote>\n<p>对于文件命名我们习惯上用<code>_</code>下划线连接，Rust文件后缀名必须是<code>.rs</code></p>\n</blockquote>\n<h2><a id=\"2_85\"></a>2、代码与运行过程分析</h2>\n<p><em>Rust代码解析：</em></p>\n<ul><li>定义函数：<code>fn main(){}</code>\n<ul><li>无参，无返回值</li></ul> </li><li>main 函数是程序的入口，也是每个Rust可执行程序中最先运行的代码</li><li>打印文本 \n  <ul><li>Rust 的缩进是4个空格而不是制表符tab键</li><li><code>println!</code> 是Rust的一个macro(宏，有关知识后续文章会写)</li><li>其余代码跟C语言一致，别忘了以<code>;</code>结尾</li></ul> </li></ul>\n<hr/>\n<p><em>Rust程序的编译和运行：</em></p>\n<ul><li>首先要知道编译和运行是单独的两步</li><li>运行Rust程序前必须先编译，命令为： \n  <ul><li><code>rustc 文件名.rs</code></li></ul> </li><li>编译成功后会生成一个二进制文件 \n  <ul><li>在Windows上还会生成一个 <code>.pdb</code>文件 ，里面包含调试的信息</li></ul> </li><li>Rust是 <code>ahead-of-time</code> 编译语言 \n  <ul><li>可以先编译程序，然后把生成的可执行文件交给别人运行（无需安装Rust）</li></ul> </li></ul>\n<hr/>\n<p><code>本文到此结束，下篇将更新Cargo工具的使用，领略Cargo的魅力</code></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}