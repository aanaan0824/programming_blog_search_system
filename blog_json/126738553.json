{"blogid": "126738553", "writerAge": "码龄5年", "writerBlogNum": "39", "writerCollect": "125", "writerComment": "39", "writerFan": "19", "writerGrade": "3级", "writerIntegral": "677", "writerName": "honor_zhang", "writerProfileAdress": "writer_image\\profile_126738553.jpg", "writerRankTotal": "1675474", "writerRankWeekly": "98731", "writerThumb": "45", "writerVisitNum": "36317", "blog_read_count": "94", "blog_time": "于 2022-09-07 11:49:05 发布", "blog_title": "利用Jpom在线构建部署Vue项目", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>引言</h1>\n<p>对于中小企业来说（我现在所在的企业），代码版本管理，服务在线构建部署是一个很头疼的事情，我目前所在公司，版本管理全手动（自己改了什么文件，记录下来，打包时整个文件拷贝），测试环境到生产环境的打包构建全靠人工复制，不仅效率低下，且容易出错，生产环境还需要重新测试，苦不堪言。</p>\n<p>一天上班地铁上，关注的公众号推送一个中国的开源社区<a href=\"https://gitee.com/dromara\" title=\"dromara: https://dromara.org\">dromara: https://dromara.org</a></p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"373\" src=\"image\\56e7bd150617479ba157190ad36976fc.png\" width=\"540\"/></p>\n<p>社区孵化了一些自己的项目，其中介绍了Jpom,<a href=\"https://gitee.com/dromara/Jpom\" title=\"Jpom: 简而轻的低侵入式在线构建、自动部署、日常运维、项目监控软件\">Jpom: 简而轻的低侵入式在线构建、自动部署、日常运维、项目监控软件</a></p>\n<p><img alt=\"\" height=\"827\" src=\"image\\bcc83c69c3a24c3393b3ab84868aed4d.png\" width=\"804\"/></p>\n<p> 一直在研究其文档，最近有时间付诸于行动，实际部署了一个简单的Vue项目，把大致流程搞明白了。</p>\n<h1>技术栈</h1>\n<p>1.Jpom，简而轻的低侵入式在线构建、自动部署、日常运维、项目监控软件。这是本文的主角。相对于Jenkins来说，个人理解Jpom更轻量，更适合中小企业的构建部署。这也是Jpom自己的定位。</p>\n<p>2.docker，对于这篇博客，docker用来部署Nginx服务。</p>\n<p>3.Nginx，Web服务器。</p>\n<p>4.Vue，前端框架，前端整个服务基于Vue2框架，对于前端技术，需要学习的地方还很多。</p>\n<h1>环境</h1>\n<p>机缘巧合之下，薅羊毛搞了一个华为云主机，配置：</p>\n<p>型号（规格）2 核 4 GB</p>\n<p>云硬盘 系统盘:  40 GB 高IO</p>\n<p>镜像信息 Ubuntu 20.04 server 64bit</p>\n<p>带宽 1 Mbit/s 带宽</p>\n<h1>实践</h1>\n<p>Jpom文档<a href=\"https://jpom.top/pages/practice/simple-solution-01/\" title=\"基于 Jpom 搭建应用部署系统 | Jpom\">基于 Jpom 搭建应用部署系统 | Jpom</a>每一步都写的比较清楚，以下步骤中，我不会写的特别详细，主要的部分是说明遇到的坑。</p>\n<h2>1.安装Jpom</h2>\n<p>Jpom分为服务端Jpom-server与Jpom-agent插件端，服务端运行Jpom服务，负责服务的构建部署，插件端负责服务器节点的管理。</p>\n<p>服务端插件端安装较简单，直接执行命令即可。</p>\n<p><span style=\"color:#fe2c24;\"><strong>note</strong></span></p>\n<p>1.服务端插件端不能安装在同一目录，在安装的时候，插件端与服务端需要填写服务安装目录，如果是同一服务器，填写不同的安装目录</p>\n<p>2.服务端需要以root用户运行，否则在服务发布的时候，会报权限错误。</p>\n<p><img alt=\"\" height=\"210\" src=\"image\\ce9dce908cfb4bf0a26df071cee78319.png\" width=\"1200\"/></p>\n<p>服务端命令</p>\n<pre><code class=\"language-bash\">apt install -y wget &amp;&amp; \\\nwget -O install.sh https://jpom.top/docs/install.sh &amp;&amp; \\\nbash install.sh Server jdk</code></pre>\n<p>插件端命令</p>\n<pre><code class=\"language-bash\"># ubuntu\napt install -y wget &amp;&amp; \\\nwget -O install.sh https://jpom.top/docs/install.sh &amp;&amp; \\\nbash install.sh Agent jdk</code></pre>\n<p>安装完成后，服务器开放端口2122与2123，打开界面如下：</p>\n<p><img alt=\"\" height=\"856\" src=\"image\\9e6c175da123444692a315cfe72773e1.png\" width=\"1200\"/></p>\n<h2>2.添加节点信息</h2>\n<p> 添加agent服务所在节点信息进行管理，本博客服务器与插件在相同节点，节点地址直接填写127.0.0.1:2123即可。添加完成后如下：</p>\n<p><img alt=\"\" height=\"273\" src=\"image\\b5e74bba504047719d9588b504b09d0f.png\" width=\"1200\"/></p>\n<p> 点击管理界面，进入节点管理主界面。</p>\n<p><img alt=\"\" height=\"870\" src=\"image\\7ebcb2d4047b469cb8d0695af45ce54c.png\" width=\"1200\"/></p>\n<p>点击系统管理，进行白名单设置，在后面项目部署的时候，构建完成的文件会复制到设置的白名单目录下（项目路径）。</p>\n<p> <img alt=\"\" height=\"839\" src=\"image\\92fd27eb8bc24f7c9e2ffed820f9d30c.png\" width=\"1200\"/></p>\n<h2>3.添加仓库信息</h2>\n<p> 本博客添加的码云的仓库，选择HTTPS协议。</p>\n<p><img alt=\"\" height=\"583\" src=\"image\\cbd1985840b2464b8608ef99ccac3952.png\" width=\"869\"/></p>\n<p> 添加完成后的界面</p>\n<p><img alt=\"\" height=\"203\" src=\"image\\849ff5ce1e904d46a43c0188dc6e4717.png\" width=\"1200\"/></p>\n<p><span style=\"color:#fe2c24;\"><strong>note</strong></span></p>\n<p> 服务器server与git仓库连接需要添加SSH公钥，做一个绑定，否侧仓库添加不上。具体操作步骤<a href=\"https://blog.csdn.net/lqlqlq007/article/details/78983879\" title=\"git ssh key配置_讨厌走开啦的博客-CSDN博客_git ssh\">git ssh key配置_讨厌走开啦的博客-CSDN博客_git ssh</a></p>\n<h2>4.添加构建信息</h2>\n<p><img alt=\"\" height=\"965\" src=\"image\\59b32f283a854e3d9b1fd1e8967cabb7.png\" width=\"1158\"/></p>\n<p>如图所示，框1构建命令根据自己的项目实际填写，框2为步骤2设置的信息。 </p>\n<p>添加构建信息完成后，如下图所示</p>\n<p><img alt=\"\" height=\"256\" src=\"image\\5a41645c6a984c8b98fd5d586be31208.png\" width=\"1200\"/></p>\n<h2>5.开始构建</h2>\n<p>构建中，遇到的问题主要为没有以root权限运行Jpom服务，出了错误，构建了很多次才成功。</p>\n<p><img alt=\"\" height=\"520\" src=\"image\\a47627c784ac461582af2eecca139b38.png\" width=\"1200\"/></p>\n<p>第9次构建成功的日志</p>\n<p><img alt=\"\" height=\"732\" src=\"image\\388aa22cd55a4d61b94ba80ef7809d28.png\" width=\"1200\"/></p>\n<p>构建成功后产物目录</p>\n<p><img alt=\"\" height=\"571\" src=\"image\\5aec386b243447f38fdc4cc049f84ea7.png\" width=\"1200\"/> </p>\n<h2>6.配置NGINX文件，暴露服务</h2>\n<p>NGINX以docker容器方式运行，所以，重要的是在启动NGINX容器时，文件的挂载。这里放上启动NGINX容器的命令。</p>\n<pre><code class=\"language-bash\">docker run -d -p 80:80 -p 443:443 --name nginx --restart=always -e TZ=\"Asia/Shanghai\" \\\n-v /home/server/frontend/haihe-oa-sys-frontend/:/usr/share/nginx/html:ro \\\n-v /home/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\n-v /home/nginx/log:/var/log/nginx nginx</code></pre>\n<p> 其中，可以看到，把/home/server/frontend/haihe-oa-sys-frontend/直接映射到/usr/share/nginx/html。</p>\n<p><img alt=\"\" height=\"616\" src=\"image\\e9ec6df7e68249b4b6f68157d73885d3.png\" width=\"685\"/></p>\n<h2>7.打开浏览器，验证部署是否成功</h2>\n<p><img alt=\"\" height=\"916\" src=\"image\\c990856dd992407c87f331d63cd2a2d6.png\" width=\"1200\"/> </p>\n<h1>写在最后</h1>\n<p> 本篇博客算是对于Jpom有了基本的入门，后面还有很多细研究的地方，主要是日志管理与监控管理，随着应用深入，产物希望以博客的形式分享出来。</p>\n<p>从知道Jpom项目的存在，到这篇博客的问世，中间经历了大半年的时间，买了一个云服务器，也闲置了三个月，现在是终于有点时间折腾了，自己还是挺满意的，只要坚持探索，储备的知识有一天终究会用上的。</p>\n<p> </p>\n<p> </p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>"}