{"blogid": "124702060", "writerAge": "码龄2年", "writerBlogNum": "56", "writerCollect": "2913", "writerComment": "2535", "writerFan": "4876", "writerGrade": "6级", "writerIntegral": "7007", "writerName": "天影云光", "writerProfileAdress": "writer_image\\profile_124702060.jpg", "writerRankTotal": "2094", "writerRankWeekly": "17534", "writerThumb": "2273", "writerVisitNum": "53457", "blog_read_count": "2559", "blog_time": "于 2022-05-11 08:39:18 发布", "blog_title": "＜C++＞快来精通C++的“Hello world“写法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/img_convert/ce443cf0ed815eaeea41e46f0c6400f0.gif\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1_C_7\">1. C++是啥</a></li><li><a href=\"#2__15\">2. 命名空间</a></li><li><ul><li><a href=\"#21__99\">2.1 命名空间定义</a></li><li><a href=\"#22__185\">2.2 命名空间使用</a></li></ul>\n</li><li><a href=\"#3_C_263\">3. C++的输入和输出</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1_C_7\"></a>1. C++是啥</h1>\n<p>C语言是结构化和模块化的语言，适合处理较小规模的程序。对于复杂的问题，规模较大的程序，需要高度的抽象和建模时，C语言则不合适。<br/> 为了解决软件危机， 20世纪80年代， 计算机界提出了<strong>OOP(objectoriented programming：面向对象)思想</strong>，支持面向对象的程序设计语言应运而生。1982年，Bjarne Stroustrup博士在C语言的基础上引入并扩充了面向对象的概念，发明了一种新的程序语言。为了表达该语言与C语言的渊源关系，命名为C++。<br/> <strong>因此：C++是基于C语言而产生的，它既可以进行C语言的过程化程序设计，又可以进行以抽象数据类型为特点的基于对象的程序设计，还可以进行面向对象的程序设计。</strong></p>\n<p>C++是可以兼容C语言语法的，它同时也有自己独有的新内容，今天，就来初步了解一下C++。</p>\n<h1><a id=\"2__15\"></a>2. 命名空间</h1>\n<p>老样子，先从精通C++的“Hello world！“写法开始。</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//endl是换行</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>你是否曾经有那么一丢丢的疑惑<code>using namespace std;</code>是干啥的？</p>\n<p>稍等，我们再看几个例子，铺垫铺垫：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span><span class=\"token comment\">//里面有个叫rand的函数</span></span>\n\n<span class=\"token keyword\">int</span> rand <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> rand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20220502111326193\" src=\"image\\343675a66f22e2ccd55ba60e92c9efcd.png\"/></p>\n<p>因为&lt;stdlib.h&gt;里面有个叫rand的函数因此我们定义的变量重名了。</p>\n<p>为了解决命名冲突问题，CPP引入namespace命名空间定义</p>\n<p><font color=\"#DC143C\"><strong>定义命名空间</strong>，需要使用到namespace<strong>关键字</strong>，后面跟<strong>命名空间的名字</strong>，然后接一对{}即可，{}中即为命名空间的成员</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span><span class=\"token comment\">//里面有个叫rand的函数</span></span>\n\n<span class=\"token comment\">//为了解决命名冲突问题，CPP引入namespace</span>\n<span class=\"token comment\">//同一个域里面不能有重名变量</span>\nnamespace cpp<span class=\"token comment\">//命名空间域，这里起名为cpp，本空间与外界空间进行隔离</span>\n<span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">int</span> rand <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> rand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20220502112558635\" src=\"image\\6f344635e26be00f675ee9e55dd64aa9.png\"/></p>\n<p>成功通过了，但这里打印的不是0，而是一串数字。因为这里打印的是函数rand的地址，而不是rand变量的大小（因为rand变量被cpp命名空间关起来了，函数rand和变量rand就不在同一个域了，不会有命名冲突问题）。</p>\n<p>那如果我想要访问变量rand该怎么做呢？我们引入<code>::</code> 域作用限定符，访问cpp命名空间里的rand</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span><span class=\"token comment\">//里面有个叫rand的函数</span></span>\n\n<span class=\"token comment\">//为了解决命名冲突问题，CPP引入namespace</span>\n<span class=\"token comment\">//同一个域里面不能有重名变量</span>\nnamespace cpp<span class=\"token comment\">//命名空间域，这里起名为cpp，本空间与外界空间进行隔离</span>\n<span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">int</span> rand <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> cpp<span class=\"token operator\">::</span>rand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//:: 域作用限定符，::前面是空白就默认全局域</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20220502174334893\" src=\"image\\3b6e1a9a4bd3ae163638a5d9afecf1c9.png\"/></p>\n<h2><a id=\"21__99\"></a>2.1 命名空间定义</h2>\n<p>1️⃣命名空间中的内容既可以定义变量，也可以定义函数和类型</p>\n<pre><code class=\"prism language-c\">namespace tyyg <span class=\"token comment\">// tyyg为命名空间的名称</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 命名空间中的内容，既可以定义变量，也可以定义函数和类型</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span><span class=\"token comment\">//变量</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span><span class=\"token comment\">//函数</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n   \t\t<span class=\"token keyword\">return</span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token comment\">//类型</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>2️⃣命名空间可以嵌套使用，例如：</p>\n<pre><code class=\"prism language-c\">namespace OUT<span class=\"token comment\">//外</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n    namespace IN<span class=\"token comment\">//内</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n        \t<span class=\"token keyword\">return</span> left <span class=\"token operator\">-</span> right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>3️⃣同一个工程中允许存在多个相同名称的命名空间,编译器最后会合成同一个命名空间中。</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//data.h</span>\nnamespace abc\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//a还是全局变量，命名空间不影响生命周期，只是把a隔离开了</span>\n    namespace data\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//cache.h</span>\nnamespace abc\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    namespace cache\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">abc</span><span class=\"token operator\">::</span>data<span class=\"token operator\">::</span>Node n1<span class=\"token punctuation\">;</span>\n    n1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">abc</span><span class=\"token operator\">::</span>cache<span class=\"token operator\">::</span>Node n2<span class=\"token punctuation\">;</span>\n    n2<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>它们在不同的文件中，编译器最后会合成同一个命名空间abc中，为了区分两个Node，我们嵌套了一层命名空间。最后通过<code>::</code>来创建两个不同类型的结构体变量n1和n2。（这里的<code>struct abc::data::Node</code>只是一种类型）</p>\n<h2><a id=\"22__185\"></a>2.2 命名空间使用</h2>\n<p>如果我想简化一下，不想写<code>abc::</code>，我该怎么改呢？</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//data.h</span>\nnamespace abc\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//a还是全局变量，命名空间不影响生命周期，只是把a隔离开了</span>\n    namespace data\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//cache.h</span>\nnamespace abc\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    namespace cache\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//这里的意思是把abc这个命名空间定义的东西放出来</span>\nusing namespace abc<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">data</span><span class=\"token operator\">::</span>Node n1<span class=\"token punctuation\">;</span>\n    n1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cache</span><span class=\"token operator\">::</span>Node n2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cache</span><span class=\"token operator\">::</span>Node n3<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cache</span><span class=\"token operator\">::</span>Node n4<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cache</span><span class=\"token operator\">::</span>Node n5<span class=\"token punctuation\">;</span>\n    n2<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里要用<code>using namespace abc;</code>这个语句，意思是把abc这个命名空间定义的东西放出来。要按顺序从外到内展开，否则会找不到。另外还能<code>using namespace abc::data;</code>这样只展开一部分，只展开abc里的data，不展开abc里的cache。一般我们最好用什么展开什么，以免又引起重名（好不容易搞个命名空间，一放回到解放前）。</p>\n<p>是不是很眼熟？还记得hello world吗，那个<code>using namespace std;</code>也是这个作用。如果我们不加<code>using namespace std;</code>该怎么写？</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token comment\">//using namespace std;//把它注释掉</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstd<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//std是C++标准库的命名空间</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>其实还有一种展开的办法：只放出常用的，<code>using std::cout;</code></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\nusing std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//放出来的，加不加原本的std::都行。没放出来的（t）如果不加原本的命名空间std::就会报错</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"3_C_263\"></a>3. C++的输入和输出</h1>\n<p>比起C语言，C++有着它特有的输入输出方式。其实在前面我们已经多次使用了，就是cin输入和cout输出</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//scanf(\"%d\", &amp;a);</span>\n\t<span class=\"token comment\">// &gt;&gt; 流提取运算符</span>\n\tcin <span class=\"token operator\">&gt;&gt;</span> a<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//printf(\"%d\\n\", a);</span>\n\t<span class=\"token comment\">// &lt;&lt; 流插入运算符</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>说明：</strong><br/> 1️⃣ 使用cout标准输出(控制台)和cin标准输入(键盘)时，必须包含&lt; iostream &gt;头文件以及std标准命名空间。</p>\n<p>⚠️注意：早期标准库将所有功能在全局域中实现，声明在.h后缀的头文件中，使用时只需包含对应头文件即可，后来将其实现在std命名空间下，为了和C头文件区分，也为了正确使用命名空间，规定C++头文件不带.h；</p>\n<p>旧编译器(vc 6.0)中还支持<code>&lt;iostream.h&gt;</code>格式，后续编译器已不支持，因此推荐使用<code>&lt;iostream&gt;+std</code>的方式。<br/> 2️⃣ 使用C++输入输出更方便，不需增加数据格式控制，自动识别类型，比如：整形–%d，字符–%c</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n    \n    cin<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">&gt;&gt;</span>b<span class=\"token operator\">&gt;&gt;</span>c<span class=\"token punctuation\">;</span>\n    \n    cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>b<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>c<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>3️⃣ 如果想要控制浮点数小数点后的位数，建议还是用回C语言的printf吧（C++兼容C语言），cout处理这个会很困难</p>\n<p>4️⃣cin，cout会比scanf，printf慢一些，如果做题时追求速度，建议使用scanf，printf</p>\n<blockquote>\n<p>不知不觉，我们都讲到C++了，未来还有更多内容哦<br/> 滚来滚去……~(～o￣▽￣)～o 。。。滚来滚去……o～(＿△＿o～) ~。。。</p>\n</blockquote>\n<blockquote>\n<p>目前在不断更新<font color=\"#32CD32\">&lt;C++语言&gt;</font>的知识总结，已经更新完了<font color=\"#FFA500\">&lt;C语言&gt;</font><font color=\"#DC143C\">&lt;数据结构&gt;</font>，未来我会系统地更新<font color=\"#40E0D0\">&lt;Linux系统编程&gt;</font><font color=\"#4169E1\">&lt;Linux网络编程&gt;</font><font color=\"#800080\">&lt;MySQL数据库&gt;</font>等内容。想要系统学习编程的小伙伴可以关注我！</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}