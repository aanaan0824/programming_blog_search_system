{"blogid": "124461328", "writerAge": "码龄2年", "writerBlogNum": "1", "writerCollect": "23", "writerComment": "1", "writerFan": "1", "writerGrade": "1级", "writerIntegral": "13", "writerName": "Mr_Luka", "writerProfileAdress": "writer_image\\profile_124461328.jpg", "writerRankTotal": "231895", "writerRankWeekly": "1383869", "writerThumb": "1", "writerVisitNum": "3604", "blog_read_count": "3599", "blog_time": "于 2022-04-27 21:52:41 发布", "blog_title": "全网最详细保姆级VSCode配置C/C++教程（基于官方文档）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>同步自本人微信公众号：程序员修炼日记</p>\n<p></p>\n<p>进行代码编辑时，一个好用且高效的编辑器是非常必要的，本篇文章将基于<strong>VSCode</strong><strong>微软官方文档</strong>，详细地讲述VSCode的配置<strong>C/C++</strong>的过程，按照本文的步骤进行配置，您能够完美解锁一款全新的编辑器，开启高效coding之旅。</p>\n<p></p>\n<p><strong>    Visual Studio Code</strong>（简称“<strong>VSCode</strong>” ）是Microsoft在2015年4月30日Build开发者大会上正式宣布一个运行于 Mac OS X、Windows和 Linux 之上的，针对于编写现代Web和云应用的跨平台源代码编辑器，可在桌面上运行，并且可用于Windows，macOS和Linux。它具有对JavaScript，TypeScript和Node.js的内置支持，并具有丰富的其他语言（例如C++，C＃，Java，Python，PHP，Go）和运行时（例如.NET和Unity）扩展的生态系统，是一款强大的编辑器。</p>\n<p></p>\n<p>    首先，我们要明确一个概念，即<strong>VSCode</strong>从根本上来说，只是一款<strong>文本编辑器</strong>，其之所以能够对多种代码进行编写，是通过<strong>插件、各种包的下载</strong>以及<strong>相关的环境配置</strong>实现的。因此，仅完成下载VSCode，只是迈出了第一步，更重要的是之后的配置工作。</p>\n<p></p>\n<p>    首先，如果您之前下载并且尝试配置过VSCode但是没有成功，或者您想要卸载重装，那么先打开当时VSCode的安装文件夹（名称一般为<strong>Microsoft VS Code</strong>），点击其中名称为<strong>unins000的.exe文件</strong>（卸载程序）进行卸载，卸载完成后删除该文件夹的余下内容（如果没有全部删除干净的话），同时记得<strong>备份</strong>存在该文件夹目录下的代码或工程文件。</p>\n<p>    </p>\n<p style=\"text-align:center;\">    由于这样并不能够删除已存储的扩展或者配置（很多错误都是由于<strong>拓展和配置不当</strong>产生的，通过不卸载干净再重装的方法很难解决），我们再打开C盘，找到用户文件夹下的<strong>.vscode文件</strong>并删除。不同电脑的路径可能不同，我的电脑（win10系统）的路径如下。<img alt=\"\" src=\"image\\dd040ff59ee34863accb18d5c88fc9e8.png\"/></p>\n<p> 接下来，我们打开<strong>AppData</strong>文件夹，点击其中的<strong>Roaming</strong>文件夹并打开，删除其中的<strong>code</strong>和<strong>vscode</strong>文件夹，从而完成彻底的卸载，之后再进行安装就相当于是安装全新的VSCode了。<img alt=\"\" height=\"378\" src=\"image\\ee9e95f1a2d24d0b90930dc7d503caa9.png\" width=\"997\"/></p>\n<p> </p>\n<p>首先给出<strong>VSCode微软官方文档</strong>的链接：</p>\n<p><a href=\"https://code.visualstudio.com/docs/cpp/config-mingw\" title=\"Get Started with C++ and Mingw-w64 in Visual Studio Code\">Get Started with C++ and Mingw-w64 in Visual Studio Code</a></p>\n<p></p>\n<p>下面进入我们的安装教程：</p>\n<p>进入官方文档链接的页面后，我们可以点击右上角的<strong>Download进行VSCode安装包的下载。</strong>下载完成后，打开安装包，我们首先<strong>同意许可协议</strong>，点击下一步。<img alt=\"\" height=\"878\" src=\"image\\2c3db539437a480d8cb4545fbdfb3eb7.png\" width=\"1180\"/></p>\n<p> </p>\n<p>之后会让我们选择安装路径，在这里可以参考我的路径设置，将其存在D盘，以减少C盘（系统盘）的存储量，并将默认路径中文件夹名称”Microsoft VS Code\"的<strong>空格全部替换为\"_\"</strong>，以避免因为文件名包含空格而出现的一些奇怪的错误（实测确实有可能会发生）。<img alt=\"\" height=\"882\" src=\"image\\c602e22dc7c04619929da5894a18e89d.png\" width=\"1189\"/></p>\n<p> 之后进行安装选项的确认，在这里我选择将所有方框打√，注意：最下方“添加到PATH(重启后生效)”选项是必选的，以避免一些不必要的麻烦。<img alt=\"\" height=\"877\" src=\"image\\f0627d28b08b43a882a371f4819831ae.png\" width=\"1176\"/></p>\n<p>随后我们便开始安装，安装完成后，点击完成，并打开VSCode(如果在桌面没有找到，可以点击<strong>开始菜单栏</strong>的<strong>最近添加</strong>寻找）。</p>\n<p></p>\n<p>接下来，我们打开VSCode进行<strong>C/C++</strong>的配置：</p>\n<p></p>\n<p>在打开VSCode时，右下角可能会出现<strong>安装中文语言包</strong>的提示，点击<strong>install</strong>并完成安装后，重启VSCode，我们即可使用汉化之后的VSCode。</p>\n<p></p>\n<p>首先，我们点击左侧菜单栏中从上到下的第四个图标（将鼠标悬浮在上方时，我们可以了解到该项为<strong>拓展商店</strong>），在上方的搜索栏中搜索“C/C++”，并下载出现在第一行的<strong>C/C++拓展</strong>，点击<strong>Install</strong>后，等待一段时间后，下载完成。</p>\n<p> <img alt=\"\" height=\"456\" src=\"image\\810ea4995b2a45cdabc94c6066bd19a5.png\" width=\"1200\"/></p>\n<p> </p>\n<p>接下来，我们暂时不使用VSCode，可将其关闭或者最小化。</p>\n<p></p>\n<p>现在我们有了VSCode以及C/C++的拓展，但是回顾一下之前提到的：<strong>VSCode</strong>从根本上来说，只是一款<strong>文本编辑器</strong>。因此，我们需要下载一个<strong>编译器</strong>并使得VSCode能够通过设置好的路径来使用它对我们写好的代码进行编辑。</p>\n<p></p>\n<p>根据微软官方文档的描述，我们使用<strong>MSYS2</strong>来下载安装<strong>MinGW-x64</strong>编译器，下载网址：<a href=\"https://www.msys2.org/\" title=\"MSYS2\">MSYS2</a></p>\n<p></p>\n<p>打开网址进入界面，我们点击\"<strong>Installation</strong>\"下方第一步中的链接下载安装程序msys2-x86_64-xxxxxxxx.exe(xxxxxxx表示版本更新的日期)。<img alt=\"\" height=\"1200\" src=\"image\\ab3c8c5519bb4bfea034f9eb5265d187.png\" width=\"1200\"/></p>\n<p> 下载完成后，我们打开安装程序，首先会跳出如下界面（不同版本的界面可能不同，但大体相似），选择安装路径（不要在路径中出现<strong>空格、中文</strong>等，原文的描述是short ASCII-only path on a NTFS volume, no accents, no spaces, no symlinks, no subst or network drives, no FAT)。<img alt=\"\" height=\"361\" src=\"image\\f35468513179491fba2c87c61aa69c33.png\" width=\"502\"/></p>\n<p> </p>\n<p>下载过程需要等待一段时间，如果出现询问是否继续，点击肯定的回答即可。在下载完成后，勾选\"Run MSYS2 64bit now\"，打开MSYS2。<img alt=\"\" height=\"361\" src=\"image\\843cb76055384c7ea83679941200bc20.png\" width=\"502\"/></p>\n<p> </p>\n<p>打开之后，会出现一个类似黑框的界面，我们首先输入指令<strong>pacman -Syu</strong>，以更新相关包和库。如果过程中出现类似于\":: Proceed with installation? [Y/N]\"（询问是否继续安装）的提问，输入Y以继续安装即可。<img alt=\"\" height=\"1200\" src=\"image\\6b52ce37bb564e97831093c2ca23decd.png\" width=\"1200\"/></p>\n<p> </p>\n<p>更新完成后，MSYS2可能会自动关闭，此时我们在开始菜单的最近添加中找到<strong>MSYS2 MSYS</strong>，输入<strong>pacman -Su</strong>指令以更新余下的库，当过程中询问是否继续安装时，输入Y即可。<img alt=\"\" height=\"550\" src=\"image\\489be968f6d24cdb807a61355ae65302.png\" width=\"1196\"/></p>\n<p> </p>\n<p>现在MSYS2已经配置完毕，我们现在需要下载ming-w64 GCC来进行编译，输入指令<strong>pacman -S --needed base-devel mingw-w64-x86_64-toolchain</strong>进行下载，当过程中询问是否继续安装时，输入Y即可。<img alt=\"\" height=\"1200\" src=\"image\\1d48029fb6604da8a03abadafd36a3dd.png\" width=\"1168\"/></p>\n<p> </p>\n<p>下载完成后，我们关闭界面，根据之前设置的路径打开msys64文件夹，若其中含有如下文件夹，则说明已成功下载GCC编译器。<img alt=\"\" height=\"719\" src=\"image\\07f0997938eb436e956db30e4269e24c.png\" width=\"1116\"/></p>\n<p> </p>\n<p>我们也可以使用按键<strong>windows+R</strong>，输入<strong>cmd</strong>打开命令行窗口，输入指令<strong>g++ --version</strong>, <strong>gdb --version</strong>，来查看相应版本，若出现类似如下的反馈，则说明安装成功。<img alt=\"\" height=\"403\" src=\"image\\8fc74ff98b30482a9ac9b88a0827c3c0.png\" width=\"795\"/></p>\n<p><img alt=\"\" height=\"610\" src=\"image\\58b3a0dc5b2d4b37bb043f7aad9084ea.png\" width=\"1200\"/>接下来我们需要将编译器添加到<strong>环境变量的路径（PATH）</strong>中，以确保VSCode有找到编译器的路径。我们使用<strong>windows+s</strong>打开搜索框，输入环境变量，打开搜索得到的“编辑系统环境变量”应用。打开之后，我们点击“高级”栏目下方的“环境变量”进入设置：<img alt=\"\" height=\"1089\" src=\"image\\67ed9bc1c4b64c66a01bbdd5b68baab6.png\" width=\"942\"/></p>\n<p>接下来我们需要将编译器添加到<strong>环境变量的路径（PAT</strong>双击下半部分“系统变量”的Path进入编辑。<img alt=\"\" height=\"1181\" src=\"image\\8856ea4eefe04952b8122786c4b0c9bb.png\" width=\"1200\"/> </p>\n<p>在其中点击新建或双击空行，找到之前下载后<strong>msys64文件夹内mingw64中bin文件的路径</strong>，复制并输入，一路点击确定，关闭所有窗口。<img alt=\"\" height=\"1020\" src=\"image\\6ca5375692bb41378b9fcb497b15c12f.png\" width=\"1045\"/></p>\n<p> </p>\n<p>接下来，我们以同样的方式打开cmd，输入gcc -v或g++ -v，若出现类似如下的反馈，则说明添加路径成功。</p>\n<p><img alt=\"\" height=\"724\" src=\"image\\909407b8f1da484cb277a80ffc0154ca.png\" width=\"1200\"/></p>\n<p> </p>\n<h2><strong>· tasks.json</strong></h2>\n<p></p>\n<p>接下来我们开始进行VSCode的配置，首先我们创建一个文件夹HELLOWORLD，并点击VSCode中的File-&gt;open folder，根据创建的路径选中该文件夹打开。打开之后我们单击HELLOWORLD文件夹右侧的New File新建.cpp文件helloworld。<img alt=\"\" height=\"280\" src=\"image\\8fabdcaff0d84fcf9f61d403e820e051.png\" width=\"510\"/></p>\n<p> </p>\n<p><img alt=\"\" height=\"476\" src=\"image\\9996c50c87e34179b7192c541e2b2f5f.png\" width=\"1200\"/>接下来我们输入如下代码，按下<strong>Ctrl+S</strong>保存后（可以在上方<strong>File</strong>栏目下点击<strong>Auto Save</strong>设置自动保存）进行测试：</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n​\nint main()\n{\n​\n    std::cout &lt;&lt; \"Hello World\" &lt;&lt; std::endl;\n​\n}</code></pre>\n<p> </p>\n<p>现在我们有了一个简单的C++程序，接下来需要对其进行build操作。单击<strong>Terminal(终端)-&gt;Configure Default Build Task</strong><img alt=\"\" height=\"766\" src=\"image\\3083c564ad584ac79182573bdb4df9b4.png\" width=\"1200\"/></p>\n<p> </p>\n<p>随后在跳出的选择方框中点击<strong>C/C++: g++.exe build active file</strong> 以<strong>编译 helloworld.cpp</strong> 并创建<strong>可执行文件helloworld.exe</strong><img alt=\"\" height=\"231\" src=\"image\\d6e31fc0d5044b10b5a23cf86b9aca5f.png\" width=\"1200\"/></p>\n<p> </p>\n<p> </p>\n<p>这样，我们会发现在左侧的文件夹栏目中出现了.vscode文件夹，其中含有<strong>tasks.json</strong>文件，我们打开该文件，并输入如下代码：</p>\n<pre><code class=\"language-javascript\">{\n  \"tasks\": [\n    {\n      \"type\": \"cppbuild\",\n      \"label\": \"C/C++: g++.exe build active file\",\n      \"command\": \"D:/msys64/mingw64/bin/g++.exe\",\n      \"args\": [\"-g\", \"${file}\", \"-o\", \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\"],\n      \"options\": {\n        \"cwd\": \"${fileDirname}\"\n      },\n      \"problemMatcher\": [\"$gcc\"],\n      \"group\": {\n        \"kind\": \"build\",\n        \"isDefault\": true\n      },\n      \"detail\": \"compiler: D:/msys64/mingw64/bin/g++.exe\"\n    }\n  ],\n  \"version\": \"2.0.0\"\n}</code></pre>\n<p><strong>注意：其中\"command\": 和 \"detail\": 后的内容需要根据自己电脑中的实际路径修改</strong></p>\n<p></p>\n<h2><strong>· launch.json</strong></h2>\n<p></p>\n<p>接下来，我们进一步进行配置。该配置是针对于程序运行的，点击<strong>Run（运行）-&gt;Add Configuration（添加配置）</strong>，这样会在.vscode文件夹中生成<strong>launch.json</strong>文件，我们打开并输入如下代码：</p>\n<pre><code class=\"language-javascript\">{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"g++.exe - Build and debug active file\",\n      \"type\": \"cppdbg\",\n      \"request\": \"launch\",\n      \"program\": \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\",\n      \"args\": [],\n      \"stopAtEntry\": false,\n      \"cwd\": \"${fileDirname}\",\n      \"environment\": [],\n      \"externalConsole\": false,\n      \"MIMode\": \"gdb\",\n      \"miDebuggerPath\": \"D:\\\\msys64\\\\mingw64\\\\bin\\\\gdb.exe\",\n      \"setupCommands\": [\n        {\n          \"description\": \"Enable pretty-printing for gdb\",\n          \"text\": \"-enable-pretty-printing\",\n          \"ignoreFailures\": true\n        }\n      ],\n      \"preLaunchTask\": \"C/C++: g++.exe build active file\"\n    }\n  ]\n}</code></pre>\n<p><strong>注意：其中\"miDebuggerPath\": 后的内容需要根据自己电脑中的实际路径修改</strong>，<strong>其中\"externalConsole\": false 表明程序运行时的输入和输出的窗口将在界面下方的终端，将其false改为true将在黑框中输入和输出</strong></p>\n<p></p>\n<h2><strong>· c_cpp_properties.json</strong></h2>\n<p></p>\n<p>接下来，我们进行最后一项的配置。该配置时针对于C/C++的相关拓展的，我们首先按下Ctrl+Shift+P以打开全局搜索，输入C/C++并在搜索结果中选择C/C++: Edit configurations(UI)<img alt=\"\" height=\"461\" src=\"image\\2b8e3bb30f714e9daccb60c5bfb2b365.png\" width=\"889\"/></p>\n<p> </p>\n<p>点击该选项，我们会打开一个设置的图形界面，将其中<strong>Configuration name(配置名称)</strong>下的<strong>Select a configuration set to edit(选择要编辑的配置集)</strong>下的文本框，输入<strong>GCC</strong>；在<strong>IntelliSense mode(IntelliSense 模式)</strong>下的文本框中选择<strong>windows-gcc-x64</strong><img alt=\"\" height=\"780\" src=\"image\\5d0e1abf521a4c7fa00af2a3fe072724.png\" width=\"816\"/></p>\n<p> </p>\n<p></p>\n<p>在进行上述操作之后，我们会发现在.vscode文件夹中出现了c_cpp_properties.json文件，打开后，其中的配置代码应与下方类似：</p>\n<pre><code class=\"language-javascript\">{\n  \"configurations\": [\n    {\n      \"name\": \"GCC\",\n      \"includePath\": [\"${workspaceFolder}/**\"],\n      \"defines\": [\"_DEBUG\", \"UNICODE\", \"_UNICODE\"],\n      \"windowsSdkVersion\": \"10.0.18362.0\",\n      \"compilerPath\": \"D:/msys64/mingw64/bin/g++.exe\",\n      \"cStandard\": \"c17\",\n      \"cppStandard\": \"c++17\",\n      \"intelliSenseMode\": \"windows-gcc-x64\"\n    }\n  ],\n  \"version\": 4\n}</code></pre>\n<p><strong>注意：其中 \"compilerPath\": 后的内容需要根据自己电脑中的实际路径修改</strong></p>\n<p></p>\n<p>至此，我们已经完成了文件的配置，接下来我们需要在拓展商店中下载安装一些插件来是我们写代码更加高效和简便：</p>\n<p><strong>C/C++ Extension Pack：一些常用的C/C++拓展</strong><img alt=\"\" height=\"1036\" src=\"image\\ffb4e58351014b83b521123a7112a61d.png\" width=\"1200\"/></p>\n<p> </p>\n<p>Code Runner：代码运行器<img alt=\"\" height=\"1055\" src=\"image\\9f00ccad41a94dab91829f1fadb87841.png\" width=\"1200\"/></p>\n<p> </p>\n<p>Tabnine：AI自动代码填充<img alt=\"\" height=\"1136\" src=\"image\\a148ca2739c14d0183f2012c78c3d606.png\" width=\"1200\"/></p>\n<p> </p>\n<p><strong>最后，我们点击打开hellpworld.cpp文件，点击运行-&gt;以非debug模式运行，若产生“Hello world”的输出，那么恭喜你，你已完成了VSCode在C/C++上的全部配置工作！</strong></p>\n</div>\n</div>"}