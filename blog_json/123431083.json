{"blogid": "123431083", "writerAge": "码龄5年", "writerBlogNum": "32", "writerCollect": "1498", "writerComment": "121", "writerFan": "538", "writerGrade": "5级", "writerIntegral": "1636", "writerName": "zh阿飞", "writerProfileAdress": "writer_image\\profile_123431083.jpg", "writerRankTotal": "19977", "writerRankWeekly": "34760", "writerThumb": "238", "writerVisitNum": "220313", "blog_read_count": "43484", "blog_time": "已于 2022-05-05 17:58:20 修改", "blog_title": "2022年前端面试题整理，持续更新中", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_1\"></a>端面试题整理</h1>\n<p>已同步到掘金、CSDN</p>\n<p>掘金地址： <a href=\"https://juejin.cn/post/7075332630417244173\">https://juejin.cn/post/7075332630417244173</a></p>\n<p>CSDN 地址：<a href=\"https://blog.csdn.net/z1832729975/article/details/123431083\">https://blog.csdn.net/z1832729975/article/details/123431083</a></p>\n<p>个人整理了很多网上常见的面试题，希望也能通过这来复习<br/> 内容有点多，可能 CSDN 上预览效果不好，想要 markdown 文档的可以私信我，推荐使用<code>Typora</code>看</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d6ed481d07584df1b1cd8e06084fba9f.png\"/></p>\n<p>比较好的面试题</p>\n<p><a href=\"https://juejin.cn/post/6989422484722286600\">2021 年我的前端面试准备</a><br/> <a href=\"https://juejin.cn/post/6844904116339261447\">2021 年前端面试必读文章【超三百篇文章/赠复习导图】</a></p>\n<h2><a id=\"CSSHTML_19\"></a>CSS、HTML</h2>\n<h3><a id=\"_21\"></a>浏览器内核</h3>\n<blockquote>\n<p>IE: trident 内核<br/> Firefox：gecko 内核<br/> Safari: webkit 内核<br/> Opera: 以前是 presto 内核，Opera 现已改用 GoogleChrome 的 Blink 内核<br/> Chrome: Blink(基于 webkit，Google 与 Opera Software 共同开发)</p>\n</blockquote>\n<h3><a id=\"_HTML__29\"></a><strong>你是怎么理解</strong> <strong>HTML</strong> <strong>语义化</strong></h3>\n<p>HTML 语义化简单来说就是用正确的标签来做正确的事。<br/> 比如表示段落用 p 标签、表示标题用 h1-h6 标签、表示文章就用 article 等。</p>\n<h3><a id=\"DOCTYPE__34\"></a>DOCTYPE 的作用</h3>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/wuqiutong/p/5986191.htmlhttps://www.cnblogs.com/wuqiutong/p/5986191.html\">Doctype 作用？严格模式与混杂模式如何区分？它们有何差异？</a></p>\n</blockquote>\n<ol><li> <p><code>&lt;!DOCTYPE&gt;</code> 声明位于文档中的最前面，处于 <code>&lt;html&gt;</code> 标签之前。告知浏览器以何种模式来渲染文档。</p> </li><li> <p>严格模式的排版和 JS 运作模式是 以该浏览器支持的最高标准运行。</p> </li><li> <p>在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站 点无法工作。</p> </li><li> <p>DOCTYPE 不存在或格式不正确会导致文档以混杂模式呈现。复制代码 你知道多少种 Doctype 文档类型？ 该标签可声明三种 DTD 类型，分别表示严格版本、过渡版本以及基于框架的 HTML 文档。 HTML 4.01 规定了三种文档类型：Strict、Transitional 以及 Frameset。 XHTML 1.0 规定了三种 XML 文档类型：Strict、Transitional 以及 Frameset。 Standards （标准）模式（也就是严格呈现模式）用于呈现遵循最新标准的网页，而 Quirks （包容）模式（也就是松散呈现模式或者兼容模式）用于呈现为传统浏览器而设计的网页。</p> </li></ol>\n<h3><a id=\"__44\"></a>行内元素、块级元素、 空元素有那些？</h3>\n<ul><li>行内元素 (不能设置宽高，设置宽高无效) a,span,i,em,strong,label</li><li>行内块元素：img, input</li><li>块元素： div, p, h1-h6, ul,li,ol,dl,table…</li><li>知名的空元素 br, hr,img, input,link,meta</li></ul>\n<p>可以通过 display 修改 <code>inline-block</code>, <code>block</code>, <code>inline</code></p>\n<p><strong>注意</strong></p>\n<p>只有文字才能组成段落，因此 <code>p</code> 标签里面不能放块级元素，特别是 <code>p</code> 标签不能放 <code>div</code>。同理还有这些标签<code>h1,h2,h3,h4,h5,h6,dt</code> ，他们都是文字类块级标签，里面不能放其他块级元素。</p>\n<h3><a id=\"meta_viewport__57\"></a><strong>meta viewport</strong> <strong>是做什么用的，怎么写</strong></h3>\n<p>使用目的</p>\n<p>告诉浏览器，用户在移动端时如何缩放页面</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span>\n  <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, \n               initial-scale=1, \n               maximum-scale-1, minimum-scale=1<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/&gt;</span></span>\n</code></pre>\n<p><code>with=device-width</code> 将布局视窗（layout viewport）的宽度设置为设备屏幕分辨率的宽度</p>\n<p><code>initial-scale=1</code> 页面初始缩放比例为屏幕分辨率的宽度</p>\n<p><code>maximum-scale=1</code> 指定用户能够放大的最大比例</p>\n<p><code>minimum-scale=1</code> 指定用户能够缩小的最大比例</p>\n<h3><a id=\"label__80\"></a><strong>label</strong> <strong>标签的作用</strong></h3>\n<p>label 标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Number:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span>\n  <span class=\"token punctuation\">&gt;</span></span>Date:\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>B<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h3><a id=\"canvas___style___94\"></a><strong>canvas</strong> <strong>在标签上设置宽高 和在</strong> <strong>style</strong> <strong>中设置宽高有什么</strong> <strong>区别</strong></h3>\n<blockquote>\n<p>canvas 标签的 width 和 height 是画布实际宽度和高度，绘制的图形都是在这个上面。<br/> 而 style 的 width 和 height 是 canvas 在浏览器中被渲染的高度和宽度。<br/> 如果 canvas 的 width 和 height 没指定或值不正确，就被设置成默认值 。</p>\n</blockquote>\n<h3><a id=\"html5__100\"></a>html5 新特性</h3>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/77131734\">HTML5 新特性</a></p>\n</blockquote>\n<ol><li>语义化标签， header, footer, nav, aside,article,section</li><li>增强型表单</li><li>视频 video 和音频 audio</li><li>Canvas 绘图</li><li><a href=\"https://so.csdn.net/so/search?q=SVG&amp;spm=1001.2101.3001.7020\">SVG</a>绘图</li><li>地理定位</li><li>拖放 API</li><li>WebWorker</li><li>WebStorage( 本地离线存储 localStorage、sessionStorage )</li><li>WebSocket</li></ol>\n<h3><a id=\"css3__115\"></a>css3 新特性</h3>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/136700705\">CSS3 有哪些新特性？CSS3 新特性详解</a></p>\n</blockquote>\n<p>1、圆角效果；2、图形化边界；3、块阴影与文字阴影；4、使用 RGBA 实现透明效果；5、渐变效果；6、使用“@Font-Face”实现定制字体；7、多背景图；8、文字或图像的变形处理；9、多栏布局；10、媒体查询等。</p>\n<pre><code>1、颜色：新增RGBA、HSLA模式\n2、文字阴影：（text-shadow）\n3、边框：圆角（border-radius）边框阴影：box-shadow\n4、盒子模型：box-sizing\n5、背景：background-size,background-origin background-clip(削弱)\n6、渐变：linear-gradient(线性渐变):\neg: background-image: linear-gradient(100deg, #237b9f, #f2febd);\nradial-gradient (径向渐变)\n7、过渡：transition可实现动画\n8、自定义动画： animate@keyfrom\n9、媒体查询：多栏布局@media screen and (width:800px)\n10、border-image\n11、2D转换:transform:translate(x,y) rotate(x,y)旋转 skew(x,y)倾斜 scale(x,y)缩放\n12、3D转换\n13、字体图标：Font-Face\n14、弹性布局：flex\n</code></pre>\n<h3><a id=\"css__140\"></a>css 选择器</h3>\n<p>id 选择器（ #myid）</p>\n<p>类选择器（.myclassname）</p>\n<p>标签选择器（div, h1, p）相邻选择器（h1 + p）</p>\n<p>子选择器（ul &gt; li）后代选择器（li a）</p>\n<p>属性选择器（a[rel = “external”]）</p>\n<p>伪类选择器（a: hover, li:nth-child）</p>\n<p>通配符选择器（ * ）</p>\n<pre><code>        !Important &gt; 行内式 &gt; id &gt; 类/伪类/属性 &gt; 标签选择器  &gt;  全局\n    （对应权重：无穷大∞ &gt; 1000&gt; 100 &gt;  10        &gt;  1   &gt;      0）\n</code></pre>\n<h3><a id=\"_161\"></a>盒模型</h3>\n<p>一个盒子，会有 content,padding,border,margin 四部分，</p>\n<p>标准的盒模型的宽高指的是 content 部分</p>\n<p>ie 的盒模型的宽高包括了 content+padding+border</p>\n<p>我们可以通过 box-sizing 修改盒模型，box-sizing <code>border-box</code> <code>content-box</code></p>\n<h3><a id=\"margin__171\"></a>margin 合并</h3>\n<p>在垂直方向上的两个盒子，他们的 margin 会发生合并（会取最大的值），比如上边盒子设置<code>margin-bottom:20px</code>，下边盒子设置<code>margin-top:30px;</code>，那么两个盒子间的间距只有<code>30px</code>，不会是<code>50px</code></p>\n<p>解决 margin 合并，我们可以给其中一个盒子套上一个父盒子，给父盒子设置 BFC</p>\n<h3><a id=\"margin__177\"></a>margin 塌陷</h3>\n<p>效果： 一个父盒子中有一个子盒子，我们给子盒子设置<code>margin-top:xxpx</code>结果发现会带着父盒子一起移动（就效果和父盒子设置<code>margin-top:xxpx</code>的效果一样）</p>\n<p>解决： 1、给父盒子设置 border，例如设置<code>border:1px solid red;</code> 2、给父盒子设置 BFC</p>\n<h3><a id=\"BFC_183\"></a>BFC</h3>\n<blockquote>\n<p>块级格式化上下文 (block format context)</p>\n</blockquote>\n<p><strong>BFC 的布局规则</strong> *</p>\n<ul><li>内部的 Box 会在垂直方向，一个接一个地放置。</li><li>Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠。</li><li>每个盒子（块盒与行盒）的 margin box 的左边，与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li><li>BFC 的区域不会与 float box 重叠。</li><li>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li>计算 BFC 的高度时，浮动元素也参与计算。</li></ul>\n<p><strong>触发 BFC 的条件</strong> *</p>\n<ul><li>根元素 html</li><li>float 的值不是 none。</li><li>position 的值 absoute、fixed</li><li>display 的值是 inline-block、table-cell、flex、table-caption 或者 inline-flex</li><li>overflow 的值不是 visible</li></ul>\n<p><strong>解决什么问题</strong></p>\n<ol><li> <p>可以用来解决两栏布局<code>BFC 的区域不会与 float box 重叠</code></p> <pre><code class=\"prism language-css\"><span class=\"token selector\">.left</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> flet<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.right</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>解决 margin 塌陷和 margin 合并问题</p> </li><li> <p>解决浮动元素无法撑起父元素</p> </li></ol>\n<h3><a id=\"flex_221\"></a>flex</h3>\n<blockquote>\n<p>设为 Flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效</p>\n</blockquote>\n<h3><a id=\"_rempxem__225\"></a>什么是 rem、px、em 区别</h3>\n<blockquote>\n<p>rem 是一个相对单位，<strong>rem 的是相对于 html 元素的字体大小</strong>，<strong>没有继承性</strong></p>\n<p>em 是一个相对单位，<strong>是相对于父元素字体大小有继承性</strong></p>\n<p>px 是一个“绝对单位”，<strong>就是 css 中定义的像素</strong>，利用 px 设置字体大小及元素的宽高等，比较稳定和精确。</p>\n</blockquote>\n<h3><a id=\"_233\"></a>响应式布局</h3>\n<p><strong>响应式布局有哪些实现方式？什么是响应式设计？响应式设计的基本原理是什么？</strong></p>\n<blockquote>\n<p>1.百分比布局，但是无法对字体，边框等比例缩放</p>\n<p>2.弹性盒子布局 display:flex</p>\n<p>3.rem 布局，1rem=html 的 font-size 值的大小</p>\n<ol start=\"4\"><li>css3 媒体查询 @media screen and(max-width: 750px){}</li></ol>\n<p>5.vw+vh</p>\n<p>6.使用一些框架（bootstrap，vant）</p>\n<p>什么是响应式设计：响应式网站设计是一个网站能够兼容多个终端，智能地根据不同设备环境进行相对应的布局</p>\n<p>响应式设计的基本原理：基本原理是通过媒体查询检测不同的设备屏幕尺寸设置不同的 css 样式 页面头部必须有 meta 声明的</p>\n</blockquote>\n<h3><a id=\"_253\"></a>布局</h3>\n<ul><li>两栏布局,左边定宽，右边自适应</li><li>三栏布局、圣杯布局、双飞翼布局</li></ul>\n<h3><a id=\"_258\"></a>水平垂直居中</h3>\n<p>方法一：给父元素设置成弹性盒子，子元素横向居中，纵向居中</p>\n<p>方法二：父相子绝后，子部分向上移动本身宽度和高度的一半，也可以用 transfrom:translate(-50%,-50%)（最常用方法）</p>\n<p>方法三：父相子绝，子元素所有定位为 0，margin 设置 auto 自适应</p>\n<h3><a id=\"iframe__266\"></a><strong>iframe</strong> <strong>有哪些缺点？</strong></h3>\n<p>iframe 是一种框架，也是一种很常见的网页嵌入方</p>\n<p><strong>iframe 的优点：</strong></p>\n<ol><li>iframe 能够原封不动的把嵌入的网页展现出来。</li><li>如果有多个网页引用 iframe，那么你只需要修改 iframe 的内容，就可以实现调用的每一个页面内容的更改，方便快捷。</li><li>网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用 iframe 来嵌套，可以增加代码的可重用。</li><li>如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由 iframe 来解决。</li></ol>\n<p><strong>iframe 的缺点：</strong></p>\n<ol><li>会产生很多页面，不容易管理。</li><li>iframe 框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会分散访问者的注意力，用户体验度差。</li><li>代码复杂，无法被一些搜索引擎索引到，这一点很关键，现在的搜索引擎爬虫还不能很好的处理 iframe 中的内容，所以使用 iframe 会不利于搜索引擎优化。</li><li>很多的移动设备（PDA 手机）无法完全显示框架，设备兼容性差。</li><li>iframe 框架页面会增加服务器的 http 请求，对于大型网站是不可取的。现在基本上都是用 Ajax 来代替 iframe，所以 iframe 已经渐渐的退出了前端开发。</li></ol>\n<h3><a id=\"link_import__css_285\"></a><strong>link @import</strong> <strong>导入</strong> <strong>css</strong></h3>\n<blockquote>\n<p>link 是 XHTML 标签，除了加载 CSS 外，还可以定义 RSS 等其他事务；<br/> @import 属于 CSS 范畴， 只能加载 CSS。<br/> link 引用 CSS 时，在页面载入时同时加载；@import 需要页面网页完全载入以后加载。link<br/> 无兼容问题；@import 是在 CSS2.1 提出的，低版本的浏览器不支持。<br/> link 支持使用 Javascript 控制 DOM 去改变样式；而@import 不支持。</p>\n</blockquote>\n<h3><a id=\"DOM__295\"></a>DOM 事件机制/模型</h3>\n<blockquote>\n<p>DOM0 级模型、IE 事件模型、DOM2 级事件模型</p>\n</blockquote>\n<p>就比如用户触发一个点击事件，有一个触发的过程</p>\n<p>事件捕获-阶段（从上大小，从外到内）—&gt;处于目标事件-阶段----&gt;事件冒泡-阶段（从下到上，从内到外）</p>\n<pre><code class=\"prism language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    event <span class=\"token operator\">=</span> event <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>event <span class=\"token comment\">/*ie*/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target <span class=\"token operator\">||</span> event<span class=\"token punctuation\">.</span>srcElement<span class=\"token punctuation\">;</span> <span class=\"token comment\">/*ie*/</span> <span class=\"token comment\">// 拿到事件目标</span>\n\n    <span class=\"token comment\">// 阻止冒泡</span>\n    <span class=\"token comment\">// event.stopPropagation()</span>\n    <span class=\"token comment\">// event.cancelBubble=true; // ie</span>\n\n    <span class=\"token comment\">// 阻止默认事件</span>\n    <span class=\"token comment\">// event.preventDefault();</span>\n    <span class=\"token comment\">// event.returnValue=false; // ie</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* 是否使用捕获，默认是fasle, */</span> fasle\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"事件传播.jpeg\" src=\"https://img-blog.csdnimg.cn/img_convert/d6ad0d5856cf047ebaad5a8a1f20ab75.webp?x-oss-process=image/format,png\"/></p>\n<h4><a id=\"_324\"></a>事件委托</h4>\n<p>简介：事件委托指的是，不在事件的发生地（直接 dom）上设置监听函数，而是</p>\n<p>在其父元素上设置监听函数，通过事件冒泡，父元素可以监听到子元素上事件的</p>\n<p>触发，通过判断事件发生元素 DOM 的类型，来做出不同的响应。</p>\n<p>举例：最经典的就是 ul 和 li 标签的事件监听，比如我们在添加事件时候，采用</p>\n<p>事件委托机制，不会在 li 标签上直接添加，而是在 ul 父元素上添加。</p>\n<p>好处：比较合适动态元素的绑定，新添加的子元素也会有监听函数，也可以有事</p>\n<p>件触发机制</p>\n<h3><a id=\"_342\"></a>如果需要手动写动画，你认为最小时间间隔是多久</h3>\n<blockquote>\n<p>多数显示器默认频率是 60Hz，即 1 秒刷新 60 次，所以理论上最小间隔为 <code>1/60＊1000ms = 16.7ms </code></p>\n</blockquote>\n<h3><a id=\"beforeafter_346\"></a>::before和:after中双冒号和单冒号有什么区别</h3>\n<p>单冒号(:)用于 CSS3 伪类，双冒号(::)用于 CSS3 伪元素。 ::before 就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于 dom 之中，只存在在页面之中。 :before 和 :after 这两个伪元素，是在 CSS2.1 里新出现的。起初，伪元素的前缀使用的是单 冒号语法，但随着 Web 的进化，在 CSS3 的规范里，伪元素的语法被修改成使用双冒号，成 为::before ::after</p>\n<h3><a id=\"CSS_sprites__349\"></a>CSS sprites 精灵图</h3>\n<p>CSS Sprites 其实就是把网页中一些背景图片整合到一张图片文件中，再利用 CSS 的 <code>“background-image”，“ background-repeat ”，“ background-position”</code> 的 组 合 进 行 背 景 定 位 ， background-position 可以用数字能精确的定位出背景图片的位置。这样可以减少很多图片请 求的开销，因为请求耗时比较长；请求虽然可以并发，但是也有限制，一般浏览器都是 6 个</p>\n<h3><a id=\"_353\"></a>重排和重绘</h3>\n<p>重绘（repaint 或 redraw）：当盒子的位置、大小以及其他属性，例如颜色、字 体大小等都确定下来之后，浏览器便把这些原色都按照各自的特性绘制一遍，将 内容呈现在页面上。重绘是指一个元素外观的改变所触发的浏览器行为，浏览器 会根据元素的新属性重新绘制，使元素呈现新的外观。<br/> 触发重绘的条件：改变元素外观属性。如：color，background-color 等。 注意：table 及其内部元素可能需要多次计算才能确定好其在渲染树中节点的属性值，比同等元素要多花两倍时间，这就是我们尽量避免使用 table 布局页面的 原因之一。<br/> 重排（重构/回流/reflow）：当渲染树中的一部分(或全部)因为元素的规模尺寸， 布局，隐藏等改变而需要重新构建, 这就称为回流(reflow)。每个页面至少需要 一次回流，就是在页面第一次加载的时候。<br/> 重绘和重排的关系：在回流的时候，浏览器会使渲染树中受到影响的部分失效， 并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕 中，该过程称为重绘。所以，重排必定会引发重绘，但重绘不一定会引发重排。</p>\n<h2><a id=\"JavaScript_360\"></a>JavaScript</h2>\n<h3><a id=\"js__362\"></a>js 数据类型</h3>\n<p>8 中, <code>ES6</code>出的 <code>Symbol BigInt</code></p>\n<pre><code>Number String Boolean undefined null Object Symbol BigInt\n</code></pre>\n<p>js 的基本数据类型和复杂数据类型的区别（在堆和栈中，赋值时的不同,一个拷贝值一个拷贝地址）</p>\n<p><strong>基本类型和引用类型在内存上存储的区别</strong></p>\n<p><img alt=\"img\" src=\"image\\d466bf596a5a12e11e5a78c244c37642.png\"/></p>\n<p><strong>null 与 undefined 的异同</strong></p>\n<p><strong>相同点：</strong></p>\n<ul><li>Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null</li></ul>\n<p><strong>不同点：</strong></p>\n<ul><li> <p>null 转换成数字是 0, undefined 转换数字是<code>NaN</code></p> </li><li> <p>undefined 代表的含义是未定义， null 代表的含义是空对象。</p> </li><li> <p>typeof null 返回’object’，typeof undefined 返回’undefined’</p> </li><li> <pre><code class=\"prism language-js\"><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">null</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre> </li><li> <p>其实 null 不是对象，虽然 typeof null 会输出 object，但是这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。</p> </li></ul>\n<p><strong>说说 JavaScript 中判断数据类型的几种方法</strong></p>\n<p><strong>typeof</strong></p>\n<ul><li><code>typeof</code>一般用来判断基本数据类型，<strong>除了判断 null 会输出\"object\"，其它都是正确的</strong></li><li><code>typeof</code>判断引用数据类型时，<strong>除了判断函数会输出\"function\",其它都是输出\"object\"</strong></li></ul>\n<p><strong>instanceof</strong></p>\n<blockquote>\n<p>Instanceof 可以准确的判断引用数据类型，它的原理是检测构造函数的<code>prototype</code>属性是否在某个实例对象的原型链上， 不能判断基本数据类型</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// instanceof 的实现</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">instanceofOper</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> prototype <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> prototype<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// let obj  = {}</span>\n<span class=\"token comment\">// Object.getPrototypeOf(obj) === obj.__proto__ ==&gt; true</span>\n</code></pre>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 实现 instanceof 2</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myInstanceof</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 这里先用typeof来判断基础数据类型，如果是，直接返回false</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> left <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">||</span> left <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// getProtypeOf是Object对象自带的API，能够拿到参数的原型对象</span>\n  <span class=\"token keyword\">let</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proto <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proto <span class=\"token operator\">===</span> right<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//找到相同原型对象，返回true</span>\n    proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeof</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Object.prototype.toString.call()</strong> 返回 <code>[object Xxxx]</code> 都能判断</p>\n<h3><a id=\"_442\"></a>深拷贝和浅拷贝</h3>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xxx\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ss\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> <span class=\"token number\">333</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 赋值</span>\n<span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 浅拷贝-只拷贝了一层，深层次的引用还是存在</span>\n<span class=\"token comment\">// Object.assign(), ...扩展运算符，slice等</span>\n<span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token string\">\"222\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// arr2[1].b =&gt; 222</span>\n<span class=\"token comment\">// arr[2] = 4444 ==&gt; arr2[2] ===&gt; 333</span>\n\n<span class=\"token comment\">// 深拷贝</span>\n<span class=\"token comment\">// 1. 最简单的，JSON.stringify，但这个有问题，看下面有说明</span>\n<span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2. 自己封装，要递归处理</span>\n</code></pre>\n<p>实现深拷贝-简单版</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> obj <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//  如果有循环引用、就返回这个对象</span>\n    <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> cloneObj <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组的就是[],对象就是{}</span>\n\n  map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> cloneObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 缓存对象，用于循环引用的情况</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      cloneObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> cloneObj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"JSONstringify__495\"></a><code>JSON.stringify</code> 问题</h3>\n<ol><li> <p>如果有循环引用就报错</p> <p><img alt=\"img\" src=\"image\\c224a6d165a14d969c014170533c13dd.png\"/></p> </li><li> <p><code>Symbol</code>、<code>function</code>、<code>undefined</code>会丢失</p> </li><li> <p><code>布尔值</code>、<code>数字</code>、<code>字符串</code>的包装对象会转换成原始值</p> </li><li> <p><code>NaN</code>、<code>Infinity</code> 变成 <code>null</code></p> </li><li> <p><code>Date</code>类型的日期会变成字符串</p> </li><li> <p><code>RegExp</code>、<code>Error</code>被转换成了空对象 <code>{}</code></p> </li></ol>\n<p><img alt=\"img\" src=\"image\\53927bb12f094d69b84298c445e4d088.png\"/></p>\n<h3><a id=\"_517\"></a>模块化</h3>\n<ul><li> <p><code>commonjs</code></p> <pre><code class=\"prism language-js\"><span class=\"token comment\">// 由nodejs实现</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>ESM</p> <pre><code class=\"prism language-js\"><span class=\"token comment\">// 由es6实现</span>\n<span class=\"token keyword\">import</span> $ <span class=\"token keyword\">from</span> <span class=\"token string\">\"jquery\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> $<span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>AMD（异步加载模块）</p> <pre><code class=\"prism language-js\"><span class=\"token comment\">// 由RequireJS实现</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"juqery\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$<span class=\"token punctuation\">,</span> Vue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 依赖必须一开始就写好</span>\n  <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>CMD</p> <pre><code class=\"prism language-js\"><span class=\"token comment\">// 由SeaJS 实现</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ....</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 依赖可以就近书写</span>\n  b<span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>UMD (通用加载模块)</p> <pre><code class=\"prism language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">global<span class=\"token punctuation\">,</span> factory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">typeof</span> exports <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> module <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">?</span> module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n  <span class=\"token keyword\">typeof</span> define <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span> define<span class=\"token punctuation\">.</span>amd <span class=\"token operator\">?</span> <span class=\"token function\">define</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n  <span class=\"token punctuation\">(</span>global <span class=\"token operator\">=</span> global <span class=\"token operator\">||</span> self<span class=\"token punctuation\">,</span> global<span class=\"token punctuation\">.</span>Vue <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n</code></pre> </li></ul>\n<h4><a id=\"AMD__CMD__570\"></a>AMD 和 CMD 的区别有哪些</h4>\n<blockquote>\n<p>https://blog.csdn.net/qq_38912819/article/details/80597101</p>\n</blockquote>\n<ol><li>对于依赖的模块，AMD 是<strong>提前执行</strong>，CMD 是<strong>延迟执行</strong>。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）</li><li>CMD 推崇<strong>依赖就近</strong>，AMD 推崇<strong>依赖前置</strong></li></ol>\n<h4><a id=\"CommonJS__ES6_Module__577\"></a>CommonJS 与 ES6 Module 的差异</h4>\n<p><strong>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</strong></p>\n<ul><li>CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</li><li>ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的<code>import</code>有点像 Unix 系统的“符号连接”，原始值变了，<code>import</code>加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</li></ul>\n<p><strong>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</strong></p>\n<ul><li>运行时加载: CommonJS 模块就是对象；即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。</li><li>编译时加载: ES6 模块不是对象，而是通过 <code>export</code> 命令显式指定输出的代码，<code>import</code>时采用静态命令的形式。即在<code>import</code>时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。</li></ul>\n<p><strong>CommonJS 加载的是一个对象（即 module.exports 属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</strong></p>\n<h3><a id=\"JS__591\"></a>JS 延迟加载的方式</h3>\n<p>JavaScript 会阻塞 DOM 的解析，因此也就会阻塞 DOM 的加载。所以有时候我们希望延迟 JS 的加载来提高页面的加载速度。</p>\n<ul><li>把 JS 放在页面的最底部</li><li>script 标签的 defer 属性：脚本会立即下载但延迟到整个页面加载完毕再执行。该属性对于内联脚本无作用 (即没有 <strong>「src」</strong> 属性的脚本）。</li><li>Async 是在外部 JS 加载完成后，浏览器空闲时，Load 事件触发前执行，标记为 async 的脚本并不保证按照指定他们的先后顺序执行，该属性对于内联脚本无作用 (即没有 <strong>「src」</strong> 属性的脚本）。</li><li>动态创建 script 标签，监听 dom 加载完毕再引入 js 文件</li></ul>\n<h3><a id=\"callapply_bind_600\"></a>call、apply 、bind</h3>\n<blockquote>\n<p>call，apply, bind 都是改变 this 指向，bind 不会立即执行，会返回的是一个绑定 this 的新函数</p>\n<p><a href=\"https://juejin.cn/post/6844903728147857415\">面试官问：能否模拟实现 JS 的 call 和 apply 方法</a></p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token function\">obj</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span>指向<span class=\"token punctuation\">,</span> 参数<span class=\"token number\">1</span>， 参数<span class=\"token number\">2</span><span class=\"token punctuation\">)</span>ss\n<span class=\"token function\">obj</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span>指向<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>参数<span class=\"token number\">1</span>， 参数<span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// bind会返回一个新的函数</span>\n<span class=\"token function\">result</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 实现一个 apply</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myApply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  context<span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> context<span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>实现一个 bind</p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 最终版 删除注释 详细注释版请看上文</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>bind <span class=\"token operator\">=</span>\n  <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>bind <span class=\"token operator\">||</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">thisArg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" must be a function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">bound</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">var</span> boundArgs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> finalArgs <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>boundArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">bound</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token keyword\">function</span> <span class=\"token function\">Empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n          <span class=\"token class-name\">Empty</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n          bound<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> finalArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> isObject <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> result <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> result <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> isFunction <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> result <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isObject <span class=\"token operator\">||</span> isFunction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> finalArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> bound<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"a_namedebouncea_666\"></a>防抖</h3>\n<blockquote>\n<p>debounce 所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">,</span> immediate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">let</span> timeout<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>immediate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">const</span> callNow <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>timeout<span class=\"token punctuation\">;</span>\n      timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        timeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callNow<span class=\"token punctuation\">)</span> <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n      timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"a_namethrottlea_692\"></a>节流</h3>\n<blockquote>\n<p>就是指连续触发事件但是在 n 秒中只执行一次函数</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> wait</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">let</span> pre <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> pre <span class=\"token operator\">&gt;=</span> wait<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      pre <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_709\"></a>闭包</h3>\n<p>闭包是指有权访问另一个函数作用域中的变量的函数 ——《JavaScript 高级程序设计》</p>\n<p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，</p>\n<p>即使函数是在当前词法作用域之外执行 ——《你不知道的 JavaScript》</p>\n<ul><li>闭包用途： \n  <ol><li>能够访问函数定义时所在的词法作用域(阻止其被回收)</li><li>私有化变量</li><li>模拟块级作用域</li><li>创建模块</li></ol> </li><li>闭包缺点：会导致函数的变量一直保存在内存中，过多的闭包可能会导致内存泄漏</li></ul>\n<h3><a id=\"_724\"></a>原型、原型链(高频)</h3>\n<p><strong>原型:</strong> 对象中固有的<code>__proto__</code>属性，该属性指向对象的<code>prototype</code>原型属性。</p>\n<p><strong>原型链:</strong> 当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是<code>Object.prototype</code>所以这就是我们新建的对象为什么能够使用<code>toString()</code>等方法的原因。</p>\n<p><strong>特点:</strong> <code>JavaScript</code>对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。</p>\n<h3><a id=\"this_new__732\"></a>this 指向、new 关键字</h3>\n<p><code>this</code>对象是是执行上下文中的一个属性，它指向最后一次调用这个方法的对象，在全局函数中，<code>this</code>等于<code>window</code>，而当函数被作为某个对象调用时，this 等于那个对象。 在实际开发中，<code>this </code>的指向可以通过四种调用模式来判断。</p>\n<ol><li>函数调用，当一个函数不是一个对象的属性时，直接作为函数来调用时，<code>this</code>指向全局对象。</li><li>方法调用，如果一个函数作为一个对象的方法来调用时，<code>this</code>指向这个对象。</li><li>构造函数调用，<code>this</code>指向这个用<code>new</code>新创建的对象。</li><li>第四种是 <code>apply 、 call 和 bind </code>调用模式，这三个方法都可以显示的指定调用函数的 this 指向。<code>apply</code>接收参数的是数组，<code>call</code>接受参数列表，`` bind<code>方法通过传入一个对象，返回一个</code>this<code>绑定了传入对象的新函数。这个函数的 </code>this<code>指向除了使用</code>new `时会被改变，其他情况下都不会改变。</li></ol>\n<p><strong>new</strong></p>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6844903704663949325\">面试官问：能否模拟实现 JS 的 new 操作符</a></p>\n</blockquote>\n<ol><li>首先创建了一个新的空对象</li><li>设置原型，将对象的原型设置为函数的<code>prototype</code>对象。</li><li>让函数的<code>this</code>指向这个对象，执行构造函数的代码（为这个新对象添加属性）</li><li>判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// new 操作符的实现</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">newOperator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> ctor <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">throw</span> <span class=\"token string\">\"newOperator function the first param must be a function\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  newOperator<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> ctor<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> newObj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>ctor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> argsArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> ctorReturnResult <span class=\"token operator\">=</span> <span class=\"token function\">ctor</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>newObj<span class=\"token punctuation\">,</span> argsArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> isObject <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">typeof</span> ctorReturnResult <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> ctorReturnResult <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> isFunction <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> ctorReturnResult <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isObject <span class=\"token operator\">||</span> isFunction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> ctorReturnResult<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> newObj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_770\"></a>作用域、作用域链、变量提升</h3>\n<p><code>作用域</code>负责收集和维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。(全局作用域、函数作用域、块级作用域)。 作用域链就是从当前作用域开始一层一层向上寻找某个变量，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是<code>作用域链</code>。</p>\n<h3><a id=\"_es6_774\"></a>继承(含 es6)、多种继承方式</h3>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 属性</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name <span class=\"token operator\">||</span> <span class=\"token string\">\"Animal\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 实例方法</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sleep</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"正在睡觉！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 原型方法</span>\n<span class=\"token class-name\">Animal</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">eat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">food</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"正在吃：\"</span> <span class=\"token operator\">+</span> food<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>（1）第一种是以<code>原型链的方式来实现继承</code>，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。</p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 原型链继承</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小黄\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 缺点 无法实现多继承 来自原型对象的所有属性被所有实例共享</span>\n<span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>（2）第二种方式是使用<code>借用构造函数</code>的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。</p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 借用构造函数继承</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">Animal</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"小黄\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 缺点 只能继承父类实例的属性和方法，不能继承原型上的属性和方法。</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>（3）第三种方式是<code>组合继承</code>，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。</p>\n<p>（4）第四种方式是<code>原型式继承</code>，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n  <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>（5）第五种方式是<code>寄生式继承</code>，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是我们的自定义类型时。缺点是没有办法实现函数的复用。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createAnother</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">original</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">var</span> clone <span class=\"token operator\">=</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//通过调用object函数创建一个新对象</span>\n  clone<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//以某种方式来增强这个对象</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> clone<span class=\"token punctuation\">;</span> <span class=\"token comment\">//返回这个对象</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>（6）第六种方式是<code>寄生式组合继承</code>，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subClass<span class=\"token punctuation\">,</span> superClass</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">var</span> prototype <span class=\"token operator\">=</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span>superClass<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建对象</span>\n  prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> subClass<span class=\"token punctuation\">;</span> <span class=\"token comment\">//增强对象</span>\n  subClass<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">//指定对象</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_845\"></a>类型转换</h3>\n<p>大家都知道 JS 中在使用运算符号或者对比符时，会自带隐式转换，规则如下:</p>\n<p>-、*、/、% ：一律转换成数值后计算</p>\n<p>+：</p>\n<ul><li> <p>数字 + 字符串 = 字符串， 运算顺序是从左到右</p> </li><li> <p>数字 + 对象， 优先调用对象的 valueOf -&gt; toString</p> </li><li> <p>数字 + boolean/null -&gt; 数字</p> </li><li> <p>数字 + undefined -&gt; NaN</p> </li><li> <p>[1].toString() === ‘1’ 内部调用 .join 方法</p> </li><li> <p>{}.toString() === ‘[object object]’</p> </li><li> <p>NaN !== NaN 、+undefined 为 NaN</p> </li></ul>\n<h3><a id=\"Objectis_867\"></a>Object.is()与比较操作符<code>==</code>、<code>===</code>的区别？</h3>\n<ul><li><code>==</code>会先进行类型转换再比较</li><li><code>===</code>比较时不会进行类型转换，类型不同则直接返回 false</li><li><code>Object.is()</code>在<code>===</code>基础上特别处理了<code>NaN</code>,<code>-0</code>,<code>+0</code>,保证-0 与+0 不相等，但 NaN 与 NaN 相等</li></ul>\n<h4><a id=\"_873\"></a><code>==</code>操作符的强制类型转换规则</h4>\n<ul><li>字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较。</li><li>其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较。</li><li>null 和 undefined 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。</li><li>对象和非对象之间的相等比较，对象先调用 ToPrimitive 抽象操作后，再进行比较。</li><li>如果一个操作值为 NaN ，则相等比较返回 false（ NaN 本身也不等于 NaN ）。</li><li>如果两个操作值都是对象，则比较它们是不是指向同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true，否则，返回 false。</li></ul>\n<p><img alt=\"img\" src=\"https://img-blog.csdnimg.cn/img_convert/d5175667072fe77e2182f89306bcdb77.webp?x-oss-process=image/format,png\"/></p>\n<h3><a id=\"ES6_884\"></a>ES6</h3>\n<ol><li>新增 Symbol 类型 表示独一无二的值，用来定义独一无二的对象属性名;</li><li>const/let 都是用来声明变量,不可重复声明，具有块级作用域。存在暂时性死区，不存在变量提升。(const 一般用于声明常量);</li><li>变量的解构赋值(包含数组、对象、字符串、数字及布尔值,函数参数),剩余运算符(…rest);</li><li>模板字符串(<code>${data}</code>);</li><li><code>...</code>扩展运算符(数组、对象);;</li><li>箭头函数;</li><li>Set 和 Map 数据结构;</li><li>Proxy/Reflect;</li><li>Promise;</li><li>async 函数;</li><li>Class;</li><li>Module 语法(import/export)。</li></ol>\n<h3><a id=\"letconst_899\"></a>let/const</h3>\n<blockquote>\n<p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变 https://es6.ruanyifeng.com/#docs/let</p>\n</blockquote>\n<p>var 在全局作用域中声明的变量会变成全局变量</p>\n<p>let、const 和 var 的区别</p>\n<ul><li> <p>不允许重复声明</p> </li><li> <p>不存在变量提升</p> <pre><code class=\"prism language-js\"><span class=\"token comment\">// var 的情况</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出undefined</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// let 的情况</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错ReferenceError</span>\n<span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>暂时性死区（不能在未声明之前使用）</p>\n<blockquote>\n<p>注意暂时性死区和不存在变量提升不是同一个东西</p>\n</blockquote> <p>只要块级作用域内存在<code>let</code>命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p> <pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明了 tmp</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  tmp <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span>\n  <span class=\"token keyword\">let</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>块级作用域：用 let 和 const 声明的变量，在这个块中会形成块级作用域</p> <p><strong>es5 只有函数作用域和全局作用域</strong></p> <p>IIFE <code>立即执行函数表达式</code></p> <pre><code class=\"prism language-js\"><span class=\"token comment\">// IIFE 写法</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 块级作用域写法</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">let</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <pre><code class=\"prism language-js\"><span class=\"token comment\">// 函数声明</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 函数表达式</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> </li></ul>\n<h3><a id=\"ES6__963\"></a>ES6 的一些叫法</h3>\n<ul><li> <p>reset 参数</p> <pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> val <span class=\"token keyword\">of</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    sum <span class=\"token operator\">+=</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n</code></pre> </li><li> <p>扩展运算符</p> <pre><code class=\"prism language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1 2 3</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token operator\">...</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p><code>?.</code> 可选链运算符</p>\n<blockquote>\n<p>左侧的对象是否为<code>null</code>或<code>undefined</code>。如果是的，就不再往下运算，而是返回<code>undefined</code></p>\n</blockquote> <pre><code class=\"prism language-js\">a<span class=\"token operator\">?.</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\na <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">:</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 注意 undefined == null ==&gt; true</span>\n</code></pre> </li><li> <p><code>??</code> Null 判断运算符</p> </li></ul>\n<blockquote>\n<p>https://es6.ruanyifeng.com/#docs/operator#Null-%E5%88%A4%E6%96%AD%E8%BF%90%E7%AE%97%E7%AC%A6</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> headerText <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>headerText <span class=\"token operator\">??</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> animationDuration <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>animationDuration <span class=\"token operator\">??</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> showSplashScreen <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>showSplashScreen <span class=\"token operator\">??</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>但左侧的为 <code>undefined</code>或者<code>null</code>是就返回右边的，否则就直接返回左边的</p>\n<h3><a id=\"_1013\"></a>箭头函数和普通函数的区别</h3>\n<ol><li>箭头函数没有<code>this</code>，<code>this</code>是继承于当前的上下文，不能通过<code>call</code>,<code>apply</code>,<code>bind</code>去改变 this</li><li>箭头函数没有自己的 <code>arguments</code> 对象，但是可以访问外围函数的 <code>arguments </code>对象</li><li>不能通过<code> new</code> 关键字调用(不能作为构造函数)，同样也没有 <code>new.target</code> 和原型</li></ol>\n<h3><a id=\"_1021\"></a><strong>如何解决异步回调地狱</strong></h3>\n<p>promise、generator、async/await</p>\n<h3><a id=\"mouseover__mouseenter__1027\"></a><strong>mouseover</strong> <strong>和</strong> <strong>mouseenter</strong> <strong>的区别</strong></h3>\n<p>mouseover：当鼠标移入元素或其子元素都会触发事件，所以有一个重复触发，</p>\n<p>冒泡的过程。对应的移除事件是 mouseout</p>\n<p>mouseenter：当鼠标移除元素本身（不包含元素的子元素）会触发事件，也就是</p>\n<p>不会冒泡，对应的移除事件是 mouseleave</p>\n<h3><a id=\"setTimeoutsetInterval__requestAnimationFrame__1037\"></a>setTimeout、setInterval 和 requestAnimationFrame 之间的区别</h3>\n<p>与 setTimeout 和 setInterval 不同，requestAnimationFrame 不需要设置时间 间隔， 大多数电脑显示器的刷新频率是 60Hz，大概相当于每秒钟重绘 60 次。大多数浏 览器都会对重绘操作加以限制，不超过显示器的重绘频率，因为即使超过那个频 率用户体验也不会有提升。因此，最平滑动画的最佳循环间隔是 1000ms/60，约 等于 16.6ms。 RAF 采用的是系统时间间隔，不会因为前面的任务，不会影响 RAF，但是如果前 面的任务多的话，会响应 setTimeout 和 setInterval 真正运行时的时间间隔。 特点：</p>\n<p>（1）requestAnimationFrame 会把每一帧中的所有 DOM 操作集中起来，在一次 重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率。<br/> （2）在隐藏或不可见的元素中，requestAnimationFrame 将不会进行重绘或回 流，这当然就意味着更少的 CPU、GPU 和内存使用量<br/> （3）requestAnimationFrame 是由浏览器专门为动画提供的 API，在运行时浏览 器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停， 有效节省了 CPU 开销。</p>\n<h2><a id=\"vue_1045\"></a>vue</h2>\n<p>vue2 是通过<code>Object.defineProperty</code>来实现响应式的，所以就会有一些缺陷</p>\n<ol><li>当修改一个对象的某个键值属性时，当这个键值没有在这个对象中，vue 不能做响应式处理</li><li>但直接修改数组的某一项（<code>arr[index]='xxx'</code>）vue 不能做响应式处理</li></ol>\n<p>可用下面的解决响应式</p>\n<ol><li>Vue.set ==&gt; this.$set(对象\\数组， key 值、index， value)</li><li>修改数组<code>length</code>, 调用数据的 <code>splice</code> 方法</li></ol>\n<h3><a id=\"vue__1057\"></a>vue 生命周期</h3>\n<pre><code class=\"prism language-js\">beforeCreate 实例化之前这里能拿到<span class=\"token keyword\">this</span>，但是还不能拿到data里面的数据\ncreated  实例化之后\n<span class=\"token function\">beforeMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> $el\nbeforeUpdate\nupdated\n\nbeforeDestroy 清除定时<span class=\"token operator\">/</span>移除监听事件\ndestroyed\n\n<span class=\"token comment\">// 被keep-alive 包裹的</span>\n<span class=\"token comment\">// keep-alive 标签 include exclude max</span>\n<span class=\"token function\">activated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token function\">deactivated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">// 父子</span>\n父beforeCreate<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>父created<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>父beforeMount<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>子beforeCreate<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>子created<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>子beforeMount<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>子mounted<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>父mounted。\n\n<span class=\"token comment\">// 离开页面：实例销毁 --&gt; DOM卸载</span>\nparent  beforeDestroy\nchild   beforeDestroy\nchild   destroyed\nparent  destroyed\n</code></pre>\n<h3><a id=\"Vue__data__1085\"></a>Vue 的 data 为什么是一个函数</h3>\n<p>因为 Vue 的组件可能会在很多地方使用， 会产生多个实例，如果返回的是对象的， 这些组件之间的数据是同一份（引用关系），那么修改其中一个组件的数据，另外一个组件的数据都会被修改到</p>\n<h3><a id=\"Vue_key__1089\"></a>Vue key 值的作用</h3>\n<blockquote>\n<p>看这个视频，你能给面试官说这些，你就很不错了，vue 和 react 的差不多 <a href=\"https://www.bilibili.com/video/BV1wy4y1D7JT?p=48\">https://www.bilibili.com/video/BV1wy4y1D7JT?p=48</a></p>\n</blockquote>\n<p>…待更新</p>\n<h3><a id=\"Vue__1095\"></a>Vue 双向数据绑定原理</h3>\n<blockquote>\n<p>下面是照抄的一段话，个人觉得这个主要看个人理解，如果看过源码理解 MVVM 这方面的，就很简单</p>\n</blockquote>\n<p>vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持</p>\n<p>各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p>\n<p>具体步骤：</p>\n<p>第一步：需要 observe 的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter</p>\n<p>和 getter</p>\n<p>这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化</p>\n<p>第二步：compile 解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，</p>\n<p>并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通</p>\n<p>知，更新视图</p>\n<p>第三步：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁，主要做的事情是:</p>\n<p>1、在自身实例化时往属性订阅器(dep)里面添加自己</p>\n<p>2、自身必须有一个 update()方法</p>\n<p>3、待属性变动 dep.notice()通知时，能调用自身的 update()方法，并触发 Compile 中绑定的</p>\n<p>回调，则功成身退。</p>\n<p>第四步：MVVM 作为数据绑定的入口，整合 Observer、</p>\n<p>Compile 和 Watcher 三者，通过 Observer</p>\n<p>来监听自己的 model 数据变化，通过 Compile 来解析编译模板指令，最终利用 Watcher 搭起</p>\n<p>Observer 和 Compile 之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数</p>\n<p>据 model 变更的双向绑定效果。</p>\n<p>所以也可以根据这个来说明为什么 给<code>Vue</code>对象不存在的属性设置值的时候不生效，直接修改数组的<code>index</code>不生效</p>\n<p>Vue 提供了 <code> Vue.set(对象|数组, key|index, 值)</code>修改触发响应式，重新数组的原型方法实现响应式</p>\n<h3><a id=\"Vue_extend__mixins_1141\"></a>Vue extend 和 mixins</h3>\n<p>vue extend 和 mixins 的区别， mixins 里面的 函数和本身的函数重名了使用哪一个，mixins 里面的生命周期和本身的生命周期哪一个先执行</p>\n<p>…待更新</p>\n<h3><a id=\"_1147\"></a>动态组件</h3>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// component 动态组件，通过is设置要显示的组件</span>\n<span class=\"token operator\">&lt;</span>component is<span class=\"token operator\">=</span><span class=\"token string\">\"UserInfo\"</span> <span class=\"token operator\">&gt;</span>\n</code></pre>\n<h3><a id=\"_1154\"></a>递归组件</h3>\n<p>就是给组件设置<code>name</code>，之后就可以在当前组件去递归使用组件</p>\n<h3><a id=\"Vue__1158\"></a>Vue 组件间的传值的几种方式</h3>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// Vue组件间的传值的几种方式</span>\n<span class=\"token number\">1.</span> props<span class=\"token operator\">/</span>emit\n<span class=\"token number\">2.</span> $attrs<span class=\"token operator\">/</span>$listeners <span class=\"token comment\">// $attrs 除了父级作用域 props、class、style 之外的属性</span>\n<span class=\"token comment\">// $listeners 父组件里面的所有的监听方法</span>\n<span class=\"token number\">3.</span> $refs<span class=\"token operator\">/</span>$parent<span class=\"token operator\">/</span>$children<span class=\"token operator\">/</span>$root<span class=\"token operator\">/</span>\n<span class=\"token number\">4.</span> vuex\n<span class=\"token number\">5.</span> 事件总线，通过<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span>去实现 <span class=\"token operator\">/</span> mitt <span class=\"token operator\">&lt;=</span><span class=\"token operator\">=&gt;</span> vue3\n<span class=\"token number\">6.</span> provide<span class=\"token operator\">/</span>inject\n    <span class=\"token comment\">// 父组件</span>\n    <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 子组件</span>\n    <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">inject</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">7.</span> 本地存储、全局变量\n</code></pre>\n<h3><a id=\"watchmixins_1181\"></a>watch、mixins、组件顺序、组件配置</h3>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MyComponentName\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mixins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>tableMixin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">inject</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// props: ['value', 'visible'],</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// required: true,</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">\"warning\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">validator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"warning\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"danger\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>\n          val\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">list</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Array<span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// vue2</span>\n      <span class=\"token literal-property property\">obj</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"李四~\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// vue2 会进行深度合并</span>\n      <span class=\"token comment\">// obj  {\"name\":\"李四~\",\"age\":19}</span>\n\n      <span class=\"token comment\">// vue3 { name: \"李四~\" }</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// provide 不支持响应式，想支持响应式的话我们要传对象</span>\n  <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">userName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// fullName() {<!-- --></span>\n    <span class=\"token comment\">//   return 'xxxxx'</span>\n    <span class=\"token comment\">// }</span>\n    <span class=\"token literal-property property\">fullName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>userName<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// return '李四'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SET_NAME\"</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token literal-property property\">watch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// name(value) {<!-- --></span>\n    <span class=\"token comment\">//   this.handlerName()</span>\n    <span class=\"token comment\">// }</span>\n    <span class=\"token comment\">// name: {<!-- --></span>\n    <span class=\"token comment\">//   immediate: true,</span>\n    <span class=\"token comment\">//   deep: true, //</span>\n    <span class=\"token comment\">//   handler(val, oldValue) {<!-- --></span>\n    <span class=\"token comment\">//     this.handlerName()</span>\n    <span class=\"token comment\">//   },</span>\n    <span class=\"token comment\">// },</span>\n    <span class=\"token comment\">// this.obj.name = 'xxxx' 这样不会执行</span>\n    <span class=\"token comment\">// this.obj = {name: 'xxx'} 这样才会执行</span>\n    <span class=\"token comment\">// obj(value) {<!-- --></span>\n    <span class=\"token comment\">//   console.log(' value: ', value)</span>\n    <span class=\"token comment\">// }</span>\n    <span class=\"token comment\">//  和上面等价</span>\n    <span class=\"token comment\">// obj: {<!-- --></span>\n    <span class=\"token comment\">//   handler(value) {<!-- --></span>\n    <span class=\"token comment\">//     console.log(\" value: \", value)</span>\n    <span class=\"token comment\">//   },</span>\n    <span class=\"token comment\">// },</span>\n    <span class=\"token comment\">// this.obj.name = 'xxxx' 这样去修改也能监听</span>\n    <span class=\"token comment\">// obj: {<!-- --></span>\n    <span class=\"token comment\">//   deep: true, // 深度监听</span>\n    <span class=\"token comment\">//   immediate: true, // 第一次就用执行这个方法，可以理解为在 created 的时候会执行 handler</span>\n    <span class=\"token comment\">//   handler(value) {<!-- --></span>\n    <span class=\"token comment\">//     console.log(\" value: \", value)</span>\n    <span class=\"token comment\">//   },</span>\n    <span class=\"token comment\">// },</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// obj: {<!-- --></span>\n    <span class=\"token comment\">//   deep: true, // 深度监听</span>\n    <span class=\"token comment\">//   immediate: true, // 第一次就用执行这个方法，可以理解为在 created 的时候会执行 handler</span>\n    <span class=\"token comment\">//   handler: 'handlerName',</span>\n    <span class=\"token comment\">// },</span>\n    <span class=\"token comment\">// ==》</span>\n    <span class=\"token comment\">// obj: 'handlerName'</span>\n    <span class=\"token comment\">// '$route.path': {},</span>\n    <span class=\"token comment\">// 'obj.a' : {}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">beforeCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// this.handlerName()</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fullName <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxx\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//  this.fullName '李四'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">handlerName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxx\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_1305\"></a>指令</h3>\n<p>常用指令</p>\n<ul><li> <p><code>v-show</code> <code>dispaly none</code> 的切换</p> </li><li> <p><code>v-if</code>/<code>v-else</code></p> </li><li> <p><code>v-html </code></p> </li><li> <p><code>v-text</code></p> </li><li> <p><code>v-for</code> (vue2 <code>v-for</code>比<code>v-if</code>优先级高，vu3<code>v-if</code>优先级比<code>v-for</code>高 )</p> </li><li> <p><code>v-cloak</code> <code> [v-cloak] {dispaly:none}</code></p> </li><li> <p><code>v-once</code> 静态内容</p> </li><li> <p><code>v-bind </code>=&gt; <code>:</code> <code>v-on</code> =&gt; <code>@</code></p> <pre><code class=\"prism language-html\"><span class=\"token comment\">&lt;!--- 可以直接 v-bind=\"object\" v-on=\"object\" --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Child</span> <span class=\"token attr-name\">v-bind</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$attrs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-on</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$listeners<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Child</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> </li><li> <p>v-model</p> <pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>keyword<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-input</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!--- 等价下面这个 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span> <span class=\"token attr-name\">:value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>keyword<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@input</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>keyword = $event<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-input</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> </li></ul>\n<pre><code class=\"prism language-js\">Vue<span class=\"token punctuation\">.</span><span class=\"token function\">directive</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"指令名\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 生命周期</span>\n  <span class=\"token comment\">// 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</span>\n  <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">,</span> oldVnode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// binging.value 拿到指令值</span>\n    <span class=\"token comment\">// binding.modifiers 修饰符对象</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)</span>\n  <span class=\"token function\">inserted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">componentUpdated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 只调用一次，指令与元素解绑时调用</span>\n  <span class=\"token function\">unbind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 默认绑定 bind update 的生命周期</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">directive</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"指令名\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">,</span> oldVnode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_1359\"></a>修饰符</h3>\n<ul><li> <p>.lazy、.number、.trim、.enter、.prevent、.self</p> </li><li> <p><code>.sync</code></p> <pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Dialog</span>  <span class=\"token attr-name\">:visible.sync</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>visible<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Child</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!--- 等价下面这个 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Dialog</span>  <span class=\"token attr-name\">:visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>visible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">@update:</span>visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>visible = $event<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Child</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> </li></ul>\n<h3><a id=\"scoped_1371\"></a>scoped</h3>\n<p>加了 scoped 就只作用于当前组件</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">scoped</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>渲染规则</p>\n<pre><code class=\"prism language-css\"><span class=\"token selector\">.a .b</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">== &gt; .a .b[data-v-xx]</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.a /deep/ .b</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">== &gt; .a[data-v-xxx] .b</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.a &gt;&gt;&gt; .b</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">== &gt; .a[data-v-xxx] .b</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.a ::v-deep .b</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">== &gt; .a[data-v-xxx] .b</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"vuerouter_1400\"></a><code>vue-router</code></h3>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 全局路由守卫</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'hash'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// hash | history | abstract</span>\n    <span class=\"token comment\">// 滚动位置</span>\n    <span class=\"token function\">scrollBehavior</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> savedPosition</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>savedPosition<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> savedPosition\n       <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 路由独享守卫</span>\n            <span class=\"token function\">beforeEnter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 组件内的路由</span>\n<span class=\"token function\">beforeRouteEnter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token function\">beforeRouteUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token function\">beforeRouteLeave</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 跳转</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 路由信息</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>query <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>params\n</code></pre>\n<h3><a id=\"vuex_1434\"></a><code>vuex</code></h3>\n<p>state getters mutations actions modules</p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// state</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>userInfo<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// getters</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>getters<span class=\"token punctuation\">.</span>userInfo<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// mutations</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SET_USER_INFO\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"传递数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// actions</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// -----------------------------------</span>\n<span class=\"token comment\">// modules &gt; user</span>\n<span class=\"token comment\">// namespaced: true,</span>\n\n<span class=\"token comment\">// state 拿 name</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>avatar<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// getters</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>getters<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>avatar<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// mutations</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user/SET_TOKEN\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"传递数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// actions</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// -----------------------------------</span>\n<span class=\"token comment\">// modules &gt; user</span>\n<span class=\"token comment\">// namespaced: false,</span>\n\n<span class=\"token comment\">// state 拿 name</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>avatar<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// getters</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>getters<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>avatar<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// mutations</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SET_TOKEN\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"传递数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// actions</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>辅助函数</p>\n<pre><code class=\"prism language-js\">mapState<span class=\"token punctuation\">,</span> mapGetters<span class=\"token punctuation\">,</span> mapMutations<span class=\"token punctuation\">,</span> mapActions<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"vue3_1487\"></a>vue3</h2>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6999687348120190983\">Vue3 的 8 种和 Vue2 的 12 种组件通信，值得收藏</a></p>\n<p><a href=\"https://juejin.cn/post/7026249448233631752\">聊一聊 Vue3 的 9 个知识点</a></p>\n</blockquote>\n<p><strong>Vue3 有哪些变化</strong></p>\n<ul><li>新增了三个组件：<code>Fragment</code> 支持多个根节点、<code>Suspense</code> 可以在组件渲染之前的等待时间显示指定内容、<code>Teleport</code> 可以让子组件能够在视觉上跳出父组件(如父组件 overflow:hidden)</li><li>新增指令 <code>v-memo</code>，可以缓存 html 模板，比如 v-for 列表不会变化的就缓存，简单说就是用内存换时间</li><li>支持 <code>Tree-Shaking</code>，会在打包时去除一些无用代码，没有用到的模块，使得代码打包体积更小</li><li>新增 <code>Composition API</code> 可以更好的逻辑复用和代码组织，同一功能的代码不至于像以前一样太分散，虽然 Vue2 中可以用 minxin 来实现复用代码，但也存在问题，比如方法或属性名会冲突，代码来源也不清楚等</li><li>用 <code>Proxy</code> 代替 <code>Object.defineProperty</code> 重构了响应式系统，可以监听到数组下标变化，及对象新增属性，因为监听的不是对象属性，而是对象本身，还可拦截 apply、has 等 13 种方法</li><li>重构了虚拟 DOM，在编译时会将事件缓存、将 slot 编译为 lazy 函数、保存静态节点直接复用(静态提升)、以及添加静态标记、Diff 算法使用 最长递增子序列 优化了对比流程，使得虚拟 DOM 生成速度提升 <code>200%</code></li><li>支持在 <code>&lt;style&gt;&lt;/style&gt;</code> 里使用 <code>v-bind</code>，给 CSS 绑定 JS 变量(<code>color: v-bind(str)</code>)</li><li>用 <code>setup</code> 代替了 beforeCreate 和 created 这两个生命周期</li><li>新增了<strong>开发环境</strong>的两个钩子函数，在组件更新时 <code>onRenderTracked</code> 会跟踪组件里所有变量和方法的变化、每次触发渲染时 <code>onRenderTriggered</code> 会返回发生变化的新旧值，可以让我们进行有针对性调试</li><li>毕竟 Vue3 是用 <code>TS</code> 写的，所以对 <code>TS</code> 的支持度更好</li><li>Vue3 不兼容 <code>IE11</code></li></ul>\n<h3><a id=\"vue3__1507\"></a>vue3 生命周期</h3>\n<table><thead><tr><th>选项式 API</th><th>Hook inside <code>setup</code></th></tr></thead><tbody><tr><td><code>beforeCreate</code></td><td>Not needed*</td></tr><tr><td><code>created</code></td><td>Not needed*</td></tr><tr><td><code>beforeMount</code></td><td><code>onBeforeMount</code></td></tr><tr><td><code>mounted</code></td><td><code>onMounted</code></td></tr><tr><td><code>beforeUpdate</code></td><td><code>onBeforeUpdate</code></td></tr><tr><td><code>updated</code></td><td><code>onUpdated</code></td></tr><tr><td><code>beforeUnmount</code></td><td><code>onBeforeUnmount</code></td></tr><tr><td><code>unmounted</code></td><td><code>onUnmounted</code></td></tr><tr><td><code>errorCaptured</code></td><td><code>onErrorCaptured</code></td></tr><tr><td><code>renderTracked</code></td><td><code>onRenderTracked</code></td></tr><tr><td><code>renderTriggered</code></td><td><code>onRenderTriggered</code></td></tr><tr><td><code>activated</code></td><td><code>onActivated</code></td></tr><tr><td><code>deactivated</code></td><td><code>onDeactivated</code></td></tr></tbody></table>\n<h3><a id=\"_1525\"></a>基本代码</h3>\n<h4><a id=\"mainjs_1527\"></a>main.js</h4>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> createApp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App.vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> HelloWorld <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components/HelloWorld.vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 全局组件</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">,</span> HelloWorld<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 全局属性</span>\n<span class=\"token comment\">// vue2.0 Vue.prototype.$http</span>\napp<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>globalProperties<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$http</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http ==\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"Appvue_1549\"></a>App.vue</h4>\n<pre><code class=\"prism language-html\"><span class=\"token comment\">&lt;!--- App.vue  --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- v-model=\"xxx\"  &lt;==&gt; v-model:modelValue=\"xxx\" --&gt;</span>\n    <span class=\"token comment\">&lt;!-- :value=\"xxx\" @input=\"xxx = $event\" --&gt;</span>\n    <span class=\"token comment\">&lt;!-- value $emit('input', '传递') --&gt;</span>\n\n    <span class=\"token comment\">&lt;!-- \n      visible.sync=\"visible\" \n      ==&gt;\n      :visible=\"visible\" @update:visible=\"visible = $event\"\n      --&gt;</span>\n\n    <span class=\"token comment\">&lt;!-- vue3 把 .sync 去掉，==&gt; \n        v-model:visible=\"visible\"\n       --&gt;</span>\n\n    <span class=\"token comment\">&lt;!--     \n    &lt;div :ref=\"setDivRef\"&gt;\n      count: {<!-- -->{ count }}\n      &lt;p&gt;\n        &lt;button @click=\"add\"&gt;+&lt;/button&gt;\n        &lt;button @click=\"reduce\"&gt;-&lt;/button&gt;\n      &lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;ul&gt;\n      &lt;li&gt;姓名：{<!-- -->{ user.name }}&lt;/li&gt;\n      &lt;li&gt;年龄：{<!-- -->{ user.age }}&lt;/li&gt;\n    &lt;/ul&gt; --&gt;</span>\n\n    <span class=\"token comment\">&lt;!-- v-model=\"num\" --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Child</span>\n      <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>父组件传递的title<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">:modelValue</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>num<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\"><span class=\"token namespace\">@update:</span>modelValue</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>num = $event<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">@change</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>onChildChange<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\"><span class=\"token namespace\">v-model:</span>visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>visible<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>childRef<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Child</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- &lt;HelloWorld&gt;&lt;/HelloWorld&gt; --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">import</span> Child <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Child-setup.vue\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> reactive<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@vue/reactivity\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> onMounted<span class=\"token punctuation\">,</span> provide <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@vue/runtime-core\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span> Child <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// data() {<!-- --></span>\n    <span class=\"token comment\">//   return {<!-- --></span>\n    <span class=\"token comment\">//     msg: '哈哈哈',</span>\n    <span class=\"token comment\">//   }</span>\n    <span class=\"token comment\">// },</span>\n    <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">const</span> msg <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"哈哈哈2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// =&gt; reactive({value: 哈哈哈2 })</span>\n      <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xx\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" obj.value: \"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$http &gt;&gt;&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reduce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> visible <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// this.$refs.childRef x</span>\n      <span class=\"token comment\">// refs</span>\n      <span class=\"token comment\">// 1. 用字符串</span>\n      <span class=\"token keyword\">const</span> childRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" childRef.value: \"</span><span class=\"token punctuation\">,</span> childRef<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">let</span> divRef<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setDivRef</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" el: \"</span><span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        divRef <span class=\"token operator\">=</span> el<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n        msg<span class=\"token punctuation\">,</span>\n        user<span class=\"token punctuation\">,</span>\n        count<span class=\"token punctuation\">,</span>\n        add<span class=\"token punctuation\">,</span>\n        reduce<span class=\"token punctuation\">,</span>\n        num<span class=\"token punctuation\">,</span>\n        visible<span class=\"token punctuation\">,</span>\n        childRef<span class=\"token punctuation\">,</span>\n        setDivRef<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">onChildChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">#app</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> Avenir<span class=\"token punctuation\">,</span> Helvetica<span class=\"token punctuation\">,</span> Arial<span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">-webkit-font-smoothing</span><span class=\"token punctuation\">:</span> antialiased<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">-moz-osx-font-smoothing</span><span class=\"token punctuation\">:</span> grayscale<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #2c3e50<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 60px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h4><a id=\"Childcomposition__api_1675\"></a>Child-composition （组合式 api）</h4>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token comment\">&lt;!-- \n  1. 多个片段， 多个根标签 \n  2. v-for v-if 优先级变化 v3 v-if &gt; v-for\n--&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>triggerEvent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>触发事件<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>num2：{<!-- -->{ num2 }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>count：{<!-- -->{ count }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n    modelValue：{<!-- -->{ modelValue }}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>add<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>+<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/&gt;</span></span>\n    visible：{<!-- -->{ visible }}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>updateVisible<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>更新visible<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!--   --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>teleport</span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>body<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>visible<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>对话框<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>teleport</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span>\n    computed<span class=\"token punctuation\">,</span>\n    inject<span class=\"token punctuation\">,</span>\n    onActivated<span class=\"token punctuation\">,</span>\n    onBeforeMount<span class=\"token punctuation\">,</span>\n    onBeforeUnmount<span class=\"token punctuation\">,</span>\n    onBeforeUpdate<span class=\"token punctuation\">,</span>\n    onDeactivated<span class=\"token punctuation\">,</span>\n    onMounted<span class=\"token punctuation\">,</span>\n    onUnmounted<span class=\"token punctuation\">,</span>\n    onUpdated<span class=\"token punctuation\">,</span>\n    watch<span class=\"token punctuation\">,</span>\n    watchEffect<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@vue/runtime-core\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">modelValue</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">visible</span><span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// computed: {<!-- --></span>\n    <span class=\"token comment\">//   num2() {<!-- --></span>\n    <span class=\"token comment\">//     return this.modelValue * 2</span>\n    <span class=\"token comment\">//   }</span>\n    <span class=\"token comment\">// },</span>\n    <span class=\"token literal-property property\">emits</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"update:modelValue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"update:visible\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 发生在 beforeCreate</span>\n    <span class=\"token comment\">// attrs 除了 class style,props 之外的属性</span>\n    <span class=\"token comment\">//</span>\n\n    <span class=\"token comment\">// watch: {<!-- --></span>\n    <span class=\"token comment\">//   title: {<!-- --></span>\n    <span class=\"token comment\">//     deep: true, // 深度简单</span>\n\n    <span class=\"token comment\">//   }</span>\n    <span class=\"token comment\">// },</span>\n    <span class=\"token comment\">// 组合式API(composition),  选项式API(options)</span>\n    <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> emit<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> slots <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" attrs: \"</span><span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" props: \"</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// computed</span>\n      <span class=\"token keyword\">const</span> num2 <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> props<span class=\"token punctuation\">.</span>modelValue <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// const num2 = computed({<!-- --></span>\n      <span class=\"token comment\">//   get: () =&gt; props.modelValue * 2,</span>\n      <span class=\"token comment\">//   set: (val) =&gt; {<!-- --></span>\n      <span class=\"token comment\">//     ssss</span>\n      <span class=\"token comment\">//   }</span>\n      <span class=\"token comment\">// })</span>\n\n      <span class=\"token comment\">//</span>\n      <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" count: \"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// watch</span>\n      <span class=\"token comment\">// this.$watch()</span>\n      <span class=\"token keyword\">const</span> unwatch <span class=\"token operator\">=</span> <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> props<span class=\"token punctuation\">.</span>modelValue<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">newVal<span class=\"token punctuation\">,</span> oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" newVal: \"</span><span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newVal <span class=\"token operator\">&gt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 取消监听</span>\n            <span class=\"token function\">unwatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token literal-property property\">deep</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// immediate: true</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 自动收集依赖，所以会初始化的时候就执行一次</span>\n      <span class=\"token function\">watchEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" props.modelValue: \"</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>modelValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// hooks</span>\n      <span class=\"token function\">onBeforeMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"哈哈哈\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">onBeforeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">onUpdated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">onBeforeUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">onUnmounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// keep-alive</span>\n      <span class=\"token function\">onActivated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">onDeactivated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// methods</span>\n      <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">triggerEvent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"传递的数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update:modelValue\"</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>modelValue <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateVisible</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" props.visible: \"</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update:visible\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>props<span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n        triggerEvent<span class=\"token punctuation\">,</span>\n        add<span class=\"token punctuation\">,</span>\n        updateVisible<span class=\"token punctuation\">,</span>\n        num2<span class=\"token punctuation\">,</span>\n        count<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// beforeCreate() {<!-- --></span>\n    <span class=\"token comment\">//   console.log('beforeCreate')</span>\n    <span class=\"token comment\">// },</span>\n    <span class=\"token comment\">// created() {<!-- --></span>\n    <span class=\"token comment\">//   console.log('created')</span>\n    <span class=\"token comment\">// },</span>\n\n    <span class=\"token comment\">// beforeDestroy beforeUnmount</span>\n    <span class=\"token comment\">// destroyed unmounted</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h4><a id=\"Childsetup_1827\"></a>Child-setup</h4>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>title: {<!-- -->{ title }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>num2: {<!-- -->{ num2 }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>count: {<!-- -->{ count }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n      modelValue：{<!-- -->{ modelValue }}\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>add<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>+<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>triggerEvent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>触发事件<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- &lt;input type=\"text\" v-model=\"inputValue\"&gt; --&gt;</span>\n    <span class=\"token comment\">&lt;!--   --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inputValue<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@input</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>onInputUpdate<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- volar --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Foo</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Foo</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">&lt;!--- vue 3.2.x --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span>\n    computed<span class=\"token punctuation\">,</span>\n    getCurrentInstance<span class=\"token punctuation\">,</span>\n    inject<span class=\"token punctuation\">,</span>\n    ref<span class=\"token punctuation\">,</span>\n    useAttrs<span class=\"token punctuation\">,</span>\n    useSlots<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@vue/runtime-core\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">import</span> Foo <span class=\"token keyword\">from</span> <span class=\"token string\">\"./foo.vue\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// props</span>\n  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token function\">defineProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">modelValue</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// computed</span>\n  <span class=\"token keyword\">const</span> num2 <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> props<span class=\"token punctuation\">.</span>modelValue <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// emit</span>\n  <span class=\"token keyword\">const</span> emit <span class=\"token operator\">=</span> <span class=\"token function\">defineEmits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"update:modelValue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"update:visible\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">triggerEvent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"传递的数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update:modelValue\"</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>modelValue <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 向父组件暴露自己的属性和方法</span>\n  <span class=\"token function\">defineExpose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    num2<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"888\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> attrs <span class=\"token operator\">=</span> <span class=\"token function\">useAttrs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" attrs: \"</span><span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> solts <span class=\"token operator\">=</span> <span class=\"token function\">useSlots</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> <span class=\"token function\">getCurrentInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>appContext<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>globalProperties<span class=\"token punctuation\">.</span>$http<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">http</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> $http <span class=\"token operator\">=</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">$http</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// $ref: ref(false)</span>\n\n  <span class=\"token keyword\">const</span> inputValue <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onInputUpdate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" event: \"</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    inputValue<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h2><a id=\"_1913\"></a>项目相关</h2>\n<h3><a id=\"git_1915\"></a>git</h3>\n<h4><a id=\"_1917\"></a>常用命令</h4>\n<p>https://shfshanyue.github.io/cheat-sheets/git</p>\n<h4><a id=\"git_pull__git_featch__1921\"></a>git pull 和 git featch 的区别</h4>\n<h4><a id=\"_mater__dev__1923\"></a>怎么样进行合并，比如把 mater 分支合并到 dev 分支</h4>\n<h3><a id=\"Webpack__1925\"></a>Webpack 一些核心概念：</h3>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/7023242274876162084\">【万字】透过分析 webpack 面试题，构建 webpack5.x 知识体系</a></p>\n</blockquote>\n<ul><li> <p><code>Entry</code>：入口，指示 Webpack 应该使用哪个模块，来作为构建其内部 依赖图(dependency graph) 的开始。</p> </li><li> <p><code>Output</code>：输出结果，告诉 Webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。</p> </li><li> <p><code>Module</code>：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。</p> </li><li> <p><code>Chunk</code>：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。</p> </li><li> <p><code>Loader</code>：模块代码转换器，让 webpack 能够去处理除了 JS、JSON 之外的其他类型的文件，并将它们转换为有效 模块，以供应用程序使用，以及被添加到依赖图中。</p> </li><li> <p><code>Plugin</code>：扩展插件。在 webpack 运行的生命周期中会广播出许多事件，plugin 可以监听这些事件，在合适的时机通过 webpack 提供的 api 改变输出结果。常见的有：打包优化，资源管理，注入环境变量。</p> </li><li> <p><code>Mode</code>：模式，告知 webpack 使用相应模式的内置优化</p>\n<hr/> </li></ul>\n<ul><li><code>hash</code>: 每次构建的生成唯一的一个 hash，且所有的文件 hash 串是一样的</li></ul>\n<ul><li> <p><code>chunkhash</code>: 每个<strong>入口文件</strong>都是一个 chunk，每个 chunk 是由入口文件与其依赖所构成，<strong>异步加载</strong>的文件也被视为是一个 chunk, <strong>chunkhash</strong>是由每次编译模块，根据模块及其依赖模块构成 chunk 生成对应的 chunkhash, 这也就表明了<strong>每个 chunk 的 chunkhash 值</strong>都不一样， 也就是说每个 chunk 都是独立开来的，互不影响，每个 chunk 的更新不会影响其他 chunk 的编译构建</p> </li><li> <p><code>contenthash</code>：由文件内容决定，文件变化 contenthash 才会变化，一般配合 <code>mini-css-extract-plugin</code>插件提取出 css</p> <pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mini-css-extract-plugin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> HTMLWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"html-webpack-plugin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 把 style-loader替换掉，不要使用 style-loader了</span>\n            <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n              <span class=\"token literal-property property\">outputPath</span><span class=\"token operator\">:</span> <span class=\"token string\">\"css/\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"css-loader\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// ....</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"css/[name].[contenthash].css\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> </li></ul>\n<h3><a id=\"_webpack__1983\"></a>提升 webpack 打包速度</h3>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/7046616302521155614\">一套骚操作下来，webpack 项目打包速度飞升 🚀、体积骤减 ↓</a></p>\n<p><a href=\"https://juejin.cn/post/6844904071736852487\">玩转 webpack，使你的打包速度提升 90%</a></p>\n<p><a href=\"https://juejin.cn/post/6844904093463347208\">带你深度解锁 Webpack 系列(优化篇)</a></p>\n<p><a href=\"https://juejin.cn/post/6996816316875161637\">学习 Webpack5 之路（优化篇）- 近 7k 字</a></p>\n</blockquote>\n<ul><li> <p>速度分析，可以使用 <code>speed-measure-webpack-plugin</code></p> </li><li> <p>提升基础环境，nodejs 版本，webpack 版本</p> </li><li> <p><code>CDN</code> 分包 <code>html-webpack-externals-plugin</code>, <code>externals</code></p> </li><li> <p>多进程、多实例构建 <code>thread-loader</code> <code>happypack(不再维护)</code></p> </li><li> <p>多进程并行构建打包<code>uglifyjs-webpack-plugin</code> <code>terser-webpack-plugin</code></p> </li><li> <p>缓存: webpack5 内置了<code>cache</code>模块 、<code>babel-loader</code> 的 <code>cacheDirectory</code> 标志、<code>cache-loader</code>, <code>HardSourceWebpackPlugin</code></p> <pre><code class=\"prism language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// webpack5内置缓存</span>\n  <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"filesystem\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 使用文件缓存</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>构建缩小范围 <code>include</code>,<code>exclude</code></p> </li><li> <p>加快文件查找速度<code>resolve.alias</code>,<code>resolve.extensions</code>, <code>module.noParse</code></p> </li><li> <p><code>DllPlugin</code></p> </li><li> <p><code>babel </code>配置的优化</p> </li></ul>\n<h3><a id=\"webpack__loaderplugin_2022\"></a>webpack 常用 loader，plugin</h3>\n<p><strong>loader</strong></p>\n<ul><li><code>babel-loader</code> 将 <code>es6</code> 转换成 <code>es5</code> , <code>ts-loader</code>、<code>vue-loader</code></li><li><code>eslint-loader</code> 配置 <code>enforce: 'pre'</code> 这个 loader 最先执行</li><li><code>css-loader</code>、<code>style-loader</code>、<code>postcss-loader</code>、<code>less-loader</code>、<code>sass-loader</code></li><li><code>file-loader</code> 把文件转换成路径引入, <code>url-loader</code>（比<code>file-loader</code>多了小于多少的能转换成 base64）</li><li><code>image-loader</code></li><li><code>svg-sprite-loader</code> 处理 svg</li><li><code>thread-loader</code> 开启多进程 ，会在一个单独的 worker 池（worker pool）中运行</li><li><code>cache-loader</code> 缓存一些性能开销比较大的 loader 的处理结果</li></ul>\n<p><strong>plugin</strong></p>\n<ul><li> <p><code>html-webpack-plugin</code> 将生成的 css，js 自动注入到 html 文件中，能对 html 文件压缩</p> </li><li> <p><code>copy-webpack-plugin</code> 拷贝某个目录</p> </li><li> <p><code>clean-webpack-plugin</code> 清空某个目录</p> </li><li> <p><code>webpack.HotModuleReplacementPlugin</code> 热重载</p> </li><li> <p><code>webpack.DefinePlugin</code> 定义全局变量</p> </li><li> <p><code>mini-css-extract-plugin</code> 提取 CSS 到独立 bundle 文件。 <code>extract-text-webpack-plugin</code></p> </li><li> <p><code>optimize-css-assets-webpack-plugin</code> 压缩 css webpack5 推荐<code>css-minimizer-webpack-plugin</code></p> </li><li> <p><code>purgecss-webpack-plugin </code> 会单独提取 CSS 并清除用不到的 CSS（会有问题把有用的 css 删除）</p> </li><li> <p><code>uglifyjs-webpack-plugin</code> ❌（不推荐） 压缩 js、多进程 <code>parallel: true</code></p> </li><li> <p><code>terser-webpack-plugin</code> 压缩 js， 可开启多进程压缩、推荐使用</p> <pre><code class=\"prism language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">minimize</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">minimizer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">TerserPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">parallel</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 多进程压缩</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p><code>Happypack</code> ❌（不再维护） 可开启多进程</p> </li><li> <p><code>HardSourceWebpackPlugin</code> 缓存</p> </li><li> <p><code>speed-measure-webpack-plugin</code> 打包构建速度分析、查看编译速度</p> </li><li> <p><code>webpack-bundle-analyzer </code>打包体积分析</p> </li><li> <p><code>compression-webpack-plugin</code> gzip 压缩</p> </li></ul>\n<h3><a id=\"_2080\"></a>前端性能优化</h3>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6892994632968306702\">前端性能优化 24 条建议（2020）</a></p>\n</blockquote>\n<ol><li>减少 http 请求</li><li>使用 http2</li><li>静态资源使用 CDN</li><li>将 CSS 放在文件头部，JavaScript 文件放在底部</li><li>使用字体图标 iconfont 代替图片图标</li><li>设置缓存，强缓存，协商缓存</li><li>压缩文件，css(<code>MiniCssExtractPlugin</code>),js(<code>UglifyPlugin</code>),html(<code>html-webpack-plugin</code>)文件压缩，清除无用的代码，<code>tree-shaking</code>（需要 es6 的 import 才支持），gzip 压缩(<code>compression-webpack-plugin</code>)</li><li>splitChunks 分包配置，optimization.splitChunks 是基于 <a href=\"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.docschina.org%2Fplugins%2Fsplit-chunks-plugin%2F\">SplitChunksPlugin</a> 插件实现的</li><li>图片优化、图片压缩</li><li>webpack 按需加载代码，<code>hash</code>，<code>contenthash</code></li><li>减少重排重绘</li><li>降低 css 选择器的复杂性</li></ol>\n<h3><a id=\"babel_2097\"></a>babel</h3>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6844904008679686152\">不容错过的 Babel7 知识</a></p>\n</blockquote>\n<p>核心库 <code>@babel/core</code></p>\n<p><code>Polyfill</code> 垫片</p>\n<p>CLI 命令行工具 <code>@babel/cli</code></p>\n<p>插件</p>\n<p>预设：包含了很多插件的一个组合，<code>@babel/preset-env</code> <code>@babel/preset-react</code> <code>@babel/preset-typescript</code></p>\n<p><strong>polyfill</strong></p>\n<p>Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API，比如<code>Iterator</code>、<code>Generator</code>、<code>Set</code>、<code>Map</code>、<code>Proxy</code>、<code>Reflect</code>、<code>Symbol</code>、<code>Promise</code>等全局对象，以及一些定义在全局对象上的方法（比如<code>Object.assign</code>）都不会转码。</p>\n<p>举例来说，ES6 在<code>Array</code>对象上新增了<code>Array.from</code>方法。Babel 就不会转码这个方法。如果想让这个方法运行，可以使用<code>core-js</code>和<code>regenerator-runtime</code>(后者提供 generator 函数的转码)，为当前环境提供一个垫片。</p>\n<p><strong><code>@babel/plugin-transform-runtime</code></strong></p>\n<p><code>Babel</code> 会使用很小的辅助函数来实现类似 <code>_createClass</code> 等公共方法。默认情况下，它将被添加(<code>inject</code>)到需要它的每个文件中。</p>\n<p>如果你有 10 个文件中都使用了这个 <code>class</code>，是不是意味着 <code>_classCallCheck</code>、<code>_defineProperties</code>、<code>_createClass</code> 这些方法被 <code>inject</code> 了 10 次。这显然会导致包体积增大，最关键的是，我们并不需要它 <code>inject</code> 多次。</p>\n<p><code>@babel/plugin-transform-runtime</code> 是一个可以重复使用 <code>Babel</code> 注入的帮助程序，以节省代码大小的插件。</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev @babel/plugin-transform-runtime\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save @babel/runtime\n</code></pre>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">//.babelrc</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string-property property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token string-property property\">\"useBuiltIns\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"usage\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 配置 polyfill 动态导入</span>\n                <span class=\"token string-property property\">\"corejs\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token comment\">// core-js@3</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"@babel/plugin-transform-runtime\"</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_2150\"></a>浏览器</h2>\n<h3><a id=\"_2152\"></a>跨域、同源策略</h3>\n<p>参考：https://blog.csdn.net/weixin_43745075/article/details/115482227</p>\n<blockquote>\n<p>同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指\"协议+域名+端口\"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p>\n</blockquote>\n<p><img alt=\"img\" src=\"image\\20210407114820178.png\"/></p>\n<p><strong>同源策略限制内容有：</strong></p>\n<ul><li>Cookie、LocalStorage、IndexedDB 等存储性内容</li><li>DOM 节点</li><li>AJAX 请求发送后，结果被浏览器拦截了</li></ul>\n<p>但是有三个标签是允许跨域加载资源：</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>XXX<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>XXX<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>XXX<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h3><a id=\"_2174\"></a>跨域解决方案</h3>\n<ol><li> <p><code>JSONP</code>：通 过 动 态 创 建 <code>script</code> ， 再 请 求 一 个 带 参 网 址 实 现 跨 域 通 信 。</p> </li><li> <p>开发环境：前端做代理</p> </li><li> <p><code>nginx</code>反向代理</p> </li><li> <p><code>CORS</code>: 服务端设置 <code>Access-Control-Allow-Origin</code> 即可，前端无须设置，若要带 <code>cookie</code> 请求，前后端都需要设置。</p> </li><li> <p><code>websocket</code></p> <p>—下面的跨域通信、注意只是页面之间的跨域，不是前后端服务跨域，别人问前后端跨域就不要回答下面的了</p> </li><li> <p><code>postMessage</code></p> </li><li> <p>window.name + iframe</p> </li><li> <p>document.domain + iframe</p> </li><li> <p>location.hash + iframe</p> </li></ol>\n<h3><a id=\"_2196\"></a>垃圾回收机制</h3>\n<ul><li>标记清除： 进入环境、离开环境</li><li>引用计数（不常用）：值被引用的次数， 当引用次数为零时会被清除（缺陷，相互引用的会有问题）</li></ul>\n<h3><a id=\"_2201\"></a>缓存机制</h3>\n<h4><a id=\"_2203\"></a>强缓存</h4>\n<blockquote>\n<p>如果命中强缓存–就不用像服务器去请求</p>\n</blockquote>\n<ol><li> <p><code>Expires</code> 设置时间，过期时间 <code>expires: Tue, 15 Oct 2019 13:30:54 GMT</code></p> <p>通过本地时间和 expires 比较是否过期，如果过期了就去服务器请求，没有过期的话就直接使用本地的</p> <p>缺点：本地时间可能会更改， 导致缓存出错</p> </li><li> <p><code>Cache-Control</code> HTTP1.1 中新增的</p>\n<ul><li> <p>max-age 最大缓存多少毫秒，列如 <code>Cache-Control: max-age=2592000</code></p> </li><li> <p>no-store (每次都要请求，就连协商缓存都不走)表示不进行缓存，缓存中不得存储任何关于客户端请求和服务端响应的内容。每次 由客户端发起的请求都会下载完整的响应内容。<code>Cache-Control: no-store</code></p> </li><li> <p>no-cache（默认值）表示不缓存过期的资源，缓存会向源服务器进行有效期确认后处理资源，也许称 为 do-notserve-from-cache-without-revalidation 更合适。浏览器默认开启的是 no-cache，其 实这里也可理解为开启协商缓存</p> </li><li> <p>public 和 private</p> <p>public 与 private 是针对资源是否能够被代理服务缓存而存在的一组对立概念</p> <p>当我们为资源设置了 pubile，那么它既可以被浏览器缓存也可被代理服务器缓存。设置为</p> <p>private 的时候，则该资源只能被浏览器缓存，其中默认值是 private。</p> </li><li> <p>max-age 和 s-maxage</p> <p>s-maxage 只适用于供多用户使用的公共服务器上(如 CND cache)，并只对 public 缓存有效</p> </li></ul> </li></ol>\n<h4><a id=\"_2233\"></a>协商缓存</h4>\n<blockquote>\n<p>需要向服务器请求，如果没有过期，服务器会返回 304，</p>\n</blockquote>\n<ol><li><strong>ETag 和 If-None-Match 唯一标识</strong></li></ol>\n<ul><li> <p>服务器响应 ETag 值，浏览器携带的是 If-None-Match（携带的是上一次响应的 ETag），服务拿到这 If-None-Match 值后判断过期–&gt; 没有过期 304，并且返回 ETag</p>\n<hr/> <p>二者的值都是服务器为每份资源分配的唯一标识字符串。</p> <p>• 浏览器请求资源，服务器会在响应报文头中加入 ETag 字段。资源更新的时候，服务端的</p> <p>ETag 值也随之更新</p> <p>• 浏览器再次请求资源，会在请求报文头中添加 If-None-Match 字段，它的值就是上次响应</p> <p>报文中的 ETag 值，服务器会对比 ETag 和 If-None-Match 的值是否一致。如果不一致，服务</p> <p>器则接受请求，返回更新后的资源，状态码返回 200；如果一致，表明资源未更新，则返回</p> <p>状态码 304，可继续使用本地缓存，值得注意的是此时响应头会加上 ETag 字段，即使它没</p> <p>有变化</p>\n<hr/> </li><li> <p><strong>Last-Modified 和 If-Modified-Since 时间戳</strong><br/> 缺点： 某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说 1s 内修改了 N 次)，</p> <p>If-Modified-Since 可查到的是秒级，这种修改无法判断</p> </li></ul>\n<h3><a id=\"_2266\"></a>预编译</h3>\n<p>四部曲</p>\n<ol><li>创建<code>AO</code>对象</li><li>找形参和变量声明，将变量和形参名作为<code>AO</code>的属性名，值为<code>undefined</code></li><li>将实参值和形参值相统一</li><li>在函数体里面找到函数声明，值赋予函数体</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 预编译</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>test <span class=\"token comment\">/* 形参 */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" test: \"</span><span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function(){}</span>\n  <span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"bs\"</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" test: \"</span><span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n  <span class=\"token comment\">// 函数声明</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 函数表达式</span>\n  <span class=\"token function-variable function\">str</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" test: \"</span><span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 预编译 四部曲</span>\n<span class=\"token comment\">// 1. 创建AO对象</span>\n<span class=\"token comment\">// 2. 找形参和变量声明，将变量和形参名作为AO的属性名，值为undefined</span>\n<span class=\"token comment\">// 3. 将实参值和形参值相统一</span>\n<span class=\"token comment\">// 4. 在函数体里面找到函数声明，值赋予函数体</span>\n\n<span class=\"token comment\">// AO {<!-- --></span>\n<span class=\"token comment\">//   test: undefined</span>\n<span class=\"token comment\">//   str: undefined</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token comment\">// AO {<!-- --></span>\n<span class=\"token comment\">//   test: 1</span>\n<span class=\"token comment\">//   str: undefined</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token comment\">// AO {<!-- --></span>\n<span class=\"token comment\">//   test: 1</span>\n<span class=\"token comment\">//   str: function() {}</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token comment\">/*实参*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"222\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" a, b, c: \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// AO {<!-- --></span>\n<span class=\"token comment\">//   a : '222',</span>\n<span class=\"token comment\">//   b : function() {},</span>\n<span class=\"token comment\">//   c : 3</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// let a = 22</span>\n<span class=\"token comment\">// window.a ==&gt; 22</span>\n</code></pre>\n<p>全局</p>\n<ol><li>创建 GO 对象==window</li><li>变量声明，将变量作为 GO 的属性名，值为<code>undefined</code></li><li>找到函数声明，值赋予函数体</li></ol>\n<h3><a id=\"eventloop_2339\"></a>event-loop(事件循环)</h3>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6844903764202094606\">一次弄懂 Event Loop（彻底解决此类面试问题）</a></p>\n</blockquote>\n<p><code>JS</code>是单线程的，为了防止一个函数执行时间过长阻塞后面的代码，所以会先将同步代码压入执行栈中，依次执行，将异步代码推入异步队列，异步队列又分为宏任务队列和微任务队列，因为宏任务队列的执行时间较长，所以微任务队列要优先于宏任务队列。微任务队列的代表就是，<code>Promise.then</code>，<code>MutationObserver</code>，宏任务的话就是<code>setImmediate setTimeout setInterval</code></p>\n<p><strong>MacroTask（宏任务）*</strong></p>\n<ul><li><code>script</code>全部代码、<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>（浏览器暂时不支持，只有 IE10 支持，具体可见<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FWindow%2FsetImmediate\"><code>MDN</code></a>）、<code>I/O</code>、<code>UI Rendering</code>。</li></ul>\n<p><strong>MicroTask（微任务）</strong></p>\n<ul><li><code>Process.nextTick（Node独有）</code>、<code>Promise.then</code>、<code>Object.observe(废弃)</code>、<code>MutationObserver</code></li></ul>\n<h4><a id=\"_2353\"></a>浏览器中</h4>\n<blockquote>\n<p>执行完一个宏任务，会执行所有的微任务</p>\n</blockquote>\n<pre><code class=\"prism language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setTimeout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"promise1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"promise2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行结果</p>\n<pre><code>script start\npromise1\nscript end\npromise2\nsetTimeout\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/608a4edf58d141c88e75262938c3ac66.gif\"/></p>\n<h4><a id=\"nodejs__2385\"></a>nodejs 中</h4>\n<blockquote>\n<p>在 11 之前的版本，会在每个阶段之后执行所有的微任务</p>\n<p>在 11 版本及之后，会每执行完一个宏任务，就会清空所用的微任务（和浏览器保存一致）</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new Promise 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new Promise then\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timer1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timer1 new Promise\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timer1 new Promise then\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timer1 Promise then\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timer2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timer2 Promise then\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在 node11 版本之前（不包含 11）</p>\n<pre><code>new Promise 1\nstart end\nnew Promise then\ntimer1\ntimer1 new Promise\ntimer2\ntimer1 new Promise then\ntimer1 Promise then\ntimer2 Promise then\n</code></pre>\n<p>在 node11 版本及之后</p>\n<pre><code>new Promise 1\nstart end\nnew Promise then\ntimer1\ntimer1 new Promise\ntimer1 new Promise then\ntimer1 Promise then\ntimer2\ntimer2 Promise then\n</code></pre>\n<p><img alt=\"img\" src=\"https://img-blog.csdnimg.cn/img_convert/37909b184373b6991221f007e5e94e16.webp?x-oss-process=image/format,png\"/></p>\n<p><code>Node</code>的<code>Event loop</code>一共分为 6 个阶段，每个细节具体如下：</p>\n<ol><li><code>timers</code>: 执行<code>setTimeout</code>和<code>setInterval</code>中到期的<code>callback</code>。</li><li><code>pending callback</code>: 上一轮循环中少数的<code>callback</code>会放在这一阶段执行。</li><li><code>idle, prepare</code>: 仅在内部使用。</li><li><code>poll</code>: 最重要的阶段，执行<code>pending callback</code>，在适当的情况下回阻塞在这个阶段。</li><li><code>check</code>: 执行<code>setImmediate</code>(<code>setImmediate()</code>是将事件插入到事件队列尾部，主线程和事件队列的函数执行完成之后立即执行<code>setImmediate</code>指定的回调函数)的<code>callback</code>。</li><li><code>close callbacks</code>: 执行<code>close</code>事件的<code>callback</code>，例如<code>socket.on('close'[,fn])</code>或者<code>http.server.on('close, fn)</code>。</li></ol>\n<h2><a id=\"_2461\"></a>网络</h2>\n<h3><a id=\"_2463\"></a><strong>常见状态码</strong></h3>\n<pre><code>1xx: 接受，继续处理 \n200: 成功，并返回数据 \n201: 已创建 \n202: 已接受 \n203: 成为，但未授权 \n204: 成功，无内容 \n205: 成功，重置内容 \n206: 成功，部分内容 \n301: 永久移动，重定向 \n302: 临时移动，可使用原有 URI \n304: 资源未修改，可使用缓存 \n305: 需代理访问 \n400: 请求语法错误 \n401: 要求身份认证 \n403: 拒绝请求 \n404: 资源不存在 \n500: 服务器错误\n</code></pre>\n<h3><a id=\"TCP_2487\"></a>TCP</h3>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6844903958624878606\">面试官，不要再问我三次握手和四次挥手</a></p>\n</blockquote>\n<h4><a id=\"_2491\"></a><strong>三次握手</strong></h4>\n<p><img alt=\"三次握手.png\" src=\"https://img-blog.csdnimg.cn/img_convert/839c5b364d7061693f483f8bb2fa5866.webp?x-oss-process=image/format,png\"/></p>\n<p><strong>为什么需要三次握手，两次不可以吗</strong></p>\n<pre><code>为了防止失效的连接请求又传送到主机，因而产生错误。\n如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送了第一个请\n求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于 TCP 的客\n户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条\n报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。\n此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失\n效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不\n必要的错误和资源的浪费。\n\n如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了\n那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器\n收不到确认，就知道客户端并没有请求连接。\n</code></pre>\n<h4><a id=\"_2512\"></a>四次挥手</h4>\n<p><img alt=\"image.png\" src=\"https://img-blog.csdnimg.cn/img_convert/46bc1252f36441c68453b4285e7f3d29.webp?x-oss-process=image/format,png\"/></p>\n<p><strong>挥手为什么需要四次？</strong></p>\n<p>因为当服务端收到客户端的 SYN 连接请求报文后，可以直接发送 SYN+ACK 报文。其中<strong>ACK 报文是用来应答的，SYN 报文是用来同步的</strong>。但是关闭连接时，当服务端收到 FIN 报文时，很可能并不会立即关闭 SOCKET，所以只能先回复一个 ACK 报文，告诉客户端，“你发的 FIN 报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送 FIN 报文，因此不能一起发送。故需要四次挥手。</p>\n<p><strong><code>2MSL</code>等待状态</strong></p>\n<p>TIME_WAIT 状态也成为<code>2MSL</code>等待状态。每个具体 TCP 实现必须选择一个报文段最大生存时间 MSL（Maximum Segment Lifetime），它是任何报文段被丢弃前在网络内的最长时间。这个时间是有限的，因为 TCP 报文段以 IP 数据报在网络内传输，而 IP 数据报则有限制其生存时间的 TTL 字段。</p>\n<p>对一个具体实现所给定的 MSL 值，处理的原则是：当 TCP 执行一个主动关闭，并发回最后一个 ACK，该连接必须在 TIME_WAIT 状态停留的时间为 2 倍的 MSL。这样可让 TCP 再次发送最后的 ACK 以防这个 ACK 丢失（另一端超时并重发最后的 FIN）。</p>\n<p>这种 2MSL 等待的另一个结果是这个 TCP 连接在 2MSL 等待期间，定义这个连接的插口（客户的 IP 地址和端口号，服务器的 IP 地址和端口号）不能再被使用。这个连接只能在 2MSL 结束后才能再被使用。</p>\n<h3><a id=\"HTTP__2528\"></a>HTTP <strong>版本</strong></h3>\n<p>HTTP/1.0</p>\n<p>最早的 http 只是使用一些简单的网页上和网络请求上，每次请求都打开一个新的 TCP 连接， 收到响应后立即断开连接</p>\n<p>HTTP/1.1<br/> 缓存处理，HTTP/1.1 更多的引入了缓存策略，如 Cache-Control，Entity tag，If-Unmodified-Since, If-Match, If-None-Match 等</p>\n<p>宽带优化及网络连接的使用，在 HTTP/1.0 中，存在一些浪费宽带的现象，列如客户端只需要某个对象的一部分，而服务器把整个对象都送过来了，并且不支持断点续传，HTTP1.1 则</p>\n<p>在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（PartialContent），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</p>\n<p>错误通知的管理，在 HTTP/1.1 中新增了 24 个错误状态响应码，如 409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。</p>\n<p>Host 头处理，在 HTTP1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中</p>\n<p>的 URL 并没有传递主机名。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多</p>\n<p>个虚拟主机（Multi-homed Web Servers），并且它们共享一个 IP 地址。HTTP1.1 的请求消息和响应消息都应支持 Host 头域，且请求消息中如果没有 Host 头域会报告一个错误（400 Bad Request）</p>\n<p>长连接， HTTP/1.1 默认开启持久连接（默认：keep-alive），在一个 TCP 连接上可以传递多</p>\n<p>个 HTTP 请求和响应，减少了建立与关闭连接的消耗和延迟</p>\n<p>HTTP/2.0</p>\n<p>在 HTTP/2.0 中，有两个重要的概念，分别是帧（frame） 和 流（stream），帧代表数据传输</p>\n<p>的最小单位，每个帧都有序列标识标明该帧属于哪个流，流也就是多个帧组成的数据流，每</p>\n<p>个流表示一个请求。</p>\n<p>新的二进制格式： HTTP/1.x 的解析是基于文本的。基于文本协议的格式解析存在天然缺陷，</p>\n<p>文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认 0 和 1</p>\n<p>的组合。基于这种考虑 HTTP2.0 的协议解析决定采用二进制格式，实现方便且健壮。</p>\n<p>多路复用： HTTP/2.0 支持多路复用，这是 HTTP/1.1 持久连接的升级版。多路复用，就是在</p>\n<p>一个 TCP 连接中存在多个条流，也就是多个请求，服务器则可以通过帧中的标识知道该帧属</p>\n<p>于哪个流（即请求），通过重新排序还原请求。多路复用允许并发多个请求，每个请求及该</p>\n<p>请求的响应不需要等待其他的请求或响应，避免了线头阻塞问题。这样某个请求任务耗时严</p>\n<p>重，不会影响到其它连接的正常执行,极大的提高传输性能。</p>\n<p>头部压缩： 对前面提到的 HTTP/1.x 的 header 带有大量信息，而且每次都要重复发送，</p>\n<p>HTTP/2.0 使用 encoder 来减少需要传输的头部大小，通讯双方各自 cache 一份头部 fields 表，</p>\n<p>既避免了重复头部的传输，又减小了需要传输的大小。</p>\n<p>服务端推送： 服务端推送指把客户端所需要的 css/js/img 资源伴随着 index.html 一起发送</p>\n<p>到客户端，省去了客户端重复请求的步骤（从缓存中取）。正因为没有发起请求，建立连接</p>\n<p>等操作，所以静态资源通过服务端推送的方式极大的提升了速度HTTP/3.0</p>\n<p>HTTP/2.0 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。但当这个连接中</p>\n<p>出现了丢包的情况，会导致整个 TCP 都要开始等待重传，也就导致了后面所有的数据都阻塞了。</p>\n<p>避免包阻塞： 多个流的数据包在 TCP 连接上传输时，若一个流中的数据包传输出现问题，</p>\n<p>TCP 需要等待该包重传后，才能继续传输其它流的数据包。但在基于 UDP 的 QUIC 协议中，</p>\n<p>不同的流之间的数据传输真正实现了相互独立互不干扰，某个流的数据包在出问题需要重传</p>\n<p>时，并不会对其他流的数据包传输产生影响。</p>\n<p>快速重启会话: 普通基于 tcp 的连接，是基于两端的 ip 和端口和协议来建立的。在网络切换</p>\n<p>场景，例如手机端切换了无线网，使用 4G 网络，会改变本身的 ip，这就导致 tcp 连接必须</p>\n<p>重新创建。而 QUIC 协议使用特有的 UUID 来标记每一次连接，在网络环境发生变化的时候，</p>\n<p>只要 UUID 不变，就能不需要握手，继续传输数据。</p>\n<p>HTTP2.0 的多路复用和 HTTP1.X 中的长连接有什么区别？</p>\n<p>HTTP/1.* 一次请求-响应，建立一个连接，用完关闭；每一个请求都要建立一个连接；</p>\n<p>HTTP/1.1 在一个 TCP 连接上可以传递多个 HTTP 请求和响应，后面的请求等待前面的请求返</p>\n<p>回才能获得执行机会，一旦有某个请求超时，后续请求只能被阻塞，毫无办法，也就是常说</p>\n<p>的线头阻塞</p>\n<p>HTTP/2.0 多个请求可同时在一个连接上并行执行.某个请求任务耗时严重，不影响其他连接</p>\n<p>的正常执行。</p>\n<h3><a id=\"httpshttp__ssltls_2623\"></a>https(http + ssl/tls)</h3>\n<p>http: 最广泛网络协议，BS 模型，浏览器高效。</p>\n<p>https: 安全版，通过 SSL 加密，加密传输，身份认证，密钥</p>\n<p>1 https 相对于 http 加入了 ssl 层, 加密传输, 身份认证;</p>\n<p>2 需要到 ca 申请收费的证书;</p>\n<p>3 安全但是耗时多，缓存不是很好;</p>\n<p>4 注意兼容 http 和 https;</p>\n<p>5 连接方式不同, 端口号也不同, http 是 80, https 是 443</p>\n<ul><li> <p>明文： 普通的文本</p> </li><li> <p>密钥：把明文加密的那个钥匙</p> </li><li> <p>密文： 把明文加密</p> <p>明文+密钥==&gt;密文==&gt;密钥==解密=&gt;明文</p> </li><li> <p>对称加密 解密的 key（密钥）和解密的 key 是同一个 3 + 1</p> </li><li> <p>非对称加密 私钥和公钥</p> </li></ul>\n<p><img alt=\"无标题.png\" src=\"image\\be7dfdd3ca57b012fb80fb05b05767d3.png\"/></p>\n<h2><a id=\"_2653\"></a>手写</h2>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/7031322059414175774\">10 个常见的前端手写功能，你全都会吗</a></p>\n</blockquote>\n<p>最近面试 2022 年 3 月问到了很多手写，这个一定要准备下</p>\n<h3><a id=\"_2659\"></a>防抖</h3>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">,</span> immediate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">let</span> timeout<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>immediate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">const</span> callNow <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>timeout<span class=\"token punctuation\">;</span>\n      timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        timeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callNow<span class=\"token punctuation\">)</span> <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n      timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_2683\"></a>节流</h3>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> wait</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">let</span> pre <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> pre <span class=\"token operator\">&gt;=</span> wait<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      pre <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"event_bus____2698\"></a>event bus 事件总线 | 发布订阅模式</h3>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// event bus</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">EventBus</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> events <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>events<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      events<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    events<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> handlers <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    handlers <span class=\"token operator\">&amp;&amp;</span>\n      handlers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> events <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>events<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    events<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> events<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> fn <span class=\"token operator\">!==</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_2739\"></a>数据偏平化</h3>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 数据偏平化</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">flatter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> curr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">flatter</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_new_2750\"></a>手写 new</h3>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 手写 new</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myNew</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctr<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>ctr<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myNew<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> ctr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">ctr</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    result <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> result <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> result <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"callbind_2768\"></a>call、bind</h3>\n<pre><code class=\"prism language-js\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myCall</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  context<span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//bind实现要复杂一点  因为他考虑的情况比较多 还要涉及到参数合并(类似函数柯里化)</span>\n\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myBind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>context <span class=\"token operator\">||</span> context <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    context <span class=\"token operator\">=</span> window<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 创造唯一的key值  作为我们构造的context内部方法名</span>\n  <span class=\"token keyword\">let</span> fn <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  context<span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//  bind情况要复杂一点</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">result</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>innerArgs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 第一种情况 :若是将 bind 绑定之后的函数当作构造函数，通过 new 操作符使用，则不绑定传入的 this，而是将 this 指向实例化出来的对象</span>\n    <span class=\"token comment\">// 此时由于new操作符作用  this指向result实例对象  而result又继承自传入的_this 根据原型链知识可得出以下结论</span>\n    <span class=\"token comment\">// this.__proto__ === result.prototype   //this instanceof result =&gt;true</span>\n    <span class=\"token comment\">// this.__proto__.__proto__ === result.prototype.__proto__ === _this.prototype; //this instanceof _this =&gt;true</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">_this</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// 此时this指向指向result的实例  这时候不需要改变this指向</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _this<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>innerArgs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//这里使用es6的方法让bind支持参数合并</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// 如果只是作为普通函数调用  那就很简单了 直接改变this指向为传入的context</span>\n      context<span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>innerArgs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 如果绑定的是构造函数 那么需要继承构造函数原型属性和方法</span>\n  <span class=\"token comment\">// 实现继承的方式: 使用Object.create</span>\n  result<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_2812\"></a>异步控制并发数</h3>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">limitRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">requests<span class=\"token punctuation\">,</span> limit <span class=\"token operator\">=</span> <span class=\"token number\">3</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  requests <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>limit <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      limit<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">const</span> promiseFn <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      promiseFn<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一定要通过 count 判断、不能通过 requests.length 判断是否为空，这样不对的</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">===</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token comment\">// 最后一个</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 测试</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://www.baidu.com/s?ie=UTF-8&amp;wd=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">limitRequest</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_2848\"></a>算法/特殊题目</h2>\n<p>最近面试 2022 年 3 月问到了很多手写，这个一定要准备下、下面都是我被问到的</p>\n<h3><a id=\"_2852\"></a>台阶问题</h3>\n<p>有 N 个台阶，一步可以走一梯或者两梯，请问有多少种走法</p>\n<p>解答：<a href=\"https://blog.csdn.net/z1832729975/article/details/123836190\">https://blog.csdn.net/z1832729975/article/details/123836190</a></p>\n<h3><a id=\"_2858\"></a>有效括号</h3>\n<blockquote>\n<p>我面试才几家，这个有两家都问到了 <a href=\"https://leetcode-cn.com/problems/valid-parentheses/\">力扣原题</a></p>\n</blockquote>\n<p>给定一个只包括 ‘(’，‘)’，‘{’，‘}’，‘[’，‘]’ 的字符串 s ，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<p>左括号必须用相同类型的右括号闭合。<br/> 左括号必须以正确的顺序闭合。</p>\n<pre><code>示例 1：\n输入：s = \"()\"\n输出：true\n\n\n示例 2：\n输入：s = \"()[]{}\"\n输出：true\n\n示例 3：\n输入：s = \"(]\"\n输出：false\n</code></pre>\n<p><strong>实现</strong></p>\n<p>我们可以通过栈来实现、当遇到左括号的时候就把对应的右括号值<code>push</code>到栈中，否则的话我们就把栈定的元素<code>pop</code>和当前字符比较是否相等，不相信的话直接返回 <code>false</code></p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">/**\n * @param {string} s\n * @return {boolean}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">isValid</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> leftFlags <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token string-property property\">\"(\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"{\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"[\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> chart <span class=\"token keyword\">of</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> flag <span class=\"token operator\">=</span> leftFlags<span class=\"token punctuation\">[</span>chart<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 是左括号</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 是右括号</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chart <span class=\"token operator\">!==</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_0715_2916\"></a>现在时间 07:15，请问分针和时针的夹角是多少</h3>\n<p>先看看时钟，要了解 07:15 在哪，这个不知道在哪就尴尬了</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\833a03cad6e346789184fbe5643ec241.png\"/></p>\n<p>画图，结果如下</p>\n<p>7 点 15 分时针和分针所形成的角是</p>\n<p>120 + 30*1/4=127.5</p>\n<p>这题需要注意时针还好继续走，不会固定，不然容易被坑</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-gKrlcakV-1649606259971)(images/前端面试题整理/image-20220331153206674.png)]</p>\n<h3><a id=\"_IP__2932\"></a>写 IP 地址的正则表达式</h3>\n<p>分析<code>ip</code>地址</p>\n<h3><a id=\"_a1__a2__a3__true_2936\"></a>让 <code>a==1 &amp;&amp; a==2 &amp;&amp; a==3</code> 为 <code>true</code></h3>\n<blockquote>\n<p>因为这个是 ==, 会存在隐式类型转换</p>\n</blockquote>\n<ul><li> <p>利用对象</p> <p><code>Symbol.toPrimitive</code></p> <p><code>valueOf</code></p> <p><code>toString</code></p> <pre><code class=\"prism language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 这三种方法都可以，优先级也是这个顺序</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>toPrimitive<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// valueOf() {<!-- --></span>\n  <span class=\"token comment\">//   return a.value++</span>\n  <span class=\"token comment\">// },</span>\n  <span class=\"token comment\">// toString() {<!-- --></span>\n  <span class=\"token comment\">//   return a.value++</span>\n  <span class=\"token comment\">// }</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>利用数组</p> <pre><code class=\"prism language-js\">a<span class=\"token punctuation\">.</span>valueOf <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>shift<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 一样有</span>\n<span class=\"token comment\">//a[Symbol.toPrimitive] = a.shift</span>\n<span class=\"token comment\">//a.toString = a.shift</span>\n</code></pre> </li><li> <p>通过<code>Object.defineProperty</code>拦截</p> <pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>通过 Proxy 拦截</p> <pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li></ul>\n<h2><a id=\"typescript_3000\"></a>typescript</h2>\n<blockquote>\n<p>建议先把基础的东西学会，推荐看这篇文章、基础的学会，就能应付大多数的 typescript 面试了</p>\n<p><a href=\"https://juejin.cn/post/7018805943710253086\">2021 typescript 史上最强学习入门文章(2w 字)</a></p>\n</blockquote>\n<h3><a id=\"constreadonly_3006\"></a><code>const</code>和<code>readonly</code>的区别</h3>\n<p><code>const</code>常量：表示这个变量的指针地址不可以在改变，可以更改对象内部的属性</p>\n<p><code>readonly</code>只读：指针地址不可以改变，并且对象内部的属性也不可以改变</p>\n<ol><li>const 用于变量，readonly 用于属性</li><li>const 在运行时检查，readonly 在编译时检查</li><li>使用 const 变量保存的数组，可以使用 push，pop 等方法。但是如果使用<code>ReadonlyArray</code>声明的数组不能使用 push，pop 等方法。</li></ol>\n<h3><a id=\"typeinterface_3016\"></a><code>type</code>和<code>interface</code>的区别</h3>\n<p>参考：https://juejin.cn/post/7018805943710253086#heading-63</p>\n<p>type-类型别名</p>\n<p>interface-接口</p>\n<ol start=\"2\"><li> <p>接口重名会合并、类型别名重名会报错</p> <pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 这个接口合并，变成下面的</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Aanimal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Aanimal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 会报错、重名了</span>\n</code></pre> </li><li> <p>两者都可以用来描述对象或函数的类型，但是语法不同</p> <p>interface</p> <pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{<!-- --></span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">SetPoint</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>type</p> <pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">SetPoint</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>类型别名可以为任何类型引入名称。例如基本类型，联合类型等</p> <pre><code class=\"prism language-typescript\"><span class=\"token comment\">// primitive</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Name</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// object</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PartialPointX</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PartialPointY</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// union</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PartialPoint</span> <span class=\"token operator\">=</span> PartialPointX <span class=\"token operator\">|</span> PartialPointY<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// tuple</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// dom</span>\n<span class=\"token keyword\">let</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> div<span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>扩展</p> <p>两者的扩展方式不同，但并不互斥。接口可以扩展类型别名，同理，类型别名也可以扩展接口。</p> <p>接口的扩展就是继承，通过 <code>extends</code> 来实现。类型别名的扩展就是交叉类型，通过 <code>&amp;</code> 来实现。</p> <p>接口扩展接口</p> <pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PointX</span> <span class=\"token punctuation\">{<!-- --></span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PointX</span> <span class=\"token punctuation\">{<!-- --></span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li></ol>\n<p>类型别名扩展类型别名</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">PointX</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> PointX <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{<!-- --></span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>接口扩展类型别名</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">PointX</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PointX</span> <span class=\"token punctuation\">{<!-- --></span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>类型别名扩展接口</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PointX</span> <span class=\"token punctuation\">{<!-- --></span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> PointX <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{<!-- --></span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"keyof__typeof__3143\"></a><strong>keyof 和 typeof 关键字的作用？</strong></h3>\n<blockquote>\n<p><code>keyof 索引类型查询操作符</code> 获取索引类型的属性名，构成联合类型。<br/> <code>typeof</code> 获取一个变量或对象的类型。</p>\n</blockquote>\n<h3><a id=\"unknown_any__3148\"></a>unknown, any 的区别</h3>\n<blockquote>\n<p>unknown 类型和 any 类型类似。与 any 类型不同的是。unknown 类型可以接受任意类型赋值，但是 unknown 类型赋值给其他类型前，必须被断言</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}