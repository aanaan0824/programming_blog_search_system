{"blogid": "126430896", "writerAge": "码龄4年", "writerBlogNum": "93", "writerCollect": "296", "writerComment": "325", "writerFan": "226", "writerGrade": "5级", "writerIntegral": "1722", "writerName": "安河桥畔", "writerProfileAdress": "writer_image\\profile_126430896.jpg", "writerRankTotal": "11429", "writerRankWeekly": "291", "writerThumb": "346", "writerVisitNum": "33029", "blog_read_count": "432", "blog_time": "已于 2022-08-22 18:28:20 修改", "blog_title": "【C++】list容器模拟实现", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><code>提示：文章内容较长，请参考目录</code><br/> </p>\n<div class=\"toc\">\n<h3>list容器模拟实现</h3>\n<ul><li><a href=\"#_3\">总述</a></li><li><a href=\"#_9\">一、节点类</a></li><li><a href=\"#_32\">二、迭代器类</a></li><li><ul><li><a href=\"#_35\">成员变量</a></li><li><a href=\"#_40\">构造函数</a></li><li><a href=\"#_47\">*重载</a></li><li><a href=\"#_56\">-&gt;重载</a></li><li><a href=\"#_66\">\"++\"</a></li><li><ul><li><a href=\"#_86\">\"--\"</a></li></ul>\n</li><li><a href=\"#_102\">\"==\"和\"!=\"</a></li></ul>\n</li><li><a href=\"#_114\">三、反向迭代器类</a></li><li><ul><li><a href=\"#_119\">成员变量</a></li><li><a href=\"#_125\">*重载</a></li><li><a href=\"#_136\">-&gt;重载</a></li><li><a href=\"#_145\">\"++\"</a></li><li><a href=\"#__160\">\"- -\"</a></li><li><a href=\"#____175\">\" == \" 和\"!=\"</a></li></ul>\n</li><li><a href=\"#list_188\">四、list类</a></li><li><ul><li><a href=\"#_190\">成员变量</a></li><li><a href=\"#_196\">构造相关</a></li><li><ul><li><a href=\"#_197\">空对象</a></li><li><a href=\"#nT_216\">n个T类型元素</a></li><li><a href=\"#_228\">拷贝构造</a></li><li><a href=\"#_242\">迭代器构造</a></li><li><a href=\"#_256\">赋值运算符重载</a></li><li><a href=\"#_274\">析构</a></li></ul>\n</li><li><a href=\"#_284\">迭代器</a></li><li><ul><li><a href=\"#_285\">正向迭代器</a></li><li><a href=\"#_319\">反向迭代器</a></li></ul>\n</li><li><a href=\"#_344\">容量操作</a></li><li><a href=\"#_371\">元素访问</a></li><li><ul><li><a href=\"#_401\">打印链表</a></li></ul>\n</li><li><a href=\"#_417\">元素修改</a></li><li><ul><li><a href=\"#_418\">尾插与尾删</a></li><li><a href=\"#_441\">头插与头删</a></li><li><a href=\"#insert_453\">⭐insert</a></li><li><a href=\"#erase_471\">⭐erase</a></li><li><a href=\"#clearswap_500\">clear&amp;swap</a></li></ul>\n</li></ul>\n</li><li><a href=\"#list_514\">附：完整list类，含测试用例</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_3\"></a>总述</h1>\n<p>list模拟实现主要包括四个类：<u>节点类、迭代器类、反向迭代器类、list类</u>。<br/> list底层结构：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\89e498c0114949c4983037bcab77d7e0.png\"/></p>\n<p>因为list的底层空间不连续，所以迭代器不能使用原生态的指针，将节点类型的指针封装成类，重载解引用及自增等常用操作。list可以保存多种数据类型，所以这些类都写成类模板</p>\n<h1><a id=\"_9\"></a>一、节点类</h1>\n<p>list底层是带头结点的双向循环链表，先实现节点类，给成类模板的形式，便于插入不同类型的数据。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tListNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> prev<span class=\"token punctuation\">;</span>\n\tListNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n\tT data<span class=\"token punctuation\">;</span><span class=\"token comment\">//要在链表中保存的数据类型</span>\n\n\t<span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> value <span class=\"token operator\">=</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">prev</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>定义新节点的方法：</p>\n<pre><code class=\"prism language-cpp\">ListNode<span class=\"token operator\">&lt;</span>变量类型<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span>变量名<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>；\n</code></pre>\n<h1><a id=\"_32\"></a>二、迭代器类</h1>\n<p>迭代器类模板有三个参数，T：迭代器指向的元素类型，Ref：返回的引用类型，Ptr：返回的指针类型。Ref和Ptr一般不写成T&amp;和T*。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f3b6a6548b554a5da247a5024a84e29d.png\"/></p>\n<h2><a id=\"_35\"></a>成员变量</h2>\n<p>迭代器类的成员变量就是节点类型的指针</p>\n<pre><code class=\"prism language-cpp\">Node<span class=\"token operator\">*</span> _pNode<span class=\"token punctuation\">;</span><span class=\"token comment\">//成员变量，节点类型指针</span>\n</code></pre>\n<h2><a id=\"_40\"></a>构造函数</h2>\n<p>编译器默认的构造函数是无参的，构造函数需要给出</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">ListIterator</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> pNode <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span><span class=\"token function\">_pNode</span><span class=\"token punctuation\">(</span>pNode<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_47\"></a>*重载</h2>\n<p>返回节点中保存的数据</p>\n<pre><code class=\"prism language-cpp\">Ref <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> _pNode<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_56\"></a>-&gt;重载</h2>\n<p>返回节点中保存的数据的地址</p>\n<pre><code class=\"prism language-cpp\">Ptr <span class=\"token keyword\">operator</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>_pNode<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>-&gt;的重载只对内置类型有意义：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\cf3fb8e967324344a15789bdf8bd4021.png\"/></p>\n<h2><a id=\"_66\"></a>“++”</h2>\n<p><strong>前置++</strong><br/> 返回值是迭代器自身类型的引用，前面已经将ListIterator&lt;T, Ref, Ptr&gt;重命名位Self，表示迭代器自身的类型。</p>\n<pre><code class=\"prism language-cpp\">Self<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t_pNode <span class=\"token operator\">=</span> _pNode<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>后置++</strong><br/> 定义临时变量，返回自增前的值</p>\n<pre><code class=\"prism language-cpp\">Self <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSelf <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t_pNode <span class=\"token operator\">=</span> _pNode<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_86\"></a>“–”</h3>\n<p>与++原理相同</p>\n<pre><code class=\"prism language-cpp\">Self<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t_pNode <span class=\"token operator\">=</span> _pNode<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nSelf <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSelf <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t_pNode <span class=\"token operator\">=</span> _pNode<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_102\"></a>“==“和”!=”</h2>\n<p>比较两个迭代器中封装的指针</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Self<span class=\"token operator\">&amp;</span> it<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> _pNode <span class=\"token operator\">!=</span> it<span class=\"token punctuation\">.</span>_pNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Self<span class=\"token operator\">&amp;</span> it<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> _pNode <span class=\"token operator\">==</span> it<span class=\"token punctuation\">.</span>_pNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_114\"></a>三、反向迭代器类</h1>\n<p>反向迭代器可以对迭代器类进行复用<br/> <img alt=\"在这里插入图片描述\" src=\"image\\70979d77904c427aa9b2bd569957177a.png\"/><br/> 因为类外访问静态成员变量时也会使用类名::变量名的方式，所以对迭代器类中的Reference和Pointer进行重命名时要加上typename,明确告诉编译器要重命名的是一个数据类型。否则编译器会报错：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5b15820a47dc467995a46fba23dac06c.png\"/></p>\n<h2><a id=\"_119\"></a>成员变量</h2>\n<p>反向迭代器对迭代器类进行复用</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tIterator _it<span class=\"token punctuation\">;</span><span class=\"token comment\">//正向迭代器</span>\n</code></pre>\n<h2><a id=\"_125\"></a>*重载</h2>\n<p>反向迭代器的解引用要做特殊处理，返回的是对迭代器–的值</p>\n<pre><code class=\"prism language-cpp\">Reference <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//*做特殊处理，先--,再解引用返回</span>\n\t<span class=\"token keyword\">auto</span> temp <span class=\"token operator\">=</span> _it<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">--</span>temp<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_136\"></a>-&gt;重载</h2>\n<p>复用*的重载，返回value的地址</p>\n<pre><code class=\"prism language-cpp\">Pointer <span class=\"token keyword\">operator</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_145\"></a>“++”</h2>\n<p>反向迭代器的++即为正向迭代器的–</p>\n<pre><code class=\"prism language-cpp\">Self <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token operator\">--</span>_it<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nSelf <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSelf <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">--</span>_it<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"__160\"></a>“- -”</h2>\n<p>反向迭代器的–用正向迭代器的++替代</p>\n<pre><code class=\"prism language-cpp\">Self <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token operator\">++</span>_it<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nSelf <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSelf <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">++</span>_it<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"____175\"></a>\" == \" 和\"!=\"</h2>\n<p>比较反向迭代器类中保存的正向迭代器，复用正向迭代器中的比较方法</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Self<span class=\"token operator\">&amp;</span> rit<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> _it <span class=\"token operator\">==</span> rit<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Self<span class=\"token operator\">&amp;</span> rit<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> _it <span class=\"token operator\">==</span> rit<span class=\"token punctuation\">.</span>_it<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"list_188\"></a>四、list类</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d5f9f45de494416499d813a82b721be1.png\"/></p>\n<h2><a id=\"_190\"></a>成员变量</h2>\n<p>list的成员变量只有一个head指针，指向链表的第一个节点</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_196\"></a>构造相关</h2>\n<h3><a id=\"_197\"></a>空对象</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">CreatHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>创造头节点的方法：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//提供一个创造头结点的方法</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">CreatHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//调用节点类的构造方法</span>\n\thead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\thead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\thead<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>new申请空间，令head指向这段空间，head的next和prev都指向自己。</p>\n<h3><a id=\"nT_216\"></a>n个T类型元素</h3>\n<p>调用push_back方法，创造头节点后，不断进行尾插直到元素个数等于n</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> value <span class=\"token operator\">=</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">CreatHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_228\"></a>拷贝构造</h3>\n<p>复用push_back</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">CreatHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_242\"></a>迭代器构造</h3>\n<p>将迭代器构造方法写成函数模板，可以传入不同类型的迭代器来构造list对象</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputIterator</span><span class=\"token operator\">&gt;</span>\n<span class=\"token function\">list</span><span class=\"token punctuation\">(</span>InputIterator first<span class=\"token punctuation\">,</span> InputIterator last<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">CreatHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">!=</span> last<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfirst<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_256\"></a>赋值运算符重载</h3>\n<p>与拷贝构造写法相同</p>\n<pre><code class=\"prism language-cpp\">list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//先清空当前对象中的节点</span>\n\t\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_274\"></a>析构</h3>\n<p>清空当前对象，释放头节点空间，将头节点置空</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token operator\">~</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> head<span class=\"token punctuation\">;</span>\n\thead <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_284\"></a>迭代器</h2>\n<h3><a id=\"_285\"></a>正向迭代器</h3>\n<p><strong>begin</strong><br/> 此处的iterator是对ListIterator&lt;T, T&amp;, T*&gt;的重命名，这里会返回一个ListIterator&lt;T, T&amp;, T*&gt;类对象</p>\n<pre><code class=\"prism language-cpp\">iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//iterator it(head-&gt;next);</span>\n\t<span class=\"token comment\">//return it;</span>\n\t<span class=\"token comment\">//head-&gt;next是传递给迭代器类对象构造函数的参数,调用iterator的构造函数</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//构造匿名对象返回</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>end</strong></p>\n<pre><code class=\"prism language-cpp\">iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>const类型迭代器</strong><br/> iterator和const_iterator 是两个不同的类：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7964c7dd2d3240c99bfc4b46c3a4fcda.png\"/><br/> 两者使用的是相同的类模板，但是传递的参数不同，最终实例化的也是不同的类。<br/> <strong>cbegin&amp;cend</strong></p>\n<pre><code class=\"prism language-cpp\">const_iterator <span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">const_iterator</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconst_iterator <span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">const_iterator</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_319\"></a>反向迭代器</h3>\n<p><strong>rbegin&amp;rend</strong><br/> 返回正向迭代器的end和begin</p>\n<pre><code class=\"prism language-cpp\">reverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nreverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>crbegin&amp;crend</strong><br/> 复用正向迭代器的cend和cbegin</p>\n<pre><code class=\"prism language-cpp\">const_reverse_iteraotr <span class=\"token function\">crbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">const_reverse_iteraotr</span><span class=\"token punctuation\">(</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconst_reverse_iteraotr <span class=\"token function\">crend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">const_reverse_iteraotr</span><span class=\"token punctuation\">(</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_344\"></a>容量操作</h2>\n<p><strong>size</strong><br/> 遍历链表，统计节点个数</p>\n<pre><code class=\"prism language-cpp\">size_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> <span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsize_t count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> <span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>empty</strong><br/> 如果head-&gt;next是head本身则表明链表为空</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> head<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">==</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>resize</strong><br/> 改变节点个数，若新的节点个数大于旧的，则调用push_back填充元素；若新的节点个数小于原来的调用pop_back尾删<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6a9f80f256594a86b6dde9cc4e3b9aff.png\"/></p>\n<h2><a id=\"_371\"></a>元素访问</h2>\n<p><strong>front</strong><br/> 复用迭代器解引用的方法，返回begin()位置元素</p>\n<pre><code class=\"prism language-cpp\">T<span class=\"token operator\">&amp;</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>back</strong><br/> back表示最后一个元素，但是end()指向的是最后一个元素的下一个位置，需要定义临时变量，不能直接对end()进行- -。</p>\n<pre><code class=\"prism language-cpp\">T<span class=\"token operator\">&amp;</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//return --end()//错误写法</span>\n\tit<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tit<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_401\"></a>打印链表</h3>\n<p>定义一个打印链表的函数模板，检验方法。通过迭代器遍历链表，打印每一个节点的数据。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_417\"></a>元素修改</h2>\n<h3><a id=\"_418\"></a>尾插与尾删</h3>\n<p><strong>push_back</strong><br/> 复用insert方法在end位置插入</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span>  <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>pop_back</strong><br/> 先判断链表是否为空，复用erase方法在end的前一个位置进行插入</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tit<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_441\"></a>头插与头删</h3>\n<p>复用insert与erase方法，在begin()位置进行插入或删除</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> value <span class=\"token operator\">=</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"insert_453\"></a>⭐insert</h3>\n<p>任意位置的插入：申请新节点，连接新节点与链表，断开旧的连接。<br/> 这里传入的参数是一个迭代器类对象，不能直接进行操作，要对对象中封装的_pNode指针进行操作。<br/> 返回值是新插入的节点的迭代器，所以要<u>用申请的新节点的指针newnode构造一个迭代器类对象返回</u>，不能直接返回newnode</p>\n<pre><code class=\"prism language-cpp\">iterator <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator Insertpos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tNode<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> Insertpos<span class=\"token punctuation\">.</span>_pNode<span class=\"token punctuation\">;</span><span class=\"token comment\">//_pNode是节点类型的指针</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>prev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\tpos<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//return newnode;</span>\n\t<span class=\"token comment\">//⭐迭代器是封装的Node*指针，此时不能再返回newnode</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>newnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//构造匿名对象返回</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"erase_471\"></a>⭐erase</h3>\n<p>任意位置的删除：分别改变前后两个节点的next和prev指针的指向即可</p>\n<pre><code class=\"prism language-cpp\">iterator <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iterator Erasepos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tNode<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> Erasepos<span class=\"token punctuation\">.</span>_pNode<span class=\"token punctuation\">;</span>\n\tNode<span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\tpos<span class=\"token operator\">-&gt;</span>prev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\tpos<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> pos<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>区间删除：复用单个节点删除的方法，遍历要删除的区间。<br/> 要用接收erase的返回值，防止迭代器失效</p>\n<pre><code class=\"prism language-cpp\">iterator <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iterator first<span class=\"token punctuation\">,</span> iterator last<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> last<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//it=erase(it);</span>\n\t\t<span class=\"token comment\">//后置++会构造临时对象返回，不会导致迭代器失效</span>\n\t\t<span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> it<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"clearswap_500\"></a>clear&amp;swap</h3>\n<p>clear复用erase区间删除的方法，从begin删除到end位置；<br/> swap方法调用标准库中的swap，交换两个链表的头节点。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"list_514\"></a>附：完整list类，含测试用例</h1>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> ZH\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">/</span>\n\t<span class=\"token comment\">//节点类模板, </span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tListNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> prev<span class=\"token punctuation\">;</span>\n\t\tListNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n\t\tT data<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> value <span class=\"token operator\">=</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">:</span><span class=\"token function\">prev</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">/</span>\n\t<span class=\"token comment\">//迭代器类模板</span>\n\t<span class=\"token comment\">//list的迭代器不能使用原生态的指针，要进行封装</span>\n\t<span class=\"token comment\">//T：迭代器指向的元素类型</span>\n\t<span class=\"token comment\">//Ref：给operator*使用，返回引用类型，不要写成T&amp;</span>\n\t<span class=\"token comment\">//Ptr：返回值使用，不要写成T*</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ref</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ptr</span><span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">ListIterator</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">typedef</span> ListNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span><span class=\"token comment\">//化简节点类的名字</span>\n\t\t<span class=\"token keyword\">typedef</span> Ref Reference<span class=\"token punctuation\">;</span><span class=\"token comment\">//在反向迭代器类中使用</span>\n\t\t<span class=\"token keyword\">typedef</span> Ptr Pointer<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">typedef</span> ListIterator<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> Ref<span class=\"token punctuation\">,</span> Ptr<span class=\"token operator\">&gt;</span> Self<span class=\"token punctuation\">;</span><span class=\"token comment\">//简化迭代器类的名字</span>\n\n\t\t<span class=\"token comment\">//构造函数</span>\n\t\t<span class=\"token function\">ListIterator</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> pNode<span class=\"token operator\">=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">:</span><span class=\"token function\">_pNode</span><span class=\"token punctuation\">(</span>pNode<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">//重载部分需要使用的运算符即可：*、-&gt;、++、--、==</span>\n\t\tRef <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _pNode<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//T为自定义类型时有意义,</span>\n\t\tPtr <span class=\"token keyword\">operator</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>_pNode<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//前置++，返回值是迭代器自身类型的引用</span>\n\t\tSelf<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_pNode <span class=\"token operator\">=</span> _pNode<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//后置</span>\n\t\tSelf <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tSelf <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_pNode <span class=\"token operator\">=</span> _pNode<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tSelf<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_pNode <span class=\"token operator\">=</span> _pNode<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tSelf <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tSelf <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_pNode <span class=\"token operator\">=</span> _pNode <span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//迭代器能进行比较</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Self<span class=\"token operator\">&amp;</span> it<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _pNode <span class=\"token operator\">!=</span> it<span class=\"token punctuation\">.</span>_pNode<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Self<span class=\"token operator\">&amp;</span> it<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _pNode <span class=\"token operator\">==</span> it<span class=\"token punctuation\">.</span>_pNode<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tNode<span class=\"token operator\">*</span> _pNode<span class=\"token punctuation\">;</span><span class=\"token comment\">//成员变量，节点类型指针</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\"></span>\n\t<span class=\"token comment\">//反向迭代器类模板，对迭代器进行复用</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Iterator</span><span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">ListReverseIterator</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token comment\">//typedef Iterator::Reference Reference;</span>\n\t\t<span class=\"token comment\">//typedef Iterator::Pointer Pointer;</span>\n\t\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">Iterator</span><span class=\"token double-colon punctuation\">::</span>Reference Reference<span class=\"token punctuation\">;</span><span class=\"token comment\">//typename指定Reference是Iterator中的数据类型</span>\n\t\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">Iterator</span><span class=\"token double-colon punctuation\">::</span>Pointer Pointer<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">typedef</span> ListReverseIterator<span class=\"token operator\">&lt;</span>Iterator<span class=\"token operator\">&gt;</span> Self<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">ListReverseIterator</span><span class=\"token punctuation\">(</span>Iterator it<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">:</span> <span class=\"token function\">_it</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n\n\t\tReference <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//*做特殊处理，先--,再解引用返回</span>\n\t\t\t<span class=\"token keyword\">auto</span> temp <span class=\"token operator\">=</span> _it<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">--</span>temp<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>temp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tPointer <span class=\"token keyword\">operator</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tSelf <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token operator\">--</span>_it<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tSelf <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tSelf <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">--</span>_it<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tSelf <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token operator\">++</span>_it<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tSelf <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tSelf <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">++</span>_it<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Self<span class=\"token operator\">&amp;</span> rit<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _it <span class=\"token operator\">==</span> rit<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Self<span class=\"token operator\">&amp;</span> rit<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _it <span class=\"token operator\">==</span> rit<span class=\"token punctuation\">.</span>_it<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tIterator _it<span class=\"token punctuation\">;</span><span class=\"token comment\">//正向迭代器</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">list</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">typedef</span> ListNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//typedef Node* iterator;//不能使用Node*作迭代器</span>\n\t\t<span class=\"token comment\">//迭代器</span>\n\t\t<span class=\"token keyword\">typedef</span> ListIterator<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> iterator<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">typedef</span> ListIterator<span class=\"token operator\">&lt;</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> const_iterator<span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">typedef</span> ListReverseIterator<span class=\"token operator\">&lt;</span>iterator<span class=\"token operator\">&gt;</span> reverse_iterator<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">typedef</span> ListReverseIterator<span class=\"token operator\">&lt;</span>const_iterator<span class=\"token operator\">&gt;</span> const_reverse_iteraotr<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token comment\">///</span>\n\t\t<span class=\"token comment\">//构造</span>\n\t\t<span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">CreatHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> value<span class=\"token operator\">=</span><span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">CreatHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">CreatHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//迭代器区间构造</span>\n\t\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputIterator</span><span class=\"token operator\">&gt;</span>\n\t\t<span class=\"token function\">list</span><span class=\"token punctuation\">(</span>InputIterator first<span class=\"token punctuation\">,</span> InputIterator last<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">CreatHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">!=</span> last<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tfirst<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//赋值运算符重载</span>\n\t\tlist<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//先清空当前对象中的节点</span>\n\t\t\t\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token operator\">~</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">delete</span> head<span class=\"token punctuation\">;</span>\n\t\t\thead <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token comment\">//迭代器</span>\n\t\titerator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//iterator it(head-&gt;next);</span>\n\t\t\t<span class=\"token comment\">//return it;</span>\n\t\t\t<span class=\"token comment\">//iterator是对ListIterator&lt;T, T&amp;, T*&gt;的重命名</span>\n\t\t\t<span class=\"token comment\">//这里会返回一个ListIterator&lt;T, T&amp;, T*&gt;类对象</span>\n\t\t\t<span class=\"token comment\">//head-&gt;next是传递给迭代器类对象构造函数的参数,调用iterator的构造函数</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//构造匿名对象返回</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\titerator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//const类型迭代器</span>\n\t\tconst_iterator <span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">const_iterator</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tconst_iterator <span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">const_iterator</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">//反向迭代器</span>\n\t\t<span class=\"token comment\">//反向迭代器的成员变量是一个迭代器类对象</span>\n\t\t<span class=\"token comment\">//end()即为传递给反向迭代器类构造函数的参数</span>\n\t\treverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\treverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//反向const类型迭代器</span>\n\t\tconst_reverse_iteraotr <span class=\"token function\">crbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">const_reverse_iteraotr</span><span class=\"token punctuation\">(</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tconst_reverse_iteraotr <span class=\"token function\">crend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">const_reverse_iteraotr</span><span class=\"token punctuation\">(</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">/</span>\n\t\t<span class=\"token comment\">//容量</span>\n\t\tsize_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> <span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tsize_t count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> <span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> head<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">==</span> head<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newsize<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> value<span class=\"token operator\">=</span><span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tsize_t oldsize <span class=\"token operator\">=</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newsize <span class=\"token operator\">&gt;</span> oldsize<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>oldsize<span class=\"token operator\">++</span><span class=\"token operator\">&lt;</span>newsize<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newsize <span class=\"token operator\">&lt;</span> oldsize<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>oldsize<span class=\"token operator\">--</span> <span class=\"token operator\">&lt;</span> newsize<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">///</span>\n\t\t<span class=\"token comment\">//元素访问</span>\n\t\tT<span class=\"token operator\">&amp;</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tT<span class=\"token operator\">&amp;</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tit<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tit<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\n\t\t<span class=\"token comment\">/</span>\n\t\t<span class=\"token comment\">//元素修改</span>\n\t\t<span class=\"token keyword\">void</span>  <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tit<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> value <span class=\"token operator\">=</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//Node* pos = head-&gt;next;</span>\n\t\t\t<span class=\"token comment\">/*Node* newnode = new Node(value);\n\t\t\tnewnode-&gt;next = head-&gt;next;\n\t\t\tnewnode-&gt;prev = head;\n\t\t\thead-&gt;next-&gt;prev = newnode;\n\t\t\thead-&gt;next = newnode;*/</span>\n\t\t    <span class=\"token comment\">//复用insert</span>\n\t\t\t<span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">//⭐insert</span>\n\t\t<span class=\"token comment\">// iterator是ListIterator&lt;T, T&amp;, T*&gt;</span>\n\t\titerator <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator Insertpos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tNode<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> Insertpos<span class=\"token punctuation\">.</span>_pNode<span class=\"token punctuation\">;</span><span class=\"token comment\">//_pNode是节点类型的指针</span>\n\t\t\tnewnode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n\t\t\tnewnode<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\t\t\tnewnode<span class=\"token operator\">-&gt;</span>prev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\t\t\tpos<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//return newnode;</span>\n\t\t\t<span class=\"token comment\">//⭐迭代器是封装的Node*指针，此时不能再返回newnode</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>newnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//构造匿名对象返回</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//⭐erase</span>\n\t\titerator <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iterator Erasepos<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tNode<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> Erasepos<span class=\"token punctuation\">.</span>_pNode<span class=\"token punctuation\">;</span>\n\t\t\tNode<span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t\tpos<span class=\"token operator\">-&gt;</span>prev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t\tpos<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">delete</span> pos<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\titerator <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iterator first<span class=\"token punctuation\">,</span> iterator last<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> last<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">//it=erase(it);</span>\n\t\t\t\t<span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> it<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token comment\">//提供一个创造头结点的方法</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">CreatHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//调用节点类的构造方法</span>\n\t\t\thead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\thead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\t\t\thead<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tZH<span class=\"token double-colon punctuation\">::</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> l1<span class=\"token punctuation\">;</span>\n\tZH<span class=\"token double-colon punctuation\">::</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">l2</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tZH<span class=\"token double-colon punctuation\">::</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">l3</span><span class=\"token punctuation\">(</span>l2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>l3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> v<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tZH<span class=\"token double-colon punctuation\">::</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">l4</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>l4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> v<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tZH<span class=\"token double-colon punctuation\">::</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">L1</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL1<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL1<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL1<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>L1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tZH<span class=\"token double-colon punctuation\">::</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> L1<span class=\"token punctuation\">;</span>\n\tL1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL1<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL1<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tA aa<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tA bb<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tA cc<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tZH<span class=\"token double-colon punctuation\">::</span>list<span class=\"token operator\">&lt;</span>A<span class=\"token operator\">&gt;</span> L<span class=\"token punctuation\">;</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>aa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>bb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>cc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//⭐it-&gt;得到的是节点的地址</span>\n\t\t<span class=\"token comment\">//本应是it-&gt;-&gt;a，编译器做了特殊处理</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tZH<span class=\"token double-colon punctuation\">::</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> L1<span class=\"token punctuation\">;</span>\n\tL1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> L1<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> L1<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> L1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tL1<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> L1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">void</span> <span class=\"token function\">Test6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n\t ZH<span class=\"token double-colon punctuation\">::</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> L1<span class=\"token punctuation\">;</span>\n\t L1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t L1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t L1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t L1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token comment\">//区间删除</span>\n\t <span class=\"token comment\">/*L1.erase(L1.begin(), L1.end());\n\t PrintList(L1);*/</span>\n\n\t ZH<span class=\"token double-colon punctuation\">::</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> L2<span class=\"token punctuation\">;</span>\n\t L2<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t L2<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t L2<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t L2<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t L2<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t L1<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>L2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">Test6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}