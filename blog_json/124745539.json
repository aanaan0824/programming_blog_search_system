{"blogid": "124745539", "writerAge": "码龄2年", "writerBlogNum": "5", "writerCollect": "44", "writerComment": "6", "writerFan": "0", "writerGrade": "1级", "writerIntegral": "66", "writerName": "fengzhilanyu", "writerProfileAdress": "writer_image\\profile_124745539.jpg", "writerRankTotal": "116365", "writerRankWeekly": "1051008", "writerThumb": "8", "writerVisitNum": "4036", "blog_read_count": "3728", "blog_time": "于 2022-05-13 11:29:48 发布", "blog_title": "selenium打开网页被检测，怎么屏蔽和绕过", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"Selenium__0\"></a>Selenium 操作被检测屏蔽</h2>\n<p>selenium打开浏览器模仿人工操作是诸多爬虫小白最万能的网页数据获取方式，但是在做自动化爬虫时，经常被检测到是selenium驱动。前段时间selenium打开维普高级搜索时得到的页面是空白页。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f21cc567b8124956a89b7d331c81f0e5.png\"/></p>\n<h2><a id=\"Selenium_4\"></a>Selenium为何会被检测</h2>\n<p>主要原因是selenium打开的浏览器指纹和人工操作打开的浏览器指纹是不同的，比如最熟知的<code>window.navigator.webdriver</code>关键字，在selenium打开的浏览器打印返回结果为true，而正常浏览器打印结果返回为<code>undefined</code>，我们可以在<a href=\"https://bot.sannysoft.com/\"><br/> </a>网站比较各关键字。</p>\n<h1><a id=\"Selenium_8\"></a>Selenium防检测方法</h1>\n<h4><a id=\"1_windownavigatorwebdriver_10\"></a>1. 修改<code>window.navigator.webdriver</code>关键字返回结果</h4>\n<pre><code>from selenium import webdriver\noptions = webdriver.ChromeOptions()\n# 此步骤很重要，设置为开发者模式，防止被各大网站识别出来使用了Selenium\ndriver = webdriver.Chrome(options=options)\ndriver.execute_cdp_cmd(\"Page.addScriptToEvaluateOnNewDocument\", {\n            \"source\": \"\"\"\n            Object.defineProperty(navigator, 'webdriver', {\n              get: () =&gt; undefined\n            })\n            \"\"\"\n        })\n</code></pre>\n<p>但是因为浏览器指纹很多，这种方法的局限性是显而易见的。</p>\n<h4><a id=\"2_stealthminjsselenium_26\"></a>2. 使用stealth.min.js文件防止selenium被检测</h4>\n<pre><code>import time\nfrom selenium.webdriver import Chrome\nfrom selenium.webdriver.chrome.options import Options\n\nchrome_options = Options()\nchrome_options.add_argument(\"--headless\")\nchrome_options.add_argument('user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36')\ndriver = Chrome('./chromedriver', options=chrome_options)\n\nwith open('/Users/kingname/test_pyppeteer/stealth.min.js') as f:\n    js = f.read()\n\ndriver.execute_cdp_cmd(\"Page.addScriptToEvaluateOnNewDocument\", {\n  \"source\": js\n})\n</code></pre>\n<p><code>stealth.min.js</code>文件来源于puppeteer，有开发者给 puppeteer 写了一套插件，叫做<code>puppeteer-extra</code>。其中，就有一个插件叫做<code>puppeteer-extra-plugin-stealth</code>专门用来让 puppeteer 隐藏模拟浏览器的指纹特征。</p>\n<p>python开发者就需要把其中的隐藏特征的脚本提取出来，做成一个 js 文件。然后让 Selenium 或者 Pyppeteer 在打开任意网页之前，先运行一下这个 js 文件里面的内容。</p>\n<p><code>puppeteer-extra-plugin-stealth</code>的作者还写了另外一个工具，叫做<code>extract-stealth-evasions</code>。这个东西就是用来生成stealth.min.js文件的。</p>\n<p><a href=\"https://github.com/requireCool/stealth.min.js\">stealth.min.js</a>资源:<br/> 链接：https://pan.baidu.com/s/1wiFnwOlHx3Wxe1UzW5gdrg<br/> 提取码：6hqf</p>\n<h4><a id=\"3_undetected_chromedriver_54\"></a>3. undetected_chromedriver</h4>\n<p><a href=\"https://github.com/ultrafunkamsterdam/undetected-chromedriver\">undetected_chromedriver</a><br/> 使用方法<br/> undetected_chromedriver 可以防止浏览器特征被识别，并且可以根据浏览器版本自动下载驱动。</p>\n<pre><code>import undetected_chromedriver as uc\ndriver = uc.Chrome()\ndriver.get('https://nowsecure.nl')\n</code></pre>\n<p>这是目前在用的一种方法，基本可以解决selenium被识别的问题<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9e7b36a57bd9469c944a927b1f16e884.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}