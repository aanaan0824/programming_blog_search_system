{"blogid": "122310752", "writerAge": "码龄5年", "writerBlogNum": "35", "writerCollect": "936", "writerComment": "267", "writerFan": "6054", "writerGrade": "4级", "writerIntegral": "1489", "writerName": "在下马农", "writerProfileAdress": "writer_image\\profile_122310752.jpg", "writerRankTotal": "91635", "writerRankWeekly": "8454", "writerThumb": "476", "writerVisitNum": "90984", "blog_read_count": "2414", "blog_time": "于 2022-01-11 08:44:54 发布", "blog_title": "deque用法深度解析，一篇文章弄懂deque容器各种操作", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<h2><a id=\"font_size__5_color__black_font_1\"></a><font color=\"black\" size=\"5\">📋 前言</font></h2>\n<ul><li><font color=\"black\" size=\"4\">🖱 博客主页：<a href=\"https://blog.csdn.net/mataojie\">在下马农的碎碎念</a></font></li><li><font color=\"black\" size=\"4\">✍ 本文由在下马农原创，首发于CSDN</font></li><li><font color=\"black\" size=\"4\">📆 首发时间：2022/01/11</font></li><li><font color=\"black\" size=\"4\">📅 最近更新时间：2022/01/11</font></li><li><font color=\"black\" size=\"4\">🤵 此马非凡马，房星本是星。向前敲瘦骨，犹自带铜声。</font></li><li><font color=\"black\" size=\"4\">📇 系列文章目录: 暂无</font></li><li><font color=\"black\" size=\"4\">🙏作者水平有限，如发现错误，请留言轰炸哦！万分感谢！</font></li><li><font color=\"black\" size=\"4\">🤗码字不易 欢迎关注🔎点赞👍收藏⭐️留言📝</font></li></ul>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9b2c84fe58c44200a09981c76d5b4b8c.png\"/></p>\n<blockquote>\n<p><font color=\"green\" size=\"4\">我欲与君相知，长命无绝衰。<br/> 山无陵，江水为竭，冬雷震震，夏雨雪，<br/> 天地合，乃敢与君绝！<br/> ——《上邪》</font></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\17949371c4c343a6aadc8c3f86c78df5.png\"/></p>\n<p><strong><font color=\"gray\" size=\"5\">以下是正文</font></strong><br/> </p>\n<div class=\"toc\">\n<h3>deque目录</h3>\n<ul><li><ul><li><a href=\"#font_size__5_color__black_font_1\"><font color=\"black\" size=\"5\">📋 前言</font></a></li><li><a href=\"#font_size__5_1deque_24\"><font size=\"5\"> 1、deque介绍</font></a></li><li><ul><li><a href=\"#font_size__4_color__RoyalBlue1_deque_28\"><font color=\"RoyalBlue\" size=\"4\">（1） deque容器的存储结构</font></a></li></ul>\n</li><li><a href=\"#font_size__5_2deque_43\"><font size=\"5\"> 2、deque定义和初始化</font></a></li><li><a href=\"#font_size__5_3deque_126\"><font size=\"5\"> 3、deque的迭代器</font></a></li><li><a href=\"#font_size__5_4deque_209\"><font size=\"5\"> 4、deque容器的成员方法</font></a></li><li><ul><li><a href=\"#font_size__4_color__RoyalBlue1_size_210\"><font color=\"RoyalBlue\" size=\"4\">（1） size()——元素个数</font></a></li><li><a href=\"#font_size__4_color__RoyalBlue2_max_size_239\"><font color=\"RoyalBlue\" size=\"4\">（2） max_size()——最多能容纳元素个数：</font></a></li><li><a href=\"#font_size__4_color__RoyalBlue_3__resizendequen_263\"><font color=\"RoyalBlue\" size=\"4\"> （3） resize(n)——改变deque大小为n</font></a></li><li><a href=\"#font_size__4_color__RoyalBlue_4_emptydeque_302\"><font color=\"RoyalBlue\" size=\"4\"> （4） empty()——判断deque是否为空</font></a></li><li><a href=\"#font_size__4_color__RoyalBlue_5_shrink_to_fitdequefont_color__red__C11_331\"><font color=\"RoyalBlue\" size=\"4\"> （5） shrink_to_fit()——要求deque减小容量已适应元素个数<font color=\"red\"> 【C++11】</font></font></a></li><li><a href=\"#font_size__4_color__RoyalBlue_6_atdeque_363\"><font color=\"RoyalBlue\" size=\"4\"> （6） at()——访问deque元素</font></a></li><li><a href=\"#font_size__4_color__RoyalBlue_7_frontbackdeque_397\"><font color=\"RoyalBlue\" size=\"4\"> （7） front()和back()——访问deque头尾元素</font></a></li><li><a href=\"#font_size__4_color__RoyalBlue_8_assigndeque_429\"><font color=\"RoyalBlue\" size=\"4\"> （8） assign()——指定deque元素</font></a></li><li><a href=\"#font_size__4_color__RoyalBlue_9_push_backdeque_538\"><font color=\"RoyalBlue\" size=\"4\"> （9） push_back()——添加元素（deque尾部)</font></a></li><li><a href=\"#font_size__4_color__RoyalBlue_10_push_frontdeque_570\"><font color=\"RoyalBlue\" size=\"4\"> （10） push_front()——添加元素（deque头部)</font></a></li><li><a href=\"#font_size__4_color__RoyalBlue_11_pop_backdeque_605\"><font color=\"RoyalBlue\" size=\"4\"> （11） pop_back()——移除deque元素(尾部)</font></a></li><li><a href=\"#font_size__4_color__RoyalBlue_12_pop_frontdeque_637\"><font color=\"RoyalBlue\" size=\"4\"> （12） pop_front()——删除deque元素(头部)</font></a></li><li><a href=\"#font_size__4_color__RoyalBlue_13__insert_668\"><font color=\"RoyalBlue\" size=\"4\"> （13） insert()——添加元素（任意位置）</font></a></li><li><a href=\"#font_size__4_color__RoyalBlue_14__erase_789\"><font color=\"RoyalBlue\" size=\"4\"> （14） erase()——删除元素（任意位置）</font></a></li><li><a href=\"#font_size__4_color__RoyalBlue_15_clear_865\"><font color=\"RoyalBlue\" size=\"4\"> （15） clear()——清空元素</font></a></li><li><a href=\"#font_size__4_color__RoyalBlue_16_swap_900\"><font color=\"RoyalBlue\" size=\"4\"> （16） swap()——交换元素</font></a></li><li><a href=\"#font_size__4_color__RoyalBlue_17_emplacefont_color__red_C11_943\"><font color=\"RoyalBlue\" size=\"4\"> （17） emplace()——插入元素<font color=\"red\"> 【C++11】</font></font></a></li><li><a href=\"#font_size__4_color__RoyalBlue_18_emplace_backdequefont_color__red__C11_987\"><font color=\"RoyalBlue\" size=\"4\"> （18） emplace_back()——在deque尾部插入元素<font color=\"red\"> 【C++11】</font></font></a></li><li><a href=\"#font_size__4_color__RoyalBlue_19_emplace_frontdequefont_color__red__C11_1021\"><font color=\"RoyalBlue\" size=\"4\"> （19） emplace_front()——在deque尾部插入元素<font color=\"red\"> 【C++11】</font></font></a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"font_size__5_1deque_24\"></a><font size=\"5\"> 1、deque介绍</font></h2>\n<blockquote>\n<p><font size=\"3\">deque，double ended queue即双端队列，是一种在两端均可以扩展或者收缩的序列化容器。<br/> deque可以在头部和尾部进行插入和删除操作。</font></p>\n</blockquote>\n<h3><a id=\"font_size__4_color__RoyalBlue1_deque_28\"></a><font color=\"RoyalBlue\" size=\"4\">（1） deque容器的存储结构</font></h3>\n<blockquote>\n<p><font size=\"4\">与vector 容器采用连续的线性空间不同，deque容器存储数据的空间是由一段一段等长的连续空间构成，各段空间之间并不一定是连续的，可以位于在内存的不同区域，使用一个中控器(指针数组)map来指向这些一段一段的空间，如果当前段空间用完了，就添加一个新的空间并将它链接在头部或尾部。deque存储结构如下图所示：</font></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1c41ae49cf2645119fe4dd05b2baef48.png\"/></p>\n<blockquote>\n<p><font size=\"4\">deque特殊的存储结构使得它在头部和尾部插入删除元素的效率非常高，deque可以在头部再加一段空间存储元素，而vector由于采取一段连续存储空间存储元素，所以它在头部插入一个元素需要所有元素向后移动，效率极低。但是也正式因为deque这种特殊的存储结构，使得它的迭代器较于一般的迭代器更为复杂，虽然deque容器的迭代器也支持随机访问，但是访问元素的速度要低于vector。</font></p>\n</blockquote>\n<p><strong>头文件：</strong><br/> deque是C++ 标准模板库的一部分，因此，想要使用deque，需要在程序中包含头文件<mark>deque</mark></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;deque&gt;</span></span>\n</code></pre>\n<h2><a id=\"font_size__5_2deque_43\"></a><font size=\"5\"> 2、deque定义和初始化</font></h2>\n<p><strong>格式：</strong><br/> 包含头文件deque之后，我们可以使用下边的格式定义deque：</p>\n<pre><code class=\"prism language-c\">std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>deque<span class=\"token operator\">&lt;</span>object_type<span class=\"token operator\">&gt;</span> variable_name<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>object_type</code>规定了deque中可以存放哪种类型的元素。<br/> <code>variable_name</code>为deque名。</p>\n<p><strong>方式：</strong> 定义deque的常用方式如下所示：</p>\n<pre><code class=\"prism language-c\">deque<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span> v1<span class=\"token punctuation\">;</span> \t\t\t\t<span class=\"token comment\">//v1是一个空deque,可存储元素类型为T，执行默认初始化</span>\ndeque<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span> <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//v2中包含v1中的所有元素</span>\ndeque<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span> v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//等价于v2(v1)</span>\ndeque<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span> <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//v3中有n个元素，并且值都为value</span>\ndeque<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span> <span class=\"token function\">v4</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//v4包含了n个重复执行了值初始化的对象</span>\ndeque<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span> v5<span class=\"token punctuation\">{<!-- --></span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//v5包含大括号中的所有元素</span>\ndeque<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">&gt;</span> v6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>；\t<span class=\"token comment\">//等价于v5{a,b,c....}</span>\n</code></pre>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>cout<span class=\"token punctuation\">;</span>\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>deque<span class=\"token punctuation\">;</span>\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test<span class=\"token punctuation\">;</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>test1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test3 <span class=\"token operator\">=</span> test1<span class=\"token punctuation\">;</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">test5</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test6<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test7 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test:\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> a <span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test1: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> b <span class=\"token punctuation\">:</span> test1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test2: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> b <span class=\"token punctuation\">:</span> test2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test3: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> b <span class=\"token punctuation\">:</span> test3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test4: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> b <span class=\"token punctuation\">:</span> test4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test5: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> b <span class=\"token punctuation\">:</span> test5<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test6: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> b <span class=\"token punctuation\">:</span> test6<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test7: \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> b <span class=\"token punctuation\">:</span> test7<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">test:<br/> test1: 1 2<br/> test2: 1 2<br/> test3: 1 2<br/> test4: 2 2 2<br/> test5: 0 0 0 0 0<br/> test6: 1 2 3 4 5<br/> test7: 1 2 3 4 5 6</font></p>\n</blockquote>\n<p>上边的例子中，使用各种方式初始化创建deque，可以根据需要选择使用。</p>\n<h2><a id=\"font_size__5_3deque_126\"></a><font size=\"5\"> 3、deque的迭代器</font></h2>\n<blockquote>\n<p><font color=\"black\" size=\"4\">deque中的迭代器包括以下几个，分别为：</font></p>\n<ul><li><font color=\"black\" size=\"4\"><code>deque.begin()</code>：指向deque首元素的迭代器</font></li><li><font color=\"black\" size=\"4\"><code>deque.end()</code>：指向deque尾元素下一个位置的迭代器</font></li><li><font color=\"black\" size=\"4\"><code>deque.rbegin()</code>：指向deque尾元素的反向迭代器，即rbegin()指向尾元素，rbegin-1指向倒数第二个元素</font></li><li><font color=\"black\" size=\"4\"><code>deque.rend()</code>：指向deque头元素前一个位置的反向迭代器，即rend()指向头元素前一个位置元素，rbegin-1指向第一个元素</font></li><li><font color=\"black\" size=\"4\"><code>deque.cbegin()</code>：指向deque首元素的迭代器，与begin()相同，只不过增加了const属性，不能用于修改元素。</font></li><li><font color=\"black\" size=\"4\"><code>deque.cend()</code>：指向deque尾元素下一个位置的迭代器，与end()相同，只不过增加了const属性，不能用于修改元素。</font></li><li><font color=\"black\" size=\"4\"><code>deque.crbegin()</code>：指向deque尾元素的反向迭代器，与rbegin()相同，只不过增加了const属性，不能用于修改元素。</font></li><li><font color=\"black\" size=\"4\"><code>deque.crend()</code>：指向deque头元素前一个位置的反向迭代器，与rend()相同，只不过增加了const属性，不能用于修改元素。</font></li></ul>\n</blockquote>\n<blockquote>\n<p><font color=\"black\" size=\"4\">deque迭代器示意图如下：</font></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e771c25f38df45e18744b112812b8ace.png\"/></p>\n<blockquote>\n<p><font color=\"black\" size=\"4\">代码示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后deque为： \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// deque.begin()为指向deque头元素的迭代器</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator begin_iterator <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"begin() 指向的元素：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>begin_iterator <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// deque.end()为指向deque尾元素后一个位置的迭代器，则test.end()-1指向尾元素</span>\n    <span class=\"token keyword\">auto</span> end_iterator <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"end()-1 指向的元素：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>end_iterator <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// deque.rbegin()为指向尾元素的迭代器，即反向(r)的头(begin)迭代器</span>\n    <span class=\"token keyword\">auto</span> rbegin_iterator <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"rbegin() 指向的元素：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>rbegin_iterator <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// deque.rend()为指向头元素的前一个位置的迭代器，即反向(r)尾(end)迭代器，则test.rend()-1指向头元素</span>\n    <span class=\"token keyword\">auto</span> rend_iterator <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"rend()-1 指向的元素：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>rend_iterator <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// deque.cbegin()为指向deque头元素的const迭代器</span>\n    <span class=\"token comment\">// 与begin()不同的是返回迭代器类型为deque&lt;int&gt;::const_iterator，不可修改元素</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>const_iterator cbegin_iterator <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"cbegin() 指向的元素：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>cbegin_iterator <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// deque.cend()为指向deque尾元素下一个位置的const迭代器</span>\n    <span class=\"token comment\">// 与end()不同的是返回迭代器类型为deque&lt;int&gt;::const_iterator，不可修改元素</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>const_iterator cend_iterator <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"cend()-1 指向的元素：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cend_iterator <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// deque.crbegin()为指向尾元素的const迭代器，即反向(r)的const(c)头(begin)迭代器</span>\n    <span class=\"token keyword\">auto</span> crbegin_iterator <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">crbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"crbegin() 指向的元素： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>crbegin_iterator <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// deque.crend()为指向头元素下一个位置的const迭代器，即反向(r)的const(c)尾(end)迭代器</span>\n    <span class=\"token keyword\">auto</span> crend_iterator <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">crend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"crend()-1 指向的元素： \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>crend_iterator <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后deque为： 1 2 3 4<br/> begin() 指向的元素：1<br/> end()-1 指向的元素：4<br/> rbegin() 指向的元素：4<br/> rend()-1 指向的元素：1<br/> cbegin() 指向的元素：1<br/> cend()-1 指向的元素：4<br/> crbegin() 指向的元素： 4<br/> crend()-1 指向的元素： 1</font></p>\n</blockquote>\n<h2><a id=\"font_size__5_4deque_209\"></a><font size=\"5\"> 4、deque容器的成员方法</font></h2>\n<h3><a id=\"font_size__4_color__RoyalBlue1_size_210\"></a><font color=\"RoyalBlue\" size=\"4\">（1） size()——元素个数</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">要想知道deque中有多少元素，使用deque.size()方法，作用是返回deque中元素的个数。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"添加元素前mydeque.size() = \"</span><span class=\"token operator\">&lt;&lt;</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 在deque头部插入一个元素5</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 在deque尾部插入一个元素5</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"添加元素后mydeque.size() = \"</span><span class=\"token operator\">&lt;&lt;</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">添加元素前mydeque.size() = 2<br/> 添加元素后mydeque.size() = 4</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue2_max_size_239\"></a><font color=\"RoyalBlue\" size=\"4\">（2） max_size()——最多能容纳元素个数：</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">要想知道deque最多可以有多少元素，使用deque.max_size()方法，作用是返回deque中最多能容纳元素个数（基本没用过）。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mydeque最多可容纳元素个数尾max_size() = \"</span><span class=\"token operator\">&lt;&lt;</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">mydeque最多可容纳元素个数尾max_size() = 2305843009213693951</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue_3__resizendequen_263\"></a><font color=\"RoyalBlue\" size=\"4\"> （3） resize(n)——改变deque大小为n</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">如果想要改变deque的size,使用deque.resize(n)方法，将deque的size改为n。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>cout<span class=\"token punctuation\">;</span>\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>deque<span class=\"token punctuation\">;</span>\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 把mydeque的大小设为5</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"第一次resize后deque中元素为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> a <span class=\"token punctuation\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 把mydeque的大小设为1</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"第二次resize后deque中元素为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> a <span class=\"token punctuation\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">第一次resize后deque中元素为：1 2 0 0 0<br/> 第二次resize后deque中元素为：1</font></p>\n</blockquote>\n<blockquote>\n<p><font size=\"4\">可以看到，执行resize(n)后，如果当前deque的size小于n，则会在deque的尾部新添加若干个值为初始值的元素使deque的size扩大到n。如果当前的size大于n，则会从deque尾部移除多余元素使deque的size缩小到n；</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue_4_emptydeque_302\"></a><font color=\"RoyalBlue\" size=\"4\"> （4） empty()——判断deque是否为空</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">empty()方法用来判断deque中是否有元素，如果有元素，返回true；如果没有元素，返回false。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;deque&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> main <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"mydeque是否为空？\"</span><span class=\"token operator\">&lt;&lt;</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 在deque尾部插入一个元素5</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\nmydeque是否为空？\"</span><span class=\"token operator\">&lt;&lt;</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">mydeque是否为空？1<br/> mydeque是否为空？0</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue_5_shrink_to_fitdequefont_color__red__C11_331\"></a><font color=\"RoyalBlue\" size=\"4\"> （5） shrink_to_fit()——要求deque减小容量已适应元素个数<font color=\"red\"> 【C++11】</font></font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">deque减小内存以适配size，即将分配给deque的内存减小到当前deque中元素实际使用的内存大小。由于deque的实现机制大多为一个动态数组，可以保留已被删除的元素的内存空间或者提前分配的额外内存空间以快速插入，因此一个deque分配的内存空间可能比deque保存当前元素所需的内存要多。使用shrink_to_fit()就会释放这些多余暂未被用到的内存。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 改变mydeque的大小为100，此时会分配给deque这100个元素所需要的内存</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mydeque.size() = \"</span> <span class=\"token operator\">&lt;&lt;</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 改变mydeque的大小为10，deque中后90个元素被删除</span>\n    <span class=\"token comment\">// 但是由于deque实现机制，这些元素被删除后，分配给他们的内存空间可以被保留</span>\n    <span class=\"token comment\">// 因此改变mydeque大小为10之后，可能会有额外的内存空间在mydeque中未被使用</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mydeque.size() = \"</span> <span class=\"token operator\">&lt;&lt;</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 减小mydeque的内存到实际mydeque使用的大小</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">shrink_to_fit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">mydeque.size() = 100<br/> mydeque.size() = 10</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue_6_atdeque_363\"></a><font color=\"RoyalBlue\" size=\"4\"> （6） at()——访问deque元素</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">使用元素的索引来访问deque，其中at(index)中index为索引，必须是合法的。</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 初始化mydeque为{1，2，3，4，5}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nmydeque中索引为2的元素为：\"</span> <span class=\"token operator\">&lt;&lt;</span> num2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的mydeque：1 2 3 4 5<br/> mydeque中索引为2的元素为：3</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue_7_frontbackdeque_397\"></a><font color=\"RoyalBlue\" size=\"4\"> （7） front()和back()——访问deque头尾元素</font></h3>\n<p><font color=\"red\" size=\"4\"> ❤<strong>front()返回deque第一个元素，back()返回deque最后一个元素</strong>❤</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\"> 示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;deque&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> main <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"初始化后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num<span class=\"token operator\">:</span>mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>num<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> front <span class=\"token operator\">=</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> back <span class=\"token operator\">=</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\nmydeque的头元素为：\"</span><span class=\"token operator\">&lt;&lt;</span> front<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\nmydeque的尾元素为：\"</span><span class=\"token operator\">&lt;&lt;</span> back<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的mydeque为：1 2 3 4 5 6 7 8<br/> mydeque的头元素为：1<br/> mydeque的尾元素为：8</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue_8_assigndeque_429\"></a><font color=\"RoyalBlue\" size=\"4\"> （8） assign()——指定deque元素</font></h3>\n<p><font color=\"red\" size=\"4\"> ❤<strong>assign的作用就是用新的元素替换deque中旧的元素</strong>❤</font></p>\n<p><font size=\"4\"> <strong>用法一：<code>deque.assign(num,value)</code></strong></font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">这种用法会用num个value填充deque，如果操作前deque中有其他元素，会被覆盖掉。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>cout<span class=\"token punctuation\">;</span>\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>deque<span class=\"token punctuation\">;</span>\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token punctuation\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nassign之后mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token punctuation\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的mydeque为：1 2 3 4<br/> assign之后mydeque为：2 2 2</font></p>\n</blockquote>\n<hr/>\n<p><font size=\"4\"> <strong>用法二：<code>deque.assign(iterator1,iterator2)</code></strong></font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">这种用法会用两个迭代器iterator1和iterator2之间的元素覆盖deque的元素，迭代器可以是原来deque的迭代器，也可以是其他deque的迭代器，注意区间是左闭右开[iterator1,iterator2)，即iterator1指向的元素在区间内，iterator2指向的元素不在区间内，iterator2可以是deque.end()。</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>cout<span class=\"token punctuation\">;</span>\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>deque<span class=\"token punctuation\">;</span>\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque1<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque2<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque1为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token punctuation\">:</span> mydeque1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n初始化后的mydeque2为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token punctuation\">:</span> mydeque2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// it1指向mydeque1头元素的下一个元素，即第二的元素</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>iterator it1 <span class=\"token operator\">=</span> mydeque1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// it2指向mydeque1尾元素</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>iterator it2 <span class=\"token operator\">=</span> mydeque1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 用[*it1,*it2)的元素替换mydeque2中的元素</span>\n    mydeque2<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>it1<span class=\"token punctuation\">,</span> it2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nassign后的mydeque2为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token punctuation\">:</span> mydeque2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\"> 初始化后的mydeque1为：1 2 3 4<br/> 初始化后的mydeque2为：5 6 7 8<br/> assign后的mydeque2为：2 3</font></p>\n</blockquote>\n<p><font size=\"4\"> <strong>用法三：<code>deque.assign(address1,address2)</code></strong></font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">这种用法会用两个数组元素地址address1和address2之间的元素覆盖deque的元素，注意区间仍是左闭右开[*address1,*address2)，即address1指向的元素在区间内，address2指向的元素不在区间内。用法2和用法3示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>cout<span class=\"token punctuation\">;</span>\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>deque<span class=\"token punctuation\">;</span>\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque1<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque1为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token punctuation\">:</span> mydeque1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// a[2]为30，a[4]为50，则用[a[2],a[4])的元素替换mydeque1中元素</span>\n    mydeque1<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nassign后的mydeque1为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token punctuation\">:</span> mydeque1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\"> 始化后的mydeque1为：1 2 3 4<br/> assign后的mydeque1为：30 40</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue_9_push_backdeque_538\"></a><font color=\"RoyalBlue\" size=\"4\"> （9） push_back()——添加元素（deque尾部)</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">向deque中添加元素，使用<code>push_back()</code>方法，作用是向deque尾部添加一个元素。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 在deque尾部插入一个元素8</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n尾部插入一个元素后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的mydeque为：1 2 3 4<br/> 尾部插入一个元素后的mydeque为：1 2 3 4 8</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue_10_push_frontdeque_570\"></a><font color=\"RoyalBlue\" size=\"4\"> （10） push_front()——添加元素（deque头部)</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">向deque中添加元素，使用<code>push_front()</code>方法，作用是向deque头部添加一个元素。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 在deque尾部插入一个元素8</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n头部插入一个元素后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的mydeque为：1 2 3 4<br/> 头部插入一个元素后的mydeque为：8 1 2 3 4</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue_11_pop_backdeque_605\"></a><font color=\"RoyalBlue\" size=\"4\"> （11） pop_back()——移除deque元素(尾部)</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">删除deque中的元素，使用<code>pop_back()</code>方法，作用是删除deque尾部的一个元素。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>cout<span class=\"token punctuation\">;</span>\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>deque<span class=\"token punctuation\">;</span>\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token punctuation\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 删除mydeue尾部一个元素</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n尾部删除一个元素后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token punctuation\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的mydeque为：1 2 3 4<br/> 尾部删除一个元素后的mydeque为：1 2 3</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue_12_pop_frontdeque_637\"></a><font color=\"RoyalBlue\" size=\"4\"> （12） pop_front()——删除deque元素(头部)</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">删除deque中的元素，使用<code>pop_front()</code>方法，作用是删除deque头部的一个元素。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>cout<span class=\"token punctuation\">;</span>\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>deque<span class=\"token punctuation\">;</span>\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token punctuation\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 删除mydeue头部一个元素</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n头部删除一个元素后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token punctuation\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的mydeque为：1 2 3 4<br/> 头部删除一个元素后的mydeque为：2 3 4</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue_13__insert_668\"></a><font color=\"RoyalBlue\" size=\"4\"> （13） insert()——添加元素（任意位置）</font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">向deque中添加元素。</font></p>\n</blockquote>\n<blockquote>\n<p><font color=\"black\" size=\"4\">insert共有三种形式：<br/> <font color=\"#6950a1\" size=\"3\">- insert(iterator,value);<br/> <font size=\"3\">- insert(iterator, num, value);<br/> <font size=\"3\">- insert(iterator, iterator1, iterator2);</font></font></font></font></p>\n</blockquote>\n<p><font size=\"4\"> <strong>用法一：<code>deque.insert(iterator,value)</code></strong></font></p>\n<blockquote>\n<p><font size=\"4\">使用<code>insert(iterator,value)</code>方法，作用是向iterator迭代器指向元素的前边添加一个元素value，并返回一个迭代器指向新插入的元素。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e1d2de9ab5cf4cdb8cb9ae8b3e7dde24.png\"/><br/> 示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// it指向mydeque的第二个元素</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 使用insert添加一个元素</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator itnew <span class=\"token operator\">=</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n返回的迭代器指向的元素为\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>itnew<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\ninsert添加一个元素后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\"> 初始化后的mydeque为：1 2 3 4<br/> 返回的迭代器指向的元素为10<br/> insert添加一个元素后的mydeque为：1 10 2 3 4</font></p>\n</blockquote>\n<hr/>\n<p><font size=\"4\"> <strong>用法二：<code>deque.insert(iterator,num,value)</code></strong></font></p>\n<blockquote>\n<p><font size=\"4\">使用<code>insert(iterator,num,value)</code>方法，作用是向iterator迭代器指向元素的前边添加num个元素value，并返回一个迭代器指向新插入的第一个元素.<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5b7509b59a8844339cf72f931e5db268.png\"/><br/> 示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// it指向mydeque的第二个元素</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 使用insert添加2个元素，value为20</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n使用insert插入元素后：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\"> 初始化后的mydeque为：1 2 3 4<br/> 使用insert插入元素后：1 20 20 2 3 4</font></p>\n</blockquote>\n<hr/>\n<p><font size=\"4\"> <strong>用法三：<code>deque.erase(iterator1,iterator2)</code></strong></font></p>\n<blockquote>\n<p><font size=\"4\">使用<code>insert(iterator, iterator1, iterator2);</code>方法，作用是向iterator迭代器指向元素的前边添加[iterator1,iterator2)之间的元素。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c3ec56d4a9684233be26bceea55ddb2d.png\"/><br/> 示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// it指向mydeque的第二个元素</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 定义一个辅助deque</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> deque2<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// it1指向deque2的第一个元素</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it1 <span class=\"token operator\">=</span> deque2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// it2指向deque2的最后一个元素后一个位置</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it2 <span class=\"token operator\">=</span> deque2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 使用insert在2之前添加[it1,it2)之间的元素</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> it1<span class=\"token punctuation\">,</span> it2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n使用insert插入元素后：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\"> 初始化后的mydeque为：1 2 3 4<br/> 使用insert插入元素后：1 10 20 30 2 3 4</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue_14__erase_789\"></a><font color=\"RoyalBlue\" size=\"4\"> （14） erase()——删除元素（任意位置）</font></h3>\n<p><font color=\"red\" size=\"4\"> ❤<strong>erase的作用就是根据传入的迭代器删除deque中的元素,参数为一个迭代器，只删除迭代器指向的元素；参数为两个迭代器，删除两个迭代器之间的元素</strong>❤</font></p>\n<p><font size=\"4\"> <strong>用法一：<code>deque.erase(iterator)</code></strong></font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">这种用法会删除迭代器iterator指向的元素。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6a16ea22abd446238fa18afb193fa735.png\"/><br/> 示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// it指向mydeque的第二个元素</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 删除it指向的元素，即2，并返回一个迭代器指向2之后的元素</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator itnew <span class=\"token operator\">=</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n删除元素后返回的迭代器itnew指向的元素为：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>itnew<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n使用erase删除元素后：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的mydeque为：1 2 3 4<br/> 删除元素后返回的迭代器itnew指向的元素为：3<br/> 使用erase删除元素后：1 3 4</font></p>\n</blockquote>\n<hr/>\n<p><font size=\"4\"> <strong>用法二：<code>deque.erase(iterator1,iterator2)</code></strong></font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">这种用法会删除迭代器iterator1指向的元素到iterator2指向元素之间的元素，包括iterator1指向的元素但不包括iterator2指向的元素，即擦除[iterator1,iterator2)。<img alt=\"在这里插入图片描述\" src=\"image\\8c51acc0eeed4ed9a850fd8f64b1e47f.png\"/><br/> 示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// it1指向mydeque的第二个元素</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it1 <span class=\"token operator\">=</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// it2指向mydeque的最后一个元素后一个位置</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it2 <span class=\"token operator\">=</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 删除[it1,it2)之间的元素,即删除2，3，4</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it1<span class=\"token punctuation\">,</span> it2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n使用erase删除元素后：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的mydeque为：1 2 3 4<br/> 使用erase删除元素后：1</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue_15_clear_865\"></a><font color=\"RoyalBlue\" size=\"4\"> （15） clear()——清空元素</font></h3>\n<blockquote>\n<p><font color=\"red\" size=\"4\"> <strong>clear的作用就是清空deque中的所有元素</strong></font></p>\n</blockquote>\n<blockquote>\n<p><font color=\"black\" size=\"4\">清空deque中所有元素，并且deque的大小变为0。使用<code>clear()</code>方法。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 清除mydeque中所有元素</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n使用erase清空元素后mydeque.size() =\"</span> <span class=\"token operator\">&lt;&lt;</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n使用erase清空元素后：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的mydeque为：1 2 3 4<br/> 使用erase清空元素后mydeque.size() =0<br/> 使用erase清空元素后：</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue_16_swap_900\"></a><font color=\"RoyalBlue\" size=\"4\"> （16） swap()——交换元素</font></h3>\n<p><font color=\"red\" size=\"4\"> ❤<strong>swap的作用就是交换两个deque的元素</strong>❤</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"4\">交换两个deque的元素，使用<code>swap()</code>方法，<code>deque1.swap(deque2)</code>,两个deque存储的元素类型必须相同，元素个数可以不同。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>cout<span class=\"token punctuation\">;</span>\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>deque<span class=\"token punctuation\">;</span>\nusing std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque1<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1111</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque2<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">222</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque1为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token punctuation\">:</span> mydeque1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n初始化后的mydeque1为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token punctuation\">:</span> mydeque2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 交换mydeque1和mydeque2的元素</span>\n    mydeque1<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>mydeque2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n使用swap交换元素后mydeque1：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token punctuation\">:</span> mydeque1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n使用swap交换元素后mydeque2：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token punctuation\">:</span> mydeque2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">始化后的mydeque1为：1 11 111 1111<br/> 初始化后的mydeque1为：2 22 222<br/> 使用swap交换元素后mydeque1：2 22 222<br/> 使用swap交换元素后mydeque2：1 11 111 1111</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue_17_emplacefont_color__red_C11_943\"></a><font color=\"RoyalBlue\" size=\"4\"> （17） emplace()——插入元素<font color=\"red\"> 【C++11】</font></font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">向deque中添加元素，使用<code>emplace(iterator,value)</code>方法，作用是向iterator迭代器指向元素的前边添加一个元素value。返回一个迭代器，指向新添加的元素。<img alt=\"在这里插入图片描述\" src=\"image\\ed37542102fa48aea7bd982ec4183b36.png\"/><br/> 示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque1为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// it指向mydeque第二个元素，即2</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 向it指向元素(2)前插入元素10，并返回指向10的迭代器</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it1 <span class=\"token operator\">=</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n第一次插入后返回的迭代器it1指向元素为：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it1<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 向it1指向元素(10)前插入元素20，并返回指向20的迭代器</span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it2 <span class=\"token operator\">=</span> mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>it1<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n第二次插入后返回的迭代器it2指向元素为：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it2<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 向mydeque尾部插入元素30</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n三次插入元素后，mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的mydeque1为：1 2 3 4<br/> 第一次插入后返回的迭代器it1指向元素为：10<br/> 第二次插入后返回的迭代器it2指向元素为：20<br/> 三次插入元素后，mydeque为：1 20 10 2 3 4 30</font></p>\n</blockquote>\n<blockquote>\n<p><font size=\"4\"><strong>emplace和insert的区别：</strong><br/> emplace和insert插入元素最大的区别就是emplace不会产生不必要的变量，使用insert插入元素时，需要申请内存空间创建临时对象，而申请内存空间就需要消耗一定时间；而使用emplace插入元素时，直接在原来容器的内存空间上 ，调用构造函数，不需要额外申请内存空间，就节省了很多时间，效率较高。</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue_18_emplace_backdequefont_color__red__C11_987\"></a><font color=\"RoyalBlue\" size=\"4\"> （18） emplace_back()——在deque尾部插入元素<font color=\"red\"> 【C++11】</font></font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">在容器尾部生成一个元素。和 push_back() 的区别是，该函数直接在容器尾部构造元素，省去了复制移动元素的过程。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 在deque尾部插入一个元素10</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n尾部插入一个元素后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的mydeque为：1 2 3 4<br/> 尾部插入一个元素后的mydeque为：1 2 3 4 10</font></p>\n</blockquote>\n<hr/>\n<h3><a id=\"font_size__4_color__RoyalBlue_19_emplace_frontdequefont_color__red__C11_1021\"></a><font color=\"RoyalBlue\" size=\"4\"> （19） emplace_front()——在deque尾部插入元素<font color=\"red\"> 【C++11】</font></font></h3>\n<blockquote>\n<p><font color=\"black\" size=\"4\">在容器头部生成一个元素。和 push_front() 的区别是，该函数直接在容器头部构造元素，省去了复制移动元素的过程。示例如下：</font></p>\n</blockquote>\n<p><font size=\"4\">💻<strong>示例代码</strong>💻</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>deque<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mydeque<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"初始化后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 在deque头部插入一个元素10</span>\n    mydeque<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n头部插入一个元素后的mydeque为：\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> mydeque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font size=\"4\">📄<strong>输出</strong>📄</font></p>\n<blockquote>\n<p><font color=\"black\" size=\"3\">初始化后的mydeque为：1 2 3 4<br/> 头部插入一个元素后的mydeque为：10 1 2 3 4</font></p>\n</blockquote>\n<hr/>\n<blockquote>\n<p><font size=\"4\">结语： 本文详细总结了deque容器的一些方法，包括deque使用，deque初始化，deque迭代器，deque所有操作。</font><br/> deque begin(); deque end(); deque rbegin(); deque rend(); deque cbegin(); deque cend(); deque crbegin(); deque crend(); deque size(); deque max_size(); deque resize(n); deque empty(); deque shrink_to_fit(); deque push_back(); deque push_front() ;deque pop_front() ;deque pop_back() ;deque at(i);deque front(); deque back(); deque assign(); deque insert(); deque erase(); deque clear(); deque swap(); deque emplace(); deque emplace_front();deque emplace_back();<br/> 希望大家看完后能对deque的掌握更加深刻。<br/> 欢迎关注🔎点赞👍收藏⭐️留言📝</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}