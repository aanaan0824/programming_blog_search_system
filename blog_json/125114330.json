{"blogid": "125114330", "writerAge": "码龄10年", "writerBlogNum": "60", "writerCollect": "46", "writerComment": "4", "writerFan": "20", "writerGrade": "2级", "writerIntegral": "264", "writerName": "詹姆士x", "writerProfileAdress": "writer_image\\profile_125114330.jpg", "writerRankTotal": "58310", "writerRankWeekly": "131045", "writerThumb": "15", "writerVisitNum": "39111", "blog_read_count": "976", "blog_time": "已于 2022-07-01 10:33:29 修改", "blog_title": "c#-获取控制台输入", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>输出指令</h1>\n<p>Console类是管理控制台的类。<br/> 只在控制台应用程序中有效。<br/> 在以后制作窗体应用程序，或者使用unity时，需要使用他们对应的输入方法。</p>\n<p>WriteLine方法可以将括号里的内容输出在控制台上。然后在末尾换行。<br/> 如果括号里不写东西，则只换行。</p>\n<p>Write方法在输出结束时不会换行。但是这个方法必须在括号里填东西。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c19cc65fc2cb49949579c4a7858d2c46.png\"/></p>\n<h1><a id=\"_10\"></a>输入指令</h1>\n<p>使用ReadLine方法可以卡住程序，等待用户输入，直到用户输入回车。<br/> 这个方法会产生返回值。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\94330c9beeeb4554915d89a7698814f0.png\"/><br/> 指令产生的值也可以不用变量储存，直接使用。</p>\n<p>或者也可以不获取他的值。指令会正常运行，但得到的值会被丢掉。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f44cbaaa971046a794ce283534ac06b9.png\"/></p>\n<p>Read方法也有不带Line的版本。他会等着你输入一整行字符按下回车。<br/> 但是它只会读取首个字符的字符编码。如果作为卡住程序的作用，那么他们的作用是一样的。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\751972fc4c974954bca06ba418923fea.png\"/></p>\n<blockquote>\n<p>早期的VS在程序运行结束后会自动关闭窗口。结果就是程序一闪而过什么都看不见。<br/> 所以你百度出来的控制台代码有很多会在末尾添加这条语句来卡住程序。当然仅限于控制台程序。<br/> 在其他的程序里整个Console都是没用的。</p>\n</blockquote>\n<h1><a id=\"_25\"></a>清除控制台</h1>\n<p>Clear方法可以清除控制台。</p>\n<pre><code class=\"prism language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">123456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"按下回车后清除控制台\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"清除完毕\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}