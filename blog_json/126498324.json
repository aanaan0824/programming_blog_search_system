{"blogid": "126498324", "writerAge": "码龄3年", "writerBlogNum": "85", "writerCollect": "2335", "writerComment": "2028", "writerFan": "4567", "writerGrade": "6级", "writerIntegral": "6214", "writerName": "赵四司机", "writerProfileAdress": "writer_image\\profile_126498324.jpg", "writerRankTotal": "2434", "writerRankWeekly": "19", "writerThumb": "2058", "writerVisitNum": "203609", "blog_read_count": "3472", "blog_time": "于 2022-09-01 10:36:26 发布", "blog_title": "【Spring Cloud】新闻头条微服务项目：引入ElasticSearch建立文章搜索索引", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><img alt=\"8420b26844034fab91b6df661ae68671.png\" src=\"image\\8420b26844034fab91b6df661ae68671.png\"/></p>\n<p><strong>个人简介： </strong></p>\n<blockquote>\n<p>&gt; 📦个人主页：<a href=\"https://blog.csdn.net/weixin_45750572?type=blog\" title=\"赵四司机\">赵四司机</a><br/> &gt; 🏆学习方向：JAVA后端开发 <br/> &gt; ⏰往期文章：<a href=\"https://blog.csdn.net/weixin_45750572/article/details/125534014\" title=\"SpringBoot项目整合微信支付\">SpringBoot项目整合微信支付</a><br/> &gt; 🔔博主推荐网站：<a href=\"https://www.nowcoder.com/link/pc_csdncpt_zssj_sf\" title=\"牛客网 刷题|面试|找工作神器\">牛客网 刷题|面试|找工作神器</a><br/> &gt; 📣种一棵树最好的时间是十年前，其次是现在！<br/> &gt; 💖喜欢的话麻烦点点关注喔，你们的支持是我的最大动力。</p>\n</blockquote>\n<p><strong>前言：</strong></p>\n<blockquote>\n<p>最近在做一个基于SpringCloud+Springboot+Docker的新闻头条微服务项目，用的是黑马的教程，现在项目开发进入了尾声，我打算通过写文章的形式进行梳理一遍，并且会将梳理过程中发现的Bug进行修复，有需要改进的地方我也会继续做出改进。这一系列的文章我将会放入微服务项目专栏中，这个项目适合刚接触微服务的人作为练手项目，假如你对这个项目感兴趣你可以订阅我的专栏进行查看，需要资料可以私信我，当然要是能给我点个小小的关注就更好了，你们的支持是我最大的动力。</p>\n<p> 如果你想要一个可以系统学习的网站，那么我推荐的是牛客网，个人感觉用着还是不错的，页面很整洁，而且内容也很全面，语法练习，算法题练习，面试知识汇总等等都有，论坛也很活跃，传送门链接：<a href=\"https://www.nowcoder.com/link/pc_csdncpt_zssj_sf\" title=\"牛客刷题神器\">牛客刷题神器</a></p>\n</blockquote>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%EF%BC%9A%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%EF%BC%9A%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90\">一：需求分析</a></p>\n<p id=\"%E4%BA%8C%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B\">二：技术选型</a></p>\n<p id=\"1.%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94\">1.方案对比</a></p>\n<p id=\"2.ES%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:40px;\"><a href=\"#2.ES%E7%AE%80%E4%BB%8B\">2.ES简介</a></p>\n<p id=\"%E4%B8%89%EF%BC%9AES%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%EF%BC%9AES%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\">三：ES环境搭建</a></p>\n<p id=\"1.%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F\">1.拉取镜像</a></p>\n<p id=\"2.%20%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8-toc\" style=\"margin-left:40px;\"><a href=\"#2.%20%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8\">2. 创建容器</a></p>\n<p id=\"3.%E9%85%8D%E7%BD%AE%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8%20ik-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E9%85%8D%E7%BD%AE%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8%20ik\">3.配置中文分词器 ik</a></p>\n<p id=\"%E5%9B%9B%EF%BC%9A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%EF%BC%9A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\">四：代码实现</a></p>\n<p id=\"1.%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF\">1.实现思路</a></p>\n<p id=\"2.%E5%88%9B%E5%BB%BA%E6%98%A0%E5%B0%84-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E5%88%9B%E5%BB%BA%E6%98%A0%E5%B0%84\">2.创建映射</a></p>\n<p id=\"3.%E6%95%B0%E6%8D%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%B0%E7%B4%A2%E5%BC%95%E5%BA%93-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E6%95%B0%E6%8D%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%B0%E7%B4%A2%E5%BC%95%E5%BA%93\">3.数据初始化到索引库</a></p>\n<p id=\"4.%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0-toc\" style=\"margin-left:40px;\"><a href=\"#4.%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0\">4.搜索功能实现</a></p>\n<p id=\"5.%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:40px;\"><a href=\"#5.%E6%B5%8B%E8%AF%95\">5.测试</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%E4%B8%80%EF%BC%9A%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90\">一：需求分析</h1>\n<p><img alt=\"\" src=\"image\\8788dd13337743dea80433d79d477bc5.png\"/></p>\n<p>        在App端，我们可以在首页的顶部搜索栏里输入关键字进行文章的搜索，而且对于搜索结果我们会对命中的标题进行高亮展示，对于标题没命中但是文章内容命中的文章我们也要将其展示出来，并且当用户点击搜索结果中某一条文章的时候能够实现页面跳转查看文章详情的功能。</p>\n<h1 id=\"%E4%BA%8C%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B\">二：技术选型</h1>\n<h2 id=\"1.%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94\">1.方案对比</h2>\n<p>        跟以往不一样的是，以前我用的比较多的是用SQL语句进行模糊查询，往往也能达到不错的效果。但是这只适用于数据量比较少的情况下，而且数据库模糊查询还有一个问题，举个例子，假如我要搜索“什么是消息中间件”，这时候正好有一篇文章中包含有“消息中间件的介绍”的文字内容，但是这时候使用SQL的模糊查询是查询不到这个结果的，这显然是一个很大的弊端。</p>\n<p>        除此之外，当数据库中的文档数达到上万条时候，采用模糊查询就已经很慢了，要是数据达到企业级的话，这样的检索速度肯定是让人受不了的。因为采用模糊查询这时候数据库并不知道那些数据包含了这个关键词，只能一条数据一条数据进行查询，而且还需要进行字符串匹配，假如我搜索“Kafka”这一关键词，就算数据库中一万条数据只有一条是包含有这个词的采用模糊查询还是会检索数据库中的所有数据，这样做显然是很费时费力的。</p>\n<p>        而采用ES（ElasticSearch）之后能很好解决这个问题，即使是TB级的数据也能在毫秒内返回结果。那么为什么ES能具有如此高的效率呢？</p>\n<h2 id=\"2.ES%E7%AE%80%E4%BB%8B\">2.ES简介</h2>\n<p>        Elasticsearch是一个开源的高扩展的分布式全文检索引擎，它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。 我们知道Java是面向对象的，而Elasticsearch是面向文档的，也就是说文档是所有可搜索数据的最小单元。ES的文档就像MySql中的一条记录，只是ES的文档会被序列化成json格式，保存在Elasticsearch中。</p>\n<p>         ES是基于倒排索引的，什么意思呢，举个例子，假如海量的文档中只有文档A、B、C、D包含有“Kafka”这个关键词，假如用户搜索“Kafka”，这时候ES就会立即返回A、B、C、D这四个文档，从而避免把时间浪费在检索其他文档上面。</p>\n<p>        由于ES对中文的分词不太友好，因此需要自己配置一个中文分词器ik。</p>\n<h1 id=\"%E4%B8%89%EF%BC%9AES%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\">三：ES环境搭建</h1>\n<h2 id=\"1.%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F\">1.拉取镜像</h2>\n<pre><code>docker pull elasticsearch:7.4.0</code></pre>\n<h2 id=\"2.%20%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8\">2. 创建容器</h2>\n<pre><code>docker run -id --name elasticsearch -d --restart=always -p 9200:9200 -p 9300:9300 -v /usr/share/elasticsearch/plugins:/usr/share/elasticsearch/plugins -e \"discovery.type=single-node\" elasticsearch:7.4.0</code></pre>\n<h2 id=\"3.%E9%85%8D%E7%BD%AE%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8%20ik\">3.配置中文分词器 ik</h2>\n<p>因为在创建elasticsearch容器的时候，映射了目录，所以可以在宿主机上进行配置ik中文分词器</p>\n<p>在去选择ik分词器的时候，需要与elasticsearch的版本好对应上。</p>\n<p>把资料中的<code>elasticsearch-analysis-ik-7.4.0.zip</code>上传到服务器上,放到对应目录（plugins）解压</p>\n<pre><code>#切换目录\ncd /usr/share/elasticsearch/plugins\n#新建目录\nmkdir analysis-ik\ncd analysis-ik\n#root根目录中拷贝文件\nmv elasticsearch-analysis-ik-7.4.0.zip /usr/share/elasticsearch/plugins/analysis-ik\n#解压文件\ncd /usr/share/elasticsearch/plugins/analysis-ik\nunzip elasticsearch-analysis-ik-7.4.0.zip</code></pre>\n<h1 id=\"%E5%9B%9B%EF%BC%9A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\">四：代码实现</h1>\n<h2 id=\"1.%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF\">1.实现思路</h2>\n<p>        为了加快检索速度，搜索关键词时候不会到数据库中直接搜索，而是到ES索引库中进行检索，因此我们首先需要创建好 索引库，然后需要对以前上传的文章创建索引，当后续有新文章要上传时候，我们就采取实时创建索引的策略。当用户输入关键词进行搜索时候，服务器就会到ES中进行检索，假如检索结果中标题含有该关键词，则将该标题中该关键词高亮进行返回，若标题不包含关键词但是内容包含关键词也将结果返回，如若不然则说明没有检索结果，流程图见下图：</p>\n<p><img alt=\"\" height=\"278\" src=\"image\\1aefeb0a53f340de87b528ce9474e056.png\" width=\"692\"/></p>\n<h2 id=\"2.%E5%88%9B%E5%BB%BA%E6%98%A0%E5%B0%84\">2.创建映射</h2>\n<p>使用apifox添加映射</p>\n<p> <img alt=\"\" height=\"381\" src=\"image\\c762566614534ca4a914e03f634420bb.png\" width=\"1158\"/>  </p>\n<p>映射内容：</p>\n<pre><code>{\n    \"mappings\":{\n        \"properties\":{\n            \"id\":{\n                \"type\":\"long\"\n            },\n            \"publishTime\":{\n                \"type\":\"date\"\n            },\n            \"layout\":{\n                \"type\":\"integer\"\n            },\n            \"images\":{\n                \"type\":\"keyword\",\n                \"index\": false\n            },\n            \"staticUrl\":{\n                \"type\":\"keyword\",\n                \"index\": false\n            },\n            \"authorId\": {\n                \"type\": \"long\"\n            },\n            \"authorName\": {\n                \"type\": \"text\"\n            },\n            \"title\":{\n                \"type\":\"text\",\n                \"analyzer\":\"ik_smart\"\n            },\n            \"content\":{\n                \"type\":\"text\",\n                \"analyzer\":\"ik_smart\"\n            }\n        }\n    }\n}</code></pre>\n<p> 最后两项表示对文章标题和内容创建索引，其他字段均用于展示使用。</p>\n<h2 id=\"3.%E6%95%B0%E6%8D%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%B0%E7%B4%A2%E5%BC%95%E5%BA%93\">3.数据初始化到索引库</h2>\n<p>①在tbug-headlines-test中创建新模块es-init</p>\n<p> <img alt=\"\" height=\"560\" src=\"image\\cd5daec9f5964f82a9bc998f338dee59.png\" width=\"451\"/> </p>\n<p>②相关配置</p>\n<pre><code>server:\n  port: 9999\nspring:\n  application:\n    name: es-article\n\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/headlines_article?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC\n    username: root\n    password: 43\n# 设置Mapper接口所对应的XML文件位置，如果你在Mapper接口中有自定义方法，需要进行该配置\nmybatis-plus:\n  mapper-locations: classpath*:mapper/*.xml\n  # 设置别名包扫描路径，通过该属性可以给包中的类注册别名\n  type-aliases-package: com.my.model.article.pojos\n\n\n#自定义elasticsearch连接配置\nelasticsearch:\n  host: 49.23.192\n  port: 9200\n</code></pre>\n<p>③pojo及mapper类</p>\n<p>pojo</p>\n<pre><code class=\"language-java\">package com.my.es.pojo;\n\nimport lombok.Data;\nimport java.util.Date;\n\n@Data\npublic class SearchArticleVo {\n\n    // 文章id\n    private Long id;\n    // 文章标题\n    private String title;\n    // 文章发布时间\n    private Date publishTime;\n    // 文章布局\n    private Integer layout;\n    // 封面\n    private String images;\n    // 作者id\n    private Long authorId;\n    // 作者名词\n    private String authorName;\n    //静态url\n    private String staticUrl;\n    //文章内容\n    private String content;\n\n}</code></pre>\n<p>mapper </p>\n<pre><code class=\"language-java\">package com.my.es.mapper;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.my.es.pojo.SearchArticleVo;\nimport com.my.model.article.pojos.ApArticle;\nimport org.apache.ibatis.annotations.Mapper;\n\nimport java.util.List;\n\n@Mapper\npublic interface ApArticleMapper extends BaseMapper&lt;ApArticle&gt; {\n\n    List&lt;SearchArticleVo&gt; loadArticleList();\n\n}\n</code></pre>\n<p>XML </p>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"com.my.es.mapper.ApArticleMapper\"&gt;\n\n    &lt;resultMap id=\"resultMap\" type=\"com.my.es.pojo.SearchArticleVo\"&gt;\n        &lt;id column=\"id\" property=\"id\"/&gt;\n        &lt;result column=\"title\" property=\"title\"/&gt;\n        &lt;result column=\"author_id\" property=\"authorId\"/&gt;\n        &lt;result column=\"author_name\" property=\"authorName\"/&gt;\n        &lt;result column=\"layout\" property=\"layout\"/&gt;\n        &lt;result column=\"images\" property=\"images\"/&gt;\n        &lt;result column=\"publish_time\" property=\"publishTime\"/&gt;\n        &lt;result column=\"static_url\" property=\"staticUrl\"/&gt;\n        &lt;result column=\"content\" property=\"content\"/&gt;\n    &lt;/resultMap&gt;\n    &lt;select id=\"loadArticleList\" resultMap=\"resultMap\"&gt;\n        SELECT\n            aa.*, aacon.content\n        FROM\n            `ap_article` aa,\n            ap_article_config aac,\n            ap_article_content aacon\n        WHERE\n            aa.id = aac.article_id\n          AND aa.id = aacon.article_id\n          AND aac.is_delete != 1\n          AND aac.is_down != 1\n\n    &lt;/select&gt;\n\n&lt;/mapper&gt;</code></pre>\n<p>④批量导入</p>\n<pre><code class=\"language-java\">package com.my.es;\n\nimport com.alibaba.fastjson.JSON;\nimport com.my.es.mapper.ApArticleMapper;\nimport com.my.es.pojo.SearchArticleVo;\nimport org.elasticsearch.action.bulk.BulkRequest;\nimport org.elasticsearch.action.index.IndexRequest;\nimport org.elasticsearch.client.RequestOptions;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.elasticsearch.common.xcontent.XContentType;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport java.util.List;\n\n@SpringBootTest\n@RunWith(SpringRunner.class)\npublic class ApArticleTest {\n    @Autowired\n    private ApArticleMapper apArticleMapper;\n\n    @Autowired\n    private RestHighLevelClient restHighLevelClient;\n    /**\n     * 注意：数据量的导入，如果数据量过大，需要分页导入\n     * @throws Exception\n     */\n    @Test\n    public void init() throws Exception {\n        //1.查询所有符合条件的文章数据\n        List&lt;SearchArticleVo&gt; searchArticleVos = apArticleMapper.loadArticleList();\n\n        //2.批量导入到es索引库\n\n        BulkRequest bulkRequest = new BulkRequest(\"app_info_article\");\n\n        for (SearchArticleVo searchArticleVo : searchArticleVos) {\n\n            IndexRequest indexRequest = new IndexRequest().id(searchArticleVo.getId().toString())\n                    .source(JSON.toJSONString(searchArticleVo), XContentType.JSON);\n\n            //批量添加数据\n            bulkRequest.add(indexRequest);\n\n        }\n        restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);\n\n    }\n\n}</code></pre>\n<p>注意这里创建了一个全局索引名称app_info_article</p>\n<h2 id=\"4.%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0\">4.搜索功能实现</h2>\n<p>①导入tbug-headlines-search模块</p>\n<p> <img alt=\"\" height=\"736\" src=\"image\\2abaef67d34e45bdadce2e241916903b.png\" width=\"465\"/> </p>\n<p>②在tbug-headlines-service中添加依赖</p>\n<pre><code class=\"language-XML\">&lt;!--elasticsearch--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;\n    &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;\n    &lt;version&gt;7.4.0&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;\n    &lt;artifactId&gt;elasticsearch-rest-client&lt;/artifactId&gt;\n    &lt;version&gt;7.4.0&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;\n    &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;\n    &lt;version&gt;7.4.0&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n<p>③nacos配置</p>\n<pre><code class=\"language-XML\">spring:\n  autoconfigure:\n    exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration\nelasticsearch:\n  host: 49.234.52.192\n  port: 9200</code></pre>\n<p>④搜索接口定义</p>\n<pre><code class=\"language-java\">package com.my.search.controller.v1;\n\nimport com.my.model.common.dtos.ResponseResult;\nimport com.my.model.search.dtos.UserSearchDto;\nimport com.my.search.service.ArticleSearchService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.IOException;\n\n@RestController\n@RequestMapping(\"/api/v1/article/search\")\npublic class ArticleSearchController {\n    @Autowired\n    private ArticleSearchService articleSearchService;\n\n    @PostMapping(\"/search\")\n    public ResponseResult search(@RequestBody UserSearchDto dto) throws IOException {\n        return articleSearchService.search(dto);\n    }\n}</code></pre>\n<p>⑤dto</p>\n<pre><code class=\"language-java\">package com.my.model.search.dtos;\n\nimport lombok.Data;\n\nimport java.util.Date;\n\n\n@Data\npublic class UserSearchDto {\n\n    /**\n    * 搜索关键字\n    */\n    String searchWords;\n    /**\n    * 当前页\n    */\n    int pageNum;\n    /**\n    * 分页条数\n    */\n    int pageSize;\n    /**\n    * 最小时间\n    */\n    Date minBehotTime;\n\n    public int getFromIndex(){\n        if(this.pageNum&lt;1)return 0;\n        if(this.pageSize&lt;1) this.pageSize = 10;\n        return this.pageSize * (pageNum-1);\n    }\n}</code></pre>\n<p>⑥业务层实现</p>\n<pre><code class=\"language-java\">package com.my.search.service;\n\n\nimport com.my.model.common.dtos.ResponseResult;\nimport com.my.model.search.dtos.UserSearchDto;\n\nimport java.io.IOException;\n\npublic interface ArticleSearchService {\n\n    /**\n     ES文章分页搜索\n     @return\n     */\n    ResponseResult search(UserSearchDto userSearchDto) throws IOException;\n}</code></pre>\n<pre><code class=\"language-java\">package com.my.search.service.serviceImpl;\n\nimport com.alibaba.fastjson.JSON;\nimport com.my.model.common.dtos.ResponseResult;\nimport com.my.model.common.enums.AppHttpCodeEnum;\nimport com.my.model.search.dtos.UserSearchDto;\nimport com.my.model.user.pojos.ApUser;\nimport com.my.search.service.ApUserSearchService;\nimport com.my.search.service.ArticleSearchService;\nimport com.my.utils.thread.AppThreadLocalUtils;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.elasticsearch.action.search.SearchRequest;\nimport org.elasticsearch.action.search.SearchResponse;\nimport org.elasticsearch.client.RequestOptions;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.elasticsearch.common.text.Text;\nimport org.elasticsearch.index.query.*;\nimport org.elasticsearch.search.SearchHit;\nimport org.elasticsearch.search.builder.SearchSourceBuilder;\nimport org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;\nimport org.elasticsearch.search.sort.SortOrder;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n@Slf4j\n@Service\npublic class ArticleSearchServiceImpl implements ArticleSearchService {\n    @Autowired\n    private RestHighLevelClient restHighLevelClient;\n    @Autowired\n    private ApUserSearchService apUserSearchService;\n\n    /**\n     * es文章分页检索\n     *\n     * @param dto\n     * @return\n     */\n    @Override\n    public ResponseResult search(UserSearchDto dto) throws IOException {\n\n        // 1.检查参数\n        if (dto == null || StringUtils.isBlank(dto.getSearchWords())) {\n            return ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);\n        }\n        log.info(\"文章查询...\");\n\n        //异步调用保存历史记录\n        ApUser user = AppThreadLocalUtils.getUser();\n        //用户信息不为空并且为首页搜索才进行保存\n        if(user != null &amp;&amp; dto.getFromIndex() == 0) {\n            apUserSearchService.insert(dto.getSearchWords(),user.getId());\n        }\n\n        // 2.设置查询条件\n        SearchRequest searchRequest = new SearchRequest(\"app_info_article\");\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n\n        // 布尔查询\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n\n        // 关键字的分词之后查询\n        QueryStringQueryBuilder queryStringQueryBuilder = QueryBuilders.queryStringQuery\n                (dto.getSearchWords()).field(\"title\").field(\"content\").defaultOperator(Operator.OR);\n        boolQueryBuilder.must(queryStringQueryBuilder);\n\n        // 查询小于mindate的数据\n        RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(\"publishTime\")\n                .lt(dto.getMinBehotTime().getTime());\n        boolQueryBuilder.filter(rangeQueryBuilder);\n\n        // 分页查询\n        searchSourceBuilder.from(0);\n        searchSourceBuilder.size(dto.getPageSize());\n\n        // 按照发布时间倒序查询\n        searchSourceBuilder.sort(\"publishTime\", SortOrder.DESC);\n\n        // 设置高亮  title\n        HighlightBuilder highlightBuilder = new HighlightBuilder();\n        highlightBuilder.field(\"title\");\n        highlightBuilder.preTags(\"&lt;font style='color: red; font-size: inherit;'&gt;\");\n        highlightBuilder.postTags(\"&lt;/font&gt;\");\n        searchSourceBuilder.highlighter(highlightBuilder);\n\n\n        searchSourceBuilder.query(boolQueryBuilder);\n        searchRequest.source(searchSourceBuilder);\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n\n\n        // 3.结果封装返回\n\n        List&lt;Map&gt; list = new ArrayList&lt;&gt;();\n\n        SearchHit[] hits = searchResponse.getHits().getHits();\n        for (SearchHit hit : hits) {\n            String json = hit.getSourceAsString();\n            Map map = JSON.parseObject(json, Map.class);\n            // 处理高亮\n            if (hit.getHighlightFields() != null &amp;&amp; hit.getHighlightFields().size() &gt; 0) {\n                Text[] titles = hit.getHighlightFields().get(\"title\").getFragments();\n                String title = StringUtils.join(titles);\n                // 高亮标题\n                map.put(\"h_title\", title);\n            } else {\n                // 原始标题\n                map.put(\"h_title\", map.get(\"title\"));\n            }\n            list.add(map);\n        }\n\n        return ResponseResult.okResult(list);\n    }\n}\n</code></pre>\n<p>⑦在app网关添加如下配置</p>\n<pre><code class=\"language-java\">        #搜索微服务\n        - id: headlines-search\n          uri: lb://headlines-search\n          predicates:\n            - Path=/search/**\n          filters:\n            - StripPrefix= 1</code></pre>\n<h2 id=\"5.%E6%B5%8B%E8%AF%95\">5.测试</h2>\n<p>        启动项目进行测试，至少要启动文章微服务，用户微服务，搜索微服务，app网关微服务，app前端工程，由于我的云服务器已经过期了，所以我就不进行展示了，代码是没问题的，有问题的可以随时私信我。</p>\n<p></p>\n<p>下篇预告：文章自动构建索引&amp;搜索记录&amp;关键词联想</p>\n<p> 友情链接： <a class=\"link-info\" href=\"https://www.nowcoder.com/link/pc_csdncpt_zssj_sf\" title=\"牛客网  刷题|面试|找工作神器\">牛客网  刷题|面试|找工作神器</a></p>\n</div>\n</div>"}