{"blogid": "122896166", "writerAge": "码龄3年", "writerBlogNum": "13", "writerCollect": "147", "writerComment": "6", "writerFan": "10", "writerGrade": "2级", "writerIntegral": "157", "writerName": "鱼 丸", "writerProfileAdress": "writer_image\\profile_122896166.jpg", "writerRankTotal": "69916", "writerRankWeekly": "48985", "writerThumb": "20", "writerVisitNum": "19885", "blog_read_count": "2153", "blog_time": "于 2022-02-12 14:24:42 发布", "blog_title": "计算机二级C++模拟题一（附参考答案&解析）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>模拟题一</h2>\n<p><br/></p>\n<h3><a id=\"_4\"></a><strong>一、选择题</strong></h3>\n<p>1.已知Value是一个类，value是Value的一个对象。下列以非成员函数形式重载的运算符函数原形中，正确的是______</p>\n<ul><li>A.Value operator+(Value v，int i)；</li><li>B.Value operator+(Value v=value，int i)；</li><li>C.Value operator+(Value V，int i=0)；</li><li>D.Value operator+(Value v=value，int i=0)；</li></ul>\n<p>2.有如下类定义：<br/> class Date{<!-- --><br/> public:<br/> Date(int y=2014, int m=9, int d=9):year(y), month(m), day(d){}<br/> ______(ostream&amp;stream, Date&amp;ddd); //运算符＜＜的声明<br/> private:<br/> int year, month, day;<br/> };</p>\n<p>若要使语句序列<br/> Date GoodDay;<br/> cout＜＜GoodDay＜＜endl;<br/> 能够正常运行，横线处的内容应为______。</p>\n<ul><li>A.istream&amp; operator ＜＜</li><li>B.ostream&amp; operator ＜＜</li><li>C.friend istream&amp; operator ＜＜</li><li>D.friend ostream&amp; operator ＜＜</li></ul>\n<p>3.有如下程序：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Power</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Power</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\t________\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Power</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Square</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Power</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> cout <span class=\"token operator\">&lt;&lt;</span> val <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"的平方是\"</span> <span class=\"token operator\">&lt;&lt;</span> val <span class=\"token operator\">*</span> val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tPower<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Square</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-&gt;</span><span class=\"token function\">Display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>若运行时的输出结果为“3的平方是9”，则划线处缺失的语句可能是______。</p>\n<ul><li>A.void Display(){};</li><li>B.virtual void Display()=0;</li><li>C.void virtual Display()=0;</li><li>D.void Display()virtual {};</li></ul>\n<p>4.语句cout &lt;&lt; ((a = 2) &amp;&amp; (b = -2)); 的输出结果是______</p>\n<ul><li>A.无输出</li><li>B.编译错误</li><li>C.-1</li><li>D.1</li></ul>\n<p>5.数据库管理系统是______。</p>\n<ul><li>A.操作系统的一部分</li><li>B.系统软件</li><li>C.一种编译系统</li><li>D.一种通信软件系统</li></ul>\n<p>6.下列函数中对调用它的函数没有起到任何作用的是</p>\n<ul><li>A.void f1(double &amp;x){–x;}</li><li>B.double f1(double x){return x-1.5;}</li><li>C.void f3(double x){–x;}</li><li>D.double f4(double *x){–<em>x; return</em>x;}</li></ul>\n<p>7.有如下程序：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> f<span class=\"token punctuation\">,</span> f1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> f2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tf <span class=\"token operator\">=</span> f1 <span class=\"token operator\">+</span> f2<span class=\"token punctuation\">;</span>\n\t\tf1 <span class=\"token operator\">=</span> f2<span class=\"token punctuation\">;</span> f2 <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> f <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行时的输出结果是______。</p>\n<ul><li>A.2</li><li>B.3</li><li>C.5</li><li>D.8</li></ul>\n<p>8.在C++语言中函数返回值的类型是由______决定的。</p>\n<ul><li>A.调用该函数时系统临时</li><li>B.return语句中的表达式类型</li><li>C.定义该函数时所指定的函数类型</li><li>D.调用该函数时的主调函数类型</li></ul>\n<p>9.有如下程序：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClass</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">TestClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">n</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tTestClass <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> TestClass <span class=\"token function\">q</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>执行后的输出结果是______。</p>\n<ul><li>A.55</li><li>B.57</li><li>C.75</li><li>D.77</li></ul>\n<p>10.有如下四个语句：<br/> ① cout &lt;&lt; ‘A’&lt;&lt;setfill(’<em>’) &lt;&lt; left &lt;&lt; setw(7) &lt;&lt; ‘B’ &lt;&lt; endl;<br/> ② cout &lt;&lt; setfill(’</em>’) &lt;&lt; left &lt;&lt; setw(7) &lt;&lt; ‘A’ &lt;&lt; ‘B’ &lt;&lt; endl;<br/> ③ cout &lt;&lt; ‘A’ &lt;&lt; setfill(’<em>’) &lt;&lt; right &lt;&lt; setw(7) &lt;&lt; ‘B’ &lt;&lt; endl;<br/> ④ cout &lt;&lt; setfill(’</em>’) &lt;&lt; right &lt;&lt; setw(7) &lt;&lt; ‘A’ &lt;&lt; ‘B’ &lt;&lt; endl;<br/> 其中能显示A******B的是______。</p>\n<ul><li>A.①和③</li><li>B.①和④</li><li>C.②和③</li><li>D.②和④</li></ul>\n<p>11.检查软件产品是否符合需求定义的过程称为______。</p>\n<ul><li>A.确认测试</li><li>B.需求测试</li><li>C.验证测试</li><li>D.路径测试</li></ul>\n<p>12.类模板template＜class T&gt;class x{…}，其中友元函数f对特定类型T(如int)，使函数f(x＜int＞}成为x＜int＞模板类的友元，则其说明为______。</p>\n<ul><li>A.fricnd voidf();</li><li>B.friend voidf(x＜T＞);</li><li>C.friend voidA::f();</li><li>D.friend void C＜T＞::f(x＜T＞);</li></ul>\n<p>13.有如下程序：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Con</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> ID<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">Con</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">ID</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">Con</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ID<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">ID</span><span class=\"token punctuation\">(</span>ID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">Con</span><span class=\"token punctuation\">(</span>Con<span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">ID</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">char</span> <span class=\"token function\">getID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> ID<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>Con c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> cout <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tCon c1<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">show</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tCon <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">show</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>执行上面程序的输出结果是______。</p>\n<ul><li>A.13A23A</li><li>B.23A13B</li><li>C.13A23B</li><li>D.13B23A</li></ul>\n<p>14.有如下程序：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt; iostream &gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Basel</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Basel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> cout <span class=\"token operator\">&lt;&lt;</span> d<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Basel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> cout <span class=\"token operator\">&lt;&lt;</span> d<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Basel</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Base2</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Basel</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">b1</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">b2</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> b1<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tDerived <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>执行这个程序的输出结果是______。</p>\n<ul><li>A.1234</li><li>B.2134</li><li>C.12</li><li>D.21</li></ul>\n<p>15.下列关于goto语句的描述中，正确的是______。</p>\n<ul><li>A.goto语句可在一个文件中随意转向</li><li>B.goto语句后面要跟一个它所转向的语句</li><li>C.goto语句可以同时转向多条语句</li><li>D.goto语句可以从一个循环体内转到循环体外</li></ul>\n<p>16.有如下类定义：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AA</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\t<span class=\"token comment\">//①</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token comment\">//②</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">{<!-- --></span>a<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\t\t<span class=\"token comment\">//③</span>\n    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>AA aa<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span>cout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\t<span class=\"token comment\">//④</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>其中四个函数的定义中正确的是______。</p>\n<ul><li>A.①</li><li>B.②</li><li>C.③</li><li>D.④</li></ul>\n<p>17.已知函数f的原型是void f(int *a, long &amp;b); ，变量v1、v2的定义是：int v1; long v2;</p>\n<p>下列调用语句中正确的是______。</p>\n<ul><li>A.f(v1,&amp;v2);</li><li>B.f(v1,v2);</li><li>C.f(&amp;v1,&amp;v2);</li><li>D.f(&amp;1,v2);</li></ul>\n<p>18.下列关于虚函数的描述中正确的是______。</p>\n<ul><li>A.如果在重定义函数时使用了保留字virtual，则该重定义函数仍然是虚函数</li><li>B.虚函数不得声明为静态成员函数</li><li>C.虚函数不得声明为另一个类的友元函数</li><li>D.派生类必须重新定义基类的虚函数</li></ul>\n<p>19.模块独立性是软件模块化所提出的要求，衡量模块独立性的度量标准则是模块的______。</p>\n<ul><li>A.抽象和信息隐蔽</li><li>B.局部化和封装化</li><li>C.内聚性和耦合性</li><li>D.激活机制和控制方法</li></ul>\n<p>20.若有定义语句“double x[5]={1.0，2.0，3.0，4.0，5.0},* p=x”，则错误引用x数组元素的是______。</p>\n<ul><li>A.*p</li><li>B.x[5]</li><li>C.*(p+1)</li><li>D.*x</li></ul>\n<p>21.下列属于黑盒测试方法的是______。</p>\n<ul><li>A.语句覆盖</li><li>B.逻辑覆盖</li><li>C.边界值分析</li><li>D.路径分析</li></ul>\n<p>22.数据库设计中，用E-R图来描述信息结构但不涉及信息在计算机中的表示，它属于数据库设计的______。</p>\n<ul><li>A.需求分析阶段</li><li>B.逻辑设计阶段</li><li>C.概念设计阶段</li><li>D.物理设计阶段</li></ul>\n<p>23.若有如下程序：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">sample</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">sample</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tn <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\ts <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> sample<span class=\"token operator\">::</span>n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tsample <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsample<span class=\"token operator\">::</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>程序运行后的输出结果是______。</p>\n<ul><li>A.2</li><li>B.5</li><li>C.7</li><li>D.3</li></ul>\n<p>24.下列关于this指针的描述中，正确的是______。</p>\n<ul><li>A.类的成员函数都有this指针</li><li>B.类的友元函数都有this指针</li><li>C.任何与类相关的函数都有this指针</li><li>D.类的非静态成员函数都有this指针</li></ul>\n<p>25.在定义一个类模板时，模板形参表是用一对括号括起来的，所采用的括号是______。</p>\n<ul><li>A.()</li><li>B.[]</li><li>C.＜＞</li><li>D.{}</li></ul>\n<p>26.若有如下程序：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClass</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">who</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"TestClass\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClass1</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">TestClass</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">who</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"TestClass1\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tTestClass <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\tTestClass1 obj1<span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>obj1<span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">-&gt;</span> <span class=\"token function\">who</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>则该程序运行后的输出结果是______。</p>\n<ul><li>A.TestClass1</li><li>B.TestClass</li><li>C.0</li><li>D.无输出</li></ul>\n<p>27.以下C++语言中用于单行注释的是______</p>\n<ul><li>A.//</li><li>B./*</li><li>C.*/</li><li>D.|</li></ul>\n<p>28.下列数据结构中，属于非线性结构的是______。</p>\n<ul><li>A.双向链表</li><li>B.循环链表</li><li>C.二叉链表</li><li>D.循环队列</li></ul>\n<p>29.已知枚举类型声明语句为：<br/> enum COLOR{WHITE,YELLOW,GREEN=5,RED,BLACK=10};<br/> 则下列说法中错误的是______。</p>\n<ul><li>A.枚举常量YELLOW的值为1</li><li>B.枚举常量RED的值为6</li><li>C.枚举常量BLACK的值为10</li><li>D.枚举常量WHITE的值为1</li></ul>\n<p>30.下列关于纯虚函数与抽象类的描述中，错误的是______。</p>\n<ul><li>A.纯虚函数是一种特殊的虚函数，它没有具体的实现</li><li>B.抽象类是指具有纯虚函数的类</li><li>C.一个基类声明了纯虚函数，该基类的派生类一定不是抽象类</li><li>D.抽象类只能作为基类来使用，其纯虚函数的实现由派生类给出</li></ul>\n<p>31.下列选项中，不是一个算法的基本特征的是______。</p>\n<ul><li>A.完整性</li><li>B.可行性</li><li>C.有穷性</li><li>D.拥有足够的情报</li></ul>\n<p>32.有如下类声明：<br/> class XA{<!-- --><br/> int x;<br/> public:<br/> XA(int n){x=n;}<br/> };<br/> class XB:public XA{<!-- --><br/> int y;<br/> public:<br/> XB(int a,int b);<br/> };<br/> 在构造函数XB的下列定义中，正确的是______。</p>\n<ul><li>A.XB::XB(int a,int b):x(a),y(b){}</li><li>B.XB::XB(int a,int b):XA(a),y(b){}</li><li>C.XB::XB(int a,int b):x(a),XB(b){}</li><li>D.XB::XB(int a,int b):XA(a),XB(b){}</li></ul>\n<p>33.在深度为5的满二叉树中，叶子节点的个数为______。</p>\n<ul><li>A.32</li><li>B.31</li><li>C.16</li><li>D.15</li></ul>\n<p>34.在公有派生情况下，有关派生类对象和基类对象的关系，下列叙述不正确的是______。</p>\n<ul><li>A.派生类的对象可以赋给基类的对象</li><li>B.派生类的对象可以初始化基类的引用</li><li>C.派生类的对象可以直接访问基类中的成员</li><li>D.派生类的对象的地址可以赋给指向基类的指针</li></ul>\n<p>35.数据库管理系统是______。</p>\n<ul><li>A.操作系统的一部分</li><li>B.在操作系统支持下的系统软件</li><li>C.一种编译系统</li><li>D.一种操作系统</li></ul>\n<p>36.有以下程序：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tt <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\t\ta<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>执行后输出结果是______。<br/> A.6 5 4 3 2 1<br/> B.4 3 2 1 5 6<br/> C.4 5 6 1 2 3<br/> D.1 2 3 4 5 6</p>\n<p>37.有如下程序：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">&gt;&gt;</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"**\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"###\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输入字符+时，程序的运行结果是______。</p>\n<ul><li>A.***</li><li>B.###</li><li>C.***###</li><li>D.无输出</li></ul>\n<p>38.若函数中有定义语句“int k;”，则______。</p>\n<ul><li>A.系统将自动给k赋初值0</li><li>B.这时k中的值无定义</li><li>C.系统将自动给k赋初值-1</li><li>D.这时k中无任何值</li></ul>\n<p>39.有如下程序：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> s <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>s <span class=\"token operator\">+=</span> i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行这个程序的输出结果是______。</p>\n<ul><li>A.3</li><li>B.5</li><li>C.7</li><li>D.9</li></ul>\n<p>40.堆栈s进行下列操作：push(1)；push(2)；pop()；pop()；后，此时的栈顶元素为______。</p>\n<ul><li>A.1</li><li>B.2</li><li>C.0</li><li>D.不确定</li></ul>\n<p><br/></p>\n<h3><a id=\"_664\"></a>二、基本操作题</h3>\n<p>1.请打开工程prog1，该工程中包含程序文件main.cpp，其中有Salary(“工资”)类和主函数main的定义。<br/> 程序中位于每个“// ERROR found”之后的一行语句行有错误，请加以改正。<br/> 改正后程序的输出结果应为：</p>\n<p>应发合计：3500 应扣合计：67.5 实发工资：3432.5</p>\n<p>注意：只修改每个“// ERROR found”下的那一行，不要改动程序中的其他内容。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Salary</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token function\">Salary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> the_base<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> the_bonus<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> the_tax<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ERROR **********found********** </span>\n     <span class=\"token operator\">:</span> <span class=\"token function\">the_base</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">the_bonus</span><span class=\"token punctuation\">(</span>bonus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">the_tax</span><span class=\"token punctuation\">(</span>tax<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n     staff_id<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>staff_id<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ERROR **********found********** </span>\n  <span class=\"token operator\">~</span><span class=\"token function\">Salary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">delete</span> <span class=\"token operator\">*</span>staff_id<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">double</span> <span class=\"token function\">getGrossPay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> base<span class=\"token operator\">+</span>bonus<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>          <span class=\"token comment\">//返回应发项合计</span>\n  <span class=\"token keyword\">double</span> <span class=\"token function\">getNetPay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> <span class=\"token function\">getGrossPay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>tax<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>   <span class=\"token comment\">//返回实发工资额</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>staff_id<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//职工号</span>\n  <span class=\"token keyword\">double</span> base<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//基本工资</span>\n  <span class=\"token keyword\">double</span> bonus<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//奖金</span>\n  <span class=\"token keyword\">double</span> tax<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//代扣个人所得税</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  Salary <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"888888\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67.50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"应发合计：\"</span><span class=\"token operator\">&lt;&lt;</span>pay<span class=\"token punctuation\">.</span><span class=\"token function\">getGrossPay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"   \"</span><span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"应扣合计：\"</span><span class=\"token operator\">&lt;&lt;</span>pay<span class=\"token punctuation\">.</span><span class=\"token function\">getGrossPay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>pay<span class=\"token punctuation\">.</span><span class=\"token function\">getNetPay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"   \"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ERROR **********found********** </span>\n  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"实发工资：\"</span><span class=\"token operator\">&lt;&lt;</span>pay<span class=\"token operator\">::</span><span class=\"token function\">getNetPay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><br/></p>\n<h3><a id=\"_714\"></a>三、简单应用题</h3>\n<p>请打开源程序文件2.cpp。阅读下列函数说明和代码。函数num(char *str)用于返回字符串中非数字的个数。<br/> 例如：abc123abc45<br/> 返回值为：6<br/> 将函数num补充完整。<br/> 注意：请勿改动主函数main。<br/> <strong>试题程序：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">num</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"please input a string: \"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"char number is \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">num</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><br/></p>\n<h3><a id=\"_742\"></a>四、综合应用题</h3>\n<p>请打开工程proj3，其中声明的是一个人员信息类，补充编制程序，使其功能完整。在main函数中给出了一组测试数据，此种情况下程序的输出应该是：Zhang 20 Tsinghua。<br/> 注意：只能在函数address_change的“// <strong><strong><strong><strong>333</strong></strong></strong></strong>”和“// <strong><strong><strong><strong>666</strong></strong></strong></strong>”之间填入若干语句，不要改动程序中的其他内容。<br/> 程序最后将结果输出到文件out.dat中。输出函数writeToFile已经编译为obj文件，并且在本程序中调用。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"proj3.h\"</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token function\">name_change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span>  _name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> _name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token function\">age_change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  age<span class=\"token operator\">=</span>_age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token function\">address_change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> _add<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\t\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>address<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> address<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//********333******** </span>\n\n\n\n<span class=\"token comment\">//********666******** </span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token function\">info_display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\t'</span>\n\t\t<span class=\"token operator\">&lt;&lt;</span>age<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\t'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>address<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span>address<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>address<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> address<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tPerson p1<span class=\"token punctuation\">;</span>\n\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">name_change</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Zhang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">age_change</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">address_change</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tsinghua University\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">address_change</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tsinghua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">info_display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">writeToFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>proj3.h</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nclass Person{\n    char name[20];\n    int age;\n    char* address;\n  public:\n    Person(){  age=0;address=0;  }\n    void name_change(char *_name);    //名字修改函数\n    void age_change(int _age);        //年龄修改函数\n    void address_change(char* _add);  //地址修改函数\n    void info_display();              //人员信息显示\n    ~Person();                        //析构函数\n};\n\nvoid writeToFile(const char *path);\n\n</code></pre>\n<p><br/></p>\n<p><br/></p>\n<h2><a id=\"_826\"></a>参考答案：</h2>\n<p><br/></p>\n<h3><a id=\"_830\"></a>一、选择题</h3>\n<p>1.B</p>\n<p>[解析] +是二元运算符，重载不能改变这一点。所以为了保证+有两个参数，所以不允许有默认参数。</p>\n<p>2.D</p>\n<p>[解析] 本题考查的是输出运算符＜＜的重载首先函数的第一个形参类型为ostream&amp;，所以返回值也应该是ostream&amp;，以保证输出运算符可以链接使用，选项A、C错误；由于L/O操作符的第一个形参类型并不是Date类类型，所以不能作为成员函数，必须使用友元函数，声明前必须加关键字friend，选项B错误，选项D正确。</p>\n<p>3.B</p>\n<p>[解析] 由题意可知，基类指针p指向的是派生类的对象，当p调用Display()时，输出的结果是派生类中的Display()，可知Display()必为虚函数，这样才能满足动态联编。虚函数的定义是在声明前加关键字virtual，选项A不是虚函数，错误；选项C、D定义虚函数的格式不对，错误；答案为B选项。</p>\n<p>4.D</p>\n<p>[解析] 很明显，本题考查的是表达式的值作为结果输出。可以看出，本表达式是一个逻辑表达式，其结果为真或假，那么输出则对应1和0，故排除选项C。本题答案为D。</p>\n<p>5.B</p>\n<p>[解析] 系统软件主要包括如下几个方而：<br/> (1)操作系统软件，这是软件的核心。<br/> (2)各种语言的解释程序和编译程序。<br/> (3)各种服务性程序。<br/> (4)各种数据库管理系统。</p>\n<p>6.C</p>\n<p>[解析] 本题考核函数的调用和参数值的传递(形参、实参)。选项C中的函数D调用采用按值传递的方式，函数中对形参的修改没有影响到实参的值，而且函数G还没有返回值，所以函数耀对调用它的函数没有起到任何作用。选项A中的函数f1采用引用传递的方式影响实参的值，选项D中的函数f4通过返回值和指针调用来影响调用函数；选项B中的函数f2采用返回值的形式对其调用函数发生作用。</p>\n<p>7.C</p>\n<p>[解析] 循环3次，分别每次计算出f1，f2和f的值，该题比较简单，只需要细心即可。</p>\n<p>8.C</p>\n<p>[解析] C++中函数return语句中返回的类型应与函数定义指定的类型一致，即函数定义的类型即为函数应返回的类型。</p>\n<p>9.B</p>\n<p>[解析] C++中对常对象的成员函数调用，将自动调用其常成员函数，程序中调用原型为\"int get()const;\"的函数，对于非常对象将调用原型为\"int get();\"的函数。因为首先用5对对象p进行了初始化，所以执行p.get()时直接返回5，而对于常对象则以6对q进行初始化。在调用q.get()时，将调用原型为\"int get()const;\"的函数，该函数将返回n+1，第二个输出应为7，所以本题答案为57。</p>\n<p>10.C</p>\n<p>[解析] 本题考查C++流的使用。setfill()的作用是设置填充字符；left的作用是使输出数据在指定宽度内左对齐；right的作用是使输出数据在指定宽度内右对齐。(各选项运行结果见文章下方代码)</p>\n<p>11.A</p>\n<p>[解析] 确认测试的任务是验证软件的功能和性能，以及其他特性是否满足需求规格说明中确定的各种需求。</p>\n<p>12.B</p>\n<p>[解析] 声明一个函数模板的格式template＜模板形参表声明＞函数声明。调用模板函数时，如果与模板实参中最后的若干个参数有关的信息可以从模板函数的实参中获得，则相关的模板实参可以省略。</p>\n<p>13.C</p>\n<p>[解析] Con c1定义c1对象，调用Con的无参数构造函数，输出1，ID值变为A，执行show(c1)时会调用拷贝构造函数，将c1对象的值复制给show函数的形参，此时输出3，然后在show()中输出c1的ID值A，Con c2(‘B’)定义c2对象，调用Con(char ID)构造函数，输出2，c2的ID值为B，show(c2)执行时先调用拷贝构造函数输出3，然后输出B。因此程序输出结果为“13A23B”。</p>\n<p>14.D</p>\n<p>[解析] 本题考查派生类的构造函数和析构函数，在定义一个派生类的对象时，先调用基类的构造函数，然后再执行派生类的构造函数，对象释放时，先执行派生类的析构函数，再执行基类的析构函数。本题中定义一个派生类对象时，分别调用基类的构造函数，所以分别输出21。</p>\n<p>15.D</p>\n<p>[解析] goto语句也可以跳出循环和switch语句，goto语句无条件地转移程序的执行控制。它总是与一标号相匹配，其形式为：goto标号；，标号是用户自定义的标识符，它可以处于goto语句的前面，也可以处于其后，但标号必须与goto语句处于同一个函数中。定义标号时，由一个标识符后面跟一个冒号组成。</p>\n<p>16.B</p>\n<p>[解析] 本题考查常成员函数，常成员函数只能引用本类中的数据成员，而不能修改它。所以本题答案为B。</p>\n<p>……<br/> 详见：<a href=\"https://download.csdn.net/download/weixin_44785513/80252491\">https://download.csdn.net/download/weixin_44785513/80252491</a></p>\n<p><br/></p>\n<h3><a id=\"_936\"></a>二、基本操作题：</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Salary</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Salary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> the_base<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> the_bonus<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> the_tax<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">// ERROR **********found********** </span>\n\t\t<span class=\"token operator\">:</span> <span class=\"token function\">base</span><span class=\"token punctuation\">(</span>the_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">bonus</span><span class=\"token punctuation\">(</span>the_bonus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">tax</span><span class=\"token punctuation\">(</span>the_tax<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tstaff_id <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>staff_id<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// ERROR **********found********** </span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Salary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> staff_id<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">double</span> <span class=\"token function\">getGrossPay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> base <span class=\"token operator\">+</span> bonus<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>          <span class=\"token comment\">//返回应发项合计</span>\n\t<span class=\"token keyword\">double</span> <span class=\"token function\">getNetPay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> <span class=\"token function\">getGrossPay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> tax<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>   <span class=\"token comment\">//返回实发工资额</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>staff_id<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//职工号</span>\n\t<span class=\"token keyword\">double</span> base<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//基本工资</span>\n\t<span class=\"token keyword\">double</span> bonus<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//奖金</span>\n\t<span class=\"token keyword\">double</span> tax<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//代扣个人所得税</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tSalary <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"888888\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67.50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"应发合计：\"</span> <span class=\"token operator\">&lt;&lt;</span> pay<span class=\"token punctuation\">.</span><span class=\"token function\">getGrossPay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"   \"</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"应扣合计：\"</span> <span class=\"token operator\">&lt;&lt;</span> pay<span class=\"token punctuation\">.</span><span class=\"token function\">getGrossPay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> pay<span class=\"token punctuation\">.</span><span class=\"token function\">getNetPay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"   \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// ERROR **********found********** </span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"实发工资：\"</span> <span class=\"token operator\">&lt;&lt;</span> pay<span class=\"token punctuation\">.</span><span class=\"token function\">getNetPay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：</p>\n<p>应发合计：3500 应扣合计：67.5 实发工资：3432.5</p>\n<p>(1):base(the_base)，bonus(the_bonus)，tax(the_tax)<br/> (2)～Salary() {delete[] staff_id；}<br/> (3)cout ＜＜ “实发工资:” ＜＜ pay.getNetPay() ＜＜ endl；</p>\n<p>[考点] 本题考查的是Salary类，其中涉及动态数组、构造函数、析构函数和const函数。构造函数一般使用成员列表初始化，括号内应该为形参。析构函数使用delete语句释放指针，格式为：delete[]指针。<br/> [解析] (1)主要考查考生对构造函数的掌握情况，构造函数的成员初始列表要把形参放在括号内。<br/> ……</p>\n<p>详见：<a href=\"https://download.csdn.net/download/weixin_44785513/80252491\">https://download.csdn.net/download/weixin_44785513/80252491</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}