{"blogid": "122663049", "writerAge": "码龄2年", "writerBlogNum": "80", "writerCollect": "930", "writerComment": "1489", "writerFan": "2526", "writerGrade": "6级", "writerIntegral": "6616", "writerName": "The   August", "writerProfileAdress": "writer_image\\profile_122663049.jpg", "writerRankTotal": "2776", "writerRankWeekly": "1756", "writerThumb": "1880", "writerVisitNum": "69375", "blog_read_count": "1084", "blog_time": "已于 2022-02-14 10:31:35 修改", "blog_title": "C++-继承", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>C++-继承</h3>\n<ul><li><a href=\"#_1\">继承</a></li><li><ul><li><a href=\"#_51\">继承关系和访问限定符</a></li><li><a href=\"#_56\">继承基类成员访问方式的变化</a></li></ul>\n</li><li><a href=\"#_91\">基类和派生类对象赋值转换</a></li><li><a href=\"#_142\">继承中的作用域</a></li><li><a href=\"#_210\">派生类的默认成员函数</a></li><li><a href=\"#_332\">继承与友元</a></li><li><a href=\"#_337\">继承与静态成员</a></li><li><a href=\"#_379\">复杂的菱形继承及菱形虚拟继承</a></li><li><ul><li><a href=\"#_476\">虚拟继承解决数据冗余和二义性的原理</a></li></ul>\n</li><li><a href=\"#_533\">继承的总结和反思</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>继承</h1>\n<blockquote>\n<p>继承(inheritance)机制是<strong>面向对象</strong>程序设计<strong>使代码可以复用</strong>的最重要的手段，它允许程序员在<strong>保持原有类特性的基础上进行扩展</strong>，增加功能，这样产生新的类，称派生类。继承<strong>呈现了面向对象程序设计的层次结构</strong>，体现了由简单到复杂的认知过程。<strong>继承是类设计层次的复用。</strong></p>\n</blockquote>\n<p><strong>继承的定义：</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\32264fad451a431f910c65cd40251b02.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"name:\"</span> <span class=\"token operator\">&lt;&lt;</span> _name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"age:\"</span> <span class=\"token operator\">&lt;&lt;</span> _age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring _name <span class=\"token operator\">=</span> <span class=\"token string\">\"peter\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 姓名</span>\n\t<span class=\"token keyword\">int</span> _age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 年龄</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Student继承了Person，Student中就拥有了Person的成员</span>\n<span class=\"token comment\">//Person叫父类/基类</span>\n<span class=\"token comment\">//Student叫子类/派生类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _stuid<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 学号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _jobid<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 工号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStudent s<span class=\"token punctuation\">;</span>\n\tTeacher t<span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_51\"></a>继承关系和访问限定符</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\386d2222609e4a23903ddf2d2de1f718.png\"/><br/> 注：访问限定符中的protected访问和private访问没有区别</p>\n<h2><a id=\"_56\"></a>继承基类成员访问方式的变化</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\75ee5aa7045b45a7855b7fa4edfe5f0d.png\"/><br/> <strong>注：在派生类中的不可见是指子类对象中的基类private修饰的成员在物理空间上是存在的，但是除父类可以使用外，其余都不可使用</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\15df2859e52e4b22a315a138e45d75ac.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span>  Person  <span class=\"token comment\">//相当于 class Student : private Person</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> Person  <span class=\"token comment\">//相当于 struct Student : public Person</span>\n</code></pre>\n<p><strong>总结：</strong></p>\n<ol><li>基类private成员在派生类中无论以什么方式继承都是不可见的。这里的<strong>不可见是指基类的私有成员还是被继承到了派生类对象中，但是语法上限制派生类对象不管在类里面还是类外面都不能去访问它</strong>。</li><li>基类private成员在派生类中是不能被访问，如果基类成员不想在类外直接被访问，但需要在派生类中能访问，就定义为protected。可以看出保护成员限定符是因继承才出现的。</li><li>基类的私有成员在子类都是不可见。基类的其他成员在子类的访问方式 == Min(成员在基类的访问限定符，继承方式)，public &gt; protected &gt; private。</li><li><strong>使用关键字class时默认的继承方式是private，使用struct时默认的继承方式是public，不过最好显示的写出继承方式。</strong></li><li><strong>在实际运用中一般使用都是public继承，几乎很少使用protetced/private继承，也不提倡使用protetced/private继承，因为protetced/private继承下来的成员都只能在派生类的类里面使用，实际中扩展维护性不强。</strong></li></ol>\n<p>注：</p>\n<ul><li>C++早期设计继承方式和访问限定符时，考虑复杂，把各种情况都考虑进去了，但实际使用中，发现用的最多的是这几种（public继承）</li><li>虽然C++设计的复杂但是我们要朝简单的去理解</li></ul>\n<p>补充：</p>\n<ul><li>如何设计出一个不被继承的类（方法有2）：</li><li>\n<ol><li><strong>基类的构造函数设计成私有（C++98）</strong></li></ol> </li><li>\n<ol start=\"2\"><li><strong>final修饰基类 class A final {}; 表示这个类不能被继承（C++11）</strong></li></ol> </li></ul>\n<h1><a id=\"_91\"></a>基类和派生类对象赋值转换</h1>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring _name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 姓名</span>\n\tstring _sex<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 性别</span>\n\t<span class=\"token keyword\">int</span> _age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 年龄</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _No<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 学号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tPerson p<span class=\"token punctuation\">;</span>\n\tStudent s<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// public 继承</span>\n\t<span class=\"token comment\">//子类对象可以赋值给父类对象/指针/引用</span>\n\tp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//  父对象=子对象-------切割（切片）</span>\n\tPerson<span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 父类指针=子类对象</span>\n\tPerson<span class=\"token operator\">&amp;</span> ret <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 父类引用=子类对象</span>\n\t<span class=\"token comment\">// s = p;            //子类对象=父类对象 不可以这样使用</span>\n\n\n\t<span class=\"token comment\">// 基类的指针可以通过强制类型转换赋值给派生类的指针</span>\n\tptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">;</span>\n\tStudent <span class=\"token operator\">*</span> ps1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Student<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这种情况转换时可以的。</span>\n\tps1<span class=\"token operator\">-&gt;</span>_No <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n\tptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">;</span>\n\tStudent<span class=\"token operator\">*</span> ps2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Student<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这种情况转换时虽然可以，但是会存在越界访问的问题</span>\n\tps2<span class=\"token operator\">-&gt;</span>_No <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//这样访问_No时会发生越界，编译器会报：栈被破坏</span>\n\t<span class=\"token comment\">//子类指针=父类指针 强转可以  但最好用dynamic_cast进行转换，这样是最安全的</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\abe1cf7f60294d5db0fc0c002060bd15.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\54971a33bdac4c2da817896736ed420d.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\adafd324f75f47bfa61d1e24e7aa2fa3.png\"/></p>\n<p>注：</p>\n<ul><li>派生类对象 可以赋值给 基类的对象 / 基类的指针 / 基类的引用。这里有个形象的说法叫切片或者切割。寓意把派生类中父类那部分切来赋值过去（<strong>子类给予父类是一种天然行为，不存在强制转换问题（如果不是就该是const person&amp; p=s，显然与p=s不符）</strong>）。</li><li>基类对象不能赋值给派生类对象</li><li>基类的指针可以通过强制类型转换赋值给派生类的指针。但是必须是基类的指针是指向派生类对象时才是安全的。这里基类如果是多态类型，可以使用RTTI(Run-Time Type Information)的dynamic_cast 来进行识别后进行安全转换。</li><li><strong>发生切片时，必须是用public继承，否则不成立</strong></li></ul>\n<h1><a id=\"_142\"></a>继承中的作用域</h1>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// Student的_num和Person的_num构成隐藏关系</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring _name <span class=\"token operator\">=</span> <span class=\"token string\">\"小李子\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 姓名</span>\n\t<span class=\"token keyword\">int</span> _num <span class=\"token operator\">=</span> <span class=\"token number\">111</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 身份证号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 姓名:\"</span> <span class=\"token operator\">&lt;&lt;</span> _name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 身份证号:\"</span> <span class=\"token operator\">&lt;&lt;</span> Person<span class=\"token operator\">::</span>_num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//要想访问父类中的_num需指定类域即可</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 学号:\"</span> <span class=\"token operator\">&lt;&lt;</span> _num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//当打印_num是默认会先找本类域的_num，如果没有找到再去父类中找</span>\n\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//根据就近原则</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _num <span class=\"token operator\">=</span> <span class=\"token number\">999</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 学号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStudent s1<span class=\"token punctuation\">;</span>\n\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// B中的fun和A中的fun不是构成重载，因为不是在同一作用域</span>\n<span class=\"token comment\">// B中的fun和A中的fun构成隐藏，成员函数满足函数名相同就构成隐藏。</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">A</span><span class=\"token operator\">::</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func(int i)-&gt;\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tB b<span class=\"token punctuation\">;</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>总结：</p>\n<ol><li><strong>在继承体系中基类和派生类都有独立的作用域。</strong></li><li><strong>子类和父类中有同名成员，子类成员将屏蔽父类对同名成员的直接访问，这种情况叫隐藏，也叫重定义。（在子类成员函数中，可以使用 基类::基类成员 显示访问）</strong></li><li>需要注意的是<strong>如果是成员函数的隐藏，</strong> <strong>只需要函数名相同就构成隐藏。</strong></li><li>注意在实际中在继承体系里面最好不要定义同名的成员。</li></ol>\n<p>补充：</p>\n<ul><li>函数重载要求是在同意作用域</li><li>建议自己定义，尽量不要在父子类中定义同名成员变量和函数，C++中不能禁止使用同名成员，因为在C++中是有需求的(赋值重载)</li></ul>\n<h1><a id=\"_210\"></a>派生类的默认成员函数</h1>\n<blockquote>\n<p>6个默认成员函数，“默认”的意思就是指不写，编译器会变我们自动生成一个</p>\n<ol><li>派生类的构造函数必须调用基类的构造函数初始化基类的那一部分成员。如果基类没有默认的构造函数，则必须在派生类构造函数的初始化列表阶段显示调用。</li><li>派生类的拷贝构造函数必须调用基类的拷贝构造完成基类的拷贝初始化。</li><li>派生类的operator=必须要调用基类的operator=完成基类的复制。</li><li>派生类的析构函数会在被调用完成后自动调用基类的析构函数清理基类成员。因为这样才能保证派生类对象先清理派生类成员再清理基类成员的顺序。</li><li>派生类对象初始化先调用基类构造再调派生类构造。</li><li>派生类对象析构清理先调用派生类析构再调基类的析构</li></ol>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\579f08c44d9b4f6d963bf1f9740ed3f0.png\"/><img alt=\"在这里插入图片描述\" src=\"image\\1a8968e7be814c9f987f2291e53147f0.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"peter\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span> <span class=\"token function\">_name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Person<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span> <span class=\"token function\">_name</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>_name<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person(const Person&amp; p)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tPerson<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Person<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person operator=(const Person&amp; p)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span>\n\t\t\t_name <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>_name<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring _name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 姓名</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_num</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Student()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//这里的拷贝构造是不用自己实现的，用默认的即可</span>\n\t<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">//切片</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_num</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>_num<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Student(const Student&amp; s)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tStudent<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Student&amp; operator= (const Student&amp; s)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tPerson<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_num <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>_num<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">~</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~Student()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//清理自己的资源</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token comment\">//会自动调用父类的析构函数</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _num<span class=\"token punctuation\">;</span> <span class=\"token comment\">//学号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStudent <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tStudent <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tStudent <span class=\"token function\">s3</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rose\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts1 <span class=\"token operator\">=</span> s3<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注：</p>\n<ul><li>子类构造函数——我们不写，编译器默认生成：</li><li>\n<ol><li>继承父亲成员作为一个整体 调用父类的默认构造函数初始化</li></ol> </li><li>\n<ol start=\"2\"><li>自己的内置类型成员 调用它的默认构造函数</li></ol> </li><li>\n<ol start=\"3\"><li>自己的内置类型成员 不处理（除非声明了缺省值）</li></ol> </li><li>实现子类的构造函数时要注意的父类是作为一个整体的，调用父类的构造函数进行初始化</li><li>子类拷贝构造函数——我们不写，编译器默认生成：</li><li>\n<ol><li>继承父亲成员作为一个整体 调用父类的拷贝构造函数初始化</li></ol> </li><li>\n<ol start=\"2\"><li>自己的内置类型成员 调用它的拷贝构造函数</li></ol> </li><li>\n<ol start=\"3\"><li>自己的内置类型成员 值拷贝</li></ol> </li><li>如果默认拷贝构造函数可以满足条件就不用自己实现，但是如果子类中存在深浅拷贝问题，这是需要自己实现</li><li>子类拷贝赋值函数——我们不写，编译器默认生成：</li><li>\n<ol><li>继承父亲成员作为一个整体 调用父类的拷贝赋值</li></ol> </li><li>\n<ol start=\"2\"><li>自己的内置类型成员 调用它的拷贝赋值</li></ol> </li><li>\n<ol start=\"3\"><li>自己的内置类型成员 值拷贝</li></ol> </li><li>子类析构函数——我们不写，编译器默认生成：</li><li>\n<ol><li>继承父亲成员作为一个整体 调用父类的析构函数</li></ol> </li><li>\n<ol start=\"2\"><li>自己的内置类型成员 调用它的析构函数</li></ol> </li><li>\n<ol start=\"3\"><li>自己的内置类型成员 不处理</li></ol> </li><li>子类的析构函数和父类析构函数构成隐藏关系，因为编译器会对析构函数名做特殊处理，所有类的析构函数名都会被处理成统一的名字destructor（）</li><li>编译器会对析构函数名做特殊处理，是因为析构函数要构成多态重写</li><li>子类的析构函数在执行结束后，会自动调用父类的析构函数，这样才能保证子类先调用析构函数清理，再调用父类的析构函数清理，顺序符合一致的规则（因为父类放在子类前面并且父类先声明 class Student : public Person，父类比子类先构造初始化）</li></ul>\n<h1><a id=\"_332\"></a>继承与友元</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2d9610cc56fd4906b66a2c52fc95ce43.png\"/><br/> 注：友元关系不能继承，也就是说基类友元不能访问子类私有和保护成员</p>\n<h1><a id=\"_337\"></a>继承与静态成员</h1>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token operator\">++</span>_count<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring _name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 姓名</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> _count<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 统计人的个数。</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> Person<span class=\"token operator\">::</span>_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _stuNum<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 学号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Graduate</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring _seminarCourse<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 研究科目</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStudent s1<span class=\"token punctuation\">;</span>\n\tStudent s2<span class=\"token punctuation\">;</span>\n\tStudent s3<span class=\"token punctuation\">;</span>\n\tGraduate s4<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 人数 :\"</span> <span class=\"token operator\">&lt;&lt;</span> Person<span class=\"token operator\">::</span>_count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 人数 :\"</span> <span class=\"token operator\">&lt;&lt;</span> Student<span class=\"token operator\">::</span>_count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 人数 :\"</span> <span class=\"token operator\">&lt;&lt;</span> s3<span class=\"token punctuation\">.</span>_count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tStudent<span class=\"token operator\">::</span>_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 人数 :\"</span> <span class=\"token operator\">&lt;&lt;</span> Person<span class=\"token operator\">::</span>_count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注：</p>\n<ul><li>基类定义了static静态成员，则整个继承体系里面只有一个这样的成员。无论派生出多少个子类，都只有一个static成员实例 。</li><li>基类静态成员，属于整个继承体系的类，属于这些类的所有对象</li></ul>\n<h1><a id=\"_379\"></a>复杂的菱形继承及菱形虚拟继承</h1>\n<blockquote>\n<p>单继承：一个子类只有一个直接父类时称这个继承关系为单继承</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\82fd09e563a84b4b8f5dd575e3560f06.png\"/></p>\n<blockquote>\n<p>多继承：一个子类有两个或以上直接父类时称这个继承关系为多继承</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\53cec065109343a39b88dad44d54b356.png\"/></p>\n<blockquote>\n<p>菱形继承：菱形继承是多继承的一种特殊情况</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6badff9dc0ba4d90b7b5a349746d1770.png\"/></p>\n<p>注：</p>\n<ul><li>多继承是C++的一个坑，但是在早期设计时没有办法，不知道；Java参考了C++的血泪史直接不支持了多继承</li><li>多继承本身是没有问题的，但是支持多继承就可能出现<strong>菱形继承</strong></li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\tstring _name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 姓名</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _num<span class=\"token punctuation\">;</span> <span class=\"token comment\">//学号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _id<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 职工编号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Assistant</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Teacher</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring _majorCourse<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 主修课程</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 这样会有二义性无法明确知道访问的是哪一个</span>\n\tAssistant a<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//a._name = \"peter\";\t</span>\n\t<span class=\"token comment\">// 需要显示指定访问哪个父类的成员可以解决二义性问题，但是数据冗余问题无法解决</span>\n\ta<span class=\"token punctuation\">.</span>Student<span class=\"token operator\">::</span>_name <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span>\n\ta<span class=\"token punctuation\">.</span>Teacher<span class=\"token operator\">::</span>_name <span class=\"token operator\">=</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注：</p>\n<ul><li>上段代码为菱形继承，从对象成员模型构造，可以看出菱形继承有数据冗余（_name有两份）和二义性（_name访问不明确）的问题。在Assistant的对象中Person成员会有两份。</li></ul>\n<p><strong>解决方法如下（虚拟继承）：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\tstring _name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 姓名</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _num<span class=\"token punctuation\">;</span> <span class=\"token comment\">//学号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _id<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 职工编号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Assistant</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Teacher</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring _majorCourse<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 主修课程</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n\tAssistant a<span class=\"token punctuation\">;</span>   \n\ta<span class=\"token punctuation\">.</span>_name <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注：</p>\n<ul><li>virtual可以解决菱形继承中的数据冗余和二义性的问题</li><li>需要注意的是，虚拟继承不要在其他地方去使用</li><li>使用虚拟继承要注意使用virtual要在“腰部”（Student、Teacher）不要用在“首尾”（Assistant、Person）</li></ul>\n<h2><a id=\"_476\"></a>虚拟继承解决数据冗余和二义性的原理</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// class B : public A</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// class C : public A</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">C</span></span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _d<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tD d<span class=\"token punctuation\">;</span>\n\td<span class=\"token punctuation\">.</span>B<span class=\"token operator\">::</span>_a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\td<span class=\"token punctuation\">.</span>C<span class=\"token operator\">::</span>_a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\td<span class=\"token punctuation\">.</span>_b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\td<span class=\"token punctuation\">.</span>_c <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\td<span class=\"token punctuation\">.</span>_d <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8798d9e6241847ffbdd3fe69451ebe63.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\cc41a17178d741f2b3ed58a22d1f6a0d.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\3a8f1fe14af445d39c66427a3983233b.png\"/></p>\n<blockquote>\n<p>总结：<br/> 访问继承的虚基表对象成员_a都是取偏移量计算_a的位置<br/> B对象、指针、引用访问_a都要取偏移量计算_a的位置可以看到虚继承后，<strong>解决了菱形继承，但同时对象模型更复杂了，其次访问虚基类成员也付出一定的效率代价</strong></p>\n</blockquote>\n<p><strong>图解：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\ef5992970e7d4944a5818941b7430fb0.png\"/></p>\n<h1><a id=\"_533\"></a>继承的总结和反思</h1>\n<ol><li>C++语法复杂，其实多继承就是一个体现。有了多继承，就存在菱形继承，有了菱形继承就有菱形虚拟继承，底层实现就很复杂。一定不要设计出菱形继承。否则在复杂度及性能上都有问题。</li><li>多继承可以认为是C++的缺陷之一，很多后来的OO语言都没有多继承，如Java。</li><li>继承和组合</li></ol>\n<ul><li>public继承是一种is-a的关系。也就是说每个派生类对象都是一个基类对象。</li><li>组合是一种has-a的关系。假设B组合了A，每个B对象中都有一个A对象。</li><li><strong>优先使用对象组合，而不是类继承 。</strong></li><li>继承允许你根据基类的实现来定义派生类的实现。这种通过生成派生类的复用通常被称为白箱复用(white-box reuse)。术语“白箱”（白盒）是相对可视性而言：<strong>在继承方式中，基类的内部细节对子类可见</strong> 。<strong>继承一定程度破坏了基类的封装，基类的改变，对派生类有很大的影响。派生类和基类间的依赖关系很强，耦合度高。</strong></li><li>对象组合是类继承之外的另一种复用选择。新的更复杂的功能可以通过组装或组合对象来获得。对象组合要求被组合的对象具有良好定义的接口。这种复用风格被称为黑箱复用(black-box reuse)，因为<strong>对象的内部细节是不可见的</strong>。对象只以“黑箱”（黑盒）的形式出现。 <strong>组合类之间没有很强的依赖关系，耦合度低。优先使用对象组合有助于你保持每个类被封装。</strong></li><li><strong>实际尽量多去用组合</strong>。<strong>组合的耦合度低，代码维护性好</strong>。不过继承也有用武之地的，有些关系就适合继承那就用继承，<strong>另外要实现多态，也必须要继承</strong>。<strong>类之间的关系可以用继承，可以用组合，就用组合。</strong></li></ul>\n<p>补充:</p>\n<ul><li>模块间关联度越高，独立性越低，耦合度就越高</li><li>模块间关联度越低，独立性越高，耦合度就越低</li><li>模块间推崇<strong>高类聚低耦合</strong></li></ul>\n<p>组合：</p>\n<pre><code class=\"prism language-cpp\"> <span class=\"token comment\">// Tire和Car构成has-a的关系</span>\n \n <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tire</span><span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n \tstring _brand <span class=\"token operator\">=</span> <span class=\"token string\">\"Michelin\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 品牌</span>\n \tsize_t _size <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 尺寸</span>\n \n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n \tstring _colour <span class=\"token operator\">=</span> <span class=\"token string\">\"白色\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 颜色</span>\n \tstring _num <span class=\"token operator\">=</span> <span class=\"token string\">\"陕ABIT00\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 车牌号</span>\n \tTire _t<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 轮胎</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}