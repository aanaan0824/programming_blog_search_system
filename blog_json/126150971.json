{"blogid": "126150971", "writerAge": "码龄1年", "writerBlogNum": "80", "writerCollect": "3729", "writerComment": "3288", "writerFan": "5916", "writerGrade": "7级", "writerIntegral": "9815", "writerName": "knighthood2001", "writerProfileAdress": "writer_image\\profile_126150971.jpg", "writerRankTotal": "1343", "writerRankWeekly": "41", "writerThumb": "3241", "writerVisitNum": "158596", "blog_read_count": "1585", "blog_time": "已于 2022-08-04 08:32:45 修改", "blog_title": "python入门函数讲解（简单明了，一分钟掌握一个）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p> 🔝🔝🔝🔝🔝🔝🔝🔝🔝🔝🔝🔝🔝🔝🔝</p>\n<p><strong>🥰 博客首页：<strong><strong><strong><a href=\"https://blog.csdn.net/knighthood2001?type=lately\" title=\"knighthood2001\">knighthood2001</a></strong></strong></strong></strong></p>\n<p><strong>😗 欢迎点赞👍评论🗨️</strong></p>\n<p><strong>❤️ 热爱python，期待与大家一同进步成长！！❤️</strong></p>\n<p><strong>👀<strong><a href=\"https://www.nowcoder.com/link/pc_csdncpt_knight_python\" title=\"给大家推荐一款很火爆的刷题、面试求职网站\">给大家推荐一款很火爆的刷题、面试求职网站</a></strong>👀</strong></p>\n<p><strong>跟我一起来巩固基础和刷题吧</strong></p>\n</blockquote>\n<p>        学习以下函数，对掌握基础知识还是有挺大帮助的，以下只是列举了比较常见的几个函数，适合新手，且内容简单明了，能够快速了解并掌握，看完可去<strong><strong><strong><strong><a href=\"https://www.nowcoder.com/link/pc_csdncpt_knight_python\" title=\"刷题网站免费刷题，提升自己！！\">刷题网站免费刷题，提升自己！！</a></strong></strong></strong></strong></p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"int()%20%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><strong><a href=\"#int%28%29%20%E5%87%BD%E6%95%B0\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">int() 函数</span></span></a></strong></p>\n<p id=\"float()%20%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><strong><a href=\"#float%28%29%20%E5%87%BD%E6%95%B0\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">float() 函数</span></span></a></strong></p>\n<p id=\"eval()%20%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><strong><a href=\"#eval%28%29%20%E5%87%BD%E6%95%B0\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">eval() 函数</span></span></a></strong></p>\n<p id=\"tuple%20%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><strong><a href=\"#tuple%20%E5%87%BD%E6%95%B0\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">tuple 函数</span></span></a></strong></p>\n<p id=\"list()%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:0px;\"><strong><a href=\"#list%28%29%E6%96%B9%E6%B3%95\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">list()方法</span></span></a></strong></p>\n<p id=\"set()%20%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><strong><a href=\"#set%28%29%20%E5%87%BD%E6%95%B0\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">set() 函数</span></span></a></strong></p>\n<p id=\"dict()%20%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><strong><a href=\"#dict%28%29%20%E5%87%BD%E6%95%B0\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">dict() 函数</span></span></a></strong></p>\n<p id=\"chr()%20%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><strong><a href=\"#chr%28%29%20%E5%87%BD%E6%95%B0\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">chr() 函数</span></span></a></strong></p>\n<p id=\"ord()%20%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><strong><a href=\"#ord%28%29%20%E5%87%BD%E6%95%B0\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">ord() 函数</span></span></a></strong></p>\n<p id=\"ceil()%20%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><strong><a href=\"#ceil%28%29%20%E5%87%BD%E6%95%B0\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">ceil() 函数</span></span></a></strong></p>\n<p id=\"floor()%20%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><strong><a href=\"#floor%28%29%20%E5%87%BD%E6%95%B0\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">floor() 函数</span></span></a></strong></p>\n<p id=\"pow()%20%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><strong><a href=\"#pow%28%29%20%E5%87%BD%E6%95%B0\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">pow() 函数</span></span></a></strong></p>\n<p id=\"round()%20%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><strong><a href=\"#round%28%29%20%E5%87%BD%E6%95%B0\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">round() 函数</span></span></a></strong></p>\n<p id=\"sqrt()%20%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><strong><a href=\"#sqrt%28%29%20%E5%87%BD%E6%95%B0\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">sqrt() 函数</span></span></a></strong></p>\n<p id=\"choice()%20%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><strong><a href=\"#choice%28%29%20%E5%87%BD%E6%95%B0\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">choice() 函数</span></span></a></strong></p>\n<p id=\"randrange()%20%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><strong><a href=\"#randrange%28%29%20%E5%87%BD%E6%95%B0\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">randrange() 函数</span></span></a></strong></p>\n<p id=\"random()%20%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><strong><a href=\"#random%28%29%20%E5%87%BD%E6%95%B0\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">random() 函数</span></span></a></strong></p>\n<p id=\"shuffle()%20%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><strong><a href=\"#shuffle%28%29%20%E5%87%BD%E6%95%B0\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fff5e6;\">shuffle() 函数</span></span></a></strong></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"int()%20%E5%87%BD%E6%95%B0\">int() 函数</h1>\n<p id=\"%E6%8F%8F%E8%BF%B0\"><strong>描述</strong></p>\n<p>int() 函数用于将一个字符串或数字转换为整型。</p>\n<p id=\"%E8%AF%AD%E6%B3%95\"><strong>语法</strong></p>\n<p>以下是 int() 方法的语法:</p>\n<pre><code class=\"language-python\">class int(x, base=10)</code></pre>\n<p id=\"%E5%8F%82%E6%95%B0\"><strong>参数</strong></p>\n<ul><li>x -- 字符串或数字。</li><li>base -- 进制数，默认十进制。</li></ul>\n<p id=\"%E8%BF%94%E5%9B%9E%E5%80%BC\"><strong>返回值</strong></p>\n<p>返回<span style=\"color:#ff9900;\"><strong>整型</strong></span>数据。</p>\n<p id=\"%E5%AE%9E%E4%BE%8B\"><strong>实例</strong></p>\n<p>①不传入参数时，得到结果0 </p>\n<pre><code class=\"language-python\">&gt;&gt;&gt;int()               \n0</code></pre>\n<p>②int(3)和int(3.6)结果一样 </p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; int(3)\n3\n&gt;&gt;&gt; int(3.6)\n3\n</code></pre>\n<p>③如果是带参数base的话，12要以字符串的形式进行输入，12 为 16进制</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; int('12',16)        \n18\n&gt;&gt;&gt; int('0xa',16) \n10 \n</code></pre>\n<hr/>\n<h1 id=\"float()%20%E5%87%BD%E6%95%B0\">float() 函数</h1>\n<p id=\"%E6%8F%8F%E8%BF%B0\"><strong>描述</strong></p>\n<p><strong>float()</strong> 函数用于将整数和字符串转换成浮点数。</p>\n<p id=\"%E8%AF%AD%E6%B3%95\"><strong>语法</strong></p>\n<p>float()方法语法：</p>\n<pre><code class=\"language-python\">class float(x)</code></pre>\n<p id=\"%E5%8F%82%E6%95%B0\"><strong>参数</strong></p>\n<ul><li>x -- 整数或字符串</li></ul>\n<p id=\"%E8%BF%94%E5%9B%9E%E5%80%BC\"><strong>返回值</strong></p>\n<p>返回浮点数。</p>\n<p id=\"%E5%AE%9E%E4%BE%8B\"><strong>实例</strong></p>\n<p>以下实例展示了 float() 的使用方法：</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt;float(1)\n1.0\n&gt;&gt;&gt; float(112)\n112.0\n&gt;&gt;&gt; float(-123.6)\n-123.6\n&gt;&gt;&gt; float('123')     # 字符串\n123.0</code></pre>\n<h1 id=\"eval()%20%E5%87%BD%E6%95%B0\">eval() 函数</h1>\n<p><strong>描述</strong></p>\n<p>eval() 函数用来执行一个字符串表达式，并返回表达式的值。</p>\n<p>eval()函数就是实现list、dict、tuple与str之间的转化，</p>\n<p><strong>语法</strong></p>\n<p>以下是 eval() 方法的语法:</p>\n<pre><code>eval(expression[, globals[, locals]])</code></pre>\n<p><strong>参数</strong></p>\n<ul><li>expression -- 表达式。</li><li>globals -- 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</li><li>locals -- 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</li></ul>\n<p><strong>返回值</strong></p>\n<p>返回表达式计算结果。</p>\n<p><strong>实例</strong></p>\n<p>以下展示了使用 eval() 方法的实例：</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt;x = 7\n&gt;&gt;&gt; eval( '3 * x' )\n21\n&gt;&gt;&gt; eval('pow(2,2)')\n4\n&gt;&gt;&gt; eval('2 + 2')\n4\n&gt;&gt;&gt; n=81\n&gt;&gt;&gt; eval(\"n + 4\")\n85</code></pre>\n<hr/>\n<h1 id=\"tuple%20%E5%87%BD%E6%95%B0\">tuple 函数</h1>\n<p><strong>描述</strong></p>\n<p>tuple 函数将列表转换为元组。</p>\n<p><strong>语法</strong></p>\n<p>以下是 tuple 的语法:</p>\n<pre><code class=\"language-python\">tuple(seq)</code></pre>\n<p><strong>参数</strong></p>\n<ul><li>seq -- 要转换为元组的序列。</li></ul>\n<p><strong>返回值</strong></p>\n<p>返回元组。</p>\n<p><strong>实例</strong></p>\n<p>以下展示了使用 tuple 的实例：</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt;list1= ['Google', 'Taobao', 'Nowcoder', 'Baidu']\n&gt;&gt;&gt; tuple1=tuple(list1)\n&gt;&gt;&gt; tuple1\n('Google', 'Taobao', 'Nowcoder', 'Baidu')</code></pre>\n<h1 id=\"list()%E6%96%B9%E6%B3%95\">list()方法</h1>\n<p><strong>描述</strong></p>\n<p>list() 方法用于将元组或字符串转换为列表。</p>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>注：</strong>元组与列表是非常类似的，区别在于元组的元素值不能修改，元组是放在括号中，列表是放于方括号中。</span></p>\n</blockquote>\n<p><strong>语法</strong></p>\n<p>list()方法语法：</p>\n<pre><code class=\"language-python\">list(seq)</code></pre>\n<p><strong>参数</strong></p>\n<ul><li>seq -- 要转换为列表的元组或字符串。</li></ul>\n<p><strong>返回值</strong></p>\n<p>返回列表。</p>\n<p><strong>实例</strong></p>\n<p>以下实例展示了 list()函数的使用方法：</p>\n<pre><code class=\"language-python\">aTuple = (123, 'Google', 'Nowcoder', 'Taobao')\nlist1 = list(aTuple)\nprint (\"列表元素 : \", list1)\n\nstr=\"Hello World\"\nlist2=list(str)\nprint (\"列表元素 : \", list2)</code></pre>\n<p> 结果如下：</p>\n<pre><code class=\"language-python\">列表元素 :  [123, 'Google', 'Nowcoder', 'Taobao']\n列表元素 :  ['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']</code></pre>\n<h1 id=\"set()%20%E5%87%BD%E6%95%B0\">set() 函数</h1>\n<p><strong>描述</strong></p>\n<p><strong>set()</strong> 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。</p>\n<p><strong>语法</strong></p>\n<p>set 语法：</p>\n<pre><code class=\"language-python\">class set(iterable)</code></pre>\n<p>参数说明：</p>\n<ul><li>iterable -- 可迭代对象；</li></ul>\n<p>       <span style=\"color:#956fe7;\"><strong> iterable中的iter可以翻译为“迭代”，在python中，可迭代对象包括列表、元组、字典、字符串。</strong></span></p>\n<p><strong>返回值</strong></p>\n<p>返回新的集合对象。</p>\n<p><strong>实例</strong></p>\n<p>以下实例展示了 set 的使用方法：</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt;x = set('nowcoder')\n&gt;&gt;&gt; y = set('google')\n&gt;&gt;&gt; x, y\n({'o', 'c', 'n', 'w', 'e', 'r', 'd'}, {'g', 'l', 'o', 'e'})   # 重复的被删除\n&gt;&gt;&gt; x &amp; y         # 交集\n{'o', 'e'}\n&gt;&gt;&gt; x | y         # 并集\n{'o', 'c', 'g', 'l', 'n', 'w', 'e', 'r', 'd'}\n&gt;&gt;&gt; x - y         # 差集\n{'c', 'n', 'w', 'r', 'd'}\n&gt;&gt;&gt;</code></pre>\n<h1 id=\"dict()%20%E5%87%BD%E6%95%B0\" style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">dict() 函数</span></span></h1>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">描述</span></span></strong></p>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\"><strong>dict() </strong>函数用于创建一个字典。</span></span></p>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">语法</span></span></strong></p>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">dict 语法：</span></span></p>\n<div>\n<div id=\"highlighter_65320969976\">\n<div>\n<pre><code class=\"language-python\">class dict(**kwarg)\nclass dict(mapping, **kwarg)\nclass dict(iterable, **kwarg)</code></pre>\n</div>\n</div>\n</div>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">参数说明：</span></span></p>\n<ul style=\"margin-left:0;\"><li>**kwargs -- 关键字</li><li>mapping -- 元素的容器。</li><li>iterable -- 可迭代对象。</li></ul>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">返回值</span></span></strong></p>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">返回一个字典。</span></span></p>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">实例</span></span></strong></p>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">以下实例展示了 dict 的使用方法：</span></span></p>\n<pre><code class=\"language-python\">&gt;&gt;&gt;dict()                        # 创建空字典\n{}\n&gt;&gt;&gt; dict(a='a', b='b', t='t')     # 传入关键字\n{'a': 'a', 'b': 'b', 't': 't'}\n&gt;&gt;&gt; dict(zip(['one', 'two', 'three'], [1, 2, 3]))   # 映射函数方式来构造字典\n{'three': 3, 'two': 2, 'one': 1}\n&gt;&gt;&gt; dict([('one', 1), ('two', 2), ('three', 3)])    # 可迭代对象方式来构造字典\n{'three': 3, 'two': 2, 'one': 1}</code></pre>\n<h1 id=\"chr()%20%E5%87%BD%E6%95%B0\">chr() 函数</h1>\n<p><strong>描述</strong></p>\n<p>chr() 用一个范围在 range（256）内的（就是0～255）整数作参数，返回一个对应的字符。</p>\n<p><strong>语法</strong></p>\n<p>以下是 chr() 方法的语法:</p>\n<pre><code class=\"language-python\">chr(i)</code></pre>\n<p><strong>参数</strong></p>\n<ul><li>i -- 可以是10进制也可以是16进制的形式的数字。</li></ul>\n<p><strong>返回值</strong></p>\n<p>返回值是当前整数对应的 ASCII 字符。</p>\n<p><strong>实例</strong></p>\n<p>以下展示了使用 chr() 方法的实例：</p>\n<pre><code>print(chr(0x30), chr(0x31), chr(0x61)_   # 十六进制\n# 0 1 a\nprint(chr(48), chr(49), chr(97))         # 十进制\n# 0 1 a</code></pre>\n<h1 id=\"ord()%20%E5%87%BD%E6%95%B0\">ord() 函数</h1>\n<p><strong>描述</strong></p>\n<p>ord() 函数是 chr() 函数（对于8位的ASCII字符串）或 unichr() 函数（对于Unicode对象）的配对函数，它以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值，如果所给的 Unicode 字符超出了你的 Python 定义范围，则会引发一个 TypeError 的异常。</p>\n<p><strong>语法</strong></p>\n<p>以下是 ord() 方法的语法:</p>\n<pre><code>ord(c)</code></pre>\n<p><strong>参数</strong></p>\n<ul><li>c -- 字符。</li></ul>\n<p><strong>返回值</strong></p>\n<p>返回值是对应的十进制整数。</p>\n<hr/>\n<p><strong>实例</strong></p>\n<p>以下展示了使用 ord() 方法的实例：</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt;ord('a')\n97\n&gt;&gt;&gt; ord('b')\n98\n&gt;&gt;&gt; ord('c')\n99</code></pre>\n<h1 id=\"ceil()%20%E5%87%BD%E6%95%B0\">ceil() 函数</h1>\n<p><strong>描述</strong></p>\n<p>ceil(x) 函数返回一个大于或等于 x 的的最小整数。</p>\n<p><strong>语法</strong></p>\n<p>以下是 ceil() 方法的语法:</p>\n<pre><code class=\"language-python\">import math\nmath.ceil( x )</code></pre>\n<p><strong>注意：</strong>ceil()是不能直接访问的，需要导入 math 模块，通过静态对象调用该方法。</p>\n<p><strong>参数</strong></p>\n<p>x -- 数值表达式。</p>\n<p><strong>返回值</strong></p>\n<p>函数返回返回一个大于或等于 x 的的最小整数。</p>\n<p><strong>实例</strong></p>\n<p>以下展示了使用 ceil() 方法的实例：</p>\n<pre><code class=\"language-python\">import math   # 导入 math 模块\n\nprint(\"math.ceil(-45.17) : \", math.ceil(-45.17))\nprint(\"math.ceil(100.12) : \", math.ceil(100.12))\nprint(\"math.ceil(100.72) : \", math.ceil(100.72))\nprint(\"math.ceil(math.pi) : \", math.ceil(math.pi))</code></pre>\n<p>结果如下：</p>\n<pre><code>math.ceil(-45.17) :  -45\nmath.ceil(100.12) :  101\nmath.ceil(100.72) :  101\nmath.ceil(math.pi) :  4</code></pre>\n<h1 id=\"floor()%20%E5%87%BD%E6%95%B0\" style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">floor() 函数</span></span></h1>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">描述</span></span></strong></p>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">floor(x) 返回数字的下舍整数，小于或等于 x。</span></span></p>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">语法</span></span></strong></p>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">以下是 floor() 方法的语法:</span></span></p>\n<div>\n<div id=\"highlighter_18996052263\">\n<div>\n<pre><code class=\"language-python\">import math \nmath.floor(x)</code></pre>\n</div>\n</div>\n</div>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">参数</span></span></strong></p>\n<ul style=\"margin-left:0;\"><li>x -- 数值表达式。</li></ul>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">返回值</span></span></strong></p>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">返回小于或等于 x 的整数。</span></span></p>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">实例</span></span></strong></p>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">以下展示了使用 floor() 方法的实例：</span></span></p>\n<pre><code class=\"language-python\">import math   # 导入 math 模块\nprint (\"math.floor(-45.17) : \", math.floor(-45.17))\nprint (\"math.floor(100.12) : \", math.floor(100.12))\nprint (\"math.floor(100.72) : \", math.floor(100.72))\nprint (\"math.floor(math.pi) : \", math.floor(math.pi))</code></pre>\n<p>结果如下：</p>\n<pre><code>math.floor(-45.17) :  -46\nmath.floor(100.12) :  100\nmath.floor(100.72) :  100\nmath.floor(math.pi) :  3</code></pre>\n<h1 id=\"pow()%20%E5%87%BD%E6%95%B0\" style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">pow() 函数</span></span></h1>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">描述</span></span></strong></p>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\"><strong>pow() </strong>方法返回 x^y（x的y次方） 的值。</span></span></p>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">语法</span></span></strong></p>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">以下是 math 模块 pow() 方法的语法:</span></span></p>\n<div>\n<div id=\"highlighter_70319214070\">\n<div>\n<pre><code class=\"language-python\">import math\nmath.pow( x, y )</code></pre>\n</div>\n</div>\n</div>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">内置的 pow() 方法</span></span></p>\n<div>\n<div id=\"highlighter_735195173648\">\n<div>\n<pre><code>pow(x, y[, z])</code></pre>\n</div>\n</div>\n</div>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z</span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\"><strong>注意： </strong>pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</span></span></p>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">参数</span></span></strong></p>\n<ul style=\"margin-left:0;\"><li>x -- 数值表达式。</li><li>y -- 数值表达式。</li><li>z -- 数值表达式。</li></ul>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">返回值</span></span></strong></p>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">返回 x^y（x的y次方） 的值。</span></span></p>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">实例</span></span></strong></p>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">以下展示了使用 pow() 方法的实例：</span></span></p>\n<pre><code class=\"language-python\">import math   # 导入 math 模块\n \nprint (\"math.pow(100, 2) : \", math.pow(100, 2))\n# 使用内置，查看输出结果区别\nprint (\"pow(100, 2) : \", pow(100, 2))\nprint (\"math.pow(100, -2) : \", math.pow(100, -2))\nprint (\"math.pow(2, 4) : \", math.pow(2, 4))\nprint (\"math.pow(3, 0) : \", math.pow(3, 0))</code></pre>\n<p>结果如下：</p>\n<pre><code>math.pow(100, 2) :  10000.0\npow(100, 2) :  10000\nmath.pow(100, -2) :  0.0001\nmath.pow(2, 4) :  16.0\nmath.pow(3, 0) :  1.0</code></pre>\n<h1 id=\"round()%20%E5%87%BD%E6%95%B0\" style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">round() 函数</span></span></h1>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">描述</span></span></strong></p>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\"><strong>round() </strong>方法返回浮点数x的四舍五入值。</span></span></p>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">语法</span></span></strong></p>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">以下是 round() 方法的语法:</span></span></p>\n<div>\n<div id=\"highlighter_118015881945\">\n<div>\n<pre><code>round(x [, n] )</code></pre>\n</div>\n</div>\n</div>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">参数</span></span></strong></p>\n<ul style=\"margin-left:0;\"><li>x -- 数字表达式。</li><li>n -- 表示从小数点位数，其中 x 需要四舍五入，默认值为 0。</li></ul>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">返回值</span></span></strong></p>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">返回浮点数x的四舍五入值。</span></span></p>\n<p style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">实例</span></span></strong></p>\n<p style=\"margin-left:0;\"><span style=\"color:#333333;\"><span style=\"background-color:#ffffff;\">以下展示了使用 round() 方法的实例：</span></span></p>\n<pre><code class=\"language-python\">print(\"round(70.23456) : \", round(70.23456))\nprint(\"round(56.659,1) : \", round(56.659,1))\nprint(\"round(80.264, 2) : \", round(80.264, 2))\nprint(\"round(100.000056, 3) : \", round(100.000056, 3))\nprint(\"round(-100.000056, 3) : \", round(-100.000056, 3))</code></pre>\n<p>结果如下：</p>\n<pre><code>round(70.23456) :  70\nround(56.659,1) :  56.7\nround(80.264, 2) :  80.26\nround(100.000056, 3) :  100.0\nround(-100.000056, 3) :  -100.0</code></pre>\n<h1 id=\"sqrt()%20%E5%87%BD%E6%95%B0\">sqrt() 函数</h1>\n<p><strong>描述</strong></p>\n<p><strong>sqrt(x)</strong> 方法返回数字x的平方根。</p>\n<p><strong>参数</strong></p>\n<ul><li>x -- 数值表达式。</li></ul>\n<p><strong>返回值</strong></p>\n<p>返回数字x的平方根。</p>\n<p><strong>实例</strong></p>\n<p>以下展示了使用 sqrt() 方法的实例：</p>\n<pre><code class=\"language-python\">import math   # 导入 math 模块\n \nprint (\"math.sqrt(100) : \", math.sqrt(100))\nprint (\"math.sqrt(7) : \", math.sqrt(7))\nprint (\"math.sqrt(math.pi) : \", math.sqrt(math.pi))</code></pre>\n<p>结果如下：</p>\n<pre><code>math.sqrt(100) :  10.0\nmath.sqrt(7) :  2.6457513110645907\nmath.sqrt(math.pi) :  1.7724538509055159</code></pre>\n<h1 id=\"choice()%20%E5%87%BD%E6%95%B0\">choice() 函数</h1>\n<p><strong>描述</strong></p>\n<p><strong>choice()</strong> 方法返回一个列表，元组或字符串的随机项。</p>\n<p><strong>语法</strong></p>\n<p>以下是 choice() 方法的语法:</p>\n<pre><code class=\"language-python\">import random\nrandom.choice(seq)</code></pre>\n<p><strong>注意：</strong>choice()是不能直接访问的，需要导入 random 模块，然后通过 random 静态对象调用该方法。</p>\n<p><strong>参数</strong></p>\n<ul><li>seq -- 可以是一个列表，元组或字符串。</li></ul>\n<p><strong>返回值</strong></p>\n<p>返回随机项。</p>\n<p><strong>实例</strong></p>\n<p>以下展示了使用 choice() 方法的实例：</p>\n<pre><code class=\"language-python\">import random\n\nprint (\"从 range(100) 返回一个随机数 : \",random.choice(range(100)))\nprint (\"从列表中 [1, 2, 3, 5, 9]) 返回一个随机元素 : \", random.choice([1, 2, 3, 5, 9]))\nprint (\"从字符串中 'Nowcoder' 返回一个随机字符 : \", random.choice('Nowcoder'))</code></pre>\n<p>结果如下：</p>\n<pre><code>从 range(100) 返回一个随机数 :  68\n从列表中 [1, 2, 3, 5, 9]) 返回一个随机元素 :  2\n从字符串中 'Nowcoder' 返回一个随机字符 :  d</code></pre>\n<h1 id=\"randrange()%20%E5%87%BD%E6%95%B0\">randrange() 函数</h1>\n<p><strong>描述</strong></p>\n<p><strong>randrange()</strong> 方法返回指定递增基数集合中的一个随机数，基数默认值为1。</p>\n<p><strong>语法</strong></p>\n<p>以下是 randrange() 方法的语法:</p>\n<pre><code class=\"language-python\">import random\n\nrandom.randrange ([start,] stop [,step])</code></pre>\n<p><strong>注意：</strong>randrange()是不能直接访问的，需要导入 random 模块，然后通过 random 静态对象调用该方法。</p>\n<p><strong>参数</strong></p>\n<ul><li>start -- 指定范围内的开始值，包含在范围内。</li><li>stop -- 指定范围内的结束值，不包含在范围内。</li><li>step -- 指定递增基数。</li></ul>\n<p><strong>返回值</strong></p>\n<p>从给定的范围返回随机项。</p>\n<p><strong>实例</strong></p>\n<p>以下展示了使用 randrange() 方法的实例：</p>\n<pre><code class=\"language-python\">import random\n\n# 从 1-100 中选取一个奇数\nprint (\"randrange(1,100, 2) : \", random.randrange(1, 100, 2))\n\n# 从 0-99 选取一个随机数\nprint (\"randrange(100) : \", random.randrange(100))</code></pre>\n<p>结果如下：</p>\n<pre><code>randrange(1,100, 2) :  97\nrandrange(100) :  42</code></pre>\n<h1 id=\"random()%20%E5%87%BD%E6%95%B0\">random() 函数</h1>\n<p><strong>描述</strong></p>\n<p><strong>random()</strong> 方法返回随机生成的一个实数，它在[0,1)范围内。</p>\n<p><strong>语法</strong></p>\n<p>以下是 random() 方法的语法:</p>\n<pre><code>import random\n\nrandom.random()</code></pre>\n<p><strong>注意：</strong>random()是不能直接访问的，需要导入 random 模块，然后通过 random 静态对象调用该方法。</p>\n<p><strong>参数</strong></p>\n<ul><li>无</li></ul>\n<p><strong>返回值</strong></p>\n<p>返回随机生成的一个实数，它在[0,1)范围内。</p>\n<p><strong>实例</strong></p>\n<p>以下展示了使用 random() 方法的实例：</p>\n<pre><code class=\"language-python\">import random\n\n# 第一个随机数\nprint (\"random() : \", random.random())\n\n# 第二个随机数\nprint (\"random() : \", random.random())</code></pre>\n<p>结果如下：</p>\n<pre><code>random() :  0.09690599908884856\nrandom() :  0.8732120512570916</code></pre>\n<h1 id=\"shuffle()%20%E5%87%BD%E6%95%B0\">shuffle() 函数</h1>\n<p><strong>描述</strong></p>\n<p><strong>shuffle()</strong> 方法将序列的所有元素随机排序。</p>\n<p><strong>语法</strong></p>\n<p>以下是 shuffle() 方法的语法:</p>\n<pre><code class=\"language-python\">import random\n\nrandom.shuffle(lst)</code></pre>\n<p><strong>注意：</strong>shuffle() 是不能直接访问的，需要导入 random 模块，然后通过 random 静态对象调用该方法。</p>\n<p><strong>参数</strong></p>\n<ul><li>lst -- 列表。</li></ul>\n<p><strong>返回值</strong></p>\n<p>返回 None。</p>\n<p><strong>实例</strong></p>\n<p>以下展示了使用 shuffle() 方法的实例：</p>\n<pre><code class=\"language-python\">import random\n\nlist = [20, 16, 10, 5];\nrandom.shuffle(list)\nprint (\"随机排序列表 : \",  list)\n\nrandom.shuffle(list)\nprint (\"随机排序列表 : \",  list)</code></pre>\n<p>结果如下：</p>\n<pre><code>随机排序列表 :  [20, 5, 16, 10]\n随机排序列表 :  [5, 20, 10, 16]</code></pre>\n<p></p>\n<p></p>\n</div>\n</div>"}