{"blogid": "124918840", "writerAge": "码龄1年", "writerBlogNum": "10", "writerCollect": "20", "writerComment": "16", "writerFan": "1", "writerGrade": "2级", "writerIntegral": "120", "writerName": "OliO_CHEN", "writerProfileAdress": "writer_image\\profile_124918840.jpg", "writerRankTotal": "100348", "writerRankWeekly": "990113", "writerThumb": "13", "writerVisitNum": "22737", "blog_read_count": "2208", "blog_time": "已于 2022-08-31 10:11:05 修改", "blog_title": "Java读取excel的方式，一篇文章看懂(详细)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"-toc\" style=\"margin-left:0px;\"></p>\n<p id=\"%E4%B8%80%E3%80%81excel%E8%AF%BB%E5%8F%96%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81excel%E8%AF%BB%E5%8F%96%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F\">一、excel读取的两种方式</a></p>\n<p id=\"1.1%20jxl%20%E5%92%8C%20poi%20%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E9%80%89%E6%8B%A9-toc\" style=\"margin-left:40px;\"><a href=\"#1.1%20jxl%20%E5%92%8C%20poi%20%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E9%80%89%E6%8B%A9\">1.1 jxl 和 poi 的区别和选择</a></p>\n<p id=\"%E4%BA%8C%E3%80%81jxl%20%E7%9A%84%E4%BD%BF%E7%94%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81jxl%20%E7%9A%84%E4%BD%BF%E7%94%A8\">二、jxl 的使用</a></p>\n<p id=\"2.1%20%E5%AF%BC%E5%85%A5%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96-toc\" style=\"margin-left:40px;\"><a href=\"#2.1%20%E5%AF%BC%E5%85%A5%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96\">2.1 导入相关依赖</a></p>\n<p id=\"%C2%A02.2%20%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A02.2%20%E6%93%8D%E4%BD%9C\"> 2.2 操作</a></p>\n<p id=\"%E4%B8%89%E3%80%81poi%20%E7%9A%84%E4%BD%BF%E7%94%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81poi%20%E7%9A%84%E4%BD%BF%E7%94%A8\">三、poi 的使用</a></p>\n<p id=\"3.1%20%E5%AF%BC%E5%85%A5%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96-toc\" style=\"margin-left:40px;\"><a href=\"#3.1%20%E5%AF%BC%E5%85%A5%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96\">3.1 导入相关依赖</a></p>\n<p id=\"3.2%20%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#3.2%20%E6%93%8D%E4%BD%9C\">3.2 操作</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E6%80%BB%E7%BB%93\">四、总结</a></p>\n<p></p>\n<h1 id=\"%E4%B8%80%E3%80%81excel%E8%AF%BB%E5%8F%96%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F\">一、excel读取的两种方式</h1>\n<p>Java中解析excel的方式，我目前知道的有两种，一种是 jxl 读取，另一种是 poi 读取</p>\n<h2 id=\"1.1%20jxl%20%E5%92%8C%20poi%20%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E9%80%89%E6%8B%A9\">1.1 jxl 和 poi 的区别和选择</h2>\n<p>① <span style=\"color:#fe2c24;\"><strong>jxl</strong></span> <u><strong>只能</strong></u>解析<strong><u> xls 文件</u></strong>，<strong>不能 </strong>解析 xlsx 文件; <span style=\"color:#fe2c24;\"><strong>poi</strong></span> 则是可以<u><strong>同时兼容xls 和xlsx</strong></u>两种文件类型，这是要注意的第一个点；</p>\n<p>② 这两个方法的读取方式不一样，<strong><span style=\"background-color:#ffd7b9;\">jxl 读取</span></strong>的是 先读列 然后循环获取的该列每行的信息。<strong><span style=\"background-color:#ffd7b9;\">poi 读取</span></strong>是 先读行，再循环获取每列的信息。如下图：</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"510\" src=\"image\\d9e69774924c49aa8cc75d2effdfc826.png\" width=\"1200\"/></p>\n<p>那我们应该怎么去做选择呢？如果只需要xls的解析，可以使用 jxl (因为poi蛮容易出异常的jar冲突之类的，而且读取的方式不太舒服，如果读取完还要做判断操作写入数据库，就会写的比较复杂)，如果需要兼容就选择poi方式读取。</p>\n<h1 id=\"%E4%BA%8C%E3%80%81jxl%20%E7%9A%84%E4%BD%BF%E7%94%A8\">二、jxl 的使用</h1>\n<h2 id=\"2.1%20%E5%AF%BC%E5%85%A5%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96\">2.1 导入相关依赖</h2>\n<pre><code class=\"language-java\">&lt;dependency&gt;\n    &lt;groupId&gt;net.sourceforge.jexcelapi&lt;/groupId&gt;\n    &lt;artifactId&gt;jxl&lt;/artifactId&gt;\n    &lt;version&gt;2.6.12&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n<p></p>\n<h2 id=\"%C2%A02.2%20%E6%93%8D%E4%BD%9C\"> 2.2 操作</h2>\n<p>以该表为例:</p>\n<p><img alt=\"\" height=\"359\" src=\"image\\dab940bcdb694faa818b71d8b7af704c.png\" width=\"442\"/></p>\n<p></p>\n<pre><code class=\"language-java\">package com.olio;\n\nimport jxl.Sheet;\nimport jxl.Workbook;\nimport jxl.read.biff.BiffException;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.net.URLDecoder;\n\npublic class TestDemo {\n\tpublic void readExcel(String path,String strURL) {\n\t\ttry {\n\t\t\t/*// 如果需要通过URL获取资源的加上以下的代码，不需要的省略就行\n\t\t\tURL url = new URL(strURL);\n\t\t\tHttpURLConnection conn = (HttpURLConnection)url.openConnection();\n\t\t\t// 设置超时间为3秒\n\t\t\tconn.setConnectTimeout(3*1000);\n\t\t\t// 防止屏蔽程序抓取而返回403错误\n\t\t\tconn.setRequestProperty(\"User-Agent\", \"Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)\");\n\t\t\t// 获取输入流\n\t\t\tInputStream inputStream = conn.getInputStream();\n\t\t\tWorkbook workbook  = Workbook.getWorkbook(inputStream);\n\t\t\t......*/\n\t\t\t\n\t\t\t// 解析路径的file文件\n\t\t\tWorkbook workbook = Workbook.getWorkbook(new File(path));\n\t\t\t// 获取第一张工作表\n\t\t\tSheet sheet = workbook.getSheet(0);\n\t\t\t// 循环获取每一行数据 因为默认第一行为标题行，我们可以从 1 开始循环，如果需要读取标题行，从 0 开始\n\t\t\t// sheet.getRows() 获取总行数\n\t\t\tfor (int i = 1; i &lt; sheet.getRows(); i++) {\n\t\t\t\t// 获取第一列的第 i 行信息 sheet.getCell(列，行)，下标从0开始\n\t\t\t\tString id = sheet.getCell(0, i).getContents();\n\t\t\t\t// 获取第二列的第 i 行信息\n\t\t\t\tString name = sheet.getCell(1,i).getContents();\n\t\t\t\t// 获取第三列的第 i 行信息\n\t\t\t\tString sex = sheet.getCell(2, i).getContents();\n\t\t\t\t// 获取第四列的第 i 行信息\n\t\t\t\tString grade = sheet.getCell(3, i).getContents();\n\n\t\t\t\t// 存入本地或者是存入对象等根据给人需求自己定就行,创建对象存储，然后加入集合中\n\t\t\t\t// ......\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (BiffException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}\n</code></pre>\n<h1 id=\"%E4%B8%89%E3%80%81poi%20%E7%9A%84%E4%BD%BF%E7%94%A8\">三、poi 的使用</h1>\n<p>        在这里写的是两种版本的兼容使用的方法</p>\n<h2 id=\"3.1%20%E5%AF%BC%E5%85%A5%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96\">3.1 导入相关依赖</h2>\n<pre><code class=\"language-java\">     &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;\n            &lt;artifactId&gt;poi&lt;/artifactId&gt;\n            &lt;version&gt;3.17&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;\n            &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;\n            &lt;version&gt;3.17&lt;/version&gt;\n        &lt;/dependency&gt;</code></pre>\n<h2 id=\"3.2%20%E6%93%8D%E4%BD%9C\">3.2 操作</h2>\n<p>以下图为例</p>\n<p><img alt=\"\" height=\"386\" src=\"image\\91d95c2920b74e2db66a6dbd27fff3bb.png\" width=\"813\"/></p>\n<p></p>\n<pre><code class=\"language-java\">package com.olio;\n\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.ss.usermodel.*;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.net.URLDecoder;\n\npublic class TestDemo {\n\tpublic void readExcel(String path,String strURL) {\n\t\ttry {\n\t\t\t/*// 如果需要通过URL获取资源的加上以下的代码，不需要的省略就行\n\t\t\tURL url = new URL(strURL);\n\t\t\tHttpURLConnection conn = (HttpURLConnection)url.openConnection();\n\t\t\t// 设置超时间为3秒\n\t\t\tconn.setConnectTimeout(3*1000);\n\t\t\t// 防止屏蔽程序抓取而返回403错误\n\t\t\tconn.setRequestProperty(\"User-Agent\", \"Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)\");\n\t\t\t// 获取输入流\n\t\t\tInputStream inputStream = conn.getInputStream();\n\t\t\t......*/\n\n\t\t\t// 获取文件输入流\n\t\t\tInputStream inputStream = new FileInputStream(path);\n\t\t\t// 定义一个org.apache.poi.ss.usermodel.Workbook的变量\n\t\t\tWorkbook workbook = null;\n\t\t\t// 截取路径名 . 后面的后缀名，判断是xls还是xlsx\n\t\t\t// 如果这个判断不对，就把equals换成 equalsIgnoreCase()\n\t\t\tif (path.substring(path.lastIndexOf(\".\" + 1)).equals(\"xls\")){\n\t\t\t\tworkbook = new HSSFWorkbook(inputStream);\n\t\t\t}else if (path.substring(path.lastIndexOf(\" . \" + 1)).equals(\"xlsx\")){\n\t\t\t\tworkbook = new XSSFWorkbook(inputStream);\n\t\t\t}\n\n\t\t\t// 获取第一张表\n\t\t\tSheet sheet = workbook.getSheetAt(0);\n\t\t\t// sheet.getPhysicalNumberOfRows()获取总的行数\n\t\t\t// 循环读取每一行\n\t\t\tfor (int i = 0; i &lt; sheet.getPhysicalNumberOfRows(); i++) {\n\t\t\t\t// 循环读取每一个格\n\t\t\t\tRow row = sheet.getRow(i);\n\t\t\t\t// row.getPhysicalNumberOfCells()获取总的列数\n\t\t\t\tfor (int index = 0; index &lt; row.getPhysicalNumberOfCells(); index++) {\n\t\t\t\t\t// 获取数据，但是我们获取的cell类型\n//代码上的内容自己根据实际需要自己调整就可以，这里只是展示一个样式···~\n\t\t\t\t\tCell cell = row.getCell(index);\n\t\t\t\t\t// 转换为字符串类型\n\t\t\t\t\tcellId.setCellType(CellType.STRING);\n\t\t\t\t\t// 获取得到字符串\n\t\t\t\t\tString id = cellId.getStringCellValue();\n\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}\n</code></pre>\n<h1 id=\"%E5%9B%9B%E3%80%81%E6%80%BB%E7%BB%93\">四、总结</h1>\n<p>        写这篇文章的初衷是总结自己的用到的方法，然后也将网上的做了个详细的总结，一篇文章去展现出来，其实只要清楚了它的代码写法，还有读取的方式，我们就已经可以去具体操作了，至于需要存储到哪里要看自己具体的业务需求，需要做逻辑判断，就根据读取方式去操作就可以，希望这篇文章可以帮到大家</p>\n<p>        不论是通过url获取资源，或者是path路径名的方式获取，最后都是需要用到输入流去进行给WorkBook方法做解析的，jxl 和 poi 的优缺点及全面的使用想深入研究的也可以看下面这个网站的文章</p>\n<p><a href=\"https://www.cr173.com/html/10377_1.html\" title=\"JXL开发Excel文档中文教程_西西软件资讯 (cr173.com)\">JXL开发Excel文档中文教程_西西软件资讯 (cr173.com)</a></p>\n<p>今天就到这儿啦！</p>\n</div>\n</div>"}