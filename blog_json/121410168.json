{"blogid": "121410168", "writerAge": "码龄1年", "writerBlogNum": "2", "writerCollect": "53", "writerComment": "0", "writerFan": "6", "writerGrade": "1级", "writerIntegral": "21", "writerName": "暂无新名字521", "writerProfileAdress": "writer_image\\profile_121410168.jpg", "writerRankTotal": "286780", "writerRankWeekly": "1202481", "writerThumb": "6", "writerVisitNum": "1802", "blog_read_count": "1691", "blog_time": "于 2021-11-18 21:03:28 发布", "blog_title": "数据结构全部代码", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>数据结构<br/> </p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1_3\">1.线性表</a></li><li><ul><li><a href=\"#11_11\">1.1约瑟夫环顺序表</a></li><li><a href=\"#12_82\">1.2前插后插子函数：</a></li><li><a href=\"#13_172\">1.3单链表基本操作代码</a></li><li><a href=\"#13_419\">1.3约瑟夫环循环链表实现</a></li></ul>\n</li><li><a href=\"#2_559\">2.栈和队列</a></li><li><ul><li><a href=\"#21_563\">2.1顺序栈的基本操作</a></li><li><a href=\"#22_719\">2.2迷宫的栈实现</a></li><li><a href=\"#23_885\">2.3队列顺序表实现</a></li><li><a href=\"#24_991\">2.4队列链表实现</a></li><li><a href=\"#25_1128\">2.5迷宫求解队列实现</a></li></ul>\n</li><li><a href=\"#3_1206\">3.字符串和数组</a></li><li><ul><li><a href=\"#31BFKMP_1207\">3.1BF与KMP代码</a></li><li><a href=\"#32_KMP_1295\">3.2 经典KMP算法判断</a></li><li><a href=\"#33__1375\">3.3 字符串匹配</a></li><li><a href=\"#3412_1456\">3.4字符串1匹配2</a></li><li><a href=\"#351_1546\">3.5蛇形填数1</a></li><li><a href=\"#362_1597\">3.6蛇形填数2</a></li><li><a href=\"#373_1630\">3.7蛇形填数3</a></li><li><a href=\"#38__1669\">3.8 递归与非递归</a></li><li><a href=\"#39_1748\">3.9回文数判断</a></li><li><a href=\"#310_1807\">3.10任意进制转换</a></li></ul>\n</li><li><a href=\"#4_1868\">4.树和二叉树</a></li><li><ul><li><a href=\"#41_1870\">4.1二叉树递归遍历</a></li><li><a href=\"#42_1952\">4.2二叉树非递归遍历</a></li><li><a href=\"#43_2129\">4.3二叉树层次遍历</a></li><li><a href=\"#44_2311\">4.4交换左右子树</a></li><li><a href=\"#45_2377\">4.5二叉树深度</a></li><li><a href=\"#46_2458\">4.6线索二叉树</a></li><li><a href=\"#47HDU_1710_2605\">4.7编程HDU 1710</a></li><li><a href=\"#48_2722\">4.8哈夫曼编码</a></li></ul>\n</li><li><a href=\"#5_2897\">5.图</a></li><li><ul><li><a href=\"#51_kruasl_2899\">5.1 kruasl算法</a></li><li><a href=\"#52_3015\">5.2图的遍历</a></li><li><a href=\"#53P166primDFSBFS_3215\">5.3用邻接矩阵和邻接表来存储P166prim图，用DFS（递归和非递归方法）和BFS输出。</a></li><li><a href=\"#54_3457\">5.4关键路径的实现</a></li><li><a href=\"#55dijstra_3696\">5.5dijstra非文件读取</a></li><li><a href=\"#56_dijstra_3797\">5.6 dijstra算法文件读取实现</a></li><li><a href=\"#57__3855\">5.7 拓扑排序算法实现</a></li></ul>\n</li><li><a href=\"#6_3999\">6.查找</a></li><li><ul><li><a href=\"#61_4001\">6.1用递归和非递归实现二分查找</a></li></ul>\n</li><li><a href=\"#8_4082\">8.其他</a></li><li><ul><li><a href=\"#81_4084\">81学生成绩管理系统</a></li><li><a href=\"#82_4367\">8.2快速排序时间计算</a></li><li><a href=\"#83_4425\">8.3冰雹猜想</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"1_3\"></a>1.线性表</h1>\n<pre><code>n个数据特性相同的元素构成的有限序列称为线性表。线性表有顺序存储和链式存储两种存储结构。\n\t顺序表\n\t优点：存储密度大；可以随机存取\n\t.缺点：增删时需要移动大量数据；浪费存储空间；属于静态存储\n</code></pre>\n<h2><a id=\"11_11\"></a>1.1约瑟夫环顺序表</h2>\n<pre><code>有n个人，输入淘汰密码m，报到这个数的人淘汰，再接着从下一个人数接着数，直到最后剩下一个人。\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Table</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>table<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//初始化顺序表</span>\ntable <span class=\"token function\">initTable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    table t<span class=\"token punctuation\">;</span>\n    t<span class=\"token punctuation\">.</span>head<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化失败\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    t<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    t<span class=\"token punctuation\">.</span>size<span class=\"token operator\">=</span>size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">DisplayList</span><span class=\"token punctuation\">(</span>table t1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入淘汰密码: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"淘汰次序依次是:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>t1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">&gt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{<!-- --></span>\n         k<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">+</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>i<span class=\"token punctuation\">;</span>\n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span>k<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">{<!-- --></span>\n             t1<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t1<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n         t1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> t1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"幸存者是：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入总人数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    table t1<span class=\"token operator\">=</span><span class=\"token function\">initTable</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n     t1<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n     t1<span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">DisplayList</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<pre><code>单链表\n\t单链表基本操作包括增加、删除、插入、删除、排序、插入，其中插入分为前插和后插。\n</code></pre>\n<h2><a id=\"12_82\"></a>1.2前插后插子函数：</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> score<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> Lnode<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//前插法</span>\nLnode <span class=\"token operator\">*</span><span class=\"token function\">Head_Insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tLnode <span class=\"token operator\">*</span>ptemp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tLnode <span class=\"token operator\">*</span>HeadNode <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tLnode <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span><span class=\"token comment\">//前面这里是声明这里有多少个变量</span>\n\tHeadNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Lnode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Lnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tHeadNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//声明了一个头结点，最后只需要使用这个头结点去发判断序列中是否有元素 </span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入数据个数\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入数据\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tptemp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Lnode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Lnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tptemp<span class=\"token operator\">-&gt;</span>num <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        ptemp<span class=\"token operator\">-&gt;</span>score<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>\n\t\tptemp<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>HeadNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\tHeadNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> ptemp<span class=\"token punctuation\">;</span>\t\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\tptemp<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> HeadNode<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t\tHeadNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> ptemp<span class=\"token punctuation\">;</span>\t\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t<span class=\"token punctuation\">}</span> \n\t<span class=\"token keyword\">return</span> HeadNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//尾插法 </span>\nLnode <span class=\"token operator\">*</span><span class=\"token function\">end_Insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tLnode <span class=\"token operator\">*</span>ptemp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tLnode <span class=\"token operator\">*</span>HeadNode <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tLnode <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\tHeadNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Lnode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Lnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tHeadNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//声明了一个头结点，最后只需要使用这个头结点去发判断序列中是否有元素</span>\n\tp<span class=\"token operator\">=</span>HeadNode<span class=\"token punctuation\">;</span>  \n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入数据个数\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入数据\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tptemp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Lnode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Lnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tptemp<span class=\"token operator\">-&gt;</span>num <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        ptemp<span class=\"token operator\">-&gt;</span>score<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>\n\t\tptemp<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> \n\t\tp<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>ptemp<span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token operator\">=</span>ptemp<span class=\"token punctuation\">;</span>\n\t\t\n\t<span class=\"token punctuation\">}</span> \n\t<span class=\"token keyword\">return</span> HeadNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span>Lnode <span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//拿到这个头结点 </span>\n\tL <span class=\"token operator\">=</span> L<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//拿到头结点 </span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//判断头结点是否为空 </span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %2f\\n \"</span><span class=\"token punctuation\">,</span>L<span class=\"token operator\">-&gt;</span>num<span class=\"token punctuation\">,</span>L<span class=\"token operator\">-&gt;</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tL <span class=\"token operator\">=</span> L<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> choice<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请选择插入方式\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.前插  2.后插\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLnode <span class=\"token operator\">*</span>t<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>t <span class=\"token operator\">=</span><span class=\"token function\">Head_Insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">printList</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>t <span class=\"token operator\">=</span><span class=\"token function\">end_Insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">printList</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<h2><a id=\"13_172\"></a>1.3单链表基本操作代码</h2>\n<p>：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio&gt;</span></span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdlib&gt;</span></span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring&gt;</span></span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cmath&gt;</span></span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n    using namespace std<span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">Status</span> <span class=\"token expression\"><span class=\"token keyword\">int</span></span></span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ElemType</span> <span class=\"token expression\"><span class=\"token keyword\">int</span></span></span>\n    <span class=\"token comment\">//单链表结点数据结构</span>\n    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        ElemType data<span class=\"token punctuation\">;</span><span class=\"token comment\">//数据域</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//指针域</span>\n    <span class=\"token punctuation\">}</span>LNode<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>LinkList<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//**************************基本操作函数***************************//</span>\n    <span class=\"token comment\">//初始化函数</span>\n    Status <span class=\"token function\">InitList</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n     L <span class=\"token operator\">=</span> new LNode<span class=\"token punctuation\">;</span><span class=\"token comment\">//生成头结点 这样删除等操作就不必分第一个结点和其他了</span>\n     L<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//获取单链表长度 头结点无数据，不算</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">ListLength</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        LinkList p<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span><span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n         sum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n         p<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//去除头结点</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//后插 </span>\n    bool <span class=\"token function\">ListInsert_A</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>ElemType e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        LNode<span class=\"token operator\">*</span> s<span class=\"token punctuation\">;</span>LinkList p<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//j指到i-1位置或者p已经到最后时跳出</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n         p<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n         <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token operator\">||</span>j<span class=\"token operator\">&gt;</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//i&lt;1或者i&gt;ListLength(L)+1时,插入位置无效 不调用ListLength,提高效率</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入位置无效！！！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        s<span class=\"token operator\">=</span>new LNode<span class=\"token punctuation\">;</span>\n        s<span class=\"token operator\">-&gt;</span>data<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n        s<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//前插 </span>\n\tbool <span class=\"token function\">ListInsert_B</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>ElemType e<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tLNode<span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span>LinkList p<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//j指到i-1位置或者p已经到最后时跳出</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n         p<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n         <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token operator\">||</span>j<span class=\"token operator\">&gt;</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//i&lt;1或者i&gt;ListLength(L)+1时,插入位置无效 不调用ListLength,提高效率</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入位置无效！！！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        r<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n        s<span class=\"token operator\">=</span>new LNode<span class=\"token punctuation\">;</span>\n        s<span class=\"token operator\">-&gt;</span>data<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n        s<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>r<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        r<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//删除函数 删除位置i的结点 即删除i-1之后的结点</span>\n    bool <span class=\"token function\">ListDelete</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n         LNode<span class=\"token operator\">*</span> s<span class=\"token punctuation\">;</span>LinkList p<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        LinkList q<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//j指到i-1位置</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n         p<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n         <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span>j<span class=\"token operator\">&gt;</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//i&lt;1或者i&gt;ListLength(L)时,删除位置无效</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除位置无效！！！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        q<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>q<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//释放空间</span>\n        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//查找函数 按值查找 查找第一个等于e的结点 成功返回该结点指针，否则返回NULL</span>\n    LNode <span class=\"token operator\">*</span><span class=\"token function\">LocateElem</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">,</span>ElemType e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        LNode <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>data<span class=\"token operator\">!=</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            p<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//**************************功能实现函数**************************//</span>\n    <span class=\"token comment\">//遍历输出函数</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        LinkList p<span class=\"token operator\">=</span>L<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//跳过头结点</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ListLength</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前单链表所有元素:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                p<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前单链表已空！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//插入功能函数 调用ListInsert插入 </span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Insert_A</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">int</span> place<span class=\"token punctuation\">;</span>ElemType e<span class=\"token punctuation\">;</span>bool flag<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要插入的位置(从1开始)及元素:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>place<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      flag<span class=\"token operator\">=</span><span class=\"token function\">ListInsert_A</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>place<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入成功！！！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//插入功能函数 调用ListInsert插入 </span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Insert_B</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">int</span> place<span class=\"token punctuation\">;</span>ElemType e<span class=\"token punctuation\">;</span>bool flag<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要插入的位置(从1开始)及元素:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>place<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      flag<span class=\"token operator\">=</span><span class=\"token function\">ListInsert_B</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>place<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入成功！！！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//删除功能函数 调用ListDelete删除</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">int</span> place<span class=\"token punctuation\">;</span>bool flag<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要删除的位置(从1开始):\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>place<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      flag<span class=\"token operator\">=</span><span class=\"token function\">ListDelete</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>place<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功！！！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//查找功能函数 调用LocateElem查找</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      ElemType e<span class=\"token punctuation\">;</span>LNode <span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要查找的值:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      q<span class=\"token operator\">=</span><span class=\"token function\">LocateElem</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"找到该元素！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到该元素！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//链表最小值 </span>\n    LinkList <span class=\"token function\">getmin</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//取得从指针L开始的链表中记录的最小值</span>\n    LinkList min<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>min<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>L<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            min<span class=\"token operator\">=</span>L<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        L<span class=\"token operator\">=</span>L<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> min<span class=\"token punctuation\">;</span><span class=\"token comment\">//返回较小值的指针</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//排序 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">selectsort</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">)</span><span class=\"token comment\">//简单选择排序</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    LinkList j<span class=\"token punctuation\">,</span>i<span class=\"token operator\">=</span>L<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">=</span>i<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        j<span class=\"token operator\">=</span><span class=\"token function\">getmin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-&gt;</span>data<span class=\"token operator\">!=</span>j<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            temp<span class=\"token operator\">=</span>i<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">-&gt;</span>data<span class=\"token operator\">=</span>j<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">;</span>\n            j<span class=\"token operator\">-&gt;</span>data<span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//菜单</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"********1.前插    2.删除*********\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"********3.查找    4.输出*********\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"********5.后插    6.排序*********\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"********7.退出\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//主函数</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n     LinkList L<span class=\"token punctuation\">;</span><span class=\"token keyword\">int</span> choice<span class=\"token punctuation\">;</span>\n     <span class=\"token function\">InitList</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{<!-- --></span>\n     \n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入菜单序号：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>choice<span class=\"token operator\">==</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token function\">Insert_A</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span><span class=\"token function\">Insert_B</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span><span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span><span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span><span class=\"token function\">selectsort</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入错误！！！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"操作实现\" src=\"image\\776236bfbd254582a3d435c6d0c176d3.png\"/><br/> 循环链表<br/> 循环链表的尾指针指向头结点</p>\n<h2><a id=\"13_419\"></a>1.3约瑟夫环循环链表实现</h2>\n<pre><code>约瑟夫环问题：有n个人，输入淘汰密码m，报到这个数的人淘汰，再接着从下一个人数接着数，直到最后剩下一个人。\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/*\n有n个人围城一圈，按顺序编号，从第一个人开始报数，从1报到m，凡报到m的人退出圈子，\n然后接着报数，问最后留下来的是原来的第几号的那位？\n\n*/</span>\n\n<span class=\"token comment\">//循环链表实现</span>\n<span class=\"token comment\">//构造一个循环链表，链表节点的数据域存放人的编号，遍历整个链表，每次报到m的人退出，并释放该节点，直到链表只剩一个节点。</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;malloc.h&gt;</span></span>\n \n <span class=\"token comment\">/*构建结构体*/</span>\n <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token keyword\">int</span> Num<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>JoseNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>HNode<span class=\"token punctuation\">;</span>\n \n <span class=\"token comment\">/**********初始化循环单链表*********/</span>\n <span class=\"token keyword\">int</span> <span class=\"token function\">JoseInit</span><span class=\"token punctuation\">(</span>HNode h<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>h<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化链表错误！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//循环单链表</span>\n     <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n \n <span class=\"token punctuation\">}</span>\n \n <span class=\"token comment\">/*************单链表插入操作**********/</span>\n <span class=\"token keyword\">int</span> <span class=\"token function\">JoseInsert</span><span class=\"token punctuation\">(</span>JoseNode <span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>    \n     PNode p<span class=\"token operator\">=</span>h<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">/*尾插法*/</span>\n     <span class=\"token punctuation\">{<!-- --></span>\n         p<span class=\"token operator\">-&gt;</span>Num <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n         p<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>pos<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{<!-- --></span>\n         p<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n         i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     q<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>PNode<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>JoseNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     q<span class=\"token operator\">-&gt;</span>Num<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n     q<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n     p<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>q<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n \n <span class=\"token comment\">/*遍历*/</span>\n <span class=\"token keyword\">void</span> <span class=\"token function\">TraverseList</span><span class=\"token punctuation\">(</span>HNode h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> M<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n     PNode p <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参与的人的编号为：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>M<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-&gt;</span>Num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         p <span class=\"token operator\">=</span> p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n         i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token comment\">/**************出局函数****************/</span>\n \n <span class=\"token keyword\">int</span> <span class=\"token function\">JoseDelete</span><span class=\"token punctuation\">(</span>HNode h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> M<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n     PNode p<span class=\"token operator\">=</span>h<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>M<span class=\"token operator\">&gt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">{<!-- --></span>\n             p<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n         \n         q<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n         p<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>q<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出局的人为：%d号\\n\"</span><span class=\"token punctuation\">,</span>q<span class=\"token operator\">-&gt;</span>Num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n         p<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n         M<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"***************获胜者为：%d号***************\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-&gt;</span>Num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n \n \n <span class=\"token comment\">/***************************************/</span>\n <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">//计数器</span>\n     <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">;</span><span class=\"token comment\">//参与的人数</span>\n     <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span><span class=\"token comment\">//报数密码</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入参与人数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入出局密码：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n <span class=\"token comment\">/**************得到头结点****************/</span>\n     HNode h <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HNode<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>JoseNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n <span class=\"token comment\">/***************初始化单链表************/</span>\n     <span class=\"token function\">JoseInit</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n <span class=\"token comment\">/******将编号插入到循环单链表中******/</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token function\">JoseInsert</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token comment\">/**************遍历单链表***************/</span>\n     <span class=\"token function\">TraverseList</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n <span class=\"token comment\">/***************出局函数************/</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n     <span class=\"token function\">JoseDelete</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span>\n     <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n             <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出局的人为：%d号\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"***************获胜者为：%d号***************\"</span><span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n \n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1><a id=\"2_559\"></a>2.栈和队列</h1>\n<h2><a id=\"21_563\"></a>2.1顺序栈的基本操作</h2>\n<pre><code>顺序栈的操作包括初始化、判空、出栈、入栈、取栈顶元素\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXSIZE</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> SELemType<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// SELemType类型根据实际情况而定，这里假设为int</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    SELemType data<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> top<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>SeqStack<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 栈初始化</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Init_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    \n    s<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 判栈为空</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Empty_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 入栈</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Push_Stack</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> SELemType e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> MAXSIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stack is full!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        s<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>s<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 出栈</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Pop_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span> SELemType<span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈为空!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> s<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>s<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 取栈顶元素</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Top_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span> SELemType<span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈为空!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> s<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>s<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出栈成功！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 输出</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Output_SeqStack</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    SeqStack<span class=\"token operator\">*</span> w<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈中的元素有：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> s<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span>SeqStack<span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\ts<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已销毁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.初始化\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2.判断栈为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3.入栈\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4.出栈\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5.得到栈顶元素\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6.销毁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0.程序结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 主函数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    SeqStack S<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> choice <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n    SELemType e<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>choice <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nYour choice is:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">Init_SeqStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化完成！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">Empty_SeqStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈为空!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈不为空！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入入栈的数量：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入需要入栈的数据,用空格隔开：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">Push_Stack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">Output_SeqStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">Pop_SeqStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">Output_SeqStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">Top_SeqStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈顶元素为：%d\\n\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">Output_SeqStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n            choice <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"选择有误，请重新选择 \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t  By Cherish599\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"栈基本操作\" src=\"image\\7b81971fef9c4e44bc6238a084a15663.png\"/></p>\n<h2><a id=\"22_719\"></a>2.2迷宫的栈实现</h2>\n<p>给一个二维列表，表示迷宫（0表示通道，1表示围墙）。给出算法，求一条走出迷宫的路径。</p>\n<pre><code class=\"prism language-c\">include <span class=\"token operator\">&lt;</span>iostream<span class=\"token operator\">&gt;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//定义一个迷宫，0为可通的路，</span>\n<span class=\"token comment\">//1表示不可前进的路，并且给迷宫加上了边框，所以在周围会有一圈1</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> N <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxSize <span class=\"token operator\">=</span> <span class=\"token number\">1e4</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> mg<span class=\"token punctuation\">[</span>M <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//定义一个结构体，该结构体表示迷宫每个元素的坐标以及方位数。</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> di<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//定义一个迷宫栈，下面包括迷宫栈的一系列的函数</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">SNode</span> <span class=\"token punctuation\">{<!-- --></span>\n\tBox Data<span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> top<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> SNode<span class=\"token operator\">*</span> Stack<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">&amp;</span> S<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tS <span class=\"token operator\">=</span> new SNode<span class=\"token punctuation\">;</span>\n\tS<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">&amp;</span> S<span class=\"token punctuation\">,</span> Box e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>S<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> maxSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\tS<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\tS<span class=\"token operator\">-&gt;</span>Data<span class=\"token punctuation\">[</span>S<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">&amp;</span> S<span class=\"token punctuation\">,</span> Box<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>S<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\te <span class=\"token operator\">=</span> S<span class=\"token operator\">-&gt;</span>Data<span class=\"token punctuation\">[</span>S<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tS<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">GetTop</span><span class=\"token punctuation\">(</span>Stack S<span class=\"token punctuation\">,</span> Box<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>S<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\te <span class=\"token operator\">=</span> S<span class=\"token operator\">-&gt;</span>Data<span class=\"token punctuation\">[</span>S<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">Empty</span><span class=\"token punctuation\">(</span>Stack S<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>S<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">&amp;</span> S<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//该算法即为迷宫的算法</span>\nbool <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> xi<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> yi<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> xe<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ye<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tBox e<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> di<span class=\"token punctuation\">,</span> i1<span class=\"token punctuation\">,</span> j1<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span>\n\tStack S<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Init</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbool find<span class=\"token punctuation\">;</span>\n\n\te<span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> xi<span class=\"token punctuation\">;</span> e<span class=\"token punctuation\">.</span>j <span class=\"token operator\">=</span> yi<span class=\"token punctuation\">;</span> e<span class=\"token punctuation\">.</span>di <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmg<span class=\"token punctuation\">[</span>xi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>yi<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Empty</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">GetTop</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ti <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">;</span> di <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>di<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> xe <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">==</span> ye<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"恭喜你找到了一条迷宫的路径！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\tk <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Empty</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tpath<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&gt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tk<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'('</span> <span class=\"token operator\">&lt;&lt;</span> path<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">','</span> <span class=\"token operator\">&lt;&lt;</span> path<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>j <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">')'</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\t\"</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\tfind <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>di <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>find<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tdi<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>di<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n\t\t\t\ti1 <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j1 <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n\t\t\t\ti1 <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j1 <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n\t\t\t\ti1 <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j1 <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n\t\t\t\ti1 <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j1 <span class=\"token operator\">=</span> j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mg<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j1<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\tfind <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tS<span class=\"token operator\">-&gt;</span>Data<span class=\"token punctuation\">[</span>S<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>di <span class=\"token operator\">=</span> di<span class=\"token punctuation\">;</span>\n\t\t\tmg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\te<span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> i1<span class=\"token punctuation\">;</span> e<span class=\"token punctuation\">.</span>j <span class=\"token operator\">=</span> j1<span class=\"token punctuation\">;</span> e<span class=\"token punctuation\">.</span>di <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f66f25cff289470f87431875a5969de3.png\"/></p>\n<h2><a id=\"23_885\"></a>2.3队列顺序表实现</h2>\n<pre><code>基本操作包括初始化、入队、出队、求队长\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXSIZE</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sequence</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> quence<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> front<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//队头 </span>\n\t<span class=\"token keyword\">int</span> rear<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//队尾 </span>\n<span class=\"token punctuation\">}</span>Sequence<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span>Sequence <span class=\"token operator\">*</span>S<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tS<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">=</span>S<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Length</span><span class=\"token punctuation\">(</span>Sequence S<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span>rear<span class=\"token operator\">-</span>S<span class=\"token punctuation\">.</span>front<span class=\"token operator\">+</span>MAXSIZE<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>MAXSIZE<span class=\"token punctuation\">;</span>      \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">In</span><span class=\"token punctuation\">(</span>Sequence <span class=\"token operator\">*</span>S<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S<span class=\"token operator\">-&gt;</span>rear<span class=\"token operator\">&gt;=</span>MAXSIZE<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"队满\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tS<span class=\"token operator\">-&gt;</span>quence<span class=\"token punctuation\">[</span>S<span class=\"token operator\">-&gt;</span>rear<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n\tS<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>S<span class=\"token operator\">-&gt;</span>rear<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>MAXSIZE<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//这行代码就是防止溢出，向后遍历</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Out</span><span class=\"token punctuation\">(</span>Sequence <span class=\"token operator\">*</span>S<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">==</span>S<span class=\"token operator\">-&gt;</span>rear<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n%d\\n\"</span><span class=\"token punctuation\">,</span>S<span class=\"token operator\">-&gt;</span>quence<span class=\"token punctuation\">[</span>S<span class=\"token operator\">-&gt;</span>front<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tS<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>S<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>MAXSIZE<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>Sequence S<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\ti<span class=\"token operator\">=</span>S<span class=\"token punctuation\">.</span>front<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>S<span class=\"token punctuation\">.</span>rear<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span>S<span class=\"token punctuation\">.</span>quence<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ti <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>MAXSIZE<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSequence s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1，初始化\\n2，入队创建\\n3，入队\\n4，出队\\n5，打印\\n6，队-长\\n0，退出\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入操作:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化完成\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"length:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输出整形数据:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">In</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> \n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建完成！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入入队数据：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">In</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"入队完成！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出队\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">Out</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"完成！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印完成！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"队-长：%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">Length</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"————输入操作:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<h2><a id=\"24_991\"></a>2.4队列链表实现</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h&gt;</span></span>\n<span class=\"token comment\">// 队列的节点 </span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span>\n<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 队首队尾指针 </span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Queue</span>\n<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> front<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> rear<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//初始化 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">QueueInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Queue</span><span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n        queue<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n <span class=\"token comment\">//判断是否为空 </span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">QueueEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Queue</span><span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>queue<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n <span class=\"token comment\">//入队 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">QueuePush</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Queue</span><span class=\"token operator\">*</span> queue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> node<span class=\"token punctuation\">;</span>\n        node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        node<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">QueueEmpty</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//若为空</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            queue<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n            queue<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span><span class=\"token comment\">//若不为空 </span>\n        <span class=\"token punctuation\">{<!-- --></span>            \n            queue<span class=\"token operator\">-&gt;</span>rear<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n            queue<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">++</span>queue<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//长度 </span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Queuelen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Queue</span><span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> queue<span class=\"token operator\">-&gt;</span>front<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tsum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>tmp<span class=\"token operator\">=</span>tmp<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//遍历 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Queuetrav</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Queue</span><span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> queue<span class=\"token operator\">-&gt;</span>front<span class=\"token punctuation\">;</span>\n \t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n \t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" %d\"</span><span class=\"token punctuation\">,</span>tmp<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \t\ttmp<span class=\"token operator\">=</span> tmp<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n \t\t<span class=\"token punctuation\">}</span>\n \t<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//头元素 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">QueueH</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Queue</span><span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>queue<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n <span class=\"token comment\">//出队 </span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">QueuePop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Queue</span><span class=\"token operator\">*</span> queue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">QueueEmpty</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> queue<span class=\"token operator\">-&gt;</span>front<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> queue<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">;</span>\n        queue<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">=</span> queue<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">--</span>queue<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n <span class=\"token comment\">//销毁 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">QueueDestroy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Queue</span><span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> tmp<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>queue<span class=\"token operator\">-&gt;</span>front<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{<!-- --></span>\n         tmp <span class=\"token operator\">=</span> queue<span class=\"token operator\">-&gt;</span>front<span class=\"token punctuation\">;</span>\n         queue<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">=</span> queue<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n         <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Queue</span> queue<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">QueueInit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入入队的数量：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入需要入队的数据,用空格隔开：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">QueuePush</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>queue<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token function\">Queuetrav</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"长度\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        m<span class=\"token operator\">=</span><span class=\"token function\">Queuelen</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"头元素\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">QueueH</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出队\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">QueueEmpty</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">QueuePop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>queue<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n \n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"25_1128\"></a>2.5迷宫求解队列实现</h2>\n<p>给一个二维列表，表示迷宫（0表示通道，1表示围墙）。给出算法，求一条走出迷宫的路径。</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MaxSize</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">M</span> <span class=\"token expression\"><span class=\"token number\">8</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">8</span></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">{<!-- --></span>   <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//方块在迷宫中的坐标位置(i,j)         </span>\n    <span class=\"token keyword\">int</span> pre<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//本路径中上一方块在队列中的下标   </span>\n<span class=\"token punctuation\">}</span> SqQueue<span class=\"token punctuation\">;</span> \nSqQueue Qu<span class=\"token punctuation\">[</span>MaxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//定义顺序非循环队列</span>\n<span class=\"token keyword\">int</span> front<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>rear<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">int</span> mg<span class=\"token punctuation\">[</span>M<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>SqQueue Qu<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> front<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>   <span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>front<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">=</span>Qu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pre<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(%d,%d) \"</span><span class=\"token punctuation\">,</span>Qu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">,</span>Qu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//每输出每5个方块后换一行</span>\n           <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nbool <span class=\"token function\">mgpath1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> xi<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> yi<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> xe<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> ye<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//搜索路径为:(xi,yi)-&gt;(xe,ye)</span>\n<span class=\"token punctuation\">{<!-- --></span>   <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> di<span class=\"token punctuation\">,</span> i1<span class=\"token punctuation\">,</span> j1<span class=\"token punctuation\">;</span>\n    rear<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    Qu<span class=\"token punctuation\">[</span>rear<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>i<span class=\"token operator\">=</span>xi<span class=\"token punctuation\">;</span> Qu<span class=\"token punctuation\">[</span>rear<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>j<span class=\"token operator\">=</span>yi<span class=\"token punctuation\">;</span> Qu<span class=\"token punctuation\">[</span>rear<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pre<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//(xi,yi)进队</span>\n    mg<span class=\"token punctuation\">[</span>xi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>yi<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t\t        <span class=\"token comment\">//将其赋值-1,以避免回过来重复搜索</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>front<span class=\"token operator\">!=</span>rear<span class=\"token punctuation\">)</span>\t\t    <span class=\"token comment\">//队不空循环</span>\n    <span class=\"token punctuation\">{<!-- --></span>   front<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">=</span>Qu<span class=\"token punctuation\">[</span>front<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">=</span>Qu<span class=\"token punctuation\">[</span>front<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">;</span> <span class=\"token comment\">//出队</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>xe <span class=\"token operator\">&amp;&amp;</span> j<span class=\"token operator\">==</span>ye<span class=\"token punctuation\">)</span>\t    <span class=\"token comment\">//找到了出口,输出路径</span>\n        <span class=\"token punctuation\">{<!-- --></span>   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>Qu<span class=\"token punctuation\">,</span> front<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//调用print函数输出路径</span>\n            <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//找到一条路径时返回真</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>di<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>di<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>di<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//循环扫描每个方位</span>\n        <span class=\"token punctuation\">{<!-- --></span>\t\n          <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>di<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>i1<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   j1<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>i1<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>  j1<span class=\"token operator\">=</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>i1<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  j1<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>i1<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>   j1<span class=\"token operator\">=</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mg<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j1<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">{<!-- --></span>   rear<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n              Qu<span class=\"token punctuation\">[</span>rear<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>i<span class=\"token operator\">=</span>i1<span class=\"token punctuation\">;</span> Qu<span class=\"token punctuation\">[</span>rear<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>j<span class=\"token operator\">=</span>j1<span class=\"token punctuation\">;</span> \n              Qu<span class=\"token punctuation\">[</span>rear<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pre<span class=\"token operator\">=</span>front<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//(i1，j1)方块进队</span>\n              mg<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j1<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//将其赋值-1</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token comment\">//for</span>\n    <span class=\"token punctuation\">}</span><span class=\"token comment\">//while</span>\n    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token comment\">//mgpath1</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">mgpath1</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该迷宫问题没有解!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"3_1206\"></a>3.字符串和数组</h1>\n<h2><a id=\"31BFKMP_1207\"></a>3.1BF与KMP代码</h2>\n<p>字符串的模式匹配：在主串S中查找与模式T相匹配的子串，如果匹配成功，确定相匹配的子串的第一个字符在主串中出现的位置<br/> 著名的模式匹配算法有BF算法、KMP算法。</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n\n<span class=\"token comment\">//串结构体</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stirngs</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> string<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>SString<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">//next数组</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">get_next</span><span class=\"token punctuation\">(</span>SString T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//下标从0开始 </span>\n\tnext<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> T<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> T<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> T<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\tj <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span>\n <span class=\"token comment\">//KMP算法</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">Index_KMP</span><span class=\"token punctuation\">(</span>SString S<span class=\"token punctuation\">,</span>SString T<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> S<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>       <span class=\"token comment\">//合法长度之内</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>S<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>T<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>sum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>sum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>                  <span class=\"token comment\">//利用Next数组进行移动</span>\n\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span>T<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//BF算法 </span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Index_BF</span><span class=\"token punctuation\">(</span>SString S<span class=\"token punctuation\">,</span>SString T<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>pos<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> S<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>       <span class=\"token comment\">//合法长度之内</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>\tS<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>T<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span>sum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>i<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>sum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> \n\t\t\t<span class=\"token punctuation\">}</span>                   \n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span>T<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">/*主函数*/</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>choice<span class=\"token punctuation\">;</span>\n\t\tSString S<span class=\"token punctuation\">,</span>T <span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please Input S string: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please Input T string: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tS<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入菜单序号：1:KMP  2：BF\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span>\n      \t<span class=\"token punctuation\">{<!-- --></span>\n      \t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token function\">get_next</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"KMP 算法的子串比较次数为%d\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">Index_KMP</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">,</span>T<span class=\"token punctuation\">,</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      \t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BF 算法的子串比较次数为%d\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">Index_BF</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">,</span>T<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      \t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入错误！！！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"32_KMP_1295\"></a>3.2 经典KMP算法判断</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n\n<span class=\"token comment\">/*串结构体*/</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stirngs</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> string<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>SString<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">/*next数组*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">get_next</span><span class=\"token punctuation\">(</span>SString T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//下标从0开始 </span>\n\tnext<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> T<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> T<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> T<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\tj <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\n<span class=\"token punctuation\">}</span>\n <span class=\"token comment\">/*KMP算法*/</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">Index_KMP</span><span class=\"token punctuation\">(</span>SString S<span class=\"token punctuation\">,</span>SString T<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> S<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>       <span class=\"token comment\">//合法长度之内</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>S<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>T<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\tj <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">//利用Next数组进行移动</span>\n\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span>T<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> i <span class=\"token operator\">-</span> T<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/*主函数*/</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n\t\tSString S <span class=\"token punctuation\">;</span>\n\t\tSString T <span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please Input S string: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please Input T string: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tS<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">get_next</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Index_KMP</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在主串位置：%d\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">Index_KMP</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<h2><a id=\"33__1375\"></a>3.3 字符串匹配</h2>\n<p>给定两个字符串string1和string2，判断string2是否为string1的子串。</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n\n<span class=\"token comment\">/*串结构体*/</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stirngs</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> string<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>SString<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">/*next数组*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">get_next</span><span class=\"token punctuation\">(</span>SString T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//下标从0开始 </span>\n\tnext<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> T<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> T<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> T<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\tj <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\n<span class=\"token punctuation\">}</span>\n <span class=\"token comment\">/*KMP算法*/</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">Index_KMP</span><span class=\"token punctuation\">(</span>SString S<span class=\"token punctuation\">,</span>SString T<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> S<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>       <span class=\"token comment\">//合法长度之内</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>S<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>T<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\tj <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">//利用Next数组进行移动</span>\n\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span>T<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> i <span class=\"token operator\">-</span> T<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/*主函数*/</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n\t\tSString S <span class=\"token punctuation\">;</span>\n\t\tSString T <span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please Input S string: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please Input T string: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tS<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">get_next</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Index_KMP</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YES\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"3412_1456\"></a>3.4字符串1匹配2</h2>\n<p>有n个同学，每个同学手里有一些糖块，现在这些同学排成一排，编号是由1到n。现在给出m个数，能不能唯一的确定一对值l和r(l &lt;= r)，使得这m个数刚好是第l个同学到第r个同学手里的糖块数？<br/> 首先输入一个整数n，代表有n个同学。下一行输入n个数，分别代表每个同学手里糖的数量。<br/> 之后再输入一个整数m，代表下面有m个数。下一行输入这m个数。如果能唯一的确定一对l,r的值，那么输出这两个值，否则输出-1<br/> <img alt=\"样例\" src=\"image\\2cda198385634e48b2280dd9dd9e4ab4.png\"/></p>\n<pre><code class=\"prism language-c\">include<span class=\"token operator\">&lt;</span>bits<span class=\"token operator\">/</span>stdc<span class=\"token operator\">++</span><span class=\"token punctuation\">.</span>h<span class=\"token operator\">&gt;</span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//i&lt;len</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n            next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n            j<span class=\"token operator\">=</span>next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">index_kmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">get_next</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> len1<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> flag<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//标记第一取得配对的串的下标</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>c<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n            j<span class=\"token operator\">=</span>next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&gt;=</span>len1<span class=\"token punctuation\">)</span>       <span class=\"token comment\">//统计子串在母串中的个数，可重叠 ababa  aba 2</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            ans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            j<span class=\"token operator\">=</span>next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//j=0 ;    //统计子串在母串中的个数，不重叠ababa aba 1</span>\n\t\t\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">//记录第一次配对成功的下标值,否则i会持续变大到最后</span>\n\t\t\t\tflag<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ans<span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">else</span>\n\t<span class=\"token keyword\">return</span> flag<span class=\"token operator\">-</span>len1<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">10000000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">10000000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> s1<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\ts<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>c<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//printf(\"%s*%s*\",s,c);</span>\n\t<span class=\"token keyword\">int</span> flag<span class=\"token operator\">=</span><span class=\"token function\">index_kmp</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Getkmp(s,s1,n,m);</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\\n\"</span><span class=\"token punctuation\">,</span>flag<span class=\"token punctuation\">,</span>flag<span class=\"token operator\">+</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>数组</p>\n<h2><a id=\"351_1546\"></a>3.5蛇形填数1</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a3fdfc83fecb4e22864aa43c9f309e5a.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MAX<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将整个数组初始化为零</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>count<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&gt;</span>MAX<span class=\"token punctuation\">)</span><span class=\"token comment\">//如果输入的数组大于初始化的数组，程序结束</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tj<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">&lt;=</span>n<span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token comment\">//这点需要注意 必须是小于等于 </span>\n\t<span class=\"token punctuation\">{<!-- --></span>                <span class=\"token comment\">//如果输入的数是偶数的话小于就够了 但当输入的数是奇数就需要等于才行</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//!a[i][j]这也是必须加的 先从最右边填</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tj<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&gt;</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\ti<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tj<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3d\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"362_1597\"></a>3.6蛇形填数2</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c791b3f9c8f34089832e13612f15d90e.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">1100</span></span></span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>tot<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttot<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tot<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span>n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">++</span>tot<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span>n <span class=\"token operator\">&amp;&amp;</span> y<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&gt;=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>a<span class=\"token punctuation\">[</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">++</span>tot<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&gt;=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>a<span class=\"token punctuation\">[</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">++</span>tot<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>x<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>y<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%4d \"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\t\t\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"373_1630\"></a>3.7蛇形填数3</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9a1ce440dc514d109f221edab5e41a14.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">&lt;=</span>n<span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>m<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&gt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                \n                 a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                 \n            <span class=\"token punctuation\">}</span>\n            m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        m<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&gt;=</span>m<span class=\"token punctuation\">,</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n               a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n           m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d  \"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"38__1669\"></a>3.8 递归与非递归</h2>\n<p>斐波那契数列和n的阶乘</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span> </span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//斐波那契递归函数(大数) </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fibD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> d<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//初始化 </span>\n\t\ta<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//第一个和第二个数要先保存下来 </span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//从第三个数开始都是等于前两个数的和 </span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tc<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//保存余数 </span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>d<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t    \ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>c<span class=\"token punctuation\">;</span><span class=\"token comment\">//计算结果 </span>\n\t\t\t\tc<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将其他的数进位 </span>\n\t\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将大于10的数要余数 </span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//最后一位要是大于10，需要进位，并且最高位也需要加1！ </span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>d<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>c<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">/=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>d<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&gt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//斐波那契非递归 </span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">Fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> f1<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>f2<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>f3<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>n<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tf3<span class=\"token operator\">=</span>f2<span class=\"token operator\">+</span>f1<span class=\"token punctuation\">;</span>f1<span class=\"token operator\">=</span>f2<span class=\"token punctuation\">;</span>f2<span class=\"token operator\">=</span>f3<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> f3<span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//阶乘递归函数 </span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">Fact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> n<span class=\"token operator\">*</span><span class=\"token function\">Fact</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//阶乘非递归函数 </span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tm<span class=\"token operator\">*=</span>i<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>choice<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1. 递归求斐波那契\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2. 非递归求斐波那契\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3. 递归求阶乘\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4. 非递归求阶乘\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5. 退出\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请选择(1-5):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入要计算的数字:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token function\">fibD</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">Fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">fact</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">Fact</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"39_1748\"></a>3.9回文数判断</h2>\n<p>输入一个数据，如果是回文数则输出“是回文数”</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_DEPRECATE</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Palindrome</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> arr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>arr2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlen <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmid <span class=\"token operator\">=</span> len <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\ttop <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//前半部分倒序存 </span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tarr2<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n \n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tnext <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tnext <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> arr2<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\ttop<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n \n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s是回文数！\\n\"</span><span class=\"token punctuation\">,</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s不是回文数\\n\"</span><span class=\"token punctuation\">,</span> arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> arr1<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Palindrome</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"310_1807\"></a>3.10任意进制转换</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span>  <span class=\"token function\">toTen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bit<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//转为十进制（多项式求和 ）sum=a[i]*该位位权 求和,i从len-1到0</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&gt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;=</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">{<!-- --></span>\n            sum <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token string\">'A'</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n            b <span class=\"token operator\">*=</span> bit<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>           \n        <span class=\"token punctuation\">{<!-- --></span>\n            sum <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n            b <span class=\"token operator\">*=</span> bit<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">tentoN</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> tenn<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//十进制转换成其他进制（取余法，余数倒排即为结果） </span>\n    <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> shang<span class=\"token operator\">=</span>tenn<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>shang<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        r<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>shang<span class=\"token operator\">%</span>m<span class=\"token punctuation\">;</span>\n        shang<span class=\"token operator\">=</span>shang<span class=\"token operator\">/</span>m<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&gt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">+</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> renyi<span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> tenn<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入原进制、要转换的数、转换后的进制：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %s %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tenn<span class=\"token operator\">=</span><span class=\"token function\">toTen</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">tentoN</span><span class=\"token punctuation\">(</span>tenn<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"4_1868\"></a>4.树和二叉树</h1>\n<h2><a id=\"41_1870\"></a>4.1二叉树递归遍历</h2>\n<p>用递归实现二叉树的先序、 中序、 后序 3 种遍历。<br/> 测试输入样例 FCA##DB###EH##GM###</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTNode</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTNode</span> <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>BiTNode<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>BiTree<span class=\"token punctuation\">;</span>\nBiTree <span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tBiTree T<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token operator\">==</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tT<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t\n\t\tT<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BiTNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token operator\">-&gt;</span>data<span class=\"token operator\">=</span>c<span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token operator\">-&gt;</span>lchild<span class=\"token operator\">=</span><span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token operator\">-&gt;</span>rchild<span class=\"token operator\">=</span><span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\\n\"</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PreOrderTrverse</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">PreOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">PreOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InOrderTrverse</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\n\t\t<span class=\"token function\">InOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">InOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//后序遍历 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PostOrderTrverse</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\n\t\t<span class=\"token function\">PostOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">PostOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//树的深度 </span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Depth</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tm<span class=\"token operator\">=</span><span class=\"token function\">Depth</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tn<span class=\"token operator\">=</span><span class=\"token function\">Depth</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">&gt;</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tBiTree T<span class=\"token punctuation\">;</span>\n\tT<span class=\"token operator\">=</span><span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"先序遍历\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PreOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中序遍历\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">InOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后序遍历\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PostOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">Depth</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//FCA##DB###EH##GM###</span>\n\n</code></pre>\n<h2><a id=\"42_1952\"></a>4.2二叉树非递归遍历</h2>\n<p>测试输入样例 FCA##DB###EH##GM###</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span> </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXSIZE</span> <span class=\"token expression\"><span class=\"token number\">200</span></span></span>\n \n<span class=\"token comment\">/* 定义二叉树节点类型 */</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTNode</span> <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>BiTNode<span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">/* 函数声明 */</span>\nBiTNode<span class=\"token operator\">*</span> <span class=\"token function\">CreatBitTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PreOrder</span><span class=\"token punctuation\">(</span>BiTNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InOrder</span><span class=\"token punctuation\">(</span>BiTNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PostOrder</span><span class=\"token punctuation\">(</span>BiTNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">/* 主函数 */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    BiTNode <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    root <span class=\"token operator\">=</span> <span class=\"token function\">CreatBitTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"先序\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">PreOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中序\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">InOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后序\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">PostOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">/* 递归前序建立二叉树 */</span>\nBiTNode<span class=\"token operator\">*</span> <span class=\"token function\">CreatBitTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    BiTNode <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* 遇到空节点停止递归 */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        b <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>BiTNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BiTNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* 建立根节点 */</span>\n        b<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* 递归先序建立左子树 */</span>\n        b<span class=\"token operator\">-&gt;</span>lchild <span class=\"token operator\">=</span> <span class=\"token function\">CreatBitTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* 递归先序建立右子树 */</span>\n        b<span class=\"token operator\">-&gt;</span>rchild <span class=\"token operator\">=</span> <span class=\"token function\">CreatBitTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">/* 非递归前序遍历二叉树 */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PreOrder</span><span class=\"token punctuation\">(</span>BiTNode<span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    BiTNode <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> top <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/* 根节点入栈 */</span>\n        top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        stack<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* 栈不空时循环 */</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/* 出栈并访问该节点 */</span>\n            p <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c \"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 右孩子入栈 */</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>rchild <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                stack<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">/* 左孩子入栈 */</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>lchild <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                stack<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">/* 非递归中序遍历二叉树 */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InOrder</span><span class=\"token punctuation\">(</span>BiTNode<span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    BiTNode <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> top <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        p <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/* 扫描p的所有左节点并入栈 */</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                stack<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n                p <span class=\"token operator\">=</span> p<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">/* 出栈并访问该节点 */</span>\n                p <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c \"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">/* 扫描p的右孩子 */</span>\n                p <span class=\"token operator\">=</span> p<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">/* 非递归后序遍历二叉树 */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PostOrder</span><span class=\"token punctuation\">(</span>BiTNode<span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    BiTNode <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sign<span class=\"token punctuation\">,</span> top <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">do</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/* b所有左节点入栈 */</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                stack<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n                b <span class=\"token operator\">=</span> b<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">/* p指向栈顶前一个已访问节点 */</span>\n            p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 置b为已访问 */</span>\n            sign <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> sign<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">/* 取出栈顶节点 */</span>\n                b <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">/* 右孩子不存在或右孩子已访问则访问b */</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">-&gt;</span>rchild <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c \"</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">/* p指向被访问的节点 */</span>\n                    p <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">/* b指向右孩子节点 */</span>\n                    b <span class=\"token operator\">=</span> b<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">/* 置未访问标记 */</span>\n                    sign <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//FCA##DB###EH##GM###</span>\n\n\n</code></pre>\n<h2><a id=\"43_2129\"></a>4.3二叉树层次遍历</h2>\n<p>层次遍历：从上到下、从左到右</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n \n<span class=\"token comment\">//二叉链表类型定义</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BTNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">char</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BTNode</span> <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>BiTree<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>Bitree<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">//链队列类型定义</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkQueueNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\nBiTree <span class=\"token operator\">*</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkQueueNode</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>LKQueNode<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LKQueue</span>\n<span class=\"token punctuation\">{<!-- --></span>\nLKQueNode <span class=\"token operator\">*</span>front<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>rear<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>LKQue<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">//初始化队列</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InitQueue</span><span class=\"token punctuation\">(</span>LKQue <span class=\"token operator\">*</span>LQ<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\nLKQueNode <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LKQueNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LKQueNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLQ<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\nLQ<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\nLQ<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//判断队列是否为空</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">EmptyQueue</span><span class=\"token punctuation\">(</span>LKQue <span class=\"token operator\">*</span>LQ<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>LQ<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">==</span> LQ<span class=\"token operator\">-&gt;</span>rear<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> \n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//入队列</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span>LKQue <span class=\"token operator\">*</span>LQ<span class=\"token punctuation\">,</span>Bitree x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\nLKQueNode <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LKQueNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LKQueNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\np<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\nLQ<span class=\"token operator\">-&gt;</span>rear<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\nLQ<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//出队列</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">OutQueue</span><span class=\"token punctuation\">(</span>LKQue <span class=\"token operator\">*</span>LQ<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\nLKQueNode <span class=\"token operator\">*</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">EmptyQueue</span><span class=\"token punctuation\">(</span>LQ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token punctuation\">{<!-- --></span>\ns <span class=\"token operator\">=</span> LQ<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\nLQ<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> s<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\nLQ<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> LQ<span class=\"token operator\">-&gt;</span>front<span class=\"token punctuation\">;</span>\n<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//取队列首元素</span>\nBitree <span class=\"token function\">GetHead</span><span class=\"token punctuation\">(</span>LKQue <span class=\"token operator\">*</span>LQ<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\nLKQueNode <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\nBiTree <span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">EmptyQueue</span><span class=\"token punctuation\">(</span>LQ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> q<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> \n<span class=\"token punctuation\">{<!-- --></span>\np <span class=\"token operator\">=</span> LQ<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> p<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n\n\n<span class=\"token comment\">//建二叉树</span>\nBitree <span class=\"token function\">Initiate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\nBitree t<span class=\"token punctuation\">;</span>\nch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span> \nt <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">else</span>\n   <span class=\"token punctuation\">{<!-- --></span>\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Bitree<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nt<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\nt<span class=\"token operator\">-&gt;</span>lchild <span class=\"token operator\">=</span> <span class=\"token function\">Initiate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nt<span class=\"token operator\">-&gt;</span>rchild <span class=\"token operator\">=</span> <span class=\"token function\">Initiate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//访问节点</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>Bitree p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出是char</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//树的高度</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>Bitree t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">int</span> ld<span class=\"token punctuation\">,</span>rd<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> \n<span class=\"token punctuation\">{<!-- --></span>\nld <span class=\"token operator\">=</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrd <span class=\"token operator\">=</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ld<span class=\"token operator\">&gt;</span>rd<span class=\"token operator\">?</span>ld<span class=\"token operator\">:</span>rd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">//层次遍历 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">LevelOrder</span><span class=\"token punctuation\">(</span>Bitree bt<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\nLKQue Q<span class=\"token punctuation\">;</span>\nBitree p<span class=\"token punctuation\">;</span>\n<span class=\"token function\">InitQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bt <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">,</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">EmptyQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\np <span class=\"token operator\">=</span> <span class=\"token function\">GetHead</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">OutQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>lchild <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>  \n<span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>rchild <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>  \n<span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\nBitree T<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//printf(\"\\n按先序序列输入结点序列，'#'代表空:\");</span>\nT<span class=\"token operator\">=</span><span class=\"token function\">Initiate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">//printf(\"\\n二叉树的高度为:%d\\n\",height(T));</span>\n\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n层次遍历序列为:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">LevelOrder</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"44_2311\"></a>4.4交换左右子树</h2>\n<p>把二叉树的所有左右子树进行交换</p>\n<pre><code class=\"prism language-c\">include<span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">&gt;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTNode</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTNode</span> <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>BiTNode<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>BiTree<span class=\"token punctuation\">;</span>\nBiTree <span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tBiTree T<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token operator\">==</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tT<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t\n\t\tT<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BiTNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token operator\">-&gt;</span>data<span class=\"token operator\">=</span>c<span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token operator\">-&gt;</span>lchild<span class=\"token operator\">=</span><span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token operator\">-&gt;</span>rchild<span class=\"token operator\">=</span><span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\\n\"</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//交换左右二叉树；先序 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Exchange</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>lchild<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token operator\">&amp;&amp;</span>T<span class=\"token operator\">-&gt;</span>rchild<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>    \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\n\t\tBiTree temp<span class=\"token operator\">=</span>T<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token operator\">-&gt;</span>lchild<span class=\"token operator\">=</span>T<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token operator\">-&gt;</span>rchild<span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">)</span> \t  \t\t\n\t\t\t<span class=\"token function\">Exchange</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">Exchange</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PreOrderTrverse</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">PreOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">PreOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tBiTree T<span class=\"token punctuation\">;</span>\n\tT<span class=\"token operator\">=</span><span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Exchange</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"先序遍历\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PreOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"45_2377\"></a>4.5二叉树深度</h2>\n<p>树的深度：结点的最大层次，也称为树的高度。</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTNode</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTNode</span> <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>BiTNode<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>BiTree<span class=\"token punctuation\">;</span>\nBiTree <span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tBiTree T<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token operator\">==</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tT<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t\n\t\tT<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BiTNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token operator\">-&gt;</span>data<span class=\"token operator\">=</span>c<span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token operator\">-&gt;</span>lchild<span class=\"token operator\">=</span><span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tT<span class=\"token operator\">-&gt;</span>rchild<span class=\"token operator\">=</span><span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\\n\"</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PreOrderTrverse</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">PreOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">PreOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InOrderTrverse</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\n\t\t<span class=\"token function\">InOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">InOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//后序 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PostOrderTrverse</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\n\t\t<span class=\"token function\">PostOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">PostOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//树的深度 </span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Depth</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tm<span class=\"token operator\">=</span><span class=\"token function\">Depth</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tn<span class=\"token operator\">=</span><span class=\"token function\">Depth</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">&gt;</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tBiTree T<span class=\"token punctuation\">;</span>\n\tT<span class=\"token operator\">=</span><span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"先序遍历\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PreOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中序遍历\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">InOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后序遍历\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PostOrderTrverse</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">Depth</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//FCA##DB###EH##GM###</span>\n\n</code></pre>\n<h2><a id=\"46_2458\"></a>4.6线索二叉树</h2>\n<p>若结点有左孩子，则lchild之事其左孩子，否则lchild指向其前驱；若结点有右孩子，则rchild之事其左孩子，否则rchild指向其后继。<br/> 测试样例 FCA##DB###EH##GM###</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n \n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> dataType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tdataType data<span class=\"token punctuation\">;</span> <span class=\"token comment\">//根节点的值 </span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">;</span> <span class=\"token comment\">//左孩子 </span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> <span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">;</span> <span class=\"token comment\">//右孩子 </span>\n\t<span class=\"token keyword\">int</span> ltag<span class=\"token punctuation\">;</span> <span class=\"token comment\">//左标记，“ltag=0”表示当前节点有左孩子，“ltag=1”表示当前节点没有左孩子 </span>\n\t<span class=\"token keyword\">int</span> rtag<span class=\"token punctuation\">;</span> <span class=\"token comment\">//右标记，“rtag=0”表示当前节点有右孩子，“rtag=1”表示当前节点没有右孩子 </span>\n<span class=\"token punctuation\">}</span>BiTree<span class=\"token punctuation\">;</span> \n\nBiTree <span class=\"token operator\">*</span><span class=\"token function\">creat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//二叉树的创建及初始化(初始化左右标记为0) </span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tdataType value<span class=\"token punctuation\">;</span>\n\tBiTree <span class=\"token operator\">*</span>t<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">==</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tt<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tt<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BiTree <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tt<span class=\"token operator\">-&gt;</span>data<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span>\n\t\tt<span class=\"token operator\">-&gt;</span>ltag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//初始化左标记为0 </span>\n\t\tt<span class=\"token operator\">-&gt;</span>rtag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//初始化右标记为0 </span>\n\t\tt<span class=\"token operator\">-&gt;</span>lchild<span class=\"token operator\">=</span><span class=\"token function\">creat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tt<span class=\"token operator\">-&gt;</span>rchild<span class=\"token operator\">=</span><span class=\"token function\">creat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//BiTree *pre=NULL; //1.定义全局变量pre</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InThreaded</span><span class=\"token punctuation\">(</span>BiTree <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">static</span> BiTree <span class=\"token operator\">*</span>pre<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2.定义静态变量 \t </span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">InThreaded</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tp<span class=\"token operator\">-&gt;</span>ltag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\tp<span class=\"token operator\">-&gt;</span>lchild<span class=\"token operator\">=</span>pre<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre<span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span>pre<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tpre<span class=\"token operator\">-&gt;</span>rtag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\tpre<span class=\"token operator\">-&gt;</span>rchild<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tpre<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token function\">InThreaded</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nBiTree <span class=\"token operator\">*</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span>BiTree <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token comment\">//已知节点t找t的\"后继\"结点位置 </span>\n<span class=\"token punctuation\">{<!-- --></span>   \n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-&gt;</span>rtag<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//右标志为1，可以直接得到\"后继\"结点 </span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tt<span class=\"token operator\">=</span>t<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">;</span>\n\t <span class=\"token punctuation\">}</span> \n\t <span class=\"token keyword\">else</span> <span class=\"token comment\">/*右标志为0，不能直接的到\"后继\"结点，\n\t        则需要找到右子树最左下角的节点*/</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t \tt<span class=\"token operator\">=</span>t<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">;</span>\n\t\t <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-&gt;</span>ltag<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t \tt<span class=\"token operator\">=</span>t<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">;</span>\n\t\t <span class=\"token punctuation\">}</span> <span class=\"token comment\">//while</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token comment\">//else</span>\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nBiTree <span class=\"token operator\">*</span><span class=\"token function\">Prior</span><span class=\"token punctuation\">(</span>BiTree <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token comment\">//已知节点t找t的\"前驱\"结点位置 </span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-&gt;</span>ltag<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//左标志为1，可以直接找到\"前驱\"结点的位置 </span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tt<span class=\"token operator\">=</span>t<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">;</span>\n\t <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token comment\">/*右标志为0，不能直接的到\"前驱\"结点，\n\t       则需要找到左子树最右下角的节点*/</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tt<span class=\"token operator\">=</span>t<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-&gt;</span>rtag<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tt<span class=\"token operator\">=</span>t<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">;</span>\n\t\t <span class=\"token punctuation\">}</span> <span class=\"token comment\">//while</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token comment\">//else</span>\n\t\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">InorderTraverse</span><span class=\"token punctuation\">(</span>BiTree <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token comment\">//利用线索实现中序遍历 </span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-&gt;</span>ltag<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//查找第一个节点 </span>\n\t<span class=\"token punctuation\">{<!-- --></span>               <span class=\"token comment\">//因为二叉树的创建creat是以先序遍历序列创建，所以t所指向的第一个结点并不是中序遍历所要访问的第一个结点 </span>\n\t\tt<span class=\"token operator\">=</span>t<span class=\"token operator\">-&gt;</span>lchild<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c \"</span><span class=\"token punctuation\">,</span>t<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//访问第一个结 </span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-&gt;</span>rchild<span class=\"token punctuation\">)</span><span class=\"token comment\">// 此处以\"t的右孩子不为空\"为循环条件，是因为，先前设定了最后一个结点的\"后继\"为空，表示结束 </span>\n\t<span class=\"token punctuation\">{<!-- --></span>               <span class=\"token comment\">//根据线索访问后续结点 </span>\n\t\tt<span class=\"token operator\">=</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c \"</span><span class=\"token punctuation\">,</span>t<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\tBiTree <span class=\"token operator\">*</span>root<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\troot<span class=\"token operator\">=</span><span class=\"token function\">creat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Threading Binary Tree!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">InThreaded</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inorder traverse:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">InorderTraverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//FCA##DB###EH##GM###</span>\n\n</code></pre>\n<h2><a id=\"47HDU_1710_2605\"></a>4.7编程HDU 1710</h2>\n<p>Javac++ 一天在看计算机的书籍的时候，看到了一个有趣的东西！每一串字符都可以被编码成一些数字来储存信息，但是不同的编码方式得到的储存空间是不一样的！并且当储存空间大于一定的值的时候是不安全的！所以Javac++ 就想是否有一种方式是可以得到字符编码最小的空间值！显然这是可以的，因为书上有这一块内容–哈夫曼编码(Huffman Coding)；一个字母的权值等于该字母在字符串中出现的频率。所以Javac++ 想让你帮忙，给你安全数值和一串字符串，并让你判断这个字符串是否是安全的？<br/> 输入有多组case，首先是一个数字n表示有n组数据，然后每一组数据是有一个数值m(integer)，和一串字符串没有空格只有包含小写字母组成！</p>\n<p>输入样例<br/> 2 12 helloworld 66 ithinkyoucandoit<br/> 输出<br/> no yes</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n   using namespace std<span class=\"token punctuation\">;</span>\n   <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXNODE</span> <span class=\"token expression\"><span class=\"token number\">10010</span></span></span>\n   <span class=\"token keyword\">struct</span> <span class=\"token class-name\">HTNode</span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//节点值</span>\n     <span class=\"token keyword\">double</span> weight<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//权重</span>\n      <span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//双亲节点 </span>\n      <span class=\"token keyword\">int</span> lchild<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//左孩子节点</span>\n       <span class=\"token keyword\">int</span> rchild<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//右孩子节点 </span>\n <span class=\"token punctuation\">}</span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>MAXNODE<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">HCode</span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">char</span> cd<span class=\"token punctuation\">[</span>MAXNODE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>hcd<span class=\"token punctuation\">[</span>MAXNODE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span>MAXNODE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">void</span> <span class=\"token function\">CreateHT</span><span class=\"token punctuation\">(</span>HTNode ht<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>lnode<span class=\"token punctuation\">,</span>rnode<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> min1<span class=\"token punctuation\">,</span>min2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//所有节点的相关域置初值-1 </span>\n        ht<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> ht<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> ht<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>    <span class=\"token comment\">//构造哈夫曼树 </span>\n          min1 <span class=\"token operator\">=</span> min2 <span class=\"token operator\">=</span> <span class=\"token number\">9999999</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//lnode和rnode为权重最小的两个节点位置</span>\n          lnode <span class=\"token operator\">=</span> rnode <span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token operator\">&lt;</span>min1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                      min2 <span class=\"token operator\">=</span> min1<span class=\"token punctuation\">;</span>rnode <span class=\"token operator\">=</span> lnode<span class=\"token punctuation\">;</span>\n                    min1 <span class=\"token operator\">=</span> ht<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>lnode <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n                 <span class=\"token punctuation\">}</span>\n                 <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token operator\">&lt;</span>min2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                      min2 <span class=\"token operator\">=</span> ht<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>rnode <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> \n         ht<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> ht<span class=\"token punctuation\">[</span>lnode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">+</span> ht<span class=\"token punctuation\">[</span>rnode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n          ht<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">=</span> lnode<span class=\"token punctuation\">;</span>ht<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rchild <span class=\"token operator\">=</span> rnode<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//ht[i]作为双亲节点</span>\n          ht<span class=\"token punctuation\">[</span>lnode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>ht<span class=\"token punctuation\">[</span>rnode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> \n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">CreateHCode</span><span class=\"token punctuation\">(</span>HTNode ht<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>HCode hcd<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>\n      HCode hc<span class=\"token punctuation\">;</span>    \n     <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>    <span class=\"token comment\">//根据哈夫曼树求哈夫曼编码      </span>\n         hc<span class=\"token punctuation\">.</span>start <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>c<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n         f <span class=\"token operator\">=</span> ht<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n              <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lchild <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span>\n                 hc<span class=\"token punctuation\">.</span>cd<span class=\"token punctuation\">[</span>hc<span class=\"token punctuation\">.</span>start<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                 hc<span class=\"token punctuation\">.</span>cd<span class=\"token punctuation\">[</span>hc<span class=\"token punctuation\">.</span>start<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span>\n              c <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>f<span class=\"token operator\">=</span>ht<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          hc<span class=\"token punctuation\">.</span>start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n          hcd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>hc<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n     cin<span class=\"token operator\">&gt;&gt;</span>n<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span>\n         cin<span class=\"token operator\">&gt;&gt;</span>m<span class=\"token punctuation\">;</span>\n         cin<span class=\"token operator\">&gt;&gt;</span>str<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>    <span class=\"token comment\">//初始化ht[]哈夫曼树的叶子节点和权值 </span>\n              <span class=\"token comment\">//ht[]有无存储str[i]</span>\n             <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>ht<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//已经存储了，退出本次循环 </span>\n             <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>    <span class=\"token comment\">//没存储，给ht[len]计数 </span>\n                 <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                     count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n             ht<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n             ht<span class=\"token punctuation\">[</span>len<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//len--;</span>\n         <span class=\"token function\">CreateHT</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//创建哈夫曼树 </span>\n        <span class=\"token function\">CreateHCode</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">,</span>hcd<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//根据哈夫曼树求哈夫曼编码 </span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>    <span class=\"token comment\">//只有一种字符的情况下，哈夫曼树是构造不起来的，特殊处理（直接进行比较） </span>\n             <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">)</span>\n                  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"yes\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">else</span>\n                 cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"no\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n         <span class=\"token keyword\">int</span> wpl <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n             wpl <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>len<span class=\"token operator\">-</span>hcd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>start<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n         <span class=\"token comment\">//cout&lt;&lt;wpl&lt;&lt;endl;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>wpl<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">)</span>\n              cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"yes\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> \n            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"no\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"48_2722\"></a>4.8哈夫曼编码</h2>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/*示例 \n****哈夫曼编码****\n请输入结点个数：8\n输入这8个元素的权值（均为整形）：\n1:27\n2:4\n3:87\n4:21\n5:2\n6:21\n7:1\n8:25\n\n*/</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//用来存储各个结点的权值 </span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">,</span>LChild<span class=\"token punctuation\">,</span>RChild<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//指向双亲、孩子结点的指针 </span>\n<span class=\"token punctuation\">}</span> HTNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>HuffmanTree<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//动态分配数组，存储哈夫曼树 </span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>HuffmanCode<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//动态分配数组，存储哈夫曼树</span>\n\n<span class=\"token comment\">///选择两个parent为0,且weight最小的结点s1和s2 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>HuffmanTree <span class=\"token operator\">*</span>ht<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>s1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>s2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>min<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n       min<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span>\n      min<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token operator\">*</span>s1<span class=\"token operator\">=</span>min<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> i<span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n      min<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> i<span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span> \n\t\t  min<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token operator\">*</span>s2<span class=\"token operator\">=</span>min<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">///构造哈夫曼树ht,w存放已知n个权值 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">CrtHuffmanTree</span><span class=\"token punctuation\">(</span>HuffmanTree <span class=\"token operator\">*</span>ht<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>w<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>s1<span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">;</span>\n m<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//总共的结点数 </span>\n <span class=\"token operator\">*</span>ht<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>HuffmanTree<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>HTNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//1-n号存放叶子结点，初始化 </span>\n <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token operator\">=</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>LChild<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>RChild<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//非叶子结点的初始化</span>\n <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>LChild<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>RChild<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> \n\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\哈夫曼树为: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//创建非叶子结点，建哈夫曼树</span>\n <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">/*在(*ht)[1]~(*ht)[i-1]的范围内选择两个parent为0且weight最小的结点，其序号分别赋值给s1、s2*/</span>\n   <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>s1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>s2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>LChild<span class=\"token operator\">=</span>s1<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>RChild<span class=\"token operator\">=</span>s2<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>s1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>s2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d (%d, %d)\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>s1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>s2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n\n\n<span class=\"token comment\">//从叶子结点到根，逆向求每个叶子结点对应的哈夫曼编码</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">CrtHuffmanCode</span><span class=\"token punctuation\">(</span>HuffmanTree <span class=\"token operator\">*</span>ht<span class=\"token punctuation\">,</span> HuffmanCode <span class=\"token operator\">*</span>hc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>cd<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//定义的存放编码的空间</span>\n <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>start<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span>w<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n hc<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>HuffmanCode <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//分配n个编码的头指针</span>\n cd<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//分配求当前编码的工作空间</span>\n cd<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//从右向左逐位存放编码，首先存放编码结束符</span>\n\n <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//求n个叶子结点对应的哈夫曼编码</span>\n <span class=\"token punctuation\">{<!-- --></span>\n  a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  start<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//起始指针位置在最右边</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">=</span>i<span class=\"token punctuation\">,</span>p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span> p<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> c<span class=\"token operator\">=</span>p<span class=\"token punctuation\">,</span>p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//从叶子到根结点求编码</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n\t\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>LChild<span class=\"token operator\">==</span>c<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcd<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>start<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//左分支标1</span>\n\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcd<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>start<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//右分支标0</span>\n\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  hc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//为第i个编码分配空间</span>\n  <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>hc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>cd<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//将cd复制编码到hc</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 权值为%d的哈夫曼编码为：%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">,</span>hc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    w<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 带权路径为：%d\\n\"</span><span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n HuffmanTree HT<span class=\"token punctuation\">;</span>\n HuffmanCode HC<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>w<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>wei<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"**哈夫曼编码**\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入结点个数：\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n w<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n输入这%d个元素的权值:\\n\"</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span> \n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d: \"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>wei<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>wei<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token function\">CrtHuffmanTree</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>HT<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">CrtHuffmanCode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>HT<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>HC<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"5_2897\"></a>5.图</h1>\n<h2><a id=\"51_kruasl_2899\"></a>5.1 kruasl算法</h2>\n<p>适合求稀疏网的最小生成树<br/> 测试数据：<br/> 6 10<br/> 1 2 6<br/> 1 3 1<br/> 1 4 5<br/> 2 3 5<br/> 2 5 3<br/> 3 4 5<br/> 3 5 6<br/> 3 6 4<br/> 4 6 2<br/> 5 6 6</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">edge</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">;</span> <span class=\"token comment\">//边的顶点，权值</span>\n<span class=\"token punctuation\">}</span>edges<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//初始化并查集</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">UFset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//查找i的根</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//查找位置</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> parent<span class=\"token punctuation\">[</span>temp<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> temp <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>temp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//压缩路径</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>   <span class=\"token comment\">//表明没找到根节点，因为根节点的父节点是-1 </span>\n\t\t<span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tparent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\ti <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//合并两个元素a,b</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> r1 <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> r2 <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>r1<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> parent<span class=\"token punctuation\">[</span>r2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//两个集合节点数的和</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>r1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> parent<span class=\"token punctuation\">[</span>r2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tparent<span class=\"token punctuation\">[</span>r1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r2<span class=\"token punctuation\">;</span>\n\t\tparent<span class=\"token punctuation\">[</span>r2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tparent<span class=\"token punctuation\">[</span>r2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r1<span class=\"token punctuation\">;</span>\n\t\tparent<span class=\"token punctuation\">[</span>r1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">kruskal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> sumWeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">UFset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tu <span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>u<span class=\"token punctuation\">;</span>\n\t\tv <span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//u和v不在一个集合，两者的根不同 </span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"加入边：%d %d,权值： %d\\n\"</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tnum <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//把这两个边加入一个集合。</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"最小生成树的权值之和为：%d \\n\"</span><span class=\"token punctuation\">,</span> sumWeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//比较函数，用户排序</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tedge <span class=\"token operator\">*</span> e1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>edge <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">;</span>\n\tedge <span class=\"token operator\">*</span> e2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>edge <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> e1<span class=\"token operator\">-&gt;</span>w <span class=\"token operator\">-</span> e2<span class=\"token operator\">-&gt;</span>w<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>u<span class=\"token punctuation\">,</span>  <span class=\"token operator\">&amp;</span>edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">,</span>  <span class=\"token operator\">&amp;</span>edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">kruskal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n测试数据：\n6 10\n1 2 6 \n1 3 1\n1 4 5\n2 3 5\n2 5 3\n3 4 5\n3 5 6\n3 6 4\n4 6 2\n5 6 6\n */</span>\n</code></pre>\n<h2><a id=\"52_3015\"></a>5.2图的遍历</h2>\n<p>邻接矩阵测试样例<br/> 1 2 3 4 5 6<br/> 1 2 6<br/> 1 4 5<br/> 1 3 1<br/> 2 3 5<br/> 3 4 5<br/> 4 5 3<br/> 3 5 6<br/> 3 6 4<br/> 4 6 2<br/> 5 6 6<br/> 邻接表测试样例<br/> 1 2<br/> 1 4<br/> 1 3<br/> 2 3<br/> 3 4<br/> 4 5<br/> 3 5<br/> 3 6<br/> 4 6<br/> 5 6</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MaxInt</span> <span class=\"token expression\"><span class=\"token number\">32767</span>  </span><span class=\"token comment\">//表示极大值</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MVNum</span> <span class=\"token expression\"><span class=\"token number\">100</span> </span><span class=\"token comment\">//最大顶点数</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OK</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> VerTexType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span>  ArcType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span>  status<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> OtherInfo<span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">//和边相关的信息 </span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> vexs<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> arcs<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> vexnum<span class=\"token punctuation\">,</span>arcnum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>AMGraphy<span class=\"token punctuation\">;</span>\nstatus <span class=\"token function\">LocateVex</span><span class=\"token punctuation\">(</span>AMGraphy G<span class=\"token punctuation\">,</span>VerTexType u<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>u<span class=\"token operator\">==</span>G<span class=\"token punctuation\">.</span>vexs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//邻接矩阵表示法</span>\nstatus <span class=\"token function\">CreateUDN</span><span class=\"token punctuation\">(</span>AMGraphy <span class=\"token operator\">&amp;</span>G<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入总顶点数，总边数中间以空格隔开:\"</span><span class=\"token punctuation\">;</span>\n   cin<span class=\"token operator\">&gt;&gt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token operator\">&gt;&gt;</span>G<span class=\"token punctuation\">.</span>arcnum<span class=\"token punctuation\">;</span>   \n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"输入点的名称 \"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     cin<span class=\"token operator\">&gt;&gt;</span>G<span class=\"token punctuation\">.</span>vexs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>          \n     \n   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//初始化邻接矩阵，边的权值均为Maxint </span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t    G<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>MaxInt<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>arcnum<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//构造邻接矩阵 </span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">&gt;&gt;</span>v1<span class=\"token operator\">&gt;&gt;</span>v2<span class=\"token operator\">&gt;&gt;</span>w<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//输入一条边依附的顶点及权值 </span>\n\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token function\">LocateVex</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token function\">LocateVex</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//确定v1，v1在G中的位置，即顶点数组的下标 </span>\n\t\tG<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>w<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//边&lt;v1,v2&gt;的权值置为w </span>\n\t\tG<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>G<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//置&lt;v1,v2&gt;的对称边&lt;v2,v1&gt;的权值为w\t</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//邻接表存储</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ArcNode</span><span class=\"token punctuation\">{<!-- --></span>                \t\t<span class=\"token comment\">//边结点 </span>\n    <span class=\"token keyword\">int</span> adjvex<span class=\"token punctuation\">;</span>                          \t<span class=\"token comment\">//该边所指向的顶点的位置 </span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ArcNode</span> <span class=\"token operator\">*</span>nextarc<span class=\"token punctuation\">;</span>          \t\t<span class=\"token comment\">//指向下一条边的指针 </span>\n    OtherInfo info<span class=\"token punctuation\">;</span>                      \t<span class=\"token comment\">//和边相关的信息 </span>\n<span class=\"token punctuation\">}</span>ArcNode<span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">VNode</span><span class=\"token punctuation\">{<!-- --></span> \n    VerTexType data<span class=\"token punctuation\">;</span>                    \t<span class=\"token comment\">//顶点信息 </span>\n    ArcNode <span class=\"token operator\">*</span>firstarc<span class=\"token punctuation\">;</span>                \t\t<span class=\"token comment\">//指向第一条依附该顶点的边的指针 </span>\n<span class=\"token punctuation\">}</span>VNode<span class=\"token punctuation\">,</span> AdjList<span class=\"token punctuation\">[</span>MVNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>               \t\t<span class=\"token comment\">//AdjList表示邻接表类型 </span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{<!-- --></span> \n    AdjList vertices<span class=\"token punctuation\">;</span>                 \t\t<span class=\"token comment\">//邻接表 </span>\n    <span class=\"token keyword\">int</span> vexnum<span class=\"token punctuation\">,</span> arcnum<span class=\"token punctuation\">;</span>              \t\t<span class=\"token comment\">//图的当前顶点数和边数 </span>\n<span class=\"token punctuation\">}</span>ALGraph<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">LocateVex</span><span class=\"token punctuation\">(</span>ALGraph G <span class=\"token punctuation\">,</span> VerTexType v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//确定点v在G中的位置</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">==</span> v<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">CreateUDG</span><span class=\"token punctuation\">(</span>ALGraph <span class=\"token operator\">&amp;</span>G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n\t<span class=\"token comment\">//采用邻接表表示法，创建无向图G</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入总顶点数，总边数中间以空格隔开:\"</span><span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">&gt;&gt;</span> G<span class=\"token punctuation\">.</span>vexnum <span class=\"token operator\">&gt;&gt;</span> G<span class=\"token punctuation\">.</span>arcnum<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//输入总顶点数，总边数 </span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"输入点的名称 \"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>          \t<span class=\"token comment\">//输入各点，构造表头结点表</span>\n\t\tcin <span class=\"token operator\">&gt;&gt;</span> G<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>           \t<span class=\"token comment\">//输入顶点值 </span>\n\t\tG<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstarc<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//初始化表头结点的指针域为NULL </span>\n    <span class=\"token punctuation\">}</span><span class=\"token comment\">//for</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    \n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入一条边依附的顶点,如 a b\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>arcnum<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>        \n\t\tVerTexType v1 <span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span>\n\t\tcin <span class=\"token operator\">&gt;&gt;</span> v1 <span class=\"token operator\">&gt;&gt;</span> v2<span class=\"token punctuation\">;</span>                 \t\t<span class=\"token comment\">//输入一条边依附的两个顶点</span>\n\t\ti <span class=\"token operator\">=</span> <span class=\"token function\">LocateVex</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  j <span class=\"token operator\">=</span> <span class=\"token function\">LocateVex</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//确定v1和v2在G中位置，即顶点在G.vertices中的序号 </span>\n\n\t\tArcNode <span class=\"token operator\">*</span>p1<span class=\"token operator\">=</span>new ArcNode<span class=\"token punctuation\">;</span>               \t<span class=\"token comment\">//生成一个新的边结点*p1 </span>\n\t\tp1<span class=\"token operator\">-&gt;</span>adjvex<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>                   \t\t<span class=\"token comment\">//邻接点序号为j </span>\n\t\tp1<span class=\"token operator\">-&gt;</span>nextarc<span class=\"token operator\">=</span> G<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstarc<span class=\"token punctuation\">;</span>  G<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstarc<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">;</span>  \n\t\t<span class=\"token comment\">//将新结点*p1插入顶点vi的边表头部</span>\n\n\t\tArcNode <span class=\"token operator\">*</span>p2<span class=\"token operator\">=</span>new ArcNode<span class=\"token punctuation\">;</span>                <span class=\"token comment\">//生成另一个对称的新的边结点*p2 </span>\n\t\tp2<span class=\"token operator\">-&gt;</span>adjvex<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>                   \t\t<span class=\"token comment\">//邻接点序号为i </span>\n\t\tp2<span class=\"token operator\">-&gt;</span>nextarc<span class=\"token operator\">=</span> G<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstarc<span class=\"token punctuation\">;</span>  G<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstarc<span class=\"token operator\">=</span>p2<span class=\"token punctuation\">;</span>  \n\t\t<span class=\"token comment\">//将新结点*p2插入顶点vj的边表头部 </span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> choice<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"输入选项 1：邻接矩阵 2：邻接表\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> \n\tcin<span class=\"token operator\">&gt;&gt;</span>choice<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\tAMGraphy G<span class=\"token punctuation\">;</span><span class=\"token function\">CreateUDN</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        \t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>MaxInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    \tcout<span class=\"token operator\">&lt;&lt;</span>G<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t\t\t \t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"∞\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tALGraph G<span class=\"token punctuation\">;</span><span class=\"token function\">CreateUDG</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>vexnum <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\tVNode temp <span class=\"token operator\">=</span> G<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tArcNode <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>firstarc<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> G<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> temp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-&gt;\"</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token operator\">-&gt;</span>adjvex<span class=\"token punctuation\">;</span>\n\t\t\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-&gt;</span>nextarc<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n1 2 3 4 5 6\n1 2 6\n1 4 5\n1 3 1\n2 3 5\n3 4 5\n4 5 3\n3 5 6\n3 6 4\n4 6 2\n5 6 6\n\n1 2 \n1 4\n1 3\n2 3\n3 4\n4 5\n3 5\n3 6\n4 6\n5 6\n*/</span>\n</code></pre>\n<h2><a id=\"53P166primDFSBFS_3215\"></a>5.3用邻接矩阵和邻接表来存储P166prim图，用DFS（递归和非递归方法）和BFS输出。</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MaxInt</span> <span class=\"token expression\"><span class=\"token number\">32767</span>  </span><span class=\"token comment\">//表示极大值</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MVNum</span> <span class=\"token expression\"><span class=\"token number\">100</span> </span><span class=\"token comment\">//最大顶点数</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OK</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> VerTexType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span>  ArcType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span>  status<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> OtherInfo<span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">//和边相关的信息 </span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> vexs<span class=\"token punctuation\">[</span>MVNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> arcs<span class=\"token punctuation\">[</span>MVNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MVNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> vexnum<span class=\"token punctuation\">,</span>arcnum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>AMGraphy<span class=\"token punctuation\">;</span>\nstatus <span class=\"token function\">LocateVex</span><span class=\"token punctuation\">(</span>AMGraphy G<span class=\"token punctuation\">,</span>VerTexType u<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>u<span class=\"token operator\">==</span>G<span class=\"token punctuation\">.</span>vexs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//邻接矩阵</span>\nstatus <span class=\"token function\">CreateUDN</span><span class=\"token punctuation\">(</span>AMGraphy <span class=\"token operator\">&amp;</span>G<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入总顶点数，总边数中间以空格隔开:\"</span><span class=\"token punctuation\">;</span>\n   cin<span class=\"token operator\">&gt;&gt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token operator\">&gt;&gt;</span>G<span class=\"token punctuation\">.</span>arcnum<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//输入总顶点数，总边数 </span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"输入点的名称 \"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     cin<span class=\"token operator\">&gt;&gt;</span>G<span class=\"token punctuation\">.</span>vexs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>       \n   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//初始化邻接矩阵，边的权值均为Maxint </span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t    G<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>MaxInt<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>arcnum<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//构造邻接矩阵 </span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">&gt;&gt;</span>v1<span class=\"token operator\">&gt;&gt;</span>v2<span class=\"token operator\">&gt;&gt;</span>w<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//输入一条边依附的顶点及权值 </span>\n\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token function\">LocateVex</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token function\">LocateVex</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//确定v1，v1在G中的位置，即顶点数组的下标 </span>\n\t\tG<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>w<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//边&lt;v1,v2&gt;的权值置为w </span>\n\t\tG<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>G<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//置&lt;v1,v2&gt;的对称边&lt;v2,v1&gt;的权值为w\t</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//邻接表</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ArcNode</span><span class=\"token punctuation\">{<!-- --></span>                \t\t<span class=\"token comment\">//边结点 </span>\n    <span class=\"token keyword\">int</span> adjvex<span class=\"token punctuation\">;</span>                          \t<span class=\"token comment\">//该边所指向的顶点的位置 </span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ArcNode</span> <span class=\"token operator\">*</span>nextarc<span class=\"token punctuation\">;</span>          \t\t<span class=\"token comment\">//指向下一条边的指针 </span>\n    OtherInfo info<span class=\"token punctuation\">;</span>                      \t<span class=\"token comment\">//和边相关的信息 </span>\n<span class=\"token punctuation\">}</span>ArcNode<span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">VNode</span><span class=\"token punctuation\">{<!-- --></span> \n    VerTexType data<span class=\"token punctuation\">;</span>                    \t<span class=\"token comment\">//顶点信息 </span>\n    ArcNode <span class=\"token operator\">*</span>firstarc<span class=\"token punctuation\">;</span>                \t\t<span class=\"token comment\">//指向第一条依附该顶点的边的指针 </span>\n<span class=\"token punctuation\">}</span>VNode<span class=\"token punctuation\">,</span> AdjList<span class=\"token punctuation\">[</span>MVNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>               \t\t<span class=\"token comment\">//AdjList表示邻接表类型 </span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{<!-- --></span> \n    AdjList vertices<span class=\"token punctuation\">;</span>                 \t\t<span class=\"token comment\">//邻接表 </span>\n    <span class=\"token keyword\">int</span> vexnum<span class=\"token punctuation\">,</span> arcnum<span class=\"token punctuation\">;</span>              \t\t<span class=\"token comment\">//图的当前顶点数和边数 </span>\n<span class=\"token punctuation\">}</span>ALGraph<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">LocateVex</span><span class=\"token punctuation\">(</span>ALGraph G <span class=\"token punctuation\">,</span> VerTexType v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//确定点v在G中的位置</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">==</span> v<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">CreateUDG</span><span class=\"token punctuation\">(</span>ALGraph <span class=\"token operator\">&amp;</span>G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n\t<span class=\"token comment\">//邻接表创建无向图G</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入总顶点数，总边数中间以空格隔开:\"</span><span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">&gt;&gt;</span> G<span class=\"token punctuation\">.</span>vexnum <span class=\"token operator\">&gt;&gt;</span> G<span class=\"token punctuation\">.</span>arcnum<span class=\"token punctuation\">;</span>\t\t\t\t\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"输入点的名称 \"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>          \t<span class=\"token comment\">//输入各点，构造表头结点表</span>\n\t\tcin <span class=\"token operator\">&gt;&gt;</span> G<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>           \t<span class=\"token comment\">//输入顶点值 </span>\n\t\tG<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstarc<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//初始化表头结点的指针域为NULL </span>\n    <span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>arcnum<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>        \t\t<span class=\"token comment\">//输入各边，构造邻接表</span>\n\t\tVerTexType v1 <span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span>\n\t\t\n\t\tcin <span class=\"token operator\">&gt;&gt;</span> v1 <span class=\"token operator\">&gt;&gt;</span> v2<span class=\"token punctuation\">;</span>                 \t\t<span class=\"token comment\">//输入一条边依附的两个顶点</span>\n\t\ti <span class=\"token operator\">=</span> <span class=\"token function\">LocateVex</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  j <span class=\"token operator\">=</span> <span class=\"token function\">LocateVex</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//确定v1和v2在G中位置，即顶点在G.vertices中的序号 </span>\n\n\t\tArcNode <span class=\"token operator\">*</span>p1<span class=\"token operator\">=</span>new ArcNode<span class=\"token punctuation\">;</span>               \t<span class=\"token comment\">//生成一个新的边结点*p1 </span>\n\t\tp1<span class=\"token operator\">-&gt;</span>adjvex<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>                   \t\t<span class=\"token comment\">//邻接点序号为j </span>\n\t\tp1<span class=\"token operator\">-&gt;</span>nextarc<span class=\"token operator\">=</span> G<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstarc<span class=\"token punctuation\">;</span>  G<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstarc<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">;</span>  \n\t\t<span class=\"token comment\">//将新结点*p1插入顶点vi的边表头部</span>\n\n\t\tArcNode <span class=\"token operator\">*</span>p2<span class=\"token operator\">=</span>new ArcNode<span class=\"token punctuation\">;</span>                <span class=\"token comment\">//生成另一个对称的新的边结点*p2 </span>\n\t\tp2<span class=\"token operator\">-&gt;</span>adjvex<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>                   \t\t<span class=\"token comment\">//邻接点序号为i </span>\n\t\tp2<span class=\"token operator\">-&gt;</span>nextarc<span class=\"token operator\">=</span> G<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstarc<span class=\"token punctuation\">;</span>  G<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstarc<span class=\"token operator\">=</span>p2<span class=\"token punctuation\">;</span>  \n\t\t<span class=\"token comment\">//将新结点*p2插入顶点vj的边表头部 </span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\nbool visited<span class=\"token punctuation\">[</span>MVNum<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>false<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//邻接矩阵深度搜索 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">DFS_AM</span><span class=\"token punctuation\">(</span>AMGraphy <span class=\"token operator\">&amp;</span>G<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>w<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span>w<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//依此检查邻接矩阵V所在的行 </span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token function\">DFS_AM</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//G.arcs[v][w]!=0表示w是v的邻接点，如果w未访问，则递归调用DFS </span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//邻接矩阵广度搜索 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">BFS_AM</span><span class=\"token punctuation\">(</span>AMGraphy G<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t \tvisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>false<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span><span class=\"token comment\">//访问第v个顶点 </span>\n\tqueue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> Q<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//辅助队列Q初始化 </span>\n\tQ<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">//v进队 </span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//队列非空 </span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tQ<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//队头元素出队并赋给t </span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>w<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span>w<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> visited<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>false<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tvisited<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\t\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>w<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t\t\tQ<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//w进队 </span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//邻接表深度搜索 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">DFS_AL</span><span class=\"token punctuation\">(</span>ALGraph G<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tArcNode <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">=</span>new ArcNode<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">=</span>G<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstarc<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> w<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>adjvex<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">DFS_AL</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>nextarc<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//邻接表广度搜索 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">BFS_AL</span><span class=\"token punctuation\">(</span>ALGraph G<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>false<span class=\"token punctuation\">;</span>\n\t \n\t cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\t queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> Q<span class=\"token punctuation\">;</span>\n\t Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t ArcNode <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\t p<span class=\"token operator\">=</span>new ArcNode<span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t <span class=\"token punctuation\">{<!-- --></span>\n\t \t<span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t \tQ<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span>G<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstarc<span class=\"token punctuation\">;</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>nextarc<span class=\"token punctuation\">)</span>\n\t \t<span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>p<span class=\"token operator\">-&gt;</span>adjvex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t   <span class=\"token punctuation\">{<!-- --></span>\n\t\t   \t  cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>adjvex<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t   \t  visited<span class=\"token punctuation\">[</span>p<span class=\"token operator\">-&gt;</span>adjvex<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\t\t   \t  Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>adjvex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t    <span class=\"token punctuation\">}</span>\t \t \t\n\t\t<span class=\"token punctuation\">}</span>\n\t <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> choice<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"输入选项 1：邻接矩阵 2：邻接表\"</span><span class=\"token punctuation\">;</span> \n\tcin<span class=\"token operator\">&gt;&gt;</span>choice<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\tAMGraphy G<span class=\"token punctuation\">;</span><span class=\"token function\">CreateUDN</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"DFS遍历结果为：\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">DFS_AM</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"BFS遍历结果为：\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">BFS_AM</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tALGraph G<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">CreateUDG</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"深度优先搜索结果是\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">DFS_AL</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"广度优先搜索结果是\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">BFS_AL</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n邻接矩阵 \n6 10\n1 2 3 4 5 6\n1 2 6\n1 4 5\n1 3 1\n2 3 5\n3 4 5\n4 5 3\n3 5 6\n3 6 4\n4 6 2\n5 6 6\n邻接表 \n1 2 \n1 4\n1 3\n2 3\n3 4\n4 5\n3 5\n3 6\n4 6\n5 6\n*/</span>\n</code></pre>\n<h2><a id=\"54_3457\"></a>5.4关键路径的实现</h2>\n<p>估算工程完成的最短时间，既是找从源点到汇点的带权路径长度最长的路径，称为关键路径</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXN</span> <span class=\"token expression\"><span class=\"token number\">100</span> </span><span class=\"token comment\">//The Max num of Vertex</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXM</span> <span class=\"token expression\"><span class=\"token number\">200</span> </span><span class=\"token comment\">//The Max num of Edges</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ArcNode</span> <span class=\"token comment\">//保存边的信息</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> to<span class=\"token punctuation\">,</span> dur<span class=\"token punctuation\">,</span> no<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//to: next vertex, dur: the duration of the activities; no: the ID of activity</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ArcNode</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">//全局变量！</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span> <span class=\"token comment\">//the number of Vertex and Edge，</span>\nArcNode<span class=\"token operator\">*</span> outEdge<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//记录每个顶点对应的出边表</span>\nArcNode<span class=\"token operator\">*</span> inEdge<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//记录每个顶点对应的入边表</span>\n<span class=\"token keyword\">int</span> outOrd<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//每个顶点的出度</span>\n<span class=\"token keyword\">int</span> inOrd<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//每个顶点的入度</span>\n<span class=\"token keyword\">int</span> ev<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Earliest start time for Vertex</span>\n<span class=\"token keyword\">int</span> lv<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Latest start time for Vertex</span>\n<span class=\"token keyword\">int</span> ee<span class=\"token punctuation\">[</span>MAXM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//MAXM!! Earliest start time for Edge</span>\n<span class=\"token keyword\">int</span> le<span class=\"token punctuation\">[</span>MAXM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Latest start time for Edge!!</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">CriticalPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">//循环变量</span>\n    <span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">,</span>nxt<span class=\"token punctuation\">;</span> <span class=\"token comment\">//临时变量</span>\n    <span class=\"token keyword\">int</span> top<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//top指示栈顶的位置；-1表示栈空，正整数表示下一个入度（或出度）为零的点的位置</span>\n    ArcNode<span class=\"token operator\">*</span> tpNode<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//扫描inOrd；把所有入度为0的点入栈（一个虚拟的栈，以top表示下一个数据的位置）</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>inOrd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            inOrd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>top<span class=\"token punctuation\">;</span> <span class=\"token comment\">//因为inOrd为0，失去了意义，所以正好可以以此来保存栈中下一个元素的位置</span>\n            top<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\">//以这种类似于堆栈的方式，保存所有入度为0的点</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token comment\">//可以明确的是，如果不存在环的话，必然每个顶点都会遍历一次，所以这里可以做一个循环</span>\n    <span class=\"token comment\">//如果循环结束前，入度为0的点就用尽的话，必然是有环的</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">==</span>top<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cycle Detected!!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            tmp<span class=\"token operator\">=</span>top<span class=\"token punctuation\">;</span> <span class=\"token comment\">//tmp记录当前需要处理的顶点号，即入度为0的点</span>\n            top<span class=\"token operator\">=</span>inOrd<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//top中保存下一个入度为0的元素位置</span>\n            tpNode<span class=\"token operator\">=</span>outEdge<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//取出入度为零点的出边链表</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tpNode<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                nxt<span class=\"token operator\">=</span>tpNode<span class=\"token operator\">-&gt;</span>to<span class=\"token punctuation\">;</span>\n                inOrd<span class=\"token punctuation\">[</span>nxt<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//从该点出发的所有终点的入度减1</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">==</span>inOrd<span class=\"token punctuation\">[</span>nxt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//若出现新的入度为零的点，则入栈</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    inOrd<span class=\"token punctuation\">[</span>nxt<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>top<span class=\"token punctuation\">;</span>\n                    top<span class=\"token operator\">=</span>nxt<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n \n                <span class=\"token comment\">//其它的都是套路（实现拓扑排序的套路），下面这两句才是为求关键路径而生的</span>\n                <span class=\"token comment\">//下一个点的最早开始时间，必然是上一个点的最早开始时间＋活动持续时间</span>\n                <span class=\"token comment\">//如果到达该点有多个路径，最早开始时间必然是个值中的最大值！（因为有一条路径未完成，该点就不能启动）</span>\n                <span class=\"token comment\">//第一个起点的ev值，在初始化时就被设为0了</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">[</span>nxt<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>tpNode<span class=\"token operator\">-&gt;</span>dur<span class=\"token operator\">+</span>ev<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    ev<span class=\"token punctuation\">[</span>nxt<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>tpNode<span class=\"token operator\">-&gt;</span>dur<span class=\"token operator\">+</span>ev<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n \n                tpNode<span class=\"token operator\">=</span>tpNode<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n \n \n    <span class=\"token comment\">//以入度邻接表，再来一遍</span>\n    <span class=\"token keyword\">int</span> maxtime<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//找出工程所需时间（总时间）</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>maxtime<span class=\"token punctuation\">)</span>\n            maxtime<span class=\"token operator\">=</span>ev<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n \n    top<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//重新设栈顶</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        lv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>maxtime<span class=\"token punctuation\">;</span> <span class=\"token comment\">//先将所有节点的最迟开始时间都设为最后时间</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">==</span>outOrd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//依然是设栈，解释见上面雷同程序</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            outOrd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>top<span class=\"token punctuation\">;</span>\n            top<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">==</span>top<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Back Cycle Detected.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            tmp<span class=\"token operator\">=</span>top<span class=\"token punctuation\">;</span> \n            top<span class=\"token operator\">=</span>outOrd<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            tpNode<span class=\"token operator\">=</span>inEdge<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tpNode<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                nxt<span class=\"token operator\">=</span>tpNode<span class=\"token operator\">-&gt;</span>to<span class=\"token punctuation\">;</span> <span class=\"token comment\">//其实是找上一个点</span>\n                outOrd<span class=\"token punctuation\">[</span>nxt<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">==</span>outOrd<span class=\"token punctuation\">[</span>nxt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    outOrd<span class=\"token punctuation\">[</span>nxt<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>top<span class=\"token punctuation\">;</span>\n                    top<span class=\"token operator\">=</span>nxt<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">//下面两句计算最迟开始时间</span>\n                <span class=\"token comment\">//只要有一条路径决定它在更早的时间开始，就得更早开始，所以取各路径最小值</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lv<span class=\"token punctuation\">[</span>nxt<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>lv<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>tpNode<span class=\"token operator\">-&gt;</span>dur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    lv<span class=\"token punctuation\">[</span>nxt<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>lv<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>tpNode<span class=\"token operator\">-&gt;</span>dur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n                tpNode<span class=\"token operator\">=</span>tpNode<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token comment\">//上面计算的都是节点（！）的最早和最迟开始时间，下面需要计算边的</span>\n    <span class=\"token comment\">//若边（活动）的最早开始＝＝最迟开始时间，则该边为关键路径</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The Critical Path:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//通过出边表，遍历每条边！！（但必须从顶点入手，理出每个顶点的出边表）</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        tpNode<span class=\"token operator\">=</span>outEdge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tpNode<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            tmp<span class=\"token operator\">=</span>tpNode<span class=\"token operator\">-&gt;</span>no<span class=\"token punctuation\">;</span> <span class=\"token comment\">//tmp此时保存边的编号！！</span>\n            nxt<span class=\"token operator\">=</span>tpNode<span class=\"token operator\">-&gt;</span>to<span class=\"token punctuation\">;</span>\n            ee<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ev<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//边的最早开始时间就是其起点的最早开始时间</span>\n            le<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>lv<span class=\"token punctuation\">[</span>nxt<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>tpNode<span class=\"token operator\">-&gt;</span>dur<span class=\"token punctuation\">;</span> <span class=\"token comment\">//边的最迟开始时间，是其终点的最迟开始时间减去边的持续时间</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ee<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>le<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a%d:%d-&gt;%d\\n\"</span><span class=\"token punctuation\">,</span>tmp<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>nxt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tpNode<span class=\"token operator\">=</span>tpNode<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">;</span> <span class=\"token comment\">//start point; end point; time needed</span>\n    ArcNode<span class=\"token operator\">*</span> newNode<span class=\"token punctuation\">;</span> <span class=\"token comment\">//只定义，未初始化</span>\n \n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>outEdge<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>outEdge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>inEdge<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>inEdge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>outOrd<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>outOrd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//必须初始化为0</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>inOrd<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>inOrd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>lv<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>lv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>ee<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>le<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>le<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"输入顶点数和边数\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//读入输入数据，共计n个顶点和m条边</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入依附的顶点及权值\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token comment\">//构建出边表</span>\n        outOrd<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//起点的出度增加</span>\n        newNode<span class=\"token operator\">=</span>new ArcNode<span class=\"token punctuation\">;</span> <span class=\"token comment\">//初始化赋值</span>\n        newNode<span class=\"token operator\">-&gt;</span>to<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n        newNode<span class=\"token operator\">-&gt;</span>no<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//这个是边的编号，第一条读入的边作为1号边</span>\n        newNode<span class=\"token operator\">-&gt;</span>dur<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span>\n        newNode<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//NULL需要大写！</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>outEdge<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//没有之前的出边，则直接赋值；若有，则需像挂接火车车厢一样，挂接链表</span>\n            outEdge<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>newNode<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            newNode<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>outEdge<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            outEdge<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>newNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n \n        <span class=\"token comment\">//构建入边表</span>\n        inOrd<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        newNode<span class=\"token operator\">=</span>new ArcNode<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 必须重新赋值</span>\n        newNode<span class=\"token operator\">-&gt;</span>to<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n        newNode<span class=\"token operator\">-&gt;</span>no<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        newNode<span class=\"token operator\">-&gt;</span>dur<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span>\n        newNode<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>inEdge<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            inEdge<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>newNode<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            newNode<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>inEdge<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            inEdge<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>newNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token comment\">//一次性获得全部输入后，执行程序的核心部分——找出关键路径</span>\n    <span class=\"token function\">CriticalPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">//Release the Memory</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>outEdge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            newNode<span class=\"token operator\">=</span>outEdge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//newNode不是新节点，只是借用一下其名字</span>\n            delete outEdge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            outEdge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>newNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n \n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>inEdge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            newNode<span class=\"token operator\">=</span>inEdge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            delete inEdge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            inEdge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>newNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n9 11\n0 1 6\n1 4 1\n4 6 9\n6 8 2\n0 2 4\n2 4 1\n4 7 7\n7 8 4\n0 3 5\n3 5 2\n5 7 4\n*/</span>\n\n</code></pre>\n<h2><a id=\"55dijstra_3696\"></a>5.5dijstra非文件读取</h2>\n<p>单源点到其余各个顶点的最短路径问题</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MaxInt</span> <span class=\"token expression\"><span class=\"token number\">32767</span>  </span><span class=\"token comment\">//表示极大值</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MVNum</span> <span class=\"token expression\"><span class=\"token number\">100</span> </span><span class=\"token comment\">//最大顶点数</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OK</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> VerTexType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span>  ArcType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span>  status<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> OtherInfo<span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">//和边相关的信息 </span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> vexs<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> arcs<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> vexnum<span class=\"token punctuation\">,</span>arcnum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>AMGraph<span class=\"token punctuation\">;</span>\nstatus <span class=\"token function\">LocateVex</span><span class=\"token punctuation\">(</span>AMGraph G<span class=\"token punctuation\">,</span>VerTexType u<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>u<span class=\"token operator\">==</span>G<span class=\"token punctuation\">.</span>vexs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//邻接矩阵表示法</span>\nstatus <span class=\"token function\">CreateUDN</span><span class=\"token punctuation\">(</span>AMGraph <span class=\"token operator\">&amp;</span>G<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入总顶点数，总边数中间以空格隔开:\"</span><span class=\"token punctuation\">;</span>\n   cin<span class=\"token operator\">&gt;&gt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token operator\">&gt;&gt;</span>G<span class=\"token punctuation\">.</span>arcnum<span class=\"token punctuation\">;</span>   \n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"输入点的名称 \"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     cin<span class=\"token operator\">&gt;&gt;</span>G<span class=\"token punctuation\">.</span>vexs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>          \n     \n   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//初始化邻接矩阵，边的权值均为Maxint </span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t    G<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>MaxInt<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>arcnum<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//构造邻接矩阵 </span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">&gt;&gt;</span>v1<span class=\"token operator\">&gt;&gt;</span>v2<span class=\"token operator\">&gt;&gt;</span>w<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//输入一条边依附的顶点及权值 </span>\n\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token function\">LocateVex</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token function\">LocateVex</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//确定v1，v1在G中的位置，即顶点数组的下标 </span>\n\t\tG<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>w<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//边&lt;v1,v2&gt;的权值置为w </span>\n\t\tG<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>G<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//置&lt;v1,v2&gt;的对称边&lt;v2,v1&gt;的权值为w\t</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ShortestPath_DTJ</span><span class=\"token punctuation\">(</span>AMGraph G<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span>G<span class=\"token punctuation\">.</span>vexnum<span class=\"token punctuation\">;</span><span class=\"token comment\">//顶点数 </span>\n\t<span class=\"token keyword\">int</span> S<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>Path<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>min<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>v<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>v<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tS<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>D<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>G<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>v0<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//S[i]=1表示点已知 </span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>MaxInt<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//有弧 </span>\n\t\t\tPath<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v0<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//点的前驱 </span>\n\t\t<span class=\"token keyword\">else</span> Path<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tS<span class=\"token punctuation\">[</span>v0<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>D<span class=\"token punctuation\">[</span>v0<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//初始化结束 </span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tmin<span class=\"token operator\">=</span>MaxInt<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> w<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>w<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>w<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>S<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>D<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>min<span class=\"token punctuation\">)</span>\n\t\t\t\tv<span class=\"token operator\">=</span>w<span class=\"token punctuation\">;</span>min<span class=\"token operator\">=</span>D<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tS<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>w<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>w<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>w<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>S<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>G<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>D<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tD<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>D<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>G<span class=\"token punctuation\">.</span>arcs<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tPath<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\tcout<span class=\"token operator\">&lt;&lt;</span>D<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tAMGraph G<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CreateUDN</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ShortestPath_DTJ</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n5 7\n0 1 2 3 4\n0 1 10\n0 2 3\n0 3 20\n1 3 5\n2 1 2\n2 4 15\n3 4 11\n结果：18 \n*/</span>\n</code></pre>\n<h2><a id=\"56_dijstra_3797\"></a>5.6 dijstra算法文件读取实现</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">100</span> </span><span class=\"token comment\">//最大顶点数</span></span>\nFILE <span class=\"token operator\">*</span>fr<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>fw<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token comment\">//边 的信息 </span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">;</span><span class=\"token comment\">//顶点 </span>\n\t<span class=\"token keyword\">int</span> dist<span class=\"token punctuation\">;</span><span class=\"token comment\">//权值 </span>\n<span class=\"token punctuation\">}</span>Edge<span class=\"token punctuation\">;</span>\t\nEdge edge<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//最短路径算法 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ShortestPath_DTJ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>dis<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pre<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//顶点数 边数 起点 终点 </span>\n\tfr<span class=\"token operator\">=</span><span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:/Users/dell/Desktop/dijstra.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>e<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//输入边的信息（点，权值） </span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d%d%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>o<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>u<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpre<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>o<span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//初始化</span>\n\t\tdis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> o <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>e<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dis<span class=\"token punctuation\">[</span>edge<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>dis<span class=\"token punctuation\">[</span>edge<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>edge<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dist<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tdis<span class=\"token punctuation\">[</span>edge<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dis<span class=\"token punctuation\">[</span>edge<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>edge<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dist<span class=\"token punctuation\">;</span>\n\t\t\t\tpre<span class=\"token punctuation\">[</span>edge<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>edge<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>u<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\tfw<span class=\"token operator\">=</span><span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:/Users/dell/Desktop/out.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>p<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>fw<span class=\"token punctuation\">,</span><span class=\"token string\">\"V%d到V%d的最短距离为：%d\\n\"</span><span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">ShortestPath_DTJ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0c564f8d7ddb4114a40d141189624c7c.png\"/></p>\n<h2><a id=\"57__3855\"></a>5.7 拓扑排序算法实现</h2>\n<p>拓扑排序即是将AOV-网中所有顶点排成一个线性序列。AOV-网即是用顶点表示活动，用弧表示活动间的优先关系的有向图</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXVEX</span> <span class=\"token expression\"><span class=\"token number\">20</span></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> VerType<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//顶点值类型</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">EdgeNode</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> adjvex<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//邻接点域，存储该顶点对应的下标</span>\n\t<span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//用于存储权值，对于非网图可以不需要</span>\n\tEdgeNode<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//下一个结点 </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">VertexNode</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> in<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//入度</span>\n\tVerType data<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//值</span>\n\tEdgeNode<span class=\"token operator\">*</span> firstedge<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//邻接表头指针 </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">{<!-- --></span>\n\tVertexNode vers<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> numVertexes<span class=\"token punctuation\">,</span> numEdges<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//顶点数和边数 </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//拓扑排序，若G没有回路，则输出拓扑排序序列并返回OK，若有回路返回ERROR </span>\nbool <span class=\"token function\">TopologicalSort</span><span class=\"token punctuation\">(</span>Graph<span class=\"token operator\">*</span> G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tEdgeNode<span class=\"token operator\">*</span> e<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> gettop<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//栈指针下标</span>\n\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//统计输出顶点个数</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> stack<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//存储入度为0的顶点</span>\n\tstack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>G<span class=\"token operator\">-&gt;</span>numVertexes <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token operator\">-&gt;</span>numVertexes<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//遍历所有结点 </span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>G<span class=\"token operator\">-&gt;</span>vers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>in <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\tstack<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//将入度为0的顶点入栈</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>top <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tgettop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//出栈</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c \"</span><span class=\"token punctuation\">,</span>G<span class=\"token operator\">-&gt;</span>vers<span class=\"token punctuation\">[</span>gettop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//统计输出顶点数</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">=</span>G<span class=\"token operator\">-&gt;</span>vers<span class=\"token punctuation\">[</span>gettop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstedge<span class=\"token punctuation\">;</span> e<span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> e<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//弧表遍历</span>\n\t\t\tk <span class=\"token operator\">=</span> e<span class=\"token operator\">-&gt;</span>adjvex<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>G<span class=\"token operator\">-&gt;</span>vers<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//将k号顶点邻接点的入度减1</span>\n\t\t\t\tstack<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//若为0则入栈，以便下次循环输出 </span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> G<span class=\"token operator\">-&gt;</span>numVertexes<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//如果count小于顶点数，说明存在环</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 图初始化 */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">CreateGraph</span><span class=\"token punctuation\">(</span>Graph<span class=\"token operator\">*</span> G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入顶点数和边数：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>G<span class=\"token operator\">-&gt;</span>numVertexes<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>G<span class=\"token operator\">-&gt;</span>numEdges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入顶点值：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token operator\">-&gt;</span>numVertexes<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//吃掉回车</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>G<span class=\"token operator\">-&gt;</span>vers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//初始化图头结点指针和入度值 </span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token operator\">-&gt;</span>numVertexes<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tG<span class=\"token operator\">-&gt;</span>vers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstedge <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\tG<span class=\"token operator\">-&gt;</span>vers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>in <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//入度为0 </span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入边：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token operator\">-&gt;</span>numEdges<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tEdgeNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>EdgeNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>EdgeNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnewNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> G<span class=\"token operator\">-&gt;</span>vers<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstedge <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">?</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">:</span> G<span class=\"token operator\">-&gt;</span>vers<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstedge<span class=\"token punctuation\">;</span>\n\t\tnewNode<span class=\"token operator\">-&gt;</span>adjvex <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n\t\tG<span class=\"token operator\">-&gt;</span>vers<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstedge <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n\t\tG<span class=\"token operator\">-&gt;</span>vers<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>in<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//入度+1 </span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\n\tGraph<span class=\"token operator\">*</span> G <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Graph<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CreateGraph</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">TopologicalSort</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"拓扑排序完成！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"图存在环\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n6 8\na\nb\nc\nd\ne\nf\n0 1\n0 2\n0 4\n1 3\n3 2\n2 4\n4 5\n3 5\n结果 a b d c e f 拓扑排序完成！\n12 16\na\nb\nc\nd\ne \nf \ng \nh \ni \nj\nk  \nl \n0 3\n3 4\n0 1\n1 2\n2 4\n2 6\n4 6\n0 2\n0 11\n2 7\n8 11\n8 9\n9 11\n8 10\n10 5\n5 7\ni j k f a d b c e g h l   \n*/</span>\n</code></pre>\n<h1><a id=\"6_3999\"></a>6.查找</h1>\n<h2><a id=\"61_4001\"></a>6.1用递归和非递归实现二分查找</h2>\n<p>二分查找又称折半查找，要求线性表采用顺序存储，且表中元素按关键字有序排列<br/> 测试样例：<br/> 6<br/> 1 4 5 6 7 9<br/> 5</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXSIZE</span> <span class=\"token expression\"><span class=\"token number\">50</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">Status</span> <span class=\"token expression\"><span class=\"token keyword\">int</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">InfoType</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> </span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> key<span class=\"token punctuation\">;</span>\n\tInfoType otherinfo<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>ElemType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{<!-- --></span>\n\tElemType <span class=\"token operator\">*</span>R<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>SSTable<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//顺序表初始化 </span>\nStatus <span class=\"token function\">InitList</span><span class=\"token punctuation\">(</span>SSTable <span class=\"token operator\">&amp;</span>ST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tST<span class=\"token punctuation\">.</span>R<span class=\"token operator\">=</span>new ElemType<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tST<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token comment\">//二分查找非递归 </span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Search_Bin</span><span class=\"token punctuation\">(</span>SSTable ST<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> low<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>high<span class=\"token operator\">=</span>ST<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;=</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tmid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">+</span>high<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">==</span>ST<span class=\"token punctuation\">.</span>R<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">&lt;</span>ST<span class=\"token punctuation\">.</span>R<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> high<span class=\"token operator\">=</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> low<span class=\"token operator\">=</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//递归 </span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>SSTable ST<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> high<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;=</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tmid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">+</span>high<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">==</span>ST<span class=\"token punctuation\">.</span>R<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">&lt;</span>ST<span class=\"token punctuation\">.</span>R<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\thigh<span class=\"token operator\">=</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tlow<span class=\"token operator\">=</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tSSTable ST<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">InitList</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>choice<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入表的长度：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ST<span class=\"token punctuation\">.</span>R<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要查找的数：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tST<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入选项 1：非递归      2：递归\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">Search_Bin</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已找到，在表中%d位\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">Search_Bin</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t\t\t   <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已找到，在表中%d位\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>6.2</p>\n<h1><a id=\"8_4082\"></a>8.其他</h1>\n<h2><a id=\"81_4084\"></a>81学生成绩管理系统</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span> </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n\n<span class=\"token comment\">//定义学生结构体 </span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{<!-- --></span> \n     <span class=\"token keyword\">char</span> ID<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n     <span class=\"token keyword\">char</span> Name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n     <span class=\"token keyword\">float</span> Mark1<span class=\"token punctuation\">;</span> \n     <span class=\"token keyword\">float</span> Mark2<span class=\"token punctuation\">;</span> \n     <span class=\"token keyword\">float</span> Mark3<span class=\"token punctuation\">;</span> \n     <span class=\"token keyword\">float</span> Average<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n<span class=\"token comment\">//声明学生数组及学生数量 </span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> students<span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//求平均值/</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">Avg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>Mark1<span class=\"token operator\">+</span>stu<span class=\"token punctuation\">.</span>Mark2<span class=\"token operator\">+</span>stu<span class=\"token punctuation\">.</span>Mark3<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span> \n<span class=\"token comment\">//通过学号返回数组下标 </span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Student_SearchByIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> id<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> \n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n     <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n         <span class=\"token punctuation\">{<!-- --></span> \n              <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span> \n     <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token punctuation\">}</span> \n<span class=\"token comment\">//通过姓名返回数组下标 </span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Student_SearchByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> \n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n     <span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n         <span class=\"token punctuation\">{<!-- --></span> \n              <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span> \n     <span class=\"token punctuation\">}</span> \n     <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span> \n<span class=\"token comment\">//显示单条学生记录 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Student_DisplaySingle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span> \n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%10s%20s%16s%16s%16s%20s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"学号\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"姓名\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"数学成绩\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"英语成绩\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"C语言成绩\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"平均成绩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%10s%20s%16.2f%16.2f%16.2f%20.2f\\n\"</span><span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> \n              students<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Mark1<span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Mark2<span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Mark3<span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Average<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//插入学生信息</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Student_Insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n     <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入学号:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>students<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入姓名:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>students<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数学成绩:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>students<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Mark1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入英语成绩:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>students<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Mark2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入C语言成绩:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>students<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Mark3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         students<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Average<span class=\"token operator\">=</span><span class=\"token function\">Avg</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是否继续?(y/n)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span> \n     <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//修改学生信息</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Student_Modify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n     <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token keyword\">char</span> id<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要修改的学生的学号:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         index<span class=\"token operator\">=</span><span class=\"token function\">Student_SearchByIndex</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n              <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生不存在!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span> \n         <span class=\"token keyword\">else</span>\n         <span class=\"token punctuation\">{<!-- --></span> \n              <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你要修改的学生信息为:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">Student_DisplaySingle</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-- 请输入新值--\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入学号:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>students<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入姓名:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>students<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数学成绩:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>students<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Mark1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入英语成绩:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>students<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Mark2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入C语言成绩:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>students<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Mark3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              students<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Average<span class=\"token operator\">=</span><span class=\"token function\">Avg</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是否继续?(y/n)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span> \n     <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//删除学生信息 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Student_Delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> \n     <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token keyword\">char</span> id<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要删除的学生的学号:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         index<span class=\"token operator\">=</span><span class=\"token function\">Student_SearchByIndex</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n              <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生不存在!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span> \n         <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span> \n              <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你要删除的学生信息为:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">Student_DisplaySingle</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是否真的要删除?(y/n)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n                   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n                       students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>students<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//把后边的对象都向前移动 </span>\n                   <span class=\"token punctuation\">}</span> \n                   num<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> \n              <span class=\"token punctuation\">}</span> \n              <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是否继续?(y/n)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span> \n     <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//按姓名查询</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Student_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n     <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要查询的学生的姓名:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         index<span class=\"token operator\">=</span><span class=\"token function\">Student_SearchByName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n              <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生不存在!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span> \n         <span class=\"token keyword\">else</span> \n         <span class=\"token punctuation\">{<!-- --></span> \n              <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你要查询的学生信息为:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">Student_DisplaySingle</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是否继续?(y/n)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//按平均值排序 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Student_SortByAverage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span> \n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> tmp<span class=\"token punctuation\">;</span> \n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>num<span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Average<span class=\"token operator\">&lt;</span>students<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Average<span class=\"token punctuation\">)</span> \n              <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t       tmp<span class=\"token operator\">=</span>students<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n                   students<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>students<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n                   students<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">;</span> \n              <span class=\"token punctuation\">}</span> \n         <span class=\"token punctuation\">}</span> \n     <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//显示学生信息 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Student_Display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> \n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%20s%20s%16s%16s%16s%20s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"学号\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"姓名\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"数学成绩\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"英语成绩\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"C语言成绩\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"平均成绩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%20s%20s%16.2f%16.2f%16.2f%20.2f\\n\"</span><span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> \n              students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Mark1<span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Mark2<span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Mark3<span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Average<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n     <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//将学生信息从文件读出</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">IO_ReadInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n     FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span> \n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> \n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fp<span class=\"token operator\">=</span><span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Database.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不能打开文件!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> \n     <span class=\"token punctuation\">}</span>\n \n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>fp<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n         num<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n     <span class=\"token punctuation\">}</span> \n     <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n         <span class=\"token punctuation\">{<!-- --></span> \n              <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span> \n     <span class=\"token punctuation\">}</span> \n     <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//将学生信息写入文件</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">IO_WriteInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n     FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span> \n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> \n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fp<span class=\"token operator\">=</span><span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Database.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不能打开文件!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> \n     <span class=\"token punctuation\">}</span> \n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>fp<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入文件错误!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n     <span class=\"token punctuation\">}</span> \n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>fp<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n         <span class=\"token punctuation\">{<!-- --></span> \n              <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入文件错误!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>    \n    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//主程序 </span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n     <span class=\"token keyword\">int</span> choice<span class=\"token punctuation\">;</span> \n     <span class=\"token function\">IO_ReadInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n     <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n------ 河南理工大学学生成绩管理系统------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1. 增加学生记录\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2. 修改学生记录\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3. 删除学生记录\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4. 按姓名查询学生记录\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5. 按平均成绩排序\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6. 退出\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请选择(1-6):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> \n              <span class=\"token function\">Student_Insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> \n              <span class=\"token function\">Student_Modify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> \n              <span class=\"token function\">Student_Delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span> \n              <span class=\"token function\">Student_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span> \n              <span class=\"token function\">Student_SortByAverage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token function\">Student_Display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span> \n              <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span> \n         <span class=\"token function\">IO_WriteInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n     <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"82_4367\"></a>8.2快速排序时间计算</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">clock_t</span> <span class=\"token class-name\">start_t</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">finish_t</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> <span class=\"token class-name\">total_t</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tFILE<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入所要读取的数量：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">start_t</span> <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tfp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100000.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//for (i = 0; i &lt; n; i++)</span>\n\t\t<span class=\"token comment\">//printf(\"%d \", a[i]);</span>\n\t<span class=\"token class-name\">finish_t</span> <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">total_t</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">finish_t</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">start_t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> CLOCKS_PER_SEC<span class=\"token punctuation\">;</span><span class=\"token comment\">//将时间转换为秒</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CPU 占用的总时间：%lf\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">total_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">/*240.336*/</span>\n\t\n<span class=\"token keyword\">void</span> <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> low<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> high<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> temp<span class=\"token punctuation\">)</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>temp<span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&gt;=</span> high<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"83_4425\"></a>8.3冰雹猜想</h2>\n<p>一个正整数，如果是奇数，则乘以3再加1，如果是偶数就除以2，若干次后变为1，求进行的次数</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>time<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tn<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tn<span class=\"token operator\">&gt;&gt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\ttime<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>5.4结构体输入输出</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">students</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> math<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>stu<span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入个数\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入姓名 成绩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %f\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>stu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>stu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %f\\n\"</span><span class=\"token punctuation\">,</span>stu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>stu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}