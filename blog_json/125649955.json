{"blogid": "125649955", "writerAge": "码龄9年", "writerBlogNum": "116", "writerCollect": "177", "writerComment": "113", "writerFan": "25", "writerGrade": "4级", "writerIntegral": "1248", "writerName": "故里2130", "writerProfileAdress": "writer_image\\profile_125649955.jpg", "writerRankTotal": "16110", "writerRankWeekly": "6433", "writerThumb": "37", "writerVisitNum": "75990", "blog_read_count": "2270", "blog_time": "已于 2022-07-07 14:17:27 修改", "blog_title": "c#使用MQTT通信", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>mqtt的功能请看百度百科，<a href=\"https://baike.baidu.com/item/MQTT/3618851?fr=aladdin\" title=\"MQTT_百度百科\">MQTT_百度百科</a>。</p>\n<p>这里简单说一下，mqtt的功能就是一个发布/订阅的功能</p>\n<p>例如，接下来，我们做一个例子。现在有A服务器作为发布方，B客户端作为订阅方。如果A发布了消息，那么会向B发送消息，反之亦然，从而进行通信的功能。</p>\n<p>一、A服务端代码</p>\n<p>1.建立一个.net5的web api项目</p>\n<p>2.nuget引用mqttnet</p>\n<p><img alt=\"\" height=\"380\" src=\"image\\a9f00c29926a43f4a88b7ecfc90d1f9b.png\" width=\"1200\"/></p>\n<p>3.MqttService代码</p>\n<pre><code>using MQTTnet;\nusing MQTTnet.Protocol;\nusing MQTTnet.Server;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace mqtt\n{\n    public class MqttService\n    {\n        public static MqttServer _mqttServer { get; set; }\n\n        public static void PublishData(string data)\n        {\n            var message = new MqttApplicationMessage\n            {\n                Topic = \"topic1\",\n                Payload = Encoding.Default.GetBytes(data),\n                QualityOfServiceLevel = MqttQualityOfServiceLevel.AtLeastOnce,\n                Retain = true  // 服务端是否保留消息。true为保留，如果有新的订阅者连接，就会立马收到该消息。\n            };\n\n            _mqttServer.InjectApplicationMessage(new InjectedMqttApplicationMessage(message) // 发送消息给有订阅 topic_01的客户端\n            {\n                SenderClientId = \"Server_01\"\n            }).GetAwaiter().GetResult();\n        }\n\n    }\n}\n</code></pre>\n<p>4.MqttHostService代码</p>\n<pre><code class=\"language-cs\">using Microsoft.Extensions.Hosting;\nusing MQTTnet;\nusing MQTTnet.Protocol;\nusing MQTTnet.Server;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace mqtt\n{\n    public class MqttHostService : IHostedService, IDisposable\n    {\n        public void Dispose()\n        {\n\n        }\n        const string ServerClientId = \"SERVER\";\n        public Task StartAsync(CancellationToken cancellationToken)\n        {\n            MqttServerOptionsBuilder optionsBuilder = new MqttServerOptionsBuilder();\n            optionsBuilder.WithDefaultEndpoint();\n            //optionsBuilder.WithDefaultEndpointBoundIPAddress(IPAddress.Parse(\"127.0.0.1\"));\n            optionsBuilder.WithDefaultEndpointPort(10086); // 设置 服务端 端口号\n            optionsBuilder.WithConnectionBacklog(1000); // 最大连接数\n            MqttServerOptions options = optionsBuilder.Build();\n\n            MqttService._mqttServer = new MqttFactory().CreateMqttServer(options);\n\n            MqttService._mqttServer.ClientConnectedAsync += _mqttServer_ClientConnectedAsync; //客户端连接事件\n            MqttService._mqttServer.ClientDisconnectedAsync += _mqttServer_ClientDisconnectedAsync; // 客户端关闭事件\n            MqttService._mqttServer.ApplicationMessageNotConsumedAsync += _mqttServer_ApplicationMessageNotConsumedAsync; // 消息接收事件\n\n            MqttService._mqttServer.ClientSubscribedTopicAsync += _mqttServer_ClientSubscribedTopicAsync; // 客户端订阅主题事件\n            MqttService._mqttServer.ClientUnsubscribedTopicAsync += _mqttServer_ClientUnsubscribedTopicAsync; // 客户端取消订阅事件\n            MqttService._mqttServer.StartedAsync += _mqttServer_StartedAsync; // 启动后事件\n            MqttService._mqttServer.StoppedAsync += _mqttServer_StoppedAsync; // 关闭后事件\n            MqttService._mqttServer.InterceptingPublishAsync += _mqttServer_InterceptingPublishAsync; // 消息接收事件\n            MqttService._mqttServer.ValidatingConnectionAsync += _mqttServer_ValidatingConnectionAsync; // 用户名和密码验证有关\n\n            MqttService._mqttServer.StartAsync();\n            return Task.CompletedTask;\n        }\n\n        /// &lt;summary&gt;\n        /// 客户端订阅主题事件\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"arg\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private Task _mqttServer_ClientSubscribedTopicAsync(ClientSubscribedTopicEventArgs arg)\n        {\n            Console.WriteLine($\"ClientSubscribedTopicAsync：客户端ID=【{arg.ClientId}】订阅的主题=【{arg.TopicFilter}】 \");\n            return Task.CompletedTask;\n        }\n\n        /// &lt;summary&gt;\n        /// 关闭后事件\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"arg\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private Task _mqttServer_StoppedAsync(EventArgs arg)\n        {\n            Console.WriteLine($\"StoppedAsync：MQTT服务已关闭……\");\n            return Task.CompletedTask;\n        }\n\n        /// &lt;summary&gt;\n        /// 用户名和密码验证有关\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"arg\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private Task _mqttServer_ValidatingConnectionAsync(ValidatingConnectionEventArgs arg)\n        {\n            arg.ReasonCode = MqttConnectReasonCode.Success;\n            if ((arg.Username ?? string.Empty) != \"admin\" || (arg.Password ?? String.Empty) != \"123456\")\n            {\n                arg.ReasonCode = MqttConnectReasonCode.Banned;\n                Console.WriteLine($\"ValidatingConnectionAsync：客户端ID=【{arg.ClientId}】用户名或密码验证错误 \");\n\n            }\n            return Task.CompletedTask;\n        }\n\n        /// &lt;summary&gt;\n        /// 消息接收事件\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"arg\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private Task _mqttServer_InterceptingPublishAsync(InterceptingPublishEventArgs arg)\n        {\n            if (string.Equals(arg.ClientId, ServerClientId))\n            {\n                return Task.CompletedTask;\n            }\n\n            Console.WriteLine($\"InterceptingPublishAsync：客户端ID=【{arg.ClientId}】 Topic主题=【{arg.ApplicationMessage.Topic}】 消息=【{Encoding.UTF8.GetString(arg.ApplicationMessage.Payload)}】 qos等级=【{arg.ApplicationMessage.QualityOfServiceLevel}】\");\n            return Task.CompletedTask;\n\n        }\n\n        /// &lt;summary&gt;\n        /// 启动后事件\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"arg\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private Task _mqttServer_StartedAsync(EventArgs arg)\n        {\n            Console.WriteLine($\"StartedAsync：MQTT服务已启动……\");\n            return Task.CompletedTask;\n        }\n\n        /// &lt;summary&gt;\n        /// 客户端取消订阅事件\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"arg\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private Task _mqttServer_ClientUnsubscribedTopicAsync(ClientUnsubscribedTopicEventArgs arg)\n        {\n            Console.WriteLine($\"ClientUnsubscribedTopicAsync：客户端ID=【{arg.ClientId}】已取消订阅的主题=【{arg.TopicFilter}】  \");\n            return Task.CompletedTask;\n        }\n\n        private Task _mqttServer_ApplicationMessageNotConsumedAsync(ApplicationMessageNotConsumedEventArgs arg)\n        {\n            Console.WriteLine($\"ApplicationMessageNotConsumedAsync：发送端ID=【{arg.SenderId}】 Topic主题=【{arg.ApplicationMessage.Topic}】 消息=【{Encoding.UTF8.GetString(arg.ApplicationMessage.Payload)}】 qos等级=【{arg.ApplicationMessage.QualityOfServiceLevel}】\");\n            return Task.CompletedTask;\n\n        }\n\n        /// &lt;summary&gt;\n        /// 客户端断开时候触发\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"arg\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        /// &lt;exception cref=\"NotImplementedException\"&gt;&lt;/exception&gt;\n        private Task _mqttServer_ClientDisconnectedAsync(ClientDisconnectedEventArgs arg)\n        {\n            Console.WriteLine($\"ClientDisconnectedAsync：客户端ID=【{arg.ClientId}】已断开, 地址=【{arg.Endpoint}】  \");\n            return Task.CompletedTask;\n\n        }\n\n        /// &lt;summary&gt;\n        /// 客户端连接时候触发\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"arg\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private Task _mqttServer_ClientConnectedAsync(ClientConnectedEventArgs arg)\n        {\n            Console.WriteLine($\"ClientConnectedAsync：客户端ID=【{arg.ClientId}】已连接, 用户名=【{arg.UserName}】地址=【{arg.Endpoint}】  \");\n            return Task.CompletedTask;\n        }\n\n        public Task StopAsync(CancellationToken cancellationToken)\n        {\n            return Task.CompletedTask;\n        }\n    }\n}\n</code></pre>\n<p>5.在Startup注入代码</p>\n<p><img alt=\"\" height=\"488\" src=\"image\\32c99f689ba54728add2fb1148e4bb9f.png\" width=\"1200\"/></p>\n<pre><code class=\"language-cs\"> services.AddHostedService&lt;MqttHostService&gt;();</code></pre>\n<p>6.增加一个服务器发送消息的方法</p>\n<p><img alt=\"\" height=\"498\" src=\"image\\63fc0de4ec4f4e628298d061aa551daf.png\" width=\"1200\"/></p>\n<pre><code class=\"language-cs\">  public IActionResult Test(string data)\n        {\n            MqttService.PublishData(data);\n            return Ok();\n        }</code></pre>\n<p> 二、B客户端</p>\n<p>1.建立一个.net5  web api项目</p>\n<p>2.nuget引用mqttnet</p>\n<p><img alt=\"\" height=\"309\" src=\"image\\e9b69b4e814742598589d02ba5f0121d.png\" width=\"1200\"/></p>\n<p> 3.MqttClientService代码</p>\n<pre><code class=\"language-cs\">using MQTTnet;\nusing MQTTnet.Client;\nusing MQTTnet.Protocol;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace mqttClient\n{\n    public class MqttClientService\n    {\n        public static IMqttClient _mqttClient;\n        public void MqttClientStart()\n        {\n            var optionsBuilder = new MqttClientOptionsBuilder()\n                .WithTcpServer(\"127.0.0.1\", 10086) // 要访问的mqtt服务端的 ip 和 端口号\n                .WithCredentials(\"admin\", \"123456\") // 要访问的mqtt服务端的用户名和密码\n                .WithClientId(\"testclient02\") // 设置客户端id\n                .WithCleanSession()\n                .WithTls(new MqttClientOptionsBuilderTlsParameters\n                {\n                    UseTls = false  // 是否使用 tls加密\n                });\n\n            var clientOptions = optionsBuilder.Build();\n            _mqttClient = new MqttFactory().CreateMqttClient();\n\n            _mqttClient.ConnectedAsync += _mqttClient_ConnectedAsync; // 客户端连接成功事件\n            _mqttClient.DisconnectedAsync += _mqttClient_DisconnectedAsync; // 客户端连接关闭事件\n            _mqttClient.ApplicationMessageReceivedAsync += _mqttClient_ApplicationMessageReceivedAsync; // 收到消息事件\n\n            _mqttClient.ConnectAsync(clientOptions);\n\n\n        }\n\n        /// &lt;summary&gt;\n        /// 客户端连接关闭事件\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"arg\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private Task _mqttClient_DisconnectedAsync(MqttClientDisconnectedEventArgs arg)\n        {\n            Console.WriteLine($\"客户端已断开与服务端的连接……\");\n            return Task.CompletedTask;\n        }\n\n        /// &lt;summary&gt;\n        /// 客户端连接成功事件\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"arg\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private Task _mqttClient_ConnectedAsync(MqttClientConnectedEventArgs arg)\n        {\n            Console.WriteLine($\"客户端已连接服务端……\");\n\n            // 订阅消息主题\n            // MqttQualityOfServiceLevel: （QoS）:  0 最多一次，接收者不确认收到消息，并且消息不被发送者存储和重新发送提供与底层 TCP 协议相同的保证。\n            // 1: 保证一条消息至少有一次会传递给接收方。发送方存储消息，直到它从接收方收到确认收到消息的数据包。一条消息可以多次发送或传递。\n            // 2: 保证每条消息仅由预期的收件人接收一次。级别2是最安全和最慢的服务质量级别，保证由发送方和接收方之间的至少两个请求/响应（四次握手）。\n            _mqttClient.SubscribeAsync(\"topic1\", MqttQualityOfServiceLevel.AtLeastOnce); //topic_02\n\n            return Task.CompletedTask;\n        }\n\n        /// &lt;summary&gt;\n        /// 收到消息事件\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"arg\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private Task _mqttClient_ApplicationMessageReceivedAsync(MqttApplicationMessageReceivedEventArgs arg)\n        {\n            Console.WriteLine($\"ApplicationMessageReceivedAsync：客户端ID=【{arg.ClientId}】接收到消息。 Topic主题=【{arg.ApplicationMessage.Topic}】 消息=【{Encoding.UTF8.GetString(arg.ApplicationMessage.Payload)}】 qos等级=【{arg.ApplicationMessage.QualityOfServiceLevel}】\");\n            return Task.CompletedTask;\n        }\n\n        public void Publish(string data)\n        {\n            var message = new MqttApplicationMessage\n            {\n                Topic = \"topic2\",\n                Payload = Encoding.Default.GetBytes(data),\n                QualityOfServiceLevel = MqttQualityOfServiceLevel.AtLeastOnce,\n                Retain = true  // 服务端是否保留消息。true为保留，如果有新的订阅者连接，就会立马收到该消息。\n            };\n            _mqttClient.PublishAsync(message);\n        }\n    }\n}\n</code></pre>\n<p>4.启动的时候，实例化调用，并且发送消息456</p>\n<p><img alt=\"\" height=\"418\" src=\"image\\68d411dc402542d7b73fe6e70bf4dffc.png\" width=\"1200\"/>  三、效果</p>\n<p>1.同时启动2个项目</p>\n<p><img alt=\"\" height=\"868\" src=\"image\\28f51ec05d5444a391d8fcc2bd34f348.png\" width=\"1200\"/></p>\n<p> 2.在服务端的api中输入发送的消息。</p>\n<p><img alt=\"\" height=\"722\" src=\"image\\91616e4f7f034c81ab645f578aaad8eb.png\" width=\"1200\"/></p>\n<p>3.可以看到B客户端收到了消息</p>\n<p><img alt=\"\" height=\"519\" src=\"image\\be69b7fc6f2842d38cd0cb157fb4fc42.png\" width=\"993\"/></p>\n<p>4.我在B客户端中点击回车，就把刚才说的456发送给了A服务端。</p>\n<p><img alt=\"\" height=\"519\" src=\"image\\078f9e861ebc4e55869a7a8ced76b2b5.png\" width=\"993\"/></p>\n<p><span style=\"color:#fe2c24;\"> 注意：一个发布，一个订阅，发布的Topic和订阅的Topic一定要是同一个，就如同打电话一样，双方要在同一条线上。</span></p>\n<p><span style=\"color:#fe2c24;\">如果运行不了，就换一台电脑，可能是系统组件的问题，我就遇到了这个问题。</span></p>\n<p>拓展</p>\n<p>实际上，服务器的代码可以不用写，我们只用写客户端的代码就行了。客户端控制发布和订阅的Topic即可，服务器只是一个转换的作用。</p>\n<p>一、服务器安装</p>\n<p>1.目前MQTT代理的主流平台有下面几个</p>\n<ul><li>Mosquitto：<a href=\"https://link.zhihu.com/?target=https%3A//mosquitto.org/\" title=\"https://mosquitto.org/\">https://mosquitto.org/</a></li><li>VerneMQ：<a href=\"https://link.zhihu.com/?target=https%3A//vernemq.com/\" title=\"https://vernemq.com/\">https://vernemq.com/</a></li><li>EMQTT：<a href=\"https://link.zhihu.com/?target=http%3A//emqtt.io/\" title=\"http://emqtt.io/\">http://emqtt.io/</a></li></ul>\n<p> 2.我们选择第一个进行下载，直接安装</p>\n<p><img alt=\"\" height=\"623\" src=\"image\\98024d90c8ee42a0ade5a480ea966392.png\" width=\"1200\"/></p>\n<p>3.安装完成后，进入文件夹，按住<code>Shift</code>，右键鼠标点击空白处，然后打开<code>Powershell</code>，正常打开一个终端软件即可</p>\n<p><img alt=\"\" height=\"410\" src=\"image\\dd38a1c863354dfe8b2e349c4d1bf785.png\" width=\"710\"/></p>\n<ul><li>输入<code>./mosquitto.exe -h</code> 可以查看相应的帮助；</li><li>输入<code>./mosquitto.exe -p 10086</code>，就开启了MQTT服务，监听的地址是<code>127.0.0.1</code>，端口是<code>10086</code>；</li></ul>\n<p> <img alt=\"\" height=\"445\" src=\"image\\dc35cdb481924b1f8ece27701fdde319.png\" width=\"549\"/></p>\n<p>二、客户端依然使用上面的代码</p>\n<p>1.因为我们要进行2个客户端直接通信，那么就要修改对应发布和订阅的Topic </p>\n<p>客户端1</p>\n<p><img alt=\"\" height=\"48\" src=\"image\\72edd14d147e49f8a6515ac9b6c0037a.png\" width=\"594\"/></p>\n<p><img alt=\"\" height=\"60\" src=\"image\\1fe80a38b15c4662aab625901db2047b.png\" width=\"714\"/></p>\n<p><img alt=\"\" height=\"50\" src=\"image\\5c27dfc700f64006875668567bb28e32.png\" width=\"691\"/></p>\n<p>修改3个地方，生产一个EXE </p>\n<p>客户端2 </p>\n<p><img alt=\"\" height=\"58\" src=\"image\\8db681de70314c0fab8b1187527eb235.png\" width=\"692\"/></p>\n<p><img alt=\"\" height=\"45\" src=\"image\\34c6428faebd4704aaf10b46dcc781f5.png\" width=\"633\"/></p>\n<p><img alt=\"\" height=\"39\" src=\"image\\0318da0391324306bf70be444db0d981.png\" width=\"603\"/></p>\n<p> 修改3个地方，生产一个EXE 。</p>\n<p>2.分别生产了2个文件夹的EXE</p>\n<p><img alt=\"\" height=\"76\" src=\"image\\8b7a014e72ff47199f6873a7be61d16a.png\" width=\"222\"/></p>\n<p>3.分别运行，效果，可以看到2个客户端互相给对方发送了456的消息。</p>\n<p><img alt=\"\" height=\"359\" src=\"image\\c56c4a5935344ef9b3f5463ff84a8e3f.png\" width=\"986\"/></p>\n<p>三、代码链接</p>\n<p><a href=\"https://download.csdn.net/download/u012563853/85936777\" title=\"mqtt，mqtt，mqtt，mqtt-C#文档类资源-CSDN下载\">mqtt，mqtt，mqtt，mqtt-C#文档类资源-CSDN下载</a></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>"}