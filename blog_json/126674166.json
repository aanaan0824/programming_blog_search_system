{"blogid": "126674166", "writerAge": "码龄1年", "writerBlogNum": "152", "writerCollect": "7448", "writerComment": "3386", "writerFan": "23139", "writerGrade": "7级", "writerIntegral": "9736", "writerName": "执久呀", "writerProfileAdress": "writer_image\\profile_126674166.jpg", "writerRankTotal": "1179", "writerRankWeekly": "127", "writerThumb": "4056", "writerVisitNum": "321126", "blog_read_count": "642", "blog_time": "于 2022-09-03 10:05:03 发布", "blog_title": "猿创征文|13万字学会Spring+SpringMVC+Mybatis框架", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"Spring%E4%BB%8B%E7%BB%8D-toc\" style=\"margin-left:0px;\"><a href=\"#Spring%E4%BB%8B%E7%BB%8D\">Spring介绍</a></p>\n<p id=\"Spring%E6%98%AF%E4%BB%80%E4%B9%88-toc\" style=\"margin-left:40px;\"><a href=\"#Spring%E6%98%AF%E4%BB%80%E4%B9%88\">Spring是什么</a></p>\n<p id=\"Spring%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B-toc\" style=\"margin-left:40px;\"><a href=\"#Spring%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B\">Spring发展历程</a></p>\n<p id=\"Spring%E4%BC%98%E5%8A%BF-toc\" style=\"margin-left:40px;\"><a href=\"#Spring%E4%BC%98%E5%8A%BF\">Spring优势</a></p>\n<p id=\"Spring%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#Spring%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%C2%A0\">Spring的体系结构 </a></p>\n<p id=\"%C2%A0Spring%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0Spring%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\"> Spring快速入门</a></p>\n<p id=\"Spring%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4-toc\" style=\"margin-left:40px;\"><a href=\"#Spring%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4\">Spring程序开发步骤</a></p>\n<p id=\"idea%E4%B8%AD%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-toc\" style=\"margin-left:0px;\"><a href=\"#idea%E4%B8%AD%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\">idea中快速入门</a></p>\n<p id=\"%C2%A0Spring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0Spring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"> Spring配置文件</a></p>\n<p id=\"Bean%E6%A0%87%E7%AD%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE-toc\" style=\"margin-left:40px;\"><a href=\"#Bean%E6%A0%87%E7%AD%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE\">Bean标签基本配置</a></p>\n<p id=\"Bean%E6%A0%87%E7%AD%BE%E8%8C%83%E5%9B%B4%E9%85%8D%E7%BD%AE-toc\" style=\"margin-left:40px;\"><a href=\"#Bean%E6%A0%87%E7%AD%BE%E8%8C%83%E5%9B%B4%E9%85%8D%E7%BD%AE\">Bean标签范围配置</a></p>\n<p id=\"%C2%A0%E6%97%A0%E5%8F%82%E6%9E%84%E9%80%A0%E5%88%9B%E5%BB%BA%E6%97%B6%E6%9C%BA-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E6%97%A0%E5%8F%82%E6%9E%84%E9%80%A0%E5%88%9B%E5%BB%BA%E6%97%B6%E6%9C%BA\"> 无参构造创建时机</a></p>\n<p id=\"Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%85%8D%E7%BD%AE-toc\" style=\"margin-left:40px;\"><a href=\"#Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%85%8D%E7%BD%AE\">Bean生命周期配置</a></p>\n<p id=\"%C2%A0Bean%E5%AE%9E%E4%BE%8B%E5%8C%96%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0Bean%E5%AE%9E%E4%BE%8B%E5%8C%96%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F\"> Bean实例化三种方式</a></p>\n<p id=\"%C2%A0%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%C2%A0\">  </a></p>\n<p id=\"Bean%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90-toc\" style=\"margin-left:40px;\"><a href=\"#Bean%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90\">Bean的依赖注入分析</a></p>\n<p id=\"%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%A6%82%E5%BF%B5-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%A6%82%E5%BF%B5\">依赖注入概念</a></p>\n<p id=\"%E5%B0%86UserDao%E6%B3%A8%E5%85%A5%E5%88%B0UserService%E5%86%85%E9%83%A8%E7%9A%84%E6%96%B9%E5%BC%8F-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%B0%86UserDao%E6%B3%A8%E5%85%A5%E5%88%B0UserService%E5%86%85%E9%83%A8%E7%9A%84%E6%96%B9%E5%BC%8F\">将UserDao注入到UserService内部的方式</a></p>\n<p id=\"set%E6%B3%A8%E5%85%A5%E6%96%B9%E6%B3%95%E6%94%B9%E8%BF%9B-toc\" style=\"margin-left:40px;\"><a href=\"#set%E6%B3%A8%E5%85%A5%E6%96%B9%E6%B3%95%E6%94%B9%E8%BF%9B\">set注入方法改进</a></p>\n<p id=\"%C2%A0%E6%9C%89%E5%8F%82%E6%9E%84%E9%80%A0%E6%B3%A8%E5%85%A5%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E6%9C%89%E5%8F%82%E6%9E%84%E9%80%A0%E6%B3%A8%E5%85%A5%E6%96%B9%E6%B3%95\"> 有参构造注入方法</a></p>\n<p id=\"Bean%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:40px;\"><a href=\"#Bean%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">Bean的依赖注入的数据类型</a></p>\n<p id=\"%E9%9B%86%E5%90%88%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5-toc\" style=\"margin-left:40px;\"><a href=\"#%E9%9B%86%E5%90%88%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5\">集合的数据类型注入</a></p>\n<p id=\"%C2%A0%E5%BC%95%E5%85%A5%E5%85%B6%E4%BB%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6(%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91)-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E5%BC%95%E5%85%A5%E5%85%B6%E4%BB%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%28%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%29\"> 引入其他配置文件(分模块开发)</a></p>\n<p id=\"Spring%E7%9A%84%E9%87%8D%E7%82%B9%E9%85%8D%E7%BD%AE-toc\" style=\"margin-left:40px;\"><a href=\"#Spring%E7%9A%84%E9%87%8D%E7%82%B9%E9%85%8D%E7%BD%AE\">Spring的重点配置</a></p>\n<p id=\"Spring%E7%9B%B8%E5%85%B3%E7%9A%84API-toc\" style=\"margin-left:0px;\"><a href=\"#Spring%E7%9B%B8%E5%85%B3%E7%9A%84API\">Spring相关的API</a></p>\n<p id=\"ApplicationContext%E7%9A%84%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB-toc\" style=\"margin-left:40px;\"><a href=\"#ApplicationContext%E7%9A%84%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB\">ApplicationContext的继承体系</a></p>\n<p id=\"ApplicationContext%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB-toc\" style=\"margin-left:80px;\"><a href=\"#ApplicationContext%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB\">ApplicationContext的实现类</a></p>\n<p id=\"getBean()%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8-toc\" style=\"margin-left:40px;\"><a href=\"#getBean%28%29%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8\">getBean()方法使用</a></p>\n<p id=\"%C2%A0Spring%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90(%E8%BF%9E%E6%8E%A5%E6%B1%A0)-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0Spring%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90%28%E8%BF%9E%E6%8E%A5%E6%B1%A0%29\"> Spring配置数据源(连接池)</a></p>\n<p id=\"%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4\">数据源的开发步骤</a></p>\n<p id=\"%C2%A0%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA\"> 加载配置文件方式创建</a></p>\n<p id=\"%E5%B0%86DateSource%E7%9A%84%E5%88%9B%E5%BB%BA%E6%9D%83%E4%BA%A4%E7%BB%99Spring%E5%AE%B9%E5%99%A8%E5%8E%BB%E5%AE%8C%E6%88%90-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%B0%86DateSource%E7%9A%84%E5%88%9B%E5%BB%BA%E6%9D%83%E4%BA%A4%E7%BB%99Spring%E5%AE%B9%E5%99%A8%E5%8E%BB%E5%AE%8C%E6%88%90\">将DateSource的创建权交给Spring容器去完成</a></p>\n<p id=\"%E6%8A%BD%E5%8F%96jdbc%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%8A%BD%E5%8F%96jdbc%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">抽取jdbc配置文件</a></p>\n<p id=\"%C2%A0Spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0Spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91\"> Spring注解开发</a></p>\n<p id=\"Spring%E5%8E%9F%E5%A7%8B%E6%B3%A8%E8%A7%A3-toc\" style=\"margin-left:40px;\"><a href=\"#Spring%E5%8E%9F%E5%A7%8B%E6%B3%A8%E8%A7%A3\">Spring原始注解</a></p>\n<p id=\"%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E6%94%B9%E8%BF%9B-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E6%94%B9%E8%BF%9B\">使用注解改进</a></p>\n<p id=\"%C2%A0%E5%9C%A8UserServiceImpl%E4%B8%AD%E5%85%B6%E4%BB%96%E6%94%B9%E8%BF%9B%E5%86%99%E6%B3%95-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E5%9C%A8UserServiceImpl%E4%B8%AD%E5%85%B6%E4%BB%96%E6%94%B9%E8%BF%9B%E5%86%99%E6%B3%95\"> 在UserServiceImpl中其他改进写法</a></p>\n<p id=\"%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%99%AE%E9%80%9A%E5%80%BC-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%99%AE%E9%80%9A%E5%80%BC\">注解方式注入普通值</a></p>\n<p id=\"%E5%88%9D%E5%A7%8B%E6%96%B9%E6%B3%95%E6%B3%A8%E8%A7%A3%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%88%9D%E5%A7%8B%E6%96%B9%E6%B3%95%E6%B3%A8%E8%A7%A3%C2%A0\">初始方法注解 </a></p>\n<p id=\"Spring%E6%96%B0%E6%B3%A8%E8%A7%A3-toc\" style=\"margin-left:40px;\"><a href=\"#Spring%E6%96%B0%E6%B3%A8%E8%A7%A3\">Spring新注解</a></p>\n<p id=\"%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B3%A8%E8%A7%A3%E6%9B%BF%E6%8D%A2xml%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B3%A8%E8%A7%A3%E6%9B%BF%E6%8D%A2xml%E6%96%87%E4%BB%B6\">使用新注解替换xml文件</a></p>\n<p id=\"%C2%A0Spring%E9%9B%86%E6%88%90Junit-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0Spring%E9%9B%86%E6%88%90Junit\"> Spring集成Junit</a></p>\n<p id=\"%C2%A0Spring%E9%9B%86%E6%88%90Junit%E6%AD%A5%E9%AA%A4-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0Spring%E9%9B%86%E6%88%90Junit%E6%AD%A5%E9%AA%A4\"> Spring集成Junit步骤</a></p>\n<p id=\"Spring%E4%B8%8EWeb%E7%8E%AF%E5%A2%83%E9%9B%86%E6%88%90-toc\" style=\"margin-left:40px;\"><a href=\"#Spring%E4%B8%8EWeb%E7%8E%AF%E5%A2%83%E9%9B%86%E6%88%90\">Spring与Web环境集成</a></p>\n<p id=\"%C2%A0%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E6%80%BB%E8%A7%88-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E6%80%BB%E8%A7%88\"> 项目结构总览</a></p>\n<p id=\"%C2%A0%E7%BB%99Maven%E9%85%8D%E7%BD%AEtomcat%E6%9C%8D%E5%8A%A1%E5%99%A8-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E7%BB%99Maven%E9%85%8D%E7%BD%AEtomcat%E6%9C%8D%E5%8A%A1%E5%99%A8\"> 给Maven配置tomcat服务器</a></p>\n<p id=\"%E4%BD%BF%E7%94%A8maven%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BAweb%E5%B7%A5%E7%A8%8B-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BD%BF%E7%94%A8maven%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BAweb%E5%B7%A5%E7%A8%8B\">使用maven手动创建web工程</a></p>\n<p id=\"ApplicationContext%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#ApplicationContext%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95\">ApplicationContext应用上下文获取方法</a></p>\n<p id=\"%E4%BC%98%E5%8C%96%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BC%98%E5%8C%96%E4%BB%A3%E7%A0%81\">优化代码</a></p>\n<p id=\"%E8%A7%A3%E8%80%A6%E5%90%882-toc\" style=\"margin-left:80px;\"><a href=\"#%E8%A7%A3%E8%80%A6%E5%90%882\">解耦合2</a></p>\n<p id=\"spring%E8%87%AA%E5%B8%A6%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8-toc\" style=\"margin-left:40px;\"><a href=\"#spring%E8%87%AA%E5%B8%A6%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8\">spring自带的监听器</a></p>\n<p id=\"SpringMVC%E6%A6%82%E8%BF%B0-toc\" style=\"margin-left:0px;\"><a href=\"#SpringMVC%E6%A6%82%E8%BF%B0\">SpringMVC概述</a></p>\n<p id=\"web%E5%B1%82%E7%9A%84%E6%A1%86%E6%9E%B6%E5%AE%8C%E6%88%90%E7%9A%84%E7%9B%B8%E5%BA%94%E7%9A%84%E6%93%8D%E4%BD%9C%E5%9B%BE%E7%A4%BA-toc\" style=\"margin-left:40px;\"><a href=\"#web%E5%B1%82%E7%9A%84%E6%A1%86%E6%9E%B6%E5%AE%8C%E6%88%90%E7%9A%84%E7%9B%B8%E5%BA%94%E7%9A%84%E6%93%8D%E4%BD%9C%E5%9B%BE%E7%A4%BA\">web层的框架完成的相应的操作图示</a></p>\n<p id=\"SpringMVC%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4-toc\" style=\"margin-left:40px;\"><a href=\"#SpringMVC%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4\">SpringMVC开发使用步骤</a></p>\n<p id=\"SpringMVC%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%A4%BA-toc\" style=\"margin-left:40px;\"><a href=\"#SpringMVC%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%A4%BA\">SpringMVC流程图示</a></p>\n<p id=\"%C2%A0SpringMVC%E7%9A%84%E7%BB%84%E4%BB%B6%E8%A7%A3%E6%9E%90-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0SpringMVC%E7%9A%84%E7%BB%84%E4%BB%B6%E8%A7%A3%E6%9E%90\"> SpringMVC的组件解析</a></p>\n<p id=\"SpringMVC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B-toc\" style=\"margin-left:40px;\"><a href=\"#SpringMVC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B\">SpringMVC执行流程</a></p>\n<p id=\"%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%A4%BA-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%A4%BA\">执行流程图示</a></p>\n<p id=\"SpringMVC%E6%B3%A8%E8%A7%A3%E8%A7%A3%E6%9E%90-toc\" style=\"margin-left:40px;\"><a href=\"#SpringMVC%E6%B3%A8%E8%A7%A3%E8%A7%A3%E6%9E%90\">SpringMVC注解解析</a></p>\n<p id=\"%40RequestMapping-toc\" style=\"margin-left:80px;\"><a href=\"#%40RequestMapping\">@RequestMapping</a></p>\n<p id=\"SpringMVC%E7%9A%84xml%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90-toc\" style=\"margin-left:40px;\"><a href=\"#SpringMVC%E7%9A%84xml%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90\">SpringMVC的xml配置解析</a></p>\n<p id=\"SpringMVC%E7%9A%84%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#SpringMVC%E7%9A%84%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6\">SpringMVC的相关组件</a></p>\n<p id=\"SpringMVC%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%92%8C%E9%85%8D%E7%BD%AE-toc\" style=\"margin-left:40px;\"><a href=\"#SpringMVC%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%92%8C%E9%85%8D%E7%BD%AE\">SpringMVC的注解和配置</a></p>\n<p id=\"SpringMVC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94-toc\" style=\"margin-left:0px;\"><a href=\"#SpringMVC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94\">SpringMVC的数据响应</a></p>\n<p id=\"SpringMVC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E6%96%B9%E5%BC%8F-toc\" style=\"margin-left:40px;\"><a href=\"#SpringMVC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E6%96%B9%E5%BC%8F\">SpringMVC的数据响应方式</a></p>\n<p id=\"%E2%91%A0%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A0%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC\">①页面跳转</a></p>\n<p id=\"%E2%91%A1%E5%9B%9E%E5%86%99%E6%95%B0%E6%8D%AE-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A1%E5%9B%9E%E5%86%99%E6%95%B0%E6%8D%AE\">②回写数据</a></p>\n<p id=\"2%E3%80%81%E8%BF%94%E5%9B%9EModelAndView%E5%AF%B9%E8%B1%A1-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E8%BF%94%E5%9B%9EModelAndView%E5%AF%B9%E8%B1%A1\">2、返回ModelAndView对象</a></p>\n<p id=\"%E6%96%B9%E5%BC%8F1%EF%BC%9A%E7%9B%B4%E6%8E%A5new%E5%AF%B9%E8%B1%A1-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%96%B9%E5%BC%8F1%EF%BC%9A%E7%9B%B4%E6%8E%A5new%E5%AF%B9%E8%B1%A1\">方式1：直接new对象</a></p>\n<p id=\"%C2%A0%E6%96%B9%E5%BC%8F2%3A%E5%86%99%E5%9C%A8%E6%96%B9%E6%B3%95%E9%87%8C%E8%AE%A9SpringMVC%E5%88%9B%E5%BB%BA-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E6%96%B9%E5%BC%8F2%3A%E5%86%99%E5%9C%A8%E6%96%B9%E6%B3%95%E9%87%8C%E8%AE%A9SpringMVC%E5%88%9B%E5%BB%BA\"> 方式2:写在方法里让SpringMVC创建</a></p>\n<p id=\"%E6%96%B9%E5%BC%8F3%EF%BC%9Amodel%E5%92%8Cview%E5%88%86%E5%BC%80%E5%81%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%96%B9%E5%BC%8F3%EF%BC%9Amodel%E5%92%8Cview%E5%88%86%E5%BC%80%E5%81%9A\">方式3：model和view分开做</a></p>\n<p id=\"%E6%96%B9%E5%BC%8F4%EF%BC%9A%E9%80%9A%E8%BF%87HttpServletRequest-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%96%B9%E5%BC%8F4%EF%BC%9A%E9%80%9A%E8%BF%87HttpServletRequest\">方式4：通过HttpServletRequest</a></p>\n<p id=\"%E5%9B%9E%E5%86%99%E6%95%B0%E6%8D%AE-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%9B%9E%E5%86%99%E6%95%B0%E6%8D%AE\">回写数据</a></p>\n<p idjson%E6%A0%BC%E5%BC%8F%E5%9B%9E%E4%BC%A0%E5%88%B0%E5%AE%A2%E6%88%B7%E7%AB%AF-toc\" style=\"margin-left:80px;\"><a hrefjson%E6%A0%BC%E5%BC%8F%E5%9B%9E%E4%BC%A0%E5%88%B0%E5%AE%A2%E6%88%B7%E7%AB%AF\">                                                                                                                                         将字符串转成json格式回传到客户端</a></p>\n<p id=\"2%E3%80%81%E7%9B%B4%E6%8E%A5%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E6%88%96%E9%9B%86%E5%90%88%C2%A0%20%C2%A0%20%C2%A0%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E7%9B%B4%E6%8E%A5%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E6%88%96%E9%9B%86%E5%90%88%C2%A0%20%C2%A0%20%C2%A0%C2%A0\">2、直接返回对象或集合      </a></p>\n<p id=\"%E4%BD%BF%E7%94%A8SpringMVC%E8%87%AA%E5%8A%A8%E5%B0%86%E5%AF%B9%E8%B1%A1%E6%88%96%E9%9B%86%E5%90%88%E8%BD%AC%E5%8C%96%E4%B8%BAjson%E6%A0%BC%E5%BC%8F-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BD%BF%E7%94%A8SpringMVC%E8%87%AA%E5%8A%A8%E5%B0%86%E5%AF%B9%E8%B1%A1%E6%88%96%E9%9B%86%E5%90%88%E8%BD%AC%E5%8C%96%E4%B8%BAjson%E6%A0%BC%E5%BC%8F\">使用SpringMVC自动将对象或集合转化为json格式</a></p>\n<p id=\"%C2%A0%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E4%BC%98%E5%8C%96%E8%BD%AC%E5%8C%96json-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E4%BC%98%E5%8C%96%E8%BD%AC%E5%8C%96json\"> 注解方式优化转化json</a></p>\n<p id=\"SpringMVC%E8%8E%B7%E5%BE%97%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE-toc\" style=\"margin-left:0px;\"><a href=\"#SpringMVC%E8%8E%B7%E5%BE%97%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE\">SpringMVC获得请求数据</a></p>\n<p id=\"%E8%8E%B7%E5%BE%97%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:40px;\"><a href=\"#%E8%8E%B7%E5%BE%97%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0\">获得请求参数</a></p>\n<p id=\"%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">基本数据类型</a></p>\n<p id=\"%E8%8E%B7%E5%BE%97POJO%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:80px;\"><a href=\"#%E8%8E%B7%E5%BE%97POJO%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0\">获得POJO类型参数</a></p>\n<p id=\"%C2%A0%E8%8E%B7%E5%BE%97%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E8%8E%B7%E5%BE%97%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0\"> 获得数组类型参数</a></p>\n<p id=\"%E8%8E%B7%E5%BE%97%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:80px;\"><a href=\"#%E8%8E%B7%E5%BE%97%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0\">获得集合类型参数</a></p>\n<p id=\"%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E7%9A%84%E5%BC%80%E5%90%AF-toc\" style=\"margin-left:80px;\"><a href=\"#%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E7%9A%84%E5%BC%80%E5%90%AF\">静态资源访问的开启</a></p>\n<p id=\"%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80%E4%B9%B1%E7%A0%81%E8%BF%87%E6%BB%A4%E5%99%A8-toc\" style=\"margin-left:40px;\"><a href=\"#%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80%E4%B9%B1%E7%A0%81%E8%BF%87%E6%BB%A4%E5%99%A8\">配置全局乱码过滤器</a></p>\n<p id=\"%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A%E6%B3%A8%E8%A7%A3%40RequestParam-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A%E6%B3%A8%E8%A7%A3%40RequestParam\">参数绑定注解@RequestParam</a></p>\n<p id=\"%E6%B3%A8%E8%A7%A3%40RequestParam%E7%9A%84%E5%8F%82%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%B3%A8%E8%A7%A3%40RequestParam%E7%9A%84%E5%8F%82%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E\">注解@RequestParam的参数使用说明</a></p>\n<p id=\"%E8%8E%B7%E5%BE%97Restful%E9%A3%8E%E6%A0%BC%E7%9A%84%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:40px;\"><a href=\"#%E8%8E%B7%E5%BE%97Restful%E9%A3%8E%E6%A0%BC%E7%9A%84%E5%8F%82%E6%95%B0\">获得Restful风格的参数</a></p>\n<p id=\"%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8-toc\" style=\"margin-left:40px;\"><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8\">自定义类型转换器</a></p>\n<p id=\"%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E6%8D%A2%E5%99%A8%E7%9A%84%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E6%8D%A2%E5%99%A8%E7%9A%84%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4%EF%BC%9A\">自定义转换器的开发步骤：</a></p>\n<p id=\"%C2%A0%E8%8E%B7%E5%BE%97Servlet%E7%9B%B8%E5%85%B3API-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E8%8E%B7%E5%BE%97Servlet%E7%9B%B8%E5%85%B3API\"> 获得Servlet相关API</a></p>\n<p id=\"%E8%8E%B7%E5%BE%97%E8%AF%B7%E6%B1%82%E5%A4%B4-toc\" style=\"margin-left:0px;\"><a href=\"#%E8%8E%B7%E5%BE%97%E8%AF%B7%E6%B1%82%E5%A4%B4\">获得请求头</a></p>\n<p id=\"%40RequestHeader-toc\" style=\"margin-left:40px;\"><a href=\"#%40RequestHeader\">@RequestHeader</a></p>\n<p id=\"%C2%A0%40CookieValue-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%40CookieValue\"> @CookieValue</a></p>\n<p id=\"%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%C2%A0\">文件上传 </a></p>\n<p id=\"%E5%8D%95%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%AD%A5%E9%AA%A4-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%8D%95%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%AD%A5%E9%AA%A4\">单文件上传步骤</a></p>\n<p id=\"%C2%A0%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%AE%9E%E7%8E%B0-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%AE%9E%E7%8E%B0\"> 多文件上传实现</a></p>\n<p id=\"%E6%B3%95%E4%B8%80%EF%BC%9A%E5%86%99%E4%B8%8B%E5%A4%9A%E4%B8%AA%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%B3%95%E4%B8%80%EF%BC%9A%E5%86%99%E4%B8%8B%E5%A4%9A%E4%B8%AA%E5%8F%82%E6%95%B0\">法一：写下多个参数</a></p>\n<p id=\"%C2%A0%E6%B3%95%E4%BA%8C%EF%BC%9A%E6%95%B0%E7%BB%84%E6%8E%A5%E6%94%B6-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E6%B3%95%E4%BA%8C%EF%BC%9A%E6%95%B0%E7%BB%84%E6%8E%A5%E6%94%B6\"> 法二：数组接收</a></p>\n<p id=\"JdbcTemplate%E6%A6%82%E8%BF%B0-toc\" style=\"margin-left:0px;\"><a href=\"#JdbcTemplate%E6%A6%82%E8%BF%B0\">JdbcTemplate概述</a></p>\n<p id=\"JdbcTemplate%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4-toc\" style=\"margin-left:40px;\"><a href=\"#JdbcTemplate%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4\">JdbcTemplate开发步骤</a></p>\n<p id=\"%C2%A0Spring%E4%BA%A7%E7%94%9FJdbcTemplate%E5%AF%B9%E8%B1%A1-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0Spring%E4%BA%A7%E7%94%9FJdbcTemplate%E5%AF%B9%E8%B1%A1\"> Spring产生JdbcTemplate对象</a></p>\n<p id=\"%E6%B5%8B%E8%AF%95%E6%8F%92%E5%85%A5-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%B5%8B%E8%AF%95%E6%8F%92%E5%85%A5\">测试插入</a></p>\n<p id=\"%C2%A0%E8%BF%90%E8%A1%8C%E6%97%B6%EF%BC%8C%E5%87%BA%E7%8E%B0java.lang.NoClassDefFoundError%3A%20org%2Fspringframework%2Fcore%2Fmetrics%2FApplicationStartup%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E8%BF%90%E8%A1%8C%E6%97%B6%EF%BC%8C%E5%87%BA%E7%8E%B0java.lang.NoClassDefFoundError%3A%20org%2Fspringframework%2Fcore%2Fmetrics%2FApplicationStartup%C2%A0\"> 运行时，出现java.lang.NoClassDefFoundError: org/springframework/core/metrics/ApplicationStartup </a></p>\n<p id=\"jdbc%E5%86%85%E5%AE%B9%E5%92%8C%E9%85%8D%E7%BD%AE%E8%A7%A3%E8%80%A6%E5%90%88-toc\" style=\"margin-left:40px;\"><a href=\"#jdbc%E5%86%85%E5%AE%B9%E5%92%8C%E9%85%8D%E7%BD%AE%E8%A7%A3%E8%80%A6%E5%90%88\">jdbc内容和配置解耦合</a></p>\n<p id=\"%E4%BD%BF%E7%94%A8Spring%E9%9B%86%E6%88%90Junit%E5%AE%8C%E6%88%90JdbcTemplate%E4%BF%AE%E6%94%B9%E5%92%8C%E5%88%A0%E9%99%A4-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BD%BF%E7%94%A8Spring%E9%9B%86%E6%88%90Junit%E5%AE%8C%E6%88%90JdbcTemplate%E4%BF%AE%E6%94%B9%E5%92%8C%E5%88%A0%E9%99%A4\">使用Spring集成Junit完成JdbcTemplate修改和删除</a></p>\n<p id=\"%C2%A0Junit4.11%E7%89%88%E6%9C%AC%E5%AF%BC%E8%87%B4%E9%94%99%E8%AF%AF-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0Junit4.11%E7%89%88%E6%9C%AC%E5%AF%BC%E8%87%B4%E9%94%99%E8%AF%AF\"> Junit4.11版本导致错误</a></p>\n<p id=\"%E5%88%A0%E9%99%A4%E7%9A%84%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%88%A0%E9%99%A4%E7%9A%84%E6%93%8D%E4%BD%9C\">删除的操作</a></p>\n<p id=\"%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C\">查询操作</a></p>\n<p id=\"%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89\">查询所有</a></p>\n<p id=\"%C2%A0%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA\"> 查询单个</a></p>\n<p id=\"%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:80px;\"><a href=\"#%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2\">聚合查询</a></p>\n<p id=\"%C2%A0%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93\"> 知识要点总结</a></p>\n<p id=\"%C2%A0Spring%E7%9A%84AOP%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0Spring%E7%9A%84AOP%E7%AE%80%E4%BB%8B\"> Spring的AOP简介</a></p>\n<p id=\"%E4%BB%80%E4%B9%88%E6%98%AFAOP-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AFAOP\">什么是AOP</a></p>\n<p id=\"AOP%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8A%BF-toc\" style=\"margin-left:40px;\"><a href=\"#AOP%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8A%BF\">AOP的作用及其优势</a></p>\n<p id=\"%C2%A0AOP%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0AOP%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0\"> AOP的底层实现</a></p>\n<p id=\"%C2%A0AOP%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0AOP%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF\"> AOP的动态代理技术</a></p>\n<p id=\"JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86-toc\" style=\"margin-left:80px;\"><a href=\"#JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86\">JDK动态代理</a></p>\n<p id=\"%C2%A0cglib%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0cglib%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86\"> cglib的动态代理</a></p>\n<p id=\"AOP%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5-toc\" style=\"margin-left:40px;\"><a href=\"#AOP%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5\">AOP相关概念</a></p>\n<p id=\"%C2%A0%20AOP%E5%BC%80%E5%8F%91%E6%98%8E%E7%A1%AE%E7%9A%84%E4%BA%8B%E9%A1%B9-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%20AOP%E5%BC%80%E5%8F%91%E6%98%8E%E7%A1%AE%E7%9A%84%E4%BA%8B%E9%A1%B9\">  AOP开发明确的事项</a></p>\n<p id=\"1%E3%80%81%E9%9C%80%E8%A6%81%E7%BC%96%E5%86%99%E7%9A%84%E5%86%85%E5%AE%B9-toc\" style=\"margin-left:80px;\"><a href=\"#1%E3%80%81%E9%9C%80%E8%A6%81%E7%BC%96%E5%86%99%E7%9A%84%E5%86%85%E5%AE%B9\">1、需要编写的内容</a></p>\n<p id=\"2%E3%80%81AOP%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%86%85%E5%AE%B9-toc\" style=\"margin-left:80px;\"><a href=\"#2%E3%80%81AOP%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%86%85%E5%AE%B9\">2、AOP技术实现的内容</a></p>\n<p id=\"3%E3%80%81AOP%E5%BA%95%E5%B1%82%E4%BD%BF%E7%94%A8%E5%93%AA%E7%A7%8D%E4%BB%A3%E7%90%86%E6%96%B9%E5%BC%8F-toc\" style=\"margin-left:80px;\"><a href=\"#3%E3%80%81AOP%E5%BA%95%E5%B1%82%E4%BD%BF%E7%94%A8%E5%93%AA%E7%A7%8D%E4%BB%A3%E7%90%86%E6%96%B9%E5%BC%8F\">3、AOP底层使用哪种代理方式</a></p>\n<p id=\"%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93\">知识要点总结</a></p>\n<p id=\"%E5%9F%BA%E4%BA%8Exml%E7%9A%84AOP%E5%BC%80%E5%8F%91-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9F%BA%E4%BA%8Exml%E7%9A%84AOP%E5%BC%80%E5%8F%91\">基于xml的AOP开发</a></p>\n<p id=\"%C2%A0XML%E9%85%8D%E7%BD%AEAOP%E8%AF%A6%E8%A7%A3-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0XML%E9%85%8D%E7%BD%AEAOP%E8%AF%A6%E8%A7%A3\"> XML配置AOP详解</a></p>\n<p id=\"%E5%88%87%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%86%99%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%88%87%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%86%99%E6%B3%95\">切点表达式的写法</a></p>\n<p id=\"%E9%80%9A%E7%9F%A5%2F(%E5%A2%9E%E5%BC%BA)%E7%9A%84%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:40px;\"><a href=\"#%E9%80%9A%E7%9F%A5%2F%28%E5%A2%9E%E5%BC%BA%29%E7%9A%84%E7%B1%BB%E5%9E%8B\">通知/(增强)的类型</a></p>\n<p id=\"%C2%A0%E5%89%8D%E5%90%8E%E7%BD%AE%E5%A2%9E%E5%BC%BA-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E5%89%8D%E5%90%8E%E7%BD%AE%E5%A2%9E%E5%BC%BA\"> 前后置增强</a></p>\n<p id=\"%C2%A0%E7%8E%AF%E7%BB%95%E5%A2%9E%E5%BC%BA-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E7%8E%AF%E7%BB%95%E5%A2%9E%E5%BC%BA\"> 环绕增强</a></p>\n<p id=\"%C2%A0%20%E5%BC%82%E5%B8%B8%E6%8A%9B%E5%87%BA%E5%A2%9E%E5%BC%BA-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%20%E5%BC%82%E5%B8%B8%E6%8A%9B%E5%87%BA%E5%A2%9E%E5%BC%BA\">  异常抛出增强</a></p>\n<p id=\"%C2%A0%E6%9C%80%E7%BB%88%E5%A2%9E%E5%BC%BA-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E6%9C%80%E7%BB%88%E5%A2%9E%E5%BC%BA\"> 最终增强</a></p>\n<p id=\"%C2%A0%E5%88%87%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%8A%BD%E5%8F%96-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E5%88%87%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%8A%BD%E5%8F%96\"> 切点表达式的抽取</a></p>\n<p id=\"%C2%A0%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9\"> 知识要点</a></p>\n<p id=\"%C2%A0%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84AOP%E5%BC%80%E5%8F%91-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84AOP%E5%BC%80%E5%8F%91\"> 基于注解的AOP开发</a></p>\n<p id=\"%E7%BC%96%E5%86%99%E6%B5%8B%E8%AF%95%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%BC%96%E5%86%99%E6%B5%8B%E8%AF%95%C2%A0\">编写测试 </a></p>\n<p id=\"%C2%A0%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AEAOP%E8%AF%A6%E8%A7%A3-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AEAOP%E8%AF%A6%E8%A7%A3\"> 注解配置AOP详解</a></p>\n<p id=\"%E6%B3%A8%E8%A7%A3%E9%80%9A%E7%9F%A5%E7%9A%84%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%B3%A8%E8%A7%A3%E9%80%9A%E7%9F%A5%E7%9A%84%E7%B1%BB%E5%9E%8B\">注解通知的类型</a></p>\n<p id=\"%C2%A0%E5%88%87%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%8A%BD%E5%8F%96-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E5%88%87%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%8A%BD%E5%8F%96\"> 切点表达式的抽取</a></p>\n<p id=\"%E7%BC%96%E7%A8%8B%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E7%9B%B8%E5%85%B3%E5%AF%B9%E8%B1%A1-toc\" style=\"margin-left:0px;\"><a href=\"#%E7%BC%96%E7%A8%8B%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E7%9B%B8%E5%85%B3%E5%AF%B9%E8%B1%A1\">编程式事务控制相关对象</a></p>\n<p id=\"PlatformTransactionManager%E5%B9%B3%E5%8F%B0%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86-toc\" style=\"margin-left:40px;\"><a href=\"#PlatformTransactionManager%E5%B9%B3%E5%8F%B0%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86\">PlatformTransactionManager平台事务管理</a></p>\n<p id=\"TransactionDefinition%E4%BA%8B%E5%8A%A1%E5%AE%9A%E4%B9%89-toc\" style=\"margin-left:40px;\"><a href=\"#TransactionDefinition%E4%BA%8B%E5%8A%A1%E5%AE%9A%E4%B9%89\">TransactionDefinition事务定义</a></p>\n<p id=\"%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA\">事务的传播行为</a></p>\n<p id=\"TransactionStatus%E4%BA%8B%E5%8A%A1%E7%8A%B6%E6%80%81-toc\" style=\"margin-left:40px;\"><a href=\"#TransactionStatus%E4%BA%8B%E5%8A%A1%E7%8A%B6%E6%80%81\">TransactionStatus事务状态</a></p>\n<p id=\"%C2%A0%E5%9F%BA%E4%BA%8EXML%E7%9A%84%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E5%9F%BA%E4%BA%8EXML%E7%9A%84%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6\"> 基于XML的声明式事务控制</a></p>\n<p id=\"%E5%88%87%E7%82%B9%E6%96%B9%E6%B3%95%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%8F%82%E6%95%B0%E7%9A%84%E9%85%8D%E7%BD%AE-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%88%87%E7%82%B9%E6%96%B9%E6%B3%95%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%8F%82%E6%95%B0%E7%9A%84%E9%85%8D%E7%BD%AE\">切点方法的事务参数的配置</a></p>\n<p id=\"%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6\">基于注解的声明式事务控制</a></p>\n<p id=\"%C2%A0%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AE%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E8%A7%A3%E6%9E%90-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AE%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E8%A7%A3%E6%9E%90\"> 注解配置声明式事务控制解析</a></p>\n<p id=\"MyBatis%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:0px;\"><a href=\"#MyBatis%E7%AE%80%E4%BB%8B\">MyBatis简介</a></p>\n<p id=\"%E5%8E%9F%E5%A7%8Bjdbc%E6%93%8D%E4%BD%9C%E7%9A%84%E5%88%86%E6%9E%90-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%8E%9F%E5%A7%8Bjdbc%E6%93%8D%E4%BD%9C%E7%9A%84%E5%88%86%E6%9E%90\">原始jdbc操作的分析</a></p>\n<p id=\"%E4%BB%80%E4%B9%88%E6%98%AFMybatis-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AFMybatis\">什么是Mybatis</a></p>\n<p id=\"MyBatis%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4-toc\" style=\"margin-left:80px;\"><a href=\"#MyBatis%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4\">MyBatis开发步骤</a></p>\n<p id=\"%E2%91%A0%E6%B7%BB%E5%8A%A0pom%E7%9B%B8%E5%BA%94%E7%9A%84%E5%9D%90%E6%A0%87-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A0%E6%B7%BB%E5%8A%A0pom%E7%9B%B8%E5%BA%94%E7%9A%84%E5%9D%90%E6%A0%87\">①添加pom相应的坐标</a></p>\n<p id=\"%E2%91%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%A1%A8-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%A1%A8\">②数据库中创建表</a></p>\n<p id=\"%C2%A0%E2%91%A2%E5%88%9B%E5%BB%BApojo%E4%B8%8B%E7%9A%84user%E7%B1%BB-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E2%91%A2%E5%88%9B%E5%BB%BApojo%E4%B8%8B%E7%9A%84user%E7%B1%BB\"> ③创建pojo下的user类</a></p>\n<p id=\"%E2%91%A5%E7%BC%96%E5%86%99%E6%B5%8B%E8%AF%95%E7%B1%BB-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A5%E7%BC%96%E5%86%99%E6%B5%8B%E8%AF%95%E7%B1%BB\">⑥编写测试类</a></p>\n<p id=\"%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-toc\" style=\"margin-left:80px;\"><a href=\"#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C\">运行结果</a></p>\n<p id=\"%C2%A0MyBatis%E7%9A%84%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E6%A6%82%E8%BF%B0-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0MyBatis%E7%9A%84%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E6%A6%82%E8%BF%B0\"> MyBatis的映射文件概述</a></p>\n<p id=\"%C2%A0Mybatis%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0Mybatis%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%93%8D%E4%BD%9C\"> Mybatis增删改查操作</a></p>\n<p id=\"Mybatis%E7%9A%84%E5%A2%9E%E5%8A%A0%2F%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#Mybatis%E7%9A%84%E5%A2%9E%E5%8A%A0%2F%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C\">Mybatis的增加/插入操作</a></p>\n<p id=\"%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98\">插入操作注意的问题</a></p>\n<p id=\"MyBatis%E7%9A%84%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#MyBatis%E7%9A%84%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C\">MyBatis的修改数据操作</a></p>\n<p id=\"Mybatis%20%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#Mybatis%20%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C\">Mybatis 删除数据操作</a></p>\n<p id=\"%C2%A0%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98\"> 删除操作注意的问题</a></p>\n<p id=\"Mybatis%E5%B8%B8%E7%94%A8%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A6%82%E8%BF%B0-toc\" style=\"margin-left:0px;\"><a href=\"#Mybatis%E5%B8%B8%E7%94%A8%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A6%82%E8%BF%B0\">Mybatis常用核心配置文件概述</a></p>\n<p id=\"envrionment%E6%A0%87%E7%AD%BE-toc\" style=\"margin-left:40px;\"><a href=\"#envrionment%E6%A0%87%E7%AD%BE\">envrionment标签</a></p>\n<p id=\"%C2%A0mapper%E6%A0%87%E7%AD%BE-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0mapper%E6%A0%87%E7%AD%BE\"> mapper标签</a></p>\n<p id=\"%C2%A0typeAliases%E6%A0%87%E7%AD%BE-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0typeAliases%E6%A0%87%E7%AD%BE\"> typeAliases标签</a></p>\n<p id=\"%C2%A0MyBatis%E7%9A%84%E7%9B%B8%E5%BA%94API-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0MyBatis%E7%9A%84%E7%9B%B8%E5%BA%94API\"> MyBatis的相应API</a></p>\n<p id=\"1%E3%80%81SqlSession%E5%B7%A5%E5%8E%82%E6%9E%84%E5%BB%BA%E5%99%A8SqlSessionFactoryBuilder-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81SqlSession%E5%B7%A5%E5%8E%82%E6%9E%84%E5%BB%BA%E5%99%A8SqlSessionFactoryBuilder\">1、SqlSession工厂构建器SqlSessionFactoryBuilder</a></p>\n<p id=\"2%E3%80%81SqlSession%E4%BC%9A%E8%AF%9D%E5%AF%B9%E8%B1%A1-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81SqlSession%E4%BC%9A%E8%AF%9D%E5%AF%B9%E8%B1%A1\">2、SqlSession会话对象</a></p>\n<p id=\"Mybatis%E7%9A%84Dao%E5%B1%82%E5%AE%9E%E7%8E%B0-toc\" style=\"margin-left:0px;\"><a href=\"#Mybatis%E7%9A%84Dao%E5%B1%82%E5%AE%9E%E7%8E%B0\">Mybatis的Dao层实现</a></p>\n<p id=\"1%E3%80%81%E4%BC%A0%E7%BB%9F%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F-%E7%BC%96%E5%86%99UserDao%E6%8E%A5%E5%8F%A3-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E4%BC%A0%E7%BB%9F%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F-%E7%BC%96%E5%86%99UserDao%E6%8E%A5%E5%8F%A3\">1、传统开发方式-编写UserDao接口</a></p>\n<p id=\"%E6%B5%8B%E8%AF%95%E7%BC%96%E5%86%99UserDao%E6%8E%A5%E5%8F%A3-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%B5%8B%E8%AF%95%E7%BC%96%E5%86%99UserDao%E6%8E%A5%E5%8F%A3\">测试编写UserDao接口</a></p>\n<p id=\"2%E3%80%81%20%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%20%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F\">2、 代理开发方式</a></p>\n<p id=\"%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91%C2%A0\">代码测试代理开发 </a></p>\n<p id=\"Mybatis%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5-toc\" style=\"margin-left:0px;\"><a href=\"#Mybatis%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5\">Mybatis映射文件深入</a></p>\n<p id=\"%E5%8A%A8%E6%80%81sql%E8%AF%AD%E5%8F%A5-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%8A%A8%E6%80%81sql%E8%AF%AD%E5%8F%A5\">动态sql语句</a></p>\n<p id=\"%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E4%B8%AD%E5%8A%A8%E6%80%81sql-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E4%B8%AD%E5%8A%A8%E6%80%81sql\">官方文档中动态sql</a></p>\n<p id=\"%E5%8A%A8%E6%80%81SQL%E4%B9%8Bif-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%8A%A8%E6%80%81SQL%E4%B9%8Bif\">动态SQL之if</a></p>\n<p id=\"%E6%B5%8B%E8%AF%95%E7%A4%BA%E4%BE%8Bif-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%B5%8B%E8%AF%95%E7%A4%BA%E4%BE%8Bif\">测试示例if</a></p>\n<p id=\"%E5%8A%A8%E6%80%81sql%E4%B9%8Bforeach-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%8A%A8%E6%80%81sql%E4%B9%8Bforeach\">动态sql之foreach</a></p>\n<p id=\"%E6%B5%8B%E8%AF%95%E7%A4%BA%E4%BE%8Bforeach-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%B5%8B%E8%AF%95%E7%A4%BA%E4%BE%8Bforeach\">测试示例foreach</a></p>\n<p id=\"%C2%A0sql%E7%89%87%E6%AE%B5%E7%9A%84%E6%8A%BD%E5%8F%96-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0sql%E7%89%87%E6%AE%B5%E7%9A%84%E6%8A%BD%E5%8F%96\"> sql片段的抽取</a></p>\n<p id=\"Mybatis%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93-toc\" style=\"margin-left:40px;\"><a href=\"#Mybatis%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93\">Mybatis映射文件深入知识小结</a></p>\n<p id=\"Mybatis%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5-toc\" style=\"margin-left:0px;\"><a href=\"#Mybatis%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5\">Mybatis核心配置文件深入</a></p>\n<p id=\"%C2%A0typeHandlers%E6%A0%87%E7%AD%BE-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0typeHandlers%E6%A0%87%E7%AD%BE\"> typeHandlers标签</a></p>\n<p id=\"%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4%3A-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4%3A\">开发步骤:</a></p>\n<p id=\"%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%91%E7%8E%B0%20xxx%C2%A0%20cannot%20be%20cast%20to%20xxx%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%91%E7%8E%B0%20xxx%C2%A0%20cannot%20be%20cast%20to%20xxx%C2%A0\">运行时发现 xxx  cannot be cast to xxx </a></p>\n<p id=\"plugins%E6%A0%87%E7%AD%BE-toc\" style=\"margin-left:40px;\"><a href=\"#plugins%E6%A0%87%E7%AD%BE\">plugins标签</a></p>\n<p id=\"%E5%88%86%E9%A1%B5%E5%8A%A9%E6%89%8BPageHelper-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%88%86%E9%A1%B5%E5%8A%A9%E6%89%8BPageHelper\">分页助手PageHelper</a></p>\n<p id=\"%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4%EF%BC%9A\">开发步骤：</a></p>\n<p id=\"%C2%A0%E8%8E%B7%E5%8F%96%E5%88%86%E9%A1%B5%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E8%8E%B7%E5%8F%96%E5%88%86%E9%A1%B5%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0%E6%B5%8B%E8%AF%95\"> 获取分页相关参数测试</a></p>\n<p id=\"%C2%A0%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93%E4%B9%8BMybatis%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A0%87%E7%AD%BE-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93%E4%B9%8BMybatis%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A0%87%E7%AD%BE\"> 知识小结之Mybatis核心配置文件标签</a></p>\n<p id=\"Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:0px;\"><a href=\"#Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C\">  Mybatis的多表操作</a></p>\n<p id=\"%E4%B8%80%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%80%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2\">1、一对一查询</a></p>\n<p id=\"%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD\">数据库中</a></p>\n<p id=\"mapper%E5%8C%85%E4%B8%8BorderMapper%E7%B1%BB%E4%B8%8B-toc\" style=\"margin-left:80px;\"><a href=\"#mapper%E5%8C%85%E4%B8%8BorderMapper%E7%B1%BB%E4%B8%8B\">mapper包下orderMapper类下</a></p>\n<p id=\"pojo%E5%8C%85%E4%B8%8B%E7%9A%84order%E7%B1%BB%E4%B8%8B-toc\" style=\"margin-left:80px;\"><a href=\"#pojo%E5%8C%85%E4%B8%8B%E7%9A%84order%E7%B1%BB%E4%B8%8B\">pojo包下的order类下</a></p>\n<p id=\"pojo%E4%B8%8Buser%E7%B1%BB%E4%B8%8B-toc\" style=\"margin-left:80px;\"><a href=\"#pojo%E4%B8%8Buser%E7%B1%BB%E4%B8%8B\">pojo下user类下</a></p>\n<p id=\"OrderMapper.xml%E4%B8%8B-toc\" style=\"margin-left:80px;\"><a href=\"#OrderMapper.xml%E4%B8%8B\">OrderMapper.xml下</a></p>\n<p id=\"%C2%A0MybatisTest%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E4%B8%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0MybatisTest%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E4%B8%8B\"> MybatisTest测试代码下</a></p>\n<p id=\"%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-toc\" style=\"margin-left:80px;\"><a href=\"#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C\">运行结果</a></p>\n<p id=\"%C2%A0OrderMap.xml%E4%B8%AD%E4%B9%9F%E5%8F%AF%E4%BD%BF%E7%94%A8-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0OrderMap.xml%E4%B8%AD%E4%B9%9F%E5%8F%AF%E4%BD%BF%E7%94%A8\"> OrderMap.xml中也可使用</a></p>\n<p id=\"%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2\">2、一对多查询</a></p>\n<p id=\"%C2%A0UserMapper%E6%8E%A5%E5%8F%A3%E4%B8%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0UserMapper%E6%8E%A5%E5%8F%A3%E4%B8%8B\"> UserMapper接口下</a></p>\n<p id=\"UserMapper.xml%E4%B8%8B-toc\" style=\"margin-left:80px;\"><a href=\"#UserMapper.xml%E4%B8%8B\">UserMapper.xml下</a></p>\n<p id=\"Mybatis%E6%B5%8B%E8%AF%95%E4%B8%8B-toc\" style=\"margin-left:80px;\"><a href=\"#Mybatis%E6%B5%8B%E8%AF%95%E4%B8%8B\">Mybatis测试下</a></p>\n<p id=\"%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-toc\" style=\"margin-left:80px;\"><a href=\"#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C\">运行结果</a></p>\n<p id=\"%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2\">多对多查询</a></p>\n<p id=\"%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%9E%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%9E%8B\">多对多查询模型</a></p>\n<p id=\"%C2%A0%E7%BB%83%E4%B9%A0%E5%86%8C%E5%A4%9A%E5%AF%B9%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E7%BB%83%E4%B9%A0%E5%86%8C%E5%A4%9A%E5%AF%B9%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2\"> 练习册多对多表查询</a></p>\n<p id=\"%E5%B0%86orders%E3%80%81role%E3%80%81user%E4%B8%89%E8%80%85%E8%81%94%E7%B3%BB%E8%B5%B7%E6%9D%A5-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%B0%86orders%E3%80%81role%E3%80%81user%E4%B8%89%E8%80%85%E8%81%94%E7%B3%BB%E8%B5%B7%E6%9D%A5\">将orders、role、user三者联系起来</a></p>\n<p id=\"%C2%A0Mybatis%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0Mybatis%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91\"> Mybatis的注解开发</a></p>\n<p id=\"mybatis%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3-toc\" style=\"margin-left:40px;\"><a href=\"#mybatis%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3\">mybatis的常用注解</a></p>\n<p id=\"%E6%B3%A8%E8%A7%A3%E5%AE%8C%E6%88%90%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%B3%A8%E8%A7%A3%E5%AE%8C%E6%88%90%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%93%8D%E4%BD%9C\">注解完成增删改查操作</a></p>\n<p id=\"%E6%96%B0%E5%A2%9E%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%96%B0%E5%A2%9E%E6%93%8D%E4%BD%9C\">新增操作</a></p>\n<p id=\"%E4%BF%AE%E6%94%B9%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BF%AE%E6%94%B9%E6%93%8D%E4%BD%9C\">修改操作</a></p>\n<p id=\"%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C\">删除操作</a></p>\n<p id=\"%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C\">查询操作</a></p>\n<p id=\"%E6%9F%A5%E8%AF%A2%E5%85%A8%E9%83%A8%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%9F%A5%E8%AF%A2%E5%85%A8%E9%83%A8%E6%93%8D%E4%BD%9C\">查询全部操作</a></p>\n<p id=\"%C2%A0Mybatis%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E5%A4%8D%E6%9D%82%E6%98%A0%E5%B0%84%E5%BC%80%E5%8F%91-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0Mybatis%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E5%A4%8D%E6%9D%82%E6%98%A0%E5%B0%84%E5%BC%80%E5%8F%91\"> Mybatis的注解实现复杂映射开发</a></p>\n<p id=\"%C2%A0%E4%B8%80%E5%AF%B9%E4%B8%80%E6%B3%A8%E8%A7%A3%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E4%B8%80%E5%AF%B9%E4%B8%80%E6%B3%A8%E8%A7%A3%E6%9F%A5%E8%AF%A2\"> 一对一注解查询</a></p>\n<p id=\"%E6%9F%A5%E8%AF%A2%E7%94%A8%E6%88%B7%E6%97%B6%E4%B9%9F%E6%9F%A5%E8%AF%A2%E5%87%BA%E8%AE%A2%E5%8D%95%E4%BF%A1%E6%81%AF-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%9F%A5%E8%AF%A2%E7%94%A8%E6%88%B7%E6%97%B6%E4%B9%9F%E6%9F%A5%E8%AF%A2%E5%87%BA%E8%AE%A2%E5%8D%95%E4%BF%A1%E6%81%AF\">查询用户时也查询出订单信息</a></p>\n<p id=\"%C2%A0%E5%8F%A6%E4%B8%80%E7%A7%8D%EF%BC%8C%E5%88%86%E4%B8%A4%E6%AC%A1%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E5%8F%A6%E4%B8%80%E7%A7%8D%EF%BC%8C%E5%88%86%E4%B8%A4%E6%AC%A1%E6%9F%A5%E8%AF%A2\"> 另一种，分两次查询</a></p>\n<p id=\"%C2%A0%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%B3%A8%E8%A7%A3%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%B3%A8%E8%A7%A3%E6%9F%A5%E8%AF%A2\"> 一对多注解查询</a></p>\n<p id=\"%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2\">多对多查询</a></p>\n<p id=\"SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88-toc\" style=\"margin-left:0px;\"><a href=\"#SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88\">SSM框架整合</a></p>\n<p id=\"%E5%8E%9F%E5%A7%8B%E6%95%B4%E5%90%88%E6%96%B9%E5%BC%8F-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%8E%9F%E5%A7%8B%E6%95%B4%E5%90%88%E6%96%B9%E5%BC%8F\">原始整合方式</a></p>\n<p id=\"%E2%91%A0%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A0%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93\">①创建数据库</a></p>\n<p id=\"%C2%A0%E2%91%A1%E5%88%9B%E5%BB%BAmaven%E5%B7%A5%E7%A8%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E2%91%A1%E5%88%9B%E5%BB%BAmaven%E5%B7%A5%E7%A8%8B\"> ②创建maven工程</a></p>\n<p id=\"%E2%91%A2%E5%8F%81%E5%AF%BC%E5%85%A5maven%E5%AF%B9%E5%BA%94%E5%9D%90%E6%A0%87-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A2%E5%8F%81%E5%AF%BC%E5%85%A5maven%E5%AF%B9%E5%BA%94%E5%9D%90%E6%A0%87\">③叁导入maven对应坐标</a></p>\n<p id=\"%E2%91%A3%E7%BC%96%E5%86%99%E5%AE%9E%E4%BD%93%E7%B1%BB-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A3%E7%BC%96%E5%86%99%E5%AE%9E%E4%BD%93%E7%B1%BB\">④编写实体类</a></p>\n<p id=\"%C2%A0%E2%91%A4%E7%BC%96%E5%86%99Mapper%E6%8E%A5%E5%8F%A3%EF%BC%88dao%E6%8E%A5%E5%8F%A3%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E2%91%A4%E7%BC%96%E5%86%99Mapper%E6%8E%A5%E5%8F%A3%EF%BC%88dao%E6%8E%A5%E5%8F%A3%EF%BC%89\"> ⑤编写Mapper接口（dao接口）</a></p>\n<p id=\"%C2%A0%E2%91%A5%E7%BC%96%E5%86%99service%E6%8E%A5%E5%8F%A3-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E2%91%A5%E7%BC%96%E5%86%99service%E6%8E%A5%E5%8F%A3\"> ⑥编写service接口</a></p>\n<p id=\"%C2%A0%E2%80%8B%E7%BC%96%E8%BE%91-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E2%80%8B%E7%BC%96%E8%BE%91\"> ​编辑</a></p>\n<p id=\"%C2%A0%E2%91%A6%E7%BC%96%E5%86%99Service%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E2%91%A6%E7%BC%96%E5%86%99Service%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0\"> ⑦编写Service接口实现</a></p>\n<p id=\"%C2%A0%E2%91%A7%E7%BC%96%E5%86%99Controller-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E2%91%A7%E7%BC%96%E5%86%99Controller\"> ⑧编写Controller</a></p>\n<p id=\"%C2%A0%E2%91%A8%E7%BC%96%E5%86%99jsp%E6%B7%BB%E5%8A%A0%E9%A1%B5%E9%9D%A2-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E2%91%A8%E7%BC%96%E5%86%99jsp%E6%B7%BB%E5%8A%A0%E9%A1%B5%E9%9D%A2\"> ⑨编写jsp添加页面</a></p>\n<p id=\"%C2%A0%E2%91%A9%E7%BC%96%E5%86%99%E5%88%97%E8%A1%A8jsp%E5%B1%95%E7%A4%BA%E9%A1%B5%E9%9D%A2-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E2%91%A9%E7%BC%96%E5%86%99%E5%88%97%E8%A1%A8jsp%E5%B1%95%E7%A4%BA%E9%A1%B5%E9%9D%A2\"> ⑩编写列表jsp展示页面</a></p>\n<p id=\"%E2%91%A0%E2%91%A0%E7%BC%96%E5%86%99%E5%93%8D%E5%BA%94%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A0%E2%91%A0%E7%BC%96%E5%86%99%E5%93%8D%E5%BA%94%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">①①编写响应的配置文件</a></p>\n<p id=\"%E2%91%A0%E2%91%A1%E6%B5%8B%E8%AF%95%E6%B7%BB%E5%8A%A0%E8%B4%A6%E6%88%B7-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A0%E2%91%A1%E6%B5%8B%E8%AF%95%E6%B7%BB%E5%8A%A0%E8%B4%A6%E6%88%B7\">①②测试添加账户</a></p>\n<p id=\"%E2%91%A0%E2%91%A2%E6%B5%8B%E8%AF%95%E8%B4%A6%E6%88%B7%E5%88%97%E8%A1%A8-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A0%E2%91%A2%E6%B5%8B%E8%AF%95%E8%B4%A6%E6%88%B7%E5%88%97%E8%A1%A8\">①③测试账户列表</a></p>\n<p id=\"SSM%E6%95%B4%E5%90%88%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:0px;\"><a href=\"#SSM%E6%95%B4%E5%90%88%E6%B5%8B%E8%AF%95\">SSM整合测试</a></p>\n<p id=\"%E2%91%A0%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%91%A0%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93\">①创建数据库</a></p>\n<p id=\"%E2%91%A1%E5%88%9B%E5%BB%BAmaven%E5%B7%A5%E7%A8%8B-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%91%A1%E5%88%9B%E5%BB%BAmaven%E5%B7%A5%E7%A8%8B\">②创建maven工程</a></p>\n<p id=\"%C2%A0%E2%91%A2pom.xml%E4%B8%AD%E5%AF%BC%E5%85%A5%E5%AF%B9%E5%BA%94%E7%9A%84%E5%9D%90%E6%A0%87-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E2%91%A2pom.xml%E4%B8%AD%E5%AF%BC%E5%85%A5%E5%AF%B9%E5%BA%94%E7%9A%84%E5%9D%90%E6%A0%87\"> ③pom.xml中导入对应的坐标</a></p>\n<p id=\"%E2%91%A3%E7%BC%96%E5%86%99%E5%AE%9E%E4%BD%93%E7%B1%BB-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%91%A3%E7%BC%96%E5%86%99%E5%AE%9E%E4%BD%93%E7%B1%BB\">④编写实体类</a></p>\n<p id=\"%E2%91%A4%E7%BC%96%E5%86%99Mapper%E6%8E%A5%E5%8F%A3%EF%BC%88dao%E6%8E%A5%E5%8F%A3%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%91%A4%E7%BC%96%E5%86%99Mapper%E6%8E%A5%E5%8F%A3%EF%BC%88dao%E6%8E%A5%E5%8F%A3%EF%BC%89\">⑤编写Mapper接口（dao接口）</a></p>\n<p id=\"%C2%A0%E2%91%A5%E7%BC%96%E5%86%99service%E6%8E%A5%E5%8F%A3-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E2%91%A5%E7%BC%96%E5%86%99service%E6%8E%A5%E5%8F%A3\"> ⑥编写service接口</a></p>\n<p id=\"%C2%A0%E2%91%A6%E7%BC%96%E5%86%99Service%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E2%91%A6%E7%BC%96%E5%86%99Service%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0\"> ⑦编写Service接口实现</a></p>\n<p id=\"%C2%A0%E2%91%A7%E7%BC%96%E5%86%99Controller-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E2%91%A7%E7%BC%96%E5%86%99Controller\"> ⑧编写Controller</a></p>\n<p id=\"%C2%A0%E2%91%A8%E7%BC%96%E5%86%99jsp%E6%B7%BB%E5%8A%A0%E9%A1%B5%E9%9D%A2-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E2%91%A8%E7%BC%96%E5%86%99jsp%E6%B7%BB%E5%8A%A0%E9%A1%B5%E9%9D%A2\"> ⑨编写jsp添加页面</a></p>\n<p id=\"%C2%A0%E2%91%A9%E7%BC%96%E5%86%99%E5%88%97%E8%A1%A8jsp%E5%B1%95%E7%A4%BA%E9%A1%B5%E9%9D%A2-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E2%91%A9%E7%BC%96%E5%86%99%E5%88%97%E8%A1%A8jsp%E5%B1%95%E7%A4%BA%E9%A1%B5%E9%9D%A2\"> ⑩编写列表jsp展示页面</a></p>\n<p id=\"%E2%91%A0%E2%91%A0%E7%BC%96%E5%86%99%E5%93%8D%E5%BA%94%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%91%A0%E2%91%A0%E7%BC%96%E5%86%99%E5%93%8D%E5%BA%94%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">①①编写响应的配置文件</a></p>\n<p id=\"applicationContext.xml-toc\" style=\"margin-left:80px;\"><a href=\"#applicationContext.xml\">applicationContext.xml</a></p>\n<p id=\"jdbc.properties-toc\" style=\"margin-left:80px;\"><a href=\"#jdbc.properties\">jdbc.properties</a></p>\n<p id=\"spring-mvc.xml-toc\" style=\"margin-left:80px;\"><a href=\"#spring-mvc.xml\">spring-mvc.xml</a></p>\n<p id=\"sqlMapConfig.xml-toc\" style=\"margin-left:80px;\"><a href=\"#sqlMapConfig.xml\">sqlMapConfig.xml</a></p>\n<p id=\"sqlMapConfig-spring.xml-toc\" style=\"margin-left:80px;\"><a href=\"#sqlMapConfig-spring.xml\">sqlMapConfig-spring.xml</a></p>\n<p id=\"web.xml-toc\" style=\"margin-left:80px;\"><a href=\"#web.xml\">web.xml</a></p>\n<p id=\"%E2%91%A0%E2%91%A1%E6%B5%8B%E8%AF%95%E6%B7%BB%E5%8A%A0%E8%B4%A6%E6%88%B7%E5%92%8C%E8%B4%A6%E6%88%B7%E5%88%97%E8%A1%A8-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%91%A0%E2%91%A1%E6%B5%8B%E8%AF%95%E6%B7%BB%E5%8A%A0%E8%B4%A6%E6%88%B7%E5%92%8C%E8%B4%A6%E6%88%B7%E5%88%97%E8%A1%A8\">①②测试添加账户和账户列表</a></p>\n<p id=\"%E2%91%A0%E2%91%A2%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:40px;\"><a href=\"#%E2%91%A0%E2%91%A2%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E6%B5%8B%E8%AF%95\">①③数据库中测试</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"Spring%E4%BB%8B%E7%BB%8D\">Spring介绍</h1>\n<h2 id=\"Spring%E6%98%AF%E4%BB%80%E4%B9%88\">Spring是什么</h2>\n<p>Spring是分层的JavaSE/EE应用full-stack轻量级开源框架，以loC(InverseOfControl:反转控制)和 <strong>AOP</strong>(AspectOrientedProgramming:面向切面编程)为内核。</p>\n<p>提供了<strong>展现层SpringMVC</strong>和持久层<strong>Spring JDBCTemplate</strong>以及业务展事务管理等众多的企业级应用技术还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的JavaEE企业应用开源框架。</p>\n<h2 id=\"Spring%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B\">Spring发展历程</h2>\n<p>1997年，IBM提出了EJB的思想<br/> 1998年，SUN制定开发标准规范EJB1.0<br/> 1999年，EJB1.1发布<br/> 2001年，EJB2.0发布<br/> 2003年，EJB2.1发布<br/> 2006年，EJB3.0发布</p>\n<p><strong>Rod Johnson(Spring之父)</strong><br/> ExpertOne-to-OneJ2EEDesignand Development(2002)<br/> 阐述了J2EE使用EJB开发设计的优点及解决方案<br/> ExpertOne-to-OneJ2EEDevelopment without EJB(2004)<br/> 阐述了J2EE开发不使用EJB的解决方式(Spring雏形)</p>\n<p><strong>2017年9月份发布了Spring的最新版本 Spring5.0通用版(GA)</strong></p>\n<h2 id=\"Spring%E4%BC%98%E5%8A%BF\"><strong>Spring优势</strong></h2>\n<p><strong>①方便解耦，简化开发</strong></p>\n<blockquote>\n<p>通过Spring提供的loC容器，可以将对象间的依赖关系交由Spring进行控制，避免硬编码所造成的过度耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</p>\n</blockquote>\n<p><strong>②AOP编程的支持</strong></p>\n<blockquote>\n<p>通过Sprina的AOP功能，方便进行面向切面编程，许多不容易用传统OOP实现的功能可以通过AOP轻松实现</p>\n</blockquote>\n<p><strong>③声明式事务的支持</strong></p>\n<blockquote>\n<p>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务管理，提高开发效率和质量</p>\n</blockquote>\n<p><strong>④方便程序的测试</strong></p>\n<blockquote>\n<p>可以用非容器依赖的编程方式进行几平所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情</p>\n</blockquote>\n<p><strong>⑤方便集成各种优秀框架</strong></p>\n<blockquote>\n<p>Spring对各种优秀框架(Struts、Hibernate、Hessian、Quartz等)的支持。</p>\n</blockquote>\n<p><strong>⑥降低JavaEE API的使用难度</strong></p>\n<blockquote>\n<p>Spring对JavaEEAPI(如JDBC、JavaMail、远程调用等)进行了薄薄的封装层，使这些API的使用难度大为降低</p>\n</blockquote>\n<p><strong>⑦Java 源码是经典学习范例</strong></p>\n<blockquote>\n<p>Spring的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java设计模式灵活运用以及对Java技术的高深造诣。它的源代码无意是Java技术的最佳实践的范例。</p>\n</blockquote>\n<h2 id=\"Spring%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%C2%A0\">Spring的体系结构 </h2>\n<p></p>\n<p><img alt=\"\" height=\"300\" src=\"image\\17654c200762477694e0811c1690eb40.png\" width=\"465\"/></p>\n<h1 id=\"%C2%A0Spring%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\"> Spring快速入门</h1>\n<h2 id=\"Spring%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4\">Spring程序开发步骤</h2>\n<p>①导入Spring开发的基本包坐标</p>\n<p>②编写Dao接口和实现类</p>\n<p>③创建Spring核心配置文件</p>\n<p>④在Spring配置文件中配置UserDaoImpl</p>\n<p>⑤使用Spring的API获得Bean</p>\n<blockquote>\n<p>这种 方式完成了解耦，后续只需要给配置文件即可</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\f832addae8e34fc49fe46386f3e29af0.png\" width=\"650\"/></p>\n<p></p>\n<h1 id=\"idea%E4%B8%AD%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\">idea中快速入门</h1>\n<blockquote>\n<p>①：在pom.xml中配置spring的坐标</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;dependencies&gt;\n\n    &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n    &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n  &lt;/dependency&gt;\n    \n  &lt;/dependencies&gt;</code></pre>\n<blockquote>\n<p>②：在src下创建com.Dao.UserDao</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\1392434913d64f77906f404b9663ee15.png\" width=\"872\"/></p>\n<p></p>\n<p> 创建一个接口</p>\n<pre><code class=\"language-java\">public interface UserDao {\n    public void play();\n}\n</code></pre>\n<p>创建UserDao的实现类</p>\n<pre><code class=\"language-java\">import com.Dao.UserDao;\n\npublic class UserDaoImpl implements UserDao {\n    public void play(){\n        System.out.println(\"play and play...\");\n    }\n}</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\ccbcf548b33f4bd2843ed54a781ee8c8.png\" width=\"919\"/></p>\n<blockquote>\n<p>③：创建spring核心配置文件(文件的名字任意)</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\a4d08aecddad45a385aa6a88fe58dfc1.png\" width=\"544\"/></p>\n<p> 一般起名为applicationContext.xml</p>\n<blockquote>\n<p>④在Spring配置文件中配置UserDaoImpl(id任意)</p>\n</blockquote>\n<pre><code class=\"language-bash\"> &lt;bean id=\"userDao\" class=\"com.Dao.impl.UserDaoImpl\"&gt;&lt;/bean&gt;</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\3bd52686d89f417aa2c5d753e8ccff8d.png\" width=\"972\"/></p>\n<blockquote>\n<p> ⑤：使用springAPI获得Bean</p>\n</blockquote>\n<p>创建一个Demo包下的UserDemo</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\912f57669ce84babb180c98d0cba88ef.png\" width=\"831\"/></p>\n<p></p>\n<pre><code class=\"language-java\">import com.Dao.UserDao;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class UserDemo {\n    public static void main(String[] args) {\n        ApplicationContext app =new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n        UserDao userDao = (UserDao) app.getBean(\"userDao\");\n        userDao.play();\n    }\n}</code></pre>\n<p>运行之后：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\1b3d7efb4b7f46ca90a50003e71c6973.png\" width=\"1173\"/></p>\n<h1 id=\"%C2%A0Spring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"> Spring配置文件</h1>\n<h2 id=\"Bean%E6%A0%87%E7%AD%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE\"><strong>Bean标签基本配置</strong></h2>\n<p>用于配置对象交由Spring来创建</p>\n<blockquote>\n<p>默认情况下他调用的<strong>是类中的无参构造函数</strong>，如果没有无参构造函数则不能创建成功。</p>\n</blockquote>\n<p><strong>基本属性：</strong></p>\n<p><strong>id</strong>：Bean实例在Spring容器中的唯一标识</p>\n<p><strong>class</strong>：Bean的限定名称</p>\n<h2 id=\"Bean%E6%A0%87%E7%AD%BE%E8%8C%83%E5%9B%B4%E9%85%8D%E7%BD%AE\">Bean标签范围配置</h2>\n<p>scope：指对象的作用范围，取值如下：</p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\"><tbody><tr><td>取值范围</td><td>说明</td></tr><tr><td><strong>singleton</strong></td><td><strong>默认值，单例的</strong></td></tr><tr><td><strong>prototype</strong></td><td><strong>多例的</strong></td></tr><tr><td>request</td><td>WEB项目中，Spring创建一个Bean的对象，将对象存入到request域中</td></tr><tr><td>session</td><td>WEB项目中，Spring创建一个Bean的对象，将对象存入到session域中</td></tr><tr><td>global session</td><td>WEB项目中，应用在Portlet环境，如果没有Porlet环境那么globalSession相当于session</td></tr></tbody></table>\n<blockquote>\n<p> 下pom.xml中配置junit的坐标</p>\n</blockquote>\n<pre><code class=\"language-XML\">   &lt;dependency&gt;\n      &lt;groupId&gt;junit&lt;/groupId&gt;\n      &lt;artifactId&gt;junit&lt;/artifactId&gt;\n      &lt;version&gt;4.11&lt;/version&gt;\n    &lt;/dependency&gt;</code></pre>\n<blockquote>\n<p> 在test模块下创建text类</p>\n</blockquote>\n<pre><code class=\"language-java\">package com;\n\nimport com.Dao.UserDao;\nimport org.junit.Test;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class text {\n    @Test\n    public void text1(){\n        ApplicationContext app =new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n        UserDao userDao1 = (UserDao) app.getBean(\"userDao\");\n        UserDao userDao2 = (UserDao) app.getBean(\"userDao\");\n        System.out.println(userDao1);\n        System.out.println(userDao2);\n   \n    }\n}</code></pre>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\b28425700454429ead23617c5a27e305.png\" width=\"894\"/></p>\n<p></p>\n<blockquote>\n<p> 使用singleton打印出来的地址一致说明容器中只有一份</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\3c8d992c462d4379ab6a05ff4bbdcb16.png\" width=\"424\"/></p>\n<blockquote>\n<p> 使用prototype打印出来的地址不一致说明容器中有多份</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\f5b1887ebb9d451387dc2fb9799787ce.png\" width=\"414\"/></p>\n<h3 id=\"%C2%A0%E6%97%A0%E5%8F%82%E6%9E%84%E9%80%A0%E5%88%9B%E5%BB%BA%E6%97%B6%E6%9C%BA\"> 无参构造创建时机</h3>\n<p>1)当scope的取值为singleton时</p>\n<blockquote>\n<p>Bean的实例化个数:1个</p>\n</blockquote>\n<blockquote>\n<p>Bean的实例化时机:当Spring核心文件被加载时，实例化配置的Bean实例 </p>\n</blockquote>\n<p><strong>Bean的生命周期:</strong></p>\n<ul><li>   对象创建:当应用加载，创建容器时，对象就被创建了</li><li>   对象运行:只要容器在，对象一直活着</li><li>   对象销毁:当应用卸载，销毁容器时，对象就被销毁了</li></ul>\n<p>2)当scope取值为prototype时</p>\n<blockquote>\n<p>Bean的实例化个数:多个</p>\n</blockquote>\n<blockquote>\n<p>Bean的实例化时机:当调用getBean()方法时实例化Bean</p>\n</blockquote>\n<p><strong>Bean的生命周期</strong></p>\n<ul><li>   对象创建:当使用对象时，创建新的对象实例</li><li>   对象运行:只要对象在使用中，就一直活着</li><li>   对象销毁:当对象长时间不用时，被Java的垃圾回收器回收了</li></ul>\n<h2 id=\"Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%85%8D%E7%BD%AE\">Bean生命周期配置</h2>\n<blockquote>\n<p><strong>init-method</strong>：指定类中的初始化方法名称</p>\n</blockquote>\n<blockquote>\n<p><strong>destory-method</strong>：指定类中的销毁方法名称</p>\n</blockquote>\n<p>在UserDaoImp类下</p>\n<p>创建的初始化方法init和销毁方法destory(<strong>名字为任意的</strong>)</p>\n<pre><code class=\"language-java\">\npublic class UserDaoImpl implements UserDao {\n    public void play(){\n        System.out.println(\"play and play...\");\n    }\n    public UserDaoImpl(){\n        System.out.println(\"UserDaoImpl被创建\");\n    }\n    public void init(){\n        System.out.println(\"初始化方法\");\n    }\n    public void destory(){\n        System.out.println(\"销毁方法\");\n    }\n}</code></pre>\n<p> 在applicationContext.xml文件中指定初始化和销毁方法</p>\n<pre><code class=\"language-XML\"> &lt;bean id=\"userDao\" class=\"com.Dao.impl.UserDaoImpl\" \n    init-method=\"init\" destroy-method=\"destory\"\n    &gt;&lt;/bean&gt;</code></pre>\n<p> 在UserDemo方法运行结果：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\2f05d224f1674f5db57e83291f01b50e.png\" width=\"677\"/></p>\n<h2 id=\"%C2%A0Bean%E5%AE%9E%E4%BE%8B%E5%8C%96%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F\"> Bean实例化三种方式</h2>\n<p><strong>无参构造</strong>方法实例化</p>\n<p>工厂<strong>静态</strong>方法实例化</p>\n<p>工厂<strong>实例方</strong>法实例化</p>\n<p>①：工厂<strong>静态</strong>方法实例化</p>\n<p><strong>创建一个factory包下</strong></p>\n<pre><code class=\"language-java\">package com.factory;\n\nimport com.Dao.UserDao;\nimport com.Dao.impl.UserDaoImpl;\n\npublic class StaticFactory {\n    public static UserDao getUserDao(){\n        return new UserDaoImpl();\n    }\n}\n</code></pre>\n<p><strong>xml中配置：</strong></p>\n<pre><code class=\"language-XML\">&lt;bean id=\"userDao\" class=\"com.factory.StaticFactory\" factory-method=\"getUserDao\"&gt;&lt;/bean&gt;</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\fed59fd14eee4a45a2c0d9323320a923.png\" width=\"1200\"/></p>\n<p> 在userDemo下运行，或者在test运行也可</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\d9f0f6b00bf94f058866a24c50aa8391.png\" width=\"763\"/></p>\n<p></p>\n<p>② 工厂<strong>实例方</strong>法实例化演示</p>\n<blockquote>\n<p>创建一个DynamicFactory类</p>\n</blockquote>\n<pre><code class=\"language-java\">import com.Dao.UserDao;\nimport com.Dao.impl.UserDaoImpl;\n\npublic class DynamicFactory {\n    public UserDao getUserDao(){\n        return new UserDaoImpl();\n    }\n}\n</code></pre>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\3e6e127a60fb47e9a8bec6e7958ac308.png\" width=\"1030\"/></p>\n<p></p>\n<blockquote>\n<p>在applicationContext.xml中</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;bean id=\"factory\" class=\"com.factory.DynamicFactory\" &gt;&lt;/bean&gt;\n    &lt;bean id=\"userDao\" factory-bean=\"factory\" factory-method=\"getUserDao\"&gt;&lt;/bean&gt;\n&lt;!--第一bean表示创建工厂对象，第二个表示从factory容器获得getUserDao方法获得对象--&gt;</code></pre>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\250c4d11fde8422ab6a438f7fbc44d2d.png\" width=\"1200\"/></p>\n<blockquote>\n<p>其余代码不变，在text下运行得</p>\n</blockquote>\n<p><img alt=\"\" height=\"609\" src=\"image\\7de035ea18ca439f98fa3d2816ce3731.png\" width=\"1200\"/></p>\n<h2 id=\"%C2%A0%C2%A0\">  </h2>\n<h2 id=\"Bean%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90\">Bean的依赖注入分析</h2>\n<p>创建一个Service服务层的接口和实现类</p>\n<p>接口中写入</p>\n<pre><code class=\"language-java\">public interface UserService {\n    public void save();\n}\n</code></pre>\n<p>service服务层的实现类去实现save方法</p>\n<pre><code class=\"language-java\">public class UserServiceImpl implements UserService {\n\n    @Override\n    public void save() {\n\n        ApplicationContext app =new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n        UserDao userDao = (UserDao) app.getBean(\"userDao\");\n         userDao.save();\n\n    }\n}\n</code></pre>\n<p>dao持久层下的接口和实现类</p>\n<pre><code class=\"language-java\">public interface UserDao {\n    public void save();\n\n}</code></pre>\n<p>实现类下</p>\n<pre><code class=\"language-java\">public class UserDaoImpl implements UserDao {\n    public void save(){\n        System.out.println(\"run save...\");\n    }\n}</code></pre>\n<p>resource下的applicationContext.xml下</p>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;\n\n    &lt;bean id=\"userDao\" class=\"com.Dao.impl.UserDaoImpl\"&gt;&lt;/bean&gt;\n    &lt;bean id=\"userService\" class=\"com.Service.Impl.UserServiceImpl\"&gt;&lt;/bean&gt;\n\n\n&lt;/beans&gt;</code></pre>\n<p>在demo包下模拟web环境的创建一个UserController</p>\n<pre><code class=\"language-java\">import com.Service.UserService;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class UserController {\n    public static void main(String[] args) {\n        ApplicationContext app=new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n        UserService userService = (UserService) app.getBean(\"userService\");\n        userService.save();\n    }\n}</code></pre>\n<p>运行之后</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\37ecd6b1755b414882998258d5e28cda.png\" width=\"553\"/></p>\n<p></p>\n<p></p>\n<h2 id=\"%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%A6%82%E5%BF%B5\">依赖注入概念</h2>\n<p>上面的缺点也很明显，是同时获取service和dao层的到时我们只想要service层，所以此时，需要依赖注入，把dao注入到service服务层</p>\n<blockquote>\n<p>依赖注入(DependencyInjection):它是Spring框架核心IOC的具体实现。</p>\n</blockquote>\n<blockquote>\n<p>在编写程序时，通过控制反转，把对象的创建交给了Spring，但是代码中不可能出现没有依赖的情况。 IOC解耦只是降低他们的依赖关系，但不会消除。例如:业务层仍会调用持久层的方法。</p>\n</blockquote>\n<blockquote>\n<p>那这种业务层(Service)和持久层(Dao)的依赖关系，在使用Spring之后，就让Spring来维护了。简单的说，就是坐等<strong>框架把持久层对象传入业务层，而不用我们自己去获取</strong>。</p>\n</blockquote>\n<h3 id=\"%E5%B0%86UserDao%E6%B3%A8%E5%85%A5%E5%88%B0UserService%E5%86%85%E9%83%A8%E7%9A%84%E6%96%B9%E5%BC%8F\">将UserDao注入到UserService内部的方式</h3>\n<p><strong>构造方法和set方法</strong></p>\n<p>法1：set方法</p>\n<p>在UserServiceImpl下创建userDao</p>\n<pre><code class=\"language-java\">import com.Dao.UserDao;\nimport com.Service.UserService;\n\n\npublic class UserServiceImpl implements UserService {\n    private UserDao userDao;\n\n    public void setUserDao(UserDao userDao) {\n        this.userDao = userDao;\n    }\n\n    @Override\n    public void save() {\n        userDao.save();\n    }\n}</code></pre>\n<p>在applicationContext.xml文件中配置</p>\n<pre><code class=\"language-XML\">&lt;bean id=\"userDao\" class=\"com.Dao.impl.UserDaoImpl\"&gt;&lt;/bean&gt;\n&lt;bean id=\"userService\" class=\"com.Service.Impl.UserServiceImpl\"&gt;\n    &lt;property name=\"userDao\" ref=\"userDao\"&gt;&lt;/property&gt;\n\n&lt;/bean&gt;\n</code></pre>\n<p>然后之前创建的UserController就可以启动了</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\9a6b712d4e404d128b353e4c331480ee.png\" width=\"705\"/></p>\n<p> 如果直接new UserServiceImpl对象会报空指针异常的错，</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\9afd00735aba400f96bb95d7b15cb039.png\" width=\"665\"/></p>\n<p> 因为useDao是不是通过spring容器来获取的，自然就是null值了</p>\n<h2 id=\"set%E6%B3%A8%E5%85%A5%E6%96%B9%E6%B3%95%E6%94%B9%E8%BF%9B\">set注入方法改进</h2>\n<p>P命名空间注入本质也是set方法注入，但比起上述的set方法更加方便，首先需要引入p命名空间：</p>\n<pre><code class=\"language-XML\">   xmlns:p=\"http://www.springframework.org/schema/p\"</code></pre>\n<p>修改注入方式</p>\n<pre><code class=\"language-XML\">&lt;bean id=\"userService\" class=\"com.Service.Impl.UserServiceImpl\" p:userDao-ref=\"userDao\"&gt;\n</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\f2caa18490a441b89007e2d865d4efc9.png\" width=\"663\"/></p>\n<p> 是一个对象就用-ref，普通属性就不用</p>\n<p> userController运行之后</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\368c426e29f24c1aa99b47d3cdf7e842.png\" width=\"1084\"/></p>\n<h2 id=\"%C2%A0%E6%9C%89%E5%8F%82%E6%9E%84%E9%80%A0%E6%B3%A8%E5%85%A5%E6%96%B9%E6%B3%95\"> 有参构造注入方法</h2>\n<p>在applicationContext.xml文件中</p>\n<pre><code class=\"language-XML\">    &lt;bean id=\"userService\" class=\"com.Service.Impl.UserServiceImpl\"&gt;\n&lt;!--        name后的userDao表示构造内部的参数名，ref表示引用容器bean的id--&gt;\n        &lt;constructor-arg name=\"userDao\" ref=\"userDao\"&gt;&lt;/constructor-arg&gt;\n    &lt;/bean&gt;</code></pre>\n<p>userServiceImpl下 </p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\b42519cbb6bd45df9a90e46ad346a8d4.png\" width=\"429\"/></p>\n<p> 运行结果：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\309bb10ccb2d45fabd8375cdf19f1d98.png\" width=\"836\"/></p>\n<h2 id=\"Bean%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">Bean的依赖注入的数据类型</h2>\n<p>上面的操作，都是注入引用Bean，除了对象的引用可以注入，普通数据类型，集合都可以在容器中进行注入。</p>\n<p><strong>注入数据的三种数据类型</strong></p>\n<ul><li>普通数据类型</li><li>引用数据类型</li><li>集合数据类型</li></ul>\n<p>普通数据注入，如在UserDao层注入两个普通数据类型(<strong>采用set方式注入)</strong></p>\n<pre><code class=\"language-java\">public class UserDaoImpl implements UserDao {\n\n    private String name;\n    private int  age;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n    public void setAge(int age) {\n        this.age = age;\n    }\n    public void save(){\n        System.out.println(\"姓名：\"+name+\"年龄:\"+age);\n        System.out.println(\"run save...\");\n    }\n}</code></pre>\n<p>在applicationContext.xml文件中，在配置dao中设置参数</p>\n<pre><code class=\"language-XML\">&lt;bean id=\"userDao\" class=\"com.Dao.impl.UserDaoImpl\"&gt;\n    &lt;property name=\"name\" value=\"李四\"/&gt;\n    &lt;property name=\"age\" value=\"20\" /&gt;\n&lt;/bean&gt;</code></pre>\n<p>在Usercontroller下</p>\n<pre><code class=\"language-java\">public class UserController {\n    public static void main(String[] args) {\n        ApplicationContext app=new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n        UserService userService = (UserService) app.getBean(\"userService\");\n        userService.save();\n\n    }\n}</code></pre>\n<p><strong>运行结果</strong></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\b02bf827cfd3422990a014c3367eb596.png\" width=\"656\"/></p>\n<p></p>\n<h2 id=\"%E9%9B%86%E5%90%88%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5\">集合的数据类型注入</h2>\n<p>在UserDaoImpl下</p>\n<blockquote>\n<p>采用set注入方式，设置集合，提供对应得set方法</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.Dao.impl;\n\nimport com.Dao.UserDao;\nimport com.pojo.User;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\n\npublic class UserDaoImpl implements UserDao {\nprivate List&lt;String&gt; strList;\nprivate Map&lt;String, User&gt; userMap;\nprivate Properties properties;\n\n    public void setStrList(List&lt;String&gt; strList) {\n        this.strList = strList;\n    }\n\n    public void setUserMap(Map&lt;String, User&gt; userMap) {\n        this.userMap = userMap;\n    }\n\n    public void setProperties(Properties properties) {\n        this.properties = properties;\n    }\n\n    public void play(){\n\n        System.out.println(\"play and play...\");\n    }\n    public void save(){\n        System.out.println(\"List集合-》\"+strList);\n        System.out.println(\"Map集合-》\"+userMap);\n        System.out.println(\"properties集合-》\"+properties);\n        System.out.println(\"run save...\");\n    }\n}\n</code></pre>\n<p> 在applicationContext.xml下配置注入值</p>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:p=\"http://www.springframework.org/schema/p\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;\n\n&lt;!--&lt;bean id=\"userDao\" class=\"com.Dao.impl.UserDaoImpl\"&gt;--&gt;\n&lt;!--    &lt;property name=\"name\" value=\"李四\"/&gt;--&gt;\n&lt;!--    &lt;property name=\"age\" value=\"20\" /&gt;--&gt;\n&lt;!--&lt;/bean&gt;--&gt;\n    &lt;bean id=\"userDao\" class=\"com.Dao.impl.UserDaoImpl\"&gt;\n       &lt;!--给list集合注入值 --&gt;\n        &lt;property name=\"strList\" &gt;\n            &lt;list&gt;\n                &lt;value&gt;慧慧&lt;/value&gt;\n                &lt;value&gt;孔超&lt;/value&gt;\n                &lt;value&gt;宝&lt;/value&gt;\n            &lt;/list&gt;\n        &lt;/property&gt;\n&lt;property name=\"userMap\"&gt;\n    &lt;map&gt;\n       &lt;!--key表示map里的key，value-ref是对象的引用，引用id为user1和user2   --&gt;\n        &lt;entry key=\"宝1\" value-ref=\"user1\"&gt;&lt;/entry&gt;\n        &lt;entry key=\"宝2\" value-ref=\"user2\"&gt;&lt;/entry&gt;\n    &lt;/map&gt;\n&lt;/property&gt;\n\n        &lt;!-- 给properties注入的值  --&gt;\n        &lt;property name=\"properties\"&gt;\n            &lt;props&gt;\n                &lt;prop key=\"p1\"&gt;宝1&lt;/prop&gt;\n                &lt;prop key=\"p2\"&gt;宝2&lt;/prop&gt;\n            &lt;/props&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n&lt;!--    这是给map对象的user设置的值的--&gt;\n    &lt;bean id=\"user1\" class=\"com.pojo.User\"&gt;\n        &lt;property name=\"name\" value=\"慧慧\"/&gt;\n        &lt;property name=\"address\" value=\"赣州\"/&gt;\n    &lt;/bean&gt;\n    &lt;bean id=\"user2\" class=\"com.pojo.User\"&gt;\n        &lt;property name=\"name\" value=\"孔超\"/&gt;\n        &lt;property name=\"address\" value=\"赣州\"/&gt;\n    &lt;/bean&gt;\n\n\n    &lt;bean id=\"userService\" class=\"com.Service.Impl.UserServiceImpl\"&gt;\n&lt;!--        name后的userDao表示构造内部的参数名，ref表示引用容器bean的id--&gt;\n        &lt;constructor-arg name=\"userDao\" ref=\"userDao\"&gt;&lt;/constructor-arg&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;</code></pre>\n<p></p>\n<p>在UserController测试下</p>\n<pre><code class=\"language-java\">import com.Service.UserService;\n        import org.springframework.context.ApplicationContext;\n        import org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class UserController {\n    public static void main(String[] args) {\n        ApplicationContext app=new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n        UserService userService = (UserService) app.getBean(\"userService\");\n        userService.save();\n\n    }\n}</code></pre>\n<p>运行结果： </p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\ac7e56a6b26c4d58a670af18f392b40e.png\" width=\"585\"/></p>\n<h2 id=\"%C2%A0%E5%BC%95%E5%85%A5%E5%85%B6%E4%BB%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6(%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91)\"> 引入其他配置文件(分模块开发)</h2>\n<p>实际开发中，Spring的配置内容非常的多，这就导致Spring配置很繁琐且体积很大，所以可以将部分配置拆解到其他配置文件中，而且主配置文件<strong>通过import标签进行加载</strong></p>\n<p>语法格式：</p>\n<pre><code class=\"language-XML\">&lt;import resource=\"xxxx.xml\"/&gt;</code></pre>\n<h2 id=\"Spring%E7%9A%84%E9%87%8D%E7%82%B9%E9%85%8D%E7%BD%AE\">Spring的重点配置</h2>\n<p><strong>&lt;bean&gt;标签</strong></p>\n<ul><li>id属性：在容器中Bean实例的唯一标识，不允许重复</li><li>class属性：要实例化的Bean的全限定名</li><li>scope属性：bean的作用范围，常用是Singleton(默认)和prototype</li></ul>\n<p><strong>&lt;property&gt;标签：</strong>属性注入</p>\n<ul><li>        name属性：属性名称</li><li>        value属性：注入的普通属性值</li><li>        ref属性：注入的对象引用值</li></ul>\n<p><strong>&lt;list&gt;标签</strong></p>\n<p><strong>&lt;map&gt;标签</strong></p>\n<p><strong>&lt;constructor-arg&gt;标签</strong></p>\n<p><strong>&lt;import&gt;标签</strong>：导入其他的Spring的分文件</p>\n<h1 id=\"Spring%E7%9B%B8%E5%85%B3%E7%9A%84API\">Spring相关的API</h1>\n<h2 id=\"ApplicationContext%E7%9A%84%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB\">ApplicationContext的继承体系</h2>\n<p>applicationContext：接口类型，代表应用上下文，可以通过其实例获得Spring容器中的Bean对象</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\b13cf4d4e98340f0a85ba9743c6a2ae8.png\" width=\"397\"/></p>\n<p></p>\n<p><strong> 紫色的为接口，浅绿色的为抽象类，绿色的为实现类</strong></p>\n<h3 id=\"ApplicationContext%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB\">ApplicationContext的实现类</h3>\n<p><strong>①ClassPathXmlApplicationContext</strong></p>\n<blockquote>\n<p>它是从类的跟路径下加载配置文件，只需要创建resource下的xml，参数写入xxx.xml即可(推荐使用)</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\a2aa84b4680646caa0c01f2051420eb1.png\" width=\"847\"/></p>\n<p></p>\n<p><strong>②FileSystemXmlApplicationContext</strong></p>\n<blockquote>\n<p>他是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\f21208b0f0a64f97839518a07e8d2ece.png\" width=\"958\"/></p>\n<p></p>\n<p><strong>③AnnotationConfigApplicationContext</strong></p>\n<blockquote>\n<p>当使用注解配置容器对象时，需要食用此类来创建spring容器骂他用来读取注解</p>\n</blockquote>\n<h2 id=\"getBean()%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8\">getBean()方法使用</h2>\n<pre><code class=\"language-java\">//根据id找\npublic object getBean(String name) throws BeansException {\n    assertBeanFactoryActive();\n    return getBeanFactory().getBean(name);\n}\n\n//根据字节码对象找\npublic &lt;T&gt; T getBean(Class&lt;T&gt; requiredType) throws BeansException {\n    assertBeanFactoryActive();\n    return getBeanFactory().getBean(requiredType);\n}</code></pre>\n<p>其中，当参数的数据类型是字符串时，表示根据Bean的id从容器这种获得Bean实例，返回Object，需要强转。当参数的数据类型是Class类型是，表示根据类型从容器中匹配Bean实例，当容器中相同类型的Bean有多个是是，则clss方法会报错</p>\n<p><strong>根据id</strong></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\2e19d67edb514f76825e06cf89e850b1.png\" width=\"954\"/></p>\n<p></p>\n<p><strong> 根据字节码对象</strong></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\6c7afe6c44f1498fb92edc72736cd8bc.png\" width=\"729\"/></p>\n<p>某一类型的bean对象存在多对时，只能使用id，因为id是唯一的，某一类型的bean对象存在一对是时，可以用id，也可以使用字节码对象，使用字节码对象更方便些。</p>\n<p><img alt=\"\" height=\"322\" src=\"image\\ed450fed1e564ce08687d8a8c29fe57f.png\" width=\"1139\"/></p>\n<h2 id=\"%C2%A0Spring%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90(%E8%BF%9E%E6%8E%A5%E6%B1%A0)\"> Spring配置数据源(连接池)</h2>\n<ul><li> 数据源（连接池）是提高程序性能出现的</li><li>事先实例化数据源，初始化部分连接资源</li><li>使用连接资源时从数据源中获取</li><li>使用完毕后将连接资源归还给数据源</li></ul>\n<p>常见的数据源(连接池)：<strong>DBCP、C3P0、BoneCP、Druid</strong>等</p>\n<h2 id=\"%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4\">数据源的开发步骤</h2>\n<ol><li>导入数据源的坐标和数据库驱动坐标</li><li>创建数据源对象</li><li>设置数据源的基本连接数据</li><li>使用数据源获取连接资源和归还连接资源</li></ol>\n<p></p>\n<p>①：导入数据源坐标</p>\n<pre><code class=\"language-XML\">\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;mysql&lt;/groupId&gt;\n      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n      &lt;version&gt;5.1.32&lt;/version&gt;\n    &lt;/dependency&gt;\n//c3p0数据源\n    &lt;dependency&gt;\n      &lt;groupId&gt;c3p0&lt;/groupId&gt;\n      &lt;artifactId&gt;c3p0&lt;/artifactId&gt;\n      &lt;version&gt;0.9.1.2&lt;/version&gt;\n    &lt;/dependency&gt;\n//druid数据源\n    &lt;dependency&gt;\n      &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n      &lt;artifactId&gt;druid&lt;/artifactId&gt;\n      &lt;version&gt;1.1.10&lt;/version&gt;\n    &lt;/dependency&gt;\n    \n    &lt;dependency&gt;\n      &lt;groupId&gt;junit&lt;/groupId&gt;\n      &lt;artifactId&gt;junit&lt;/artifactId&gt;\n      &lt;version&gt;4.11&lt;/version&gt;\n      &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;</code></pre>\n<p>在test测试中创建类</p>\n<pre><code class=\"language-java\">package com.test;\n\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\nimport org.junit.Test;\n\nimport java.sql.Connection;\n\npublic class DateSourceTest {\n    @Test\n    public void test1() throws Exception{\n        ComboPooledDataSource dataSource=new ComboPooledDataSource();\n        dataSource.setDriverClass(\"com.mysql.jdbc.Driver\");\n        //访问数据库中kc_db01库\n        dataSource.setJdbcUrl(\"jdbc:mysql://localhost:3306/kc_db01\");\n        //数据库的账号密码\n        dataSource.setUser(\"root\");\n        dataSource.setPassword(\"123456\");\n        Connection connection=dataSource.getConnection();\n        System.out.println(connection);\n        connection.close();\n    }\n}\n</code></pre>\n<p> 运行结果</p>\n<p><img alt=\"\" height=\"300\" src=\"image\\7c64b7202af24e0991941da7ec7d237e.png\" width=\"506\"/></p>\n<p> 打印出地址说明连接成功</p>\n<p><strong>测试连接druid </strong></p>\n<pre><code class=\"language-java\">\n    @Test\n    public void test2() throws Exception{\n        DruidDataSource dataSource=new DruidDataSource();\n        dataSource.setDriverClassName(\"com.mysql.jdbc.Driver\");\n        //访问数据库中kc_db01库\n        dataSource.setUrl(\"jdbc:mysql://localhost:3306/kc_db01\");\n        //数据库的账号密码\n        dataSource.setUsername(\"root\");\n        dataSource.setPassword(\"123456\");\n        Connection connection=dataSource.getConnection();\n        System.out.println(connection);\n        connection.close();\n    }</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\356cfd6acbda49a38266c0bde540f7a0.png\" width=\"414\"/></p>\n<h2 id=\"%C2%A0%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA\"> 加载配置文件方式创建</h2>\n<p>在resource资源下创建一个MyJdbc.properties文件测试c3p0数据源)</p>\n<p>内容是：</p>\n<pre><code class=\"language-bash\">jdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/kc_db01\njdbc.username=root\njdbc.password=123456</code></pre>\n<p>在测试类中：</p>\n<pre><code class=\"language-java\">  @Test\n    //测试手动创建c3p0数据库源(加载properties配置文件)\n    public void test3() throws Exception{\n        //读取配置文件,获取的参数是你设置的配置文件的名字，\n        ResourceBundle rb=ResourceBundle.getBundle(\"MyJdbc\");\n        String driver=rb.getString(\"jdbc.driver\");\n        String url=rb.getString(\"jdbc.url\");\n        String username=rb.getString(\"jdbc.username\");\n        String password=rb.getString(\"jdbc.password\");\n        //创建数据源对象，设置连接参数\n        ComboPooledDataSource dataSource=new ComboPooledDataSource();\n        dataSource.setDriverClass(driver);\n        dataSource.setJdbcUrl(url);\n        dataSource.setUser(username);\n        dataSource.setPassword(password);\n        Connection connection=dataSource.getConnection();\n        System.out.println(connection);\n        connection.close();\n    }</code></pre>\n<p>运行结果：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\6c9ca4dce90644aeb56a94efd5f69295.png\" width=\"498\"/></p>\n<p> 配置文件的好处有给程序解耦，打完包之后不会变化，程序打完包都是对应的字节码文件，而配置文件还是原模原样。</p>\n<h3 id=\"%E5%B0%86DateSource%E7%9A%84%E5%88%9B%E5%BB%BA%E6%9D%83%E4%BA%A4%E7%BB%99Spring%E5%AE%B9%E5%99%A8%E5%8E%BB%E5%AE%8C%E6%88%90\"><strong>将DateSource的创建权交给Spring容器去完成</strong></h3>\n<blockquote>\n<p>先在pom.xml导入spring的基本坐标</p>\n</blockquote>\n<pre><code class=\"language-XML\">    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;</code></pre>\n<blockquote>\n<p>在resource资源下创建ApplicationContext.xml</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;\n\n  &lt;!--这个value是ComboPooledDataSource数据源的路径 --&gt;\n&lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt;\n\n&lt;!--这里面的name值是数据源中的set的内容--&gt;\n    &lt;property name=\"driverClass\" value=\"com.mysql.jdbc.Driver\"&gt;&lt;/property&gt;\n    &lt;property name=\"jdbcUrl\" value=\"jdbc:mysql://localhost:3306/kc_db01\"&gt;&lt;/property&gt;\n    &lt;property name=\"user\" value=\"root\"&gt;&lt;/property&gt;\n    &lt;property name=\"password\" value=\"123456\"&gt;&lt;/property&gt;\n&lt;/bean&gt;\n\n&lt;/beans&gt;</code></pre>\n<blockquote>\n<p>在DataSourceTest类下</p>\n</blockquote>\n<pre><code class=\"language-java\">   @Test\n    public void test4() throws Exception{\n        ApplicationContext app=new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n       // DataSource dataSource= (DataSource) app.getBean(\"dataSource\");\n      DataSource dataSource= app.getBean(DataSource.class);\n        Connection connection=dataSource.getConnection();\n        System.out.println(connection);\n        connection.close();\n    }</code></pre>\n<p>运行结果</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\8a61ef87b0684d25810e15319fd5e7ff.png\" width=\"640\"/></p>\n<h3 id=\"%E6%8A%BD%E5%8F%96jdbc%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">抽取jdbc配置文件</h3>\n<p>applicationContext.xml加载jdbc.properties配置文件获得连接信息</p>\n<p>首先，需要引入context命名空间和约束路径：</p>\n<p><strong>命名空间：</strong></p>\n<pre><code class=\"language-XML\">xmlns:context=\"http://www.springframework.org/schema/context\"</code></pre>\n<p><strong>约束路径：</strong></p>\n<pre><code class=\"language-XML\">http://www.springframework.org/schema/context\n\nhttp://www.springframework.org/schema/context/spring-context.xsd</code></pre>\n<blockquote>\n<p> applicationContext.xml文件</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\n               \"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n&lt;!-- 加载外部properties文件   --&gt;\n    &lt;context:property-placeholder location=\"classpath:MyJdbc.properties\"/&gt;\n    &lt;!--这个value是ComboPooledDataSource数据源的路径 --&gt;\n&lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt;\n&lt;!--这里面的name值是数据源中的set的内容--&gt;\n\n    &lt;property name=\"driverClass\" value=\"${jdbc.driver}\"&gt;&lt;/property&gt;\n    &lt;property name=\"jdbcUrl\" value=\"${jdbc.url}\"&gt;&lt;/property&gt;\n    &lt;property name=\"user\" value=\"${jdbc.username}\"&gt;&lt;/property&gt;\n    &lt;property name=\"password\" value=\"${jdbc.password}\"&gt;&lt;/property&gt;\n\n&lt;/bean&gt;\n\n&lt;/beans&gt;</code></pre>\n<blockquote>\n<p>MyJdbc.properties文件下</p>\n</blockquote>\n<pre><code class=\"language-XML\">jdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/kc_db01\njdbc.username=root\njdbc.password=123456</code></pre>\n<p>类中代码不变，运行结果为</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\4a91be23f1104ea5a10e5ee6426b1b6a.png\" width=\"498\"/></p>\n<h1 id=\"%C2%A0Spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91\"> Spring注解开发</h1>\n<p>Spring是轻代码而中配置，配置比较繁琐，影响开发效率，所以注解开发是一种趋势，注解代替xml配置文件可以简化配置，提高开发效率。</p>\n<h2 id=\"Spring%E5%8E%9F%E5%A7%8B%E6%B3%A8%E8%A7%A3\">Spring原始注解</h2>\n<p>Spring原始注解主要是替代&lt;Bean&gt;的配置</p>\n<p></p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\909e9f95d91c451c85074c95ef29587a.png\" width=\"515\"/></p>\n<p><strong>注意：</strong>使用注解进行开发是，需要在applicationContext.xml中配置组件扫描，作用是值定哪个宝及其子包下的Bean需要进行扫描以便识别使用注解的类、字段个方法</p>\n<h2 id=\"%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E6%94%B9%E8%BF%9B\">使用注解改进</h2>\n<p>在com包下创建Dao包，service包，web包</p>\n<blockquote>\n<p>在Dao包下的UserDao接口</p>\n</blockquote>\n<pre><code class=\"language-java\">public interface UserDao {\n    public void save();\n}\n</code></pre>\n<blockquote>\n<p>在Dao包下的Impl包下的UserDaoImpl类</p>\n</blockquote>\n<p><strong>注解替换位置</strong></p>\n<pre><code class=\"language-java\">//&lt;bean id=\"userDao\" class=\"com.Dao.impl.UserDaoImpl\"&gt;&lt;/bean&gt;\n@Component(\"userDao\")\n//这个注解和上面xml一样</code></pre>\n<pre><code class=\"language-java\">package com.Dao.impl;\n\nimport com.Dao.UserDao;\nimport org.springframework.stereotype.Component;\n\n//&lt;bean id=\"userDao\" class=\"com.Dao.impl.UserDaoImpl\"&gt;&lt;/bean&gt;\n@Component(\"userDao\")\n//这个注解和上面xml一样\npublic class UserDaoImpl implements UserDao {\n    @Override\n    public void save() {\n        System.out.println(\"running...\");\n    }\n}\n</code></pre>\n<blockquote>\n<p> service包下的UserService接口</p>\n</blockquote>\n<pre><code class=\"language-java\">public interface UserService {\n    public void save();\n}\n</code></pre>\n<blockquote>\n<p> service包下的Impl包下的UserServiceImpl类</p>\n</blockquote>\n<p><strong>注解替换位置</strong></p>\n<pre><code class=\"language-java\">//  &lt;bean id=\"userService\" class=\"com.service.Impl.UserServiceImpl\"&gt;\n@Component(\"userService\")//这是一个组件,这个注解等于以上的xml配置</code></pre>\n<pre><code class=\"language-java\">    //&lt;property name=\"userDao\" ref=\"userDao\"&gt;&lt;/property&gt;\n    @Autowired  // 这个表示自动注入\n    @Qualifier(\"userDao\")//里面写要注入的bean的id</code></pre>\n<pre><code class=\"language-java\">package com.service.Impl;\n\nimport com.Dao.UserDao;\nimport com.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Component;\n\n//  &lt;bean id=\"userService\" class=\"com.service.Impl.UserServiceImpl\"&gt;\n@Component(\"userService\")//这是一个组件\npublic class UserServiceImpl implements UserService {\n\n    //&lt;property name=\"userDao\" ref=\"userDao\"&gt;&lt;/property&gt;\n    @Autowired  // 这个表示自动注入\n    @Qualifier(\"userDao\")//里面写要注入的bean的id\n    private UserDao userDao;\n  //使用注解可以不写set方法\n   /* public void setUserDao(UserDao userDao) {\n       this.userDao = userDao;\n    }\n   */\n\n    @Override\n    public void save() {\n        userDao.save();\n    }\n}\n</code></pre>\n<blockquote>\n<p>在web包下的UserController类下</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.web;\n\nimport com.service.UserService;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class UserController {\n    public static void main(String[] args) {\n        ApplicationContext app=new ClassPathXmlApplicationContext(\"ApplicationContext.xml\");\n        UserService userService = app.getBean(UserService.class);\n        userService.save();\n    }\n\n}\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\6fce8fe012af41f5bd043455ff61a7c9.png\" width=\"1140\"/></p>\n<h3 id=\"%C2%A0%E5%9C%A8UserServiceImpl%E4%B8%AD%E5%85%B6%E4%BB%96%E6%94%B9%E8%BF%9B%E5%86%99%E6%B3%95\"> 在UserServiceImpl中其他改进写法</h3>\n<pre><code class=\"language-java\">@Component(\"userService\")//这是一个组件\npublic class UserServiceImpl implements UserService {\n\n    //&lt;property name=\"userDao\" ref=\"userDao\"&gt;&lt;/property&gt;\n    @Autowired  // 按照数据类型从Spring容器中进行匹配的\n\n    private UserDao userDao;\n    \n    @Override\n    public void save() {\n        userDao.save();\n    }\n}\n</code></pre>\n<p>如果根据id进行匹配就要</p>\n<pre><code class=\"language-java\">    @Autowired  // 按照数据类型从Spring容器中进行匹配的\n    @Qualifier(\"userDao\")//是按照id从容器中进行匹配的，但是主要此处的 @Qualifier结合@Autowired一起使用</code></pre>\n<pre><code class=\"language-java\"> @Resource(name =\"userDao\")//等价于 @Autowired +@Qualifier</code></pre>\n<pre><code class=\"language-java\">package com.service.Impl;\n\nimport com.Dao.UserDao;\nimport com.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\n\n//  &lt;bean id=\"userService\" class=\"com.service.Impl.UserServiceImpl\"&gt;\n@Component(\"userService\")//这是一个组件\npublic class UserServiceImpl implements UserService {\n\n    //&lt;property name=\"userDao\" ref=\"userDao\"&gt;&lt;/property&gt;\n//    @Autowired  // 按照数据类型从Spring容器中进行匹配的\n//    @Qualifier(\"userDao\")//是按照id从容器中进行匹配的，但是主要此处的 @Qualifier结合@Autowired一起使用\n   @Resource(name =\"userDao\")//等价于 @Autowired +@Qualifier\n    private UserDao userDao;\n\n\n    @Override\n    public void save() {\n        userDao.save();\n    }\n}\n</code></pre>\n<p></p>\n<p> 使用注解的方式set方法可以省略不写，使用想xml配置就必须写，注解是通过反射</p>\n<h3 id=\"%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%99%AE%E9%80%9A%E5%80%BC\">注解方式注入普通值</h3>\n<p>@Value可以注入值，一般使用el表达式获取配置文件中的值</p>\n<pre><code class=\"language-java\">   @Value(\"${jdbc.driver}\")\n    private String user;</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\a2af13b6c3be4a828bd3c312b805a96f.png\" width=\"1200\"/></p>\n<p><strong>运行结果 </strong></p>\n<p><img alt=\"\" height=\"232\" src=\"image\\c96dd999f80f4ac2a8e7c122ba8e15d0.png\" width=\"881\"/></p>\n<p> 也可以注入普通值，但是显示十分的多余,下面两种方式一样。</p>\n<pre><code class=\"language-java\">@Value(\"hello\")\nprivate String test;\n\n\nprivate String test=\"hello\";</code></pre>\n<h3 id=\"%E5%88%9D%E5%A7%8B%E6%96%B9%E6%B3%95%E6%B3%A8%E8%A7%A3%C2%A0\">初始方法注解 </h3>\n<p>在serviceImpl中</p>\n<pre><code class=\"language-java\">    @PostConstruct\npublic void init(){\n    System.out.println(\"初始方法\");\n}\n@PreDestroy\npublic void destory(){\n    System.out.println(\"销毁方法\");\n}\n</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\02aa2e0f53c94326b63973e456cd9cb1.png\" width=\"523\"/></p>\n<h2 id=\"Spring%E6%96%B0%E6%B3%A8%E8%A7%A3\">Spring新注解</h2>\n<blockquote>\n<p>使用上面的注解还不能 全部不代替xml配置文件，还需要使用注解替代的配置如下：</p>\n</blockquote>\n<p>非自定义的Bean的配置：&lt;bean&gt;</p>\n<p>加载properties文件的配置：&lt;context:property-placeholder&gt;</p>\n<p>组件扫描的配置：&lt;context:component-scan&gt;</p>\n<p>引入其他文件：&lt;import&gt;</p>\n<p><strong>spring新注解</strong></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\9778e440e10b4207853195142de60f44.png\" width=\"832\"/></p>\n<h2 id=\"%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B3%A8%E8%A7%A3%E6%9B%BF%E6%8D%A2xml%E6%96%87%E4%BB%B6\">使用新注解替换xml文件</h2>\n<blockquote>\n<p>在config包下，创建名为DataSourceConfiguration类下</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.config;\n\n\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\nimport org.springframework.beans.PropertyAccessException;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.PropertySource;\n\nimport javax.sql.DataSource;\nimport java.beans.PropertyVetoException;\n\n// 加载外部properties文件&lt;context:property-placeholder location=\"classpath:MyJdbc.properties\"/&gt;\n@PropertySource(\"classpath:MyJdbc.properties\")\n\npublic class DataSourceConfiguration {\n    @Value(\"${jdbc.driver}\")\n    private String driver;\n    @Value(\"${jdbc.url}\")\n    private String url;\n    @Value(\"${jdbc.password}\")\n    private String password;\n    @Value(\"${jdbc.username}\")\n    private String username;\n\n    @Bean(\"dataSource\")//Spring会将当前方法的返回值以指定名称存储到Spring容器中\n    public DataSource getDateSource() throws PropertyAccessException, PropertyVetoException {\n        ComboPooledDataSource dataSource=new ComboPooledDataSource();\n        dataSource.setDriverClass(driver);\n        dataSource.setJdbcUrl(url);\n        dataSource.setPassword(password);\n        dataSource.setUser(username);\n        return dataSource;\n    }\n}\n</code></pre>\n<blockquote>\n<p>在config包下创建SpringConfiguration类下</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.config;\n\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\nimport org.springframework.beans.PropertyAccessException;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.*;\n\nimport javax.sql.DataSource;\nimport java.beans.PropertyVetoException;\n\n//标志该类是Spring的核心配置类\n@Configuration\n\n// base是基本包他会扫描其子类下的所有包&lt;context:component-scan base-package=\"com\"/&gt;\n@ComponentScan(\"com\")\n\n//在总配置中加载分配置,加载核心配置类，若有多个,则写xx.class,xxx.class....\n@Import(DataSourceConfiguration.class)\npublic class SpringConfiguration {\n\n}\n</code></pre>\n<blockquote>\n<p>web包下的UserController测试下</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.web;\n\nimport com.config.SpringConfiguration;\nimport com.service.UserService;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class UserController {\n    public static void main(String[] args) {\n        //ApplicationContext app=new ClassPathXmlApplicationContext(\"ApplicationContext.xml\");\n        ApplicationContext app=new AnnotationConfigApplicationContext(SpringConfiguration.class);\n        UserService userService = app.getBean(UserService.class);\n        userService.save();\n    }\n\n}\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\595d618e554f4c29bf7448b0141b6ffa.png\" width=\"671\"/></p>\n<h1 id=\"%C2%A0Spring%E9%9B%86%E6%88%90Junit\"> Spring集成Junit</h1>\n<p>原始Junit测试Spring的问题</p>\n<p>在测试类中，每个测试方法都有一下两行代码：</p>\n<pre><code class=\"language-java\">//获得应用上下文对象\nApplicationContext ac=new ClassPathXmlApplicationContext(\"bean.xml\");\n\n//获取要被测试的对象\nIAccountService as=ac.getBean(\"accountService\"，IAccountService.class);</code></pre>\n<p>这两行代码的作用是获取容器，如果不写的话，直接会提示空指针异常，所以又不能轻易删除。</p>\n<p><strong>解决思路</strong></p>\n<ul><li>让SpringJunit负责创建Spring容器，但是需要将配置文件的名称告诉他</li><li>将需要进行测试Bean直接在测试类中进行注入 </li></ul>\n<h2 id=\"%C2%A0Spring%E9%9B%86%E6%88%90Junit%E6%AD%A5%E9%AA%A4\"><strong> Spring集成Junit步骤</strong></h2>\n<p>①导入spring集成Junit的坐标(首先导入好junit)</p>\n<p>②使用@Runwith注解替换原来的运行期</p>\n<p>③使用@ContextConfiguration指定配置文件或配置类</p>\n<p>④使用@Autowired注入需要测试的对象</p>\n<p>⑤创建测试方法进行测试</p>\n<p><strong>在pom.xml中导入</strong></p>\n<pre><code class=\"language-XML\">  &lt;dependencies&gt;   \n\n &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n\n\n    &lt;dependency&gt;\n      &lt;groupId&gt;junit&lt;/groupId&gt;\n      &lt;artifactId&gt;junit&lt;/artifactId&gt;\n      &lt;version&gt;4.12&lt;/version&gt;\n\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;\n      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n\n  &lt;/dependencies&gt;</code></pre>\n<p><strong> 在test包下创建SpringJunitTest类</strong></p>\n<pre><code class=\"language-java\">package com.test;\n\nimport com.service.UserService;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n//指定Spring提供的内核去测试\n@RunWith(SpringJUnit4ClassRunner.class)\n\n//将要测试的文件告诉它\n@ContextConfiguration(\"classpath:ApplicationContext.xml\")\npublic class SpringJunitTest {\n    @Autowired\n    private UserService userService;\n    @Test\n    public void test1(){\n        userService.save();\n    }\n}\n</code></pre>\n<p><strong>测试结果</strong></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\5a2fb93e0a774fab9b18238391ec31db.png\" width=\"598\"/></p>\n<h2 id=\"Spring%E4%B8%8EWeb%E7%8E%AF%E5%A2%83%E9%9B%86%E6%88%90\">Spring与Web环境集成</h2>\n<p>在创建dao包，创建service包，创建web包，在resource资源</p>\n<blockquote>\n<p>在创建一个UserDao和UserDaoImpl实现类</p>\n</blockquote>\n<p>接口下</p>\n<pre><code class=\"language-java\">package com.dao;\n\npublic interface UserDao {\n    public void save();\n}\n</code></pre>\n<p> 实现类</p>\n<pre><code class=\"language-java\">package com.dao.Impl;\n\nimport com.dao.UserDao;\n\npublic class UserDaoImpl implements UserDao {\n    public void save() {\n        System.out.println(\"save running...\");\n    }\n}\n</code></pre>\n<blockquote>\n<p>service包下，创建UserService和UserServiceImpl</p>\n</blockquote>\n<p>接口</p>\n<pre><code class=\"language-java\">package com.service;\n\npublic interface UserService {\n    public void save();\n}\n</code></pre>\n<p>实现类下</p>\n<pre><code class=\"language-java\">package com.service.Impl;\n\nimport com.dao.UserDao;\nimport com.service.UserService;\n\npublic class UserServiceImpl implements UserService {\n\n    public UserDao userDao;\n\n    public void setUserDao(UserDao userDao) {\n        this.userDao = userDao;\n    }\n\n    public void save() {\n        userDao.save();\n    }\n}\n</code></pre>\n<blockquote>\n<p>pom.xml下</p>\n</blockquote>\n<pre><code class=\"language-XML\"> &lt;dependencies&gt;\n\n    &lt;dependency&gt;\n\n\n    &lt;dependency&gt;\n      &lt;groupId&gt;junit&lt;/groupId&gt;\n      &lt;artifactId&gt;junit&lt;/artifactId&gt;\n      &lt;version&gt;4.11&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;\n      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;\n      &lt;artifactId&gt;javax.servlet.jsp-api&lt;/artifactId&gt;\n      &lt;version&gt;2.2.1&lt;/version&gt;\n      &lt;scope&gt;provided&lt;/scope&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n      &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;\n      &lt;artifactId&gt;javax.servlet.jsp-api&lt;/artifactId&gt;\n      &lt;version&gt;2.2.1&lt;/version&gt;\n      &lt;scope&gt;provided&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n      &lt;version&gt;5.3.0&lt;/version&gt;\n      &lt;scope&gt;compile&lt;/scope&gt;\n    &lt;/dependency&gt;\n\n\n  &lt;/dependencies&gt;\n</code></pre>\n<blockquote>\n<p>resource资源路径下</p>\n</blockquote>\n<p> applicationContext.xml下</p>\n<p></p>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;\n\n    &lt;bean id=\"userDao\" class=\"com.dao.Impl.UserDaoImpl\"&gt;&lt;/bean&gt;\n\n    &lt;bean id=\"userService\" class=\"com.service.Impl.UserServiceImpl\"&gt;\n&lt;!-- 给service注入dao的值       --&gt;\n        &lt;property name=\"userDao\" ref=\"userDao\"&gt;&lt;/property&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;</code></pre>\n<blockquote>\n<p>web包下，UserServlet类下，使用注解完成配置</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.web;\n\nimport com.service.UserService;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n\n//使用注解代替web.xml中的配置\n@WebServlet(\"/user\")\npublic class UserServlet extends HttpServlet  {\n    @Override\n    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        ApplicationContext app= new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n        UserService userService = app.getBean(UserService.class);\n        userService.save();\n        System.out.println(\"jin\");\n\n    }\n}\n</code></pre>\n<h3 id=\"%C2%A0%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E6%80%BB%E8%A7%88\"> 项目结构总览</h3>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\938dd347c0e8469d8ba6093bfea24b4e.png\" width=\"268\"/></p>\n<h2 id=\"%C2%A0%E7%BB%99Maven%E9%85%8D%E7%BD%AEtomcat%E6%9C%8D%E5%8A%A1%E5%99%A8\"> 给Maven配置tomcat服务器</h2>\n<p>首先这得是war包，如果这是普通包得添加webapp，并将pom.xml中加入如下，表示这是一个web文件</p>\n<pre><code class=\"language-XML\">  &lt;packaging&gt;war&lt;/packaging&gt;</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\358fc27409f9458ebd9cf66a57bb70e9.png\" width=\"459\"/></p>\n<p></p>\n<p>加完之后点击编辑配置</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\b2bdc6e2c82642cab061c8b8940ef6c7.png\" width=\"225\"/></p>\n<p> 其下的war二选一即可</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\569ed173c1d34f6c82b52747dfa69cf3.png\" width=\"538\"/></p>\n<p> 完成之后点击确认即可完成配置。</p>\n<h2 id=\"%E4%BD%BF%E7%94%A8maven%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BAweb%E5%B7%A5%E7%A8%8B\">使用maven手动创建web工程</h2>\n<p>第一步，点击项目结构，选中 要添加的maven工程，右键添加web。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\b9bd2e15d21f4643a8f5dcd83e1fca93.png\" width=\"317\"/></p>\n<p> 第二步，点击web工程，修改web工程路径</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\22f47b70fc8d42daa712818f38f5bc94.png\" width=\"455\"/></p>\n<p> 点击完成即可完成web工程的手动配置。</p>\n<p></p>\n<h2 id=\"ApplicationContext%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95\">ApplicationContext应用上下文获取方法</h2>\n<p>应用上下文对象是通过<strong>new  ClasspathXmlApplicationContext(spring配置文件)</strong>方式获取的，但是每次从容器中获得Bean时都要编写<strong>new  ClasspathXmlApplicationContext(spring配置文件)</strong>，这样的弊端是配置文件加载多次，应用上下文对象创建多次。</p>\n<p>在Web项目中，可以使用<strong>ServletContextListener</strong>监听Web应用的启动，我们可以在Web应用启动时，就加载Sprina的配置文件，创建应用上下文对象<strong>ApplicationContext</strong>，在将其存储到最大的域<strong>servletContext</strong>域中，这样就可以在任意位置从域中获得应用上下文<strong>ApplicationContext</strong>对象了。</p>\n<p></p>\n<blockquote>\n<p>新建一个Listenter包下的ContextLoderListener</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.Listener;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletContextEvent;\nimport javax.servlet.ServletContextListener;\n\npublic class ContextLoaderListener implements ServletContextListener {\n    public void contextInitialized(ServletContextEvent servletContextEvent) {\n        ApplicationContext app = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n        //将Spring的应用上下文对象存储到ServletContext域中\n        ServletContext servletContext = servletContextEvent.getServletContext();\n        servletContext.setAttribute(\"app\", app);\n        System.out.println(\"Spring容器创建完毕\");\n\n    }\n    public void contextDestroyed(ServletContextEvent servletContextEvent) {\n\n    }\n}\n</code></pre>\n<p>web包下</p>\n<pre><code class=\"language-java\">package com.web;\n\nimport com.service.*;\nimport org.springframework.context.ApplicationContext;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n@WebServlet(\"/user\")\npublic class UserServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n     //   ApplicationContext app= new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n    ServletContext servletContext = req.getServletContext();\n    ApplicationContext app = (ApplicationContext) servletContext.getAttribute(\"app\");\n    UserService userService=app.getBean(UserService.class);\n\n    }\n}</code></pre>\n<p>web.xml下配置监听器</p>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\"&gt;\n    &lt;!--配置监听器--&gt;\n    &lt;listener&gt;\n        &lt;listener-class&gt;com.Listener.ContextLoaderListener&lt;/listener-class&gt;\n    &lt;/listener&gt;\n\n\n\n&lt;/web-app&gt;</code></pre>\n<p>自动创建spring容器</p>\n<h2 id=\"%E4%BC%98%E5%8C%96%E4%BB%A3%E7%A0%81\">优化代码</h2>\n<p>解耦合1</p>\n<p>由于监听器内部我们将代码写固定了，不利于后期的维护操作，所以要解耦合，写在配置文件中进行解耦合。（“”引号内的名字任意）</p>\n<pre>ApplicationContext app = new ClassPathXmlApplicationContext(\"applicationContext.xml\");</pre>\n<p>将此个代码写入到web.xml中进</p>\n<pre><code class=\"language-XML\">&lt;!--全局初始化参数--&gt;\n    &lt;context-param&gt;\n     &lt;!--name和value为任意  --&gt;\n        &lt;param-name&gt;ContextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;applicationContext.xml&lt;/param-value&gt;\n    &lt;/context-param&gt;</code></pre>\n<p>在ContextLoaderListenter类中</p>\n<pre><code class=\"language-java\">package com.Listener;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletContextEvent;\nimport javax.servlet.ServletContextListener;\n\npublic class ContextLoaderListener implements ServletContextListener {\n    public void contextInitialized(ServletContextEvent servletContextEvent) {\n        ServletContext servletContext = servletContextEvent.getServletContext();\n\n        //读取web.xml中的全局参数\n       String contextConfigLocation = servletContext.getInitParameter(\"ContextConfigLocation\");\n        ApplicationContext app = new ClassPathXmlApplicationContext(contextConfigLocation);\n        //将Spring的应用上下文对象存储到ServletContext域中\n\n        servletContext.setAttribute(\"app\", app);\n        System.out.println(\"Spring容器创建完毕\");\n\n    }\n\n}\n</code></pre>\n<p>读取配置文件的值，这样就完成了解耦合</p>\n<h3 id=\"%E8%A7%A3%E8%80%A6%E5%90%882\">解耦合2</h3>\n<p>在userServlet类中 </p>\n<pre>ApplicationContext app = (ApplicationContext) servletContext.getAttribute(\"app\");</pre>\n<p>这样耦合了app代码，让这个只能叫做app，这样不利于后期维护和辨认。</p>\n<blockquote>\n<p>所以我们这么改，在Listener包下创建一个工具类<strong>WebApplicationContextUtils</strong></p>\n</blockquote>\n<pre><code class=\"language-java\">package com.Listener;\n\nimport org.springframework.context.ApplicationContext;\n\nimport javax.servlet.ServletContext;\n\npublic class WebApplicationContextUtils {\n    public static ApplicationContext getApplicationContext(ServletContext servletContext){\n        return (ApplicationContext) servletContext.getAttribute(\"app\");\n    }\n}\n</code></pre>\n<blockquote>\n<p>在userServlet处代码修改为</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.web;\n\n        import com.Listener.WebApplicationContextUtils;\n        import com.service.*;\n        import org.springframework.context.ApplicationContext;\n\n        import javax.servlet.ServletContext;\n        import javax.servlet.ServletException;\n        import javax.servlet.annotation.WebServlet;\n        import javax.servlet.http.HttpServlet;\n        import javax.servlet.http.HttpServletRequest;\n        import javax.servlet.http.HttpServletResponse;\n        import java.io.IOException;\n\n@WebServlet(\"/user\")\npublic class UserServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        //   ApplicationContext app= new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n        ServletContext servletContext = req.getServletContext();\n        //ApplicationContext app = (ApplicationContext) servletContext.getAttribute(\"app\");\n     //变动处\n        ApplicationContext app = WebApplicationContextUtils.getApplicationContext(servletContext);\n        UserService userService=app.getBean(UserService.class);\n\n    }\n}\n</code></pre>\n<p></p>\n<h2 id=\"spring%E8%87%AA%E5%B8%A6%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8\">spring自带的监听器</h2>\n<p>上面写出的手动实现的监听器，Spring提供了一个监听器ContextLoderListener就是对上述功能的封装，该监听器内部加载Spring配置文件，创建应用上下文对象，并存储到ServletContext域中，提供一个客户亿工具WebApplicationContextUtils供使用者获得上下文对象</p>\n<p>要使用监听器，需要做<strong>两件事</strong>：</p>\n<blockquote>\n<p>①：在web.xml中配置ContextLoaderListener监听器（导入spring-web坐标）</p>\n</blockquote>\n<blockquote>\n<p>②：使用WebApplicationContextUtils获得应用上下文对象  ApplicationContext              </p>\n</blockquote>\n<p>在pim.xml中导入坐标</p>\n<pre><code class=\"language-XML\">  &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;\n            &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;</code></pre>\n<p>web.xml中</p>\n<pre><code class=\"language-XML\">\n&lt;!--全局初始化参数--&gt;\n    &lt;context-param&gt;\n     &lt;!--name和value为任意  --&gt;\n        &lt;param-name&gt;ContextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;\n    &lt;/context-param&gt;\n\n    &lt;!--配置监听器--&gt;\n    &lt;listener&gt;\n&lt;!--        &lt;listener-class&gt;com.Listener.ContextLoaderListener&lt;/listener-class&gt;--&gt;\n        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n\n    &lt;/listener&gt;\n</code></pre>\n<p>userServlet类中，使用WebApplicationUtils获得上下文</p>\n<pre><code class=\"language-java\">\n@WebServlet(\"/user\")\npublic class UserServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        //   ApplicationContext app= new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n        ServletContext servletContext = req.getServletContext();\n        //ApplicationContext app = (ApplicationContext) servletContext.getAttribute(\"app\");\n     //变动处\n        //ApplicationContext app = WebApplicationContextUtils.getApplicationContext(servletContext);\n        WebApplicationContext app = WebApplicationContextUtils.getWebApplicationContext(servletContext);\n        UserService userService=app.getBean(UserService.class);\n\n    }\n}\n</code></pre>\n<p>这样就成功使用了spring给我们提供的监听器。</p>\n<h1 id=\"SpringMVC%E6%A6%82%E8%BF%B0\">SpringMVC概述</h1>\n<p><strong>SpringMVC</strong>（M:Model模型，V:views视图，C：Controller控制器）是一种基于Java的实现<strong>MVC设计模型</strong>的请求驱动类型的轻量级Web框架，属于SpringFrameWork的后续产品，已经融合在Spring Web Flow中。</p>\n<p>SpringMVC已经成为目前最主流的MVC框架之一，并且随着Spring3.0的发布，全面超越Struct2，成为最优秀的MVC框架，他通过一套注解，让一个简单的Java类成为处理请求的控制器，而无须实现任何接口，同时他还支持<strong>RESTful</strong>编程分格的请求</p>\n<h2 id=\"web%E5%B1%82%E7%9A%84%E6%A1%86%E6%9E%B6%E5%AE%8C%E6%88%90%E7%9A%84%E7%9B%B8%E5%BA%94%E7%9A%84%E6%93%8D%E4%BD%9C%E5%9B%BE%E7%A4%BA\">web层的框架完成的相应的操作图示</h2>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\4248e08f43a84355a5c00e5de4996892.png\" width=\"768\"/></p>\n<p> SpringMVC的核心是前端控制器，SpringMVC使用Servlet充当前端控制器</p>\n<h2 id=\"SpringMVC%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4\">SpringMVC开发使用步骤</h2>\n<p>需求：：客户端发起请求，服务器接受请求，执行逻辑并进行视图跳转。</p>\n<p>1、先导入SpringMVC的相关坐标</p>\n<p>2、配置SpringMVC核心控制器DispathcerServlet</p>\n<p>3、创建Controller类和视图界面</p>\n<p>4、使用注解配置Controller类中业务方法的映射地址</p>\n<p>5、配置SpringMVC核心文件spring-mvc.xml</p>\n<p>6、客户端发起请求测试</p>\n<blockquote>\n<p>②、导入坐标</p>\n</blockquote>\n<pre><code class=\"language-XML\">      &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n            &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<blockquote>\n<p>②、配置控制器</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;!-- 配置spring的前端控制器   --&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n&lt;!-- 设置控制器服务器开始就启动，没有设置则第一次访问才创建对象--&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;\n    &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;</code></pre>\n<blockquote>\n<p>③、创建controller视图和视图界面④、使用注解映射地址</p>\n</blockquote>\n<p>创建一个controller包，包下创建一个userController类，类中</p>\n<pre><code class=\"language-java\">package com.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n//配置类，使用注解把这个类放到容器中\n@Controller\npublic class userController {\n\n//用注解给这个方法请求映射某个地址\n    @RequestMapping(\"/quick\")\n    public String save(){\n        System.out.println(\"controller save running\");\n       //就会跳转到KCandZH.jsp这个页面上去\n        return \"KCandZH.jsp\";\n    }\n}\n</code></pre>\n<p>在webapp下创建一个KCandZH.jsp页面</p>\n<pre><code class=\"language-bash\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=utf-8\" pageEncoding=\"utf-8\" %&gt;\n&lt;%\n    String path = request.getContextPath();\n    String basepath = request.getScheme() + \"://\" + request.getServerName() + \":\" + request.getServerPort() + path + \"/\";\n%&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;base href=\"&lt;%=basepath %&gt;\"/&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;title&gt;Insert title here&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\nkCandZH forever\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<blockquote>\n<p>⑤、配置核心spring-mvc.xml（web.xml中）</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;!-- 配置spring的前端控制器   --&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n&lt;!-- 设置配置SpringMVC核心文件spring-mvc.xml--&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n            &lt;param-value&gt;classpath:spring-mvc.xml&lt;/param-value&gt;\n        &lt;/init-param&gt;\n        &lt;!-- 设置控制器服务器开始就启动，没有设置则第一次访问才创建对象--&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;\n    &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;</code></pre>\n<blockquote>\n<p>在resource下写一个spring-mvc.xml用于组件扫描</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"  &gt;\n\n&lt;!--controller的组件扫描 --&gt;\n    &lt;context:component-scan base-package=\"com.controller\"/&gt;\n&lt;/beans&gt;</code></pre>\n<h2 id=\"SpringMVC%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%A4%BA\">SpringMVC流程图示</h2>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\6ce9ecdc334b4250bbb8c2e099662e95.png\" width=\"782\"/></p>\n<h1 id=\"%C2%A0SpringMVC%E7%9A%84%E7%BB%84%E4%BB%B6%E8%A7%A3%E6%9E%90\"> SpringMVC的组件解析</h1>\n<h2 id=\"SpringMVC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B\">SpringMVC执行流程</h2>\n<blockquote>\n<p>①用户发送请求至前端控制器DispatcherServlet（负责组件调度）。</p>\n</blockquote>\n<blockquote>\n<p>②DispatcherServlet收到请求调用HandlerMapping处理器映射器。</p>\n</blockquote>\n<blockquote>\n<p>③处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet</p>\n</blockquote>\n<blockquote>\n<p>④ DispatcherServlet调用HandlerAdapter处理器适配器。</p>\n</blockquote>\n<blockquote>\n<p>⑤ HandlerAdapter经过适配调用具体的处理器(Controller（封装特有行为的后端代码），也叫后端控制器)。</p>\n</blockquote>\n<blockquote>\n<p>⑥Controller执行完成返回ModelAndView。</p>\n</blockquote>\n<blockquote>\n<p>⑦HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</p>\n</blockquote>\n<blockquote>\n<p>⑧DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</p>\n</blockquote>\n<blockquote>\n<p>⑨ViewReslover解析后返回具体View。</p>\n</blockquote>\n<blockquote>\n<p>⑩DispatcherServlet根据View进行渲染视图(即将模型数据填充至视图中)。DispatcherServlet响应用户。</p>\n</blockquote>\n<h3 id=\"%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%A4%BA\">执行流程图示</h3>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\384798b93e7b4848abc2cb7d1e65d46d.png\" width=\"664\"/></p>\n<p></p>\n<h2 id=\"SpringMVC%E6%B3%A8%E8%A7%A3%E8%A7%A3%E6%9E%90\">SpringMVC注解解析</h2>\n<h3 id=\"%40RequestMapping\">@RequestMapping</h3>\n<blockquote>\n<p><strong>作用</strong>：用于建立请求URL和处理请求方法之间的对应关系</p>\n</blockquote>\n<blockquote>\n<p><strong>位置</strong>：①类上，请求URL的第一级访问目录，此处不写的话，就相当于应用的根目录</p>\n<p>            ②方法上，请求URL的第二级访问目录，与类上的使用@RequestMapping标注的以及目录一起组成访问虚拟路径。</p>\n</blockquote>\n<pre><code class=\"language-java\">//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"KongChao\")\npublic class userController {\n\n//用注解给这个方法请求映射某个地址\n    //所以访问这个地址则是http://localhost:8080/KongChao/ZengHui\n    @RequestMapping(\"/ZengHui\")\n    public String save(){\n        System.out.println(\"controller save running\");\n       //就会跳转到KCandZH.jsp这个页面上去\n        //加个/表示从web工程下开始\n        return \"/KCandZH.jsp\";\n    }\n}\n</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\35894565200e482580fa2b6d197e31e1.png\" width=\"437\"/></p>\n<p></p>\n<p><strong>属性：</strong></p>\n<ul><li><strong>value</strong>：用于指定请求的URL，他和path属性作用是一样的，只有一个url可以省略value，有多个用逗号隔开【如： <pre><code class=\"language-java\">@RequestMapping(value=\"user\")\n@RequestMapping(\"user \")</code></pre> </li><li><strong>method</strong>:用于指定请求的方式（不是这种请求无法访问）</li><li><strong>params</strong>：用于指定限制请求参数的条件，他支持简单的表达式，要求请求参数的key和value必须和配置的一模一样，如： <pre><code class=\"language-java\">params={\"accoubtName\"},表示请求参数必须要accountName，直接在？后面写这个参数即可\nparams={\"eys!4\"}，表示请求参数中的money不能是4</code></pre> <pre><code class=\"language-java\"> @RequestMapping(value = \"/ZengHui\",method = RequestMethod.GET,params = {\"KCaZH\"})</code></pre>\n<blockquote>\n<p><strong>则访问路径是ZengHui，请求方式是GET，带有参数KCaZH</strong></p>\n</blockquote> <p><img alt=\"\" height=\"134\" src=\"image\\d25272ca125b43c9a05737d39896a6ea.png\" width=\"861\"/></p> <p> xxx内容可以任意，只要带有指定的参数即可。</p> </li></ul>\n<p>1.mvc命名空间引入</p>\n<pre><code class=\"language-bash\">\n\n命名空间:xmlns:context=\"http://www.springframework.org/schema/context\"\n        xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n\n约束地址:http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd                     \n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd</code></pre>\n<p>2、组件扫描基于Spring容器，所以在进行SpringMVC操作时，需要将Controller存储到Spring容器中，如果使用@Controller注解标注的话，就需要使用</p>\n<pre><code class=\"language-bash\">&lt;context:component-scan base-package=\"con.controller\"/&gt;</code></pre>\n<p>进行组件扫描</p>\n<h2 id=\"SpringMVC%E7%9A%84xml%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90\">SpringMVC的xml配置解析</h2>\n<p>1、视图解析器</p>\n<p>SpringMVC有默认组件配置，默认组件都是DispatcherServlet.propertier配置文件中配置的，该配置文件地址org/springframework/web/servlet/DospatcherServlet.properties,该文件中配置了默认视图解析器，如下：</p>\n<pre><code class=\"language-bash\">org.springframework.web.servlet.ViewResolver=org.springframework .web.servlet.view.I\nnternalResourceViewResolver\n\n</code></pre>\n<pre><code class=\"language-TypeScript\">翻看该解析器源码，可以看到该解析器的默认设置，如下:\nREDIRECT URL PREFIX = \"redirect:\" --重定向前缀\nFORWARD URL PREFIX=\"forward:\" --转发前缀(默认值) \nprefix=\"\"; --视图名称前缀 \nsuffix =\"\"; --视图名称后缀</code></pre>\n<p><img alt=\"\" height=\"187\" src=\"image\\64a7671c63634b0691f90e68cfffe1d0.png\" width=\"330\"/></p>\n<p> 在webapp下新建一个jsp包，则每次访问视图，需要加上<strong>/jsp/xxx.jsp</strong></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\8763056543764a3db07d5ba7024f1220.png\" width=\"868\"/></p>\n<blockquote>\n<p>前面的是文件夹的名字，后面的是扩展名，每次都需要加上， 这十分的麻烦，所以我们可以在spring-mvc.xml(名字自定义的)配置文件中 ，配置前缀和后缀</p>\n</blockquote>\n<p><img alt=\"\" height=\"246\" src=\"image\\0bd33e5db62f4923999a82c18d30ec4b.png\" width=\"1200\"/></p>\n<p></p>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"  &gt;\n\n&lt;!--controller的组件扫描 --&gt;\n    &lt;context:component-scan base-package=\"com.controller\"/&gt;\n\n    &lt;!--配置内部资源视图解析器--&gt;\n    &lt;!--/jsp/xxx.jsp --&gt;\n    &lt;bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;\n\n     &lt;property name=\"prefix\" value=\"/jsp/\"&gt;&lt;/property&gt;\n     &lt;property name=\"suffix\" value=\".jsp\"&gt;&lt;/property&gt;\n    &lt;/bean&gt;\n&lt;/beans&gt;\n\n</code></pre>\n<blockquote>\n<p>配置完成之后，我们只需写jsp的名字即可，它会自动给我们拼接上前后缀</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\c70afd296cad43dea2487db50c46e0b8.png\" width=\"864\"/></p>\n<h2 id=\"SpringMVC%E7%9A%84%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6\"><strong>SpringMVC的相关组件</strong></h2>\n<ul><li>前端控制器:DispatcherServlet(负责调用其他功能组件，需要手动配置)</li><li>处理器映射器:HandlerMapping</li><li>处理器适配器:HandlerAdapter（被前端控制器调用，去执行处理器）</li><li>处理器:Handler（可以理解为Controller，把一些特有行为进行封装的组件）</li><li>视图解析器:ViewResolver.（负责把view解析处理）</li><li>视图:View（视图的一些信息）</li></ul>\n<h2 id=\"SpringMVC%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%92%8C%E9%85%8D%E7%BD%AE\"><strong>SpringMVC的注解和配置</strong></h2>\n<ul><li>请求映射注解:@RequestMapping（作用是进行虚拟地址映射，可以放在类上，也可以放在方法上）</li><li>视图解析器配置:</li><li>REDIRECT URL PREFIX=\"redirect:\" （重定向）</li><li>FORWARD URL PREFIX =\"forward:\"（转法)（默认值，可以不写）</li><li> prefix = \"\";（前缀）</li><li> suffix= \"\";（后缀）</li></ul>\n<h1 id=\"SpringMVC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94\">SpringMVC的数据响应</h1>\n<h2 id=\"SpringMVC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E6%96%B9%E5%BC%8F\">SpringMVC的数据响应方式</h2>\n<h3 id=\"%E2%91%A0%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC\">①页面跳转</h3>\n<ul><li><strong>直接返回字符串</strong>（如在一个方法中，return了一个\"xxx.jsp\"，就会转发到那个jsp页面中，这就是直接返回字符串的形式）</li><li>通过ModelAndView对象返回</li></ul>\n<h3 id=\"%E2%91%A1%E5%9B%9E%E5%86%99%E6%95%B0%E6%8D%AE\">②回写数据</h3>\n<ul><li>直接返回字符串（相当于在javaweb里的resp.getwrite(),print）</li><li>返回对象或集合  </li></ul>\n<p><strong>页面跳转</strong></p>\n<p><strong>1、返回字符串形式</strong></p>\n<p>直接返回字符串：此种方式会将返回的字符串与视图解析器的前后缀拼接后跳转。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\4fad4afd921844599d83c83f2d6ab27a.png\" width=\"1200\"/></p>\n<p> 返回带有前缀的字符串：</p>\n<pre><code class=\"language-bash\">转发：forward:/WEB_INF/views/index.jsp(forward可以省略不写)\n\n重定向：redirect:/index.jsp</code></pre>\n<h2 id=\"2%E3%80%81%E8%BF%94%E5%9B%9EModelAndView%E5%AF%B9%E8%B1%A1\"><strong>2、返回ModelAndView对象</strong></h2>\n<h3 id=\"%E6%96%B9%E5%BC%8F1%EF%BC%9A%E7%9B%B4%E6%8E%A5new%E5%AF%B9%E8%B1%A1\">方式1：直接new对象</h3>\n<pre><code class=\"language-java\">//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"KongChao\")\npublic class userController {\n    @RequestMapping(value = \"/ZengHui2\")\n    public ModelAndView save2(){\n        /*\n        Model 模型 作用是封装数据\n        View  视图 作用是展示数据\n         */\n        ModelAndView modelAndView=new ModelAndView();\n        //设置模型数据(键值对，键为String，值为Oject)\n        modelAndView.addObject(\"username\", 1);\n        //设置视图名字\n        modelAndView.setViewName(\"KCandZH\");//经过前后缀拼接就位/jsp/KCandZH.jsp\n        return modelAndView;\n    }\n}</code></pre>\n<blockquote>\n<p>在jsp包下的KCandZH.jsp中</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;html&gt;\n&lt;head&gt;\n    &lt;base href=\"&lt;%=basepath %&gt;\"/&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;title&gt;Insert title here&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\nkCandZH forever  ${username}\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<blockquote>\n<p>加上一个El表达式，这样浏览器访问localhost:8080/KongChao/ZengHui2，就会显示出kCandZH forever  1</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\37f62428e11c4cb2a4b5a17c12605516.png\" width=\"516\"/></p>\n<h3 id=\"%C2%A0%E6%96%B9%E5%BC%8F2%3A%E5%86%99%E5%9C%A8%E6%96%B9%E6%B3%95%E9%87%8C%E8%AE%A9SpringMVC%E5%88%9B%E5%BB%BA\"><strong> 方式2:写在方法里让SpringMVC创建</strong></h3>\n<blockquote>\n<p>也可以不new对象的方式，在方法中直接写model对象，SpringMVC会自动帮你创建</p>\n</blockquote>\n<pre><code class=\"language-java\">//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"KongChao\")\npublic class userController {\n\n    @RequestMapping(value = \"/ZengHui3\")\n    public ModelAndView save3( ModelAndView modelAndView){\n        //设置模型数据(键值对，键为String，值为Oject)\n        modelAndView.addObject(\"username\", \"babala\");\n        //设置视图名字\n        modelAndView.setViewName(\"KCandZH\");//经过前后缀拼接就位/jsp/KCandZH.jsp\n        return modelAndView;\n    }\n}</code></pre>\n<h3 id=\"%E6%96%B9%E5%BC%8F3%EF%BC%9Amodel%E5%92%8Cview%E5%88%86%E5%BC%80%E5%81%9A\">方式3：model和view分开做</h3>\n<p>model是SpringMVC框架封装好的</p>\n<pre><code class=\"language-java\">//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"/KongChao\")\npublic class userController {\n    @RequestMapping(value = \"/ZengHui4\")\n    public String save4(Model model){//是model\n        //设置模型数据(键值对，键为String，值为Oject)\n      model.addAttribute(\"username\",\"曾慧\");\n\n      return \"KCandZH\";//是view\n\n    }\n}</code></pre>\n<h3 id=\"%E6%96%B9%E5%BC%8F4%EF%BC%9A%E9%80%9A%E8%BF%87HttpServletRequest\">方式4：通过HttpServletRequest</h3>\n<pre><code class=\"language-java\">\n//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"/KongChao\")\npublic class userController {\n    @RequestMapping(value = \"/ZengHui5\")\n    public String save5(HttpServletRequest request){//是model\n        //设置模型数据(键值对，键为String，值为Oject)\n        request.setAttribute(\"username\",\"kckckc\");\n        \n        return \"KCandZH\";\n    }\n}</code></pre>\n<blockquote>\n<p>方式3和方式4的区别，model是SpringMVC封装好的，而HttpServletRequest是原生的javaweb，是由tomcat服务器产生的，这个产生的对象中有数据，有http请求的数据（请求行，请求体....）,model对象则是空的。<strong>方式4不常用</strong></p>\n</blockquote>\n<h2 id=\"%E5%9B%9E%E5%86%99%E6%95%B0%E6%8D%AE\">回写数据</h2>\n<p>1、直接返回字符串</p>\n<p>Web基础截断，客户端访问服务器端，如果想直接回写字符串作为响应题返回的话，只需要使用response.getWrite().print(\"KCandZH\")即可，所以在Controller中想直接回写字符串，可以直接在方法中写入response。</p>\n<blockquote>\n<p><strong>方法1</strong>：通过SpringMVC框架注入的response对象，使用response.getWrite().print(\"hello\")回写数据，此时不需要视图跳转，业务方法返回值为void</p>\n</blockquote>\n<p></p>\n<pre><code class=\"language-java\">//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"/user\")\npublic class userController {\n    @RequestMapping(\"/quick6\")\n    public void save6(HttpServletResponse response) throws IOException {\n        response.getWriter().print(\"hello itcase\");\n\n    }\n}</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\fa2592f3efc54ae9882cb73f45217571.png\" width=\"587\"/></p>\n<blockquote>\n<p> ②将需要回写的字符串直接返回，但需要通过<strong>@ResponseBody</strong>注解告知SpringMVC框架，方法返回的字符串不是跳转某个视图，而是直接在http响应体重返回。（加上则不会进行前后缀拼接）</p>\n</blockquote>\n<pre><code class=\"language-java\">//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"/user\")\n  @ResponseBody//告诉SpringMVC框架不进行视图跳转，而是直接进行数据响应\npublic class userController {\n    @RequestMapping(\"/quick7\")\n    public String  save7(HttpServletResponse response) throws IOException {\n        return \"hello itcase\";\n\n    }\n}</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\786a8ad07b2340d6bc789c772cb26a02.png\" width=\"484\"/></p>\n<h3 idjson%E6%A0%BC%E5%BC%8F%E5%9B%9E%E4%BC%A0%E5%88%B0%E5%AE%A2%E6%88%B7%E7%AB%AF\">                                                                                                                                         将字符串转成json格式回传到客户端</h3>\n<blockquote>\n<p>user类下</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.pojo;\n\npublic class User {\n    private int age;\n    private String username;\n\n    public User() {\n\n    }\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public void setName(String username) {\n        this.username = username;\n    }\n}\n</code></pre>\n<blockquote>\n<p>userController类下</p>\n</blockquote>\n<pre><code class=\"language-java\">//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"/user\")\n    public class userController {\n        @RequestMapping(\"/quick9\")\n        @ResponseBody\n        public String save9() throws JsonProcessingException {\n            User user=new User();\n            user.setAge(30);\n            user.setName(\"lisi\");\n        //使用json的转换工具将对象转换成json格式字符串再返回\n            ObjectMapper objectMapper=new ObjectMapper();\n            String json = objectMapper.writeValueAsString(user);\n            return json;\n        }\n}</code></pre>\n<blockquote>\n<p>      要使用json转换工具，还得导入依赖</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;!-- 导入json相关依赖       --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;\n            &lt;version&gt;2.9.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\n            &lt;version&gt;2.9.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;\n            &lt;version&gt;2.9.0&lt;/version&gt;\n        &lt;/dependency&gt;</code></pre>\n<blockquote>\n<p>  运行结果</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\5936952f89314adc9ab188ded0fa7423.png\" width=\"661\"/></p>\n<h2 id=\"2%E3%80%81%E7%9B%B4%E6%8E%A5%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E6%88%96%E9%9B%86%E5%90%88%C2%A0%20%C2%A0%20%C2%A0%C2%A0\">2、直接返回对象或集合      </h2>\n<h3 id=\"%E4%BD%BF%E7%94%A8SpringMVC%E8%87%AA%E5%8A%A8%E5%B0%86%E5%AF%B9%E8%B1%A1%E6%88%96%E9%9B%86%E5%90%88%E8%BD%AC%E5%8C%96%E4%B8%BAjson%E6%A0%BC%E5%BC%8F\">使用SpringMVC自动将对象或集合转化为json格式</h3>\n<p>通过SpringMVC帮助我们对对象或集合进行json字符串的转换并回写，为处理器适配器配置消息转换参数是，指定使用jackson进行对象或集合的转换，因此需要在spring-mvc.xml中进行这样配置</p>\n<blockquote>\n<p>配置spring-mvc.xml中处理器映射器</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;!--配置处理器映射器 (将指定的对象或集合转为json格式)   --&gt;\n    &lt;bean             class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"&gt;\n        &lt;property name=\"messageConverters\"&gt;\n            &lt;list&gt;\n                &lt;bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\"/&gt;\n            &lt;/list&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;</code></pre>\n<blockquote>\n<p>   在userController类中                                                                                                             </p>\n</blockquote>\n<p></p>\n<pre><code class=\"language-java\">//配置类，使用注解把这个类放到容器中\n@Controller\n\n@RequestMapping(value=\"/user\")\n    public class userController {\n\n    @RequestMapping(\"/quick10\")\n    @ResponseBody\n    //配置完成处理器映射器后，SpringMVC会将USer转化为json格式\n    public User save10() throws JsonProcessingException {\n        User user=new User();\n        user.setAge(32);\n        user.setName(\"lisi2\");\n\n        return user;\n    }\n}</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\3c38553c1c3f4700809c920cf139c7d7.png\" width=\"525\"/></p>\n<h3 id=\"%C2%A0%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E4%BC%98%E5%8C%96%E8%BD%AC%E5%8C%96json\"> 注解方式优化转化json</h3>\n<blockquote>\n<p>在方法上添加@ResponseBody就可以返回json格式的字符串，但是这样配置比较麻烦，配置的代码比较多，因此，我们可以使用mvc的注解驱动代替上述配置。</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;!--mvc的注解驱动--&gt;\n&lt;mvc:annotation-driven/&gt;</code></pre>\n<p> 、</p>\n<blockquote>\n<p>在SpringMVC的各个组件中，处理器映射器、处理器适配器、视图解析器称为SpringMVC的三大组件。使用&lt;mvc:annotation-driven&gt;自动加载RequestMappingHandlerMapping(处理映射器)和RequestMappingHandlerAdapter(处理适配器)，可用在Spring-xml.xml配置文件中使用&lt;mvc:annotation-driven&gt;替代注解处理器和适配器的配置。<br/> 同时使用&lt;mvcannotation-driven&gt;默认底层就会集成jackson进行对象或集合的json格式字符串的转换</p>\n</blockquote>\n<p><strong>因为使用了mvc命名空间，所以得导入mvc</strong></p>\n<pre><code class=\"language-XML\">&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n                      \n                            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd\"&gt;\n</code></pre>\n<p>在spring-mvc.xml配置文件中</p>\n<pre><code class=\"language-XML\">&lt;!--    配置注解驱动--&gt;\n    &lt;mvc:annotation-driven/&gt;</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\b3d27ac5d616496db692cdd088b7ade8.png\" width=\"523\"/></p>\n<p> 这样就完成了注解配置</p>\n<h1 id=\"SpringMVC%E8%8E%B7%E5%BE%97%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE\">SpringMVC获得请求数据</h1>\n<h2 id=\"%E8%8E%B7%E5%BE%97%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0\">获得请求参数</h2>\n<p>客户端请求参数的格式是：name=value&amp;name=value.....</p>\n<p>服务器端要获得请求的参数，有时还需要进行数据的封装，SpringMVC可以接受如下类型的参数：</p>\n<ul><li>基本数据类型</li><li>pojo类型 参数</li><li>数据类型参数</li><li>集合类型参数</li></ul>\n<h3 id=\"%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">基本数据类型</h3>\n<pre><code class=\"language-java\">//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"/user\")\n    public class userController {\n    @RequestMapping(\"/quick11\")\n    @ResponseBody\n    public void save11(String username,int age)  {\n        System.out.println(username);\n        System.out.println(age);\n    }\n}</code></pre>\n<blockquote>\n<p> 这个方法不进行页面跳转和回写数据@ResponseBody和void）</p>\n</blockquote>\n<p>然后在网页访问书写参数</p>\n<p> <img alt=\"\" height=\"50\" src=\"image\\4323a0a93e17460b84b491906c7ce239.png\" width=\"692\"/></p>\n<p> 就可以看到控制台打印出张三 18，这就是基本数据类型</p>\n<h3 id=\"%E8%8E%B7%E5%BE%97POJO%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0\">获得POJO类型参数</h3>\n<p>Controller中的业务方法的pojo参数的属性名与请求参数的name一直，参数值会自动映射匹配</p>\n<p>如：</p>\n<p><img alt=\"\" height=\"50\" src=\"image\\4323a0a93e17460b84b491906c7ce239.png\" width=\"692\"/></p>\n<p><strong> 上图中的username和age属于User之中的，SpringMVC就会自动将这些值加进User去</strong></p>\n<blockquote>\n<p>pojo包下的User类</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.pojo;\n\npublic class User {\n    private int age;\n    private String username;\n\n    public User() {\n\n    }\n    public User(int age, String username) {\n        this.age = age;\n        this.username = username;\n    }\n    public void setAge(int age) {\n        this.age = age;\n    }\n    public int getAge() {\n        return age;\n    }\n    public String getUsername() {\n        return username;\n    }\n    public void setUsername(String username) {\n        this.username = username;\n    }\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"age=\" + age +\n                \", username='\" + username + '\\'' +\n                '}';\n    }\n}\n</code></pre>\n<pre><code class=\"language-java\">//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"/user\")\n    public class userController {\n    @RequestMapping(\"/quick12\")\n    @ResponseBody\n    public void save12(User user)  {\n        System.out.println(user);\n    }\n}</code></pre>\n<p><img alt=\"\" height=\"45\" src=\"image\\20b1e707f1af48048411335362f63b76.png\" width=\"623\"/></p>\n<p> 控制台可以看到</p>\n<p class=\"img-center\"><img alt=\"\" height=\"100\" src=\"image\\0cd7073c5fdf4418b4ea1f252d9b2f7d.png\" width=\"681\"/></p>\n<h3 id=\"%C2%A0%E8%8E%B7%E5%BE%97%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0\"> 获得数组类型参数</h3>\n<p>Controller的业务方法数组名称与请求参数的name一致，参数值救赎自动映射配置。</p>\n<pre><code class=\"language-java\">//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"/user\")\n    public class userController {\n    @RequestMapping(\"/quick13\")\n    @ResponseBody\n    public void save13(String[] strs)  {\n        //数组直接打印是地址，为了更清楚看到，用Arrays，asList（作为集合打印）\n        System.out.println(Arrays.asList(strs));\n    }\n}</code></pre>\n<p> 网址搜素输入</p>\n<p><img alt=\"\" height=\"47\" src=\"image\\222d2425d7e240b28ab122e6a2cc9261.png\" width=\"606\"/></p>\n<p> 控制台显示</p>\n<p class=\"img-center\"><img alt=\"\" height=\"100\" src=\"image\\075c1d0d957c4f44a87607946f5e73b4.png\" width=\"557\"/></p>\n<h3 id=\"%E8%8E%B7%E5%BE%97%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0\">获得集合类型参数</h3>\n<blockquote>\n<p>获得集合参数时，要将集合参数包装到pojo对象才可以</p>\n</blockquote>\n<p>所以我们在pojo包下创建一个vo对象</p>\n<pre><code class=\"language-java\">package com.pojo;\n\nimport java.util.List;\n\npublic class VO {\n    private List&lt;User&gt; userList;\n\n    public VO(List&lt;User&gt; userList) {\n        this.userList = userList;\n    }\n\n    public List&lt;User&gt; getUserList() {\n        return userList;\n    }\n\n    public void setUserList(List&lt;User&gt; userList) {\n        this.userList = userList;\n    }\n\n    @Override\n    public String toString() {\n        return \"VO{\" +\n                \"userList=\" + userList +\n                '}';\n    }\n}\n</code></pre>\n<p> userController类下</p>\n<pre><code class=\"language-java\">//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"/user\")\n    public class userController {\n    @RequestMapping(\"/quick14\")\n    @ResponseBody\n    public void save14(VO vo){\n        System.out.println(vo);\n    }\n}</code></pre>\n<p>form.jsp页面下</p>\n<pre><code class=\"language-bash\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=utf-8\" pageEncoding=\"utf-8\" %&gt;\n&lt;%\n    String path = request.getContextPath();\n    String basepath = request.getScheme() + \"://\" + request.getServerName() + \":\" + request.getServerPort() + path + \"/\";\n%&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;base href=\"&lt;%=basepath %&gt;\"/&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;title&gt;Insert title here&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form action=\"${pageContext.request.contextPath}/user/quick14\" method=\"post\"&gt;\n&lt;%--表明是第一个User对象username age--%&gt;\n&lt;input type=\"text\" name=\"userList[0].name\"&gt;&lt;br/&gt;\n    &lt;input type=\"text\" name=\"userList[0].age\"&gt;&lt;br/&gt;\n    &lt;input type=\"text\" name=\"userList[1].name\"&gt;&lt;br/&gt;\n    &lt;input type=\"text\" name=\"userList[1].age\"&gt;&lt;br/&gt;\n    &lt;input type=\"submit\" value=\"提交\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>运行之后在页面输入数据，控制台输出 </p>\n<p><img alt=\"\" height=\"408\" src=\"image\\886e75a1b458428a85c607fe64120930.png\" width=\"923\"/></p>\n<p>获得集合类型参数</p>\n<h3 id=\"%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E7%9A%84%E5%BC%80%E5%90%AF\">静态资源访问的开启</h3>\n<p>当使用ajax提交时，可以指定contentType为json形式，那么在方法参数位置使用@RequestBody可以是直接接收结合数据而无需使用POJO进行包装。</p>\n<blockquote>\n<p>创建一个js下的</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\8975ce9e900a485ca2eb2630ddb69897.png\" width=\"376\"/></p>\n<p></p>\n<blockquote>\n<p>还有ajax.jsp</p>\n</blockquote>\n<pre><code class=\"language-bash\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=utf-8\" pageEncoding=\"utf-8\" %&gt;\n&lt;%\n    String path = request.getContextPath();\n    String basepath = request.getScheme() + \"://\" + request.getServerName() + \":\" + request.getServerPort() + path + \"/\";\n%&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;base href=\"&lt;%=basepath %&gt;\"/&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;title&gt;Insert title here&lt;/title&gt;\n    &lt;script src=\"${pageContext.request.contextPath}/js/jquery-3.3.1.js\"&gt;\n        &lt;%-- 创建一个js数组--%&gt;\n        var userList=new Array();\n        //给集合添加数据\n        userList.push({username:\"zhangsan\",age:18});\n        userList.push({username:\"lisi\",age:28});\n\n\n        //发送请求\n        $.ajax({\n            type:\"POST\",//请求方式\n            url:\"${pageContext.request.contextPath}/user/quick15\",//请求地址\n            date:JSON.stringify(userList),//提交的参数，转为json格式\n            contentType:\"application/json;charset=utf-8\"\n        });\n\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<blockquote>\n<p>userController类下</p>\n</blockquote>\n<pre><code class=\"language-java\">\n//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"/user\")\n    public class userController {\n    @RequestMapping(\"/quick15\")\n    @ResponseBody\n    public void save15(@ResponseBody List&lt;User&gt; userList) throws Exception {\n        System.out.println(userList);\n    }\n}</code></pre>\n<p>运行服务器后，发现控制台没有打印数据</p>\n<p class=\"img-center\"><img alt=\"\" height=\"100\" src=\"image\\8dfa6dad67ea4971b015b19deae6c9cc.png\" width=\"562\"/></p>\n<p> 一般是页面出现了问题，打开开发者工具中查看</p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\ab467d087f66436888d347ec751a842a.png\" width=\"981\"/></p>\n<p> 发现是这个jQuery文件找不到</p>\n<p>这是静态资源访问权限的问题，解决方式是在spring-mvc中加入</p>\n<pre><code class=\"language-XML\">&lt;!-- 静态资源访问权限--&gt;\n    &lt;mvc:resources mapping=\"/js/**\" location=\"/js/\"/&gt;\n</code></pre>\n<p>重启服务器运行之后就可以访问了，在网络中查看访问包的情况，共有三次请求</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\9e2ba0a37f1d49d6a22fa1b51ba8fd84.png\" width=\"775\"/></p>\n<p> 运行之后控制台会打印数组中的数据。</p>\n<p><strong>也可以在spring-mvc中配置，只需写入一个即可（常用）</strong></p>\n<pre><code class=\"language-XML\">&lt;!-- 静态资源访问权限--&gt;\n   &lt;mvc:default-servlet-handler/&gt;\n\n&lt;/beans&gt;</code></pre>\n<blockquote>\n<p>解释：访问资源时，SpringMVC找对应的匹配地址，如果找不到则交给原始的容器（这原始的容器为tomcat）tomcat可以找有能力访问静态资源</p>\n</blockquote>\n<h2 id=\"%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80%E4%B9%B1%E7%A0%81%E8%BF%87%E6%BB%A4%E5%99%A8\">配置全局乱码过滤器</h2>\n<p>请求数据的乱码问题</p>\n<p>当postt请求时，数据会出现乱码，我们可以设置一个过滤器来进行编码的过滤。</p>\n<p>在web.xml中配置过滤器即可</p>\n<pre><code class=\"language-XML\">\n&lt;!--配置过滤的filter--&gt;\n&lt;filter&gt;\n&lt;!--起个名字    --&gt;\n    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;\n    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;\n&lt;init-param&gt;\n&lt;!-- 将字符集设置utf-8   --&gt;\n    &lt;param-name&gt;encoding&lt;/param-name&gt;\n    &lt;param-value&gt;UTF-8&lt;/param-value&gt;\n&lt;/init-param&gt;\n&lt;/filter&gt;\n    &lt;filter-mapping&gt;\n        &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;\n        &lt;!--所有文件都进行过滤扫描        --&gt;\n        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n    &lt;/filter-mapping&gt;</code></pre>\n<h2 id=\"%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A%E6%B3%A8%E8%A7%A3%40RequestParam\">参数绑定注解@RequestParam</h2>\n<blockquote>\n<p>当请求的参数名称与Controller的业务方法参数名称不一致是，就需要通过@RequestParam注解显式的绑定</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\668fc4c059244b2480c8921950b5e21d.png\" width=\"636\"/></p>\n<p>业务方法中的参数为username，请求的参数为name，两者不一致，所以需要进行绑定，使用<strong>@RequestParam(value=\"name\")进</strong>行</p>\n<h3 id=\"%E6%B3%A8%E8%A7%A3%40RequestParam%E7%9A%84%E5%8F%82%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E\">注解@RequestParam的参数使用说明</h3>\n<p><strong>value</strong>：与请求参数名称</p>\n<p><strong>required</strong>：指在指定的请求参数是否必须包括，默认是true，默认值下提交时如果没有此参数则报错</p>\n<p><strong>defaultValue</strong>：放没有指定参数时，则使用的默认值赋值</p>\n<h2 id=\"%E8%8E%B7%E5%BE%97Restful%E9%A3%8E%E6%A0%BC%E7%9A%84%E5%8F%82%E6%95%B0\">获得Restful风格的参数</h2>\n<p><strong>Restful</strong>是一种软件架构风格、设置风格，而不是标准，只是提供了一组设计原则和约束条件。主要用于客服端和服务器交互的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等</p>\n<p><strong>Restful</strong>风格的请求是使用<strong>“url+请求方式</strong>”表示一次请求的目的地，HTTP协议里面四个表示操作方式的动词如下</p>\n<ul><li>GET：用于获取资源</li><li>POST：用于新建资源</li><li>PUT：用于更新资源</li><li>DELETE：用于删除资源</li></ul>\n<p><strong>例如：</strong></p>\n<ul><li>/user/1   GET:              得到id=1的user</li><li>/user.1   DELETE:        删除id=1的user</li><li>/user/1    PUT:             更新id=1的user</li><li>/user        POST:        新增user</li></ul>\n<p>上述url地址/user/1中的1就是要获得的请求参数，在SpringMVC中可以使用占位符进行参数绑定。地址/user/1可以写成/user/{id},占位符{id}对应的就是1的值。在业务方法中我们可以使用<strong>@PathVariable注解进行占位符的匹配获取工作。</strong></p>\n<p><img alt=\"\" height=\"229\" src=\"image\\fd60eef3c4f148d5a997d8d7cb60104c.png\" width=\"754\"/></p>\n<p></p>\n<pre><code class=\"language-java\">//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"/user\")\n    public class userController {\n    //localhost:8080/quick17/zhangsan\n    @RequestMapping(value = \"/quick17/{username}\",method=RequestMethod.GET) \n    @ResponseBody\n    public void save17(@PathVariable(value = \"username\") String username)  {\n        System.out.println(username);\n    }\n}</code></pre>\n<p><img alt=\"\" height=\"118\" src=\"image\\29e48b351e0a4f60b3f21f41d47bfaa7.png\" width=\"685\"/></p>\n<p> 控制台就会打印出张三</p>\n<h2 id=\"%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8\">自定义类型转换器</h2>\n<p></p>\n<p>SpringMVC默认已经提供了一些常用的类型转换器，例如客户端提交得字符串转化为int型进行参数设置但不是所有的数据类型都提供了转换器，没有提供的就需要自定义转换器，例如：日期类型的数据就需要自定义转换器。</p>\n<h3 id=\"%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E6%8D%A2%E5%99%A8%E7%9A%84%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4%EF%BC%9A\">自定义转换器的开发步骤：</h3>\n<ul><li>①定义转换器类实现Converter接口</li><li>②在配置文件中声明转换器</li><li>③在&lt;annotation-driven&gt;中引用转换器</li></ul>\n<blockquote>\n<p>时间类型的，Spring提供了yyyy/MM/dd的日期输入格式，但是我们习惯使用，如2022-7-21而不会写2022/7/21，我们没按照规定写就会报错，所以我们配置自定义的转换器</p>\n</blockquote>\n<p><strong>①定义转换器类实现Converter接口</strong></p>\n<p>在converter包下。</p>\n<pre><code class=\"language-java\">package com.converter;\n\nimport org.springframework.core.convert.converter.Converter;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n//Converter&lt;s,d&gt;String类型转date类型\npublic class DateConverter implements Converter&lt;String, Date&gt; {\n    public Date convert(String dateStr) {\n        //将日期的字符串转换成日期对象 返回\n        SimpleDateFormat format=new SimpleDateFormat(\"yyyy-MM-dd\");\n        Date date = null;\n        try {\n            date = format.parse(dateStr);\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n        return date;\n    }\n}\n</code></pre>\n<p><strong>②在配置文件中声明转换器</strong></p>\n<p>spring-mvc.xml中</p>\n<pre><code class=\"language-XML\">\n&lt;!--申明转换器 --&gt;\n    &lt;bean id=\"conversionService\" class=\"org.springframework.context.support.ConversionServiceFactoryBean\"&gt;\n        &lt;property name=\"converters\"&gt;\n            &lt;list&gt;\n                &lt;bean class=\"com.converter.DateConverter\"/&gt;\n            &lt;/list&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;</code></pre>\n<p><strong>③在&lt;annotation-driven&gt;中引用转换器</strong></p>\n<p>也在spring-mvc.xml中</p>\n<pre><code class=\"language-XML\">&lt;!--    mvc配置注解驱动--&gt;\n    &lt;mvc:annotation-driven conversion-service=\"conversionService\"/&gt;\n</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\44c20eccb49f43719925b7c1f39dc2fe.png\" width=\"530\"/></p>\n<h2 id=\"%C2%A0%E8%8E%B7%E5%BE%97Servlet%E7%9B%B8%E5%85%B3API\"> 获得Servlet相关API</h2>\n<p>SpringMVC支持使用原始ServletAPI对象作为控制器方法的参数进行注入，常用的对象如下：</p>\n<ul><li>HttpServletyRequest</li><li>HttpServletResponse</li><li>HttpSession</li></ul>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\ee54260b545b4ed5b2b4d44f15890259.png\" width=\"806\"/></p>\n<p>会打印一些地址。</p>\n<h1></h1>\n<h1 id=\"%E8%8E%B7%E5%BE%97%E8%AF%B7%E6%B1%82%E5%A4%B4\">获得请求头</h1>\n<h2 id=\"%40RequestHeader\">@RequestHeader</h2>\n<p>使用@RequestHeader可以获得请求头信息，相当于web阶段学习的requestgetHeader(name)</p>\n<p>@RequestHeader注解的属性如下:</p>\n<ul><li>value:请求头的名称</li><li>required:是否必须携带此请求头，(写true必须携带请求头参数才可以访问)</li></ul>\n<p>下列代码是，把请求头名为User-Agent的请求数据赋值给headerValue，然后</p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\d5582015cc96444192895edc29037c9f.png\" width=\"702\"/></p>\n<p>访问之后， F12打开网络查看。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\c583dcb249134324a0fff95b67ea3bb6.png\" width=\"767\"/></p>\n<h2 id=\"%C2%A0%40CookieValue\"> @CookieValue</h2>\n<p>使用@CookieValue可以获得指定的Cookie的值</p>\n<p>@CookieValue注解的属性如下：</p>\n<ul><li>value：指定cookie的名称</li><li>required：是否必须携带此cookie</li></ul>\n<pre><code class=\"language-java\">//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"/user\")\n    public class userController {\n        @RequestMapping(\"/quick21\")\n        @ResponseBody\n        public void save21(@CookieValue(value = \"JSEEEIONID\")String jsessionId ) throws Exception {\n            System.out.println(jsessionId);\n        }\n}</code></pre>\n<p>这样就可以获得cookie的值，cookie也是键值对的形式</p>\n<h1 id=\"%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%C2%A0\">文件上传 </h1>\n<p>文件上传客服端三要素</p>\n<ul><li>表单项type=\"file\"</li><li>表单的提交方式是post</li><li>表单的enctyoe属性是多部分表单形式，以及enctype=\"multipart/form-data\"</li></ul>\n<p><img alt=\"\" height=\"169\" src=\"image\\573be0d633d04cc5adf62174f1c048f9.png\" width=\"635\"/></p>\n<h2 id=\"%E5%8D%95%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%AD%A5%E9%AA%A4\">单文件上传步骤</h2>\n<p></p>\n<p></p>\n<p></p>\n<blockquote>\n<p>①导入fileupload和io坐标</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\6ab17992a19843a38fc775fde2b5013f.png\" width=\"724\"/></p>\n<pre><code class=\"language-XML\">\n    &lt;dependency&gt;\n        &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;\n        &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;\n        &lt;version&gt;1.2.2&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;commons-io&lt;/groupId&gt;\n        &lt;artifactId&gt;commons-io&lt;/artifactId&gt;\n        &lt;version&gt;2.4&lt;/version&gt;\n    &lt;/dependency&gt;</code></pre>\n<blockquote>\n<p>②配置文件上传解析器</p>\n</blockquote>\n<p>在spring-mvc.xml中</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\da99ff918f9f42d1bbb76a568eda1b74.png\" width=\"839\"/></p>\n<pre><code class=\"language-XML\"> &lt;bean id=\"MultipartResolver\" class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\"&gt;\n&lt;!--         上传文件的大小5M--&gt;\n        &lt;property name=\"maxUploadSize\" value=\"5242800\"/&gt;\n&lt;!--        上传单个文件的大小--&gt;\n        &lt;property name=\"maxUploadSizePerFile\" value=\"5242800\"/&gt;\n&lt;!--        上传文件的编码类型--&gt;\n        &lt;property name=\"defaultEncoding\" value=\"UTF-8\"/&gt;\n    &lt;/bean&gt;</code></pre>\n<blockquote>\n<p>③编写文件上传代码</p>\n</blockquote>\n<p><strong> upload.jsp中代码</strong></p>\n<pre><code class=\"language-html\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=utf-8\" pageEncoding=\"utf-8\" %&gt;\n&lt;%\n    String path = request.getContextPath();\n    String basepath = request.getScheme() + \"://\" + request.getServerName() + \":\" + request.getServerPort() + path + \"/\";\n%&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;base href=\"&lt;%=basepath %&gt;\"/&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;title&gt;Insert title here&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form action=\"${pageContext.request.contextPath}/user/quick22\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n    名称&lt;input type=\"text\" name=\"username\"&gt;&lt;br/&gt;\n    文件&lt;input type=\"file\" name=\"uploadFile\"&gt;&lt;br/&gt;\n    &lt;input type=\"submit\" value=\"提交\"&gt;\n     \n    \n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>方法中参数要和jsp中的name值对应</p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\a9627c9b212c425eb61354dffa287f5d.png\" width=\"552\"/></p>\n<pre><code class=\"language-java\">//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"/user\")\n    public class userController {\n    @RequestMapping(\"/quick22\")\n    @ResponseBody\n    public void save22(String usernam, MultipartFile uploadFile) throws Exception{\n        System.out.println(usernam);\n    //获得上传文件的名称\n        String originalFilename = uploadFile.getOriginalFilename();\n        uploadFile.transferTo(new File(\"C:\\\\upload\\\\\"+originalFilename));\n    }\n}</code></pre>\n<p> 运行访问后</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\b023b5d7d3c4425f9fcb9cda09179119.png\" width=\"404\"/></p>\n<h2 id=\"%C2%A0%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%AE%9E%E7%8E%B0\"> 多文件上传实现</h2>\n<p>多文件上传只需要多加参数即可</p>\n<h3 id=\"%E6%B3%95%E4%B8%80%EF%BC%9A%E5%86%99%E4%B8%8B%E5%A4%9A%E4%B8%AA%E5%8F%82%E6%95%B0\">法一：写下多个参数</h3>\n<pre><code class=\"language-html\">&lt;form action=\"${pageContext.request.contextPath}/user/quick22\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n    名称&lt;input type=\"text\" name=\"username\"&gt;&lt;br/&gt;\n    文件1&lt;input type=\"file\" name=\"uploadFile\"&gt;&lt;br/&gt;\n    文件2&lt;input type=\"file\" name=\"uploadFile2\"&gt;&lt;br/&gt;\n    &lt;input type=\"submit\" value=\"提交\"&gt;\n     \n    \n&lt;/form&gt;</code></pre>\n<pre><code class=\"language-java\">//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"/user\")\n    public class userController {\n    @RequestMapping(\"/quick22\")\n    @ResponseBody\n    public void save22(String usernam, MultipartFile uploadFile,MultipartFile uploadFile2) throws Exception{\n        System.out.println(usernam);\n    //获得上传文件的名称\n        String originalFilename = uploadFile.getOriginalFilename();\n        uploadFile.transferTo(new File(\"C:\\\\upload\\\\\"+originalFilename));\n   String originalFilename2 = uploadFile2.getOriginalFilename();\n        uploadFile2.transferTo(new File(\"C:\\\\upload\\\\\"+originalFilename2));\n    }\n}</code></pre>\n<p>运行访问后： </p>\n<p><img alt=\"\" height=\"300\" src=\"image\\8a9bc0554b0343f5af60e0b46a85a37b.png\" width=\"305\"/></p>\n<h3 id=\"%C2%A0%E6%B3%95%E4%BA%8C%EF%BC%9A%E6%95%B0%E7%BB%84%E6%8E%A5%E6%94%B6\"> 法二：数组接收</h3>\n<p>jsp中name的值都一致</p>\n<pre><code class=\"language-html\">&lt;form action=\"${pageContext.request.contextPath}/user/quick23\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n    名称&lt;input type=\"text\" name=\"username\"&gt;&lt;br/&gt;\n    文件1&lt;input type=\"file\" name=\"uploadFile\"&gt;&lt;br/&gt;\n    文件2&lt;input type=\"file\" name=\"uploadFile\"&gt;&lt;br/&gt;\n    &lt;input type=\"submit\" value=\"提交\"&gt;\n     \n    \n&lt;/form&gt;</code></pre>\n<p></p>\n<pre><code class=\"language-java\">//配置类，使用注解把这个类放到容器中\n@Controller\n@RequestMapping(value=\"/user\")\n    public class userController {\n    @RequestMapping(\"/quick23\")\n    @ResponseBody\n    public void save23(String username, MultipartFile[] uploadFile) throws Exception{\n            System.out.println(username);\n            //获得上传文件的名称\n            for (MultipartFile multipartFile : uploadFile) {\n                String originalFilename = multipartFile.getOriginalFilename();\n                multipartFile.transferTo(new File(\"C:\\\\upload\\\\\"+originalFilename));\n\n            }\n   }\n}</code></pre>\n<p>运行结果也是一致的</p>\n<h1 id=\"JdbcTemplate%E6%A6%82%E8%BF%B0\">JdbcTemplate概述</h1>\n<p>他是spring框架中提供的一个对象，是对原始繁琐的jdbc API对象的简单封装。spring框架为我们提供了很多的操作模板类。例如：操作关系型数据的JdbcTemplate和HivernateTenplate，操作nosql数据库的RedisTemplate，操作消息队列的JmsTemplate等</p>\n<h2 id=\"JdbcTemplate%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4\">JdbcTemplate开发步骤</h2>\n<ul><li>①导入spring-jdbc和spring-tx坐标  </li><li>②创建数据库表和实体</li><li>③创建JdbcTemplate对象</li><li>④执行数据库操作</li></ul>\n<p>数据库中account表</p>\n<blockquote>\n<p> pom.xml中</p>\n</blockquote>\n<pre><code class=\"language-XML\"> &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;\n            &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;\n            &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<blockquote>\n<p>测试java中实体类中</p>\n</blockquote>\n<pre><code class=\"language-java\">package test;\n\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\nimport org.junit.Test;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\nimport java.beans.PropertyVetoException;\n\npublic class JdbcTemplateTest {\n\n    @Test\n    //测试JdbcTemplate开发步骤\n    public void test1() throws PropertyVetoException {\n//创建数据源对象\n        ComboPooledDataSource dataSource=new ComboPooledDataSource();\n        dataSource.setDriverClass(\"com.mysql.jdbc.Driver\");\n        //位置为本地，3306端口，test数据库\n        dataSource.setJdbcUrl(\"jdbc:mysql://localhost:3306/test\");\n        //用户名\n        dataSource.setUser(\"root\");\n        //用户密码\n        dataSource.setPassword(\"123456\");\n        JdbcTemplate jdbcTemplate=new JdbcTemplate();\n        //设置数据源对象，知道数据库在哪里\n        jdbcTemplate.setDataSource(dataSource);\n        //执行操作\n        int row = jdbcTemplate.update(\"insert into account value(?,?)\", \"tom\", 5000);\n        System.out.println(row);\n    }\n\n\n}\n</code></pre>\n<blockquote>\n<p>domain包下的account类下</p>\n</blockquote>\n<pre><code class=\"language-java\">package domain;\n\npublic class Account {\n    private String name;\n    private double money;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public double getMoney() {\n        return money;\n    }\n\n    public void setMoney(double money) {\n        this.money = money;\n    }\n\n    @Override\n    public String toString() {\n        return \"Account{\" +\n                \"name='\" + name + '\\'' +\n                \", money=\" + money +\n                '}';\n    }\n}\n</code></pre>\n<p>运行结果： </p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\d10257d2a7cc4276a30af185b022e9c6.png\" width=\"740\"/></p>\n<p> 数据库中的test数据库，account表</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\71ef364add0146d79742dc2cd6215d7c.png\" width=\"652\"/></p>\n<h2 id=\"%C2%A0Spring%E4%BA%A7%E7%94%9FJdbcTemplate%E5%AF%B9%E8%B1%A1\"> Spring产生JdbcTemplate对象</h2>\n<h3 id=\"%E6%B5%8B%E8%AF%95%E6%8F%92%E5%85%A5\">测试插入</h3>\n<p>仔细看，这些都是参数注入（用了setXxx。。），我们可以将JdbcTemplate的创建权交给Spring，将数据源DataSource的创建权也交给Spring，在Spring容器内部将数据源DateSource注入到JdbcTemplate模版对象中，配置如下：</p>\n<p>在test测试包下创建一系列</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\bc3c5896b39f426a83b562ba69e0a213.png\" width=\"532\"/></p>\n<blockquote>\n<p> 在applicationContext1.xml下</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;\n\n\n&lt;!--数据源对象--&gt;\n    &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt;\n        &lt;property name=\"driverClass\" value=\"com.mysql.jdbc.Driver\"/&gt;\n        &lt;property name=\"jdbcUrl\" value=\"jdbc:mysql://localhost:3306/test\"/&gt;\n        &lt;property name=\"user\" value=\"root\"/&gt;\n        &lt;property name=\"password\" value=\"123456\"/&gt;\n    &lt;/bean&gt;\n&lt;!--    jdbc模版对象--&gt;\n    &lt;bean id=\"jdbcTemplate\" class=\"org.springframework.jdbc.core.JdbcTemplate\"&gt;\n        &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt;\n    &lt;/bean&gt;\n&lt;/beans&gt;</code></pre>\n<blockquote>\n<p>pom.xml中</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;org.example&lt;/groupId&gt;\n    &lt;artifactId&gt;javaMaven02&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;dependencies&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;5.1.32&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;c3p0&lt;/groupId&gt;\n            &lt;artifactId&gt;c3p0&lt;/artifactId&gt;\n            &lt;version&gt;0.9.1.2&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;druid&lt;/artifactId&gt;\n            &lt;version&gt;1.1.10&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;/groupId&gt;\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\n            &lt;version&gt;4.11&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;\n            &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n \n\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n            &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n            &lt;scope&gt;compile&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;\n            &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n            &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n&lt;!-- 导入json相关依赖       --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;\n            &lt;version&gt;2.9.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\n            &lt;version&gt;2.9.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;\n            &lt;version&gt;2.9.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        \n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;\n            &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;\n            &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n\n\n    &lt;/dependencies&gt;\n\n\n&lt;/project&gt;</code></pre>\n<p></p>\n<blockquote>\n<p>JdbcTemplateTest类下</p>\n</blockquote>\n<pre><code class=\"language-java\">\npublic class JdbcTemplateTest {\n    @Test\n  //测试Spring产生jdbcTemplate对象\n    public void test2() throws PropertyVetoException {\n        ApplicationContext app=new ClassPathXmlApplicationContext(\"applicationContext1.xml\");\n        JdbcTemplate jdbcTemplate=app.getBean(JdbcTemplate.class);\n        int row = jdbcTemplate.update(\"insert into account value(?,?)\", \"KC\", 50000);\n        System.out.println(row);\n\n    }\n}</code></pre>\n<blockquote>\n<p>运行结果：</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\c835239a5eee4d7586934e82edae06da.png\" width=\"968\"/></p>\n<blockquote>\n<p> 数据库中的变化</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\edc0ab9d85804793be9772ead004e70c.png\" width=\"425\"/></p>\n<h2 id=\"%C2%A0%E8%BF%90%E8%A1%8C%E6%97%B6%EF%BC%8C%E5%87%BA%E7%8E%B0java.lang.NoClassDefFoundError%3A%20org%2Fspringframework%2Fcore%2Fmetrics%2FApplicationStartup%C2%A0\"> 运行时，出现java.lang.NoClassDefFoundError: org/springframework/core/metrics/ApplicationStartup </h2>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\7b237dd239264ed3b6d6b8b5784d7ccd.png\" width=\"706\"/></p>\n<p></p>\n<blockquote>\n<p>原因是：版本号不一致，改为一致即可正常运行</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\e90d8bcd9fee4498ba59c7ba1594bb9b.png\" width=\"286\"/></p>\n<h2 id=\"jdbc%E5%86%85%E5%AE%B9%E5%92%8C%E9%85%8D%E7%BD%AE%E8%A7%A3%E8%80%A6%E5%90%88\">jdbc内容和配置解耦合</h2>\n<p>抽取配置文件中的jdbc代码，使用单独的一个配置文件将次分开</p>\n<p><img alt=\"\" height=\"122\" src=\"image\\c6016a42956244759a3b8a9142ff2055.png\" width=\"527\"/></p>\n<blockquote>\n<p> jdbc.properties下</p>\n</blockquote>\n<pre><code class=\"language-bash\">jdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/test\njdbc.username=root\njdbc.password=123456</code></pre>\n<p>applicationContext1.xml下</p>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"\n       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\n\"&gt;\n\n\n&lt;!--    解耦合，抽取到配置文件中去--&gt;\n&lt;!-- 加载外部的properties，需要使用context命名空间   --&gt;\n&lt;context:property-placeholder location=\"classpath:jdbc.properties\"/&gt;\n&lt;!--数据源对象--&gt;\n    &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt;\n        &lt;property name=\"driverClass\" value=\"${jdbc.driver}\"/&gt;\n        &lt;property name=\"jdbcUrl\" value=\"${jdbc.url}\"/&gt;\n        &lt;property name=\"user\" value=\"${jdbc.username}\"/&gt;\n        &lt;property name=\"password\" value=\"${jdbc.password}\"/&gt;\n    &lt;/bean&gt;\n&lt;!--    jdbc模版对象--&gt;\n    &lt;bean id=\"jdbcTemplate\" class=\"org.springframework.jdbc.core.JdbcTemplate\"&gt;\n        &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt;\n    &lt;/bean&gt;\n&lt;/beans&gt;</code></pre>\n<blockquote>\n<p> 修改一下数据</p>\n</blockquote>\n<pre><code class=\"language-java\">public class JdbcTemplateTest {\n    @Test\n  //测试Spring产生jdbcTemplate对象\n    public void test2() throws PropertyVetoException {\n        ApplicationContext app=new ClassPathXmlApplicationContext(\"applicationContext1.xml\");\n        JdbcTemplate jdbcTemplate=app.getBean(JdbcTemplate.class);\n        int row = jdbcTemplate.update(\"insert into account value(?,?)\", \"ZH\",66666);\n        System.out.println(row);\n\n    }\n}</code></pre>\n<p>返回测试，运行结果</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\99096ec195ff4657b8ce42d2cf25a2ce.png\" width=\"771\"/></p>\n<blockquote>\n<p> 数据库中变化：</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\cfe7bf02e9e6495da2549d78accf9cff.png\" width=\"805\"/></p>\n<h2 id=\"%E4%BD%BF%E7%94%A8Spring%E9%9B%86%E6%88%90Junit%E5%AE%8C%E6%88%90JdbcTemplate%E4%BF%AE%E6%94%B9%E5%92%8C%E5%88%A0%E9%99%A4\">使用Spring集成Junit完成JdbcTemplate修改和删除</h2>\n<p>在pom.xml需要导入两个包，spring-test包和Juit包</p>\n<p>pom.xml</p>\n<pre><code class=\"language-XML\">      &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;/groupId&gt;\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\n            &lt;version&gt;4.12&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;\n            &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;</code></pre>\n<p>新建一个类</p>\n<pre><code class=\"language-java\">package test;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n//指定使用spring做为驱动内核进行测试\n\n\n@RunWith(SpringJUnit4ClassRunner.class)\n//配置文件的位置\n@ContextConfiguration(\"classpath:applicationContext1.xml\")\n\n public class JdbcTemplateCRUDTest {\n\n    //被测试的用 @Autowired注入(测试谁就注入谁)\n    @Autowired\n private JdbcTemplate jdbcTemplate;\n\n    @Test\n    public void testUpdate(){\n        int row = jdbcTemplate.update(\"update account set money=? where name=?\", 222, \"tom\");\n        System.out.println(row);\n    }\n  }\n</code></pre>\n<h2 id=\"%C2%A0Junit4.11%E7%89%88%E6%9C%AC%E5%AF%BC%E8%87%B4%E9%94%99%E8%AF%AF\"> Junit4.11版本导致错误</h2>\n<p>一开始我使用了junit4.11的版本</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\3831157dd48e4d9385b0f42405d58e43.png\" width=\"778\"/></p>\n<pre><code class=\"language-bash\">C:\\java64\\jdk1.8.0_131\\bin\\java.exe -ea -Didea.test.cyclic.buffer.size=1048576 \"-javaagent:D:\\Program Files\\JetBrains\\IntelliJ IDEA 2019.3.3\\lib\\idea_rt.jar=4613:D:\\Program Files\\JetBrains\\IntelliJ IDEA 2019.3.3\\bin\" -Dfile.encoding=UTF-8 -classpath \"D:\\Program Files\\JetBrains\\IntelliJ IDEA 2019.3.3\\lib\\idea_rt.jar;D:\\Program Files\\JetBrains\\IntelliJ IDEA 2019.3.3\\plugins\\junit\\lib\\junit5-rt.jar;D:\\Program Files\\JetBrains\\IntelliJ IDEA 2019.3.3\\plugins\\junit\\lib\\junit-rt.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\charsets.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\deploy.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\ext\\access-bridge-64.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\ext\\cldrdata.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\ext\\dnsns.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\ext\\jaccess.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\ext\\jfxrt.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\ext\\localedata.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\ext\\nashorn.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\ext\\sunec.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\ext\\sunjce_provider.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\ext\\sunmscapi.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\ext\\sunpkcs11.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\ext\\zipfs.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\javaws.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\jce.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\jfr.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\jfxswt.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\jsse.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\management-agent.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\plugin.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\resources.jar;C:\\java64\\jdk1.8.0_131\\jre\\lib\\rt.jar;D:\\小项目\\webTest\\target\\test-classes;D:\\小项目\\webTest\\target\\classes;E:\\Maven_project\\lib\\javax.transaction.jar;E:\\Maven_project\\lib\\javax.annotation.jar;E:\\Maven_project\\lib\\javax.jms.jar;E:\\Maven_project\\lib\\javax.resource.jar;E:\\Maven_project\\lib\\javax.ejb.jar;E:\\Maven_project\\lib\\javax.persistence.jar;E:\\Maven_project\\lib\\javax.servlet.jar;E:\\Maven_project\\lib\\javax.servlet.jsp.jstl.jar;E:\\Maven_project\\lib\\javax.servlet.jsp.jar;C:\\Users\\执久\\.m2\\repository\\mysql\\mysql-connector-java\\5.1.32\\mysql-connector-java-5.1.32.jar;C:\\Users\\执久\\.m2\\repository\\c3p0\\c3p0\\0.9.1.2\\c3p0-0.9.1.2.jar;C:\\Users\\执久\\.m2\\repository\\com\\alibaba\\druid\\1.1.10\\druid-1.1.10.jar;C:\\Users\\执久\\.m2\\repository\\junit\\junit\\4.11\\junit-4.11.jar;C:\\Users\\执久\\.m2\\repository\\org\\hamcrest\\hamcrest-core\\1.3\\hamcrest-core-1.3.jar;C:\\Users\\执久\\.m2\\repository\\org\\springframework\\spring-test\\5.0.5.RELEASE\\spring-test-5.0.5.RELEASE.jar;C:\\Users\\执久\\.m2\\repository\\org\\springframework\\spring-core\\5.0.5.RELEASE\\spring-core-5.0.5.RELEASE.jar;C:\\Users\\执久\\.m2\\repository\\org\\springframework\\spring-jcl\\5.0.5.RELEASE\\spring-jcl-5.0.5.RELEASE.jar;C:\\Users\\执久\\.m2\\repository\\org\\springframework\\spring-context\\5.0.5.RELEASE\\spring-context-5.0.5.RELEASE.jar;C:\\Users\\执久\\.m2\\repository\\org\\springframework\\spring-aop\\5.0.5.RELEASE\\spring-aop-5.0.5.RELEASE.jar;C:\\Users\\执久\\.m2\\repository\\org\\springframework\\spring-beans\\5.0.5.RELEASE\\spring-beans-5.0.5.RELEASE.jar;C:\\Users\\执久\\.m2\\repository\\org\\springframework\\spring-expression\\5.0.5.RELEASE\\spring-expression-5.0.5.RELEASE.jar;C:\\Users\\执久\\.m2\\repository\\org\\springframework\\spring-web\\5.0.5.RELEASE\\spring-web-5.0.5.RELEASE.jar;C:\\Users\\执久\\.m2\\repository\\org\\springframework\\spring-webmvc\\5.0.5.RELEASE\\spring-webmvc-5.0.5.RELEASE.jar;C:\\Users\\执久\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-core\\2.9.0\\jackson-core-2.9.0.jar;C:\\Users\\执久\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-databind\\2.9.0\\jackson-databind-2.9.0.jar;C:\\Users\\执久\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-annotations\\2.9.0\\jackson-annotations-2.9.0.jar;C:\\Users\\执久\\.m2\\repository\\org\\springframework\\spring-jdbc\\5.0.5.RELEASE\\spring-jdbc-5.0.5.RELEASE.jar;C:\\Users\\执久\\.m2\\repository\\org\\springframework\\spring-tx\\5.0.5.RELEASE\\spring-tx-5.0.5.RELEASE.jar\" com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit4 test.JdbcTemplateCRUDTest,testUpdate\n\njava.lang.ExceptionInInitializerError\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:29)\n\tat org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:21)\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\n\tat org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\n\tat org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:26)\n\tat org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:31)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:49)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)\nCaused by: java.lang.IllegalStateException: SpringJUnit4ClassRunner requires JUnit 4.12 or higher.\n\tat org.springframework.util.Assert.state(Assert.java:73)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.&lt;clinit&gt;(SpringJUnit4ClassRunner.java:104)\n\t... 15 more\n\n\n进程已结束，退出代码 -1\n</code></pre>\n<p></p>\n<p><strong> 将其改为Junit4.12就可以正确执行了</strong></p>\n<p></p>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\867e77b68b75412bb42c7a53bec2a047.png\" width=\"610\"/></p>\n<blockquote>\n<p> 数据库中</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\e83fe44e1090456e932d84f6a55c41e6.png\" width=\"417\"/></p>\n<h2 id=\"%E5%88%A0%E9%99%A4%E7%9A%84%E6%93%8D%E4%BD%9C\">删除的操作</h2>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\bea4ff72899c4fc8816b331f062a97d6.png\" width=\"481\"/></p>\n<p></p>\n<pre><code class=\"language-java\">    @Test\n    public  void testDelete(){\n        int row1 = jdbcTemplate.update(\"delete from account where name=?\", \"tom\");\n        System.out.println(row1);\n\n    }</code></pre>\n<p>运行结果 </p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\5d3f1ecd0d234476a6a7e426fb228789.png\" width=\"517\"/></p>\n<p> 数据库中</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\b654d7217ed84ff1bb6d5c9d8a73fc8b.png\" width=\"425\"/></p>\n<h2 id=\"%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C\">查询操作</h2>\n<h3 id=\"%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89\">查询所有</h3>\n<p>查询操作需要放入字节码对象.class</p>\n<pre><code class=\"language-java\">    @Test\n    public void testQueryAll(){\n//后面括号中需要放入字节码对象\n        List&lt;Account&gt; accountList = jdbcTemplate.query(\"select * from account\", new BeanPropertyRowMapper&lt;Account&gt;(Account.class));\n        System.out.println(accountList);\n    }</code></pre>\n<p>数据库中</p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\ce08416066514fed8fd8273236cb13bd.png\" width=\"444\"/></p>\n<p></p>\n<p></p>\n<p> 运行结果</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\c4e703bee21843d280c4bcc0af979872.png\" width=\"886\"/></p>\n<h3 id=\"%C2%A0%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA\"> 查询单个</h3>\n<pre><code class=\"language-java\">  @Test\n    public void testQueryOne(){\n        Account account = jdbcTemplate.queryForObject(\"select *from account where name=?\", new BeanPropertyRowMapper&lt;Account&gt;(Account.class), \"ZH\");\n        System.out.println(account);\n    }</code></pre>\n<p> 运行结果</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\3cdaddd794c14ee49ee58dae0c000e2f.png\" width=\"692\"/></p>\n<h3 id=\"%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2\">聚合查询</h3>\n<pre><code class=\"language-java\"> @Test\n    public void testQueryCount(){\n//查询数据条数\n        Long count = jdbcTemplate.queryForObject(\"select count(*) from account\", Long.class);\n        System.out.println(count);\n    }</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\cce6cc21f4b4414fba6d26d786034096.png\" width=\"823\"/></p>\n<p> 是一个实体就new一个对象，但是一个简单的数据，则创建一个普通的数据</p>\n<h2 id=\"%C2%A0%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93\"> 知识要点总结</h2>\n<pre><code class=\"language-java\">1导入spring-jdbc和spring-tx坐标\n\n2创建数据库表和实体\n\n3创建JdbcTemplate对象\n    JdbcTemplate jdbcTemplate=new JdbcTemplate(); \n    jdbcTemplate.setDatasource(datasource);\n\n4执行数据库操作\n 更新操作:\n    jdbcTemplate.update(sql,params)\n\n查询操作:\n    jdbcTemplate.query(sql,Mapper,params)\n    jdbcTemplate.queryForobject(sql,Mapper,params)</code></pre>\n<h1 id=\"%C2%A0Spring%E7%9A%84AOP%E7%AE%80%E4%BB%8B\"> Spring的AOP简介</h1>\n<h2 id=\"%E4%BB%80%E4%B9%88%E6%98%AFAOP\">什么是AOP</h2>\n<blockquote>\n<p><strong>AOP</strong>为Aspect Oriented Programming的缩写，意思为<strong>面向切面编程</strong>，是通过预编译方式和运行期动态代理实现程序功能的同一维护的一种技术。</p>\n</blockquote>\n<blockquote>\n<p>AOP是OOP（面向对象编程）的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型，利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的课重用性，同时提高了开发的效率。</p>\n</blockquote>\n<h2 id=\"AOP%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8A%BF\">AOP的作用及其优势</h2>\n<p>作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强</p>\n<p>优势：减少重复代码，提高开发效率，并且便于维护</p>\n<p>举例示意图：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\c481ec0756ee46f8a150f4ec4cf402d7.png\" width=\"723\"/></p>\n<h2 id=\"%C2%A0AOP%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0\"> AOP的底层实现</h2>\n<p>实际上，<strong>AOP的底层是通过Spring提供的动态代理技术实现的</strong>，在运行期间，Spring通过动态地阿里技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能增强。 </p>\n<h2 id=\"%C2%A0AOP%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF\"> AOP的动态代理技术</h2>\n<p>常用的动态代理技术</p>\n<p>JDK代理：基于接口的动态代理技术（有接口时用）</p>\n<p>cglib代理：基于父类的动态代理技术（没接口时用）</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\5dc7d74bc0f24dd3a68a8c6f87fb074d.png\" width=\"983\"/></p>\n<h3 id=\"JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86\">JDK动态代理</h3>\n<p>总览图</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\81ac0767b3ee4722a73d633ab60753e3.png\" width=\"410\"/></p>\n<p></p>\n<blockquote>\n<p>proxy下的jdk包，TargetInterface</p>\n</blockquote>\n<pre><code class=\"language-java\">package proxy.jdk;\n\npublic interface TargetInterface {\n    public void save();\n}\n</code></pre>\n<blockquote>\n<p>Target类下</p>\n</blockquote>\n<pre><code class=\"language-java\">package proxy.jdk;\n\npublic class Target implements TargetInterface {\n    @Override\n    public void save() {\n        System.out.println(\"save running。。。\");\n    }\n}\n\n</code></pre>\n<blockquote>\n<p>Advice增强类下</p>\n</blockquote>\n<pre><code class=\"language-java\">package proxy.jdk;\n//增强方法\npublic class Advice {\n\n    public void before(){\n        System.out.println(\"前置增强。。\");\n    }\n\n    public void afterReturning(){\n\n        System.out.println(\"后置增强。。\");\n    }\n}\n</code></pre>\n<blockquote>\n<p> ProxyTest类下</p>\n</blockquote>\n<pre><code class=\"language-java\">package proxy.jdk;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\npublic class ProxyTest {\n    public static void main(String[] args) {\n\n        //创建目标对象\n      final Target target=new Target();\n\n      //获得增强对象\n        final Advice advice=new Advice();\n\n//返回值 就是动态生成的代理对象\n   TargetInterface proxy = (TargetInterface)Proxy.newProxyInstance(\n\n                target.getClass().getClassLoader(),//目标对象类加载器\n                target.getClass().getInterfaces(),  //目标对象相同的接口字节码对象数组\n                new InvocationHandler() {\n                    @Override\n                    //调用代理对象的任何方法，实质执行的都是invoke方法\n                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                      //执行目标方法有前置增强\n                        advice.before();\n                        Object invoke = method.invoke(target, args);//执行目标方法\n//之后有后置增强\n                        advice.afterReturning();\n                        return invoke;\n                    }\n                }\n   );\n   //调用代理对象的方法\n        proxy.save();\n\n    }\n}\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\ef76a2749b414e0ea0afab51e694ee23.png\" width=\"533\"/></p>\n<h3 id=\"%C2%A0cglib%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86\"> cglib的动态代理</h3>\n<p>cglib就是引入第三方jar包</p>\n<blockquote>\n<p>导入jar包</p>\n</blockquote>\n<pre><code class=\"language-XML\">   &lt;dependency&gt;\n\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n    &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n    &lt;scope&gt;compile&lt;/scope&gt;\n  &lt;/dependency&gt;</code></pre>\n<blockquote>\n<p> spring后来版本已经将第三方的cglib给我们集成到spring核心中</p>\n</blockquote>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\f36a2af855ac4edd9553363a617ac9b9.png\" width=\"206\"/></p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\6fc17a02aa4f4fd087d9c73ef3797943.png\" width=\"297\"/></p>\n<blockquote>\n<p> advice和Target和jdk一致，cglib不用接口，在ProxyTest下</p>\n</blockquote>\n<pre><code class=\"language-java\">package proxy.cglib;\n\nimport org.springframework.cglib.proxy.Enhancer;\nimport org.springframework.cglib.proxy.MethodInterceptor;\nimport org.springframework.cglib.proxy.MethodProxy;\nimport proxy.jdk.TargetInterface;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\npublic class ProxyTest {\n    public static void main(String[] args) {\n\n        //创建目标对象\n        final Target target = new Target();\n\n        //获得增强对象\n        final Advice advice = new Advice();\n\n//返回值 就是动态生成的代理对象 基于cglib\n        //1、创建增强器\n        Enhancer enhancer=new Enhancer();\n        //2、设置父类（目标）\n        enhancer.setSuperclass(Target.class);\n        //3、设置回调\n        enhancer.setCallback(new MethodInterceptor() {\n            @Override\n            public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n             advice.before();  //执行前置\n                Object invoke = method.invoke(target, args);//执行目标\n              advice.afterReturning();//执行后置\n                return invoke;\n            }\n        });\n        \n        //创建代理对象\n        Target proxy = (Target)enhancer.create();\n        proxy.save();\n    }\n}\n</code></pre>\n<p>运行结果</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\ed67a7f034584e81a8e17d2891c9456e.png\" width=\"610\"/></p>\n<h2 id=\"AOP%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5\">AOP相关概念</h2>\n<p></p>\n<p>Spring的AOP实现底层就是对上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强。</p>\n<p>常用的术语如下:</p>\n<p></p>\n<ul><li>Target(目标对象):代理的目标对象</li><li>Proxy(代理):一个类被AOP织入增强后，就产生一个结果代理类</li><li>Joinpoint(连接点):所谓连接点是指那些被拦截到的点。在spring中，这些点指的是方法，因为spring只支持方法类型的连接点</li><li>Pointcut(切入点):所谓切入点是指我们要对哪些Joinpoint进行拦截的定义</li><li>Advice(通知/增强):所谓通知是指拦截到Joinpoint之后所要做的事情就是通知 Aspect(切面):是切入点和通知(引介)的结合</li><li>Weaving(织入):是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入，而 Aspect采用编译期织入和类装载期织入</li></ul>\n<h2 id=\"%C2%A0%20AOP%E5%BC%80%E5%8F%91%E6%98%8E%E7%A1%AE%E7%9A%84%E4%BA%8B%E9%A1%B9\">  AOP开发明确的事项</h2>\n<h3 id=\"1%E3%80%81%E9%9C%80%E8%A6%81%E7%BC%96%E5%86%99%E7%9A%84%E5%86%85%E5%AE%B9\">1、需要编写的内容</h3>\n<ul><li>编写核心业务代码（目标类的目标方法）</li><li>编写切面类。切面类中有通知（增强功能方法）</li><li>在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合</li></ul>\n<h3 id=\"2%E3%80%81AOP%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%86%85%E5%AE%B9\">2、AOP技术实现的内容</h3>\n<p>Spring框架监控切入点方法的执行，一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p>\n<h3 id=\"3%E3%80%81AOP%E5%BA%95%E5%B1%82%E4%BD%BF%E7%94%A8%E5%93%AA%E7%A7%8D%E4%BB%A3%E7%90%86%E6%96%B9%E5%BC%8F\">3、AOP底层使用哪种代理方式</h3>\n<p>在spring中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</p>\n<h2 id=\"%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93\">知识要点总结</h2>\n<p>①aop:面向切面编程</p>\n<p>②aop底层实现:基于JDK的动态代理和基于Cglib的动态代理 </p>\n<p>③aop的重点概念:</p>\n<ul><li>    Pointcut(切入点):被增强的方法</li><li>    Advice(通知/增强):封装增强业务逻辑的方法</li><li>    Aspect(切面):切点+通知</li><li>    Weaving(织入):将切点与通知结合的过程</li></ul>\n<p>④开发明确事项:<br/>  <br/> 谁是切点(切点表达式配置)<br/> 谁是通知(切面类中的增强方法)<br/> 将切点和通知进行织入配置</p>\n<h1 id=\"%E5%9F%BA%E4%BA%8Exml%E7%9A%84AOP%E5%BC%80%E5%8F%91\">基于xml的AOP开发</h1>\n<p>①导入AOP相关坐标</p>\n<p>②创建目标接口和目标类（内部有切点）</p>\n<p>③创建切面类（内部有增强方法）</p>\n<p>④将目标类和切面类的对象创建权交给spring</p>\n<p>⑤在applicationContext.xml中配置织入关系</p>\n<p>⑥测试代码</p>\n<blockquote>\n<p> 1、导入坐标</p>\n</blockquote>\n<pre><code class=\"language-XML\">  &lt;dependency&gt;\n      &lt;groupId&gt;org.aspectj&lt;/groupId&gt;\n      &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;\n      &lt;version&gt;1.8.4&lt;/version&gt;\n    &lt;/dependency&gt;\n</code></pre>\n<p>spring-context本身有aop的实现，但是aspectj更好，aspectj本身就是一个小框架。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\9413268bf83a4f45aeed7f4766e1fd1b.png\" width=\"534\"/></p>\n<p></p>\n<blockquote>\n<p>MyAspect切面类（有增强方法）</p>\n</blockquote>\n<pre><code class=\"language-java\">package aop;\n\npublic class MyAspect {\n   public void before(){\n       System.out.println(\"前置增强....\");\n   }\n}\n</code></pre>\n<blockquote>\n<p> applicationContext.xml下</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n               xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\n\"&gt;\n\n\n    &lt;!--    目标对象--&gt;\n    &lt;bean id=\"target\" class=\"aop.Target\"&gt;&lt;/bean&gt;\n\n    &lt;!--    切面对象--&gt;\n    &lt;bean id=\"myAspect\" class=\"aop.MyAspect\"&gt;&lt;/bean&gt;\n\n    &lt;!--配置织入 告诉spring框架，哪些方法（切点）需要进行哪些增强（前置、后置...）引入aop命名空间--&gt;\n   &lt;aop:config&gt;\n&lt;!--  声明切面--&gt;\n       &lt;aop:aspect ref=\"myAspect\"&gt;\n           &lt;!--切面：切点+通知   --&gt;\n           &lt;aop:before method=\"before\" pointcut=\"execution(public void aop.Target.save())\"/&gt;\n       &lt;/aop:aspect&gt;\n   &lt;/aop:config&gt;\n&lt;/beans&gt;</code></pre>\n<blockquote>\n<p>AopTest测试类下</p>\n</blockquote>\n<pre><code class=\"language-java\">package aop;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\"classpath:applicationContext.xml\")\npublic class AopTest {\n\n@Autowired\n    private TargetInterface target;\n\n@Test\n    public void test1(){\n    target.save();\n}\n\n}\n</code></pre>\n<p>运行之后报错了</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\cb8c33b4362145aca686520b94aecf4a.png\" width=\"894\"/></p>\n<p> 仔细一看需要Junit4.12以上的版本，改完之后，</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\8a14c512dee14bfcb2a1a23c461a380b.png\" width=\"715\"/></p>\n<h1 id=\"%C2%A0XML%E9%85%8D%E7%BD%AEAOP%E8%AF%A6%E8%A7%A3\"> XML配置AOP详解</h1>\n<h2 id=\"%E5%88%87%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%86%99%E6%B3%95\">切点表达式的写法</h2>\n<p>表达式语法：</p>\n<pre><code class=\"language-bash\">execution(修饰符] 返回值类型  包名.类名.方法名(参数))</code></pre>\n<ul><li> 访问修饰符可以省略</li><li>返回值类型、包名、类名、方法名可以使用星号*代表任意</li><li>包名与类名之间一个点.代表当前包下的类,两个点..表示当前包及其子包下的类</li><li>参数列表可以使用两个点..表示任意个数，任意类型的参数列表</li></ul>\n<p>例如</p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\bd76c73e648940fe9be34f821311f72f.png\" width=\"918\"/></p>\n<h2 id=\"%E9%80%9A%E7%9F%A5%2F(%E5%A2%9E%E5%BC%BA)%E7%9A%84%E7%B1%BB%E5%9E%8B\">通知/(增强)的类型</h2>\n<p>通知的配置语法：</p>\n<pre><code class=\"language-bash\">&lt;aop:通知类型 method=\"切面类中的方法名\" pointcut=\"切点表达式\"/&gt;</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\599917b50bdb4bbbb8888e6474ffba2f.png\" width=\"878\"/></p>\n<blockquote>\n<h3 id=\"%C2%A0%E5%89%8D%E5%90%8E%E7%BD%AE%E5%A2%9E%E5%BC%BA\"><strong> 前后置增强</strong></h3>\n</blockquote>\n<pre><code class=\"language-XML\"> &lt;!--配置织入 告诉spring框架，哪些方法（切点）需要进行哪些增强（前置、后置...）引入aop命名空间--&gt;\n   &lt;aop:config&gt;\n&lt;!--  声明切面--&gt;\n       &lt;aop:aspect ref=\"myAspect\"&gt;\n           &lt;!--切面：切点+通知   --&gt;\n           &lt;aop:before method=\"before\" pointcut=\"execution(public void aop.Target.save())\"/&gt;\n           &lt;aop:after-returning method=\"afterReturn\" pointcut=\"execution(public void aop.Target.save())\"/&gt;\n       &lt;/aop:aspect&gt;\n   &lt;/aop:config&gt;</code></pre>\n<p>写下前后置增强</p>\n<pre><code class=\"language-java\">\npublic class MyAspect {\n   public void before(){\n       System.out.println(\"前置增强....\");\n   }\n   public void afterReturn(){\n       System.out.println(\"后置增强....\");\n   }\n}\n</code></pre>\n<p>运行之后</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\a3f0b404c99140db92cc0af651fd03d3.png\" width=\"822\"/></p>\n<h3 id=\"%C2%A0%E7%8E%AF%E7%BB%95%E5%A2%9E%E5%BC%BA\"> 环绕增强</h3>\n<p></p>\n<blockquote>\n<p>切面类中的方法 </p>\n</blockquote>\n<pre><code class=\"language-java\">\nimport org.aspectj.lang.ProceedingJoinPoint;\n\npublic class MyAspect    \n//ProceedingJoinPoint:正在执行的连接点===切点\n  public Object around(ProceedingJoinPoint point) throws Throwable {\n      System.out.println(\"环绕前增强...\");\n      Object proceed=point.proceed();//切点方法\n      System.out.println(\"环绕后增强...\");\n      return proceed;\n   }\n}</code></pre>\n<blockquote>\n<p>applicationContext.xml下</p>\n</blockquote>\n<pre><code class=\"language-XML\"> &lt;aop:config&gt;\n&lt;!--  声明切面--&gt;\n       &lt;aop:aspect ref=\"myAspect\"&gt;\n           &lt;!--切面：切点+通知   --&gt;\n\n      &lt;aop:around method=\"around\" pointcut=\"execution(public void aop.Target.save())\"/&gt;\n       &lt;/aop:aspect&gt;\n   &lt;/aop:config&gt;\n&lt;/beans&gt;</code></pre>\n<blockquote>\n<p> 运行结果</p>\n</blockquote>\n<p><img alt=\"\" height=\"280\" src=\"image\\8feb95170ca84e27b8ca333ed322b6d2.png\" width=\"928\"/></p>\n<h3 id=\"%C2%A0%20%E5%BC%82%E5%B8%B8%E6%8A%9B%E5%87%BA%E5%A2%9E%E5%BC%BA\">  异常抛出增强</h3>\n<p>切面类下</p>\n<p></p>\n<pre><code class=\"language-java\">   public void afterThrows(){\n       System.out.println(\"异常抛出增强\");\n   }</code></pre>\n<p> 目标类中需要手动加一个异常</p>\n<pre><code class=\"language-java\">public class Target implements TargetInterface {\n    @Override\n    public void save() {\n        System.out.println(\"save running。。。\");\n        int i=1/0;\n    }\n}\n</code></pre>\n<p> applicationContext.xml中</p>\n<pre><code class=\"language-XML\">   &lt;!--配置织入 告诉spring框架，哪些方法（切点）需要进行哪些增强（前置、后置...）引入aop命名空间--&gt;\n   &lt;aop:config&gt;\n&lt;!--  声明切面--&gt;\n       &lt;aop:aspect ref=\"myAspect\"&gt;\n           &lt;!--切面：切点+通知   --&gt;\n\n      &lt;aop:after-throwing method=\"afterThrows\" pointcut=\"execution(public void aop.Target.save())\"/&gt;\n       &lt;/aop:aspect&gt;\n   &lt;/aop:config&gt;</code></pre>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\afc88ddcc76a4a3c91f29ae6f4ecb5f9.png\" width=\"774\"/></p>\n<h3 id=\"%C2%A0%E6%9C%80%E7%BB%88%E5%A2%9E%E5%BC%BA\"> 最终增强</h3>\n<p>最终增强即为无论抛不抛出异常，这个方法都会被执行 </p>\n<pre><code class=\"language-java\">   public void after(){\n       System.out.println(\"最终增强...\");\n   }</code></pre>\n<p></p>\n<pre><code class=\"language-XML\">   &lt;aop:config&gt;\n&lt;!--  声明切面--&gt;\n       &lt;aop:aspect ref=\"myAspect\"&gt;\n           &lt;!--切面：切点+通知   --&gt;\n\n      &lt;aop:after-throwing method=\"afterThrows\" pointcut=\"execution(public void aop.Target.save())\"/&gt;\n      &lt;aop:after method=\"after\" pointcut=\"execution(public void aop.Target.save())\"/&gt;\n       &lt;/aop:aspect&gt;\n   &lt;/aop:config&gt;</code></pre>\n<p> 运行结果</p>\n<p><img alt=\"\" height=\"373\" src=\"image\\171068b548cf461cbe2e55d63145e5ad.png\" width=\"924\"/></p>\n<h2 id=\"%C2%A0%E5%88%87%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%8A%BD%E5%8F%96\"> 切点表达式的抽取</h2>\n<p>当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用pointcut-ref属性代替pointcut属性来引用抽取后的切点表达式。</p>\n<pre><code class=\"language-XML\">  &lt;aop:pointcut id=\"myPointcut\" expression=\"execution(public void aop.Target.save())\"/&gt;</code></pre>\n<p>applicationContext.xml中</p>\n<pre><code class=\"language-XML\">    &lt;!--配置织入 告诉spring框架，哪些方法（切点）需要进行哪些增强（前置、后置...）引入aop命名空间--&gt;\n   &lt;aop:config&gt;\n&lt;!--   抽取切点表达式    --&gt;\n       &lt;aop:pointcut id=\"myPointcut\" expression=\"execution(public void aop.Target.save())\"/&gt;\n&lt;!--  声明切面--&gt;\n       &lt;aop:aspect ref=\"myAspect\"&gt;\n           &lt;!--切面：切点+通知   --&gt;\n&lt;aop:around method=\"around\" pointcut-ref=\"myPointcut\"/&gt;\n           &lt;aop:after-returning method=\"after\" pointcut-ref=\"myPointcut\"/&gt;\n       &lt;/aop:aspect&gt;\n   &lt;/aop:config&gt;</code></pre>\n<p>运行结果</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\e991e657617b435baabd9a8ca20212a6.png\" width=\"662\"/></p>\n<h2 id=\"%C2%A0%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9\"> 知识要点</h2>\n<p>aop织入</p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\9fedef45cc324d319e0ee7b826ba73be.png\" width=\"879\"/></p>\n<p> 通知的类型：前置通知、后置通知、环绕通知、异常抛出通知、最终通知</p>\n<p>点表达式的写法</p>\n<p class=\"img-center\"><img alt=\"\" height=\"50\" src=\"image\\8b6fa12508ad434d947f5007b5b8d02f.png\" width=\"635\"/></p>\n<h1 id=\"%C2%A0%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84AOP%E5%BC%80%E5%8F%91\"> 基于注解的AOP开发</h1>\n<p>快速入门，基于注解的aop开发步骤</p>\n<p>①创建目标接口和目标类（内部有切点）</p>\n<p>②创建切面类（内部有增强方法）</p>\n<p>③将目标类和切面类的对象创建权交给spring</p>\n<p>④在切面类中使用注解配置织入关系</p>\n<p>⑤在配置文件中开启组件扫描和AOP的自动代理</p>\n<p>⑥测试</p>\n<h2 id=\"%E7%BC%96%E5%86%99%E6%B5%8B%E8%AF%95%C2%A0\">编写测试 </h2>\n<blockquote>\n<p>其中Target类下</p>\n</blockquote>\n<pre><code class=\"language-java\">package anno;\nimport org.springframework.stereotype.Component;\n\n//交给spring容器，起个名为target\n@Component(\"target\")\npublic class Target implements TargetInterface {\n\n    public void save() {\n        System.out.println(\"save running。。。\");\n    }\n}\n\n</code></pre>\n<blockquote>\n<p> Interface类下</p>\n</blockquote>\n<pre><code class=\"language-java\">package anno;\n\n\npublic interface TargetInterface {\n    public void save();\n}\n</code></pre>\n<blockquote>\n<p> MyAspect切面类下</p>\n</blockquote>\n<pre><code class=\"language-java\">package anno;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.springframework.stereotype.Component;\n\n//交给spring容器\n@Component(\"myAspect\")\n@Aspect //标注当前MyAspect是一个切面类\npublic class MyAspect {\n    @Before(\"execution(* anno.*.*(..))\")\n   public void before(){\n       System.out.println(\"前置增强....\");\n   }\n\n}\n</code></pre>\n<blockquote>\n<p> AnnoTest测试类下</p>\n</blockquote>\n<p></p>\n<pre><code class=\"language-java\">package anno;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\"classpath:applicationContext_anno.xml\")\npublic class AnnoTest {\n\n    @Autowired\n    private TargetInterface target;\n\n    @Test\n    public void test1(){\n        target.save();\n    }\n\n}\n</code></pre>\n<blockquote>\n<p>applicationContext_anno.xml配置文件</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n               xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xmlns:aop=\"http://www.springframework.org/schema/aop\"\n             xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\n       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\n\"&gt;\n\n&lt;!--组件扫描--&gt;\n    &lt;context:component-scan base-package=\"anno\"/&gt;\n\n&lt;!--aop自动代理,加上才会识别这些通知的注解--&gt;\n    &lt;aop:aspectj-autoproxy/&gt;\n\n&lt;/beans&gt;</code></pre>\n<blockquote>\n<p>运行结果 </p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\5b4c3518103642859c4a406355387a41.png\" width=\"1045\"/></p>\n<p></p>\n<h2 id=\"%C2%A0%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AEAOP%E8%AF%A6%E8%A7%A3\"> 注解配置AOP详解</h2>\n<h3 id=\"%E6%B3%A8%E8%A7%A3%E9%80%9A%E7%9F%A5%E7%9A%84%E7%B1%BB%E5%9E%8B\">注解通知的类型</h3>\n<blockquote>\n<p><strong>通知的配置语法：@通知注解(\"切点表达式\")</strong></p>\n</blockquote>\n<p><img alt=\"\" height=\"228\" src=\"image\\3a1b9dd51fbb4fabb0444b84b6966302.png\" width=\"718\"/></p>\n<h3> 切点表达式的抽取</h3>\n<blockquote>\n<p>同xml配置aop一样。我们可以将切点表达式抽取，抽取方式是在切面内定义方法，早该方法上使用<strong>@Pointcut注解</strong>定义切点表达式，然后在在增强注解中进行引用。</p>\n</blockquote>\n<blockquote>\n<p> 切面类中</p>\n</blockquote>\n<pre><code class=\"language-java\">package anno;\n\nimport org.aspectj.lang.annotation.AfterReturning;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.stereotype.Component;\n\n//交给spring容器\n@Component(\"myAspect\")\n@Aspect //标注当前MyAspect是一个切面类\npublic class MyAspect {\n    @Before(\"execution(* anno.*.*(..))\")\n   public void before(){\n       System.out.println(\"前置增强....\");\n   }\n   //引入切点表达式方法\n   @AfterReturning(\"pointcut()\")//或者写MyAspect.pointcut()\n    public void afterReturn(){\n        System.out.println(\"后置增强....\");\n    }\n\n   //定义切点表达式方法\n    @Pointcut(\"execution(* anno.*.*(..))\")\n    public void pointcut(){ }\n\n\n}\n</code></pre>\n<blockquote>\n<p>运行结果 </p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\c6f52146d39d4278893e59ee758942c4.png\" width=\"620\"/></p>\n<h1 id=\"%E7%BC%96%E7%A8%8B%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E7%9B%B8%E5%85%B3%E5%AF%B9%E8%B1%A1\">编程式事务控制相关对象</h1>\n<p>编程式：即使用java的api书写代码</p>\n<p>声明式：使用配置去配置</p>\n<h2 id=\"PlatformTransactionManager%E5%B9%B3%E5%8F%B0%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86\">PlatformTransactionManager平台事务管理</h2>\n<p>PlatformTransactionManager接口时spring的事务管理器，它里面提供来我们常用的操作事务的方法</p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\0516fe8ee2e64142a01965f58fd56441.png\" width=\"823\"/></p>\n<p> PlatformTransactionManager是接口类型，不同的Dao层技术则有不同的实现类，例如:Dao层技术是jdbc或mybatis时:orqspringframeworkidbcdatasourceDataSourceTransactionManager<br/> Dao层技术是hibernate时:orq.springframework.orm.hibernate5.HibernateTransactionManager</p>\n<h2 id=\"TransactionDefinition%E4%BA%8B%E5%8A%A1%E5%AE%9A%E4%B9%89\">TransactionDefinition事务定义</h2>\n<p>TransactionDefinition是事务的定义信息对象，里面有如下方法：</p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\dcffbf0210424c2bb21496ece94cd4b3.png\" width=\"649\"/></p>\n<p> 设置隔离级别，可以解决事务并发产生的问题，如</p>\n<pre><code class=\"language-java\">ISOLATION_DEFAULT//默认的\nISOLATION_READ_UNCOMMITTED//读未提交，哪种都不能解决\nISOLATION_READ_COMMITTED//读已提交，解决脏读\nISOLATION_REPEATABLE READ//可重复读，解不可重复读\nISOLATION_SERIALIZABLE//串行化，解决所有，性能最低</code></pre>\n<h3 id=\"%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA\">事务的传播行为</h3>\n<pre><code class=\"language-bash\">REQUIRED:如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择(默认值) \n\nSUPPORTS:支持当前事务，如果当前没有事务，就以非事务方式执行(没有事务)\n\nMANDATORY:使用当前的事务，如果当前没有事务，就抛出异常\n\nRFOUFRS NEW:新增事务，如果当前在事务中，把当前事务挂起\n\nNOT_SUPPORTED:以非事务方式执行操作，如果当前存在事务，就把当前事务挂起 \n\nNEVER:以非事务方式运行，如果当前存在事务，抛出异常\n\nNESTED:如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行REOUIRED类似的操作\n\n超时时间:默认值是-1.没有超时限制，如果有，以秒为单位进行设置\n\n是否只读:建议查询时设置为只读，</code></pre>\n<h2 id=\"TransactionStatus%E4%BA%8B%E5%8A%A1%E7%8A%B6%E6%80%81\">TransactionStatus事务状态</h2>\n<p>TransactionStatus接口时提供事务具体运行状态（是被动产生的，不需要自己去设置），方法介绍如下</p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\0e59b40d6d5346e4b3723d9ed28ab04d.png\" width=\"614\"/></p>\n<h1 id=\"%C2%A0%E5%9F%BA%E4%BA%8EXML%E7%9A%84%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6\"> 基于XML的声明式事务控制</h1>\n<p>spring的声明式事务就是指在配置文件中声明，用在spring配置文件中的声明式的处理事务来代替diam式的处理事务</p>\n<p>  转账业务演示事务</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\915ae2b1cff1477fa7413ff8c9b990d5.png\" width=\"235\"/></p>\n<blockquote>\n<p> controller包下AccountController类</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.controller;\n\nimport com.service.AccountService;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class AccountController {\n\n    public static void main(String[] args) {\n        ApplicationContext app = new ClassPathXmlApplicationContext(\"applicationContext1.xml\");\n        AccountService accountService = app.getBean(AccountService.class);\n        accountService.transfer(\"KC\",\"ZH\",500);\n    }\n\n}\n</code></pre>\n<blockquote>\n<p>service包下AccountService接口</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.service;\n\npublic interface AccountService {\n\n    public void transfer(String outMan, String inMan, double money);\n\n}\n</code></pre>\n<blockquote>\n<p>接口实现类</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.service.impl;\n\nimport com.dao.AccountDao;\nimport com.service.AccountService;\n\npublic class AccountServiceImpl implements AccountService {\n\n    private AccountDao accountDao;\n    public void setAccountDao(AccountDao accountDao) {\n        this.accountDao = accountDao;\n    }\n\n    public void transfer(String outMan, String inMan, double money) {\n        accountDao.out(outMan,money);\n\n        accountDao.in(inMan,money);\n    }\n}\n</code></pre>\n<blockquote>\n<p>pojo包下Account类</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.pojo;\n\npublic class Account {\n\n    private String name;\n    private double money;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public double getMoney() {\n        return money;\n    }\n\n    public void setMoney(double money) {\n        this.money = money;\n    }\n}\n</code></pre>\n<blockquote>\n<p>dao包下AccountDao</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.dao;\n\npublic interface AccountDao {\n\n    public void out(String outMan, double money);\n    public void in(String inMan, double money);\n\n}\n</code></pre>\n<blockquote>\n<p>实现类下</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.dao.impl;\n\nimport com.dao.AccountDao;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\npublic class AccountDaoImpl implements AccountDao {\n\n    private JdbcTemplate jdbcTemplate;\n    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    public void out(String outMan, double money) {\n        jdbcTemplate.update(\"update account set money=money-? where name=?\",money,outMan);\n    }\n\n    public void in(String inMan, double money) {\n        jdbcTemplate.update(\"update account set money=money+? where name=?\",money,inMan);\n    }\n}\n</code></pre>\n<blockquote>\n<p>配置文件applicationCntext1.xml下</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xsi:schemaLocation=\"\n       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\n       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\n\"&gt;\n\n    &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt;\n        &lt;property name=\"driverClass\" value=\"com.mysql.jdbc.Driver\"/&gt;\n        &lt;property name=\"jdbcUrl\" value=\"jdbc:mysql://localhost:3306/test\"/&gt;\n        &lt;property name=\"user\" value=\"root\"/&gt;\n        &lt;property name=\"password\" value=\"123456\"/&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"jdbcTemplate\" class=\"org.springframework.jdbc.core.JdbcTemplate\"&gt;\n        &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"accountDao\" class=\"com.dao.impl.AccountDaoImpl\"&gt;\n        &lt;property name=\"jdbcTemplate\" ref=\"jdbcTemplate\"/&gt;\n    &lt;/bean&gt;\n\n    &lt;!--目标对象  内部的方法就是切点--&gt;\n    &lt;bean id=\"accountService\" class=\"com.service.impl.AccountServiceImpl\"&gt;\n        &lt;property name=\"accountDao\" ref=\"accountDao\"/&gt;\n    &lt;/bean&gt;\n\n    &lt;!--配置平台事务管理器--&gt;\n    &lt;bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt;\n        &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt;\n    &lt;/bean&gt;\n\n    &lt;!--通知  事务的增强--&gt;\n    &lt;tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\"&gt;\n        &lt;!--设置事务的属性信息的--&gt;\n        &lt;tx:attributes&gt;\n            &lt;tx:method name=\"transfer\" isolation=\"REPEATABLE_READ\" propagation=\"REQUIRED\" read-only=\"false\"/&gt;\n            &lt;tx:method name=\"save\" isolation=\"REPEATABLE_READ\" propagation=\"REQUIRED\" read-only=\"false\"/&gt;\n            &lt;tx:method name=\"findAll\" isolation=\"REPEATABLE_READ\" propagation=\"REQUIRED\" read-only=\"true\"/&gt;\n&lt;!--  update*表示只要update...都是这个，*表示通配符         --&gt;\n            &lt;tx:method name=\"update*\" isolation=\"REPEATABLE_READ\" propagation=\"REQUIRED\" read-only=\"true\"/&gt;\n            &lt;tx:method name=\"*\"/&gt;\n        &lt;/tx:attributes&gt;\n    &lt;/tx:advice&gt;\n\n    &lt;!--配置事务的aop织入--&gt;\n    &lt;aop:config&gt;\n        &lt;aop:pointcut id=\"txPointcut\" expression=\"execution(* com.service.impl.*.*(..))\"/&gt;\n&lt;!-- 事务专用advisor，控制事务--&gt;\n        &lt;aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"txPointcut\"/&gt;\n    &lt;/aop:config&gt;\n\n&lt;/beans&gt;</code></pre>\n<blockquote>\n<p>pom.xml下</p>\n</blockquote>\n<pre><code class=\"language-XML\"> &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;junit&lt;/groupId&gt;\n      &lt;artifactId&gt;junit&lt;/artifactId&gt;\n      &lt;version&gt;4.12&lt;/version&gt;\n\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;\n      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.aspectj&lt;/groupId&gt;\n      &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;\n      &lt;version&gt;1.8.4&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n    &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n    &lt;scope&gt;compile&lt;/scope&gt;\n  &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;\n      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;\n      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;\n      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;c3p0&lt;/groupId&gt;\n      &lt;artifactId&gt;c3p0&lt;/artifactId&gt;\n      &lt;version&gt;0.9.1.1&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;mysql&lt;/groupId&gt;\n      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n      &lt;version&gt;5.1.32&lt;/version&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;</code></pre>\n<blockquote>\n<p>数据库中</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\a40f8e3ff75f4be9908c90bbc0b422cd.png\" width=\"440\"/></p>\n<p> 运行结果</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\ec2b7f6a38de4fed869720dbcdfa6060.png\" width=\"1102\"/></p>\n<p></p>\n<p> 数据库中</p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\e39bc33f8e1944ee8daaa49572c87495.png\" width=\"414\"/></p>\n<blockquote>\n<p> 当发生错误时，数据库中的值都不变这就控制住了事务</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\de8eba92659e4632bf95756af2848534.png\" width=\"684\"/></p>\n<h2 id=\"%E5%88%87%E7%82%B9%E6%96%B9%E6%B3%95%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%8F%82%E6%95%B0%E7%9A%84%E9%85%8D%E7%BD%AE\">切点方法的事务参数的配置</h2>\n<p></p>\n<pre><code class=\"language-XML\">  &lt;tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\"&gt;\n        &lt;!--设置事务的属性信息的--&gt;\n        &lt;tx:attributes&gt;\n            &lt;tx:method name=\"transfer\" isolation=\"REPEATABLE_READ\" propagation=\"REQUIRED\"&gt;\n          \n        &lt;/tx:attributes&gt;\n    &lt;/tx:advice&gt;</code></pre>\n<p>其中&lt;tx:method&gt;代表切点方法的事务参数的配置。例如：</p>\n<blockquote>\n<pre>&lt;tx:method name=\"save\" isolation=\"REPEATABLE_READ\" propagation=\"REQUIRED\" read-only=\"false\"/&gt;</pre>\n</blockquote>\n<ul><li>name:切点方法名称</li><li>isolation：事务的隔离级别</li><li>propogation：事务的传播行为</li><li>timeout：超时时间</li><li>read-only：是否只读</li></ul>\n<p>声明式事务控制的配置要点</p>\n<ul><li>平台事务管理器配置</li><li>事通知的配置</li><li>事务aop织入的配置</li></ul>\n<h1 id=\"%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6\">基于注解的声明式事务控制</h1>\n<p>使用注解方式（改动bean，自定义的bean用注解，非自定义的bean配置到配置文件中去），需要改动两个，一个是配置文件applicationContext,另一个是AccountServiceImpl类</p>\n<pre><code class=\"language-java\">package com_1.service.impl;\n\nimport com.dao.AccountDao;\nimport com.service.AccountService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Isolation;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Service(\"accountService\")\n//在类上使用事务，其中的所有方法都会生效\n@Transactional(isolation = Isolation.REPEATABLE_READ)\npublic class AccountServiceImpl implements AccountService {\n\n    @Autowired\n    private AccountDao accountDao;\n\n    @Transactional(isolation = Isolation.READ_COMMITTED,propagation = Propagation.REQUIRED)\n    public void transfer(String outMan, String inMan, double money) {\n        accountDao.out(outMan,money);\n\n        accountDao.in(inMan,money);\n    }\n\n   \n}\n</code></pre>\n<p>applicationContext配置文件</p>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xsi:schemaLocation=\"\n       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\n       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\n       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\n\"&gt;\n\n    &lt;!--组件扫描，才能扫到@Service注解--&gt;\n    &lt;context:component-scan base-package=\"com_1\"/&gt;\n\n    &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt;\n        &lt;property name=\"driverClass\" value=\"com.mysql.jdbc.Driver\"/&gt;\n        &lt;property name=\"jdbcUrl\" value=\"jdbc:mysql://localhost:3306/test\"/&gt;\n        &lt;property name=\"user\" value=\"root\"/&gt;\n        &lt;property name=\"password\" value=\"123456\"/&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"jdbcTemplate\" class=\"org.springframework.jdbc.core.JdbcTemplate\"&gt;\n        &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt;\n        &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt;\n    &lt;/bean&gt;\n\n\n    &lt;!--事务的注解驱动，不写就没开启事务--&gt;\n    &lt;tx:annotation-driven transaction-manager=\"transactionManager\"/&gt;\n\n&lt;/beans&gt;</code></pre>\n<p>运行结果</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\cf54ec7bc914410bb0bf553022c457d9.png\" width=\"1060\"/></p>\n<h2 id=\"%C2%A0%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AE%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E8%A7%A3%E6%9E%90\"> 注解配置声明式事务控制解析</h2>\n<blockquote>\n<p>①使用@Transactional在需要进行事务控制的类或是方法上修饰，注解可用的属性同xml配置方式，例如隔离级别、传播行为等。</p>\n</blockquote>\n<blockquote>\n<p>②注解使用在类上，那么该类下的所有方法都使用同一套注解参数配置</p>\n</blockquote>\n<blockquote>\n<p>③使用在方法上，不同的方法可以采用不同的事务参数配置。</p>\n</blockquote>\n<blockquote>\n<p>④xml配置文件中要开启事务的注解驱动&lt;tx:annotation-driven/&gt;</p>\n</blockquote>\n<p>配置要点</p>\n<p>平台事务管理器配置（xml方式）</p>\n<p>事务通知的配置（@Transactional注解）</p>\n<p>事务注解驱动的配置&lt;tx:annotation-driven/&gt;</p>\n<h1 id=\"MyBatis%E7%AE%80%E4%BB%8B\">MyBatis简介</h1>\n<h2 id=\"%E5%8E%9F%E5%A7%8Bjdbc%E6%93%8D%E4%BD%9C%E7%9A%84%E5%88%86%E6%9E%90\">原始jdbc操作的分析</h2>\n<pre><code class=\"language-bash\">原始jdbc开发存在的问题如下:\n①数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能\n\n③sql语句在代码中硬编码，造成代码不易维护，实际应用sql变化的可能较大，\nsql变动需要改变java代码。\n\n③查询操作时，需要手动将结果集中的数据手动封装到实体中。插入操作时，\n需要手动将实体的数据设置到sql语句的占位符位置\n\n\n应对上述问题给出的解决方案:\n①使用数据库连接池初始化连接资源\n\n②将sql语句抽取到xml配置文件中\n\n③使用反射、内省等底层技术，自动将实体与表进行属性与字段的自动映射</code></pre>\n<h2 id=\"%E4%BB%80%E4%B9%88%E6%98%AFMybatis\">什么是Mybatis</h2>\n<p>MyBatis实现了上述的解决方案</p>\n<pre><code class=\"language-bash\">①mybatis是一个优秀的基于java的持久层框架，它内部封装了jdbc，\n使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、\n创建连接、创建statement等繁杂的过程。\n\n②mybatis通过xml或注解的方式将要执行的各种statement配置起来，\n并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句。\n\n③最后mybatis框架执行sql并将结果映射为java对象并返回。\n采用ORM思想解决了实体和数据库映射的问题，对idbc进行了封装，\n屏蔽了jdbcapi底层访问细节，使我们不用与jdbcapi打交道，\n就可以完成对数据库的持久化操作。</code></pre>\n<h3 id=\"MyBatis%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4\">MyBatis开发步骤</h3>\n<p>①添加MyBatis的坐标</p>\n<p>②创建user数据表</p>\n<p>③编写User实体类</p>\n<p>④编写映射文件UserMapper.xml（主要写sql语句）</p>\n<p>⑤编写核心文件SqlMapConfig.xml（配置mybatis核心配置）</p>\n<p>⑥编写测试类</p>\n<p></p>\n<blockquote>\n<h3 id=\"%E2%91%A0%E6%B7%BB%E5%8A%A0pom%E7%9B%B8%E5%BA%94%E7%9A%84%E5%9D%90%E6%A0%87\">①添加pom相应的坐标</h3>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;dependency&gt;\n      &lt;groupId&gt;mysql&lt;/groupId&gt;\n      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n      &lt;version&gt;5.1.32&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;\n      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;\n      &lt;version&gt;3.4.6&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;junit&lt;/groupId&gt;\n      &lt;artifactId&gt;junit&lt;/artifactId&gt;\n      &lt;version&gt;4.12&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;log4j&lt;/groupId&gt;\n      &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n      &lt;version&gt;1.2.17&lt;/version&gt;\n    &lt;/dependency&gt;</code></pre>\n<blockquote>\n<h3 id=\"%E2%91%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%A1%A8\">②数据库中创建表</h3>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\99e93b53fe0d4b359849093c63dbe065.png\" width=\"728\"/></p>\n<blockquote>\n<h3 id=\"%C2%A0%E2%91%A2%E5%88%9B%E5%BB%BApojo%E4%B8%8B%E7%9A%84user%E7%B1%BB\"> ③创建pojo下的user类</h3>\n</blockquote>\n<pre><code class=\"language-java\">package com_mybatis.pojo;\n\npublic class User {\n    private int id;\n    private String username;\n    private String password;\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", username='\" + username + '\\'' +\n                \", password='\" + password + '\\'' +\n                '}'+\"\\n\";\n    }\n}\n</code></pre>\n<blockquote>\n<p>④编写映射文件UserMapper.xml（主要写sql语句）</p>\n</blockquote>\n<p>在resource下的com_mybatis/mapper/UserMapper.xml</p>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"userMapper\"&gt;\n\n\n    &lt;!--查询操作,resultType为查询出来的结果往哪里封装--&gt;\n    &lt;select id=\"findAll\" resultType=\"com_mybatis.pojo.User\"&gt;\n        select * from user\n    &lt;/select&gt;\n\n\n&lt;/mapper&gt;</code></pre>\n<blockquote>\n<p>⑤编写核心文件SqlMapConfig.xml（配置mybatis核心配置）</p>\n</blockquote>\n<p>在resource下的SqlMapConfig.xml</p>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;\n&lt;configuration&gt;\n\n\n    &lt;!--数据源环境--&gt;\n    &lt;environments default=\"development\"&gt;\n        &lt;environment id=\"development\"&gt;\n            &lt;transactionManager type=\"JDBC\"&gt;&lt;/transactionManager&gt;\n            &lt;dataSource type=\"POOLED\"&gt;\n                &lt;property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/&gt;\n                &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/test\"/&gt;\n                &lt;property name=\"username\" value=\"root\"/&gt;\n                &lt;property name=\"password\" value=\"123456\"/&gt;\n            &lt;/dataSource&gt;\n        &lt;/environment&gt;\n    &lt;/environments&gt;\n\n\n    &lt;!--加载映射文件--&gt;\n    &lt;mappers&gt;\n        &lt;mapper resource=\"com_mybatis/mapper/UserMapper.xml\"&gt;&lt;/mapper&gt;\n    &lt;/mappers&gt;\n\n\n&lt;/configuration&gt;</code></pre>\n<blockquote>\n<h3 id=\"%E2%91%A5%E7%BC%96%E5%86%99%E6%B5%8B%E8%AF%95%E7%B1%BB\">⑥编写测试类</h3>\n</blockquote>\n<p>在java下新建一个test包下的mybatisTest类</p>\n<pre><code class=\"language-java\">package com_mybatis.test;\n\nimport com_mybatis.pojo.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\nimport org.junit.Test;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\n\npublic class MybatisTest {\n\n    @Test\n    public void test1() throws IOException {\n        //获得核心配置文件\n      InputStream resourceAsFile = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n       //获得session工厂对象\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsFile);\n        //获得session会话对象\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n        //执行操作 参数：namespace+id\n        List&lt;User&gt; userList = sqlSession.selectList(\"userMapper.findAll\");\n        System.out.println(userList);\n        //释放资源\n        sqlSession.close();\n\n\n\n    }\n}\n</code></pre>\n<h3 id=\"%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C\">运行结果</h3>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\fbe6ee79f55f4d7db62ee70b050db040.png\" width=\"538\"/></p>\n<h1 id=\"%C2%A0MyBatis%E7%9A%84%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E6%A6%82%E8%BF%B0\"> MyBatis的映射文件概述</h1>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\28a072abcb6a458e8bdbf04adcaea399.png\" width=\"710\"/></p>\n<h1 id=\"%C2%A0Mybatis%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%93%8D%E4%BD%9C\"> Mybatis增删改查操作</h1>\n<h2 id=\"Mybatis%E7%9A%84%E5%A2%9E%E5%8A%A0%2F%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C\">Mybatis的增加/插入操作</h2>\n<blockquote>\n<p>mybatisTest下</p>\n</blockquote>\n<pre><code class=\"language-java\">    @Test\n    public void test2() throws IOException {\n        //模拟user对象\n        User user=new User();\n        user.setUsername(\"ZengHui\");\n        user.setPassword(\"1234\");\n\n        //获得核心配置文件\n        InputStream resourceAsFile = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n        //获得session工厂对象\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsFile);\n        //获得session会话对象\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n        //执行操作 参数：namespace+id\n        int result= sqlSession.insert(\"userMapper.insertUser\",user);\n        //mybatis默认不自动提交事务，提交后才能持久化到数据库中\n        sqlSession.commit();\n        System.out.println(result);\n        //释放资源\n        sqlSession.close();\n\n    }\n</code></pre>\n<blockquote>\n<p> UserMapper.xml下</p>\n</blockquote>\n<pre><code class=\"language-XML\">  &lt;!--插入操作--&gt;\n    &lt;insert id=\"insertUser\" parameterType=\"com_mybatis.pojo.User\"&gt;\n        insert into user values (#{id},#{username},#{password})\n    &lt;/insert&gt;</code></pre>\n<p> 运行结果</p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\cb5c7a3f219f46cfab9226f39afb529d.png\" width=\"498\"/></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\77847bcdec3f42caac68f6840c03cae4.png\" width=\"603\"/></p>\n<h3 id=\"%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98\">插入操作注意的问题</h3>\n<ul><li>插入语句使用insert标签</li><li>在映射文件中时而用parameterType属性指定要插入的数据类型</li><li>Sq语句中使用#{实体属性名}方式引用实体中的属性值</li><li>插入操作使用的ApI是sqlSession.insert(“命名空间.id,实体对象”)；</li><li>插入操作设计数据库变化，所以要使用sqlSession对象显示的提交事务，即sqlSession,commit()</li></ul>\n<h2 id=\"MyBatis%E7%9A%84%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C\">MyBatis的修改数据操作</h2>\n<blockquote>\n<p>在UserMapper.xml文件下</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;!--   修改操作--&gt;\n&lt;update id=\"update\" parameterType=\"com_mybatis.pojo.User\"&gt;\n    update user  set username=#{username},password=#{password} where id=#{id}\n&lt;/update&gt;</code></pre>\n<blockquote>\n<p>MybatisTest类下</p>\n</blockquote>\n<pre><code class=\"language-java\">\n    @Test\n    //修改操作\n    public void test3() throws IOException {\n        //模拟user对象\n        User user=new User();\n        user.setId(3);\n        user.setUsername(\"ZhaoLiu\");\n        user.setPassword(\"12345\");\n\n        //获得核心配置文件\n        InputStream resourceAsFile = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n        //获得session工厂对象\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsFile);\n        //获得session会话对象\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n        //执行操作 参数：namespace+id\n     sqlSession.update(\"userMapper.update\", user);\n        //mybatis默认不自动提交事务，提交后才能持久化到数据库中\n        sqlSession.commit();\n\n        //释放资源\n        sqlSession.close();\n\n    }</code></pre>\n<p>运行之后，数据库中变化</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\91bfff4ca07146f19a861570c2b7b5aa.png\" width=\"982\"/></p>\n<h2 id=\"Mybatis%20%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C\">Mybatis 删除数据操作</h2>\n<p>userMapper.xml</p>\n<pre><code class=\"language-XML\">&lt;!--删除操作--&gt;\n    &lt;delete id=\"delete\" parameterType=\"java.lang.Integer\"&gt;\n        delete from user where id=#{id}\n    &lt;/delete&gt;</code></pre>\n<p>  mybatisTest类下</p>\n<pre><code class=\"language-java\">    @Test\n    //删除\n    public void test4() throws IOException {\n\n        //获得核心配置文件\n        InputStream resourceAsFile = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n        //获得session工厂对象\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsFile);\n        //获得session会话对象\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n        //执行操作 参数：namespace+id\n        sqlSession.delete(\"userMapper.delete\", 3);\n        //mybatis默认不自动提交事务，提交后才能持久化到数据库中\n        sqlSession.commit();\n\n        //释放资源\n        sqlSession.close();\n\n    }</code></pre>\n<p>运行结果</p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\aa7d6f059a7b40e2b923dc7367e10b14.png\" width=\"476\"/></p>\n<h3 id=\"%C2%A0%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98\"> 删除操作注意的问题</h3>\n<p>删除语句使用delete标签</p>\n<p>Sql语句中使你#{任意字符串}方式引用传递的<strong>单个参数</strong></p>\n<p>删除操作使用的API是sqlSession.delete(\"命名空间.id\",Object)</p>\n<h1 id=\"Mybatis%E5%B8%B8%E7%94%A8%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A6%82%E8%BF%B0\">Mybatis常用核心配置文件概述</h1>\n<h2 id=\"envrionment%E6%A0%87%E7%AD%BE\">envrionment标签</h2>\n<p>数据库环境配置。，支持多环境配置</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\1617c5632f1b4e93b6f95841b802c934.png\" width=\"686\"/></p>\n<p></p>\n<pre><code>其中，事务管理器(transactionManager)类型有两种:\n\nJDBC：这个配置就是直接使用了JDBC的提交和回滚设置，它依赖干从数据源得到\n的连接来管理事务作用域\n\nMANAGED:这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器\n来管理事务的整个生命周期(比如JEE应用服务器的上下文)。默认情况下它会关\n闭连接，然而一些容器并不希望这样，因此需要将closeConnection属性设置为\nfalse来阻止它默认的关闭行为。\n\n其中，数据源(dataSource)类型有三种:\n·UNPOOLED:这个数据源的实现只是每次被请求时打开和关闭连接。\n·POOLED:这种数据源的实现利用“池”的概念将JDBC连接对象组织起来。\n·JNDI:这个数据源的实现是为了能在如EJB或应用服务器这类容器中使用，\n容器可以集中或在外部配置数据源，然后放置一个JNDI上下文的引用。</code></pre>\n<h2 id=\"%C2%A0mapper%E6%A0%87%E7%AD%BE\"> mapper标签</h2>\n<p>该标签的作用是加载映射的，加载方式有如下几种：</p>\n<ul><li>使用相对于类路径的资源引用，例如:&lt;mapper resource=\"org/mybatis/builder/AuthorMapper.xml\"/&gt;<strong>（常用)</strong></li><li>使用完全限定资源定位符(URL)，例如:&lt;mapper url=\"file://var/mappers/AuthorMapper.xml\"/&gt;</li><li>使用映射器接口实现类的完全限定类名，例如:&lt;mapper class=\"org.mybatis.builder.AuthorMapper\"/&gt;</li><li>将包内的映射器接口实现全部注册为映射器，例如:&lt;package name=\"org.mybatis.builder\"/&gt;</li></ul>\n<p> Properties标签</p>\n<p>实际开发中，习惯将数据源的配置信息单独抽取成一个properties文件，该标签可以加载额外配置的properties文件</p>\n<p> jdbc.properties文件下</p>\n<pre><code class=\"language-bash\">jdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/test\njdbc.username=root\njdbc.password=123456</code></pre>\n<p>sqlMapConfig.xml</p>\n<pre><code class=\"language-XML\">  &lt;!--通过properties标签加载外部properties文件--&gt;\n    &lt;properties resource=\"jdbc.properties\"&gt;&lt;/properties&gt;\n\n\n    &lt;!--数据源环境--&gt;\n    &lt;environments default=\"development\"&gt;\n        &lt;environment id=\"development\"&gt;\n            &lt;transactionManager type=\"JDBC\"&gt;&lt;/transactionManager&gt;\n            &lt;dataSource type=\"POOLED\"&gt;\n                &lt;property name=\"driver\" value=\"${jdbc.driver}\"/&gt;\n                &lt;property name=\"url\" value=\"${jdbc.url}\"/&gt;\n                &lt;property name=\"username\" value=\"${jdbc.username}\"/&gt;\n                &lt;property name=\"password\" value=\"${jdbc.password}\"/&gt;\n            &lt;/dataSource&gt;\n        &lt;/environment&gt;\n    &lt;/environments&gt;\n</code></pre>\n<p> 执行一个查询操作，运行结果</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\c613486eda4a4221a18d0cf086aae100.png\" width=\"569\"/></p>\n<h2 id=\"%C2%A0typeAliases%E6%A0%87%E7%AD%BE\"> typeAliases标签</h2>\n<p>类型别名是java类型<strong>设置一个短的名字</strong>，原来的类型名称配置如下</p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\f5954ac0afa347709276ede4e7b7d104.png\" width=\"868\"/></p>\n<blockquote>\n<p>在sqlMapConfig 配置typeAliases，将com_mybatis.pojo.User定义别名为user</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\1f59458b4386400a80e57c9a4e0e6f48.png\" width=\"922\"/></p>\n<p></p>\n<blockquote>\n<p> 报了一个顺序错误，typeAliases应该放在properties之后</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\97b668a8e11444a8b2d1475a4967bae0.png\" width=\"758\"/></p>\n<p></p>\n<pre><code class=\"language-XML\">&lt;typeAliases&gt;\n        &lt;typeAlias type=\"com_mybatis.pojo.User\" alias=\"user\"&gt;&lt;/typeAlias&gt;\n    &lt;/typeAliases&gt;</code></pre>\n<blockquote>\n<p> 写sql语句的UserMapper.xml下</p>\n</blockquote>\n<pre><code class=\"language-XML\">    &lt;!--查询操作,resultType为查询出来的结果往哪里封装--&gt;\n    &lt;select id=\"findAll\" resultType=\"user\"&gt;\n        select * from user\n    &lt;/select&gt;\n</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\12fed92eea6540cbb192db09ec0d2de3.png\" width=\"561\"/></p>\n<h1 id=\"%C2%A0MyBatis%E7%9A%84%E7%9B%B8%E5%BA%94API\"> MyBatis的相应API</h1>\n<h2 id=\"1%E3%80%81SqlSession%E5%B7%A5%E5%8E%82%E6%9E%84%E5%BB%BA%E5%99%A8SqlSessionFactoryBuilder\">1、SqlSession工厂构建器SqlSessionFactoryBuilder</h2>\n<p>常用API：SqlSessionFactory  build(InputStream inputStream)</p>\n<p>通过加载mybatis的核心文件的输入流的形式构建一个SqlSessionFactory对象</p>\n<p class=\"img-center\"><img alt=\"\" height=\"100\" src=\"image\\8a6439826121480988d570eabdbf57ec.png\" width=\"607\"/></p>\n<p> 其中，<strong>mybatis-config.xml是类加载器的路径，在maven工程下就是resource资源下</strong><strong>，</strong>Resources工具类，这个类在org.apache.ibatis.io包中。Resource类帮助你从类路径下、文件系统或一个webURL中加载资源文件。</p>\n<p>sqkSessionFactory有多个方法创建SqlSession实例，常用的有两个</p>\n<p class=\"img-center\"><img alt=\"\" height=\"123\" src=\"image\\ff4acd26f76c4aa8887bb7658107a18a.png\" width=\"576\"/></p>\n<h2 id=\"2%E3%80%81SqlSession%E4%BC%9A%E8%AF%9D%E5%AF%B9%E8%B1%A1\">2、SqlSession会话对象</h2>\n<p>SqlSession实例在MyBatis是非常强大的一个类，在这里会看到所有执行语句、提交或回滚事务和获取映射实例的方法有</p>\n<p class=\"img-center\"><img alt=\"\" height=\"150\" src=\"image\\656794e953ee4d0bba874af92adf04bb.png\" width=\"703\"/></p>\n<p> 操作事务的方法主要有</p>\n<p class=\"img-center\"><img alt=\"\" height=\"60\" src=\"image\\f630b7d8bcbb4d778a53dac056ed7368.png\" width=\"483\"/></p>\n<h1 id=\"Mybatis%E7%9A%84Dao%E5%B1%82%E5%AE%9E%E7%8E%B0\">Mybatis的Dao层实现</h1>\n<h2 id=\"1%E3%80%81%E4%BC%A0%E7%BB%9F%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F-%E7%BC%96%E5%86%99UserDao%E6%8E%A5%E5%8F%A3\">1、传统开发方式-编写UserDao接口</h2>\n<h3 id=\"%E6%B5%8B%E8%AF%95%E7%BC%96%E5%86%99UserDao%E6%8E%A5%E5%8F%A3\">测试编写UserDao接口</h3>\n<blockquote>\n<p>controller包下UserController类下</p>\n</blockquote>\n<pre><code class=\"language-java\">package com_Dao.controller;\n\nimport com_Dao.service.Impl.UserServiceImpl;\nimport com_Dao.service.UserService;\nimport com_mybatis.pojo.User;\n\nimport java.io.IOException;\nimport java.util.List;\n\npublic class UserController {\n    public static void main(String[] args) throws IOException {\n        UserService userService=new UserServiceImpl();\n        List&lt;User&gt; userList = userService.findAll();\n        System.out.println(userList);\n    }\n\n}\n</code></pre>\n<blockquote>\n<p>service包下UserService下</p>\n</blockquote>\n<p>接口</p>\n<pre><code class=\"language-java\">package com_Dao.service;\n\nimport com_mybatis.pojo.User;\n\nimport java.io.IOException;\nimport java.util.List;\n\npublic interface UserService {\n\n public List&lt;User&gt; findAll() throws IOException;\n}\n</code></pre>\n<p>实现类下</p>\n<pre><code class=\"language-java\">package com_Dao.service.Impl;\n\nimport com_Dao.Dao.Impl.UserDaoImpl;\nimport com_Dao.Dao.UserDao;\nimport com_Dao.service.UserService;\nimport com_mybatis.pojo.User;\n\nimport java.io.IOException;\nimport java.util.List;\n\npublic class UserServiceImpl implements UserService {\n UserDao userDao=new UserDaoImpl();\n    @Override\n    public List&lt;User&gt; findAll() throws IOException {\n        return userDao.findAll();\n    }\n}\n</code></pre>\n<blockquote>\n<p>dao包下的UserDao下</p>\n</blockquote>\n<p>接口下</p>\n<pre><code class=\"language-java\">package com_Dao.Dao;\n\nimport com_mybatis.pojo.User;\n\nimport java.io.IOException;\nimport java.util.List;\n\npublic interface UserDao {\n    public List&lt;User&gt; findAll() throws IOException;\n}\n</code></pre>\n<p>实现类下</p>\n<pre><code class=\"language-java\">package com_Dao.Dao.Impl;\n\nimport com_Dao.Dao.UserDao;\nimport com_mybatis.pojo.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\n\npublic class UserDaoImpl implements UserDao {\n    @Override\n    public List&lt;User&gt; findAll() throws IOException {\n\n        //获得核心配置文件\n        InputStream resourceAsFile = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n        //获得session工厂对象\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsFile);\n        //获得session会话对象\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n        //执行操作 参数：namespace+id\n        List&lt;User&gt; userList = sqlSession.selectList(\"userMapper.findAll\");\n        return userList;\n    }\n}\n</code></pre>\n<p><strong>其他文件，如sqlMapConfig.xml和UserMapper.xml等中的配置和之前的一致</strong></p>\n<p><strong>运行结果</strong></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\8eba636858434dfab612a2e9b81538d3.png\" width=\"882\"/></p>\n<h2 id=\"2%E3%80%81%20%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F\">2、 代理开发方式</h2>\n<p>介绍</p>\n<p>采用Mybatis的电路考法方式实现Dao层的开发，这种方式是我们进入企业的主流。</p>\n<p>Mapper接口开发方法<strong>只需要程序员编写Mapper接口(相当于Dao接口)</strong>，由Mybatis框架根据接口定义创建接口的动态代理对象，代理对象的方法体同上边Dao接口实现类方法。 Mapper接口开发需要遵循以下规范:</p>\n<ol><li>Mapper.xml文件中的namespace与mapper接口的全限定名相同</li><li>Mapper接口方法名和Mapperxml中定义的每个statement的id相同</li><li>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql的parameterType的类型相同</li><li>Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</li></ol>\n<p>规范图示对应</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\9f87336e972e4065b9e9ef35d2566fce.png\" width=\"1083\"/></p>\n<h3 id=\"%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91%C2%A0\">代码测试代理开发 </h3>\n<blockquote>\n<p> UserDao下</p>\n</blockquote>\n<pre><code class=\"language-java\">package com_Dao_DaiLi.Dao;\nimport com_mybatis.pojo.User;\nimport java.io.IOException;\n\npublic interface  UserDao {\n    public User findById(int id) throws IOException;\n}\n</code></pre>\n<blockquote>\n<p> service包下</p>\n</blockquote>\n<pre><code class=\"language-java\">package com_Dao_DaiLi.service;\n\nimport com_Dao_DaiLi.Dao.UserDao;\nimport com_mybatis.pojo.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class ServiceTest {\n    public static void main(String[] args) throws IOException {\n        InputStream resourceAsStream = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n\n        UserDao mapper = sqlSession.getMapper(UserDao.class);\n        User user = mapper.findById(1);\n        System.out.println(user);\n\n    }\n}\n</code></pre>\n<blockquote>\n<p>UserMapper1.xml下 </p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"com_Dao_DaiLi.Dao.UserDao\"&gt;\n\n\n&lt;!--根据id进行查询--&gt;\n    &lt;select id=\"findById\" parameterType=\"int\" resultType=\"user\"&gt;\n        select *from user where id=#{id}\n    &lt;/select&gt;\n\n\n\n&lt;/mapper&gt;</code></pre>\n<blockquote>\n<p> 还需注意将sqlMapConfig.xml下加载UserMapper1.xml下 </p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\bc19b2add1094ad59014f45d34327392.png\" width=\"1200\"/></p>\n<p></p>\n<p>运行结果</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\8702188a29eb485c82086a1008d61672.png\" width=\"937\"/></p>\n<h1 id=\"Mybatis%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5\">Mybatis映射文件深入</h1>\n<h2 id=\"%E5%8A%A8%E6%80%81sql%E8%AF%AD%E5%8F%A5\">动态sql语句</h2>\n<p>概述：Mybatais的映射文件中，前面我们的SQL都是比较简单的，有时候业务逻辑复杂时，我们的sql时动态变化的，此时在其那面学习的sql就不能满足要求了</p>\n<p></p>\n<h2 id=\"%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E4%B8%AD%E5%8A%A8%E6%80%81sql\">官方文档中动态sql</h2>\n<p>MyBatis 的强大特性之一便是它的动态 SQL。如果你有使用 JDBC 或其他类似框架的经验，你就能体会到根据不同条件拼接 SQL 语句有多么痛苦。拼接的时候要确保不能忘了必要的空格，还要注意省掉列名列表最后的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</p>\n<p>通常使用动态 SQL 不可能是独立的一部分,MyBatis 当然使用一种强大的动态 SQL 语言来改进这种情形,这种语言可以被用在任意的 SQL 映射语句中。</p>\n<p>动态 SQL 元素和使用 JSTL 或其他类似基于 XML 的文本处理器相似。在 MyBatis 之前的版本中,有很多的元素需要来了解。MyBatis 3 大大提升了它们,现在用不到原先一半的元素就可以了。MyBatis 采用功能强大的基于 OGNL 的表达式来消除其他元素。</p>\n<ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul>\n<h2 id=\"%E5%8A%A8%E6%80%81SQL%E4%B9%8Bif\">动态SQL之if</h2>\n<h3 id=\"%E6%B5%8B%E8%AF%95%E7%A4%BA%E4%BE%8Bif\">测试示例if</h3>\n<blockquote>\n<p>UserMapper接口下</p>\n</blockquote>\n<pre><code class=\"language-java\">package com_Mybatis_sql.mapper;\n\nimport com_Mybatis_sql.pojo.User;\n\nimport java.util.List;\n\npublic interface UserMapper {\n    public List&lt;User&gt; findByCondition(User user);\n}\n</code></pre>\n<blockquote>\n<p> UserMapper2.xml文件下</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"com_Mybatis_sql.mapper.UserMapper\"&gt;\n\n&lt;select id=\"findByCondition\" parameterType=\"user\" resultType=\"user\"&gt;\n\n select *from user\n-- 用where标签保住等价于where 1=1，有条件就进入\n &lt;where&gt;\n &lt;if test=\"id!=0\"&gt;\n     and id=#{id}\n &lt;/if&gt;\n\n &lt;if test=\"username!=null\"&gt;\n     and username=#{username}\n &lt;/if&gt;\n &lt;if test=\"password!=null\"&gt;\n     and password=#{password}\n &lt;/if&gt;\n &lt;/where&gt;\n&lt;/select&gt;\n\n\n\n&lt;/mapper&gt;</code></pre>\n<blockquote>\n<p>test测试下</p>\n</blockquote>\n<pre><code class=\"language-java\">\n\npublic class MapperTest {\n    @Test\n    public void test1() throws IOException {\n    InputStream resourceAsStream = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n\n    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);\n    SqlSession sqlSession = sqlSessionFactory.openSession();\n        UserMapper mapper = sqlSession.getMapper(UserMapper.class);\n\n        //模拟条件user\n     User user=new User();\n        user.setId(1);\n        user.setUsername(\"zhangsan\");\n       user.setPassword(\"123\");\n        List&lt;User&gt; userList = mapper.findByCondition(user);\n        System.out.println(userList);\n    }\n\n}\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\55f0951aa2054982a136955142eb294a.png\" width=\"815\"/></p>\n<blockquote>\n<p><strong> 当没有写条件时，原来的sql语句就等价于select *from user</strong></p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;select id=\"findByIds\" parameterType=\"list\" resultType=\"user\"&gt;\n    select *from user\n    &lt;where&gt;\n        &lt;foreach collection=\"list\" open=\"id in(\" close=\")\" item=\"id\" separator=\",\"&gt;\n            #{id}\n        &lt;/foreach&gt;\n\n    &lt;/where&gt;\n\n&lt;/select&gt;</code></pre>\n<blockquote>\n<p><strong> 这样的动态查询无论是有没有条件或者是有多个条件都能查询到</strong></p>\n</blockquote>\n<h2 id=\"%E5%8A%A8%E6%80%81sql%E4%B9%8Bforeach\">动态sql之foreach</h2>\n<p>循环执行sql的拼接操作，例如：：select *from user where id in(1,2,3)</p>\n<h3 id=\"%E6%B5%8B%E8%AF%95%E7%A4%BA%E4%BE%8Bforeach\">测试示例foreach</h3>\n<blockquote>\n<p>UserMapper接口下</p>\n</blockquote>\n<pre><code class=\"language-java\">public interface UserMapper {\n\n    public List&lt;User&gt; findByIds(List&lt;Integer&gt; ids);\n}</code></pre>\n<blockquote>\n<p>配置文件UserMapper2.xml配置文件下</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;select id=\"findByIds\" parameterType=\"list\" resultType=\"user\"&gt;\n    select *from user\n    &lt;where&gt;\n        &lt;foreach collection=\"list\" open=\"id in(\" close=\")\" item=\"id\" separator=\",\"&gt;\n            #{id}\n        &lt;/foreach&gt;\n\n    &lt;/where&gt;\n\n&lt;/select&gt;</code></pre>\n<blockquote>\n<p>MapperTest测试类下</p>\n</blockquote>\n<pre><code class=\"language-java\">public class MapperTest {\n\n\n    @Test\n    public void test2() throws IOException {\n        InputStream resourceAsStream = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n        UserMapper mapper = sqlSession.getMapper(UserMapper.class);\n\n     //模拟ids的数据\n        List&lt;Integer&gt; ids=new ArrayList&lt;Integer&gt;();\n        ids.add(1);\n        ids.add(2);\n        List&lt;User&gt; byIds = mapper.findByIds(ids);\n        System.out.println(byIds);\n\n    }\n}</code></pre>\n<blockquote>\n<p> 运行结果</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\0a005c85104845c89b0e79c519b6589c.png\" width=\"663\"/></p>\n<h2 id=\"%C2%A0sql%E7%89%87%E6%AE%B5%E7%9A%84%E6%8A%BD%E5%8F%96\"> sql片段的抽取</h2>\n<p>sql中可将重复的sql提取出来，使用include引用即可，最终达到sql重用的目的</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\a230792666ed49ddae0bba8d03e6c4aa.png\" width=\"394\"/></p>\n<p></p>\n<pre><code class=\"language-XML\">&lt;!--sql语句抽取--&gt;\n    &lt;sql id=\"selectUser\"&gt; select *from user&lt;/sql&gt;\n\n&lt;select id=\"findByIds\" parameterType=\"list\" resultType=\"user\"&gt;\n    &lt;include refid=\"selectUser\"&gt;&lt;/include&gt;\n    &lt;where&gt;\n        &lt;foreach collection=\"list\" open=\"id in(\" close=\")\" item=\"id\" separator=\",\"&gt;\n            #{id}\n        &lt;/foreach&gt;\n\n    &lt;/where&gt;\n\n&lt;/select&gt;\n</code></pre>\n<h2 id=\"Mybatis%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93\">Mybatis映射文件深入知识小结</h2>\n<p><strong>&lt;select&gt;:查询</strong></p>\n<p><strong>&lt;insert&gt;:插入</strong></p>\n<p><strong>&lt;update&gt;:修改</strong></p>\n<p><strong>&lt;delete&gt;:删除</strong></p>\n<p><strong>&lt;where&gt;:where条件</strong></p>\n<p><strong>&lt;if&gt;:if判断</strong></p>\n<p><strong>&lt;foreach&gt;:循环</strong></p>\n<p><strong>&lt;sql&gt;:sql片段抽取</strong></p>\n<h1 id=\"Mybatis%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5\">Mybatis核心配置文件深入</h1>\n<p> 无论是Mybatis在预处理语句(PreparedStatement)中设置一个参数是，还是从结果集中取出一个值式都会用类型处理器将获取的值以合适的方式转换成java类型，下表描述一些默认的类型处理器（部分）</p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\80803c889d374e0cb2891bc7c86f6a06.png\" width=\"749\"/></p>\n<h2 id=\"%C2%A0typeHandlers%E6%A0%87%E7%AD%BE\"> typeHandlers标签</h2>\n<p>可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。<br/> 具体做法为:实现org.apache.ibatis.type.TypeHandler接口，或继承一个很便利的类org.apache.ibatis.type.BaseTypeHandler，然后可以选择性地将它映射到一个JDBC类型。<br/> 例如需求:一个Java中的Date数据类型，我想将之存到数据库的时候存成一个1970年至今的毫秒数，取出来时转换成java的Date，即java的Date与数据库的varchar毫秒值之间转换</p>\n<h3 id=\"%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4%3A\">开发步骤:</h3>\n<ul><li>①定义转换类继承类BaseTypeHandler&lt;T&gt;（这个泛型就是要转化的java类型）</li><li> ②覆盖4个未实现的方法，其中setNonNullParameter为java程序设置数据到数据库的回调方getNullableResul为查询时mysql的字符串类型转换成java的Type类型的方法</li><li>③在MyBatis核心配置文件中进行注册</li><li>④ 测试转换是否正确</li></ul>\n<p><img alt=\"\" height=\"271\" src=\"image\\39e7901df43c4fc9bb681eccb7485f45.png\" width=\"516\"/></p>\n<p></p>\n<blockquote>\n<p>①定义BaseTypeHandler类下和覆盖四个没实现的方法</p>\n</blockquote>\n<pre><code class=\"language-java\">\n\npublic class DateHandler  extends BaseTypeHandler&lt;Date&gt; {\n   //将java类型转换成数据库需要的类型\n    public void setNonNullParameter(PreparedStatement preparedStatement, int i, Date date, JdbcType jdbcType) throws SQLException {\n        long time = date.getTime();\n        preparedStatement.setLong(i,time);\n\n    }\n\n    //将数据库中的类型转换成java类型\n    //String参数 要转换的字段名称\n    //ResultSet  查询出的结果集\n    @Override\n    public Date getNullableResult(ResultSet resultSet, String s) throws SQLException {\n      //获得结果集中需要的数据（long）转换成Date类型 返回\n        long aLong = resultSet.getLong(s);\n        Date date =new Date(aLong);\n        return date;\n    }\n    //将数据库中的类型转换成java类型\n    @Override\n    public Date getNullableResult(ResultSet resultSet, int i) throws SQLException {\n        long aLong = resultSet.getLong(i);\n        Date date =new Date(aLong);\n        return date;\n    }\n    //将数据库中的类型转换成java类型\n    @Override\n    public Date getNullableResult(CallableStatement callableStatement, int i) throws SQLException {\n        long aLong = callableStatement.getLong(i);\n        Date date =new Date(aLong);\n        return date;\n    }\n}\n</code></pre>\n<blockquote>\n<p>UserMapper接口下</p>\n</blockquote>\n<pre><code class=\"language-java\">package com_mybatis_config.mapper;\n\n\nimport com_mybatis_config.pojo.User;\n\npublic interface UserMapper {\npublic void save(User user);\n\n}\n\n</code></pre>\n<blockquote>\n<p>user类下一些</p>\n</blockquote>\n<pre><code class=\"language-java\">package com_mybatis_config.pojo;\n\n\nimport java.util.Date;\n\npublic class User {\n    private int id;\n    private String username;\n    private String password;\n    private Date birthday;\n}\n//和一些getset方法toString</code></pre>\n<blockquote>\n<p>MybatisTest类下</p>\n</blockquote>\n<pre><code class=\"language-java\">public class MybatisTest {\n    @Test\n    public void test1() throws IOException {\n    InputStream resourceAsStream = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n    SqlSessionFactory sqlSessionFactory=new SqlSessionFactoryBuilder().build(resourceAsStream);\n    SqlSession sqlSession = sqlSessionFactory.openSession(true);\n\n    UserMapper mapper = sqlSession.getMapper(UserMapper.class);\n    //创建user\n    User user=new User();\n    user.setBirthday(new Date());\n    user.setPassword(\"kckc\");\n    user.setUsername(\"ssm\");\n\n\n\n    //执行操作\n    mapper.save(user);\n    sqlSession.close();\n\n}\n}</code></pre>\n<blockquote>\n<p>UserMapper_config.xml下</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"com_mybatis_config.mapper.UserMapper\"&gt;\n\n&lt;insert id=\"save\" parameterType=\"user\"&gt;\n    insert into user values(#{id},#{username},#{password},#{birthday})\n\n&lt;/insert&gt;\n\n\n\n&lt;/mapper&gt;</code></pre>\n<p> sqlMapCongif中加上</p>\n<p><img alt=\"\" height=\"164\" src=\"image\\6f370eb6489a4666bf4f66a1a54132b5.png\" width=\"630\"/></p>\n<p></p>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\99330c80d0ef46f6baf9bc8a82722e29.png\" width=\"577\"/></p>\n<h3 id=\"%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%91%E7%8E%B0%20xxx%C2%A0%20cannot%20be%20cast%20to%20xxx%C2%A0\">运行时发现 xxx  cannot be cast to xxx </h3>\n<p><img alt=\"\" height=\"348\" src=\"image\\8066ddf21d7148569995d59c7f6cd8ef.png\" width=\"1200\"/></p>\n<p></p>\n<blockquote>\n<p>之前在弄的时候因为省时间，将建包代替了建模块，重复利用了之前的配置导致的，这里我检查了好久才发现实在sqlMapConfig.xml中起别名的时候，将之前的包名字重复用了，所以报出不能强行转换</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\661ff50fc0b0446bb852fff868a7ad28.png\" width=\"679\"/></p>\n<p> 改回来就正常显示了</p>\n<p> 查询出来取出来可以正常显示</p>\n<p>通过在接口类中定义接口，然后在UserMapper_config.xml中进行配置</p>\n<pre><code class=\"language-XML\">    &lt;select id=\"findById\" parameterType=\"int\" resultType=\"user\"&gt;\n        select *from user where id=#{id}\n    &lt;/select&gt;</code></pre>\n<pre><code class=\"language-java\">    @Test\n    public void test2() throws IOException {\n        InputStream resourceAsStream = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n        SqlSessionFactory sqlSessionFactory=new SqlSessionFactoryBuilder().build(resourceAsStream);\n        SqlSession sqlSession = sqlSessionFactory.openSession(true);\n\n        UserMapper mapper = sqlSession.getMapper(UserMapper.class);\n\n        User byId = mapper.findById(5);\n        System.out.println(\"id为5的生日是\"+byId.getBirthday());\n\n        sqlSession.close();\n\n    }</code></pre>\n<p> 运行结果</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\136f979047284e9e8fe98658fdb68eda.png\" width=\"711\"/></p>\n<p></p>\n<h2 id=\"plugins%E6%A0%87%E7%AD%BE\">plugins标签</h2>\n<h3 id=\"%E5%88%86%E9%A1%B5%E5%8A%A9%E6%89%8BPageHelper\"><strong>分页助手PageHelper</strong></h3>\n<p>MyBatis可以使用第三方的插件来对功能进行扩展，<strong>分页助手PageHelper</strong>是将分页的复杂操作进行封装，使用简单的方式即可过得分页的相关数据</p>\n<h3 id=\"%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4%EF%BC%9A\">开发步骤：</h3>\n<p>①导入通用PageHelper的坐标</p>\n<p>②在mybatis核心配置文件中配置PageHelper插件</p>\n<p>③测试分页数据获取</p>\n<blockquote>\n<p>导入PageHelper的坐标</p>\n</blockquote>\n<pre><code class=\"language-XML\">    dependency&gt;\n      &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;\n      &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;\n      &lt;version&gt;3.7.5&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n      &lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt;\n      &lt;artifactId&gt;jsqlparser&lt;/artifactId&gt;\n      &lt;version&gt;0.9.1&lt;/version&gt;\n    &lt;/dependency&gt;</code></pre>\n<blockquote>\n<p>②在mysql的核心配置文件中配置PageHelper插件（这里为sqlMapConfig.xml）</p>\n</blockquote>\n<pre><code class=\"language-XML\">    配置分页助手插件--&gt;\n    &lt;plugins&gt;\n        &lt;plugin interceptor=\"com.github.pagehelper.PageHelper\"&gt;\n            &lt;property name=\"dialect\" value=\"mysql\"/&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;</code></pre>\n<p>测试</p>\n<pre><code class=\"language-java\">    @Test\n    public void test3() throws IOException {\n        InputStream resourceAsStream = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);\n        SqlSession sqlSession = sqlSessionFactory.openSession(true);\n\n        UserMapper mapper = sqlSession.getMapper(UserMapper.class);\n\n        //设置分页相关参数 当前页+每页显示的条数\n        PageHelper.startPage(1, 3);\n        List&lt;User&gt; userList = mapper.findAll();\n        for (User user : userList) {\n            System.out.println(user);\n        }\n\n        \n        //执行操作\n        sqlSession.close();\n    }\n\n</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\d46de9d324bf4dae9fcfe9c02b61f902.png\" width=\"811\"/></p>\n<h3 id=\"%C2%A0%E8%8E%B7%E5%8F%96%E5%88%86%E9%A1%B5%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0%E6%B5%8B%E8%AF%95\"> 获取分页相关参数测试</h3>\n<pre><code class=\"language-java\">\n\n        //设置分页相关参数 当前页+每页显示的条数\n        PageHelper.startPage(1, 3);\n        List&lt;User&gt; userList = mapper.findAll();\n        for (User user : userList) {\n            System.out.println(user);\n        }\n\n        //获得与分页相关的参数\n        PageInfo&lt;User&gt; pageInfo =new PageInfo&lt;User&gt;(userList);\n        System.out.println(\"当前页：\"+pageInfo.getPageNum());\n        System.out.println(\"上一页：\"+pageInfo.getPrePage());\n        System.out.println(\"下一页：\"+pageInfo.getNextPage());\n        System.out.println(\"每页显示条数：\"+pageInfo.getPageSize());\n        System.out.println(\"总条数：\"+pageInfo.getTotal());\n        System.out.println(\"总页数：\"+pageInfo.getPages());\n        System.out.println(\"是否是第一页：\"+pageInfo.isIsFirstPage());\n        System.out.println(\"是否是最后一页：\"+pageInfo.isIsLastPage());\n\n        //执行操作\n        sqlSession.close();\n    }\n\n\n</code></pre>\n<blockquote>\n<p>运行结果 </p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\2b3eedf308dc486aa7d19055b2bad17a.png\" width=\"673\"/></p>\n<h3 id=\"%C2%A0%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93%E4%B9%8BMybatis%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A0%87%E7%AD%BE\"> 知识小结之Mybatis核心配置文件标签</h3>\n<p><strong>properties标签:</strong>该标签可以加载外部的properties文件</p>\n<p><strong>typeAliases标签</strong>:设置类型别名</p>\n<p><strong>environments标签:</strong>数据源环境配置标签 </p>\n<p><strong>typeHandlers标签:</strong>配置自定义类型处理器 </p>\n<p><strong>plugins标签</strong>:配置MyBatis的插件</p>\n<h1 id=\"Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C\">  Mybatis的多表操作</h1>\n<h2 id=\"%E4%B8%80%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2\">1、一对一查询</h2>\n<p>一对一查询的模型</p>\n<blockquote>\n<p>用户表和订单标的关系为，一个用户有多个订单，一个订单只属于一个用户<br/> 一对一查询的需求：查询一个订单，与此同时查询出该订单所属的用户</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"125\" src=\"image\\d6bf2bc6717a41f0a316dcc211be914f.png\" width=\"449\"/></p>\n<p>测试订单</p>\n<blockquote>\n<h3 id=\"%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD\">数据库中</h3>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\219eedb654024dbbb88754f0a7d48cd7.png\" width=\"896\"/></p>\n<p></p>\n<blockquote>\n<h3 id=\"mapper%E5%8C%85%E4%B8%8BorderMapper%E7%B1%BB%E4%B8%8B\">mapper包下orderMapper类下</h3>\n</blockquote>\n<pre><code class=\"language-java\">package com_mybatis_table.mapper;\n\n\nimport com_mybatis_table.pojo.Order;\n\nimport java.util.List;\n\npublic interface OrderMapper {\n\n    //查询全部的方法\n    public List&lt;Order&gt; findAll();\n\n}\n</code></pre>\n<blockquote>\n<h3 id=\"pojo%E5%8C%85%E4%B8%8B%E7%9A%84order%E7%B1%BB%E4%B8%8B\">pojo包下的order类下</h3>\n</blockquote>\n<pre><code class=\"language-java\">package com_mybatis_table.pojo;\n\nimport java.util.Date;\n\npublic class Order {\n\n    private int id;\n    private Date ordertime;\n    private double total;\n\n    //当前订单属于哪一个用户\n    private User user;\n\n    public int getId() {\n        return id;\n    }\n\n//对应的get和set方法\n\n    @Override\n    public String toString() {\n        return \"Order{\" +\n                \"id=\" + id +\n                \", ordertime=\" + ordertime +\n                \", total=\" + total +\n                \", user=\" + user +\n                '}';\n    }\n}\n</code></pre>\n<blockquote>\n<h3 id=\"pojo%E4%B8%8Buser%E7%B1%BB%E4%B8%8B\">pojo下user类下</h3>\n</blockquote>\n<pre><code class=\"language-java\">package com_mybatis_table.pojo;\n\nimport java.util.Date;\nimport java.util.List;\n\npublic class User {\n\n    private int id;\n    private String username;\n    private String password;\n    private Date birthday;\n\n    //描述的是当前用户存在哪些订单\n    private List&lt;Order&gt; orderList;\n\n//对应的get和set方法\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", username='\" + username + '\\'' +\n                \", password='\" + password + '\\'' +\n                \", birthday=\" + birthday +\n                '}';\n    }\n}\n</code></pre>\n<blockquote>\n<h3 id=\"OrderMapper.xml%E4%B8%8B\">OrderMapper.xml下</h3>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"com_mybatis_table.mapper.OrderMapper\"&gt;\n\n    &lt;resultMap id=\"orderMap\" type=\"order\"&gt;\n        &lt;!--手动指定字段与实体属性的映射关系\n            column: 数据表的字段名称\n            property：实体的属性名称\n        --&gt;\n        &lt;id column=\"oid\" property=\"id\"&gt;&lt;/id&gt;\n        &lt;result column=\"ordertime\" property=\"ordertime\"&gt;&lt;/result&gt;\n        &lt;result column=\"total\" property=\"total\"&gt;&lt;/result&gt;\n       result column=\"uid\" property=\"user.id\"&gt;&lt;/result&gt;\n        &lt;result column=\"username\" property=\"user.username\"&gt;&lt;/result&gt;\n        &lt;result column=\"password\" property=\"user.password\"&gt;&lt;/result&gt;\n        &lt;result column=\"birthday\" property=\"user.birthday\"&gt;&lt;/result&gt;\n\n\n    &lt;/resultMap&gt;\n\n    &lt;select id=\"findAll\" resultMap=\"orderMap\"&gt;\n         SELECT *,o.id oid FROM orders o,USER u WHERE o.uid=u.id\n    &lt;/select&gt;\n\n&lt;/mapper&gt;</code></pre>\n<blockquote>\n<p>sqlMapConfig.xml还是一样的配置，多出了引入OrderMapper.xml</p>\n</blockquote>\n<pre><code class=\"language-XML\">\n    &lt;!--加载映射文件--&gt;\n    &lt;mappers&gt;\n         &lt;mapper resource=\"com_mybatis/mapper/UserMapper_config.xml\"&gt;&lt;/mapper&gt;\n\n         &lt;mapper resource=\"com_mybatis/mapper/OrderMapper.xml\"&gt;&lt;/mapper&gt;\n    &lt;/mappers&gt;</code></pre>\n<blockquote>\n<h3 id=\"%C2%A0MybatisTest%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E4%B8%8B\"> MybatisTest测试代码下</h3>\n</blockquote>\n<pre><code class=\"language-java\">\npublic class MybatisTest {\n    @Test\n    public void test1() throws IOException {\n        InputStream resourceAsStream = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n\n        OrderMapper mapper = sqlSession.getMapper(OrderMapper.class);\n        List&lt;Order&gt; orderList = mapper.findAll();\n        for (Order order : orderList) {\n            System.out.println(order);\n        }\n\n        sqlSession.close();\n    }\n}\n</code></pre>\n<h3>运行结果</h3>\n<div class=\"img-center\">\n<figure class=\"image\">\n<img alt=\"\" height=\"300\" src=\"image\\3b89631f2a894a8caa7ba3d33a0b6845.png\" width=\"1200\"/>\n<figcaption>\n   查询操作运行结果\n  </figcaption>\n</figure>\n</div>\n<h3 id=\"%C2%A0OrderMap.xml%E4%B8%AD%E4%B9%9F%E5%8F%AF%E4%BD%BF%E7%94%A8\"> OrderMap.xml中也可使用</h3>\n<pre><code class=\"language-XML\">    &lt;resultMap id=\"orderMap\" type=\"order\"&gt;\n        &lt;!--手动指定字段与实体属性的映射关系\n            column: 数据表的字段名称\n            property：实体的属性名称\n        --&gt;\n        &lt;id column=\"oid\" property=\"id\"&gt;&lt;/id&gt;\n        &lt;result column=\"ordertime\" property=\"ordertime\"&gt;&lt;/result&gt;\n        &lt;result column=\"total\" property=\"total\"&gt;&lt;/result&gt;\n        &lt;!--&lt;result column=\"uid\" property=\"user.id\"&gt;&lt;/result&gt;\n        &lt;result column=\"username\" property=\"user.username\"&gt;&lt;/result&gt;\n        &lt;result column=\"password\" property=\"user.password\"&gt;&lt;/result&gt;\n        &lt;result column=\"birthday\" property=\"user.birthday\"&gt;&lt;/result&gt;--&gt;\n\n        &lt;!--\n            property: 当前实体(order)中的属性名称(private User user)\n            javaType: 当前实体(order)中的属性的类型(User)\n        --&gt;\n        &lt;association property=\"user\" javaType=\"user\"&gt;\n            &lt;id column=\"uid\" property=\"id\"&gt;&lt;/id&gt;\n            &lt;result column=\"username\" property=\"username\"&gt;&lt;/result&gt;\n            &lt;result column=\"password\" property=\"password\"&gt;&lt;/result&gt;\n            &lt;result column=\"birthday\" property=\"birthday\"&gt;&lt;/result&gt;\n        &lt;/association&gt;\n\n    &lt;/resultMap&gt;</code></pre>\n<p>单独的分离出来，结果也是一致的。</p>\n<h2 id=\"%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2\">2、一对多查询</h2>\n<p>一对多查询的模型</p>\n<p>用户表和订单表的关系为，一个用户有多个订单，一个订单只属于一个用户<br/> 一对多查询的需求：查询一个用户，与此同时查询出该用户具有的订单</p>\n<p class=\"img-center\"><img alt=\"\" height=\"150\" src=\"image\\d045705645404784a1af65580864c629.png\" width=\"543\"/></p>\n<blockquote>\n<h3 id=\"%C2%A0UserMapper%E6%8E%A5%E5%8F%A3%E4%B8%8B\"> UserMapper接口下</h3>\n</blockquote>\n<pre><code class=\"language-java\">package com_mybatis_table.mapper;\n\nimport com_mybatis_table.pojo.User;\n\nimport java.util.List;\n\npublic interface UserMapper {\n\n    public List&lt;User&gt; findAll();\n\n\n}\n</code></pre>\n<h3 id=\"UserMapper.xml%E4%B8%8B\">UserMapper.xml下</h3>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"com_mybatis_table.mapper.UserMapper\"&gt;\n\n\n    &lt;resultMap id=\"userMap\" type=\"user\"&gt;\n        &lt;id column=\"uid\" property=\"id\"&gt;&lt;/id&gt;\n        &lt;result column=\"username\" property=\"username\"&gt;&lt;/result&gt;\n        &lt;result column=\"password\" property=\"password\"&gt;&lt;/result&gt;\n        &lt;result column=\"birthday\" property=\"birthday\"&gt;&lt;/result&gt;\n        &lt;!--配置集合信息\n            property:集合名称\n            ofType：当前集合中的数据类型\n        --&gt;\n        &lt;collection property=\"orderList\" ofType=\"order\"&gt;\n            &lt;!--封装order的数据--&gt;\n            &lt;id column=\"oid\" property=\"id\"&gt;&lt;/id&gt;\n            &lt;result column=\"ordertime\" property=\"ordertime\"&gt;&lt;/result&gt;\n            &lt;result column=\"total\" property=\"total\"&gt;&lt;/result&gt;\n        &lt;/collection&gt;\n    &lt;/resultMap&gt;\n\n    &lt;select id=\"findAll\" resultMap=\"userMap\"&gt;\n        SELECT *,o.id oid FROM USER u,orders o WHERE u.id=o.uid\n    &lt;/select&gt;\n\n\n\n&lt;/mapper&gt;</code></pre>\n<blockquote>\n<h3 id=\"Mybatis%E6%B5%8B%E8%AF%95%E4%B8%8B\">Mybatis测试下</h3>\n</blockquote>\n<pre><code class=\"language-java\">    @Test\n    public void test2() throws IOException {\n        InputStream resourceAsStream = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n\n        UserMapper mapper = sqlSession.getMapper(UserMapper.class);\n        List&lt;User&gt; userList = mapper.findAll();\n        for (User user : userList) {\n            System.out.println(user);\n        }\n\n        sqlSession.close();\n    }\n</code></pre>\n<h3>运行结果</h3>\n<p><img alt=\"\" height=\"309\" src=\"image\\82dff6d58b664c4f96dd1c4f37dbd75e.png\" width=\"1200\"/></p>\n<p></p>\n<h2 id=\"%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2\">多对多查询</h2>\n<h3 id=\"%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%9E%8B\">多对多查询模型</h3>\n<p>用户表和角色表的关系为，一个用户有多个角色，一个角色被多个用户使用<br/> 多对多查询的需求：查询用户同时查询出该用户的所有角色</p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\b948846cade745d3aef01cd9665046e4.png\" width=\"699\"/></p>\n<blockquote>\n<p> 数据库中两张新表</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\c156891358034406a4cc3ccdf6c743d3.png\" width=\"794\"/></p>\n<blockquote>\n<p> UserMapper接口下</p>\n</blockquote>\n<pre><code class=\"language-java\">\n\npublic interface UserMapper {\n    public List&lt;User&gt; findUserAndRoleAll();\n\n}\n</code></pre>\n<blockquote>\n<p> pojo下的role类</p>\n</blockquote>\n<p></p>\n<pre><code class=\"language-java\">package com_mybatis_table.pojo;\n\npublic class Role {\n\n    private int id;\n    private String roleName;\n    private String roleDesc;\n //外加get和set方法和toString方法\n}\n</code></pre>\n<blockquote>\n<p>pojo下的user类</p>\n</blockquote>\n<pre><code class=\"language-java\">package com_mybatis_table.pojo;\n\nimport java.util.Date;\nimport java.util.List;\n\npublic class User {\n\n    private int id;\n    private String username;\n    private String password;\n    private Date birthday;\n\n    //描述的是当前用户存在哪些订单\n    private List&lt;Order&gt; orderList;\n\n    //描述的是当前用户具备哪些角色\n    private List&lt;Role&gt; roleList;\n\n //外加getset方法和toString方法\n}\n</code></pre>\n<blockquote>\n<p>UserMapper.xml文件下（配置sql的文件）</p>\n</blockquote>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"com_mybatis_table.mapper.UserMapper\"&gt;\n\n&lt;!--    配置role映射--&gt;\n    &lt;resultMap id=\"userRoleMap\" type=\"user\"&gt;\n&lt;!--        封装user的信息--&gt;\n        &lt;id column=\"userId\" property=\"id\"&gt;&lt;/id&gt;\n        &lt;result column=\"username\" property=\"username\"&gt;&lt;/result&gt;\n        &lt;result column=\"password\" property=\"password\"&gt;&lt;/result&gt;\n        &lt;result column=\"birthday\" property=\"birthday\"&gt;&lt;/result&gt;\n\n&lt;!--        封装user内部的roleList信息\n     column为数据库中字段名，property是实体中的名字--&gt;\n        &lt;collection property=\"roleList\"  ofType=\"role\"&gt;\n            &lt;id column=\"roleId\" property=\"id\"&gt;&lt;/id&gt;\n            &lt;result column=\"roleName\" property=\"roleName\"&gt;&lt;/result&gt;\n            &lt;result column=\"roleDesc\" property=\"roleDesc\"&gt;&lt;/result&gt;\n        &lt;/collection&gt;\n    &lt;/resultMap&gt;\n\n    \n    &lt;select id=\"findUserAndRoleAll\" resultMap=\"userRoleMap\"&gt;\n        select * from user u,sys_user_role sr,sys_role r\n                where u.id=sr.roleId and sr.roleId=r.id\n    &lt;/select&gt;\n\n&lt;/mapper&gt;\n</code></pre>\n<blockquote>\n<p>sqlMapConfig.xml中加入别名和加载映射文件</p>\n</blockquote>\n<pre><code class=\"language-XML\">    &lt;!--定义别名--&gt;\n    &lt;typeAliases&gt;\n        &lt;typeAlias type=\"com_mybatis_table.pojo.Role\" alias=\"role\"&gt;&lt;/typeAlias&gt;\n   &lt;/typeAliases&gt;\n   \n  &lt;!--加载映射文件--&gt;\n&lt;mappers&gt;\n         &lt;mapper resource=\"com_mybatis/mapper/UserMapper.xml\"&gt;&lt;/mapper&gt;\n    &lt;/mappers&gt;\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"250\" src=\"image\\2af783613b7e4d1f9d6e4f34c32ef525.png\" width=\"1200\"/></p>\n<h2 id=\"%C2%A0%E7%BB%83%E4%B9%A0%E5%86%8C%E5%A4%9A%E5%AF%B9%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2\"> 练习册多对多表查询</h2>\n<h3 id=\"%E5%B0%86orders%E3%80%81role%E3%80%81user%E4%B8%89%E8%80%85%E8%81%94%E7%B3%BB%E8%B5%B7%E6%9D%A5\">将orders、role、user三者联系起来</h3>\n<p></p>\n<p>即一个用户，显示他们角色信息，订单信息，<br/> 一个用户有多个角色，一个订单属于一个用户，一个用户有多个订单</p>\n<blockquote>\n<p>mapper包下的OrderUserRoleMapper接口下</p>\n</blockquote>\n<pre><code class=\"language-java\">\n\nimport java.util.List;\n\npublic interface OrderUserRoleMapper {\n    public List&lt;User&gt; findUserAndRoleAndOderAll();\n}\n</code></pre>\n<blockquote>\n<p>pojo包下的三个实体类基本不变，user类中需要加入订信息和角色信息</p>\n</blockquote>\n<pre><code class=\"language-java\">package com_mybatis_table.pojo;\n\nimport java.util.Date;\nimport java.util.List;\n\npublic class User {\n\n    private int id;\n    private String username;\n    private String password;\n    private Date birthday;\n\n    //描述的是当前用户存在哪些订单\n    private List&lt;Order&gt; orderList;\n\n    //描述的是当前用户具备哪些角色\n    private List&lt;Role&gt; roleList;\n\n}\n</code></pre>\n<blockquote>\n<br/> Order_User_RoleMapper.xml下\n</blockquote>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"com_mybatis_table.mapper.OrderUserRoleMapper\"&gt;\n\n    &lt;!--***************************--&gt;\n    &lt;!--    配置role映射--&gt;\n    &lt;resultMap id=\"userRoleMap\" type=\"user\"&gt;\n        &lt;!--        封装user的信息--&gt;\n        &lt;id column=\"userId\" property=\"id\"&gt;&lt;/id&gt;\n        &lt;result column=\"username\" property=\"username\"&gt;&lt;/result&gt;\n        &lt;result column=\"password\" property=\"password\"&gt;&lt;/result&gt;\n        &lt;result column=\"birthday\" property=\"birthday\"&gt;&lt;/result&gt;\n\n\n        &lt;!--        封装user内部的roleList信息\n             column为数据库中字段名，property是实体中的名字--&gt;\n\n        &lt;collection property=\"roleList\"  ofType=\"role\"&gt;\n            &lt;id column=\"roleId\" property=\"id\"&gt;&lt;/id&gt;\n            &lt;result column=\"roleName\" property=\"roleName\"&gt;&lt;/result&gt;\n            &lt;result column=\"roleDesc\" property=\"roleDesc\"&gt;&lt;/result&gt;\n        &lt;/collection&gt;\n\n &lt;!--        封装user内部的orderList信息--&gt;\n        &lt;collection property=\"orderList\"  ofType=\"order\"&gt;\n\n            &lt;id column=\"oid\" property=\"id\"&gt;&lt;/id&gt;\n            &lt;result column=\"ordertime\" property=\"ordertime\"&gt;&lt;/result&gt;\n            &lt;result column=\"total\" property=\"total\"&gt;&lt;/result&gt;\n        &lt;/collection&gt;\n    &lt;/resultMap&gt;\n\n\n    &lt;select id=\"findUserAndRoleAndOderAll\" resultMap=\"userRoleMap\"&gt;\n         select *,o.id  oid from user u,sys_user_role sr,sys_role r,orders o\n                where u.id=sr.roleId and sr.roleId=r.id and o.uid=u.id\n    &lt;/select&gt;\n\n\n\n\n\n&lt;/mapper&gt;</code></pre>\n<blockquote>\n<p>sqlMapConfig.xml下加入此mapper的Order_User_RoleMapper.xml文件</p>\n</blockquote>\n<blockquote>\n<p>测试类下</p>\n</blockquote>\n<pre><code class=\"language-java\">    @Test\n    public void findUserAndRoleTest() throws IOException {\n        InputStream resourceAsStream = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n\n        OrderUserRoleMapper mapper = sqlSession.getMapper(OrderUserRoleMapper.class);\n        List&lt;User&gt; userAndRoleAndOderAllList = mapper.findUserAndRoleAndOderAll();\n        for (User user : userAndRoleAndOderAllList) {\n            System.out.println(user);\n        }\n\n\n        sqlSession.close();\n    }\n</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"400\" src=\"image\\658daf94704f491b8ba08a71e0f3cc5d.png\" width=\"1200\"/></p>\n<h1 id=\"%C2%A0Mybatis%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91\"> Mybatis的注解开发</h1>\n<h2 id=\"mybatis%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3\">mybatis的常用注解</h2>\n<p>这几年来注解开发越来越流行，Mybatis也可以使用注解开发方式，这样我们就可以减少编写Mapper映射文件了。我们先围绕一些基本的CRUD来学习，再学习复杂映射多表操作。</p>\n<p><strong>@Insert:实现新增</strong></p>\n<p><strong>@Update:实现更新</strong></p>\n<p><strong>@Delete:实现删除</strong></p>\n<p><strong>@Select:实现查询</strong></p>\n<p><strong>@Result:实现结果集封装</strong></p>\n<p><strong>@Results:可以与@Resuit一起使用，封装多个结果集</strong></p>\n<p><strong>@One:实现一对一结果集封装</strong></p>\n<p><strong>@Many:实现一对多结果集封装</strong></p>\n<h2 id=\"%E6%B3%A8%E8%A7%A3%E5%AE%8C%E6%88%90%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%93%8D%E4%BD%9C\">注解完成增删改查操作</h2>\n<blockquote>\n<p>在UserMapper接口中</p>\n</blockquote>\n<pre><code class=\"language-java\">package com_mybatis_ann.mapper;\n\nimport com_mybatis_ann.pojo.User;\nimport org.apache.ibatis.annotations.Delete;\nimport org.apache.ibatis.annotations.Insert;\nimport org.apache.ibatis.annotations.Select;\nimport org.apache.ibatis.annotations.Update;\n\nimport java.util.List;\n\npublic interface UserMapper {\n    @Insert(\"insert into user values(#{id},#{username},#{password},#{birthday})\")\n    public void insert(User user);\n\n    @Update(\"update user set username=#{username},password=#{password} where id=#{id}\")\n    public void update(User user);\n\n    @Delete(\"delete from user where id=#{id}\")\n    public void delete(int id);\n\n    @Select(\"select * from user where id=#{id}\")\n    public User findById(int id);\n\n    @Select(\"select * from user\")\n    public List&lt;User&gt; findAll();\n}\n</code></pre>\n<blockquote>\n<p>在user类中有</p>\n</blockquote>\n<pre><code class=\"language-java\">package com_mybatis_table.pojo;\n\nimport java.util.Date;\nimport java.util.List;\n\npublic class User {\n\n    private int id;\n    private String username;\n    private String password;\n    private Date birthday;\n//get和set方法和toString方法省略\n  \n\n}\n</code></pre>\n<blockquote>\n<p> sqlMapConfig配置文件中新增</p>\n</blockquote>\n<pre><code class=\"language-XML\">  &lt;mappers&gt;\n        &lt;package name=\"com_mybatis_ann.mapper\"&gt;&lt;/package&gt;\n    &lt;/mappers&gt;\n</code></pre>\n<p>测试下</p>\n<h3 id=\"%E6%96%B0%E5%A2%9E%E6%93%8D%E4%BD%9C\">新增操作</h3>\n<pre><code class=\"language-java\">public class MybatisTest {\n    private UserMapper mapper;\n\n//    提前运行，抽取出来\n    @Before\n    public void before() throws IOException {\n        InputStream resourceAsStream = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);\n        SqlSession sqlSession = sqlSessionFactory.openSession(true);\n        mapper = sqlSession.getMapper(UserMapper.class);\n    }\n\n\n    @Test\n    public void testInsert(){\n        User user = new User();\n        user.setUsername(\"tom\");\n        user.setPassword(\"abc\");\n        mapper.insert(user);\n    }\n}\n</code></pre>\n<h3 id=\"%E4%BF%AE%E6%94%B9%E6%93%8D%E4%BD%9C\">修改操作</h3>\n<pre><code class=\"language-java\">    @Test\n    public void testUpdate(){\n        User user = new User();\n        user.setId(2);\n        user.setUsername(\"lucy\");\n        user.setPassword(\"123\");\n        mapper.update(user);\n    }\n</code></pre>\n<h3 id=\"%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C\">删除操作</h3>\n<pre><code class=\"language-java\">    @Test\n    public void testDelete(){\n        mapper.delete(2);\n    }</code></pre>\n<h3>查询操作</h3>\n<pre><code class=\"language-java\">   @Test\n    public void testFindById(){\n        User user = mapper.findById(3);\n        System.out.println(user);\n    }</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\c29d52f802394a9a8144f07f8162d062.png\" width=\"987\"/></p>\n<p></p>\n<p></p>\n<h3 id=\"%E6%9F%A5%E8%AF%A2%E5%85%A8%E9%83%A8%E6%93%8D%E4%BD%9C\">查询全部操作</h3>\n<pre><code class=\"language-java\">  @Test\n    public void testFindAll(){\n        List&lt;User&gt; all = mapper.findAll();\n        for (User user : all) {\n            System.out.println(user);\n        }\n    }</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"230\" src=\"image\\1d8d16b80f28413ab69e962b5da432db.png\" width=\"810\"/></p>\n<h1 id=\"%C2%A0Mybatis%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E5%A4%8D%E6%9D%82%E6%98%A0%E5%B0%84%E5%BC%80%E5%8F%91\"> Mybatis的注解实现复杂映射开发</h1>\n<p>实现复杂关系映射之前哦我们可以在映射文件中通过配置&lt;resultMap&gt;来实现，使用注解来发后，我们可以使用@Results注解，@Result注解，@Many注解组合完成复杂关系的</p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\0835dca387a94abe99e7593fbd2581b5.png\" width=\"875\"/></p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"image\\1d6e1dd54e3942ba8cb13f43b369ff52.png\" width=\"716\"/></p>\n<p></p>\n<h2 id=\"%C2%A0%E4%B8%80%E5%AF%B9%E4%B8%80%E6%B3%A8%E8%A7%A3%E6%9F%A5%E8%AF%A2\"> 一对一注解查询</h2>\n<h3 id=\"%E6%9F%A5%E8%AF%A2%E7%94%A8%E6%88%B7%E6%97%B6%E4%B9%9F%E6%9F%A5%E8%AF%A2%E5%87%BA%E8%AE%A2%E5%8D%95%E4%BF%A1%E6%81%AF\">查询用户时也查询出订单信息</h3>\n<blockquote>\n<p>order类下</p>\n</blockquote>\n<pre><code class=\"language-java\">public class Order {\n\n    private int id;\n    private Date ordertime;\n    private double total;\n\n    //当前订单属于哪一个用户\n    private User user;\n\n//get和set、toString方式省略\n}</code></pre>\n<blockquote>\n<p>User类下 </p>\n</blockquote>\n<pre><code class=\"language-java\">public class User {\n    private int id;\n    private String username;\n    private String password;\n    private Date birthday;\n//get和set、toString方式省略\n}</code></pre>\n<blockquote>\n<p>OrderMapper接口下</p>\n</blockquote>\n<pre><code class=\"language-java\">public interface OrderMapper {\n    @Select(\"select *,o.id oid from orders o,user u where o.uid=u.id\")\n  //配置user的信息\n    @Results({\n            @Result(column = \"oid\",property = \"id\"),\n            @Result(column = \"ordertime\",property = \"ordertime\"),\n            @Result(column = \"total\",property = \"total\"),\n            @Result(column = \"uid\",property = \"user.id\"),\n            @Result(column = \"username\",property = \"user.username\"),\n            @Result(column = \"password\",property = \"user.password\")\n    })\npublic List&lt;Order&gt; findAll();\n}\n</code></pre>\n<blockquote>\n<p> 测试类下</p>\n</blockquote>\n<pre><code class=\"language-java\">\n\npublic class MybatisTest2 {\n\nprivate OrderMapper oMapper;\n//    提前运行，抽取出来\n    @Before\n    public void before() throws IOException {\n        InputStream resourceAsStream = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);\n        SqlSession sqlSession = sqlSessionFactory.openSession(true);\n\n       oMapper = sqlSession.getMapper(OrderMapper.class);\n    }\n\n    @Test\n    public void testAll(){\n        List&lt;Order&gt; all = oMapper.findAll();\n        for (Order order : all) {\n            System.out.println(order);\n        }\n\n    }\n}\n</code></pre>\n<blockquote>\n<p>运行结果 </p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\0c904636dd0b421ca75afbc00b48ceb1.png\" width=\"1200\"/></p>\n<h3 id=\"%C2%A0%E5%8F%A6%E4%B8%80%E7%A7%8D%EF%BC%8C%E5%88%86%E4%B8%A4%E6%AC%A1%E6%9F%A5%E8%AF%A2\"> 另一种，分两次查询</h3>\n<p>以下这种格式</p>\n<pre><code class=\"language-bash\"> select *from orders\n  select *from user where id=?</code></pre>\n<p>orderMapper接口中 </p>\n<pre><code class=\"language-java\">\npublic interface OrderMapper {\n   @Select(\"select * from orders\")\n   @Results({\n           @Result(column = \"id\",property = \"id\"),\n           @Result(column = \"ordertime\",property = \"ordertime\"),\n           @Result(column = \"total\",property = \"total\"),\n           @Result(\n                   property = \"user\", //要封装的属性名称\n                   column = \"uid\", //根据那个字段去查询user表的数据\n                   javaType = User.class, //要封装的实体类型\n                   //select属性 代表查询那个接口的方法获得数据\n                   one = @One(select = \"com_mybatis_ann.mapper.UserMapper.findById\")//这个是UserMapper接口中的方法根据id查询\n           )\n   })\npublic List&lt;Order&gt; findAll();\n}\n</code></pre>\n<blockquote>\n<p>运行结果也是一致的</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\bd2355e34fdc4fccbc796a7f9e19bda5.png\" width=\"1200\"/></p>\n<h2 id=\"%C2%A0%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%B3%A8%E8%A7%A3%E6%9F%A5%E8%AF%A2\"> 一对多注解查询</h2>\n<p>用户表和订单表的关系为，一个用户有多个订单，一个订单只属于一个用户</p>\n<p>一对多查询的需求：查询一个用户，与此同时查询出该用户具有的订单</p>\n<p class=\"img-center\"><img alt=\"\" height=\"150\" src=\"image\\09c876aa39224ff2aea84902ba8761b1.png\" width=\"546\"/></p>\n<p></p>\n<blockquote>\n<p>在userMapper接口下</p>\n</blockquote>\n<pre><code class=\"language-java\">\n    @Select(\"select *from user\")\n//给user封数据\n    @Results({\n            @Result(column = \"id\",property = \"id\"),\n            @Result(column = \"username\",property = \"username\"),\n            @Result(column = \"password\",property = \"password\"),\n//给order封数据\n            @Result(\n                    property = \"orderList\",\n                    column = \"id\",\n                    javaType = List.class,\n                    //写对方的根据id查询的方法(先在orderMapper中写一个根据id查询的方法)\n                    many = @Many(select = \"com_mybatis_ann.mapper.OrderMapper.findById\")\n            )\n    })\n    public List&lt;User&gt; findUserAndOrderAll();</code></pre>\n<blockquote>\n<p>orderMapper加上</p>\n</blockquote>\n<pre><code class=\"language-java\">\n   @Select(\"select *from orders where uid=#{uid}\")\npublic List&lt;Order&gt; findById(int id);</code></pre>\n<blockquote>\n<p>user实体类中加上order实体类的信息</p>\n</blockquote>\n<pre><code class=\"language-java\">public class User {\n    private int id;\n    private String username;\n    private String password;\n    private Date birthday;\nprivate List&lt;Order&gt; orderList;\n}</code></pre>\n<blockquote>\n<p> test包下测试</p>\n</blockquote>\n<pre><code class=\"language-java\">public class MybatisTest {\n    private UserMapper mapper;\n\n//    提前运行，抽取出来\n    @Before\n    public void before() throws IOException {\n        InputStream resourceAsStream = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);\n        SqlSession sqlSession = sqlSessionFactory.openSession(true);\n        mapper = sqlSession.getMapper(UserMapper.class);\n    }\n\n    @Test\n    public void testById(){\n        List&lt;User&gt; userAndOrderAll = mapper.findUserAndOrderAll();\n        for (User user : userAndOrderAll) {\n            System.out.println(user);\n        }\n\n    }\n}</code></pre>\n<blockquote>\n<p>运行结果 </p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\4e96910f47584cafba171ca5b6f62707.png\" width=\"1060\"/></p>\n<h2>多对多查询</h2>\n<p>用户表和角色表的关系为,一个用户有多个角色，一个角色被多个用户使用</p>\n<p>多对多查询的需求：查询用户同时查询出该用户的所有角色</p>\n<p class=\"img-center\"><img alt=\"\" height=\"150\" src=\"image\\b751df51f81542088628c4c033bdf621.png\" width=\"543\"/></p>\n<blockquote>\n<p> 新建一个Role实体类</p>\n</blockquote>\n<pre><code class=\"language-java\">public class Role {\n\n    private int id;\n    private String roleName;\n    private String roleDesc;\n//get、set、toString省略\n\n}</code></pre>\n<blockquote>\n<p>User实体类下</p>\n</blockquote>\n<pre><code class=\"language-java\">public class User {\n    private int id;\n    private String username;\n    private String password;\n    private Date birthday;\nprivate List&lt;Role&gt; roleList;\n//get、set、toString省略\n}</code></pre>\n<blockquote>\n<p>UserMapper接口下</p>\n</blockquote>\n<pre><code class=\"language-java\">    @Select(\"Select *from user\")\n    @Results({\n            @Result(column = \"id\",property = \"id\"),\n            @Result(column = \"username\",property = \"username\"),\n            @Result(column = \"password\" ,property = \"password\"),\n            @Result(\n                    property = \"roleList\",\n                    column = \"id\",\n                    javaType = List.class,//对次方法的全限定名\n                    many = @Many(select =\"com_mybatis_ann.mapper.RoleMapper.findByUid\" )\n            )\n    })\n    public List&lt;User&gt; findUserAndRoleAll();</code></pre>\n<blockquote>\n<p> RoleMapper接口下</p>\n</blockquote>\n<pre><code class=\"language-java\">public interface RoleMapper {\n@Select(\"select *from sys_user_role ur,sys_role r where ur.roleId=r.id and ur.userId=#{uid}\")\n   public List&lt;Role&gt; findByUid(int uid);\n}</code></pre>\n<blockquote>\n<p> test类下的测试下</p>\n</blockquote>\n<pre><code class=\"language-java\">public class MybatisTest2 {\n\nprivate OrderMapper oMapper;\n\n\n    @Test\n    public void testAll(){\n        List&lt;Order&gt; all = oMapper.findAll();\n        for (Order order : all) {\n            System.out.println(order);\n        }\n\n    \n}</code></pre>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\045894f5b9014f70858c71ac080ef5de.png\" width=\"1147\"/></p>\n<p></p>\n<p></p>\n<h1 id=\"SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88\">SSM框架整合</h1>\n<h2 id=\"%E5%8E%9F%E5%A7%8B%E6%95%B4%E5%90%88%E6%96%B9%E5%BC%8F\">原始整合方式</h2>\n<h3 id=\"%E2%91%A0%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93\">①创建数据库</h3>\n<p><img alt=\"\" height=\"300\" src=\"image\\5857319006224a09927e9fe549524f63.png\" width=\"395\"/>【】</p>\n<h3 id=\"%C2%A0%E2%91%A1%E5%88%9B%E5%BB%BAmaven%E5%B7%A5%E7%A8%8B\"> ②创建maven工程</h3>\n<p><img alt=\"\" height=\"332\" src=\"image\\67eec44163a64860b84b99332fea03a8.png\" width=\"268\"/></p>\n<h3 id=\"%E2%91%A2%E5%8F%81%E5%AF%BC%E5%85%A5maven%E5%AF%B9%E5%BA%94%E5%9D%90%E6%A0%87\">③叁导入maven对应坐标</h3>\n<p> <img alt=\"\" height=\"461\" src=\"image\\641d234c505d4c44b79c932e3d3df5b1.png\" width=\"342\"/></p>\n<h3 id=\"%E2%91%A3%E7%BC%96%E5%86%99%E5%AE%9E%E4%BD%93%E7%B1%BB\">④编写实体类</h3>\n<p><img alt=\"\" height=\"149\" src=\"image\\6ad585595c404c0c9b0ded36b74ae034.png\" width=\"302\"/></p>\n<h3 id=\"%C2%A0%E2%91%A4%E7%BC%96%E5%86%99Mapper%E6%8E%A5%E5%8F%A3%EF%BC%88dao%E6%8E%A5%E5%8F%A3%EF%BC%89\"> ⑤编写Mapper接口（dao接口）</h3>\n<p><img alt=\"\" height=\"152\" src=\"image\\4eb7bf96308c4d39b8295fee8ab07919.png\" width=\"328\"/></p>\n<h3 id=\"%C2%A0%E2%91%A5%E7%BC%96%E5%86%99service%E6%8E%A5%E5%8F%A3\"> ⑥编写service接口</h3>\n<h3 id=\"%C2%A0%E2%80%8B%E7%BC%96%E8%BE%91\"> <img alt=\"\" height=\"109\" src=\"image\\fd135361f268470d842ac24143069d9b.png\" width=\"382\"/></h3>\n<h3 id=\"%C2%A0%E2%91%A6%E7%BC%96%E5%86%99Service%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0\"> ⑦编写Service接口实现</h3>\n<p><img alt=\"\" height=\"300\" src=\"image\\ff6415457f4d4b92890416bec44873e8.png\" width=\"620\"/></p>\n<h3 id=\"%C2%A0%E2%91%A7%E7%BC%96%E5%86%99Controller\"> ⑧编写Controller</h3>\n<p><img alt=\"\" height=\"300\" src=\"image\\c8b1415cfff4470091a111204dac4f99.png\" width=\"459\"/></p>\n<h3 id=\"%C2%A0%E2%91%A8%E7%BC%96%E5%86%99jsp%E6%B7%BB%E5%8A%A0%E9%A1%B5%E9%9D%A2\"> ⑨编写jsp添加页面</h3>\n<p><img alt=\"\" height=\"300\" src=\"image\\69d6fc0aaf424121a2242ad8615539e6.png\" width=\"575\"/></p>\n<h3 id=\"%C2%A0%E2%91%A9%E7%BC%96%E5%86%99%E5%88%97%E8%A1%A8jsp%E5%B1%95%E7%A4%BA%E9%A1%B5%E9%9D%A2\"> ⑩编写列表jsp展示页面</h3>\n<p><img alt=\"\" height=\"300\" src=\"image\\10f463c857544673b0363407d3a9ac86.png\" width=\"444\"/></p>\n<h3 id=\"%E2%91%A0%E2%91%A0%E7%BC%96%E5%86%99%E5%93%8D%E5%BA%94%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">①①编写响应的配置文件</h3>\n<p><img alt=\"\" height=\"180\" src=\"image\\7c068ef3555c4a4ea53cd20ff272b273.png\" width=\"321\"/></p>\n<h3 id=\"%E2%91%A0%E2%91%A1%E6%B5%8B%E8%AF%95%E6%B7%BB%E5%8A%A0%E8%B4%A6%E6%88%B7\">①②测试添加账户</h3>\n<p><img alt=\"\" height=\"169\" src=\"image\\d4321524e1884fcb8cd381d462af9357.png\" width=\"668\"/></p>\n<h3 id=\"%E2%91%A0%E2%91%A2%E6%B5%8B%E8%AF%95%E8%B4%A6%E6%88%B7%E5%88%97%E8%A1%A8\">①③测试账户列表</h3>\n<p><img alt=\"\" height=\"300\" src=\"image\\a4bf362aaf964cdc887e58c84d1b011f.png\" width=\"595\"/></p>\n<h2></h2>\n<h1 id=\"SSM%E6%95%B4%E5%90%88%E6%B5%8B%E8%AF%95\">SSM整合测试</h1>\n<h2>①创建数据库</h2>\n<p><img alt=\"\" height=\"86\" src=\"image\\5292693f923045a8bb2cfcc5bbf71a54.png\" width=\"279\"/></p>\n<p></p>\n<blockquote>\n<h2 id=\"%E2%91%A1%E5%88%9B%E5%BB%BAmaven%E5%B7%A5%E7%A8%8B\">②创建maven工程</h2>\n</blockquote>\n<p><img alt=\"\" height=\"677\" src=\"image\\392fd510cfc24501935d2fb6c582eb95.png\" width=\"378\"/></p>\n<blockquote>\n<h2 id=\"%C2%A0%E2%91%A2pom.xml%E4%B8%AD%E5%AF%BC%E5%85%A5%E5%AF%B9%E5%BA%94%E7%9A%84%E5%9D%90%E6%A0%87\"> ③pom.xml中导入对应的坐标</h2>\n</blockquote>\n<pre><code class=\"language-XML\">  &lt;dependencies&gt;\n&lt;!--    在pojo实体类对象中可以使用注解，省去getset方式和构造方法--&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n      &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n      &lt;version&gt;1.18.24&lt;/version&gt;\n    &lt;/dependency&gt;\n\n\n    &lt;!--spring相关--&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.aspectj&lt;/groupId&gt;\n      &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;\n      &lt;version&gt;1.8.7&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;\n      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;\n      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;\n      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!--servlet和jsp--&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\n      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;\n      &lt;version&gt;2.5&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;\n      &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;\n      &lt;version&gt;2.0&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!--mybatis相关--&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;\n      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;\n      &lt;version&gt;3.4.5&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;\n      &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;\n      &lt;version&gt;1.3.1&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;mysql&lt;/groupId&gt;\n      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n      &lt;version&gt;5.1.6&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;c3p0&lt;/groupId&gt;\n      &lt;artifactId&gt;c3p0&lt;/artifactId&gt;\n      &lt;version&gt;0.9.1.2&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n      &lt;groupId&gt;junit&lt;/groupId&gt;\n      &lt;artifactId&gt;junit&lt;/artifactId&gt;\n      &lt;version&gt;4.12&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;jstl&lt;/groupId&gt;\n      &lt;artifactId&gt;jstl&lt;/artifactId&gt;\n      &lt;version&gt;1.2&lt;/version&gt;\n    &lt;/dependency&gt;\n\n  &lt;/dependencies&gt;</code></pre>\n<h2>④编写实体类</h2>\n<pre><code class=\"language-java\">import lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n@ToString//toString方法\n@Data//除了有参构造都有了\n@AllArgsConstructor//有参\n@NoArgsConstructor//无参\npublic class Account {\n\n    private Integer id;\n    private String name;\n    private Double money;\n\n}\n/*\n\n&lt;!--    在pojo实体类对象中可以使用注解，省去getset方式和构造方法--&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n      &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n      &lt;version&gt;1.18.24&lt;/version&gt;\n    &lt;/dependency&gt;\n\n\n*/</code></pre>\n<h2 id=\"%E2%91%A4%E7%BC%96%E5%86%99Mapper%E6%8E%A5%E5%8F%A3%EF%BC%88dao%E6%8E%A5%E5%8F%A3%EF%BC%89\">⑤编写Mapper接口（dao接口）</h2>\n<pre><code class=\"language-java\">\npublic interface AccountMapper {\n   @Insert(\" insert into account values(#{id},#{name},#{money})\")\n    public void save(Account account);\n\n@Select(\" select * from account\")\n    public List&lt;Account&gt; findAll();\n\n}\n</code></pre>\n<h2> ⑥编写service接口</h2>\n<pre><code class=\"language-java\">\n\npublic interface AccountService {\n\n    public void save(Account account);\n\n    public List&lt;Account&gt; findAll();\n\n}\n</code></pre>\n<h2> ⑦编写Service接口实现</h2>\n<pre><code class=\"language-java\">\n\n@Service(\"accountService\")\npublic class AccountServiceImpl implements AccountService {\n\n    @Autowired\n    private AccountMapper accountMapper;\n\n    @Override\n    public void save(Account account) {\n        accountMapper.save(account);\n    }\n\n    @Override\n    public List&lt;Account&gt; findAll() {\n        return accountMapper.findAll();\n    }\n}\n</code></pre>\n<h2> ⑧编写Controller</h2>\n<pre><code class=\"language-java\">\n\n@Controller\n@RequestMapping(\"/account\")\npublic class AccountController {\n\n    @Autowired\n    private AccountService accountService;\n\n    //保存\n    @RequestMapping(value = \"/save\",produces = \"text/html;charset=UTF-8\")\n@ResponseBody\n    public String save(Account account){\n        accountService.save(account);\n        return  \"提交成功\";\n    }\n\n    //查询\n    @RequestMapping(\"/findAll\")\n    public ModelAndView findAll(){\n        List&lt;Account&gt; accountList =  accountService.findAll();\n        ModelAndView modelAndView = new ModelAndView();\n        modelAndView.addObject(\"accountList\",accountList);\n        modelAndView.setViewName(\"accountList\");\n        return modelAndView;\n    }\n\n}\n</code></pre>\n<h2> ⑨编写jsp添加页面</h2>\n<pre><code class=\"language-html\">&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;添加账户信息表单&lt;/h1&gt;\n    &lt;form name=\"accountForm\" action=\"${pageContext.request.contextPath}/account/save\" method=\"post\"&gt;\n        账户名称:&lt;input type=\"text\" name=\"name\"&gt;&lt;br&gt;\n        账户金额:&lt;input type=\"text\" name=\"money\"&gt;&lt;br&gt;\n        &lt;input type=\"submit\" value=\"保存\"&gt;&lt;br&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2> ⑩编写列表jsp展示页面</h2>\n<pre><code class=\"language-html\">&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;\n&lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;展示账户数据列表&lt;/h1&gt;\n    &lt;table border=\"1\"&gt;\n        &lt;tr&gt;\n            &lt;th&gt;账户id&lt;/th&gt;\n            &lt;th&gt;账户名称&lt;/th&gt;\n            &lt;th&gt;账户金额&lt;/th&gt;\n        &lt;/tr&gt;\n\n        &lt;c:forEach items=\"${accountList}\" var=\"account\"&gt;\n            &lt;tr&gt;\n                &lt;td&gt;${account.id}&lt;/td&gt;\n                &lt;td&gt;${account.name}&lt;/td&gt;\n                &lt;td&gt;${account.money}&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/c:forEach&gt;\n\n    &lt;/table&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2>①①编写响应的配置文件</h2>\n<h3 id=\"applicationContext.xml\">applicationContext.xml</h3>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\nhttp://www.springframework.org/schema/beans/spring-beans.xsd\nhttp://www.springframework.org/schema/tx\nhttp://www.springframework.org/schema/tx/spring-tx.xsd\nhttp://www.springframework.org/schema/aop\nhttp://www.springframework.org/schema/aop/spring-aop.xsd\nhttp://www.springframework.org/schema/context\nhttp://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;!--组件扫描 扫描service和mapper--&gt;\n    &lt;context:component-scan base-package=\"com\"&gt;\n        &lt;!--排除controller的扫描--&gt;\n        &lt;context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\"&gt;&lt;/context:exclude-filter&gt;\n    &lt;/context:component-scan&gt;\n\n    &lt;!--加载properties文件--&gt;\n    &lt;context:property-placeholder location=\"classpath:jdbc.properties\"/&gt;\n\n    &lt;!--配置数据源信息--&gt;\n    &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt;\n        &lt;property name=\"driverClass\" value=\"${jdbc.driver}\"&gt;&lt;/property&gt;\n        &lt;property name=\"jdbcUrl\" value=\"${jdbc.url}\"&gt;&lt;/property&gt;\n        &lt;property name=\"user\" value=\"${jdbc.username}\"&gt;&lt;/property&gt;\n        &lt;property name=\"password\" value=\"${jdbc.password}\"&gt;&lt;/property&gt;\n    &lt;/bean&gt;\n\n    &lt;!--配置sessionFactory--&gt;\n    &lt;bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\"&gt;\n        &lt;property name=\"dataSource\" ref=\"dataSource\"&gt;&lt;/property&gt;\n        &lt;!--加载mybatis核心文件--&gt;\n        &lt;property name=\"configLocation\" value=\"classpath:sqlMapConfig-spring.xml\"&gt;&lt;/property&gt;\n    &lt;/bean&gt;\n\n    &lt;!--扫描mapper所在的包 为mapper创建实现类--&gt;\n    &lt;bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\"&gt;\n        &lt;property name=\"basePackage\" value=\"com.mapper\"&gt;&lt;/property&gt;\n    &lt;/bean&gt;\n\n\n    &lt;!--声明式事务控制--&gt;\n    &lt;!--平台事务管理器--&gt;\n    &lt;bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt;\n        &lt;property name=\"dataSource\" ref=\"dataSource\"&gt;&lt;/property&gt;\n    &lt;/bean&gt;\n\n    &lt;!--配置事务增强--&gt;\n    &lt;tx:advice id=\"txAdvice\"&gt;\n        &lt;tx:attributes&gt;\n            &lt;tx:method name=\"*\"/&gt;\n        &lt;/tx:attributes&gt;\n    &lt;/tx:advice&gt;\n\n    &lt;!--事务的aop织入--&gt;\n    &lt;aop:config&gt;\n        &lt;aop:advisor advice-ref=\"txAdvice\" pointcut=\"execution(* com.service.impl.*.*(..))\"&gt;&lt;/aop:advisor&gt;\n    &lt;/aop:config&gt;\n\n&lt;/beans&gt;</code></pre>\n<h3 id=\"jdbc.properties\">jdbc.properties</h3>\n<pre><code class=\"language-bash\">jdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/ssm\njdbc.username=root\njdbc.password=123456</code></pre>\n<h3 id=\"spring-mvc.xml\"><br/> spring-mvc.xml</h3>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\nhttp://www.springframework.org/schema/beans/spring-beans.xsd\nhttp://www.springframework.org/schema/mvc\nhttp://www.springframework.org/schema/mvc/spring-mvc.xsd\nhttp://www.springframework.org/schema/context\nhttp://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;!--组件扫描  主要扫描controller--&gt;\n    &lt;context:component-scan base-package=\"com.controller\"/&gt;\n    &lt;!--配置mvc注解驱动--&gt;\n    &lt;mvc:annotation-driven/&gt;\n&lt;!--    内部资源视图解析器--&gt;\n    &lt;bean id=\"resourceViewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;\n        &lt;property name=\"prefix\" value=\"/WEB-INF/pages/\"/&gt;\n        &lt;property name=\"suffix\" value=\".jsp\"/&gt;\n    &lt;/bean&gt;\n    &lt;!--开发静态资源访问权限--&gt;\n    &lt;mvc:default-servlet-handler/&gt;\n\n\n&lt;/beans&gt;</code></pre>\n<h3 id=\"sqlMapConfig.xml\"><br/> sqlMapConfig.xml</h3>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;\n&lt;configuration&gt;\n\n    &lt;!--加载properties文件--&gt;\n    &lt;properties resource=\"jdbc.properties\"&gt;&lt;/properties&gt;\n\n\n\n    &lt;!--环境--&gt;\n    &lt;environments default=\"development\"&gt;\n        &lt;environment id=\"development\"&gt;\n            &lt;transactionManager type=\"JDBC\"&gt;&lt;/transactionManager&gt;\n            &lt;dataSource type=\"POOLED\"&gt;\n                &lt;property name=\"driver\" value=\"${jdbc.driver}\"&gt;&lt;/property&gt;\n                &lt;property name=\"url\" value=\"${jdbc.url}\"&gt;&lt;/property&gt;\n                &lt;property name=\"username\" value=\"${jdbc.username}\"&gt;&lt;/property&gt;\n                &lt;property name=\"password\" value=\"${jdbc.password}\"&gt;&lt;/property&gt;\n            &lt;/dataSource&gt;\n        &lt;/environment&gt;\n    &lt;/environments&gt;\n\n    &lt;!--加载映射--&gt;\n    &lt;mappers&gt;\n\n        &lt;package name=\"com.mapper\"&gt;&lt;/package&gt;\n    &lt;/mappers&gt;\n\n\n&lt;/configuration&gt;</code></pre>\n<h3 id=\"sqlMapConfig-spring.xml\"><br/> sqlMapConfig-spring.xml</h3>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;\n&lt;configuration&gt;\n\n    &lt;!--定义别名--&gt;\n    &lt;typeAliases&gt;\n        &lt;!--&lt;typeAlias type=\"com.domain.Account\" alias=\"account\"&gt;&lt;/typeAlias&gt;--&gt;\n        &lt;package name=\"com.domain\"&gt;&lt;/package&gt;\n    &lt;/typeAliases&gt;\n\n&lt;/configuration&gt;</code></pre>\n<h3 id=\"web.xml\">web.xml</h3>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xmlns=\"http://java.sun.com/xml/ns/javaee\"\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" id=\"WebApp_ID\" version=\"2.5\"&gt;\n\n  &lt;!--spring 监听器--&gt;\n  &lt;context-param&gt;\n    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;\n  &lt;/context-param&gt;\n  &lt;listener&gt;\n    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n  &lt;/listener&gt;\n\n  &lt;!--springmvc的前端控制器--&gt;\n  &lt;servlet&gt;\n    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n    &lt;init-param&gt;\n      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n      &lt;param-value&gt;classpath:spring-mvc.xml&lt;/param-value&gt;\n    &lt;/init-param&gt;\n    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n  &lt;/servlet&gt;\n  &lt;servlet-mapping&gt;\n    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;\n    &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n  &lt;/servlet-mapping&gt;\n\n  &lt;!--乱码过滤器--&gt;\n  &lt;filter&gt;\n    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;\n    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;\n    &lt;init-param&gt;\n      &lt;param-name&gt;encoding&lt;/param-name&gt;\n      &lt;param-value&gt;UTF-8&lt;/param-value&gt;\n    &lt;/init-param&gt;\n  &lt;/filter&gt;\n  &lt;filter-mapping&gt;\n    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;\n    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  &lt;/filter-mapping&gt;\n\n&lt;/web-app&gt;\n</code></pre>\n<h3></h3>\n<h2 id=\"%E2%91%A0%E2%91%A1%E6%B5%8B%E8%AF%95%E6%B7%BB%E5%8A%A0%E8%B4%A6%E6%88%B7%E5%92%8C%E8%B4%A6%E6%88%B7%E5%88%97%E8%A1%A8\">①②测试添加账户和账户列表</h2>\n<p><img alt=\"\" height=\"241\" src=\"image\\d5673fde4e1a4f60b0a31b2ef10d43f0.png\" width=\"676\"/></p>\n<h2 id=\"%E2%91%A0%E2%91%A2%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E6%B5%8B%E8%AF%95\">①③数据库中测试</h2>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"image\\e91d57a5096c42b1954a669a3321d4a9.png\" width=\"336\"/></p>\n<p></p>\n</div>\n</div>"}