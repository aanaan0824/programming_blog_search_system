{"blogid": "126577794", "writerAge": "码龄3年", "writerBlogNum": "103", "writerCollect": "2886", "writerComment": "271", "writerFan": "523", "writerGrade": "5级", "writerIntegral": "2749", "writerName": "可乐有点好喝", "writerProfileAdress": "writer_image\\profile_126577794.jpg", "writerRankTotal": "6736", "writerRankWeekly": "7294", "writerThumb": "531", "writerVisitNum": "226059", "blog_read_count": "393", "blog_time": "已于 2022-08-29 16:34:13 修改", "blog_title": "基于 FPGA 使用 SPI 协议控制 FLASH(M25P16) 进行数据读写操作", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#M25P16_2\">一、M25P16</a></li><li><a href=\"#_27\">二、源码</a></li><li><ul><li><a href=\"#21__28\">2.1 顶层模块</a></li><li><a href=\"#22__92\">2.2 按键模块</a></li><li><a href=\"#23_SPI__186\">2.3 SPI 模块</a></li><li><a href=\"#24__569\">2.4 数码管模块</a></li></ul>\n</li><li><a href=\"#_656\">三、仿真模块</a></li><li><a href=\"#_734\">四、管脚配置</a></li><li><a href=\"#_760\">五、验证结果</a></li></ul>\n</div>\n<p></p>\n<blockquote>\n<p><font color=\"#ff0000\">本文内容：</font>基于 SPI 协议控制开发板上的 FLASH 进行数据读写操作</p>\n</blockquote>\n<h1><a id=\"M25P16_2\"></a>一、M25P16</h1>\n<ul><li>查看开发板原理图，可以知道 FLASH 使用的是 M25P16 芯片，存储总容量 16 Mbit，采用串行方式传输数据<br/> <img alt=\"在这里插入图片描述\" src=\"image\\719eec607b664bbfbdbaaf175ad10e06.png\"/></li><li>找一篇 M25P16 的手册，参照手册上面进行编程<br/> <img alt=\"在这里插入图片描述\" src=\"image\\23f319a0d7694880a1338020066f7c41.png\"/></li><li>芯片对应的管脚，其中 W（写保护）、HOLD（保持）用不着，可以忽略掉，其它的管脚后面会讲<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2f1e2d353a4840a1a2b663408819699b.png\"/></li><li>根据 CPOL 和 CPHA 的取值不同，共有四种 SPI 传输模式，这里用的模式 3，也就是时钟 C 空闲状态高电平，在时钟 C 的上升沿对 D / Q 进行数据采样<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7a2bdd4d57d14c01a5d086c10e7a20e1.png\"/></li><li>存储容量，共 32 个扇区，每个扇区 256 页，每页 256 个字节<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3de743dc03ec409fb35f6d2745b61895.png\"/></li><li>这里只需要用到 WREN、READ、PP、SE 指令即可，进行基本的读写操作，其它指令可以自行拓展<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e9753947e69a4a0c873dd6c42bbf79ab.png\"/></li><li>写指令，片选 S 拉低，表示数据传输阶段，拉高表示空闲状态，C 表示系统时钟，D 表示主机发送数据，FLASH 接收数据，Q 表示 FLASH 发送数据，主机接收数据</li><li>写指令只需要发送一个 8’h06 给 FLASH 即可，FLASH 会在时钟的上升沿进行采样<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c8c80bb522ce4f8395e4d56884cf4880.png\"/></li><li>SE 指令（扇区擦除），发送一个 8’hd8 然后跟上 3byte 的地址，指定一个扇区进行擦除，即使指定了页地址或者字地址，它只认扇区地址，因为扇区擦除嘛，擦除的是一个扇区，也就是将一个扇区的数据变为 8’hff</li><li><font color=\"#ff0000\">注意！！</font>发送 SE 指令之前，必须先发送一个 WREN 指令，然后片选 S 拉高至少 <font color=\"#ff0000\">100ns</font> ，然后再拉低片选 S ，再发送 SE 指令，SE 与 3 byte 地址之间不需要拉低 100ns，发送完后，S 拉高，需要给 FLASH 1s 左右的时间让它进行扇区擦除<br/> <img alt=\"在这里插入图片描述\" src=\"image\\89db466dc5384eeba7da21e0673f97bf.png\"/></li><li>PP 指令，发送一个 byte 的指令，然后发送 3byte 的字节，再跟上一个 byte 的数据，就把 S 拉高，这就往这个地址里面写入了一个 byte 的数据</li><li><font color=\"#ff0000\">注意！！</font>发送 PP 指令之前，必须先发送一个 WREN 指令，然后片选 S 拉高至少 <font color=\"#ff0000\">100ns</font> ，然后再拉低片选 S ，再发送 PP 指令，PP 与 3 byte 地址之间不需要拉低 100ns，发送完后，S 拉高，同时需要给 FLASH 1.4ms 左右的时间让它写数据<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4ca8202103ba4dfab47190a0c31c1311.png\"/></li><li>读指令，发送一个读指令，然后跟上一个 3byte 的地址，然后等待 Q 传输 1byte 的数据即可，再把 S 片选拉高即可，如果不拉高，它 Q 就会一直发数据<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c2ddcb0dfd4b4c47a34a5c16cecf35a1.png\"/></li><li>其它指令就不讲了，没用到，如果不理解的话，多看图，看着看着就明白了</li></ul>\n<h1><a id=\"_27\"></a>二、源码</h1>\n<h2><a id=\"21__28\"></a>2.1 顶层模块</h2>\n<p>SPI_top.v</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">/*========================================*\\\n    filename        : SPI_top.v\n    description     : SPI顶层模块\n    up file         : \n    reversion       : \n        v1.0 : 2022-8-25 19:09:45\n    author          : 张某某\n\\*========================================*/</span>\n\nmodule <span class=\"token function\">SPI_top</span> <span class=\"token punctuation\">(</span>\n    input                               clk             <span class=\"token punctuation\">,</span>\n    input                               rst_n           <span class=\"token punctuation\">,</span>\n    input           <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              key_in          <span class=\"token punctuation\">,</span>\n    input                               <span class=\"token constant\">MISO</span>            <span class=\"token punctuation\">,</span>\n\n    output                              <span class=\"token constant\">SCK</span>             <span class=\"token punctuation\">,</span>\n    output                              <span class=\"token constant\">CS</span>              <span class=\"token punctuation\">,</span>\n    output                              <span class=\"token constant\">MOSI</span>            <span class=\"token punctuation\">,</span>\n    output          <span class=\"token punctuation\">[</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              <span class=\"token constant\">SEL</span>             <span class=\"token punctuation\">,</span>\n    output          <span class=\"token punctuation\">[</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              <span class=\"token constant\">DIG</span>             \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Parameter definition</span>\n    \n\n<span class=\"token comment\">// Signal definition</span>\n    wire            <span class=\"token punctuation\">[</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              data            <span class=\"token punctuation\">;</span>\n    wire            <span class=\"token punctuation\">[</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              press           <span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Module calls</span>\n    key_filter              <span class=\"token function\">U_key_filter</span><span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">/*input                 */</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">clk</span>        <span class=\"token punctuation\">(</span>clk    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*input                 */</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">rst_n</span>      <span class=\"token punctuation\">(</span>rst_n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*input           [ 2:0]*/</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">key_in</span>     <span class=\"token punctuation\">(</span>key_in <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*output  reg     [ 2:0]*/</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">press</span>      <span class=\"token punctuation\">(</span>press  <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    spi_m25p16              <span class=\"token function\">U_spi_m25p16</span><span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">/*input                 */</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">clk</span>        <span class=\"token punctuation\">(</span>clk    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*input                 */</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">rst_n</span>      <span class=\"token punctuation\">(</span>rst_n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*input           [ 2:0]*/</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">press</span>      <span class=\"token punctuation\">(</span>press  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*input                 */</span>  <span class=\"token punctuation\">.</span><span class=\"token constant\">MISO</span>       <span class=\"token punctuation\">(</span><span class=\"token constant\">MISO</span>   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*output  reg           */</span>  <span class=\"token punctuation\">.</span><span class=\"token constant\">SCK</span>        <span class=\"token punctuation\">(</span><span class=\"token constant\">SCK</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*output  reg           */</span>  <span class=\"token punctuation\">.</span><span class=\"token constant\">CS</span>         <span class=\"token punctuation\">(</span><span class=\"token constant\">CS</span>     <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*output  reg           */</span>  <span class=\"token punctuation\">.</span><span class=\"token constant\">MOSI</span>       <span class=\"token punctuation\">(</span><span class=\"token constant\">MOSI</span>   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*output  reg     [ 7:0]*/</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">data_out</span>   <span class=\"token punctuation\">(</span>data   <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    display                 <span class=\"token function\">U_display</span><span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">/*input                 */</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">clk</span>        <span class=\"token punctuation\">(</span>clk    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 50MHz</span>\n        <span class=\"token comment\">/*input                 */</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">rst_n</span>      <span class=\"token punctuation\">(</span>rst_n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 复位信号</span>\n        <span class=\"token comment\">/*input           [ 7:0]*/</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">data</span>       <span class=\"token punctuation\">(</span>data   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*output  reg     [ 5:0]*/</span>  <span class=\"token punctuation\">.</span><span class=\"token constant\">SEL</span>        <span class=\"token punctuation\">(</span><span class=\"token constant\">SEL</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// SEL信号</span>\n        <span class=\"token comment\">/*output  reg     [ 7:0]*/</span>  <span class=\"token punctuation\">.</span><span class=\"token constant\">DIG</span>        <span class=\"token punctuation\">(</span><span class=\"token constant\">DIG</span>    <span class=\"token punctuation\">)</span>  <span class=\"token comment\">// DIG信号</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Logic description</span>\n    \n\nendmodule\n</code></pre>\n<h2><a id=\"22__92\"></a>2.2 按键模块</h2>\n<p>key_filter.v</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">/*========================================*\\\n    filename        : key_filter.v\n    description     : 按键消抖模块\n    up file         : \n    reversion       : \n        v1.0 : 2022-8-25 19:09:59\n    author          : 张某某\n\\*========================================*/</span>\n\nmodule key_filter #<span class=\"token punctuation\">(</span>parameter <span class=\"token constant\">MS_20</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>'d1000_000<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\n    input                               clk         <span class=\"token punctuation\">,</span>\n    input                               rst_n       <span class=\"token punctuation\">,</span>\n    input           <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              key_in      <span class=\"token punctuation\">,</span>\n  \n    output  reg     <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              press\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 全局变量定义</span>\n\n<span class=\"token comment\">// 信号定义</span>\n    reg             <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              key_0       <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 按键信号当前时钟周期电平</span>\n    reg             <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              key_1       <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 按键信号下一个时钟周期电平</span>\n\n    wire            <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              key_nedge   <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 下降沿使能信号</span>\n    reg                                 add_flag    <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计数使能信号</span>\n    reg             <span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              delay_cnt   <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 延时计数器</span>\n\n<span class=\"token comment\">// 模块功能</span>\n    <span class=\"token comment\">//打拍器</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            key_0 <span class=\"token operator\">&lt;=</span> 'b1<span class=\"token punctuation\">;</span>\n            key_1 <span class=\"token operator\">&lt;=</span> 'b1<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> begin\n            key_0 <span class=\"token operator\">&lt;=</span> key_in<span class=\"token punctuation\">;</span>\n            key_1 <span class=\"token operator\">&lt;=</span> key_0<span class=\"token punctuation\">;</span>\n        end\n    end\n\n    <span class=\"token comment\">// 检测下降沿</span>\n    assign key_nedge <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>key_0 <span class=\"token operator\">&amp;</span> key_1<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 计数使能信号</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            add_flag <span class=\"token operator\">&lt;=</span> 'b0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key_nedge<span class=\"token punctuation\">)</span> begin\n            add_flag <span class=\"token operator\">&lt;=</span> 'b1<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delay_cnt <span class=\"token operator\">&gt;=</span> <span class=\"token constant\">MS_20</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> begin\n            add_flag <span class=\"token operator\">&lt;=</span> 'b0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> begin\n            add_flag <span class=\"token operator\">&lt;=</span> add_flag<span class=\"token punctuation\">;</span>\n        end\n    end\n\n    <span class=\"token comment\">// 计数20ms</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            delay_cnt <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span>'d0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>add_flag<span class=\"token punctuation\">)</span> begin\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delay_cnt <span class=\"token operator\">&gt;=</span> <span class=\"token constant\">MS_20</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> begin\n                delay_cnt <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span>'d0<span class=\"token punctuation\">;</span>\n            end\n            <span class=\"token keyword\">else</span> begin\n                delay_cnt <span class=\"token operator\">&lt;=</span> delay_cnt <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            end\n        end\n        <span class=\"token keyword\">else</span> begin\n            delay_cnt <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span>'d0<span class=\"token punctuation\">;</span>\n        end\n    end\n\n    <span class=\"token comment\">// 输出</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            press <span class=\"token operator\">&lt;=</span> 'd0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delay_cnt <span class=\"token operator\">&gt;=</span> <span class=\"token constant\">MS_20</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> begin\n            press <span class=\"token operator\">&lt;=</span> <span class=\"token operator\">~</span>key_in<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> begin\n            press <span class=\"token operator\">&lt;=</span> 'd0<span class=\"token punctuation\">;</span>\n        end\n    end\n\nendmodule\n</code></pre>\n<h2><a id=\"23_SPI__186\"></a>2.3 SPI 模块</h2>\n<p>spi_m25p16.v</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">/*========================================*\\\n    filename        : spi_m25p16.v\n    description     : 基于SPI控制M25P16\n    up file         : SPI_top.v\n    reversion       : \n        v1.0 : 2022-8-25 19:08:52\n    author          : 张某某\n\\*========================================*/</span>\n\nmodule spi_m25p16 #<span class=\"token punctuation\">(</span>parameter <span class=\"token constant\">S_3</span> <span class=\"token operator\">=</span> <span class=\"token number\">28</span>'d50_000_000<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\n    input                               clk                     <span class=\"token punctuation\">,</span>\n    input                               rst_n                   <span class=\"token punctuation\">,</span>\n    input           <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              press                   <span class=\"token punctuation\">,</span>\n    input                               <span class=\"token constant\">MISO</span>                    <span class=\"token punctuation\">,</span>\n    \n    output  reg                         <span class=\"token constant\">SCK</span>                     <span class=\"token punctuation\">,</span>\n    output  reg                         <span class=\"token constant\">CS</span>                      <span class=\"token punctuation\">,</span>\n    output  reg                         <span class=\"token constant\">MOSI</span>                    <span class=\"token punctuation\">,</span>\n    output  reg     <span class=\"token punctuation\">[</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              data_out\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Parameter definition</span>\n    parameter       <span class=\"token constant\">ORDER_WREN</span>  <span class=\"token operator\">=</span>       <span class=\"token number\">8</span>'h06                   <span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">ORDER_SE</span>    <span class=\"token operator\">=</span>       <span class=\"token number\">8</span>'hd8                   <span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">ORDER_PP</span>    <span class=\"token operator\">=</span>       <span class=\"token number\">8</span>'h02                   <span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">ORDER_READ</span>  <span class=\"token operator\">=</span>       <span class=\"token number\">8</span>'h03                   <span class=\"token punctuation\">;</span>\n\n    parameter       <span class=\"token constant\">IDLE</span>        <span class=\"token operator\">=</span>       <span class=\"token number\">8</span>'b0000_0001            <span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">WREN</span>        <span class=\"token operator\">=</span>       <span class=\"token number\">8</span>'b0000_0010            <span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">WAIT</span>        <span class=\"token operator\">=</span>       <span class=\"token number\">8</span>'b0000_0100            <span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">SEPP</span>        <span class=\"token operator\">=</span>       <span class=\"token number\">8</span>'b0000_1000            <span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">RDEN</span>        <span class=\"token operator\">=</span>       <span class=\"token number\">8</span>'b0001_0000            <span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">ADDRESS</span>     <span class=\"token operator\">=</span>       <span class=\"token number\">8</span>'b0010_0000            <span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">DATA</span>        <span class=\"token operator\">=</span>       <span class=\"token number\">8</span>'b0100_0000            <span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">FINAL</span>       <span class=\"token operator\">=</span>       <span class=\"token number\">8</span>'b1000_0000            <span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Signal definition</span>\n    reg             <span class=\"token punctuation\">[</span><span class=\"token number\">31</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              state_ascll             <span class=\"token punctuation\">;</span>\n\n    reg             <span class=\"token punctuation\">[</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              state_c                 <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 现态</span>\n    reg             <span class=\"token punctuation\">[</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              state_n                 <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 次态</span>\n\n    wire                                idle2wren               <span class=\"token punctuation\">;</span>\n    wire                                idle2rden               <span class=\"token punctuation\">;</span>\n    wire                                wren2wait               <span class=\"token punctuation\">;</span>\n    wire                                wait2sepp               <span class=\"token punctuation\">;</span>\n    wire                                sepp2address            <span class=\"token punctuation\">;</span>\n    wire                                rden2address            <span class=\"token punctuation\">;</span>\n    wire                                address2final           <span class=\"token punctuation\">;</span>\n    wire                                address2data            <span class=\"token punctuation\">;</span>\n    wire                                data2final              <span class=\"token punctuation\">;</span>\n    wire                                final2idle              <span class=\"token punctuation\">;</span>\n\n    reg                                 flag_SE                 <span class=\"token punctuation\">;</span>\n    reg                                 flag_PP                 <span class=\"token punctuation\">;</span>\n    reg                                 flag_RD                 <span class=\"token punctuation\">;</span>\n\n    reg             <span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              cnt_SCK_fre             <span class=\"token punctuation\">;</span> <span class=\"token comment\">// SCK频率计数器</span>\n    wire                                add_cnt_SCK_fre         <span class=\"token punctuation\">;</span>\n    wire                                end_cnt_SCK_fre         <span class=\"token punctuation\">;</span>\n\n    reg             <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              press_0                 <span class=\"token punctuation\">;</span> <span class=\"token comment\">// press时序逻辑化</span>\n    reg             <span class=\"token punctuation\">[</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              send_data               <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送的1byte数据</span>\n    reg             <span class=\"token punctuation\">[</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              receive_data            <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 接收的1byte数据</span>\n\n    reg             <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              cnt_bit                 <span class=\"token punctuation\">;</span> <span class=\"token comment\">// bit计数器</span>\n    wire                                add_cnt_bit             <span class=\"token punctuation\">;</span>\n    wire                                end_cnt_bit             <span class=\"token punctuation\">;</span>\n\n    reg             <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              cnt_byte                <span class=\"token punctuation\">;</span> <span class=\"token comment\">// byte计数器</span>\n    wire                                add_cnt_byte            <span class=\"token punctuation\">;</span>\n    wire                                end_cnt_byte            <span class=\"token punctuation\">;</span>\n\n    reg             <span class=\"token punctuation\">[</span><span class=\"token number\">27</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              cnt_3s                  <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计数三秒</span>\n    wire                                add_cnt_3s              <span class=\"token punctuation\">;</span>\n    wire                                end_cnt_3s              <span class=\"token punctuation\">;</span>\n    \n<span class=\"token comment\">// Logic description</span>\n    <span class=\"token comment\">// 仿真时显示state_c对应的字符串</span>\n    always @<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>state_c<span class=\"token punctuation\">)</span>\n            <span class=\"token constant\">IDLE</span>    <span class=\"token operator\">:</span> state_ascll <span class=\"token operator\">=</span> <span class=\"token number\">32</span>'h49444C45<span class=\"token punctuation\">;</span>\n            <span class=\"token constant\">WREN</span>    <span class=\"token operator\">:</span> state_ascll <span class=\"token operator\">=</span> <span class=\"token number\">32</span>'h5752454E<span class=\"token punctuation\">;</span>\n            <span class=\"token constant\">WAIT</span>    <span class=\"token operator\">:</span> state_ascll <span class=\"token operator\">=</span> <span class=\"token number\">32</span>'h57414954<span class=\"token punctuation\">;</span>\n            <span class=\"token constant\">SEPP</span>    <span class=\"token operator\">:</span> state_ascll <span class=\"token operator\">=</span> <span class=\"token number\">32</span>'h53455050<span class=\"token punctuation\">;</span>\n            <span class=\"token constant\">RDEN</span>    <span class=\"token operator\">:</span> state_ascll <span class=\"token operator\">=</span> <span class=\"token number\">32</span>'h5244454E<span class=\"token punctuation\">;</span>\n            <span class=\"token constant\">ADDRESS</span> <span class=\"token operator\">:</span> state_ascll <span class=\"token operator\">=</span> <span class=\"token number\">32</span>'h41444452<span class=\"token punctuation\">;</span>\n            <span class=\"token constant\">DATA</span>    <span class=\"token operator\">:</span> state_ascll <span class=\"token operator\">=</span> <span class=\"token number\">32</span>'h44415441<span class=\"token punctuation\">;</span>\n            <span class=\"token constant\">FINAL</span>   <span class=\"token operator\">:</span> state_ascll <span class=\"token operator\">=</span> <span class=\"token number\">32</span>'h46494E41<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span> <span class=\"token operator\">:</span> state_ascll <span class=\"token operator\">=</span> <span class=\"token number\">32</span>'h49444C45<span class=\"token punctuation\">;</span>\n        endcase\n    end\n\n    <span class=\"token comment\">// 第一段 状态转移</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            state_c <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">IDLE</span><span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> begin\n            state_c <span class=\"token operator\">&lt;=</span> state_n<span class=\"token punctuation\">;</span>\n        end\n    end\n\n    <span class=\"token comment\">// 第二段 状态转移规律</span>\n    always @<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>state_c<span class=\"token punctuation\">)</span>\n            <span class=\"token constant\">IDLE</span> <span class=\"token operator\">:</span> \n                begin\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idle2wren<span class=\"token punctuation\">)</span> state_n <span class=\"token operator\">=</span> <span class=\"token constant\">WREN</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idle2rden<span class=\"token punctuation\">)</span> state_n <span class=\"token operator\">=</span> <span class=\"token constant\">RDEN</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> state_n <span class=\"token operator\">=</span> state_c<span class=\"token punctuation\">;</span>\n                end\n            <span class=\"token constant\">RDEN</span> <span class=\"token operator\">:</span> \n                begin\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rden2address<span class=\"token punctuation\">)</span> state_n <span class=\"token operator\">=</span> <span class=\"token constant\">ADDRESS</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> state_n <span class=\"token operator\">=</span> state_c<span class=\"token punctuation\">;</span>\n                end\n            <span class=\"token constant\">WREN</span> <span class=\"token operator\">:</span> \n                begin\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wren2wait<span class=\"token punctuation\">)</span> state_n <span class=\"token operator\">=</span> <span class=\"token constant\">WAIT</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> state_n <span class=\"token operator\">=</span> state_c<span class=\"token punctuation\">;</span>\n                end\n            <span class=\"token constant\">WAIT</span> <span class=\"token operator\">:</span> \n                begin\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wait2sepp<span class=\"token punctuation\">)</span> state_n <span class=\"token operator\">=</span> <span class=\"token constant\">SEPP</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> state_n <span class=\"token operator\">=</span> state_c<span class=\"token punctuation\">;</span>\n                end\n            <span class=\"token constant\">SEPP</span> <span class=\"token operator\">:</span> \n                begin\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sepp2address<span class=\"token punctuation\">)</span> state_n <span class=\"token operator\">=</span> <span class=\"token constant\">ADDRESS</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> state_n <span class=\"token operator\">=</span> state_c<span class=\"token punctuation\">;</span>\n                end\n            <span class=\"token constant\">ADDRESS</span> <span class=\"token operator\">:</span> \n                begin\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>address2final<span class=\"token punctuation\">)</span> state_n <span class=\"token operator\">=</span> <span class=\"token constant\">FINAL</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>address2data<span class=\"token punctuation\">)</span> state_n <span class=\"token operator\">=</span> <span class=\"token constant\">DATA</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> state_n <span class=\"token operator\">=</span> state_c<span class=\"token punctuation\">;</span>\n                end\n            <span class=\"token constant\">DATA</span> <span class=\"token operator\">:</span> \n                begin\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data2final<span class=\"token punctuation\">)</span> state_n <span class=\"token operator\">=</span> <span class=\"token constant\">FINAL</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> state_n <span class=\"token operator\">=</span> state_c<span class=\"token punctuation\">;</span>\n                end\n            <span class=\"token constant\">FINAL</span> <span class=\"token operator\">:</span> \n                begin\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>final2idle<span class=\"token punctuation\">)</span> state_n <span class=\"token operator\">=</span> <span class=\"token constant\">IDLE</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> state_n <span class=\"token operator\">=</span> state_c<span class=\"token punctuation\">;</span>\n                end\n            <span class=\"token keyword\">default</span> <span class=\"token operator\">:</span> state_n <span class=\"token operator\">=</span> state_c<span class=\"token punctuation\">;</span>\n        endcase\n    end\n\n    assign idle2wren     <span class=\"token operator\">=</span> state_c <span class=\"token operator\">==</span> <span class=\"token constant\">IDLE</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>flag_SE <span class=\"token operator\">||</span> flag_PP<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> cnt_SCK_fre <span class=\"token operator\">==</span> 'd6<span class=\"token punctuation\">;</span>\n    assign idle2rden     <span class=\"token operator\">=</span> state_c <span class=\"token operator\">==</span> <span class=\"token constant\">IDLE</span> <span class=\"token operator\">&amp;&amp;</span> flag_RD <span class=\"token operator\">&amp;&amp;</span> cnt_SCK_fre <span class=\"token operator\">==</span> 'd6<span class=\"token punctuation\">;</span>\n    assign wren2wait     <span class=\"token operator\">=</span> state_c <span class=\"token operator\">==</span> <span class=\"token constant\">WREN</span> <span class=\"token operator\">&amp;&amp;</span> end_cnt_bit<span class=\"token punctuation\">;</span>\n    assign wait2sepp     <span class=\"token operator\">=</span> state_c <span class=\"token operator\">==</span> <span class=\"token constant\">WAIT</span> <span class=\"token operator\">&amp;&amp;</span> cnt_SCK_fre <span class=\"token operator\">==</span> 'd6<span class=\"token punctuation\">;</span>\n    assign sepp2address  <span class=\"token operator\">=</span> state_c <span class=\"token operator\">==</span> <span class=\"token constant\">SEPP</span> <span class=\"token operator\">&amp;&amp;</span> end_cnt_bit<span class=\"token punctuation\">;</span>\n    assign address2final <span class=\"token operator\">=</span> state_c <span class=\"token operator\">==</span> <span class=\"token constant\">ADDRESS</span> <span class=\"token operator\">&amp;&amp;</span> flag_SE <span class=\"token operator\">&amp;&amp;</span> end_cnt_byte<span class=\"token punctuation\">;</span>\n    assign address2data  <span class=\"token operator\">=</span> state_c <span class=\"token operator\">==</span> <span class=\"token constant\">ADDRESS</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>flag_PP <span class=\"token operator\">||</span> flag_RD<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> end_cnt_byte<span class=\"token punctuation\">;</span>\n    assign rden2address  <span class=\"token operator\">=</span> state_c <span class=\"token operator\">==</span> <span class=\"token constant\">RDEN</span> <span class=\"token operator\">&amp;&amp;</span> end_cnt_bit<span class=\"token punctuation\">;</span>\n    assign data2final    <span class=\"token operator\">=</span> state_c <span class=\"token operator\">==</span> <span class=\"token constant\">DATA</span> <span class=\"token operator\">&amp;&amp;</span> end_cnt_bit<span class=\"token punctuation\">;</span>\n    assign final2idle    <span class=\"token operator\">=</span> state_c <span class=\"token operator\">==</span> <span class=\"token constant\">FINAL</span> <span class=\"token operator\">&amp;&amp;</span> end_cnt_3s<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 第三段 描述输出</span>\n\n    <span class=\"token comment\">// SCK时钟信号频率计数器</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            cnt_SCK_fre <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span>'d0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>add_cnt_SCK_fre<span class=\"token punctuation\">)</span> begin\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end_cnt_SCK_fre<span class=\"token punctuation\">)</span> begin\n                cnt_SCK_fre <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span>'d0<span class=\"token punctuation\">;</span>\n            end\n            <span class=\"token keyword\">else</span> begin\n                cnt_SCK_fre <span class=\"token operator\">&lt;=</span> cnt_SCK_fre <span class=\"token operator\">+</span> <span class=\"token number\">4</span>'d1<span class=\"token punctuation\">;</span>\n            end\n        end\n        <span class=\"token keyword\">else</span> begin\n            cnt_SCK_fre <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span>'d0<span class=\"token punctuation\">;</span>\n        end\n    end\n    assign add_cnt_SCK_fre <span class=\"token operator\">=</span> <span class=\"token number\">1</span>'b1<span class=\"token punctuation\">;</span>\n    assign end_cnt_SCK_fre <span class=\"token operator\">=</span> add_cnt_SCK_fre <span class=\"token operator\">&amp;&amp;</span> cnt_SCK_fre <span class=\"token operator\">&gt;=</span> <span class=\"token number\">4</span>'d9<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// SCK时钟信号生成</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            <span class=\"token constant\">SCK</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span>'d0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> begin\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>cnt_SCK_fre<span class=\"token punctuation\">)</span>\n                <span class=\"token number\">4</span><span class=\"token string\">'d9 : SCK &lt;= 1'</span>d0<span class=\"token punctuation\">;</span>\n                <span class=\"token number\">4</span><span class=\"token string\">'d4 : SCK &lt;= 1'</span>d1<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token constant\">SCK</span> <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">SCK</span><span class=\"token punctuation\">;</span>\n            endcase\n        end\n    end\n\n    <span class=\"token comment\">// 对press时序逻辑化</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            press_0 <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span>'d0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> begin\n            press_0 <span class=\"token operator\">&lt;=</span> press<span class=\"token punctuation\">;</span>\n        end\n    end\n\n    <span class=\"token comment\">// 按键控制使能信号</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            flag_SE <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span>'b0<span class=\"token punctuation\">;</span>\n            flag_PP <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span>'b0<span class=\"token punctuation\">;</span>\n            flag_RD <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span>'b0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>final2idle<span class=\"token punctuation\">)</span> begin\n            flag_SE <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span>'b0<span class=\"token punctuation\">;</span>\n            flag_PP <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span>'b0<span class=\"token punctuation\">;</span>\n            flag_RD <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span>'b0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> begin\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>press_0<span class=\"token punctuation\">)</span>\n                <span class=\"token number\">3</span><span class=\"token string\">'b100 : flag_SE &lt;= 1'</span>b1<span class=\"token punctuation\">;</span>\n                <span class=\"token number\">3</span><span class=\"token string\">'b010 : flag_PP &lt;= 1'</span>b1<span class=\"token punctuation\">;</span>\n                <span class=\"token number\">3</span><span class=\"token string\">'b001 : flag_RD &lt;= 1'</span>b1<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> \n                    begin\n                        flag_SE <span class=\"token operator\">&lt;=</span> flag_SE<span class=\"token punctuation\">;</span>\n                        flag_PP <span class=\"token operator\">&lt;=</span> flag_PP<span class=\"token punctuation\">;</span>\n                        flag_RD <span class=\"token operator\">&lt;=</span> flag_RD<span class=\"token punctuation\">;</span>\n                    end\n            endcase\n        end\n    end\n\n    <span class=\"token comment\">// CS片选信号</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            <span class=\"token constant\">CS</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span>'d1<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> begin\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>state_c<span class=\"token punctuation\">)</span>\n                <span class=\"token constant\">WREN</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEPP</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ADDRESS</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DATA</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">RDEN</span> <span class=\"token operator\">:</span> <span class=\"token constant\">CS</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span>'d0<span class=\"token punctuation\">;</span> \n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token constant\">CS</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span>'d1<span class=\"token punctuation\">;</span>\n            endcase\n        end\n    end\n\n    <span class=\"token comment\">// 待发送的1byte数据</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            send_data <span class=\"token operator\">&lt;=</span> <span class=\"token number\">8</span>'d0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> begin\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>state_c<span class=\"token punctuation\">)</span>\n                <span class=\"token constant\">WREN</span> <span class=\"token operator\">:</span> send_data <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">ORDER_WREN</span><span class=\"token punctuation\">;</span>\n                <span class=\"token constant\">SEPP</span> <span class=\"token operator\">:</span>\n                    begin\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag_SE<span class=\"token punctuation\">)</span> send_data <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">ORDER_SE</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag_PP<span class=\"token punctuation\">)</span> send_data <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">ORDER_PP</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">else</span> send_data <span class=\"token operator\">&lt;=</span> <span class=\"token number\">8</span>'d0<span class=\"token punctuation\">;</span>\n                    end\n                <span class=\"token constant\">ADDRESS</span> <span class=\"token operator\">:</span>\n                    begin\n                        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>cnt_byte<span class=\"token punctuation\">)</span>\n                            <span class=\"token number\">2</span><span class=\"token string\">'d0 : send_data &lt;= 8'</span>h01<span class=\"token punctuation\">;</span>\n                            <span class=\"token number\">2</span><span class=\"token string\">'d1 : send_data &lt;= 8'</span>h02<span class=\"token punctuation\">;</span>\n                            <span class=\"token number\">2</span><span class=\"token string\">'d2 : send_data &lt;= 8'</span>h03<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> send_data <span class=\"token operator\">&lt;=</span> <span class=\"token number\">8</span>'h00<span class=\"token punctuation\">;</span>\n                        endcase\n                    end\n                <span class=\"token constant\">DATA</span> <span class=\"token operator\">:</span> send_data <span class=\"token operator\">&lt;=</span> flag_RD <span class=\"token operator\">?</span> <span class=\"token number\">8</span><span class=\"token string\">'h00 : 8'</span>h23<span class=\"token punctuation\">;</span>\n                <span class=\"token constant\">RDEN</span> <span class=\"token operator\">:</span> send_data <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">ORDER_READ</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> send_data <span class=\"token operator\">&lt;=</span> <span class=\"token number\">8</span>'d0<span class=\"token punctuation\">;</span>\n            endcase\n        end\n    end\n \n    <span class=\"token comment\">// bit计数器</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            cnt_bit <span class=\"token operator\">&lt;=</span> 'd0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>add_cnt_bit<span class=\"token punctuation\">)</span> begin\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end_cnt_bit<span class=\"token punctuation\">)</span> begin\n                cnt_bit <span class=\"token operator\">&lt;=</span> 'd0<span class=\"token punctuation\">;</span>\n            end\n            <span class=\"token keyword\">else</span> begin\n                cnt_bit <span class=\"token operator\">&lt;=</span> cnt_bit <span class=\"token operator\">+</span> 'd1<span class=\"token punctuation\">;</span>\n            end\n        end\n        <span class=\"token keyword\">else</span> begin\n            cnt_bit <span class=\"token operator\">&lt;=</span> cnt_bit<span class=\"token punctuation\">;</span>\n        end\n    end\n    assign add_cnt_bit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state_c <span class=\"token operator\">==</span> <span class=\"token constant\">WREN</span> <span class=\"token operator\">||</span> state_c <span class=\"token operator\">&gt;=</span> <span class=\"token constant\">SEPP</span> <span class=\"token operator\">&amp;&amp;</span> state_c <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">DATA</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> cnt_SCK_fre <span class=\"token operator\">==</span> <span class=\"token number\">4</span>'d6<span class=\"token punctuation\">;</span>\n    assign end_cnt_bit <span class=\"token operator\">=</span> add_cnt_bit <span class=\"token operator\">&amp;&amp;</span> cnt_bit <span class=\"token operator\">&gt;=</span> <span class=\"token number\">3</span>'d7<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// byte计数器</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            cnt_byte <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span>'d0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>add_cnt_byte<span class=\"token punctuation\">)</span> begin\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end_cnt_byte<span class=\"token punctuation\">)</span> begin\n                cnt_byte <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span>'d0<span class=\"token punctuation\">;</span>\n            end\n            <span class=\"token keyword\">else</span> begin\n                cnt_byte <span class=\"token operator\">&lt;=</span> cnt_byte <span class=\"token operator\">+</span> <span class=\"token number\">2</span>'d1<span class=\"token punctuation\">;</span>\n            end\n        end\n        <span class=\"token keyword\">else</span> begin\n            cnt_byte <span class=\"token operator\">&lt;=</span> cnt_byte<span class=\"token punctuation\">;</span>\n        end\n    end\n    assign add_cnt_byte <span class=\"token operator\">=</span> state_c <span class=\"token operator\">==</span> <span class=\"token constant\">ADDRESS</span> <span class=\"token operator\">&amp;&amp;</span> end_cnt_bit<span class=\"token punctuation\">;</span>\n    assign end_cnt_byte <span class=\"token operator\">=</span> add_cnt_byte <span class=\"token operator\">&amp;&amp;</span> cnt_byte <span class=\"token operator\">&gt;=</span> <span class=\"token number\">2</span>'d2<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// MOSI输出</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            <span class=\"token constant\">MOSI</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span>'d0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token constant\">CS</span> <span class=\"token operator\">&amp;&amp;</span> cnt_SCK_fre <span class=\"token operator\">==</span> <span class=\"token number\">4</span>'d1<span class=\"token punctuation\">)</span> begin\n            <span class=\"token constant\">MOSI</span> <span class=\"token operator\">&lt;=</span> send_data<span class=\"token punctuation\">[</span><span class=\"token number\">7</span> <span class=\"token operator\">-</span> cnt_bit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> begin\n            <span class=\"token constant\">MOSI</span> <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">MOSI</span><span class=\"token punctuation\">;</span>\n        end\n    end\n\n    <span class=\"token comment\">// 计数3秒</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            cnt_3s <span class=\"token operator\">&lt;=</span> 'd0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>add_cnt_3s<span class=\"token punctuation\">)</span> begin\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end_cnt_3s<span class=\"token punctuation\">)</span> begin\n                cnt_3s <span class=\"token operator\">&lt;=</span> 'd0<span class=\"token punctuation\">;</span>\n            end\n            <span class=\"token keyword\">else</span> begin\n                cnt_3s <span class=\"token operator\">&lt;=</span> cnt_3s <span class=\"token operator\">+</span> 'd1<span class=\"token punctuation\">;</span>\n            end\n        end\n        <span class=\"token keyword\">else</span> begin\n            cnt_3s <span class=\"token operator\">&lt;=</span> 'd0<span class=\"token punctuation\">;</span>\n        end\n    end\n    assign add_cnt_3s <span class=\"token operator\">=</span> state_c <span class=\"token operator\">==</span> <span class=\"token constant\">FINAL</span><span class=\"token punctuation\">;</span>\n    assign end_cnt_3s <span class=\"token operator\">=</span> add_cnt_3s <span class=\"token operator\">&amp;&amp;</span> cnt_3s <span class=\"token operator\">&gt;=</span> <span class=\"token constant\">S_3</span> <span class=\"token operator\">-</span> <span class=\"token number\">28</span>'d1<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 接收1byte数据</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            receive_data <span class=\"token operator\">&lt;=</span> <span class=\"token number\">8</span>'d0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag_RD <span class=\"token operator\">&amp;&amp;</span> state_c <span class=\"token operator\">==</span> <span class=\"token constant\">DATA</span><span class=\"token punctuation\">)</span> begin\n            receive_data<span class=\"token punctuation\">[</span><span class=\"token number\">7</span> <span class=\"token operator\">-</span> cnt_bit<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">MISO</span><span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> begin\n            receive_data <span class=\"token operator\">&lt;=</span> <span class=\"token number\">8</span>'d0<span class=\"token punctuation\">;</span>\n        end\n    end\n\n    <span class=\"token comment\">// 将接收的1byte数据送给数码管显示</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            data_out <span class=\"token operator\">&lt;=</span> <span class=\"token number\">8</span>'d0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data2final <span class=\"token operator\">&amp;&amp;</span> flag_RD<span class=\"token punctuation\">)</span> begin\n            data_out <span class=\"token operator\">&lt;=</span> receive_data<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> begin\n            data_out <span class=\"token operator\">&lt;=</span> data_out<span class=\"token punctuation\">;</span>\n        end\n    end\n\nendmodule\n</code></pre>\n<h2><a id=\"24__569\"></a>2.4 数码管模块</h2>\n<p>display.v</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">/*========================================*\\\n  filename        : display.v\n  description     : 滚动显示输入的数据\n  up file         : \n  reversion       : \n      v1.0 : 2022-7-27 18:49:34\n  author          : 张某某\n\\*========================================*/</span>\n\nmodule display #<span class=\"token punctuation\">(</span>parameter  <span class=\"token constant\">MS_1</span><span class=\"token operator\">=</span> <span class=\"token number\">16</span>'d50000<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\n    input                                   clk                 <span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 50MHz</span>\n    input                                   rst_n               <span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 复位信号</span>\n    input               <span class=\"token punctuation\">[</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              data                <span class=\"token punctuation\">,</span>\n    output      reg     <span class=\"token punctuation\">[</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              <span class=\"token constant\">SEL</span>                 <span class=\"token punctuation\">,</span>   <span class=\"token comment\">// SEL信号</span>\n    output      reg     <span class=\"token punctuation\">[</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              <span class=\"token constant\">DIG</span>                     <span class=\"token comment\">// DIG信号</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 信号定义</span>\n    reg                 <span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              cnt_flicker         <span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 计数1ms</span>\n    wire                                    SEL_change          <span class=\"token punctuation\">;</span>   <span class=\"token comment\">// cnt_flicker计满使能信号</span>\n    reg                                     show_wei            <span class=\"token punctuation\">;</span> \n    reg                 <span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>              tmp_data            <span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 当前DIG的值</span>\n    \n<span class=\"token comment\">// 逻辑描述</span>\n    <span class=\"token comment\">// 闪烁频率计数器</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            cnt_flicker <span class=\"token operator\">&lt;=</span> 'd0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SEL_change<span class=\"token punctuation\">)</span> begin\n            cnt_flicker <span class=\"token operator\">&lt;=</span> 'd0<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> begin\n            cnt_flicker <span class=\"token operator\">&lt;=</span> cnt_flicker <span class=\"token operator\">+</span> 'd1<span class=\"token punctuation\">;</span> \n        end\n    end\n    assign SEL_change <span class=\"token operator\">=</span> cnt_flicker <span class=\"token operator\">&gt;=</span> <span class=\"token constant\">MS_1</span> <span class=\"token operator\">-</span> <span class=\"token string\">'d1 ? 1'</span><span class=\"token literal-property property\">b1</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span>'b0<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// SEL信号输出</span>\n    always @<span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span> begin\n            <span class=\"token constant\">SEL</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span>'b011_111<span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SEL_change<span class=\"token punctuation\">)</span> begin\n            <span class=\"token constant\">SEL</span> <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token constant\">SEL</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEL</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEL</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        end\n        <span class=\"token keyword\">else</span> begin\n            <span class=\"token constant\">SEL</span> <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">SEL</span><span class=\"token punctuation\">;</span>\n        end\n    end\n\n    <span class=\"token comment\">// tmp_data当前SEL位选所对应的DIG十进制值</span>\n    always @<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">SEL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token number\">6</span>'b011_111 <span class=\"token operator\">:</span> tmp_data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token number\">6</span>'b101_111 <span class=\"token operator\">:</span> tmp_data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> tmp_data <span class=\"token operator\">=</span> 'd0<span class=\"token punctuation\">;</span>\n        endcase\n    end\n\n    <span class=\"token comment\">// DIG输出各数字对应的二进制</span>\n    always @<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> begin\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>tmp_data<span class=\"token punctuation\">)</span>\n            <span class=\"token number\">4</span><span class=\"token string\">'d0 : DIG = 8'</span>b1100_0000<span class=\"token punctuation\">;</span>\n            <span class=\"token number\">4</span><span class=\"token string\">'d1 : DIG = 8'</span>b1111_1001<span class=\"token punctuation\">;</span>\n            <span class=\"token number\">4</span><span class=\"token string\">'d2 : DIG = 8'</span>b1010_0100<span class=\"token punctuation\">;</span>\n            <span class=\"token number\">4</span><span class=\"token string\">'d3 : DIG = 8'</span>b1011_0000<span class=\"token punctuation\">;</span>\n            <span class=\"token number\">4</span><span class=\"token string\">'d4 : DIG = 8'</span>b1001_1001<span class=\"token punctuation\">;</span>\n            <span class=\"token number\">4</span><span class=\"token string\">'d5 : DIG = 8'</span>b1001_0010<span class=\"token punctuation\">;</span>\n            <span class=\"token number\">4</span><span class=\"token string\">'d6 : DIG = 8'</span>b1000_0010<span class=\"token punctuation\">;</span>\n            <span class=\"token number\">4</span><span class=\"token string\">'d7 : DIG = 8'</span>b1111_1000<span class=\"token punctuation\">;</span>\n            <span class=\"token number\">4</span><span class=\"token string\">'d8 : DIG = 8'</span>b1000_0000<span class=\"token punctuation\">;</span>\n            <span class=\"token number\">4</span><span class=\"token string\">'d9 : DIG = 8'</span>b1001_0000<span class=\"token punctuation\">;</span>\n            <span class=\"token number\">4</span><span class=\"token string\">'d10: DIG = 8'</span>b1000_1000<span class=\"token punctuation\">;</span>\n            <span class=\"token number\">4</span><span class=\"token string\">'d11: DIG = 8'</span>b1000_0011<span class=\"token punctuation\">;</span>\n            <span class=\"token number\">4</span><span class=\"token string\">'d12: DIG = 8'</span>b1100_0110<span class=\"token punctuation\">;</span>\n            <span class=\"token number\">4</span><span class=\"token string\">'d13: DIG = 8'</span>b1010_0001<span class=\"token punctuation\">;</span>\n            <span class=\"token number\">4</span><span class=\"token string\">'d14: DIG = 8'</span>b1000_0110<span class=\"token punctuation\">;</span>\n            <span class=\"token number\">4</span><span class=\"token string\">'d15: DIG = 8'</span>b1000_1110<span class=\"token punctuation\">;</span>\n        endcase\n    end\n\nendmodule\n</code></pre>\n<h1><a id=\"_656\"></a>三、仿真模块</h1>\n<p>tb_spi_m25p16.v</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">/*========================================*\\\n    filename        : \n    description     : \n    up file         : \n    reversion       : \n        v1.0 : \n    author          : 张某某\n\\*========================================*/</span>\n\n`timescale 1ns<span class=\"token operator\">/</span>1ns\n\nmodule tb_spi_m25p16<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Parameter definition</span>\n    parameter       <span class=\"token constant\">CYC_CLK</span>             <span class=\"token operator\">=</span> <span class=\"token number\">20</span>            <span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Drive signal</span>\n    reg                                 tb_clk          <span class=\"token punctuation\">;</span>\n    reg                                 tb_rst_n        <span class=\"token punctuation\">;</span>\n    reg            <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>               tb_press        <span class=\"token punctuation\">;</span>\n    reg                                 tb_MISO         <span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Observation signal</span>\n    wire                                tb_SCK          <span class=\"token punctuation\">;</span>\n    wire                                tb_CS           <span class=\"token punctuation\">;</span>\n    wire                                tb_MOSI         <span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Module calls</span>\n    spi_m25p16    #<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token constant\">S_3</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>          <span class=\"token function\">U_spi_m25p16</span><span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">/*input                 */</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">clk</span>    <span class=\"token punctuation\">(</span>tb_clk     <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*input                 */</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">rst_n</span>  <span class=\"token punctuation\">(</span>tb_rst_n   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*input           [ 1:0]*/</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">press</span>  <span class=\"token punctuation\">(</span>tb_press   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*input                 */</span>  <span class=\"token punctuation\">.</span><span class=\"token constant\">MISO</span>   <span class=\"token punctuation\">(</span>tb_MISO    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*output  reg           */</span>  <span class=\"token punctuation\">.</span><span class=\"token constant\">SCK</span>    <span class=\"token punctuation\">(</span>tb_SCK     <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*output  reg           */</span>  <span class=\"token punctuation\">.</span><span class=\"token constant\">CS</span>     <span class=\"token punctuation\">(</span>tb_CS      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*output  reg           */</span>  <span class=\"token punctuation\">.</span><span class=\"token constant\">MOSI</span>   <span class=\"token punctuation\">(</span>tb_MOSI    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// System initialization</span>\n    initial begin\n        tb_clk <span class=\"token operator\">=</span> <span class=\"token number\">1</span>'b1<span class=\"token punctuation\">;</span>\n        tb_rst_n <span class=\"token operator\">=</span> <span class=\"token number\">1</span>'b0<span class=\"token punctuation\">;</span>\n        #<span class=\"token punctuation\">(</span><span class=\"token constant\">CYC_CLK</span><span class=\"token punctuation\">)</span> tb_rst_n <span class=\"token operator\">=</span> <span class=\"token number\">1</span>'b1<span class=\"token punctuation\">;</span>\n    end\n    always #<span class=\"token punctuation\">(</span><span class=\"token constant\">CYC_CLK</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> tb_clk <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>tb_clk<span class=\"token punctuation\">;</span>\n\n    initial begin\n        tb_press <span class=\"token operator\">=</span> <span class=\"token number\">3</span>'b000<span class=\"token punctuation\">;</span>\n        tb_MISO  <span class=\"token operator\">=</span> <span class=\"token number\">1</span>'b0<span class=\"token punctuation\">;</span>\n\n        #<span class=\"token punctuation\">(</span><span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token constant\">CYC_CLK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 擦除操作</span>\n        tb_press <span class=\"token operator\">=</span> <span class=\"token number\">3</span>'b100<span class=\"token punctuation\">;</span>\n        #<span class=\"token punctuation\">(</span><span class=\"token constant\">CYC_CLK</span><span class=\"token punctuation\">)</span> tb_press <span class=\"token operator\">=</span> <span class=\"token number\">3</span>'b000<span class=\"token punctuation\">;</span>\n\n        #<span class=\"token punctuation\">(</span><span class=\"token number\">16000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 页面编程</span>\n        tb_press <span class=\"token operator\">=</span> <span class=\"token number\">3</span>'b010<span class=\"token punctuation\">;</span>\n        #<span class=\"token punctuation\">(</span><span class=\"token constant\">CYC_CLK</span><span class=\"token punctuation\">)</span> tb_press <span class=\"token operator\">=</span> <span class=\"token number\">3</span>'b000<span class=\"token punctuation\">;</span>\n\n        #<span class=\"token punctuation\">(</span><span class=\"token number\">20000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 读数据</span>\n        tb_press <span class=\"token operator\">=</span> <span class=\"token number\">3</span>'b001<span class=\"token punctuation\">;</span>\n        #<span class=\"token punctuation\">(</span><span class=\"token constant\">CYC_CLK</span><span class=\"token punctuation\">)</span> tb_press <span class=\"token operator\">=</span> <span class=\"token number\">3</span>'b000<span class=\"token punctuation\">;</span>\n\n        #<span class=\"token punctuation\">(</span><span class=\"token number\">12000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        $stop<span class=\"token punctuation\">;</span>\n    end\n\nendmodule\n</code></pre>\n<h1><a id=\"_734\"></a>四、管脚配置</h1>\n<pre><code class=\"prism language-javascript\">set_location_assignment <span class=\"token constant\">PIN_E1</span>  <span class=\"token operator\">-</span>to clk\nset_location_assignment <span class=\"token constant\">PIN_E15</span> <span class=\"token operator\">-</span>to rst_n\nset_location_assignment <span class=\"token constant\">PIN_E16</span> <span class=\"token operator\">-</span>to key_in<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nset_location_assignment <span class=\"token constant\">PIN_M16</span> <span class=\"token operator\">-</span>to key_in<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nset_location_assignment <span class=\"token constant\">PIN_M15</span> <span class=\"token operator\">-</span>to key_in<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nset_location_assignment <span class=\"token constant\">PIN_H2</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">MISO</span>  \nset_location_assignment <span class=\"token constant\">PIN_H1</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">SCK</span>   \nset_location_assignment <span class=\"token constant\">PIN_D2</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">CS</span>    \nset_location_assignment <span class=\"token constant\">PIN_C1</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">MOSI</span>  \nset_location_assignment <span class=\"token constant\">PIN_A4</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">SEL</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nset_location_assignment <span class=\"token constant\">PIN_B4</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">SEL</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> \nset_location_assignment <span class=\"token constant\">PIN_A3</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">SEL</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nset_location_assignment <span class=\"token constant\">PIN_B3</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">SEL</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nset_location_assignment <span class=\"token constant\">PIN_A2</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">SEL</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nset_location_assignment <span class=\"token constant\">PIN_B1</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">SEL</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nset_location_assignment <span class=\"token constant\">PIN_B7</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">DIG</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nset_location_assignment <span class=\"token constant\">PIN_A8</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">DIG</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nset_location_assignment <span class=\"token constant\">PIN_A6</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">DIG</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nset_location_assignment <span class=\"token constant\">PIN_B5</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">DIG</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nset_location_assignment <span class=\"token constant\">PIN_B6</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">DIG</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nset_location_assignment <span class=\"token constant\">PIN_A7</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">DIG</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nset_location_assignment <span class=\"token constant\">PIN_B8</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">DIG</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\nset_location_assignment <span class=\"token constant\">PIN_A5</span>  <span class=\"token operator\">-</span>to <span class=\"token constant\">DIG</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h1><a id=\"_760\"></a>五、验证结果</h1>\n<ul><li>仿真结果，第一部分是擦除操作，第二部分是PP写操作，第三部分是读操作<br/> <img alt=\"在这里插入图片描述\" src=\"image\\91ad99d08f8b45058e7ea1a2f6b6d5bb.png\"/></li><li>板上验证<br/>\n<div class=\"csdn-video-box\">\n<iframe allowfullscreen=\"true\" data-mediaembed=\"csdn\" id=\"SgCpPLMO-1661751066820\" src=\"https://live.csdn.net/v/embed/235274\"></iframe>\n<p>SPI控制FLASH</p>\n</div></li><li>按左边按键，表示进行擦除操作<br/> 按中间按键，表示进行写数据操作<br/> 按右边按键，表示进行读数据操作</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}