{"blogid": "124280981", "writerAge": "码龄3年", "writerBlogNum": "10", "writerCollect": "75", "writerComment": "4", "writerFan": "4", "writerGrade": "2级", "writerIntegral": "129", "writerName": "happy_child_", "writerProfileAdress": "writer_image\\profile_124280981.jpg", "writerRankTotal": "102041", "writerRankWeekly": "539889", "writerThumb": "24", "writerVisitNum": "29951", "blog_read_count": "12258", "blog_time": "已于 2022-04-19 20:21:27 修改", "blog_title": "C语言中static用法详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>提示：文章写完后，目录可以自动生成，如何生成可参考右边的帮助文档</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_7\">前言</a></li><li><a href=\"#static_14\">一、static修饰变量</a></li><li><ul><li><a href=\"#1_15\">1.修饰局部变量</a></li><li><a href=\"#2_66\">2.修饰全局变量</a></li></ul>\n</li><li><a href=\"#static_106\">二、static修饰函数</a></li><li><a href=\"#_136\">总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_7\"></a>前言</h1>\n<p>static关键字不仅可以用来修饰变量，还可以用来修饰函数。在使用static关键字修饰变量时，我们称此变量为静态变量。静态变量的存储方式与全局变量一样，都是静态存储方式。静态变量属于静态存储方式，属于静态存储方式的变量却不一定就是静态变量。</p>\n<hr/>\n<p><code>提示：以下是本篇文章正文内容，下面案例可供参考</code></p>\n<h1><a id=\"static_14\"></a>一、static修饰变量</h1>\n<h2><a id=\"1_15\"></a>1.修饰局部变量</h2>\n<p>先看段代码：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tm <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tn<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\08be4397e34946bb9baa3e1c3e983f11.png\"/><br/> 这个结果没问题，下面咱们加个static对比一下：</p>\n<pre><code class=\"prism language-c\">\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tm <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tn<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5fd39575d2d04406836c6ecf9308c8c7.png\"/><br/> static 修饰局部变量的时候，其实改变的是局部变量的存储位置，静态的局部变量是放在静态区，放在静态区的变量出了作用域是不会销毁的，相当于生命周期延长了。<br/> 注：变量的作用域是不变的，只是生命周期延长了。</p>\n<h2><a id=\"2_66\"></a>2.修饰全局变量</h2>\n<p>创建一个源文件：a.c</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> g_val<span class=\"token operator\">=</span><span class=\"token number\">2022</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//全局变量</span>\n</code></pre>\n<p>引用全局变量：全局变量的作用域是整个工程</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">extern</span> g_val<span class=\"token punctuation\">;</span><span class=\"token comment\">//extern 用来声明外部命令</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> g_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\07dc2105bab8486ba1551822a38027c5.png\"/><br/> static可以修饰全局变量，加上static看一下有什么不同：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> g_val <span class=\"token operator\">=</span> <span class=\"token number\">2022</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//全局变量</span>\n</code></pre>\n<p>主文件不变：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">extern</span> g_val<span class=\"token punctuation\">;</span><span class=\"token comment\">//extern 用来声明外部命令</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> g_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：<img alt=\"在这里插入图片描述\" src=\"image\\2157e66a7d4b4e53852fc021243e38e5.png\"/><br/> 此时会报错：一个全局变量具有外部链接属性的 （就是可以被其他源文件引用）但是被static 修饰后外部链接属性就变成了内部链接属性 只能在自己所在的源文件内部使用不能在其他文件内部使用.</p>\n<p>所以再次调试的时候就会报错</p>\n<h1><a id=\"static_106\"></a>二、static修饰函数</h1>\n<p>源文件a.c中创建个函数名为add：<br/> 代码如下：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> z<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>主文件test.c如下：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">extern</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0c2aaff6f45c4948bafec69b645fd1f9.png\"/><br/> 其实一个函数本身具有外部链接属性 被static修饰后外部链接属性变成了内部链接属性 ，只能在源文件a.c 内部使用了，其他源文件无法使用，使用上感觉作用域变小，我们可以发现 static 修饰全局变量和修饰函数用法一样 。</p>\n<hr/>\n<h1><a id=\"_136\"></a>总结</h1>\n<ul><li>在修饰变量的时， static修饰的静态局部变量只执行一次，而且延长了局部变量的生命周期，直到程序运行结束以后才释放。</li><li>static修饰全局变量的时，这个全局变量只能在本文件中访问，不能在其它文件中访问，即便是extern外部声明也不可以。</li><li>static修饰一个函数，则这个函数的只能在本文件中调用，不能被其他文件调用。Static修饰的局部变量存放在全局数据区的静态变量区。</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}