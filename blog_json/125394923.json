{"blogid": "125394923", "writerAge": "码龄4年", "writerBlogNum": "48", "writerCollect": "7", "writerComment": "0", "writerFan": "6", "writerGrade": "3级", "writerIntegral": "492", "writerName": "DOCUVIX", "writerProfileAdress": "writer_image\\profile_125394923.jpg", "writerRankTotal": "36782", "writerRankWeekly": "17482", "writerThumb": "4", "writerVisitNum": "8922", "blog_read_count": "830", "blog_time": "于 2022-06-21 18:03:41 发布", "blog_title": "C#使用POST调用接口", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#C_4\">一、C#调用接口的三种方式</a></li><li><ul><li><a href=\"#1HttpWebRequest_6\">1、HttpWebRequest</a></li><li><a href=\"#2WebClient_8\">2、WebClient</a></li><li><a href=\"#3HttpClient_10\">3、HttpClient</a></li></ul>\n</li><li><a href=\"#_12\">二、所遇问题</a></li><li><ul><li><a href=\"#HttpWebRequest_13\">HttpWebRequest</a></li><li><a href=\"#_20\">默认方式所遇问题</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"C_4\"></a>一、C#调用接口的三种方式</h1>\n<h2><a id=\"1HttpWebRequest_6\"></a>1、HttpWebRequest</h2>\n<p>HttpWebRequest类是位于System.Net命名空间下的类。对于Http请求来说功能非常齐全，能够设置Http请求中的各种信息。例如TimeOut响应时间，Header请求头信息等。该类需要与HttpWebResponse类联合使用，HttpWebResponse类也是位于System.Net命名空间下的类，用于获取HttpWebRequest类请求结果。</p>\n<h2><a id=\"2WebClient_8\"></a>2、WebClient</h2>\n<p>WebClient类也是位于System.Net命名空间下的类，但是一种更高级的抽象类，相当于是HttpWebRequest将一些通用的简单的请求封装起来。所以WebClient无法设置响应时间，Header等信息。但同理WebClient使用起来非常简单，代码量少。</p>\n<h2><a id=\"3HttpClient_10\"></a>3、HttpClient</h2>\n<p>HttpClient类是位于System.Net.Http命名空间的类，是.Net4.5才引入的一个类。该类相比以上所述的类，优势在于多次请求，设置一次请求头信息即可。还有比较适合异步请求，HttpClient通常使用单例模式，因为HttpClient首次创建较慢，所以不适合使用New创建。</p>\n<h1><a id=\"_12\"></a>二、所遇问题</h1>\n<h2><a id=\"HttpWebRequest_13\"></a>HttpWebRequest</h2>\n<p>HttpWebRequest的POST请求的类型通常有application/x-www-form-urlencoded、application/json、multipart/form-data。<br/> application/x-www-form-urlencoded是默认的请求类型。<br/> application/json是Json数据格式的请求类型。<br/> multipart/form-data是表单数据的请求类型。<br/> 以上三种方式中，multipart/form-data通常用于文件上传。</p>\n<h2><a id=\"_20\"></a>默认方式所遇问题</h2>\n<p>先看代码</p>\n<pre><code class=\"prism language-csharp\">\t\t\t<span class=\"token class-name\">HttpWebResponse</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">HttpWebRequest</span> request<span class=\"token punctuation\">;</span>\n                request <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HttpWebRequest<span class=\"token punctuation\">)</span>WebRequest<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                request<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">=</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">;</span>\n                request<span class=\"token punctuation\">.</span>ContentType <span class=\"token operator\">=</span> <span class=\"token string\">\"application/x-www-form-urlencoded\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//跨平台调WebApi接口方式  </span>\n                request<span class=\"token punctuation\">.</span>Timeout <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt32</span><span class=\"token punctuation\">(</span>ConfigHelper<span class=\"token punctuation\">.</span><span class=\"token function\">GetConfig</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HttpTimeout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> payload<span class=\"token punctuation\">;</span>\n                payload <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                request<span class=\"token punctuation\">.</span>ContentLength <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span> newStream <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">GetRequestStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    newStream<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//写入参数</span>\n                    newStream<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> strValue<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    response <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HttpWebResponse<span class=\"token punctuation\">)</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">GetResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token class-name\">Stream</span> resStream <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">GetResponseStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">using</span> <span class=\"token class-name\">StreamReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamReader</span><span class=\"token punctuation\">(</span>resStream<span class=\"token punctuation\">,</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    strValue <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadToEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    resStream<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    response<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">WebException</span> ex<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">return</span> strValue<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>以上代码是使用HttpWebRequest访问一个接口的代码，接口地址为url，接口传入参数为param。请求方式是POST请求，请求类型为application/x-www-form-urlencoded。</p>\n<p>之前使用该代码访问远程接口，一直可以使用。但是今日开发时突然遇到一个问题，使用该方法请求返回结果500，检查发现参数错误。修改参数后401，然后切换各种请求类型，一直都是401。但使用JAVA的HttpPost类访是可以成功的，请求地址与请求参数均一致。则肯定是以上代码缺少信息。</p>\n<pre><code class=\"prism language-csharp\">request<span class=\"token punctuation\">.</span>UserAgent <span class=\"token operator\">=</span> <span class=\"token string\">\"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>寻找一天终于找到问题，需要对Request设置UserAgent。UserAgent是客户端浏览器的原始用户代理信息。设置了该内容就可成功调用，但具体原因是为什么暂时还未知。</p>\n<p>可能是因为远程接口地址设置了UserAgent反爬虫机制，所以需要设置该内容。而JAVA的HttpPost类可能内置了该信息。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}