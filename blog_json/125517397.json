{"blogid": "125517397", "writerAge": "码龄6年", "writerBlogNum": "1", "writerCollect": "3", "writerComment": "0", "writerFan": "2", "writerGrade": "1级", "writerIntegral": "30", "writerName": "准爵", "writerProfileAdress": "writer_image\\profile_125517397.jpg", "writerRankTotal": "173451", "writerRankWeekly": "564522", "writerThumb": "0", "writerVisitNum": "709", "blog_read_count": "707", "blog_time": "于 2022-06-29 11:38:18 发布", "blog_title": "C#调用COM接口的三种方式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2 id=\"h2-1-\"><a name=\"1.准备工作\"></a>1.准备工作</h2>\n<h3 id=\"h3--oleview-exe-com-clsid-guid\"><a name=\"使用OLEView.exe查看本机安装的COM组件CLSID和接口Guid\"></a>使用OLEView.exe查看本机安装的COM组件CLSID和接口Guid</h3>\n<p>  COM组件的提供者没有提供CLSID等信息或信息提供不全时，可以使用OleView.exe来查看其类和接口的GUID. OLEView.exe全称是OLE-COM Object Viewer，是Microsoft SDK中包含的一个工具，可以用来查看本机安装的所有COM组件的信息，包括CLSID、ProgID等。如果是完整的开发环境，其位置在C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\Bin，非开发环境下也可以到网上下载该程序和它依赖的一个IVIEWERS.DLL.<br/>   在All Objets中查看COM组件的CLSID，右键可以直接复制CLSID. 右键选中项，点击ViewTypeInfo可查看详细接口列表和接口的Guid。本次使用的COM组件只有一个callJson接口，一个字符串类型的输入参数（[in]），一个输出参数作为返回值（[out,retval])。</p>\n<p></p>\n<h2 id=\"h2-2-\"><a name=\"2.三种不同的引用方式\"></a>2.三种不同的引用方式</h2>\n<h3 id=\"h3--1-tlbimp-\">方式1 使用tlbimp生成类库直接引用</h3>\n<p>常见的COM组件是dll形式，在VS中可以直接添加引用，VS会自动生成一个Interop.xxx.dll类库。项目中使用的第三方COM组件是exe形式，可以使用tlbimp.exe手动转换。在Visual Studio的工具库中找到并打开VS的命令提示符，按格式输入指令<code>tlbimp FILENAME /out:OUTPUT</code>生成类库，类库生成之后就可以在VS中添加引用，然后像其他类库一样直接调用其中的接口。</p>\n<h3 id=\"h3--2-clsid-\">方式2 使用CLSID和反射动态调用</h3>\n<p>已知COM类的CLISID时可以直接使用Type.GetTypeFromCLSID方法来获取COM组件的Type，然后动态创建对象调用接口。</p>\n<pre><code class=\"language-cs\">private string CallJson(string input)\n        {\n            string ret = \"\";\n            Type dycomType = Type.GetTypeFromCLSID(new Guid(\"xxxxxx\"));\n\n            if (dycomType != null)\n            {\n                //创建类实例\n                dynamic dycomObject = Activator.CreateInstance(dycomType);\n                //调用\n                ret = dycomObject?.callJson(input);\n            }\n\n            return ret;\n        }</code></pre>\n<p>也可以使用ProgId来获取：</p>\n<pre><code class=\"language-cs\">Type t = Type.GetTypeFromProgID(\"TestComServer.TestComVisibleClass\");\ndynamic o = Activator.CreateInstance(t);</code></pre>\n<h3 id=\"h3--3-comimport-\">方式3 ComImport方式引用</h3>\n<p>使用ComImport标签引用COM组件，需要写明类的Guid和接口的Guid：</p>\n<pre><code class=\"language-cs\">    [ComImport, Guid(\"xxxxxxxxxxxx\")]\n    class DycomObject\n    {\n\n    }\n    // Declare IMediaControl as a COM interface which \n    // derives from the IDispatch interface. \n    [Guid(\"xxxxxxxx\"),\n        InterfaceType(ComInterfaceType.InterfaceIsIDispatch)]\n    interface IDycomObject // cannot list any base interfaces here \n    {\n        // Note that the members of IUnknown and Interface are NOT\n        // listed here \n        //\n        [return: MarshalAs(UnmanagedType.BStr)]\n        object callJson(\n        [In, MarshalAs(UnmanagedType.BStr)] string request);\n\n    }</code></pre>\n<p>调用： </p>\n<p> </p>\n<pre><code class=\"language-cs\">      private string CallJson(string input)\n        {\n            string ret = \"\";\n            Console.WriteLine(\"创建类实例\");\n            DycomObject dy = new DycomObject();\n            IDycomObject iDy = (IDycomObject)dy;\n            Console.WriteLine(\"调用\");\n            ret = (string)iDy.callJson(input);\n            return ret;\n        }</code></pre>\n<h2 id=\"h2-u5B9Eu9645u9879u76EEu4E2Du7684u95EEu9898\"><a name=\"实际项目中的问题\"></a>实际项目中的问题</h2>\n<p>  上述三种方式的接口格式都是一个输入参数对应COM接口的[in]参数，一个返回值对应[out,retval]参数，按照第三方接口描述，返回值中包含接口调用结果和错误码。实际使用中发现，调用出错时，接口会返回一个非零的HRESULT，同时把错误信息传给[out,retval]参数，但.Net会把非零的HRESULT转换为一个异常抛出，导致以上三种写法的返回值都为null，无法获取错误信息。在社区发帖问到了解决方法，就是需要修改方式3的引用方式,使用[PreserveSig]取消COM互操作期间的HRESULT和retval签名转换，让错误信息可以被正常接收到：</p>\n<pre><code class=\"language-cs\">[ComImport, Guid(\"xxxxxx\")]\n    class DycomObject\n    {\n\n    }\n    [ComVisible(true), ComImport, Guid(\"xxxxxx\")]\n    interface IDycomObject\n    {\n        [PreserveSig]\n        int callJson(\n            [In,MarshalAs(UnmanagedType.BStr)]\n            string request, \n            [Out,MarshalAs(UnmanagedType.BStr)]\n            out string response);\n    }\n\n    private string CallJson(string input)\n    {\n        string ret = \"\";\n        Console.WriteLine(\"创建类实例\");\n        DycomObject dy = new DycomObject();\n        IDycomObject iDy = (IDycomObject)dy;\n        Console.WriteLine(\"调用\");\n        var code = iDy.callJson(input,out ret);\n        return ret;\n    }</code></pre>\n<p> </p>\n</div>\n</div>"}