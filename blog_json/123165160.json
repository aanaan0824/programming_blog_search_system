{"blogid": "123165160", "writerAge": "码龄5年", "writerBlogNum": "100", "writerCollect": "323", "writerComment": "58", "writerFan": "147", "writerGrade": "4级", "writerIntegral": "1416", "writerName": "Cake_C", "writerProfileAdress": "writer_image\\profile_123165160.jpg", "writerRankTotal": "74745", "writerRankWeekly": "58622", "writerThumb": "173", "writerVisitNum": "87872", "blog_read_count": "2121", "blog_time": "已于 2022-02-27 17:08:51 修改", "blog_title": "UnityMirror学习笔记(2)：使用SyncVar进行数据同步", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>Mirror是一个简单高效的开源的Unity多人游戏网络框架。<br/> 在这里按照油管dalao的教学流程，与官方文档学习常用的API及操作。</p>\n<p>https://mirror-networking.gitbook.io/docs</p>\n<h2><a id=\"API_5\"></a>API</h2>\n<p>Mirror提供了一个特性<code>SyncVar</code>来进行数据同步，<br/> 它的核心逻辑就是，当<code>服务器</code>的场景中的一个<code>SyncVar</code>的值发生变化时，就同步给其它所有<code>客户端</code>。</p>\n<p>基本的用法是在需要进行同步的变量前编辑特性标签：</p>\n<pre><code class=\"prism language-c#\">[SyncVar]\nColor colorNeededToSynchronize;\n</code></pre>\n<p>其中经常定义<code>hook</code>参数，<br/> 当数据发生变化时，就自动调用一个自定义的函数<code>MySetColor</code>函数，<br/> <strong>注意这个函数只会在客户端调用（当然主机也运行了一个客户端）</strong><br/> 而<code>MySetColor</code>的声明如下，提供了新旧值的访问，<br/> 注意新旧值的类型与监听的数值的类型一致：</p>\n<pre><code class=\"prism language-c#\">[SyncVar(hook = nameof(MySetColor))]\nvoid MySetColor(Color oldColor, Color newColor)\n</code></pre>\n<p><strong>在编写代码的时候要注意，使用此特性标注的变量，只应该在服务器上对此变量进行更改</strong><br/> <strong>而通过hook在客户端作用此更改</strong></p>\n<h2><a id=\"_29\"></a>使用</h2>\n<p>接下来用一个例子展示此API：<br/> 为上一节写的Cube添加一个控制脚本。<br/> 注意脚本继承自<code>NetworkBehaviour</code>，命名空间<code>using Mirror;</code><br/> 以便获取到Mirror的API：</p>\n<pre><code class=\"prism language-c#\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Mirror;\n\npublic class PlayerController : NetworkBehaviour\n{\n    [SyncVar(hook = nameof(ColorChanged))]\n    Color PlayerColor = Color.white;\n\n    Rigidbody rb;\n    MaterialPropertyBlock prop;\n\n    void ColorChanged(Color oldColor, Color newColor){\n        Debug.Log(\"Color Changed\");\n        prop.SetColor(\"_Color\" ,newColor);\n        GetComponent&lt;Renderer&gt;().SetPropertyBlock(prop);\n    }\n\n    private void Start() {\n        rb = GetComponent&lt;Rigidbody&gt;();\n        prop = new MaterialPropertyBlock();\n        GetComponent&lt;Renderer&gt;().GetPropertyBlock(prop);\n    }\n\n    float duringTimer = 0f;\n    private void Update() {\n        rb.velocity = new Vector3(0,0,0);\n        if(isServer){\n            if(duringTimer &lt; 2f){\n                duringTimer+=Time.deltaTime;\n            }else{\n                duringTimer = 0f;\n                PlayerColor = PlayerColor==Color.white?Color.black:Color.white;\n            }\n        }\n    }\n}\n\n</code></pre>\n<p>这一段代码的功能就是，每隔2秒改变一次玩家的颜色。<br/> 尤其注意代码中一个API <code>isServer</code>，<br/> 这说明下面这段代码只会在服务器上运行，而客户端是不会运行的，</p>\n<pre><code class=\"prism language-c#\">    if(isServer){\n        if(duringTimer &lt; 2f){\n            duringTimer+=Time.deltaTime;\n        }else{\n            duringTimer = 0f;\n            PlayerColor = PlayerColor==Color.white?Color.black:Color.white;\n        }\n    }\n</code></pre>\n<p>整体的逻辑就是：</p>\n<p>服务器上的每一个主角物体，<br/> 每两秒改变一次<code>PlayerColor</code>的值，<br/> 然后服务器通过<code>SyncVar</code>将改变前后的值发送给每一个客户端，<br/> 接下来每一个客户端对应的物体调用<code>hook</code>函数也就是<code>ColorChanged(Color oldColor, Color newColor)</code>函数，<br/> 将值改变带来的效果作用到自己的场景中。</p>\n<h2><a id=\"_97\"></a>测试</h2>\n<p>打开两个游戏，其中一个做客户端，一个做主机（服务器+客户端）<br/> <img alt=\"20220227152844\" src=\"image\\d4856980f4fe25486d2f9fe2dd333587.png\"/></p>\n<p>可以看到各自的主角颜色随着时间进行变化。<br/> <img alt=\"20220227152919\" src=\"image\\6193084fe54ef1220f807a1935023a51.png\"/><br/> <img alt=\"20220227152929\" src=\"image\\387fd66613ac2be5c4324d591ba2b27c.png\"/></p>\n<h4><a id=\"hook_105\"></a>注意hook函数不会在服务器上调用</h4>\n<p>打开两个游戏，其中一个做客户端，一个只做服务器<br/> <img alt=\"20220227153049\" src=\"image\\68abd3e361cfad2a0c8a263d197dcec3.png\"/></p>\n<p>可以看到，虽然我们清楚服务器中的<code>PlayerColor</code>的值肯定变化了，<br/> 但是由于服务器没有执行hook函数，因此服务器上看到的这个实体颜色没有变化。<br/> （上一个测试能看到都有变化，是因为上一个测试服务器上也有一个客户端，所有看到的本质上还是客户端而不是服务器）<br/> <img alt=\"20220227153118\" src=\"image\\8292635db8697180cf8823fd2192e331.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}