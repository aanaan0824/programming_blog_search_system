{"blogid": "123401608", "writerAge": "码龄7年", "writerBlogNum": "117", "writerCollect": "282", "writerComment": "122", "writerFan": "170", "writerGrade": "5级", "writerIntegral": "3824", "writerName": "不如喫茶去", "writerProfileAdress": "writer_image\\profile_123401608.jpg", "writerRankTotal": "46826", "writerRankWeekly": "60351", "writerThumb": "163", "writerVisitNum": "328241", "blog_read_count": "2092", "blog_time": "已于 2022-03-11 15:45:50 修改", "blog_title": "RabbitMQ的简单理解及PHP使用RabbitMQ（附yii2使用方法）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p>最近问了几个小伙伴，发现大家都仅仅是会调用操作RabbitMQ的方法，或者仅停留在使用RabbitMQ的层次上。稍微深入一点的知识，就不太清楚了。所以在此记录一下个人对它的理解及PHP怎么使用。</p>\n<p><strong>注：</strong>才疏学浅，若有不对之处，敬请指正！</p>\n</blockquote>\n<p>首先谈一下RabbitMQ的整体架构（图示）：</p>\n<p><span style=\"color:#4da8ee;\">docker安装RabbitMQ的教程可以参考：<a href=\"https://blog.csdn.net/qq_32737755/article/details/123275413?spm=1001.2014.3001.5502\" title=\"使用docker安装RabbitMQ\">使用docker安装RabbitMQ</a></span></p>\n<p><span style=\"color:#4da8ee;\">windows环境PHP安装amqp扩展可以参考：</span><a href=\"https://blog.csdn.net/qq_32737755/article/details/123406745\" title=\"windows环境PHP使用RabbitMq安装amqp扩展\">windows环境PHP使用RabbitMq安装amqp扩展</a></p>\n<p><img alt=\"\" height=\"762\" src=\"image\\33b96f0e891643b1824d832c5cfc7915.png\" width=\"1194\"/></p>\n<p><em>关于rabbitMq的四种交换机类型（Direct exchange、Fanout exchange、Topic exchange、Headers exchange）在此就不做一一说明了，网上资料有很多。文中示例使用较常用的<strong>Direct</strong>类型。 可以参考这篇博客：</em><a href=\"https://www.cnblogs.com/linyufeng/p/9885020.html\" title=\"RabbitMQ四种交换机类型介绍\">RabbitMQ四种交换机类型介绍</a></p>\n<p>在日常开发中需要注意关于生产者（producter ）和消费者（consumer ）下面几点注意点：</p>\n<ol><li>虚拟地址（vhost） 用于逻辑的隔离，是最上层的消息路由，用来表明某个虚拟机。一个vhost里面可以有很多exchange和queue，但不能有相同名称的exchange或queue。</li><li>网络信道（channel ），进行消息读写的通道。个人理解：它类似于MySQL里面的会话(Session)。</li><li>如果虚拟机中不存在路由键（RouteKey）绑定的队列（queue）名，则生产者发出的消息会被抛弃。</li><li>无论生产者与消费者两者谁先启动，都需要先保证vhost中routeKey存在。否则生产者发出的消息会被抛弃。</li><li>一般看到视频讲解中或者别人的代码示例，都是先运行consumer，这是因为consumer中指定了队列和路由键（路由键不指定也可以，可以看第一个示例）。</li><li>两者都不指定交换机，消费者只指定队列名、 生产者只指定路由键，交换机会默认为“Exchange: (AMQP default) ” ，消息会发送到 名称 和生产者中指定的路由键的名称相同的队列 中去。（这句话有点绕，可以结合下面第一个示例来看）</li><li>对于同一个交换机，生产者与消费者的路由键一样，生产者的消息会分发到各队列中。假如两个消费者，一个监听队列A，一个监听队列B，绑定的路由键都是key1，生产者的路由键也是key1，那么生产者发送10条消息，队列AB 各收到10条，两个消费者分别消费10条来自生产者的消息。</li></ol>\n<p><strong><span style=\"color:#511b78;\">第一个示例</span>（不指定交换机、生产者只指定路由键、消费者只指定队列名）</strong>：</p>\n<p>consumer 代码（consumer.php ）：</p>\n<pre><code class=\"language-php\">&lt;?php \n//配置信息\n$configParams = array( \n    'host' =&gt; '127.0.0.1',  \n    'port' =&gt; '5672',  \n    'login' =&gt; 'guest',  \n    'password' =&gt; 'guest', \n    'vhost'=&gt;'/'\n);   \n\n$queueName = 'queueTest'; //队列名 \n\n//创建连接\n$connection = new AMQPConnection($configParams);   \nif (!$connection-&gt;connect()) {   \n    die(\"Cannot connection rabbitMq!\\n\");   \n}\n\n//创建channel ，进行消息读写的通道 类似于MySQL里面的会话(Session)\n$channel = new AMQPChannel($connection);    \n   \n//创建队列    \n$queue = new AMQPQueue($channel); \n$queue-&gt;setName($queueName);   \n$queue-&gt;setFlags(AMQP_DURABLE); //队列持久化  \necho \"Message Total:\".$queue-&gt;declareQueue().\"\\n\";   \n \n//阻塞模式接收消息 \necho \"Waiting for message...:\\n\";   \n\nwhile(True){ \n    $queue-&gt;consume('processMessage');   \n    //$queue-&gt;consume('processMessage', AMQP_AUTOACK); //加上参数AMQP_AUTOACK,自动ACK应答  \n} \n\n//断开连接\n$conn-&gt;disconnect();   \n \n/**\n * 消费回调函数\n * 处理消息\n */ \nfunction processMessage($envelope, $queue) { \n    $msg = $envelope-&gt;getBody();\n    // $envelope-&gt;getHeaders(); // 获取消息头\n    echo \"Received:\".$msg.\"\\n\"; //处理消息 \n    $queue-&gt;ack($envelope-&gt;getDeliveryTag()); //手动发送ACK应答  $envelope-&gt;getDeliveryTag())获取消息传递标签\n}\n\n?&gt;</code></pre>\n<p>producter 代码(producter.php)：</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndate_default_timezone_set(\"Asia/Shanghai\");\n\n//配置信息 \n$configParams = array( \n    'host' =&gt; '127.0.0.1',  \n    'port' =&gt; '5672',  \n    'login' =&gt; 'guest',  \n    'password' =&gt; 'guest', \n    'vhost'=&gt;'/' \n);   \n\n$routeKey = 'queueTest'; //路由键\n\n//创建连接\n$connection = new AMQPConnection($configParams);   \nif (!$connection-&gt;connect()) {   \n    die(\"Cannot connection rabbitMq!\\n\");   \n}\n\n//创建channel\n$channel = new AMQPChannel($connection);\n   \n//创建交换机\n$exchange = new AMQPExchange($channel);\n\n//发送消息 \nfor($i=0; $i&lt;10; ++$i){\n    sleep(2);\n    //消息内容 \n    $message = \"Hello RabbitMq! send time:\".date(\"h:i:sa\");   \n    echo \"Send Message:\".$exchange-&gt;publish($message, $routeKey).\"\\n\";  \n}\n\n$connection-&gt;disconnect();\n?&gt;</code></pre>\n<p>然后在命令行中运行消费者代码 ： php ./consumer.php</p>\n<p><img alt=\"\" height=\"55\" src=\"image\\cb9c5d710c2f4d9a813d34bd14ccccb7.png\" width=\"267\"/></p>\n<p> 此时，看一下rabbitMq后台，可以看到：</p>\n<p><img alt=\"\" height=\"570\" src=\"image\\22ed6535159446c5bb174752c05f682d.png\" width=\"654\"/></p>\n<p> <img alt=\"\" height=\"303\" src=\"image\\c74204824cb14d889ae8a4f31e021f73.png\" width=\"998\"/></p>\n<p> 然后再起一个命令行窗口运行生产者代码 ： php ./producter.php</p>\n<p><img alt=\"\" height=\"160\" src=\"image\\8fe0de369bbb4fbba565dba2c7b43552.png\" width=\"536\"/></p>\n<p> 再看运行消费者代码的命令行：</p>\n<p><img alt=\"\" height=\"176\" src=\"image\\71c0baa4510d40a2a3171be4d8382dff.png\" width=\"547\"/></p>\n<p> 点击队列名，queueTest：可以发现<img alt=\"\" height=\"616\" src=\"image\\e2c2d38f53504a2482739dea9715f77e.png\" width=\"996\"/></p>\n<p> 现在，再回头看上面的第6点，两者都不指定交换机，消费者指定的队列名和生产者指定的路由键名称相同都是“queueTest”，交换机会默认为“AMQP default” ，生产者的消息会发送到队列名称 为queueTest的队列 中去。可以点击（AMQP default）交换机，可以看到bindings下面有句话，其实就是第6点的描述。</p>\n<p><img alt=\"\" height=\"935\" src=\"image\\33437c0107e749adaee9ba4b46f4e606.png\" width=\"800\"/></p>\n<hr/>\n<p><strong><span style=\"color:#511b78;\">第二个示例</span>（指定各个参数，使用一个direct类型的交换机）</strong>：</p>\n<p>注：代码中的类中的方法可以在此查询：<a href=\"http://docs.php.net/manual/da/book.amqp.php\" title=\"http://docs.php.net/manual/da/book.amqp.php\">http://docs.php.net/manual/da/book.amqp.php</a></p>\n<p>consumer 代码（consumer.php ）：</p>\n<pre><code class=\"language-php\">&lt;?php \n//配置信息\n$configParams = array( \n    'host' =&gt; '127.0.0.1',  \n    'port' =&gt; '5672',  \n    'login' =&gt; 'guest',  \n    'password' =&gt; 'guest', \n    'vhost'=&gt;'/'\n); \n  \n$exchangeName = 'test'; //交换机名  交换机会根据路由键转发消息到绑定的队列\n$queueName = 'queue1'; //队列名 \n$routeKey = 'key1'; //路由键 \n\n//创建连接 类中的方法可以从http://docs.php.net/manual/da/book.amqp.php 查询\n$connection = new AMQPConnection($configParams);   \nif (!$connection-&gt;connect()) {   \n    die(\"Cannot connection rabbitMq!\\n\");   \n}\n\n//创建channel ，进行消息读写的通道，类似于MySQL里面的会话(Session)\n$channel = new AMQPChannel($connection);   \n \n//创建交换机    \n$exchange = new AMQPExchange($channel);   \n$exchange-&gt;setName($exchangeName); \n$exchange-&gt;setType(AMQP_EX_TYPE_DIRECT); //direct类型  \n$exchange-&gt;setFlags(AMQP_DURABLE); //持久化 \necho \"Exchange Status:\".$exchange-&gt;declareExchange().\"\\n\";   \n   \n//创建队列    \n$queue = new AMQPQueue($channel); \n$queue-&gt;setName($queueName);   \n$queue-&gt;setFlags(AMQP_DURABLE); //队列持久化  \necho \"Message Total:\".$queue-&gt;declareQueue().\"\\n\";   \n \n//绑定交换机与队列，并指定路由键 \necho 'Queue Bind: '.$queue-&gt;bind($exchangeName, $routeKey).\"\\n\"; \n \n//阻塞模式接收消息 \necho \"Waiting for message...:\\n\";   \nwhile(True){ \n    $queue-&gt;consume('processMessage');   \n    //$queue-&gt;consume('processMessage', AMQP_AUTOACK); //加上参数AMQP_AUTOACK,自动ACK应答  \n} \n\n//断开连接\n$conn-&gt;disconnect();   \n \n/**\n * 消费回调函数\n * 处理消息\n */ \nfunction processMessage($envelope, $queue) { \n    $msg = $envelope-&gt;getBody();\n    // $envelope-&gt;getHeaders(); // 获取消息头\n    echo \"Received:\".$msg.\"\\n\"; //处理消息 \n    $queue-&gt;ack($envelope-&gt;getDeliveryTag()); //手动发送ACK应答  $envelope-&gt;getDeliveryTag())获取消息传递标签\n}\n\n?&gt;</code></pre>\n<p>producter 代码(producter.php)：</p>\n<pre><code class=\"language-php\">&lt;?php\ndate_default_timezone_set(\"Asia/Shanghai\");\n\n//配置信息 \n$configParams = array( \n    'host' =&gt; '127.0.0.1',  \n    'port' =&gt; '5672',  \n    'login' =&gt; 'guest',  \n    'password' =&gt; 'guest', \n    'vhost'=&gt;'/' \n);   \n\n$exchangeName = 'test'; //交换机名  可以不选择\n$routeKey = 'key1'; //路由键  如果vhost中不存在RouteKey中指定的队列名，则该消息会被抛弃\n\n//创建连接\n$connection = new AMQPConnection($configParams);   \nif (!$connection-&gt;connect()) {   \n    die(\"Cannot connection rabbitMq!\\n\");   \n}\n\n//创建channel\n$channel = new AMQPChannel($connection);   \n \n//创建交换机对象    \n$exchange = new AMQPExchange($channel);   \n$exchange-&gt;setName($exchangeName);    \n$exchange-&gt;setType(AMQP_EX_TYPE_DIRECT); //direct类型\n$exchange-&gt;setFlags(AMQP_DURABLE); //持久化\n\n//发送消息 \nfor($i=0; $i&lt;10; ++$i){\n    sleep(2);\n    //消息内容 \n    $message = \"Hello RabbitMq! send time:\".date(\"h:i:sa\");   \n    echo \"Send Message:\".$exchange-&gt;publish($message, $routeKey).\"\\n\";  \n}\n\n$connection-&gt;disconnect();\n?&gt;</code></pre>\n<p>这个运行结果就不一一截图了，有兴趣的可以自己尝试一下（还有其他类型的交换机）。</p>\n<hr/>\n<p>yii2中怎么使用rabbitMq呢？先要用composer 加载扩展包</p>\n<p>composer require php-amqplib/php-amqplib:* </p>\n<p>具体版本可以在此查询下面</p>\n<p><a href=\"https://packagist.org/packages/php-amqplib/php-amqplib\" title=\"https://packagist.org/packages/php-amqplib/php-amqplib\">https://packagist.org/packages/php-amqplib/php-amqplib</a></p>\n<p>引入包后，可以参照这篇博客-&gt;<a href=\"https://www.php.cn/blog/detail/14222.html\" title=\"YII2 框架如何使用rabbitMq\">YII2 框架如何使用rabbitMq</a>，要注意不要把消费者写成函数放到postman中请求，因为肯定会报“Error: Response timed out”，最好写成脚本运行。</p>\n<p></p>\n<p><span style=\"color:#1c7331;\">时间有限，我会抽空慢慢修改或增加关于rabbitMq的内容。</span></p>\n</div>\n</div>"}