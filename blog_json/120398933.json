{"blogid": "120398933", "writerAge": "码龄5年", "writerBlogNum": "22", "writerCollect": "34", "writerComment": "5", "writerFan": "5", "writerGrade": "2级", "writerIntegral": "290", "writerName": "衣-鱼", "writerProfileAdress": "writer_image\\profile_120398933.jpg", "writerRankTotal": "102268", "writerRankWeekly": "143103", "writerThumb": "7", "writerVisitNum": "11361", "blog_read_count": "2959", "blog_time": "于 2021-09-27 11:05:35 发布", "blog_title": "IO流详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#IO_1\">IO流</a></li><li><ul><li><a href=\"#IO_4\">IO流分类</a></li><li><a href=\"#FileInputStream_28\">FileInputStream</a></li><li><ul><li><a href=\"#_29\">输入流框架</a></li><li><a href=\"#_91\">相对路径</a></li><li><a href=\"#_97\">读取过程详解</a></li><li><a href=\"#available_170\">available()</a></li><li><a href=\"#skiplong_n_224\">skip(long n)</a></li></ul>\n</li><li><a href=\"#FileOutputStream_228\">FileOutputStream</a></li><li><ul><li><a href=\"#_231\">输入流框架</a></li></ul>\n</li><li><a href=\"#FileReader_241\">FileReader</a></li><li><a href=\"#FileWriter_294\">FileWriter</a></li><li><a href=\"#_298\">文件复制</a></li><li><ul><li><a href=\"#FileInputStream_FileOutputStream_301\">FileInputStream 、FileOutputStream</a></li><li><a href=\"#FileReader_FileWriter_365\">FileReader 、FileWriter</a></li></ul>\n</li><li><a href=\"#_425\">缓冲流</a></li><li><ul><li><a href=\"#BufferedReader_426\">BufferedReader</a></li></ul>\n</li><li><a href=\"#_481\">数据专属流</a></li><li><ul><li><a href=\"#DataOutputStream_482\">DataOutputStream</a></li><li><a href=\"#DataInputDtream_485\">DataInputDtream</a></li></ul>\n</li><li><a href=\"#_488\">标准输出流</a></li><li><ul><li><a href=\"#log__490\">日志框架log 输出方向</a></li></ul>\n</li><li><a href=\"#File_528\">File</a></li><li><a href=\"#_597\">目录拷贝</a></li><li><a href=\"#_ObjectOutputStream_ObjectInputStream_716\">对象流 ObjectOutputStream ObjectInputStream</a></li></ul>\n</li><li><a href=\"#IOProperties_750\">IO、Properties</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"IO_1\"></a>IO流</h1>\n<p><img alt=\" \" src=\"image\\e3c9789abf284f1aaa50475378b96eae.png\"/></p>\n<h2><a id=\"IO_4\"></a>IO流分类</h2>\n<ul><li><font color=\"blue\">以内存为参照物 </font><br/> - 往内存中去，输入流，读<br/> - 从内存中出，输出流，写</li><li><font color=\"blue\">读取方式不同</font><br/> - 按照字节读取数据，一次读取一个字节byte，相当于8个二进制位。这类流的读取方式是万能的，什么类型的文件都可以读取：文本文件、图片、声音文件、视频<br/> - 按照字符读取数据，一次读取一个字符，这种流是为了方便读取普通文本而存在的。这种流不能读取图片、声音、视频等文件，只能读取纯文本文件【word文档不可以，因为word有格式】</li></ul>\n<p><code>例：txt文件的内容：o中国o</code><br/> <code>【在Windows系统中：字母占一个字节、汉字占两个字节】 按照字节流读取：第一次：读取“o”；第二次：读取“中”字符的一半；第三次：读取“中”字符的另外一半。 按照字符流读取：第一次：读取“o”；第二次读取字符“中”。</code></p>\n<ul><li> <p>四大家族：以“Stream”结尾的都是字节流；以“reader”“writer”结尾的都是字符流</p> </li><li> <p>所有的流都实现了Java.io.Closeable接口，都有close()方法。流毕竟是一个管道，联通内存与硬盘，用完之后一定要关闭。</p>\n<ul><li>InputStream <font color=\"blue\">字节输入流</font></li><li>OutputStream <font color=\"blue\">字节输出流</font></li><li>Reader <font color=\"blue\">字符输入流</font></li><li>Writer <font color=\"blue\">字符输出流</font></li></ul> </li><li> <p>所有的输出流都是可刷新的，都有flush()方法。实现了java.io.Flushable接口。输出流在最终输出之后，一定记得flush()刷新，这个刷新表示管道当中剩余的数据强行输出完（清空管道），刷新的作用就是清空管道。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\118bece7d69e46efb7cd969430f1a531.png\"/><img alt=\"在这里插入图片描述\" src=\"image\\a6ee29a530904e7a84eba53ce7d49179.png\"/></p> </li></ul>\n<h2><a id=\"FileInputStream_28\"></a>FileInputStream</h2>\n<h3><a id=\"_29\"></a>输入流框架</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1df7d448e022475da041d3cf46444ad7.png\"/></p>\n<pre><code class=\"prism language-c\">package Advance<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">;</span>\n\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileInputStream<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileNotFoundException<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>IOException<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * java.io.FileInputStream：\n * \t\t文件字节输入流，万能\n * \t\t构建输入流框架\n * */</span>\npublic class FileInputStreamTest01 <span class=\"token punctuation\">{<!-- --></span>\n\tpublic <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//创建字节输入流对象</span>\n\t\t\t<span class=\"token comment\">//文件路径：E:\\Javatest 里面有一个temp.txt文档</span>\n\t\t\t<span class=\"token comment\">//编译器会自动把 \\ 变成 \\\\ ，因为java中 \\ 表示转义</span>\n\t\t\n\t\t\t<span class=\"token comment\">//FileInputStream fis = new FileInputStream(\"E:\\\\Javatest\\\\temp.txt\");  //处理异常</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">/*  //处理异常\n\t\t\ttry {\n\t\t\t\tFileInputStream fis = new FileInputStream(\"E:\\\\Javatest\\\\temp.txt\");\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}*/</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//关闭流：无论程序执行如何，最后程序都需要关闭——finally</span>\n\t\t\t<span class=\"token comment\">//将创建的流放到try，catch语句块外面</span>\n\t\t\tFileInputStream fis  <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\t\t\ttry <span class=\"token punctuation\">{<!-- --></span> \n\t\t\t\t fis <span class=\"token operator\">=</span> new <span class=\"token function\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\Javatest\\\\temp.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t \n\t\t\t\t <span class=\"token comment\">//读取信息</span>\n\t\t\t\t <span class=\"token keyword\">int</span> readData <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t  <span class=\"token comment\">//该方法是读取到的字节  读取到的字节本身 a的ASCII码</span>\n\t\t\t\t System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>readData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//读取该文档的第一个字节</span>\n\t\t\t\t \n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>FileNotFoundException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\t<span class=\"token comment\">//处理读取信息时的异常</span>\n\t\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>finally <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">//finally语句块可以确保流一定关闭</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fis<span class=\"token operator\">!=</span>null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>   <span class=\"token comment\">//关闭流的前提是：流不为空  ：避免空指针异常</span>\n\t\t\t\t\ttry <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\tfis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"_91\"></a>相对路径</h3>\n<ul><li>相对路径是从当前所在位置开始作为起点开始找。</li><li>编译器的默认当前路径：工程Project是当前的根<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a0f84e8097d249af8469bf0666dac91c.png\"/><img alt=\"在这里插入图片描述\" src=\"image\\91f97c57838549e2bfc331d7ae18d966.png\"/></li></ul>\n<h3><a id=\"_97\"></a>读取过程详解</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2d9755426ca2464d86f517e3aa371c82.png\"/></p>\n<pre><code class=\"prism language-c\">package Advance<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">;</span>\n\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileInputStream<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileNotFoundException<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>IOException<span class=\"token punctuation\">;</span>\n\npublic class FileInputStreamTest03 <span class=\"token punctuation\">{<!-- --></span>\n\tpublic <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//创建字节流</span>\n\t\t<span class=\"token comment\">//处理异常</span>\n\t\t<span class=\"token comment\">//关闭流</span>\n\t\tFileInputStream fis <span class=\"token operator\">=</span>null<span class=\"token punctuation\">;</span>\n\t\ttry <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//设置相对路径 ：相对路径是从当前所在位置开始作为起点开始找</span>\n\t\t\t<span class=\"token comment\">//编译器的默认当前路径：工程Project是当前的根</span>\n\t\t\t\n\t\t\t fis <span class=\"token operator\">=</span> new <span class=\"token function\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/source/temp.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t \n\t\t\t <span class=\"token comment\">//读取信息: 采用byte数组 一次读取多个字节 最多读取数组.length个字节</span>\n\t\t\t<span class=\"token comment\">/*\n\t\t\t * byte[] bytes = new byte[4];\t\t//一次最多读取4个字节\n\t\t\t *  int readCount = fis.read(bytes);   //读取到的字节数量，不是字节本身\n\t\t\t System.out.println(\"第一次读取到的字节数——\"+readCount);\t\t//4\n\t\t\t //此时内存的byte数组里面存有数据，转为String类型\n\t\t\t //String(bytes);\n\t\t\t System.out.println(new String(bytes));\t\t//abcd\n\t\t\t \n\t\t\t readCount = fis.read(bytes);\n\t\t\t System.out.println(\"第二次读取到的字节数——\"+readCount);\t\t//2\n\t\t\t System.out.println(new String(bytes));\t\t//efcd\n\t\t\t //程序期望输出整个文件内容\n\t\t\t//byte数组转String，从下标0开始，到下标readCount结束\n\t\t\t System.out.println(new String(bytes,0,readCount));\t\t\n\t\t\t \n\t\t\t readCount = fis.read(bytes);\n\t\t\t System.out.println(\"第三次读取到的字节数——\"+readCount);\t\t//-1\n\t\t\t System.out.println(new String(bytes,0,readCount));\t\t//没有内容\n\t\t\t */</span>\n\t\t\t \n\t\t\t <span class=\"token comment\">//读取信息: 采用byte数组 一次读取多个字节 最多读取数组.length个字节</span>\n\t\t\t byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> new byte<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//一次最多读取4个字节</span>\n\t\t\t <span class=\"token keyword\">int</span> readCount <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>readCount <span class=\"token operator\">=</span>fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>readCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t <span class=\"token punctuation\">}</span>\n\t\t\t \n\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>FileNotFoundException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>finally <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fis <span class=\"token operator\">!=</span>null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\t\t<span class=\"token comment\">//流不为空，避免空指针异常</span>\n\t\t\t\ttry <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tfis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e0bcdbcee7c646308188cc024398dd51.png\"/></p>\n<h3><a id=\"available_170\"></a>available()</h3>\n<ul><li>int available(); 返回流当中剩余没有读到的字节数量</li><li>当数据没有读取的时候，调用该方法，获得的是总字节数量，那么在建立byte数组时，可以设置数组长度来匹配文件字节数。但是这种方法不适合大的文件，因为byte数组不能太大。</li></ul>\n<pre><code class=\"prism language-c\">package Advance<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">;</span>\n\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileInputStream<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileNotFoundException<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>IOException<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n * FileInputStream其他的常用方法\n * \t\tint available();   返回流当中剩余没有读到的字节数量\n * \t\tlong skip(long n)； 跳过几个字节不读\n * \n * */</span>\npublic class FileInputStreamTest04 <span class=\"token punctuation\">{<!-- --></span>\n\tpublic <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//创建流</span>\n\t\t<span class=\"token comment\">//处理异常</span>\n\t\t<span class=\"token comment\">//关闭流</span>\n\t\tFileInputStream fis <span class=\"token operator\">=</span>null<span class=\"token punctuation\">;</span>\n\t\ttry <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tfis <span class=\"token operator\">=</span> new <span class=\"token function\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/source/temp.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总字节数——\"</span><span class=\"token operator\">+</span>fis<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//读取信息 </span>\n\t\t\t<span class=\"token comment\">//读取一个字节</span>\n\t\t\t<span class=\"token keyword\">int</span> readByte <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//剩余多少字节</span>\n\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"剩下字节数——\"</span><span class=\"token operator\">+</span>fis<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>FileNotFoundException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>finally <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fis<span class=\"token operator\">!=</span>null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ttry <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tfis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"skiplong_n_224\"></a>skip(long n)</h3>\n<ul><li>long skip(long n)； 跳过几个字节不读</li></ul>\n<h2><a id=\"FileOutputStream_228\"></a>FileOutputStream</h2>\n<ul><li>文件字节输出流，负责写数据</li></ul>\n<h3><a id=\"_231\"></a>输入流框架</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5caf1aed493d442e8415fbe77e790a9e.png\"/></p>\n<ul><li>在文件中写入字符串时，使用到<strong>字符串转byte方法：getBytes()；</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\589c1f917e3746f894ee51cd6acf9f47.png\"/></li><li>在java编译器相对路径写入信息时，如果指定的文件不存在，系统会先新建一个文件，再进行写入。当写在根目录下时，发现目录栏没有新建该文件，此时刷新一下就可以。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b89537637eb945a38bf9d7304569b807.png\"/></li></ul>\n<h2><a id=\"FileReader_241\"></a>FileReader</h2>\n<ul><li>文件字符输入流：只能读取普通文本</li><li>读取文本时，比较方便、快捷</li><li>FileReader使用的是<font color=\"blue\">char数组</font></li></ul>\n<pre><code class=\"prism language-c\">package Advance<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">;</span>\n\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileNotFoundException<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileReader<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>IOException<span class=\"token punctuation\">;</span>\n\npublic class FileReaderTest01 <span class=\"token punctuation\">{<!-- --></span>\n\tpublic <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//创建字符流</span>\n\t\tFileReader fr <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\t\t\ttry <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tfr<span class=\"token operator\">=</span> new <span class=\"token function\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/source/tempChar.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">//读取信息</span>\n\t\t\t\t<span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> c <span class=\"token operator\">=</span> new <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//一次读取4个字符</span>\n\t\t\t\t<span class=\"token keyword\">int</span> readCount <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>readCount<span class=\"token operator\">=</span>fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">//下面两行代码，输出结果一致。笔者没有弄懂</span>\n\t\t\t\t\t<span class=\"token comment\">//按理来说，如果最后一个数组存入的数据不满数组的长度，那么readCount 到之后的数组</span>\n\t\t\t\t\t<span class=\"token comment\">//之内存储的应该是上一次数组存储的元素</span>\n\t\t\t\t\t<span class=\"token comment\">//那么，输出c时，上一次的数组元素依旧会输出；但是输出从0到readcount的长度的数组则不会</span>\n\t\t\t\t\t<span class=\"token comment\">//但是这两行代码输出结果一样</span>\n\t\t\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token comment\">//System.out.print(new String(c,0,readCount));</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>FileNotFoundException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\tfinally <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">//关闭流</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fr <span class=\"token operator\">!=</span>null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\ttry <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\tfr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"FileWriter_294\"></a>FileWriter</h2>\n<ul><li>字符输出流<br/> -<font color=\"blue\"> 在FileOutputStream中，写信息时，需要进行String转换为byte类型，再将byte数组写进去。而在FileWriter中的writer方法可以直接接收字符串，方便程序的写入<br/> <img alt=\"在这里插入图片描述\" src=\"image\\bd7ced112b8a4ded9a912e4cc7563632.png\"/></font></li></ul>\n<h2><a id=\"_298\"></a>文件复制</h2>\n<ul><li>文件复制原理:想让文件从D盘移到C盘，需要利用内存作中介，内存一边从D盘读取，一边从C盘写出。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\353dfd4024344cb9800890cf9fd3f8c1.png\"/></li></ul>\n<h3><a id=\"FileInputStream_FileOutputStream_301\"></a>FileInputStream 、FileOutputStream</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\bc5a3ba893e34962894a8fb0fc7b51a1.png\"/></p>\n<pre><code class=\"prism language-c\">package Advance<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">;</span>\n\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileInputStream<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileNotFoundException<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileOutputStream<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>IOException<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//使用FileInputStream和FlieOutputStream完成文件的拷贝</span>\n\t<span class=\"token comment\">//拷贝的过程是一边读，一边写</span>\npublic class Copy01 <span class=\"token punctuation\">{<!-- --></span>\n\tpublic <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//创建流</span>\n\t\tFileInputStream fis <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\t\tFileOutputStream fos <span class=\"token operator\">=</span>null<span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//处理异常</span>\n\t\ttry <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tfis <span class=\"token operator\">=</span> new <span class=\"token function\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"H:\\\\temp.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tfos<span class=\"token operator\">=</span> new <span class=\"token function\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\temp.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//核心：边读边写</span>\n\t\t\tbyte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span>new byte<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//1mb  一次最多拷贝1MB</span>\n\t\t\t<span class=\"token keyword\">int</span> readCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>readCount<span class=\"token operator\">=</span>fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tfos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>readCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//刷新</span>\n\t\t\tfos<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>FileNotFoundException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>finally <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//分开处理异常</span>\n\t\t\t<span class=\"token comment\">//一起处理，当一个异常，会影响另外一个关闭</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fis<span class=\"token operator\">!=</span>null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ttry <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tfis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fos<span class=\"token operator\">!=</span>null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ttry <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tfos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"FileReader_FileWriter_365\"></a>FileReader 、FileWriter</h3>\n<pre><code class=\"prism language-c\">package Advance<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">;</span>\n\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileNotFoundException<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileReader<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileWriter<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>IOException<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n * 使用FileReader、FileWriter进行拷贝\n * */</span>\npublic class Copy02 <span class=\"token punctuation\">{<!-- --></span>\n\tpublic <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//建立</span>\n\t\tFileReader fr <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\t\tFileWriter fw <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\t\t\n\t\ttry <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tfr <span class=\"token operator\">=</span>new <span class=\"token function\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"H:\\\\tempChar.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tfw<span class=\"token operator\">=</span> new <span class=\"token function\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\tempChar.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//复制</span>\n\t\t\t<span class=\"token keyword\">int</span> readCount <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> c <span class=\"token operator\">=</span> new <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//char是两个字节 1MB</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>readCount <span class=\"token operator\">=</span>fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tfw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>readCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//刷新</span>\n\t\t\tfw<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>FileNotFoundException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>finally <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fr<span class=\"token operator\">!=</span>null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ttry <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tfr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fw<span class=\"token operator\">!=</span>null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ttry <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tfw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\t\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"_425\"></a>缓冲流</h2>\n<h3><a id=\"BufferedReader_426\"></a>BufferedReader</h3>\n<ul><li>带有缓冲区的字符输入流</li><li>使用这个流的时候不需要自定义char数组、byte数组。自带缓冲</li><li>由于Buffered构造方法需要传入一个reader类型的参数，所以在创建Buffered时候，需要创建一个reader类型的参数，传入是参数对应的流属于结点流。当需要Buffered处理非Reader类型的数据时，需要采用格式转换，转换为reader类型的数据，再传入Buffered。</li><li>BufferReader优点： \n  <ul><li><font color=\"blue\">读取一行文字：readLine()；<br/> <img alt=\"在这里插入图片描述\" src=\"image\\10540abbf1d8466f89d72a63443a0833.png\"/><img alt=\"在这里插入图片描述\" src=\"image\\8e35722ead9b497191ced77b56dfaa07.png\"/></font></li></ul> </li></ul>\n<pre><code class=\"prism language-c\">package Advance<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">;</span>\n\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileInputStream<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileNotFoundException<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileReader<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>InputStreamReader<span class=\"token punctuation\">;</span>\n\npublic class BufferedReaderTest01 <span class=\"token punctuation\">{<!-- --></span>\n\tpublic <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> throws Exception <span class=\"token punctuation\">{<!-- --></span>\n\t\t\n\t\tFileReader reader <span class=\"token operator\">=</span>new <span class=\"token function\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/Advance/io/Copy02.java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//当一个流的构造方法需要一个流，那么传入的这个流称为节点流</span>\n\t\t<span class=\"token comment\">//外部负责包装的流：包装流、处理流</span>\n\t\t<span class=\"token comment\">//FileReader：节点流   ； BufferedReader ：处理流。</span>\n\t\tBufferedReader br <span class=\"token operator\">=</span> new <span class=\"token function\">BufferedReader</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//读取信息</span>\n\t\t<span class=\"token comment\">//使用readLine 读取一行信息</span>\n\t\tString s <span class=\"token operator\">=</span>null<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">=</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t\n\t\t<span class=\"token comment\">//关闭流</span>\n\t\t<span class=\"token comment\">//对应包装流来说，只需要关闭最外层的流就可以，里面的结点流会自动关闭</span>\n\t\tbr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===============================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//BUfferReader需要传入一个Reader类型的参数</span>\n\t\t<span class=\"token comment\">//当需要传入的数据属于字节流时，需要使用转换</span>\n\t\tFileInputStream fis <span class=\"token operator\">=</span> new <span class=\"token function\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/Advance/io/Copy01.java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//转换类型</span>\n\t\tInputStreamReader isr<span class=\"token operator\">=</span> new <span class=\"token function\">InputStreamReader</span><span class=\"token punctuation\">(</span>fis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tBufferedReader bfr <span class=\"token operator\">=</span> new <span class=\"token function\">BufferedReader</span><span class=\"token punctuation\">(</span>isr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//读取信息......</span>\n\t\t\n\t\tbfr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"_481\"></a>数据专属流</h2>\n<h3><a id=\"DataOutputStream_482\"></a>DataOutputStream</h3>\n<ul><li>这个流可以将数据连同数据类型一并写入文件。该文件不是普通文档，使用记事本打不开。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\895e478314964512b16831d4971a5ae7.png\"/></li></ul>\n<h3><a id=\"DataInputDtream_485\"></a>DataInputDtream</h3>\n<ul><li>DataOutputStream写入的文件，只能使用DataInputDtream读取，并且读取的时候需要提前知道写入的顺序。读的顺序需要和写的顺序一致，才能正常的取出数据。加密!!</li><li><img alt=\"在这里插入图片描述\" src=\"image\\ab6defa283934221a2b74174995a0f89.png\"/></li></ul>\n<h2><a id=\"_488\"></a>标准输出流</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\be3f627b41e44726bc014cd6847c01b8.png\"/></p>\n<h3><a id=\"log__490\"></a>日志框架log 输出方向</h3>\n<pre><code class=\"prism language-c\">package Advance<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">;</span>\n\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileNotFoundException<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileOutputStream<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>PrintStream<span class=\"token punctuation\">;</span>\n\npublic class PrintStreamTest01 <span class=\"token punctuation\">{<!-- --></span>\n\tpublic <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> throws Exception <span class=\"token punctuation\">{<!-- --></span>\n\t\tPrintStream ps <span class=\"token operator\">=</span>System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">;</span>\n\t\tps<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//标准输出流不需要手动关闭</span>\n\t\t\n\t\t<span class=\"token comment\">/**\n\t\t * System类使用过的方法\n\t\t * System.gc();\t\t运行垃圾回收器。\n\t\t *\tSystem.currentTimeMillis()\t\t 返回以毫秒为单位的当前时间。\n\t\t *\tSystem.exit(status);\t\t终止当前正在运行的 Java 虚拟机。\n\t\t *\tSystem.arraycopy(src, srcPos, dest, destPos, length);\t 从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。\n\t\t * \n\t\t * */</span>\n\t\t\n\t\t<span class=\"token comment\">//标准输出流更改输出方向</span>\n\t\t<span class=\"token comment\">//标准输出流不再指向控制台，指向log文件</span>\n\t\tPrintStream printStream <span class=\"token operator\">=</span> new <span class=\"token function\">PrintStream</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//修改输出方向，输出方向修改为log文件</span>\n\t\tSystem<span class=\"token punctuation\">.</span><span class=\"token function\">setOut</span><span class=\"token punctuation\">(</span>printStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//重新分配“标准”输出流。</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"File_528\"></a>File</h2>\n<ul><li>File ：<strong>文件和目录路径名的抽象表达形式</strong>。</li><li>一个File可能对应的是目录，也可能对应的是文件</li><li>File类和四大家族没有关系，所以File类不能完成文件的读和写</li><li>File常用方法： \n  <ul><li>File(String pathname） 构造方法： 通过将给定路径名字符串转换为抽象路径名来创建一个新 File 实例。</li><li>boolean exists() 测试此抽象路径名表示的文件或目录是否存在。</li><li>String getAbsolutePath() 返回此抽象路径名的绝对路径名字符串。</li><li>String getParent() 返回此抽象路径名父目录的路径名字符串；如果此路径名没有指定父目录，则返回 null。</li><li>File getParentFile() 返回此抽象路径名父目录的抽象路径名；如果此路径名没有指定父目录，则返回 null。</li><li>String getName() 返回由此抽象路径名表示的文件或目录的名称。</li><li>File[] listFiles() 返回一个抽象路径名数组，这些路径名表示此抽象路径名表示的目录中的文件。</li></ul> </li></ul>\n<pre><code class=\"prism language-c\">import java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">;</span>\n\npublic class FileTest01 <span class=\"token punctuation\">{<!-- --></span>\n\tpublic <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> throws Exception<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//创建一个File对象</span>\n\t\tFile f1 <span class=\"token operator\">=</span> new <span class=\"token function\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\Javatest\\\\file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//判断指定file是否存在</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//如果指定file不存在，</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>f1<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">//以文件的形式创建出来</span>\n\t\t\t<span class=\"token comment\">//f1.createNewFile();</span>\n\t\t\t\t<span class=\"token comment\">//以目录形式创建出来</span>\n\t\t\tf1<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\tFile f2 <span class=\"token operator\">=</span> new <span class=\"token function\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h:\\\\file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//获取文件的父路径</span>\n\t\tString parentPath <span class=\"token operator\">=</span> f2<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>parentPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//获取绝对路径</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取的绝对路径——\"</span><span class=\"token operator\">+</span>f2<span class=\"token punctuation\">.</span><span class=\"token function\">getParentFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//获得文件名</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件名\"</span><span class=\"token operator\">+</span>f1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//判断file是否是一个目录</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//判断file是否是一个文件</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//获得文件最后一次修改时间</span>\n\t\t<span class=\"token keyword\">long</span> haomiao <span class=\"token operator\">=</span> f1<span class=\"token punctuation\">.</span><span class=\"token function\">lastModified</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//毫秒是从1970年到现在的总时间</span>\n\t\t\t<span class=\"token comment\">//转换日期</span>\n\t\tDate time <span class=\"token operator\">=</span> new <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>haomiao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//日期格式话</span>\n\t\tSimpleDateFormat sdf <span class=\"token operator\">=</span> new <span class=\"token function\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss SSS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tString strtime <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//获取文件大小</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//获取当前目录下的所有子文件</span>\n\t\tFile<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> files <span class=\"token operator\">=</span> f1<span class=\"token punctuation\">.</span><span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>File f <span class=\"token operator\">:</span>files<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"_597\"></a>目录拷贝</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\366ddd0c0d644046ae10092e2921165d.png\"/></p>\n<pre><code class=\"prism language-c\">package homework<span class=\"token punctuation\">;</span>\n\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileInputStream<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileNotFoundException<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileOutputStream<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>IOException<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 将E:\\Javatest文件夹的东西拷贝到H盘\n * \t\tFileInputStream \n * \t\tFileOutputDtream\n *\t\tFile\n * */</span>\n\npublic class FileCopy <span class=\"token punctuation\">{<!-- --></span>\n\tpublic <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//拷贝源</span>\n\t\tFile srcFile <span class=\"token operator\">=</span> new <span class=\"token function\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\Javatest\\\\file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//拷贝目标</span>\n\t\tFile desFile <span class=\"token operator\">=</span> new <span class=\"token function\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"H:\\\\\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t\t<span class=\"token comment\">//调用方法拷贝</span>\n\t\t<span class=\"token function\">copyDir</span><span class=\"token punctuation\">(</span>srcFile<span class=\"token punctuation\">,</span>desFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t\n\t<span class=\"token comment\">/**\n\t * 拷贝目录方法\n\t * @param srcFile ：拷贝源\n\t * @param desFile\t：拷贝目标\n\t */</span>\n\tprivate <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">copyDir</span><span class=\"token punctuation\">(</span>File srcFile<span class=\"token punctuation\">,</span> File desFile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//递归停止条件：如果是文件的话，递归结束</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>srcFile<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//确定是文件，进行拷贝：但是拷贝时是递归到了最后一层，将文件拷贝到其他盘时</span>\n\t\t\t<span class=\"token comment\">//也需要建立对应的路径</span>\n\t\t\t<span class=\"token comment\">//建立完路径之后，相当于在目的准备好了房子 ，下一步就是搬文件</span>\n\t\t\t\t\t\t<span class=\"token comment\">//FileInputStream FileOutputStream</span>\n\t\t\t\t\t\tFileInputStream fs <span class=\"token operator\">=</span>null<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tFileOutputStream fos <span class=\"token operator\">=</span>null<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\ttry <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t\tfs <span class=\"token operator\">=</span>new <span class=\"token function\">FileInputStream</span><span class=\"token punctuation\">(</span>srcFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token comment\">//System.out.println(\"========\"+desFile.getAbsolutePath()+srcFile.getAbsolutePath().substring(12));</span>\n\t\t\t\t\t\t\tfos<span class=\"token operator\">=</span> new <span class=\"token function\">FileOutputStream</span><span class=\"token punctuation\">(</span>desFile<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>srcFile<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<span class=\"token comment\">//拷贝</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">int</span> readCount <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\tbyte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> new byte<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>readCount<span class=\"token operator\">=</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t\t\tfos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>readCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<span class=\"token comment\">//刷新</span>\n\t\t\t\t\t\t\tfos<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>FileNotFoundException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>finally <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fs<span class=\"token operator\">!=</span>null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t\t\ttry <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t\t\t\tfs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\t\t\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fos<span class=\"token operator\">!=</span>null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t\t\ttry <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t\t\t\tfos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\t\t\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//获取源下面的子目录</span>\n\t\tFile<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> srcFiles <span class=\"token operator\">=</span> srcFile<span class=\"token punctuation\">.</span><span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//System.out.println(srcFiles.length);</span>\n\t\t\n\t\t\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>File f <span class=\"token operator\">:</span> srcFiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\t<span class=\"token comment\">//取出源文件夹中的子文件\t\t\t</span>\n\t\t\t\t\t\t\t\t<span class=\"token comment\">//如果File是文件夹的话，在目标目录新建对应目录</span>\n\t\t\t\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//System.out.println(\"获取文件的绝对路径——\"+f.getAbsoluteFile());</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//\tE:\\Javatest\\file\\a\t\t源目录</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//\tH:\\file\t\t\t\t\t\t\t目标目录</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//实际上，拷贝就是将目标文件夹放到目标地，那么拷贝完成后</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//新的拷贝后的路径，就是目标地+目标文件</span>\n\t\t\t\t\t\t\t\t\tString srcDir <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//System.out.println(srcDir.substring(12));\t\t//file\\a  截取字符</span>\n\t\t\t\t\t\t\t\t\tString desDir <span class=\"token operator\">=</span>desFile<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>srcDir<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>desDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//新建</span>\n\t\t\t\t\t\t\t\t\tFile newFile <span class=\"token operator\">=</span> new <span class=\"token function\">File</span><span class=\"token punctuation\">(</span>desDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newFile<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t\t\t\t\tnewFile<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//递归</span>\n\t\t\t<span class=\"token function\">copyDir</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span>desFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"_ObjectOutputStream_ObjectInputStream_716\"></a>对象流 ObjectOutputStream ObjectInputStream</h2>\n<ul><li>对象的序列化 反序列化 。</li><li>参与序列化和反序列化的对象必须实现<strong>Serializable</strong>接口。否则出现NotSerializableException异常。<strong>Serializable</strong>接口只是一个标志接口，这个接口没有代码，起到了标识作用，java虚拟机看到这个类实现了这个接口之后，会为该类自动生成一个<strong>序列化版本号</strong>。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f5515d4b914a48fa9cd77cf65daa66ef.png\"/><img alt=\"在这里插入图片描述\" src=\"image\\9925b7b334724fa7a7371bf5cc7b690e.png\"/></li></ul>\n<pre><code class=\"prism language-c\">package Advance<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">;</span>\n\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileInputStream<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>ObjectInputStream<span class=\"token punctuation\">;</span>\n\npublic class ObjectOutputStreamTest02 <span class=\"token punctuation\">{<!-- --></span>\n\tpublic <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> throws Exception<span class=\"token punctuation\">{<!-- --></span>\n\t\tObjectInputStream ois <span class=\"token operator\">=</span> new <span class=\"token function\">ObjectInputStream</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/source/students\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//反序列化 读</span>\n\t\tObject obj <span class=\"token operator\">=</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//反序列化一个学生对象，调用学生对象的toString方法</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tois<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<ul><li>当存储多个对象反序列话、序列话时，可以使用集合。</li><li>当对于对象的某个属性，不希望它序列化、反序列化时，添加<strong>transient</strong>关键字<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ea0ed056c013457fbdc3acc9885b874e.png\"/><img alt=\"在这里插入图片描述\" src=\"image\\ebd3aa31e920412997a62ce79e7f1e4f.png\"/></li><li>在序列化一次之后【字节码文件】，再次对代码进行修改【生成新的字节码文件】，反序列化会出现异常——序列化版本号的作用！ \n  <ul><li><strong>优点</strong>： java语言中进行类的区分时，先根据类名进行区分，如果类名一样，再依靠序列化版本号进行区分。——不同的开发人员编写的类名一致时、内容不同时，这时序列化版本号就发挥作用了，对于java虚拟机来说，当两个类都实现了Serialiable接口后，就具备了默认的版本号，两个同名类的版本号不一致，就可以区分出来。</li><li><strong>缺陷</strong>：自动化生成版本号，一旦代码确定生成版本号，不可更改。一旦修改，必定会重新编译，此时生成全新的序列化版本号，java虚拟机会认为是一个全新的类。</li><li>最终建议：序列化版本号手写赋值，不建议自动生成<br/> <img alt=\"在这里插入图片描述\" src=\"image\\22551d18eeac4eff936916a802a281be.png\"/></li></ul> </li></ul>\n<h1><a id=\"IOProperties_750\"></a>IO、Properties</h1>\n<ul><li>Io文件的读和写；Properties是一个map集合，<strong>Key和Value都是String类型，key重复时，会异常报错；不要写中文</strong>。</li><li>当value对应的是类的路径是，采用<strong>点</strong>，而不是反斜杠。</li><li>无需更改代码就可以获得动态信息。在编程时，经常更改的数据，可以单独写到一个文档中，使用程序动态读取，将来只需要更改这个文件的内容，java代码不需要更改，不需要重写编译，服务器也不需要重启，就可以拿到动态信息。类似于以上机制的文件被称为<strong>配置文件</strong>。<br/> <img alt=\"\" src=\"image\\2e9b4e5209714ad28ac49fdce134f86e.png\"/></li></ul>\n<pre><code class=\"prism language-c\">配置文件的格式为：\n\tkey<span class=\"token operator\">=</span>value\n\tkey<span class=\"token operator\">=</span>value\n\t这种配置文件被称为属性配置文件。\njava中规范要求：属性配置文件建议以properties结尾，非强制要求。\n在属性配置文件中，key重复时，会异常报错；使用“#”进行注释\n\n</code></pre>\n<ul><li></li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\592dfeb4a3484ae5bfc8117b0d08a02d.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}