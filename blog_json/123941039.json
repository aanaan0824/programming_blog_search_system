{"blogid": "123941039", "writerAge": "码龄5年", "writerBlogNum": "14", "writerCollect": "39", "writerComment": "1", "writerFan": "7", "writerGrade": "2级", "writerIntegral": "169", "writerName": "qxy_1218", "writerProfileAdress": "writer_image\\profile_123941039.jpg", "writerRankTotal": "77373", "writerRankWeekly": "120384", "writerThumb": "9", "writerVisitNum": "14921", "blog_read_count": "4637", "blog_time": "于 2022-04-03 18:12:12 发布", "blog_title": "BIO，NIO，AIO的区别", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><span style=\"color:#fe2c24;\"><strong>BIO，NIO和AIO是Java网络编程的三种模型</strong></span></p>\n<p>BIO：同步并阻塞，服务实现模式为一个连接对应一个线程，即客户端发送一个连接，服务端要有一个线程来处理。如果连接多了，线程数量不够，就只能等待，即会发生阻塞。</p>\n<p>NIO：同步非阻塞，服务实现模式是一个线程可以处理多个连接，即客户端发送的连接都会注册到多路复用器上，然后进行轮询连接，有I/O请求就处理</p>\n<p>AIO：异步非阻塞，引入了异步通道，采用的是proactor模式，特点是：有效的请求才启动线程，先有操作系统完成在通知服务端</p>\n<p></p>\n<p><span style=\"color:#fe2c24;\"><strong>应用场景：</strong></span></p>\n<p>BIO：适用连接数目比较小且固定的架构，对服务器要求比较高，并发局限于应用中</p>\n<p>NIO：适用连接数目多且连接比较短的架构，如：聊天服务器，弹幕系统等，编程比较复杂</p>\n<p>AIO：适用连接数目多且连接长的架构，如相册服务器</p>\n<p></p>\n<p><strong><span style=\"color:#fe2c24;\">BIO和NIO的区别</span></strong></p>\n<p>1.BIO主要是以I/O流的形式处理数据；NIO以I/O块（buffer）的形式处理数据，效率：块&gt;流</p>\n<p>2.BIO是阻塞的，NIO是非阻塞的</p>\n<p>3.BIO主要是以字节流和字符流操作，NIO是基于channel（通道）、buffer（缓冲区）操作的；selector（选择器）是用来监听channel的</p>\n<p>4.BIO是单向的，要么是输入流要么是输出流，NIO是双向的，可以从channel往buffer读写数据，同时buffer也可以向channel读写数据</p>\n<p></p>\n<p><strong><span style=\"color:#fe2c24;\">NIO的三大核心流程图</span></strong></p>\n<p><img alt=\"\" height=\"446\" src=\"image\\40af9ae2841e4a9fb9fecb0c23c1590b.png\" width=\"718\"/></p>\n<p> </p>\n<p>selector（选择器），channel（通道），buffer（缓冲区）</p>\n<p>从图可以看出，一个线程对应selector，selector对应三个channel，channel又对应buffer（双向）。程序切换到哪个channel取决于event事件决定，selector会根据事件去切换channel。</p>\n<p>buffer是一个内存块，底层有一个数组</p>\n<p></p>\n</div>\n</div>"}