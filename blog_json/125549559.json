{"blogid": "125549559", "writerAge": "码龄5年", "writerBlogNum": "82", "writerCollect": "612", "writerComment": "73", "writerFan": "5306", "writerGrade": "5级", "writerIntegral": "1830", "writerName": "熊思宇", "writerProfileAdress": "writer_image\\profile_125549559.jpg", "writerRankTotal": "9706", "writerRankWeekly": "1170", "writerThumb": "149", "writerVisitNum": "238964", "blog_read_count": "1153", "blog_time": "已于 2022-08-29 14:54:11 修改", "blog_title": "C# 读写自定义的Config文件", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>一、前言</h1>\n<p>在软件开发中，经常用到设置这样的功能，如果设置中的功能不多，用 Json、XML 这样的数据结构存储非常的麻烦，一个字段的读写，就要写大量的代码，例如 Json 要写实体类才能进行读写，假设其中一个功能不用，这个字段所有相关的引用都要进行删除和修改，使用 ini 这样的方式，现在几乎没几个人用了，于是我决定用微软自带的Config文件方式。</p>\n<p></p>\n<p>于是搜索了一下自定义Config文件，发现网上大部分帖子都是读写 “软件名.exe.config” 文件，没什么用，和我设计需求不符合，于是我自己写了一个。</p>\n<p></p>\n<h1>二、添加config文件</h1>\n<p>可以使用VS自带的添加功能，例如</p>\n<p><img alt=\"\" height=\"416\" src=\"image\\af64b1f0cbd646aca325edc859bad308.png\" width=\"600\"/></p>\n<p>当然也可以新建一个文本文档，然后改后缀名，再加入内容，都是一样的。</p>\n<p>我在软件的根目录里新建了一个Config文件夹，就将配置文件放在这里面了</p>\n<p><img alt=\"\" height=\"129\" src=\"image\\e81f2d922db54270af7265bc12ee0d30.png\" width=\"300\"/></p>\n<p>配置文件的名字，这里可以添加多个配置文件</p>\n<p><img alt=\"\" height=\"113\" src=\"image\\dc0635aec2bf4d20a7cc1982d0e48729.png\" width=\"300\"/></p>\n<p>配置文件内容如下：</p>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;configuration&gt;\n  &lt;appSettings&gt;\n    &lt;add key=\"COM1\" value=\"我是一个串口号\" /&gt;\n  &lt;/appSettings&gt;\n&lt;/configuration&gt;</code></pre>\n<p></p>\n<h1>三、读写配置文件</h1>\n<p>我们新建一个 Winform 项目，然后新建一个 ConfigHelper.cs 类</p>\n<pre><code class=\"language-cs\">using System.Configuration;\n\nnamespace Utils\n{\n    public class ConfigHelper\n    {\n        private string ConfigPath = string.Empty;\n\n        /// &lt;summary&gt;\n        /// 获取配置文件指定的Key\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"key\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public string GetConfigKey(string key)\n        {\n            Configuration ConfigurationInstance = ConfigurationManager.OpenMappedExeConfiguration(new ExeConfigurationFileMap()\n            {\n                ExeConfigFilename = ConfigPath\n            }, ConfigurationUserLevel.None);\n\n            if (ConfigurationInstance.AppSettings.Settings[key] != null)\n                return ConfigurationInstance.AppSettings.Settings[key].Value;\n            else\n                return string.Empty;\n        }\n\n        /// &lt;summary&gt;\n        /// 设置配置文件指定的Key，如果Key不存在则添加\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"key\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"vls\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public bool SetConfigKey(string key, string vls)\n        {\n            try\n            {\n                Configuration ConfigurationInstance = ConfigurationManager.OpenMappedExeConfiguration(new ExeConfigurationFileMap()\n                {\n                    ExeConfigFilename = ConfigPath\n                }, ConfigurationUserLevel.None);\n\n                if (ConfigurationInstance.AppSettings.Settings[key] != null)\n                    ConfigurationInstance.AppSettings.Settings[key].Value = vls;\n                else\n                    ConfigurationInstance.AppSettings.Settings.Add(key, vls);\n\n                ConfigurationInstance.Save(ConfigurationSaveMode.Modified);\n                ConfigurationManager.RefreshSection(\"appSettings\");\n                return true;\n            }\n            catch\n            {\n                return false;\n            }\n        }\n\n\n        public ConfigHelper(string configPath)\n        {\n            ConfigPath = configPath;\n        }\n    }\n}\n</code></pre>\n<p>上面的代码可以看到，我将配置文件的路径参数加入到了ConfigHelper的构造函数中去了，这样假设有个多个配置文件，直接实例化就好了。读写互相不相影响。</p>\n<p></p>\n<p><strong><span style=\"color:#fe2c24;\">Form1 界面中我就添加了一个按钮，没有其他的控件</span></strong>，界面就不展示了，代码如下</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Windows.Forms;\nusing Utils;\n\nnamespace Test2\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\n        private ConfigHelper ConfigHelpers = null;\n\n        private void Form1_Load(object sender, EventArgs e)\n        {\n            string configPath = Application.StartupPath + \"\\\\Config\\\\SystemInfo.config\";\n            ConfigHelpers = new ConfigHelper(configPath);\n        }\n\n        private void button1_Click(object sender, EventArgs e)\n        {\n            //读取Key\n            //string value = ConfigHelpers.GetConfigKey(\"COM1\");\n            //Console.WriteLine(value);\n\n            //设置Key\n            bool result = ConfigHelpers.SetConfigKey(\"游戏名\", \"XX信条\");\n\n            Console.WriteLine(\"执行完毕\");\n        }\n    }\n}\n</code></pre>\n<p>读取Key</p>\n<pre><code class=\"language-cs\">string value = ConfigHelpers.GetConfigKey(\"COM1\");</code></pre>\n<p> 设置Key</p>\n<pre><code class=\"language-cs\">bool result = ConfigHelpers.SetConfigKey(\"游戏名\", \"XX信条\");</code></pre>\n<p></p>\n<p></p>\n<h1 id=\"%E7%BB%93%E6%9D%9F\">结束</h1>\n<p>如果这个帖子对你有用，欢迎 关注 + 点赞 + 留言，谢谢</p>\n<p>end</p>\n</div>\n</div>"}