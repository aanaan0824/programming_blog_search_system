{"blogid": "124159035", "writerAge": "码龄3年", "writerBlogNum": "126", "writerCollect": "70", "writerComment": "24", "writerFan": "13", "writerGrade": "4级", "writerIntegral": "1425", "writerName": "云闲不收", "writerProfileAdress": "writer_image\\profile_124159035.jpg", "writerRankTotal": "15848", "writerRankWeekly": "17673", "writerThumb": "57", "writerVisitNum": "53472", "blog_read_count": "4382", "blog_time": "已于 2022-05-15 20:26:46 修改", "blog_title": "thinkphp6教程笔记", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"__0\"></a>框架核心分析 讲的很好</h2>\n<p>https://www.kancloud.cn/hubqin/thinkphp/1361597</p>\n<h2><a id=\"_2\"></a>指南</h2>\n<p>如果看不懂的 可以看下之前的文档 比如tp5.1 5.0 有的东西没搬过来</p>\n<h2><a id=\"_4\"></a>安装</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f93af82b97a949df97a7df83222013c3.png\"/><br/> 记得加路径 或者(全路劲)php (全路径)composer.phar 命令 的方式运行。避免php版本问题==<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5d06db9f1d624b6885c3708f9ba07d3c.png\"/><br/> 要开启多应用，必须使用 composer require topthink/think-multi-app 安装多应用拓展！！</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e8f3e00b5c2946e0a43f77001bdf734c.png\"/></p>\n<pre><code class=\"prism language-bash\">php think run -p <span class=\"token number\">1000</span>\n</code></pre>\n<p>这中方式启动的是php的内置服务器 所以如果nginx设置了这个端口号 启动不起来 。<br/> 这个仅用于测试 平常还是用nginx的好。而且可以把目录指定为public目录，这样直接 ip:1000 就能访问到了 。但是会不会php使用info的时候 根目录出错？</p>\n<p>另外安装composer的时候 不要要从小皮面板安装 坑货······<br/> 【<br/> 且需要更改php命令行的版本 或者好像curl -sS https://getcomposer.org/installer | php 这个命令改最后一个参数为安装路径就行？<br/> 然后php8.0要安装zip拓展 直接小皮面板会报错 要手动安装 ==都是坑<br/> 】不用小皮就不会遇到这些问题！</p>\n<h2><a id=\"nginxtp6httpsnginx_28\"></a>nginx运行tp6与https（改完记得重启nginx）</h2>\n<p>用刚刚tp自带的服务器 退出终端命令行就不能访问了，所以用nginx<br/> 记得设置端口为你指定的即可 。<br/> 注意ssl的话 端口号不能冲突 比如一个1000 一个10001 不一定非要443.<br/> 域名名称也是随便填写的 实际只用看端口号。<br/> 一个https证书能多个端口用<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3b4ea71c675f4190ab2153ebf2f56ad7.png\"/></p>\n<pre><code class=\"prism language-bash\">server<span class=\"token punctuation\">{<!-- --></span>\n\tlisten <span class=\"token number\">10001</span> <span class=\"token punctuation\">;</span>\n\tserver_name www.tp6.com <span class=\"token punctuation\">;</span>\n\n\troot /www/admin/www.tp6.com_80/wwwroot/public/ <span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">#301重定向</span>\n\t<span class=\"token comment\">#rewrite ^(.*)$ $1 permanent;</span>\n\n\t<span class=\"token comment\">#强制SSL</span>\n\t<span class=\"token comment\">#rewrite ^(.*)$  https://$host$1 permanent;</span>\n\n\t<span class=\"token comment\">#防盗链</span>\n\t\n\n\tlocation / <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">#伪静态</span>\n\t\tinclude /www/admin/www.tp6.com_80/wwwroot/public/.rewrite.conf<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">#首页</span>\n\t\troot /www/admin/www.tp6.com_80/wwwroot/public/<span class=\"token punctuation\">;</span>\n\t\tindex index.php index.html error/index.html<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">#流量限制</span>\n\t\n\n\t<span class=\"token comment\">#防火墙配置</span>\n\taccess_by_lua_file /www/common/waf_lua//access_ctrl.lua<span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin class-name\">set</span> <span class=\"token variable\">$RulePath</span> <span class=\"token string\">\"/www/admin/www.tp6.com_80/data/rule\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin class-name\">set</span> <span class=\"token variable\">$logdir</span> <span class=\"token string\">\"/www/admin/www.tp6.com_80/log/hacklog\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin class-name\">set</span> <span class=\"token variable\">$CCDeny</span> on<span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin class-name\">set</span> <span class=\"token variable\">$attacklog</span> on<span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin class-name\">set</span> <span class=\"token variable\">$whiteModule</span> on<span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin class-name\">set</span> <span class=\"token variable\">$getMatch</span> on<span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin class-name\">set</span> <span class=\"token variable\">$cookieMatch</span> on<span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin class-name\">set</span> <span class=\"token variable\">$postMatch</span> on<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">#日志</span>\n\taccess_log /www/admin/www.tp6.com_80/log/nginx_access_<span class=\"token variable\">$logdate</span>.log main<span class=\"token punctuation\">;</span>\n\terror_page  <span class=\"token number\">403</span>  /error/403.html<span class=\"token punctuation\">;</span>\n\terror_page  <span class=\"token number\">400</span>  /error/400.html<span class=\"token punctuation\">;</span>\n\terror_page  <span class=\"token number\">404</span>  /error/404.html<span class=\"token punctuation\">;</span>\n\terror_page  <span class=\"token number\">502</span>  /error/502.html<span class=\"token punctuation\">;</span>\n\terror_page  <span class=\"token number\">503</span>  /error/503.html<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">#处理PHP</span>\n\tlocation  ~ <span class=\"token punctuation\">[</span>^/<span class=\"token punctuation\">]</span><span class=\"token punctuation\">\\</span>.php<span class=\"token punctuation\">(</span>/<span class=\"token operator\">|</span>$<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\troot /www/admin/www.tp6.com_80/wwwroot/public/<span class=\"token punctuation\">;</span>\n\t\tfastcgi_pass <span class=\"token number\">127.0</span>.0.1:8000<span class=\"token punctuation\">;</span>\n\t\tfastcgi_split_path_info  ^<span class=\"token punctuation\">(</span>.+<span class=\"token punctuation\">\\</span>.php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>.*<span class=\"token punctuation\">)</span>$<span class=\"token punctuation\">;</span>\n\t\tfastcgi_param  SCRIPT_FILENAME <span class=\"token variable\">$document_root</span><span class=\"token variable\">$fastcgi_script_name</span><span class=\"token punctuation\">;</span>\n\t\tfastcgi_param  PATH_INFO <span class=\"token variable\">$fastcgi_path_info</span><span class=\"token punctuation\">;</span>\n\t\tinclude fastcgi.conf<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">#DenyFiles</span>\n\tlocation ~ ^/<span class=\"token punctuation\">(</span><span class=\"token punctuation\">\\</span>.user.ini<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>.htaccess<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>.git<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>.svn<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>.project<span class=\"token operator\">|</span>LICENSE<span class=\"token operator\">|</span>README.md<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nserver<span class=\"token punctuation\">{<!-- --></span>\n\tlisten <span class=\"token number\">1000</span> ssl <span class=\"token punctuation\">;</span>\n\tserver_name www.tp6.com<span class=\"token punctuation\">;</span>\n\n\troot /www/admin/www.tp6.com_80/wwwroot/public/<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">#301重定向</span>\n\t<span class=\"token comment\">#rewrite ^(.*)$ $1 permanent;</span>\n\n\t<span class=\"token comment\">#开启SSL</span>\n\tssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">#证书文件</span>\n\tssl_certificate /usr/local/phpstudy/certs/www.tp6.com/www.tp6.com_nginx_public.crt<span class=\"token punctuation\">;</span>\n\tssl_certificate_key /usr/local/phpstudy/certs/www.tp6.com/www.tp6.com_nginx.key<span class=\"token punctuation\">;</span>\n\n\tlocation / <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">#伪静态</span>\n\t\tinclude /www/admin/www.tp6.com_80/wwwroot/public/.rewrite.conf<span class=\"token punctuation\">;</span>\n\n\t\troot /www/admin/www.tp6.com_80/wwwroot/public/<span class=\"token punctuation\">;</span>\n\t\tindex index.php index.html error/index.html<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">#防盗链</span>\n\t\n\n\t<span class=\"token comment\">#流量限制</span>\n\t\n\n\t<span class=\"token comment\">#防火墙配置</span>\n\taccess_by_lua_file /www/common/waf_lua//access_ctrl.lua<span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin class-name\">set</span> <span class=\"token variable\">$RulePath</span> <span class=\"token string\">\"/www/admin/www.tp6.com_80/data/rule\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin class-name\">set</span> <span class=\"token variable\">$logdir</span> <span class=\"token string\">\"/www/admin/www.tp6.com_80/log/hacklog\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin class-name\">set</span> <span class=\"token variable\">$CCDeny</span> on<span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin class-name\">set</span> <span class=\"token variable\">$attacklog</span> on<span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin class-name\">set</span> <span class=\"token variable\">$whiteModule</span> on<span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin class-name\">set</span> <span class=\"token variable\">$getMatch</span> on<span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin class-name\">set</span> <span class=\"token variable\">$cookieMatch</span> on<span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin class-name\">set</span> <span class=\"token variable\">$postMatch</span> on<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">#日志</span>\n\taccess_log /www/admin/www.tp6.com_80/log/nginx_access_<span class=\"token variable\">$logdate</span>.log main<span class=\"token punctuation\">;</span>\n\terror_page  <span class=\"token number\">403</span>  /error/403.html<span class=\"token punctuation\">;</span>\n\terror_page  <span class=\"token number\">400</span>  /error/400.html<span class=\"token punctuation\">;</span>\n\terror_page  <span class=\"token number\">404</span>  /error/404.html<span class=\"token punctuation\">;</span>\n\terror_page  <span class=\"token number\">502</span>  /error/502.html<span class=\"token punctuation\">;</span>\n\terror_page  <span class=\"token number\">503</span>  /error/503.html<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">#处理PHP</span>\n\tlocation  ~ <span class=\"token punctuation\">[</span>^/<span class=\"token punctuation\">]</span><span class=\"token punctuation\">\\</span>.php<span class=\"token punctuation\">(</span>/<span class=\"token operator\">|</span>$<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\troot /www/admin/www.tp6.com_80/wwwroot/public/<span class=\"token punctuation\">;</span>\n\t\tfastcgi_pass <span class=\"token number\">127.0</span>.0.1:8000<span class=\"token punctuation\">;</span>\n\t\tfastcgi_split_path_info  ^<span class=\"token punctuation\">(</span>.+<span class=\"token punctuation\">\\</span>.php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>.*<span class=\"token punctuation\">)</span>$<span class=\"token punctuation\">;</span>\n\t\tfastcgi_param  SCRIPT_FILENAME <span class=\"token variable\">$document_root</span><span class=\"token variable\">$fastcgi_script_name</span><span class=\"token punctuation\">;</span>\n\t\tfastcgi_param  PATH_INFO <span class=\"token variable\">$fastcgi_path_info</span><span class=\"token punctuation\">;</span>\n\t\tinclude fastcgi.conf<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">#DenyFiles</span>\n\tlocation ~ ^/<span class=\"token punctuation\">(</span><span class=\"token punctuation\">\\</span>.user.ini<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>.htaccess<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>.git<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>.svn<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>.project<span class=\"token operator\">|</span>LICENSE<span class=\"token operator\">|</span>README.md<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_167\"></a>大坑==</h2>\n<p>phpstudy 网站那 要关了open_dir 防止跨站攻击的 不然设置public目录为 网站根目录后 就访问不到外面的<br/> 如果php_ini中设置了 也关了 或者设置下正常目录<br/> nginx中 和fastcgi.conf里可能也有这个设置</p>\n<p>然后 要开启php的<br/> display_errors = On<br/> display_startup_errors = On</p>\n<p>默认是不开启的==<br/> 这个 即使没开 框架也能报错 可能是因为设置了iniset的 但是框架要正常启动了才有效。否则比如遇到的500错误 框架根本没启动起来 自然也就显示不了报错了</p>\n<p>另外 如果是拷贝的文件 权限可能也要设置下 为755</p>\n<p>env也要开启debug</p>\n<p>然后runtime目录设置为777</p>\n<h2><a id=\"_186\"></a>基础</h2>\n<h3><a id=\"_188\"></a>错误显示</h3>\n<p>除了上面的大坑外，一般是设置env<br/> <img alt=\"在这里插入图片描述\" src=\"image\\85b38d640327403db6918b2f3e447127.png\"/></p>\n<h3><a id=\"_193\"></a>配置</h3>\n<pre><code class=\"prism language-php\"><span class=\"token punctuation\">[</span><span class=\"token constant\">DATABASE</span><span class=\"token punctuation\">]</span>\n<span class=\"token constant\">USERNAME</span> <span class=\"token operator\">=</span>  root\n<span class=\"token constant\">PASSWORD</span> <span class=\"token operator\">=</span>  <span class=\"token number\">123456</span>\n</code></pre>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>facade<span class=\"token punctuation\">\\</span>Env</span>\n\n<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token comment\">// 获取环境变量 如果不存在则使用默认值root</span>\n<span class=\"token class-name static-context\">Env</span><span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'database.username'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"![在这里插入图片描述](https://img-blog.csdnimg.cn/ecc6a4984a234f61b60138f916501197.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LqR6Zey5LiN5pS2,size_20,color_FFFFFF,t_70,g_se,x_16\" src=\"image\\b61a1305290c4cfcbfbd6522517858c6.png\"/></p>\n<h3><a id=\"_210\"></a>应用目录</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\379f9039dac547f08e49190e186fbac6.png\"/></p>\n<h3><a id=\"_213\"></a>输出</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0dde12f6913c425cacb6a3abba489c18.png\"/><br/> 数组不能直接用return</p>\n<h2><a id=\"_218\"></a>控制器</h2>\n<h3><a id=\"_219\"></a>两个特殊的控制器</h3>\n<p>一． 基础控制器</p>\n<ol><li>一般来说，创建控制器后，推荐继承基础控制器来获得更多的方法；</li><li>基础控制器仅仅提供了控制器验证功能，并注入了think\\App和think\\Request；</li><li>这两个对象后面会有章节详细讲解，下面我们继承并简单使用一下；<br/> namespace app\\controller;<br/> use app\\BaseController;<br/> class Test extends BaseController<br/> {<!-- --><br/> public function index()<br/> {<!-- --><br/> //返回实际路径<br/> return $this-&gt;app-&gt;getBasePath();<br/> //返回当前方法名<br/> return $this-&gt;request-&gt;action();<br/> }<br/> }<br/> 二． 空控制器</li><li>在单应用模式下，我们可以给项目定义一个 Error 控制器类，来提醒错误；<br/> class Error<br/> {<!-- --><br/> public function index()<br/> {<!-- --><br/> return ‘当前控制器不存在！’;<br/> }<br/> }</li></ol>\n<h2><a id=\"_248\"></a>模型</h2>\n<p>游标的意义</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0ce7566b400940d686d5ae82dffc9981.png\"/></p>\n<h2><a id=\"_254\"></a>验证器</h2>\n<h3><a id=\"_255\"></a>使用</h3>\n<p>例如, 在 TP3 的时候, 可能是这样判断的:</p>\n<pre><code class=\"prism language-php\"><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token function\">I</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 抛出异常</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>如果参数比较多的时候, 需要判断的变量越多代码量也随着增加. 如果使用验证器就会好很多.</p>\n<p>验证器的官方文档: https://www.kancloud.cn/manual/thinkphp6_0/1037624</p>\n<p>直接上代码:</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n \n<span class=\"token keyword\">namespace</span> <span class=\"token package\">app<span class=\"token punctuation\">\\</span>api<span class=\"token punctuation\">\\</span>controller</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">use</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>facade<span class=\"token punctuation\">\\</span>Validate</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">think<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Auth</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">index</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Request</span> <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$input</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$validate</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">Validate</span><span class=\"token operator\">::</span><span class=\"token function\">rule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n                <span class=\"token string single-quoted-string\">'name|名称'</span>  <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'require|max:25'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string single-quoted-string\">'email|邮箱'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'require|email'</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$validate</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token variable\">$validate</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d8b25c8c85c8412d9d7538db2ac1680f.png\"/></p>\n<p>验证的好处</p>\n<p>https://www.jb51.net/article/176683.htm</p>\n<p>主要是 重复使用 而且直接输出错误信息 避免重复写代码</p>\n<h2><a id=\"_306\"></a>系统服务</h2>\n<p>使用系统服务有大大的好处和避免了直接修改类的坏处。从以上分析来看，个人觉得，使用系统服务，可以对一个类进行非入侵式的「配置」，如果哪天一个类的某些设定需要修改，我们不用直接修改这个类，只需要修改服务提供类就好了。对于扩展包来说，系统服务使其可以在扩展中灵活配置程序，达到开箱即用的效果。不过，有个缺点是系统服务类都要在程序初始化是进行实例化，如果一个系统的服务类很多，势必影响程序的性能。</p>\n<p>————————————————<br/> 原文作者：tsin<br/> 转自链接：https://learnku.com/articles/33428<br/> 版权声明：著作权归作者所有。商业转载请联系作者获得授权，非商业转载请保留以上作者信息和原文链接。</p>\n<p>使用 thinkphp 开发网站，在没有 thinkphp6 版本出来以前，常规的开发模式都是使用它自带的多应用开发方式来进行项目开发。</p>\n<p>多应用开发的一个好处就是开发方便和快速，只需要在thinkphp规定的app目录建立一个目录，比如 admin 目录，然后在其内建立一个 controller 目录就可以开始一个项目的基本开发了。</p>\n<p>然而这样开发只适合基于它本身的目录进行开发，如果想要把项目做成一个包来开发和发布，这样的方式明显不行。</p>\n<p>而这次，thinkphp6 引入了 Service 的概念，增加了项目转移到包开发的可能性。</p>\n<p>Service 的使用需要继承 \\think\\Service ，同时 Service 默认的 register 和 boot 这两个方法是非必须的，就是说可以不用添加也是可以的。</p>\n<p>但是，我们使用 Service 就是为了在项目启动前添加自己的配置和注册一些自己的东西，所以这两个方法对项目开发来说，都利用起来是最好的方法。</p>\n<p>register的使用<br/> register 的加载要先于 boot 方法，也同时在系统里属于提前注册一些具体的配置及绑定类，所以在具体的项目开发中，也是推荐只做一些项目的配置。</p>\n<p>Service 的引入会根据 thinkphp6 生成的 Services.php 缓存顺序进行加载，所以在使用过程中需要注意当前的 Service 在缓存中属于哪个位置，防止在注册配置时候出现配置加载时出现不可知的问题。</p>\n<p>boot 的使用<br/> boot 通常是在 register 注册完成后进行加载，boot 方法里推荐做一些对 register 注册完成后的信息的补充处理。</p>\n<p>thinkphp6 由于在 boot 前已做了系统配置的初始化操作，所以在这里处理一些数据库操作也是没有问题的。</p>\n<p>Service 的其他方法<br/> loadRoutesFrom ：导入路由，传入数据为匿名函数</p>\n<p>registerRoutes ：功能于 loadRoutesFrom 一样</p>\n<p>commands ：导入脚本命令，传入数据为数组或者单个脚本</p>\n<p>使用 Service 的场景<br/> 如果你想要把一个项目独立成一个包进行发布或者为 thinkphp6 提供扩展包。</p>\n<p>如果只是单纯的想做一个 app 项目，Service 估计不太适合你。</p>\n<p>最后，Service 的具体实践有没有什么好的项目推荐啊，那当然有的，这里隆重推荐一个完全使用 Service 开发的项目：</p>\n<p>laket-admin： https://github.com/deatil/laket-admin</p>\n<p>laket-admin 使用 thinkphp6 的 Service 模式加单应用开发而成，避开了 thinkphp6 多应用下 url 出现的一些问题，对用户端的 url 更加友好。</p>\n<h2><a id=\"laketadmin_355\"></a>laket-admin项目的截图</h2>\n<p>©著作权归作者所有：来自51CTO博客作者爱看雨的猫的原创作品，请联系作者获取转载授权，否则将追究法律责任<br/> thinkphp6的Service的简明使用介绍<br/> https://blog.51cto.com/u_11949903/2671735</p>\n<h2><a id=\"halt_363\"></a>为什么halt</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\814e0f76e45b48359f09ad2b410de3b6.png\"/></p>\n<h2><a id=\"_366\"></a>依赖注入与容器</h2>\n<p>依赖注入其实本质上是指对类的依赖通过构造器完成自动注入，例如在控制器架构方法和操作方法中一旦对参数进行对象类型约束则会自动触发依赖注入，由于访问控制器的参数都来自于URL请求，普通变量就是通过参数绑定自动获取，对象变量则是通过依赖注入生成。</p>\n<h3><a id=\"_368\"></a>如何注入</h3>\n<h4><a id=\"_369\"></a>首先是构造器注入</h4>\n<p>api/manager/TestMgr.php</p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">namespace</span> <span class=\"token package\">app<span class=\"token punctuation\">\\</span>api<span class=\"token punctuation\">\\</span>manager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">TestMgr</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token variable\">$name1</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>api/controller/Test.php</p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Test</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">TestMgr</span> <span class=\"token variable\">$testMgr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">testMgr</span><span class=\"token operator\">=</span><span class=\"token variable\">$testMgr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">testMgr</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出a</span>\n        <span class=\"token comment\">//same as $a=new TestMgr();return $a-&gt;name;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_393\"></a>构造器方法注入的解析</h3>\n<p>如果换成我们手动调用的方式，那么正常的流程应该是</p>\n<pre><code class=\"prism language-php\"><span class=\"token variable\">$testMgr</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestMgr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//多出来了这一步 要先实例化TestMgr</span>\n<span class=\"token variable\">$test</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$testMgr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$test</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$testMgr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>然而 浏览器直接调用的方式是 ，因为 正常情况下 不可能我们接口调用 还去 先new一堆东西吧</p>\n<pre><code class=\"prism language-php\"><span class=\"token variable\">$test</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$test</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$testMgr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>但这样肯定会报错 因为 构造器有参数 但是你没传。所以我们不能直接这么写，要写成上面那种自动注入的参数的形式。而事实上 我们也可以通过invoke函数来完成递归实例化这一操作。</p>\n<p>所以，相当于容器自动帮我们完成了这个操作。我们要做的 只是在方法的参数中写需要的那个类的即可 不需要去手动去new底层的一堆对象</p>\n<h3><a id=\"_411\"></a>方法调用的方式</h3>\n<p>api/manager/TestMgr.php</p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">namespace</span> <span class=\"token package\">app<span class=\"token punctuation\">\\</span>api<span class=\"token punctuation\">\\</span>manager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">TestMgr</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token variable\">$name1</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>api/controller/Test.php</p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">namespace</span> <span class=\"token package\">app<span class=\"token punctuation\">\\</span>api<span class=\"token punctuation\">\\</span>controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">app<span class=\"token punctuation\">\\</span>api<span class=\"token punctuation\">\\</span>manager<span class=\"token punctuation\">\\</span>TestMgr</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Test</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">index</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">TestMgr</span> <span class=\"token variable\">$testMgr</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$testMgr</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"invoke_433\"></a>invoke</h3>\n<pre><code class=\"prism language-php\"><span class=\"token comment\">//使用容器来实例化的话，可以自动进行依赖注入。</span>\ninvoke（类名）\n<span class=\"token comment\">//某个方法依赖注入</span>\n<span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'类名'</span>，<span class=\"token string single-quoted-string\">'方法名'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code class=\"prism language-php\"><span class=\"token variable\">$bar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token variable\">$foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$bar</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n等价于\n<span class=\"token variable\">$foo</span> <span class=\"token operator\">=</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>也支持对某个函数或者闭包使用依赖注入</p>\n<pre><code class=\"prism language-php\"><span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Bar</span> <span class=\"token variable\">$bar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_456\"></a>上面的实现-------容器</h3>\n<h4><a id=\"_457\"></a>什么是容器</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\aa3b4c504b0c4459a9950b6ff119d3e1.png\"/><br/> ThinkPHP使用容器来更方便的管理【类依赖】及【运行依赖注入】<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0315f97a989649629c7e0ba417875e26.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\9340c8bee4e24390a76b9a0db6d22390.png\"/></p>\n<p>简而言之，容器内部是通过反射类或闭包等来实现类的实例化(单例)。<br/> 容器并非只能用于依赖注入<br/> //官方说明：容器中已经调用过的类会自动使用单例，除非你使用下面的方式强制重新实例化。<br/> // 每次调用都会重新实例化-&gt;$cache = app(‘user’,true);</p>\n<h4><a id=\"app_468\"></a>app助手函数</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\82b4cadde32544609402ffcc3bc6c85a.png\"/></p>\n<p>$arrayItem = app(‘org\\utils\\ArrayItem’);<br/> 上述代码会判断在容器中是否存在这个单例，如果有就直接返回，没有就帮我们自动创建一个这个类的单例然后返回。<br/> 比如：<br/> echo app(‘user’)-&gt;name;</p>\n<blockquote>\n<p>注释：new是写死的 而上面是字符串 可以动态解析的！！</p>\n</blockquote>\n<h4><a id=\"appinvoke_479\"></a>app和invoke这两个助手函数的区别</h4>\n<p>app 快速获取容器中的实例 支持依赖注入<br/> invoke 调用反射执行callable 支持依赖注入</p>\n<h4><a id=\"bind_483\"></a>bind</h4>\n<p>依赖注入的类统一由容器进行管理，大多数情况下是在自动绑定并且实例化的。不过你可以随时进行手动绑定类到容器中（通常是在服务类的register方法中进行绑定），支持多种绑定方式。<br/> bind就是给实例起一个别名 方便app快速调用</p>\n<pre><code class=\"prism language-php\"><span class=\"token comment\">// 绑定类库标识</span>\n<span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'user'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'\\app\\index\\model\\User'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 快速调用（自动实例化）</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">app</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'user'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>更多bind的用法看手册</p>\n<blockquote>\n<p>ps:bind 实际上是$this-&gt;app-&gt;bind(‘think\\Cache’, ‘app\\common\\Cache’);的快捷调用<br/> 也叫助手函数</p>\n</blockquote>\n<h4><a id=\"providerphp_498\"></a>provider.php</h4>\n<p>一般来说，bind只能在定义的那个地方用，其他地方就用不了了。所以，为了其他地方也能用，我们将bind函数写在provider.php文件中<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f6ef1737785d4360a786462d323b0e7f.png\"/></p>\n<h4><a id=\"_502\"></a>容器的好处</h4>\n<p>容器：【“拿来即用”，不需要通过实例化，松耦，节约资源】</p>\n<h4><a id=\"_507\"></a>容器自动依赖注入</h4>\n<p>容器主要用于依赖注入，依赖注入会首先检查容器中是否注册过该对象实例，如果没有就会自动实例化，然后自动注入</p>\n<h3><a id=\"_510\"></a>自定义实例化</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\14b6bceecebe4ff89ad07c7101a6862b.png\"/></p>\n<h3><a id=\"_513\"></a>其他</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\58927623e83d45bd98e7660ad3917b89.png\"/></p>\n<h3><a id=\"_521\"></a>场景</h3>\n<p>支持使用依赖注入的场景包括（但不限于）：</p>\n<p>控制器架构方法；<br/> 控制器操作方法；<br/> 路由的闭包定义；<br/> 事件类的执行方法；<br/> 中间件的执行方法；</p>\n<p>门面 face就大量使用了依赖注入</p>\n<h2><a id=\"Facade__534\"></a>Facade 门面模式</h2>\n<p>看设计模式那个文档。<br/> tp中，说的直白一点，Facade功能可以让类无需实例化而直接进行静态方式调用。使用静态方式调用非静态方法时隐式的实例化了该类，无需额外的实例化工作(看最下面总结 因为要实例化的可能很多个)。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4d0226629d50404a84a70a176a5c412f.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a4c3e534324b435baf6432ba4000f248.png\"/></p>\n<p><strong>简单来说 就是request实际上是用依赖注入的方式写的，所以需要实例化一大堆。所以要么使用门面模式 要么使用自动依赖注入的方式调用！</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0d009d9c1cac4801a32784d6378b32f7.png\"/><br/> facade目录 和外面是对应的<img alt=\"在这里插入图片描述\" src=\"image\\a0f4a04a079d4c849fdf61b7b51407e5.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}