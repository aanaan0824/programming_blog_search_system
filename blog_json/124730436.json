{"blogid": "124730436", "writerAge": "码龄12年", "writerBlogNum": "36", "writerCollect": "189", "writerComment": "6", "writerFan": "728", "writerGrade": "3级", "writerIntegral": "457", "writerName": "wu_zhiyuan", "writerProfileAdress": "writer_image\\profile_124730436.jpg", "writerRankTotal": "32098", "writerRankWeekly": "4666", "writerThumb": "28", "writerVisitNum": "40385", "blog_read_count": "6194", "blog_time": "于 2022-05-12 17:07:41 发布", "blog_title": "python之sys模块详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>前言</h1>\n<p>sys模块是与python解释器交互的一个接口。sys 模块提供了许多函数和变量来处理 Python 运行时环境的不同部分。</p>\n<h1><a id=\"_3\"></a>处理命令行参数</h1>\n<p>在解释器启动后, argv 列表包含了传递给脚本的所有参数, 列表的第一个元素为脚本自身的名称。</p>\n<p>sys.argv[0] 表示程序自身<br/> sys.argv[1] 表示程序的第一个参数<br/> sys.argv[2] 表示程序的第二个参数</p>\n<p>可以做个测试，如下图：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\160c968bb6bd4fd9b34c5a9e804d2cd6.png\"/></p>\n<h1><a id=\"sysexitn_exit0_13\"></a>sys.exit(n) 退出程序，正常退出时exit(0)</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token comment\"># -*- coding:utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys\na<span class=\"token operator\">=</span><span class=\"token number\">2</span>\n<span class=\"token keyword\">if</span> a<span class=\"token operator\">&lt;=</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#注释：退出python执行程序，下面的代码将不会执行，如同shell中的exit一样。</span>\n\n</code></pre>\n<h1><a id=\"sysversion_Python_26\"></a>sys.version 获取Python解释程序的版本信息</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token comment\"># -*- coding:utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行结果：</p>\n<pre><code>3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:59:51) [MSC v.1914 64 bit (AMD64)]\n</code></pre>\n<h1><a id=\"sysplatform__38\"></a>sys.platform 返回操作系统平台名称</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token comment\"># -*- coding:utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行结果：</p>\n<pre><code>win32\n</code></pre>\n<h1><a id=\"sysstdinreadlineinput_50\"></a>sys.stdin.readline()与input</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token comment\"># sys.stdin.readline() 相当于input，区别在于input不会读入'\\n'</span>\naa <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\"># 输入数据多一个'\\n'</span>\nbb <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入：'</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>aa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\t\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>bb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">#结果</span>\ni love DL\n请输入：i love DL\n<span class=\"token number\">10</span>\n<span class=\"token number\">9</span>\n</code></pre>\n<p>运行结果：</p>\n<pre><code>\t22\n\t请输入：22\n\t3\n\t2\n</code></pre>\n<p>可以看出：<br/> ①sys.stdin.readline()方式与input方式的区别是：len(aa)元素中多了一个‘\\n’换行符。即sys.stdin.readline()方式会读入换行符。</p>\n<p>②还有一个区别在于，input()里面可以直接传入文本，然后打印出来。</p>\n<h1><a id=\"sysstdoutprint_79\"></a>sys.stdout与print</h1>\n<pre><code class=\"prism language-python\">sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>上面的两种打印方式是等价的，例如：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> sys\n\n<span class=\"token comment\"># sys.stdin.readline() 相当于input，区别在于input不会读入'\\n'</span>\naa <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbb <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入：'</span><span class=\"token punctuation\">)</span>\n\nsys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>aa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 默认无法实现print方式的sep参数功能，所以需要手动在后面添加一个换行符</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>bb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行结果：</p>\n<pre><code>11\n请输入：11\n3\n2\n</code></pre>\n<p><strong>注</strong>：sys.stdout.write(<strong>obj</strong>+‘\\n’)中的<strong>obj只能是字符串</strong>。</p>\n<h1><a id=\"_107\"></a>总结</h1>\n<pre><code># -*- coding: utf-8 -*-\n# Python中sys模块：该模块提供对解释器使用或维护的一些变量的访问，以及与解释器强烈交互的函数\n\n# sys.argv #命令行参数List，第一个元素是程序本身路径\n# sys.modules.keys() #返回所有已经导入的模块列表\n# sys.exc_info() #获取当前正在处理的异常类,exc_type、exc_value、exc_traceback当前处理的异常详细信息\n# sys.exit(n) #程序，正常退出时exit(0)\n# sys.hexversion #获取Python解释程序的版本值，16进制格式如：0x020403F0\n# sys.version #获取Python解释程序的版本信息\n# sys.maxint #最大的Int值\n# sys.maxunicode #最大的Unicode值\n# sys.modules #返回系统导入的模块字段，key是模块名，value是模块\n# sys.path #返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值\n# sys.platform #返回操作系统平台名称\n# sys.stdout #标准输出\n# sys.stdin #标准输入\n# sys.stderr #错误输出\n# sys.exc_clear() \t#用来清除当前线程所出现的当前的或最近的错误信息\n# sys.exec_prefix \t#返回平台独立的python文件安装的位置\n# sys.byteorder \t\t#本地字节规则的指示器，big-endian平台的值是'big',little-endian平台的值是'little'\n# sys.copyright \t\t#记录python版权相关的东西\n# sys.api_version \t#解释器的C的API版本\n# sys.version_info \t#获取Python解释器的版本信息\n# sys.getwindowsversion #获取Windows的版本\n# sys.getdefaultencoding #返回当前你所用的默认的字符编码格式\n# sys.getfilesystemencoding #返回将Unicode文件名转换成系统文件名的编码的名字\n# sys.setdefaultencoding(name) #用来设置当前默认的字符编码\n# sys.builtin_module_names \t#Python解释器导入的模块列表\n# sys.executable \t\t\t\t\t#Python解释程序路径\n# sys.stdin.readline \t\t\t\t#从标准输入读一行，sys.stdout.write(\"a\") 屏幕输出a\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> sys <span class=\"token comment\">#导入sys模块</span>\n\n<span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">)</span> <span class=\"token comment\">#dir()方法查看模块中可用的方法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>getdefaultencoding<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#获取系统当前编码，一般默认为ascii.</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 获取当前系统平台. 如：win32、Linux等。</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token comment\">#sys.argv 变量是一个包含了命令行参数的字符串列表</span>\n<span class=\"token comment\"># print(sys.path)</span>\n<span class=\"token comment\"># print(sys.modules.keys())</span>\n<span class=\"token comment\"># print(sys.modules.values())</span>\nsys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 一般情况下执行到主程序末尾，解释器自动退出，但是如果需要中途退出程序，可以调用sys.exit函数</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}