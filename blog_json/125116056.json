{"blogid": "125116056", "writerAge": "码龄10年", "writerBlogNum": "544", "writerCollect": "1857", "writerComment": "555", "writerFan": "13195", "writerGrade": "7级", "writerIntegral": "20887", "writerName": "小雨青年", "writerProfileAdress": "writer_image\\profile_125116056.jpg", "writerRankTotal": "404", "writerRankWeekly": "1545", "writerThumb": "994", "writerVisitNum": "2354979", "blog_read_count": "826", "blog_time": "于 2022-06-03 21:18:02 发布", "blog_title": "【Laravel】Laravel的auth认证中间件的Api-token详细配置说明", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><a href=\"https://dev.csdn.net/activity?utm_source=sale_source&amp;sale_source=yRclewvUvt\"><img alt=\"CSDN开发云\" src=\"image\\20220518054835.png\"/></a><br/> </p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_2\">一、前言</a></li><li><a href=\"#_17\">二、版本约定</a></li><li><a href=\"#apitoken_22\">三、配置实现api-token</a></li><li><a href=\"#apitoken_126\">四、api-token的不足</a></li><li><a href=\"#jwt_138\">五、推荐使用jwt</a></li><li><a href=\"#_148\">六、总结</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_2\"></a>一、前言</h2>\n<p>用户认证在任何框架内都是很重要的一部分，Laravel为用户认证提供了丰富的实现方式，包括但不仅限于</p>\n<ul><li>session</li><li>token</li><li>jwt</li></ul>\n<p>本文将要解决以下问题：</p>\n<ol><li>token的认证方式是如何配置的？</li><li>api-token有什么不足</li><li>推荐哪个认证方式？</li></ol>\n<p><a href=\"https://dev.csdn.net/activity?utm_source=sale_source&amp;sale_source=yRclewvUvt\"><img alt=\"CSDN开发云\" src=\"image\\20220518054835.png\"/></a></p>\n<h2><a id=\"_17\"></a>二、版本约定</h2>\n<ul><li>Laravel 5.8</li><li>PHP 7.1</li></ul>\n<h2><a id=\"apitoken_22\"></a>三、配置实现api-token</h2>\n<p>我们实现的token是api-token，最直观描述是，手动设置token值，自动校验token并返回用户表数据。</p>\n<p>第一步，配置数据表。对于需要验证的数据表，对应的model要设置继承<code>Authenticatable</code>。</p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>User</span> <span class=\"token keyword\">as</span> Authenticatable<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Authenticatable</span>\n<span class=\"token punctuation\">{<!-- --></span>\n</code></pre>\n<p>然后，需要在表中增加一列<code>api_token</code>，建议长度64以上。</p>\n<p>第二步，修改<code>config/auth.php</code>。</p>\n<p>Laravel的auth配置可以理解为两层，<code>guards</code>-&gt;<code>providers</code>。相关的配置如下。</p>\n<pre><code class=\"prism language-php\">    <span class=\"token string single-quoted-string\">'guards'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n\n        <span class=\"token string single-quoted-string\">'api'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string single-quoted-string\">'driver'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'token'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'provider'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'user'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//这里是下面的provider的名字</span>\n            <span class=\"token string single-quoted-string\">'hash'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token string single-quoted-string\">'providers'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n\n         <span class=\"token string single-quoted-string\">'user'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n             <span class=\"token string single-quoted-string\">'driver'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'eloquent'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//这里指向了model,也可以使用datebase直接指向数据表</span>\n             <span class=\"token string single-quoted-string\">'model'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token class-name class-name-fully-qualified static-context\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p>第三步，业务上更新<code>api_token</code>。</p>\n<pre><code class=\"prism language-php\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">updateTokenByUid</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uid</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$token</span> <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'sha256'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">random_bytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//随机生成64位字符串</span>\n        <span class=\"token class-name static-context\">User</span><span class=\"token operator\">::</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$uid</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'api_token'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$token</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$token</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>第四步，需要验证的控制器配置中间件。</p>\n<p>这里我们需要注意的是，需要指定上面配置的<code>guards</code>的名字是<code>api</code>的auth。</p>\n<p>routes/api.php</p>\n<pre><code class=\"prism language-php\"><span class=\"token class-name static-context\">Route</span><span class=\"token operator\">::</span><span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/profile'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'ProfileController'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'auth:api'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>第五步，获取验证的auth数据。</p>\n<p>在配置的控制器内，我们可以通过下面的方式拿到验证的身份。</p>\n<pre><code class=\"prism language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'api'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>打印结果是对应数据表的model模型，我们就可以根据需要取出对应的用户数据。</p>\n<p>api_token的请求方式支持几种，我们可以根据实际业务选择。</p>\n<pre><code class=\"prism language-php\"><span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$client</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'/api/user?api_token='</span><span class=\"token operator\">.</span><span class=\"token variable\">$token</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//get</span>\n\n<span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$client</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'/api/user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token comment\">//post</span>\n    <span class=\"token string single-quoted-string\">'headers'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'Accept'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'application/json'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string single-quoted-string\">'form_params'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'api_token'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$token</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$client</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'/api/user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token comment\">//header</span>\n    <span class=\"token string single-quoted-string\">'headers'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'Authorization'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'Bearer '</span><span class=\"token operator\">.</span><span class=\"token variable\">$token</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'Accept'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string single-quoted-string\">'application/json'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n</code></pre>\n<p>有人就要问题，验证不通过怎么处理呢？如果没有通过验证，请求就会经过<code>app/Http/Middleware/Authenticate.php</code>，我们可以直接给出异常返回。</p>\n<pre><code class=\"prism language-php\">    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">redirectTo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">expectsJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name static-context\">ApiReturn</span><span class=\"token operator\">::</span><span class=\"token function\">return</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token class-name static-context\">ErrorCode</span><span class=\"token operator\">::</span><span class=\"token constant\">FORBIDDEN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"apitoken_126\"></a>四、api-token的不足</h2>\n<p>api-token的验证显然是非常简单的，只需要自己管理用户表的<code>api_token</code>字段即可。</p>\n<p>简单也是有代价的，显而易见的问题有</p>\n<ul><li>token的生成方式不受控制，有的开发人员的实现方式太简单会导致token不安全</li><li>token没有有效时间</li><li>token只能存在一条<br/> <a href=\"https://dev.csdn.net/activity?utm_source=sale_source&amp;sale_source=yRclewvUvt\"><img alt=\"CSDN开发云\" src=\"image\\20220518054835.png\"/></a></li></ul>\n<h2><a id=\"jwt_138\"></a>五、推荐使用jwt</h2>\n<p>为什么推荐jwt作为接口的验证方式呢？有以下几点。</p>\n<ul><li>jwt可以控制ttl，即token的有效期</li><li>jwt有严谨的结构，Header.Payload.Signature，更加安全</li><li>jwt通过算法分发token，不与数据库结构绑定</li></ul>\n<h2><a id=\"_148\"></a>六、总结</h2>\n<p>Laravel通过auth中间件的形式处理中间件，我们可以轻松更换认证方式，使其满足业务需求。</p>\n<p>对于接口验证，我更推荐使用jwt。</p>\n<p><a href=\"https://dev.csdn.net/activity?utm_source=sale_source&amp;sale_source=yRclewvUvt\"><img alt=\"CSDN开发云\" src=\"image\\20220518054835.png\"/></a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}