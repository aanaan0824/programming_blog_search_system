{"blogid": "124334460", "writerAge": "码龄4年", "writerBlogNum": "2", "writerCollect": "9", "writerComment": "0", "writerFan": "0", "writerGrade": "1级", "writerIntegral": "22", "writerName": "世界，请听我说", "writerProfileAdress": "writer_image\\profile_124334460.jpg", "writerRankTotal": "206658", "writerRankWeekly": "212535", "writerThumb": "0", "writerVisitNum": "3240", "blog_read_count": "2603", "blog_time": "于 2022-04-21 23:18:47 发布", "blog_title": "Unity读写Excel文件 —— EPPlus", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"Excel_0\"></a>Excel</h1>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#Excel_0\">Excel</a></li><li><ul><li><a href=\"#_5\">概述：</a></li><li><a href=\"#UnityUnity_17\">解决Unity打包问题（仅在Unity工程中报错）：</a></li><li><a href=\"#EPPlusdll_29\">获取EPPlus.dll文件：</a></li><li><a href=\"#Excel_39\">读取Excel：</a></li><li><a href=\"#_78\">写入数据：</a></li><li><a href=\"#___105\">创建表 / 删除表：</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_5\"></a>概述：</h2>\n<p>EPPlus是一个使用Open Office XML（xlsx）文件格式，能够读写Excel 2017/2010文件的开源组件，在导出Excel时无需安装Office</p>\n<p>官网：http://epplus.codeplex.com/</p>\n<p>需要使用Epplus的DLL文件，其缺点是不支持导出2013版的Excel</p>\n<p>​ 【原因】.xlsx是Office2007使用的，用新的基于XML的压缩文件格式取代了其目前专用的默认格式，在传统的文件扩展名后面添加了字母x（即：.docx取代了.doc，.xlsx取代了.xls）使其占用空间小，.xls文件是所有的Office程序都能够打开的，但是.xlsx只有Office2007或是更新版本才能打开</p>\n<h2><a id=\"UnityUnity_17\"></a>解决Unity打包问题（仅在Unity工程中报错）：</h2>\n<p>在进行打包的时候会进行报错。</p>\n<p>原因：EPPlus是依赖于.NET 2.0的，也就是说只有在.NET 2.0环境下Unity才能够正常使用EPPlus，Unity默认是使用的为.NET 2.0 Subset(Player Setting / Api Commpatibility Level)</p>\n<p>.NET 2.0与.NET 2.0 Subset的区别：.NET 2.0 Subset仅有.NET 2.0的部分内容，使用.NET 2.0 Subset打出来的包会更小</p>\n<p>解决：将Player Setting / Api Commpatibility Level更改为 .NET 2.0</p>\n<h2><a id=\"EPPlusdll_29\"></a>获取EPPlus.dll文件：</h2>\n<p>在VS中创建一个“控制台应用程序”，在解决方案中点击引用，“右键 / 管理NuGet程序包 / 浏览 / EPPlus”</p>\n<p>推荐安装4.5.3版本</p>\n<h2><a id=\"Excel_39\"></a>读取Excel：</h2>\n<p><strong>引入命名空间：</strong><code>using OfficeOpenXml;</code></p>\n<p><strong>创建ExcelPackage对象：</strong><code>ExcelPackage excelPackage = new ExcelPackage();</code></p>\n<p>​ 构造函数：<code>public ExcelPackage(FileInfo fileInfo);</code> ----&gt; 通过Excel表格的文件信息，打开Excel文件</p>\n<p>​ <mark>ExcelPackage用来与一个Excel建立连接的，简单的认为这个对象可以打开一个Excel文件</mark></p>\n<p>​ 【注】这一句代码需要放在<code>using</code>语句中，为了能够在读完Excel文件之后能够将资源进行释放</p>\n<p>​ 【注】文件找不到的即不会报错，也不会进行创建</p>\n<p><strong>获取Excel文件中的表：</strong> <code>Worksheet worksheet = excelPackage.Workbook.Worksheets[表的索引];</code></p>\n<p>​ 【注】通过<code>Workbook.Worksheets</code>就能够得到Excel文件中的所有表，这里表的索引是从<strong>1</strong>开始的</p>\n<p>​ 【原因】一个Excel文件中能够存放多个Excel表</p>\n<p><strong>获取指定的单元格：</strong><code>worksheet.Cells[行，列].Value.ToString();</code></p>\n<p>​ 【注】<code>worksheet.Cells</code>中存储了指定表中所有的单元格，通过在索引器中填入指定的行，列则就能够取到对应的单元格，这里的索引是从<strong>1</strong>开始的，<code>.Value</code>表示取出单元格中的值，但是返回的是Object类型</p>\n<pre><code class=\"prism language-c#\">private void ReadExcel()\n{\n  FileInfo fileInfo = new FileInfo(@\"C:\\Users\\Administrator\\Desktop\\Test\\Test.xlsx\");\n  using(ExcelPackage excelPackage = new ExcelPackage(fileInfo))\n  {\n    Worksheet wordsheet = excelPackage.Workbook.WorkSheets[1];\n    string value = worksheet.Cells[1,1].Value.ToString();\n    Debug.LogError(value);\n  }\n}\n</code></pre>\n<h2><a id=\"_78\"></a>写入数据：</h2>\n<p><strong>引入命名空间：</strong><code>using OfficeOpenXml;</code></p>\n<p><strong>创建ExcelPackage对象：</strong><code>ExcelPackage excelPackage = new ExcelPackage(FileInfo类型);</code></p>\n<p><strong>获取Excel文件中的表：</strong> <code>Workheet worksheet = excelPackage.Workbook.Worksheets[表的索引];</code></p>\n<p><strong>获取指定的单元格：</strong><code>worksheet.Cells[行，列].Value = 数据;</code></p>\n<p><strong>保存表格：</strong><code>excelPackage.Save()</code></p>\n<pre><code class=\"prism language-C#\">private void ReadExcel()\n{\n  FileInfo fileInfo = new FileInfo(@\"C:\\Users\\Administrator\\Desktop\\Test\\Test.xlsx\");\n  using(ExcelPackage excelPackage = new ExcelPackage(fileInfo))\n  {\n    Worksheet worksheet = excelPackage.Workbook.WorkSheets[1];\n    worksheet.Cells[1,1].Value = \"Hello World\";\n    excelPackage.Save();\n  }\n}\n</code></pre>\n<h2><a id=\"___105\"></a>创建表 / 删除表：</h2>\n<p><strong>创建表：</strong><code>ExcelWorksheet worksheet = excelPackage.Workbook.Worksheets.Add(\"表名\");</code></p>\n<p>​ 表示打开的这个Excel文件若存在，就会向这个文件中添加一张表</p>\n<p>​ 若Excel文件不存在，则会先去创建一个Excel文件，然后帮这个Excel文件添加一张表</p>\n<p>​ 【注】记得最好需要保存这个文件<code>excelPackage.Save();</code></p>\n<p><strong>删除表：</strong><code>ExcelWorksheet worksheet = excelPackage.Workbook.Worksheets.Delete(\"表名\");</code></p>\n<pre><code class=\"prism language-C#\">private void OperationExcel()\n{\n  FileInfo fileInfo = new FileInfo(@\"C:\\Users\\Administrator\\Desktop\\Test\\Test.xlsx\");\n  using(ExcelPackage excelPackage = new ExcelPackage(fileInfo))\n  {\n    //添加表\n    ExcelWorksheet worksheet = excelPackage.Workbook.WorkSheets.Add(\"This is first sheet\");\n    ExcelWorksheet worksheet = excelPackage.Workbook.WorkSheets.Add(\"This is second sheet\");\n    //删除表\n    ExcelWorksheet worksheet = excelPackage.Workbook.WorkSheets.Delete(\"This is first sheet\");\n    \n    excelPackage.Save();\n  }\n}\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}