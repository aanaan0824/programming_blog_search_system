{"blogid": "124880781", "writerAge": "码龄6年", "writerBlogNum": "91", "writerCollect": "181", "writerComment": "47", "writerFan": "25", "writerGrade": "5级", "writerIntegral": "2724", "writerName": "大刘鸭", "writerProfileAdress": "writer_image\\profile_124880781.jpg", "writerRankTotal": "21951", "writerRankWeekly": "45198", "writerThumb": "47", "writerVisitNum": "275243", "blog_read_count": "9576", "blog_time": "已于 2022-05-31 16:22:16 修改", "blog_title": "2022react面试题整理", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"react_0\"></a>一、简述react事件机制</h2>\n<p>当用户在为onClick添加函数时，React并没有将Click时间绑定在DOM上面<br/> 而是在document处监听所有支持的事件，当事件发生并冒泡至document处时，React将事件内容封装交给中间层SyntheticEvent（负责所有事件合成）<br/> 所以当事件触发的时候，对使用统一的分发函数dispatchEvent将指定函数执行。React在自己的合成事件中重写了 stopPropagation方法，将 isPropagationStopped设置为 true，然后在遍历每一级事件的过程中根据此遍历判断是否继续执行。这就是 React自己实现的冒泡机制</p>\n<h2><a id=\"ReactinnerHTML_4\"></a>二、如何在React中使用innerHTML</h2>\n<p>增加dangerouslySetInnerHTML属性，并且传入对象的属性名叫_html</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">_html</span><span class=\"token operator\">:</span><span class=\"token string\">'&lt;span&gt;你好&lt;/span&gt;'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"reactPortal_12\"></a>三、react中的Portal是什么？</h2>\n<p>Portals 提供了一种很好的将子节点渲染到父组件以外的 DOM 节点的方式。<br/> 第一个参数（child）是任何可渲染的 React 子元素，例如一个元素，字符串或碎片。<br/> 第二个参数（container）则是一个 DOM 元素。</p>\n<pre><code class=\"prism language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"Reactthis_19\"></a>四、为何React事件要自己绑定this</h2>\n<p>在 React源码中，当具体到某一事件处理函数将要调用时，将调用 invokeGuardedCallback方法。</p>\n<pre><code class=\"prism language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">invokeGuardedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>    \n\t    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>    \n\t        <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>caughtError <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>              \n\t            caughtError <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>   \n\t        <span class=\"token punctuation\">}</span>  \n\t    <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>事件处理函数是直接调用的，并没有指定调用的组件，所以不进行手动绑定的情况下直接获取到的 this是不准确的，所以我们需要手动将当前组件绑定到 this上</p>\n<h2><a id=\"_33\"></a>五、类组件和函数组件之间的区别是啥？</h2>\n<p><a href=\"https://blog.csdn.net/xiao_yu_liu/article/details/120666781\">点击查看详情</a></p>\n<h2><a id=\"state__props__35\"></a>六、state 和 props 区别是啥？</h2>\n<ul><li>state 是组件自己管理数据，控制自己的状态，可变；</li><li>props 是外部传入的数据参数，不可变；</li><li>没有state的叫做无状态组件，有state的叫做有状态组件；</li><li>多用 props，少用 state，也就是多写无状态组件。</li></ul>\n<h2><a id=\"_super__props__40\"></a>七、在构造函数调用 super 并将 props 作为参数传入的作用</h2>\n<p>在调用 super() 方法之前，子类构造函数无法使用this引用，ES6 子类也是如此。<br/> 将 props 参数传递给 super() 调用的主要原因是在子构造函数中能够通过this.props来获取传入的 props</p>\n<p><strong>传递了props</strong></p>\n<pre><code class=\"prism language-javascript\">\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{<!-- --></span>\n\t  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// { name: 'sudheer',age: 30 }</span>\n\t  <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>没传递 props</strong></p>\n<pre><code class=\"prism language-javascript\">\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{<!-- --></span>\n\t  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\t    <span class=\"token comment\">// 但是 Props 参数仍然可用</span>\n\t    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Prints { name: 'sudheer',age: 30 }</span>\n\t  <span class=\"token punctuation\">}</span>\n\t  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t    <span class=\"token comment\">// 构造函数外部不受影响</span>\n\t    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { name: 'sudheer',age: 30 }</span>\n\t  <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"Reactrefs_70\"></a>八、React中refs的作用是什么？有哪些应用场景？</h2>\n<p>Refs 提供了一种方式，用于访问在 render 方法中创建的 React 元素或 DOM 节点。Refs 应该谨慎使用，如下场景使用 Refs 比较适合：</p>\n<ul><li>处理焦点、文本选择或者媒体的控制</li><li>触发必要的动画</li><li>集成第三方 DOM 库</li></ul>\n<p>Refs 是使用 React.createRef() 方法创建的，他通过 ref 属性附加到 React 元素上。<br/> 要在整个组件中使用 Refs，需要将 ref 在构造函数中分配给其实例属性：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}