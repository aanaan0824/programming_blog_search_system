{"blogid": "126336332", "writerAge": "码龄163天", "writerBlogNum": "81", "writerCollect": "2746", "writerComment": "3091", "writerFan": "3589", "writerGrade": "6级", "writerIntegral": "7890", "writerName": "北极的三哈", "writerProfileAdress": "writer_image\\profile_126336332.jpg", "writerRankTotal": "1807", "writerRankWeekly": "16", "writerThumb": "2703", "writerVisitNum": "649589", "blog_read_count": "26437", "blog_time": "已于 2022-08-16 23:44:02 修改", "blog_title": "Python函数和代码复用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/4f047c5263c3424b9353a21c7f6ccf8b.gif#pic_center\"/></p>\n<blockquote>\n<p>🤵‍♂️ 个人主页: <a href=\"https://blog.csdn.net/m0_68744965?spm=1000.2115.3001.5343\">@Flyme awei 个主页</a><br/> 👨‍💻 作者简介：<code>Python</code>领域新星创作者。<br/> 🐋 希望大家多多支持😘一起进步呀！<br/> 📝 如果文章对你有帮助的话，欢迎评论💬点赞👍收藏📂加关注</p>\n</blockquote>\n<p>​<strong>前言</strong></p>\n<blockquote>\n<p>  今天是《<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\">CSDN21天学习挑战赛</a>》的第14天<br/>   <a href=\"http://t.csdn.cn/6h1Xm\">昨天学习了Python基本数据类型——字符串</a><br/>   今天将学习Python的函数和代码复用</p>\n</blockquote>\n<blockquote>\n<p>活动地址：<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\">CSDN21天学习挑战赛</a></p>\n</blockquote>\n<blockquote>\n<p>  <code>python</code>的学习还是得基础知识+自己动手同步进行。如果是<code>python</code>新手，需要找一个可以在线练习得网站，我建议你去<a href=\"https://www.nowcoder.com/link/pc_csdncpt_flyme_python\">牛客网</a>多练习。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5307c0c83e4a4ee6a4c3a94b167f0cba.png\"/></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#Python_21\">Python函数和代码复用</a></li><li><ul><li><a href=\"#_31\">一、函数的定义</a></li><li><a href=\"#_52\">二、函数的调用</a></li><li><a href=\"#_73\">三、函数的参数传递</a></li><li><ul><li><a href=\"#1_83\">1.形式参数与实际参数</a></li><li><a href=\"#2_86\">2.位置传参与关键字传参</a></li><li><a href=\"#3_115\">3.可变对象与不可变对象的参数传递</a></li><li><a href=\"#4_155\">4.个数可变的位置、关键字参数</a></li><li><a href=\"#5_210\">5.函数参数总结(一）</a></li><li><a href=\"#6_237\">6.函数参数总结(二）</a></li></ul>\n</li><li><a href=\"#_290\">四、函数的返回值</a></li><li><a href=\"#_333\">五、变量的作用域</a></li><li><a href=\"#_382\">六、代码复用</a></li><li><a href=\"#_394\">七、递归函数</a></li><li><ul><li><a href=\"#1_395\">1.什么是递归函数</a></li><li><a href=\"#2_398\">2.递归的组成部分</a></li><li><a href=\"#3_401\">3.递归的调用过程</a></li><li><a href=\"#4_404\">4.递归的优缺点</a></li></ul>\n</li><li><a href=\"#_441\">八、总结</a></li><li><ul><li><a href=\"#__449\">**`推 荐:牛客题霸-经典高频面试题库`**</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"Python_21\"></a>Python函数和代码复用</h1>\n<p>什么是函数：</p>\n<blockquote>\n<p>  函数是一段具有特定功能的，可重用的语句组，通过函数名来表示和调用。经过定义，一组语句等于一个函数，在需要使用这组语句的地方，直接调用函数名称即可。因此，函数包括两部分：<code>函数的定义</code>和<code>函数的调用</code>。</p>\n</blockquote>\n<p>为什么要使用函数：</p>\n<blockquote>\n<ul><li>代码复用</li><li>影藏实现细节</li><li>提高可维护性</li><li>提高可读性便于调试</li><li>降低编程难度</li></ul>\n</blockquote>\n<h2><a id=\"_31\"></a>一、函数的定义</h2>\n<p><strong>语法格式：</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span>  函数名 <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>参数列表<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    函数体\n    <span class=\"token keyword\">return</span> 返回值列表 \n</code></pre>\n<p>例：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/14 17:02</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 函数定义</span>\n    c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token keyword\">return</span> c\n</code></pre>\n<h2><a id=\"_52\"></a>二、函数的调用</h2>\n<blockquote>\n<p>函数的定义也叫函数“声明”，定义后的函数不能直接运行，需要经过“调用”才能得到运行。</p>\n</blockquote>\n<p><strong>语法格式：</strong></p>\n<pre><code class=\"prism language-python\">函数名<span class=\"token punctuation\">(</span>实际赋值参数列表<span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 函数创建</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 函数定义</span>\n    c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token keyword\">return</span> c\n\n<span class=\"token triple-quoted-string string\">'''\n函数调用:\n函数名（实际参数列表）'''</span>\nd <span class=\"token operator\">=</span> calc<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 函数调用</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 30</span>\n</code></pre>\n<h2><a id=\"_73\"></a>三、函数的参数传递</h2>\n<blockquote>\n<p>函数的参数在定义时可以指定默认值，当函数被调用时，如果没人传入对应的参数时，则使用函数定义时的默认值替代。</p>\n</blockquote>\n<p><strong>语法格式</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span>  函数名<span class=\"token punctuation\">(</span>非可选参数列表<span class=\"token punctuation\">,</span>可选参数列表<span class=\"token operator\">=</span>默认值<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    函数体\n    <span class=\"token keyword\">return</span> 返回值列表 \n</code></pre>\n<h3><a id=\"1_83\"></a>1.形式参数与实际参数</h3>\n<blockquote>\n<ul><li>函数定义处的参数称为形式参数</li><li>函数调用处的参数称为实际参数</li></ul>\n</blockquote>\n<h3><a id=\"2_86\"></a>2.位置传参与关键字传参</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/14 17:02</span>\n\n<span class=\"token comment\"># 函数的参数传递</span>\n<span class=\"token triple-quoted-string string\">'''\n1.位置传参 根据形参对应的位置进行参数传递\n2.关键字实参 根据形参名称进行参数传递\n'''</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># a b 为函数定义当处的形式参数</span>\n    c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token keyword\">return</span> c\n\n\ncalc<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 10 20 为函数调用处的实际参数</span>\n\n<span class=\"token comment\"># 位置实参</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>calc<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n\n<span class=\"token comment\"># =左侧的变量的名称称为关键字参数</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>calc<span class=\"token punctuation\">(</span>b<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f2379351d10a46ecb62a61e2d9445752.png\"/></p>\n<h3><a id=\"3_115\"></a>3.可变对象与不可变对象的参数传递</h3>\n<blockquote>\n<p>在函数调用过程中，进行参的传递:</p>\n<ul><li>如果是不可变对象，函数体的修改不会影响实参的值</li><li>若果是可变对象，函数体的改变会影响到实参的值</li></ul>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/14 17:02</span>\n\n<span class=\"token triple-quoted-string string\">'''\n在函数调用过程中，进行参的传递:\n如果是不可变对象，函数体的修改不会影响实参的值\n若果是可变对象，函数体的改变会影响到实参的值\n'''</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arg1='</span><span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arg2='</span><span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span>\n    arg1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span>  <span class=\"token comment\"># arg1 的修改为100不会影响n1的值</span>\n    arg2<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># are2 的修改会影响到n2的值</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arg1='</span><span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 100</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arg2='</span><span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [10, 20, 200]</span>\n    <span class=\"token keyword\">return</span> arg1<span class=\"token punctuation\">,</span> arg2\n\n\na <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [10, 20]</span>\nx <span class=\"token operator\">=</span> fun<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 位置传参 arg1，arg2时是函数定义处的形参，n1，n2是函数调用处的实参， 实参和形参的名称可以不一致</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [10, 20, 200]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (100, [10, 20, 200])</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2fc489e6842d4ad8ab3f2cff3b0cc5bd.png\"/></p>\n<h3><a id=\"4_155\"></a>4.个数可变的位置、关键字参数</h3>\n<ul><li>个数可变的位置参数： <code>*arges</code></li></ul>\n<blockquote>\n<p>参数定义时，可能无法事先确定传递的位置实参的个数，使用可变的位置参数</p>\n</blockquote>\n<ul><li>个数可变的关键字形参：<code>**kwargs</code></li></ul>\n<blockquote>\n<p>参数定义时，可能无法事先确定传递的位置实参的个数，使用可变的位置参数</p>\n</blockquote>\n<blockquote>\n<p>在一个函数的定义过程中，既有个数可变的 <code>*arges</code>位置形参，又有个数可变的<code>**kwargs</code>关键字形参，要求把<code>位置形参</code>放在前面</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/14 17:02</span>\n\n\n<span class=\"token comment\"># 个数可变的位置参数 *arges</span>\n<span class=\"token comment\"># 参数定义时，可能无法事先确定传递的位置时参的个数，使用可变的位置参数</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 函数定义时，可变的位置参数</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回值为元组</span>\n    <span class=\"token comment\"># print(args[0])  返回元组的第1个对象</span>\n\n\nfun<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (10, )</span>\nfun<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (10, 20)</span>\nfun<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (11, 22, 33)</span>\n\n\n<span class=\"token comment\"># 个数可变的关键字形参</span>\n<span class=\"token comment\"># 参数定义时，可能无法事先确定传递的位置是参的个数，使用可变的位置参数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>kwargs<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回值是 字典</span>\n\n\nfun<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'a': 10}</span>\nfun<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'a': 10, 'b': 20, 'c': 30}</span>\n\n<span class=\"token triple-quoted-string string\">'''\ndef fun2(*args,*a)\n    pass\n以上程序报错，个数可变的的位置参数值能有一个\ndef fun2(**kwargs)\n    pass\n个数可变的关键字参数也只能有一个\n'''</span>\n\n<span class=\"token comment\"># 在一个函数的定义过程中，既有个数可变的位置形参，又有个数可变的关键字形参，要求把位置形参放在前面</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n    \n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3c3dcc2fd3804a8888261b0dc976f706.png\"/></p>\n<h3><a id=\"5_210\"></a>5.函数参数总结(一）</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/14 17:02</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># a,b,c在函数定义处，所以是形式参数</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a='</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b='</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c='</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 函数调用</span>\nfun<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 函数调用时的参数传递，称为位置传参</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">]</span>\nfun<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>lst<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 函数调用，将列表中的每个元素都转换为位置实参传递</span>\n\nfun<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 函数调用，所以是关键字实参</span>\ndic <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">222</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">333</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>dic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 函数调用时，将字典中的键值对都转换为关键字实参传递</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7ab5df9262c64a2fb26e4ad2160f9819.png\"/></p>\n<h3><a id=\"6_237\"></a>6.函数参数总结(二）</h3>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># a是形式参数</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b='</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 个数可变的位置形参</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun3</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 个数可变的关键字形参</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>kwargs<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 函数调用</span>\nfun<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nfun<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nfun2<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\nfun3<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--------------------------'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun4</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 需求 c,d 只能采用关键字实参传递</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a='</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b='</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c='</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d='</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># fun4(10, 20, 30, 40)   # 位置实参传递</span>\nfun4<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">=</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 关键字实参传递</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--------------------------'</span><span class=\"token punctuation\">)</span>\nfun4<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">=</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 前面两个进行位置实参传递，后面两个采用关键字实参传递</span>\n\n<span class=\"token triple-quoted-string string\">''' 函数定义时的形参顺序问题'''</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun5</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun6</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun7</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f50e22d03cc14df2ae3834a2e966ffb9.png\"/></p>\n<h2><a id=\"_290\"></a>四、函数的返回值</h2>\n<blockquote>\n<p>  <code>return</code>语句用来结束函数并将程序返回到函数调用的位置继续执行。<code>return</code>语句可以出现在函数中的任何部分，同时可以将<code>0</code>个、<code>1</code>个或多个函数运算的结果返回给函数被调用处的变量。</p>\n</blockquote>\n<p><strong>函数的返回值</strong></p>\n<blockquote>\n<ol><li>如果没有返回值(函数执行完毕后，不需要给调用处提供数据)，<code>return</code>可以<code>省略</code>不写</li><li>若果返回值为<code>1</code>个，直接返回类型<code>原类型</code></li><li>如果返回值为<code>多</code>个，返回结果为<code>元组</code></li></ol>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/14 17:02</span>\n\n<span class=\"token triple-quoted-string string\">'''\n函数的返回值:\n（1）如果没有返回值(函数执行完毕后，不需要给调用处提供数据)，return可以省略不写\n（2）若果返回值为1个，直接返回类型原类型\n（2）如果返回值为多个，返回结果为元组\n'''</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    odd <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    even <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> lst<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            odd<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            even<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>odd<span class=\"token punctuation\">,</span> even<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> odd<span class=\"token punctuation\">,</span> even  <span class=\"token comment\"># 没有返回值，可以省略  如果返回值为多个，返回结果为元组</span>\n\n\nlst1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst1<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 函数调用</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">(</span>lst1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''函数定义时，是否需要返回值，视情况而定'''</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6535c43536854676b9d8c40762176a9b.png\"/></p>\n<h2><a id=\"_333\"></a>五、变量的作用域</h2>\n<blockquote>\n<p>变量的作用域：程序代码能访问该变量的区域</p>\n</blockquote>\n<ol><li> <p><code>局部变量</code>：在函数内定义并使用的变量，只在函数内部有效，局部变量使用<code>global</code>声明，这个变量就会变成全局变量</p> </li><li> <p><code>全局变量</code>：函数体外定义的变量，可作用于函数内外</p> </li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : demo.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : Flymeawei@163.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/14 17:02</span>\n\n<span class=\"token comment\"># 变量的作用域:程序代码能访问该变量的区域</span>\n<span class=\"token triple-quoted-string string\">'''\n1.局部变量 在函数内定义并使用的变量，只在函数内部有效，局部变量使用global声明，这个变量就会变成全局变量\n2.全局变量 函数体外定义的变量，可作用于函数内外\n'''</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    c <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span>b  <span class=\"token comment\"># c,在函数内定义的变称为局部变量  a,b为函数的形参，作用范围也在在函数内部，相当于局部变量</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">'阿伟'</span>  <span class=\"token comment\"># 函数外部定义的变量，全局变量，函数体内外都可以使用</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 阿伟</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 函数调用</span>\n\n\nfun2<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 阿伟</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 函数定义</span>\n    <span class=\"token keyword\">global</span> age  <span class=\"token comment\"># 函数内部定义的变量，局部变量  使用global声明，变量就变为全局变量</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 20</span>\n\n\nage <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\nfun3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 函数调用</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 20</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\882cb9aad17f43638b46996663ec66a4.png\"/></p>\n<h2><a id=\"_382\"></a>六、代码复用</h2>\n<blockquote>\n<p>  函数是程序的一种基本抽象方式，它将一系列代码组织起来通过命名供其他程序使用。<code>函数封装</code>的直接好处是代码复用，任何其他代码只要输入参数即可调用函数，从而避免相同功能的代码在被调用处重复编写。代码复用有另一个好处，当更新函数功能时，所有被调用处的功能都被更新。</p>\n</blockquote>\n<blockquote>\n<p>  程序由一系列代码组成，如果代码是顺序但无组织的，不仅不利于阅读和理解，也很难进行升级和维护。当程序长度在百行以上，如果不划分模块，程序的可读性就已经很糟糕了。解决这一问题最好的方法是将一个程序分割成短小的程序段，每一段程序完成一个小的功能。使用函数对合理划分为功能模块，并基于模块设计程序是一种常用方法，被称为“<code>模块化设计</code>”。</p>\n</blockquote>\n<blockquote>\n<p>  模块化设计是指函数的封装功能将程序划分成主程序、子程序和子程序间关系的表达。模块化设计是使用函数设计的思考方法， 以功能块为基本单位，一般有两个基本要求：</p>\n<ul><li><code>紧耦合</code>：尽可能合理划分功能块，功能块内部耦合紧密；</li><li><code>松耦合</code>：模块间关系尽可能简单，功能块之间耦合度低。</li></ul>\n</blockquote>\n<blockquote>\n<p>   使用函数只是模块化设计的必要非充分条件，根据计算需求合理划分函数十分重要。一般来说，完成特定功能或被经常复用的一组语句应该采用函数来封装，并尽可能减少函数间参数和返回值的数量。</p>\n</blockquote>\n<h2><a id=\"_394\"></a>七、递归函数</h2>\n<h3><a id=\"1_395\"></a>1.什么是递归函数</h3>\n<blockquote>\n<p>如果在一个函数的函数体内调用了该函数本身，这个函数就称为递归函数。</p>\n</blockquote>\n<h3><a id=\"2_398\"></a>2.递归的组成部分</h3>\n<blockquote>\n<p><code>递归调用</code>与<code>递归终止条件</code> 。</p>\n</blockquote>\n<h3><a id=\"3_401\"></a>3.递归的调用过程</h3>\n<blockquote>\n<p>每递归调用一次函数，都会在栈内存分配一个栈帧，每执行完一次函数，都会释放相应的空间。</p>\n</blockquote>\n<h3><a id=\"4_404\"></a>4.递归的优缺点</h3>\n<blockquote>\n<p>缺点：<code>占用内存多，效率低下</code>；<br/> 优点：<code>思路和代码简单</code>。</p>\n</blockquote>\n<ul><li>使用递归函数计算阶乘</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 1.使用递归函数计算阶乘</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 阶乘函数</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">elif</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> fun<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 720</span>\n\n</code></pre>\n<ul><li>斐波那契数列</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 2.斐波那契数列 1 1 2 3 5 8 13 ...</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 斐波那契函数</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">elif</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> fib<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 求斐波那契数列的第 n 项</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fib<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 8</span>\n\n</code></pre>\n<h2><a id=\"_441\"></a>八、总结</h2>\n<ul><li>函数使用<code>def</code>定义</li><li><code>*args</code>定义个数可变的位置形参</li><li><code>**kwargs</code>定义个数可变的关键字形参</li><li><code>变量=值</code>定义默认值形参</li><li>函数调用的实参：<code>位置实参</code>，<code>关键字实参</code></li><li>变量的作用域：<code>局部变量</code>，<code>全局变量</code></li></ul>\n<h3><a id=\"__449\"></a><strong><code>推 荐:牛客题霸-经典高频面试题库</code></strong></h3>\n<blockquote>\n<p>🌐 <code>找工作神器-|笔试题库|面试经验|大厂面试题</code> 👉 <a href=\"https://www.nowcoder.com/link/pc_csdncpt_flyme_python\">点击链接进行注册学习</a><br/> <img alt=\"在这里插入图片描述\" src=\"image\\0fcd593a13244dc3ac10f4355142a7c4.png\"/></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}