{"blogid": "125633293", "writerAge": "码龄1年", "writerBlogNum": "72", "writerCollect": "2610", "writerComment": "4589", "writerFan": "8313", "writerGrade": "6级", "writerIntegral": "8327", "writerName": "codeMak1r.小新", "writerProfileAdress": "writer_image\\profile_125633293.jpg", "writerRankTotal": "1737", "writerRankWeekly": "13", "writerThumb": "2774", "writerVisitNum": "208400", "blog_read_count": "3468", "blog_time": "已于 2022-07-09 22:44:02 修改", "blog_title": "＜前端路由原理＞react-router-dom入门级教程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>前言</h1>\n<blockquote>\n<p><strong><font color=\"#FF7F50\"> 😎😎欢迎来到我的博客😎😎</font></strong><br/> <strong>📔博主是一名大学在读本科生，主要学习方向是前端😊。<br/> 🍭目前已经更新了<font color=\"#FF7F50\">【Vue】、【React–从基础到实战】、【TypeScript】等等系列专栏🤩</font><br/> 🛠目前正在学习的是🔥<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          R\n         \n         \n          e\n         \n         \n          a\n         \n         \n          c\n         \n         \n          t\n         \n         \n          框\n         \n         \n          架\n         \n        \n        \n         React框架\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.68333em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.00773em;\">R</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">t</span><span class=\"mord cjk_fallback\">框</span><span class=\"mord cjk_fallback\">架</span></span></span></span></span>🔥，中间夹杂了一些基础知识的回顾⌨️<br/> 🌈博客主页👉<a href=\"https://blog.csdn.net/Svik_zy?type=blog\">codeMak1r.的博客</a><br/> ➕关注👍点赞📂收藏</strong></p>\n<p></p>\n<div class=\"toc\">\n<h3>😇😇本文目录😇😇</h3>\n<ul><li><a href=\"#_0\">前言</a></li><li><a href=\"#React_15\">React路由相关理解</a></li><li><ul><li><a href=\"#_SPA_16\">📕 SPA的理解</a></li><li><a href=\"#__22\">📗 路由的理解</a></li><li><a href=\"#__43\">📘 前端路由原理（重点）</a></li></ul>\n</li><li><a href=\"#reactrouterdom5_121\">react-router-dom@5</a></li><li><ul><li><a href=\"#__135\">📙 基本路由使用</a></li><li><a href=\"#__208\">📓 一般组件与路由组件</a></li><li><a href=\"#_APISwitch_233\">📓 路由API：Switch提高路由匹配效率（单一匹配）</a></li></ul>\n</li></ul>\n</div>\n<br/>\n<strong>本文被专栏<a href=\"https://blog.csdn.net/svik_zy/category_11671445.html?spm=1001.2014.3001.5482\">【React–从基础到实战】</a>收录</strong>\n<br/>\n<em>前文回顾：<a href=\"https://blog.csdn.net/Svik_zy/article/details/125540172?spm=1001.2014.3001.5501\">兄弟组件通信（axios、PubSub、fetch）</a></em>\n<p></p>\n</blockquote>\n<blockquote>\n<p><strong><font color=\"#FF7F50\">🕹坚持创作✏️，一起学习📖，码出未来👨🏻‍💻！</font></strong><br/> <img alt=\"在这里插入图片描述\" height=\"50%\" src=\"image\\a6f93b5b5c364b2b9ee375d423918b47.jpeg\" width=\"50%\"/></p>\n</blockquote>\n<h1><a id=\"React_15\"></a>React路由相关理解</h1>\n<h2><a id=\"_SPA_16\"></a>📕 SPA的理解</h2>\n<ol><li>单页WEB应用（single page web application , SPA）。</li><li>整个应用只有<strong>一个完整的页面</strong>。</li><li>点击页面的链接<strong>不会刷新</strong>页面，只会做页面的<strong>局部更新</strong></li><li>数据都需要通过ajax请求获取，并在前端异步展现。</li></ol>\n<h2><a id=\"__22\"></a>📗 路由的理解</h2>\n<p><strong>1. 什么是路由？</strong></p>\n<blockquote>\n<p>一个路由就是一个映射关系（key:value）</p>\n<p>key为路径，value可能是function 或 component</p>\n</blockquote>\n<p><strong>2. 路由分类</strong></p>\n<blockquote>\n<p>后端路由：</p>\n<ol><li>理解：value是 function ，用来处理客户端提交的请求。</li><li>注册路由：router.get(path, function(request,response))</li><li>工作过程：当node 接收到一个请求时，根据请求路径找到匹配的路由，调用路由中的函数来处理请求，返回响应数据。</li></ol>\n</blockquote>\n<blockquote>\n<p>前端路由：</p>\n<ol><li>浏览器端路由 ，value 是 component，用于展示页面内容；</li><li>注册路由：&lt;Router path=\"/test” component={Test}&gt;</li><li>工作过程：当浏览器的 path 变为 /test时，当前路由组件就会变为 Test 组件</li></ol>\n</blockquote>\n<h2><a id=\"__43\"></a>📘 前端路由原理（重点）</h2>\n<p>前端路由依靠的是浏览器的BOM对象中的history，也就是浏览器的历史记录（history）。</p>\n<p>但我们一般不直接操作BOM身上的history，而是借助history.js去操作BOM。</p>\n<p>history模式的路由：</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.bootcss.com/history/4.7.2/history.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> history <span class=\"token operator\">=</span> History<span class=\"token punctuation\">.</span><span class=\"token function\">createBrowserHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//方法一，直接使用H5推出的history身上的API</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\t\n</code></pre>\n<p>hash模式的路由：（地址栏中带有 # 号）</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.bootcss.com/history/4.7.2/history.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> history <span class=\"token operator\">=</span> History<span class=\"token punctuation\">.</span><span class=\"token function\">createHashHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//方法二，hash值（锚点）</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\t\n</code></pre>\n<p><strong>浏览器的历史记录（history）是一个栈的结构。</strong></p>\n<p><strong>浏览器的历史记录（history）是一个栈的结构。</strong></p>\n<p><strong>浏览器的历史记录（history）是一个栈的结构。</strong></p>\n<p>重要是事情说三遍。</p>\n<p>每当执行push操作时，都是将path推入栈顶，浏览器也自动显示栈顶的内容。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">// path：/test1</span>\n  history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>此时栈中有着至少两条数据，栈底是：localhost:5500,栈顶是刚刚push进来的 localhost:5500/test1<br/> 浏览器会显示栈顶路径对应的路由界面。<br/> 执行浏览器的回退操作其实就是将栈顶的 “/test1”出栈。</p>\n<hr/>\n<p>而执行replace操作时，是将目前栈顶的元素替换。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">// path: /test2</span>\n  history<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>若原栈顶是 /test1，执行replace后则将栈顶的 /test1替换为 /test2，且显示的是 /test2 的路由界面。</p>\n<hr/>\n<p>监听路由发生变化</p>\n<pre><code class=\"prism language-js\">history<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">location</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请求路由路径变化了'</span><span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<hr/>\n<p>路由实现页面回退（将栈顶元素出栈）</p>\n<pre><code class=\"prism language-js\">history<span class=\"token punctuation\">.</span><span class=\"token function\">goBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>路由实现页面前进（将栈外元素推入栈顶）</p>\n<pre><code class=\"prism language-js\">history<span class=\"token punctuation\">.</span><span class=\"token function\">goForward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"reactrouterdom5_121\"></a>react-router-dom@5</h1>\n<ol><li>react的一个插件库</li><li>专门用来实现一个SPA应用</li><li>基于 React 的项目基本都会用到此库。</li></ol>\n<p>下载react-router-dom</p>\n<pre><code>npm install react-router-dom@5\nyarn add react-router-dom@5\n</code></pre>\n<blockquote>\n<p>⚠️注意，本文讲解的是react-router-dom@5.3.3版本</p>\n</blockquote>\n<h2><a id=\"__135\"></a>📙 基本路由使用</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/171910b30eec4cf79d60e59a1f55fc8d.gif#pic_center\"/></p>\n<blockquote>\n<p>要实现图中案例，首先要先实现：（编写路由链接）<br/> 点击按钮实现路径跳转（也就是点击About，路径变为：localhost:3000/about）<br/> 然后实现：（注册路由）<br/> 路径变化后自动匹配响应的路由组件。（也就是路径为：/about时，自动匹配About组件）</p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> NavLink<span class=\"token punctuation\">,</span> Route <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span>\n<span class=\"token keyword\">import</span> Home <span class=\"token keyword\">from</span> <span class=\"token string\">'./pages/Home'</span>  <span class=\"token comment\">// Home是路由组件</span>\n<span class=\"token keyword\">import</span> About <span class=\"token keyword\">from</span> <span class=\"token string\">'./pages/About'</span>  <span class=\"token comment\">// About是路由组件</span>\n<span class=\"token keyword\">import</span> Header <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Header'</span>  <span class=\"token comment\">// Header是一般组件</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"row\"</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"col-xs-offset-2 col-xs-8\"</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>Header <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"row\"</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"col-xs-2 col-xs-offset-2\"</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"list-group\"</span><span class=\"token operator\">&gt;</span>\n              <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/* 原生html中靠&lt;a&gt;跳转不同的页面 */</span><span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/* &lt;a href=\"./about.html\" className=\"list-group-item\"&gt;About&lt;/a&gt;\n              &lt;a href=\"./home.html\" className=\"list-group-item\"&gt;Home&lt;/a&gt; */</span><span class=\"token punctuation\">}</span>\n\n              <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/* 在React中靠路由链接实现切换组件—-编写路由链接 */</span><span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">&lt;</span>NavLink className<span class=\"token operator\">=</span><span class=\"token string\">\"list-group-item\"</span> to<span class=\"token operator\">=</span><span class=\"token string\">\"/about\"</span><span class=\"token operator\">&gt;</span>About<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>NavLink<span class=\"token operator\">&gt;</span>\n              <span class=\"token operator\">&lt;</span>NavLink className<span class=\"token operator\">=</span><span class=\"token string\">\"list-group-item\"</span> to<span class=\"token operator\">=</span><span class=\"token string\">\"/home\"</span><span class=\"token operator\">&gt;</span>Home<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>NavLink<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"col-xs-6\"</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"panel\"</span><span class=\"token operator\">&gt;</span>\n              <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"panel-body\"</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/* 注册路由 */</span><span class=\"token punctuation\">}</span>\n                <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/about\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>About<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/home\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>Home<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这么写的话脚手架会报一个错误：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a808c3b6c6dd43dcbebaa5ea40a79c6e.png\"/><br/> 原因是，要在<code>&lt;NavLink&gt;</code>标签以及<code>&lt;Route&gt;</code>标签外面用<code>&lt;Router&gt;</code>标签包裹起来。<br/> 我们可以在index.js中完成这个需求：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> BrowserRouter <span class=\"token keyword\">as</span> Router <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>StrictMode<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>StrictMode<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>将整个App组件用Router标签包裹起来，这样就不会有报错啦。</p>\n<h2><a id=\"__208\"></a>📓 一般组件与路由组件</h2>\n<blockquote>\n<p>路由组件与一般组件的不同：</p>\n<ol><li> <p>路由组件放在 pages 文件夹中，一般组件放在 components 文件夹中；</p> </li><li> <p>路由组件使用：</p> <pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> Home <span class=\"token keyword\">from</span> <span class=\"token string\">'./pages/Home'</span>  <span class=\"token comment\">// Home是路由组件</span>\n<span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/home\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>Home<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre> </li><li> <p>一般组件使用：</p> <pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> Header <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Header'</span>  <span class=\"token comment\">// Header是一般组件</span>\n<span class=\"token operator\">&lt;</span>Header <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre> </li><li> <p>一般组件只要没传递props，那么组件的内部的this.props就一定为空。</p> </li><li> <p><strong>哪怕没给路由组件传递props属性，路由组件内部的this.props并不为空。</strong></p> <p>原因是：路由组件会收到路由器自动传递给路由组件的props。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e660b40164dd42b487ac2228f723fe48.png\"/></p> </li></ol>\n</blockquote>\n<h2><a id=\"_APISwitch_233\"></a>📓 路由API：Switch提高路由匹配效率（单一匹配）</h2>\n<p>不加switch：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"panel-body\"</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/* 注册路由 */</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/about\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>About<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/home\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>Home<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">'/home'</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>Demo<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\63e679edc2c14bde99f052c1fa29b422.png\"/></p>\n<blockquote>\n<p>注册路由时，不使用switch，两个组件同时匹配/home路径。</p>\n<p>此时两个组件内容都会展示。</p>\n<p>原因是：</p>\n<p>注册路由时，与路径相匹配的路由组件都会展示，都会一一匹配。</p>\n</blockquote>\n<p>使用switch：</p>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"panel-body\"</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/* 注册路由 */</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/about\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>About<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/home\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>Home<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">'/home'</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>Demo<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\56687d9e6ad940739379fa5e0b38a2b7.png\"/></p>\n<blockquote>\n<p>注册路由时，在外围包裹一组 Switch 标签，可以让路由实现单一匹配，也就是说，/home路径匹配到Home组件之后就不会再向下继续匹配了。这样的好处是，提高了路由匹配效率，<mark>如果不添加 Switch 标签，react路由会同一个路径查找多次，但是添加了 Switch 标签后，react路由只要查找到第一个与路径匹配的组件（如本例中的Home组件）就会结束查找，提高效率。</mark></p>\n</blockquote>\n<blockquote>\n<p><strong>🎉🎉今天的小知识就分享到这里啦<br/> 如果觉得博主的文章还不错的话<br/> ➕关注博主👍点赞文章📁收藏文章<br/> ✏️原创不易你的支持将会是我最大的动力💪<br/> 🧸感谢观看</strong></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}