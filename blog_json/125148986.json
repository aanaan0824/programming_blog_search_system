{"blogid": "125148986", "writerAge": "码龄2年", "writerBlogNum": "55", "writerCollect": "108", "writerComment": "19", "writerFan": "3298", "writerGrade": "3级", "writerIntegral": "592", "writerName": "努力学习前端的赵十三", "writerProfileAdress": "writer_image\\profile_125148986.jpg", "writerRankTotal": "26811", "writerRankWeekly": "1329", "writerThumb": "25", "writerVisitNum": "62285", "blog_read_count": "1768", "blog_time": "于 2022-06-16 17:56:19 发布", "blog_title": "JS语法 ES6、ES7、ES8、ES9、ES10、ES11、ES12新特性", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>前言</h2>\n<p>本文集合了 ES6 至 ES11 常用到的特性，包括还在规划的 ES12，只列举大概使用，详细介绍的话内容量将十分巨大<sub>.</sub>。PS：使用新特性需要使用最新版的 bable 就行转义。</p>\n<h2><a id=\"ES62015_3\"></a>ES6（2015）</h2>\n<ul><li>类</li><li>模块化</li><li>箭头函数</li><li>函数参数默认值</li><li>模板字符串</li><li>解构赋值</li><li>延展操作符</li><li>对象属性简写</li><li>Promise</li><li>Let与Const</li></ul>\n<h3><a id=\"1%09class_15\"></a>1. 类（class）</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Man</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'赵十三'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> man <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Man</span><span class=\"token punctuation\">(</span><span class=\"token string\">'赵十三'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nman<span class=\"token punctuation\">.</span><span class=\"token function\">console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 赵十三</span>\n</code></pre>\n<h3><a id=\"2%09ES_Module_28\"></a>2. 模块化（ES Module）</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 模块 A 导出一个方法</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sub</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 模块 B 导入使用</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> sub <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./A'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre>\n<h3><a id=\"3%09_37\"></a>3. 箭头函数</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\n</code></pre>\n<h3><a id=\"4%09_42\"></a>4. 函数参数默认值</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 调用func函数未传参数时，控制台默认打印 11</span>\n\t<span class=\"token comment\">// 调用func函数传了参数时，控制台打印传的参数</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"5%09_50\"></a>5. 模板字符串（反引号``+${变量名}）</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'赵十三'</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">我的名字是</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 我的名字是赵十三</span>\n</code></pre>\n<h3><a id=\"6%09httpsdevelopermozillaorgzhCNdocsWebJavaScriptReferenceOperatorsDestructuring_assignment_56\"></a>6. <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">解构赋值</a>（注意范例里边的重点注意事项）</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span>\n<span class=\"token comment\">// 将剩余的值赋值给一个变量</span>\n<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [30, 40, 50]</span>\n<span class=\"token comment\">// 结构对象</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span>\n<span class=\"token comment\">// Stage 4（已完成）提案中的特性</span>\n<span class=\"token comment\">// 结构对象 + 将剩余对象赋值给一个变量</span>\n<span class=\"token comment\">// 注意：1、赋值语句周围的圆括号 ( ... ) 在使用对象字面量无声明解构赋值时是必须的！！！！！！一定要注意！！！！！！</span>\n<span class=\"token comment\">// 注意：2、( ... ) 表达式之前需要有一个分号，否则它可能会被当成上一行中的函数执行！！！！！！！！</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {c: 30, d: 40}</span>\n<span class=\"token comment\">// 交换变量</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n</code></pre>\n<h3><a id=\"7%09_86\"></a>7. 展开运算符（延展操作符）</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\"]</span>\n</code></pre>\n<h3><a id=\"8%09_90\"></a>8. 对象属性简写</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> name<span class=\"token operator\">=</span><span class=\"token string\">'小豪'</span><span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"9_Promise_95\"></a>9. Promise</h3>\n<pre><code class=\"prism language-javascript\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 先打印 1 ，再打印 2</span>\n</code></pre>\n<h3><a id=\"10_let__const_101\"></a>10. let 和 const</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'小豪'</span>；\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"let__constvar__106\"></a>面试题：let 和 const、var 的区别：</h4>\n<ul><li>let ： 定义变量</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> 和 <span class=\"token keyword\">var</span> 的区别：\n <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span>var可以重复定义，<span class=\"token keyword\">let</span>不可以重复定义\n <span class=\"token operator\">*</span> <span class=\"token number\">2.</span> <span class=\"token keyword\">var</span>有变量提升，<span class=\"token keyword\">let</span>没有变量提升 （也可以叫预解析）\n <span class=\"token operator\">*</span> <span class=\"token number\">3.</span> <span class=\"token keyword\">var</span>没有块级作用域<span class=\"token punctuation\">,</span><span class=\"token keyword\">let</span>有块级作用域\n</code></pre>\n<ul><li>const：定义常量，即值不会改变的量</li></ul>\n<pre><code class=\"prism language-javascript\">注意：<span class=\"token operator\">**</span><span class=\"token keyword\">const</span>定义常量时必须赋值<span class=\"token operator\">**</span>\n那么，如何改变<span class=\"token keyword\">const</span>定义的值呢？？？\n答：<span class=\"token operator\">**</span>可以通过给<span class=\"token keyword\">const</span>定义一个对象，那对象中的属性是可以改变值的 <span class=\"token operator\">**</span>\n例如：<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'alice'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">}</span>\n      obj<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">'jack'</span>\n</code></pre>\n<h3><a id=\"11_set__map_123\"></a>11. set 和 map</h3>\n<h4><a id=\"sethttpsdevelopermozillaorgzhCNdocsWebJavaScriptReferenceGlobal_ObjectsSet_124\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set\">set</a></h4>\n<pre><code>set ：可以理解成是不重复的数组\nadd:添加一个值\ndelete：删除一个值\nclear:删除所有值\n通过for of 来遍历set数据结构\n</code></pre>\n<pre><code class=\"prism language-javascript\">面试题：<span class=\"token number\">1</span>、如何通过<span class=\"token keyword\">set</span>可实现数组去重？\n  <span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n  Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>或<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<pre><code class=\"prism language-javascript\">面试题：<span class=\"token number\">2</span>、<span class=\"token keyword\">set</span> 和 数组 的互转\n  <span class=\"token operator\">**</span> 数组转换成set<span class=\"token operator\">:</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>数组<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">**</span> <span class=\"token keyword\">set</span>转换成数组：Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span>类型的变量<span class=\"token punctuation\">)</span>\n</code></pre>\n<h4><a id=\"maphttpsdevelopermozillaorgzhCNdocsWebJavaScriptReferenceGlobal_ObjectsMap_140\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map\">map</a></h4>\n<pre><code>map:可以理解成是一个对象\n注意：注意这里的map是一个构造函数，不是数组中的map\n优点：可以将将任意的数据类型的值当作对象的属性来使用，避免了传统的对象属性只有是字符串类型\n</code></pre>\n<h2><a id=\"ES72016_145\"></a>ES7（2016）</h2>\n<h3><a id=\"1__Arrayprototypeincludes_146\"></a>1. Array.prototype.includes()</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre>\n<h3><a id=\"2__150\"></a>2. 指数操作符</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1024</span>\n</code></pre>\n<h2><a id=\"ES82017_154\"></a>ES8（2017）</h2>\n<ul><li>async/await</li><li>Object.values()</li><li>Object.entries()</li><li>String padding:padStart()和padEnd()，填充字符串达到当前长度</li><li>函数参数列表结尾允许逗号</li><li>Object.getOwnPropertyDescriptors()</li><li>ShareArrayBuffer和Atomics对象，用于从共享内存位置读取和写入</li></ul>\n<h3><a id=\"1_asyncawait_163\"></a>1. async/await（异步终极解决方案）</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">getTableData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// await 异步任务</span>\n    <span class=\"token comment\">// do something    </span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"2_Objectkeysobj_Objectvaluesobj_Objectentriesobj_170\"></a>2. Object.keys(obj) Object.values(obj) Object.entries(obj)</h3>\n<p>Object.keys(obj) —— 返回一个包含该对象所有的键的数组。<br/> Object.values(obj) —— 返回一个包含该对象所有的值的数组。<br/> Object.entries(obj) —— 返回一个包含该对象所有 [key, value] 键值对的数组。</p>\n<pre><code class=\"prism language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  ['a', 'b', 'c']</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3]</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [[\"a\", 1], [\"b\", 2], [\"c\", 3]]</span>\n</code></pre>\n<h3><a id=\"3_String_padding_179\"></a>3. String padding</h3>\n<h4><a id=\"_StringprototypepadStart_180\"></a>- String.prototype.padStart()</h4>\n<p>语法：<code>str.padStart(targetLength [, padString])</code><br/> 参数：</p>\n<h5><a id=\"1targetLength__183\"></a>1、<code>targetLength</code> ：当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。</h5>\n<h5><a id=\"2padString__U0020_184\"></a>2、<code>padString</code>：填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的默认值为 \" \"（U+0020）。</h5>\n<p>返回值：在原字符串开头填充指定的填充字符串直到目标长度所形成的新字符串。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> fullNumber <span class=\"token operator\">=</span> <span class=\"token string\">'2034399002125581'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> last4Digits <span class=\"token operator\">=</span> fullNumber<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> maskedNumber <span class=\"token operator\">=</span> last4Digits<span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span>fullNumber<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>maskedNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ************5581</span>\n</code></pre>\n<h4><a id=\"_StringprototypepadEnd_192\"></a>- String.prototype.padEnd()</h4>\n<p><code>padEnd()</code>区别于<code>padStart()</code> 的就是它是从右侧开始填充</p>\n<h3><a id=\"4___195\"></a>4. 函数参数列表结尾允许逗号</h3>\n<h3><a id=\"5_ObjectgetOwnPropertyDescriptorsobj_197\"></a>5. Object.getOwnPropertyDescriptors(obj)</h3>\n<p>用来获取一个对象的所有自身属性的描述符，如果没有任何自身属性，则返回空对象</p>\n<h3><a id=\"6_SharedArrayBuffer_200\"></a>6. SharedArrayBuffer对象</h3>\n<p>SharedArrayBuffer 对象用来表示一个通用的，固定长度的原始二进制数据缓冲区</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 语法：new SharedArrayBuffer(length)</span>\n<span class=\"token comment\">// 参数：length指所创建的数组缓冲区的大小，以字节(byte)为单位。</span>\n<span class=\"token comment\">// 返回值：一个大小指定的新 SharedArrayBuffer 对象。其内容被初始化为 0。</span>\n<span class=\"token comment\">// 注意：需要new运算符构造</span>\n<span class=\"token comment\">// 创建一个1024字节的缓冲</span>\n<span class=\"token keyword\">let</span> sab <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SharedArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"7_Atomicshttpswwwcnblogscomsweeeperp14344073html_210\"></a>7. <a href=\"https://www.cnblogs.com/sweeeper/p/14344073.html\">Atomics对象</a></h3>\n<p>Atomics 对象提供了一组静态方法用来对 SharedArrayBuffer 对象进行原子操作。<br/> 这些原子操作属于 Atomics 模块。与一般的全局对象不同，Atomics 不是构造函数，因此不能使用 new 操作符调用，也不能将其当作函数直接调用。Atomics 的所有属性和方法都是静态的（与 Math 对象一样）。<br/> 多个共享内存的线程能够同时读写同一位置上的数据。原子操作会确保正在读或写的数据的值是符合预期的，即下一个原子操作一定会在上一个原子操作结束后才会开始，其操作过程不会中断。<br/> 具体相关内容可以看看链接里的讲解，有很多！！！</p>\n<h2><a id=\"ES92018_215\"></a>ES9（2018）</h2>\n<ul><li>异步迭代</li><li>Promise.finally()</li><li>Rest/Spread 属性</li><li>正则表达式命名捕获组（Regular ExpressionNamed Capture Groups）</li><li>正则表达式反向断言（lookbehind）</li><li>正则表达式dotAll模式</li><li>正则表达式Unicode 转义</li><li>非转义序列的模板字符串</li></ul>\n<h3><a id=\"1%09_224\"></a>1. 异步迭代</h3>\n<p>await可以和for…of循环一起使用，以串行的方式运行异步操作</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// doSomething(i);</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"2_Promisefinally_234\"></a>2. Promise.finally()</h3>\n<pre><code class=\"prism language-javascript\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"3_RestSpread__238\"></a>3. Rest/Spread 属性（展开运算符…和剩余运算符…）</h3>\n<ul><li>用于对象解构的 rest 操作符(…)。目前，这个操作符只能在数组解构和参数定义中使用</li><li>对象字面量中的 spread 操作符(…)。目前，这个操作符只能用于数组字面量和在函数方法中调用。</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 展开运算符（...）</span>\n<span class=\"token keyword\">const</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n<span class=\"token comment\">// 剩余运算符（...）</span>\n<span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">marginLeft</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">marginRight</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> width<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>margin <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> style<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// =&gt; 300</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>margin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// =&gt; { marginLeft: 10, marginRight: 30 }</span>\n</code></pre>\n<h3><a id=\"4%09_255\"></a>4. 正则表达式命名捕获组</h3>\n<p>JavaScript正则表达式可以返回一个匹配的对象——一个包含匹配字符串的类数组，例如：以<code>YYYY-MM-DD</code>的格式解析日期：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span>\n  reDate <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">([0-9]{4})-([0-9]{2})-([0-9]{2})</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n  match  <span class=\"token operator\">=</span> reDate<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2018-04-30'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  year   <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 2018</span>\n  month  <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 04</span>\n  day    <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span>\n</code></pre>\n<p>这样的代码很难读懂，并且改变正则表达式的结构有可能改变匹配对象的索引。<br/> ES2018允许命名捕获组使用符号<code>?&lt;name&gt;</code>，在打开捕获括号<code>(</code>后立即命名，示例如下：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span>\n  reDate <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;year&gt;[0-9]{4})-(?&lt;month&gt;[0-9]{2})-(?&lt;day&gt;[0-9]{2})</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n  match  <span class=\"token operator\">=</span> reDate<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2018-04-30'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  year   <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 2018</span>\n  month  <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 04</span>\n  day    <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 30</span>\n</code></pre>\n<p>任何匹配失败的命名组都将返回<code>undefined</code>。<br/> 命名捕获也可以使用在<code>replace()</code>方法中。例如将日期转换为美国的 <code>MM-DD-YYYY 格式</code>：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span>\n  reDate <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;year&gt;[0-9]{4})-(?&lt;month&gt;[0-9]{2})-(?&lt;day&gt;[0-9]{2})</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n  d      <span class=\"token operator\">=</span> <span class=\"token string\">'2018-04-30'</span><span class=\"token punctuation\">,</span>\n  usDate <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reDate<span class=\"token punctuation\">,</span> <span class=\"token string\">'$&lt;month&gt;-$&lt;day&gt;-$&lt;year&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"5__286\"></a>5. 正则表达式反向断言</h3>\n<p>目前JavaScript在正则表达式中支持先行断言（lookahead）。这意味着匹配会发生，但不会有任何捕获，并且断言没有包含在整个匹配字段中。例如从价格中捕获货币符号：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span>\n  reLookahead <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\D(?=\\d+)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n  match       <span class=\"token operator\">=</span> reLookahead<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$123.89'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// $</span>\n</code></pre>\n<p>ES2018引入以相同方式工作但是匹配前面的反向断言（lookbehind），这样我就可以忽略货币符号，单纯的捕获价格的数字：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span>\n  reLookbehind <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;=\\D)\\d+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n  match        <span class=\"token operator\">=</span> reLookbehind<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$123.89'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123.89</span>\n</code></pre>\n<p>以上是 肯定反向断言，非数字<code>\\D</code>必须存在。同样的，还存在 <strong>否定反向断言</strong>，表示一个值必须不存在，例如：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span>\n  reLookbehindNeg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;!\\D)\\d+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n  match           <span class=\"token operator\">=</span> reLookbehind<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$123.89'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n</code></pre>\n<h3><a id=\"6_dotAll_315\"></a>6. 正则表达式dotAll模式</h3>\n<p>正则表达式中点<code>.</code>匹配除回车外的任何单字符，标记<code>s</code>改变这种行为，允许行终止符的出现，例如：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">hello.world</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello\\nworld'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false</span>\n<span class=\"token operator\">/</span>hello<span class=\"token punctuation\">.</span>world<span class=\"token operator\">/</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello\\nworld'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre>\n<h3><a id=\"7__Unicode__323\"></a>7. 正则表达式 Unicode 转义</h3>\n<p>到目前为止，在正则表达式中本地访问 Unicode 字符属性是不被允许的。ES2018添加了 Unicode 属性转义——形式为<code>\\p{...}</code>和<code>\\P{...}</code>，在正则表达式中使用标记 <code>u</code> (unicode) 设置，在<code>\\p</code>块儿内，可以以键值对的方式设置需要匹配的属性而非具体内容。例如：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> reGreekSymbol <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\p{Script=Greek}</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">u</span></span><span class=\"token punctuation\">;</span>\nreGreekSymbol<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'π'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre>\n<p>此特性可以避免使用特定 Unicode 区间来进行内容类型判断，提升可读性和可维护性。</p>\n<h3><a id=\"8%09__332\"></a>8. 非转义序列的模板字符串</h3>\n<p>之前，<code>\\u</code>开始一个 unicode 转义，<code>\\x</code>开始一个十六进制转义，<code>\\</code>后跟一个<code>数字</code>开始一个八进制转义。这使得创建特定的字符串变得不可能，例如Windows文件路径 C:\\uuu\\xxx\\111。更多细节参考模板字符串。</p>\n<h2><a id=\"ES102019_335\"></a>ES10新特性（2019）</h2>\n<ul><li>行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与JSON匹配</li><li>更加友好的 JSON.stringify</li><li>新增了Array的flat()方法和flatMap()方法</li><li>新增了String的trimStart()方法和trimEnd()方法</li><li>Object.fromEntries()</li><li>Symbol.prototype.description</li><li>String.prototype.matchAll</li><li>Function.prototype.toString()现在返回精确字符，包括空格和注释</li><li>简化try {} catch {},修改 catch 绑定</li><li>新的基本数据类型BigInt</li><li>globalThis</li><li>import()</li><li>Legacy RegEx</li><li>私有的实例方法和访问器</li></ul>\n<h3><a id=\"1_U__2028U__2029JSON_352\"></a>1. 行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与JSON匹配</h3>\n<p>以前，这些符号在字符串文字中被视为行终止符，因此使用它们会导致SyntaxError异常。</p>\n<h3><a id=\"2__JSONstringify_355\"></a>2. 更加友好的 JSON.stringify</h3>\n<p>如果输入 Unicode 格式但是超出范围的字符，在原先JSON.stringify返回格式错误的Unicode字符串。现在实现了一个改变JSON.stringify的第3阶段提案，因此它为其输出转义序列，使其成为有效Unicode（并以UTF-8表示）</p>\n<h3><a id=\"3_ArrayflatflatMap_358\"></a>3. 新增了Array的flat()方法和flatMap()方法</h3>\n<p>数组扁平化概念：如何将多维数组转换成一维数组的过程<br/> <code>flat()</code>和<code>flatMap()</code>本质上就是是归纳（reduce） 与 合并（concat）的操作。<br/> <strong>Array.prototype.flat()</strong><br/> <code>flat()</code> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p>\n<ul><li>flat()方法最基本的作用就是数组降维</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr1<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// [1, 2, 3, 4]</span>\n\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr2<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [1, 2, 3, 4, [5, 6]]</span>\n\n<span class=\"token keyword\">var</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr3<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [1, 2, 3, 4, 5, 6]</span>\n\n<span class=\"token comment\">//使用 Infinity 作为深度，展开任意深度的嵌套数组</span>\narr3<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// [1, 2, 3, 4, 5, 6]</span>\n</code></pre>\n<ul><li>其次，还可以利用<code>flat()</code>方法的特性来去除数组的空项</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> arr4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr4<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [1, 2, 4, 5]</span>\n</code></pre>\n<p><strong>Array.prototype.flatMap()</strong><br/> <code>flatMap()</code> 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 和 深度值1的 flat 几乎相同，但 flatMap 通常在合并成一种方法的效率稍微高一些。<br/> 这里我们拿map方法与flatMap方法做一个比较。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\narr1<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// [[2], [4], [6], [8]]</span>\n\narr1<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span>x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [2, 4, 6, 8]</span>\n\n<span class=\"token comment\">// 只会将 flatMap 中的函数返回的数组 “压平” 一层</span>\narr1<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [[2], [4], [6], [8]]</span>\n</code></pre>\n<h3><a id=\"4_StringtrimStarttrimEnd_407\"></a>4. 新增了String的<code>trimStart()</code>方法和<code>trimEnd()</code>方法</h3>\n<p>新增的这两个方法很好理解，分别去除字符串首尾空白字符，这里就不用例子说声明了。</p>\n<h3><a id=\"5_ObjectfromEntries_409\"></a>5. Object.fromEntries()</h3>\n<p><code>Object.entries()</code>方法的作用是返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 <code>for...in</code> 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环也枚举原型链中的属性）。<br/> 而<code>Object.fromEntries()</code> 则是 <code>Object.entries()</code> 的<strong>反转</strong>。<br/> <code>Object.fromEntries()</code> 函数传入一个键值对的列表，并返回一个带有这些键值对的<strong>新对象</strong>。这个迭代参数应该是一个能够实现@iterator方法的的对象，返回一个迭代器对象。它生成一个具有两个元素的类似数组的对象，第一个元素是将用作属性键的值，第二个元素是与该属性键关联的值。</p>\n<ul><li>通过 Object.fromEntries， 可以将 Map 转化为 Object:</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'baz'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">fromEntries</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { foo: \"bar\", baz: 42 }</span>\n</code></pre>\n<ul><li>通过 Object.fromEntries， 可以将 Array 转化为 Object:</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">fromEntries</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { 0: \"a\", 1: \"b\", 2: \"c\" }</span>\n</code></pre>\n<h3><a id=\"6_Symbolprototypedescription_430\"></a>6. Symbol.prototype.description</h3>\n<p>通过工厂函数Symbol（）创建符号时，您可以选择通过参数提供字符串作为描述：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> sym <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The description'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>以前，访问描述的唯一方法是将符号转换为字符串：</p>\n<pre><code class=\"prism language-javascript\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>sym<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Symbol(The description)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>现在引入了getter Symbol.prototype.description以直接访问描述：</p>\n<pre><code class=\"prism language-javascript\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>sym<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">,</span> <span class=\"token string\">'The description'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"7_StringprototypematchAll_443\"></a>7. String.prototype.matchAll</h3>\n<p><code>matchAll()</code> 方法返回一个包含所有匹配正则表达式及分组捕获结果的迭代器。<br/> 在 matchAll 出现之前，通过在循环中调用regexp.exec来获取所有匹配项信息（regexp需使用/g标志：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> regexp <span class=\"token operator\">=</span> <span class=\"token function\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo*'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'table football, foosball'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>matches <span class=\"token operator\">=</span> regexp<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Found </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>matches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">. Next starts at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>regexp<span class=\"token punctuation\">.</span>lastIndex<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// expected output: \"Found foo. Next starts at 9.\"</span>\n  <span class=\"token comment\">// expected output: \"Found foo. Next starts at 19.\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>如果使用matchAll ，就可以不必使用while循环加exec方式（且正则表达式需使用／g标志）。使用matchAll 会得到一个迭代器的返回值，配合 for…of, array spread, or Array.from() 可以更方便实现功能：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> regexp <span class=\"token operator\">=</span> <span class=\"token function\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo*'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'table football, foosball'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> matches <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">matchAll</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> match <span class=\"token keyword\">of</span> matches<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Array [ \"foo\" ]</span>\n<span class=\"token comment\">// Array [ \"foo\" ]</span>\n\n<span class=\"token comment\">// matches iterator is exhausted after the for..of iteration</span>\n<span class=\"token comment\">// Call matchAll again to create a new iterator</span>\nmatches <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">matchAll</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>matches<span class=\"token punctuation\">,</span> <span class=\"token parameter\">m</span> <span class=\"token operator\">=&gt;</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Array [ \"foo\", \"foo\" ]</span>\n</code></pre>\n<p><strong>matchAll可以更好的用于分组</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> regexp <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">t(e)(st(\\d?))</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'test1test2'</span><span class=\"token punctuation\">;</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// Array ['test1', 'test2']</span>\n</code></pre>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">matchAll</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\narray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['test1', 'e', 'st1', '1', index: 0, input: 'test1test2', length: 4]</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['test2', 'e', 'st2', '2', index: 5, input: 'test1test2', length: 4]</span>\n</code></pre>\n<h3><a id=\"8_FunctionprototypetoString_494\"></a>8. <code>Function.prototype.toString()</code>现在返回精确字符，包括空格和注释</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token comment\">/* comment */</span> foo <span class=\"token comment\">/* another comment */</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 之前不会打印注释部分</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function foo(){}</span>\n\n<span class=\"token comment\">// ES2019 会把注释一同打印</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function /* comment */ foo /* another comment */ (){}</span>\n\n<span class=\"token comment\">// 箭头函数</span>\n<span class=\"token keyword\">const</span> bar <span class=\"token comment\">/* comment */</span> <span class=\"token operator\">=</span> <span class=\"token comment\">/* another comment */</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// () =&gt; {}</span>\n</code></pre>\n<h3><a id=\"9__catch__511\"></a>9. 修改 catch 绑定</h3>\n<p>在 ES10 之前，我们必须通过语法为 catch 子句绑定异常变量，无论是否有必要。很多时候 catch 块是多余的。 ES10 提案使我们能够简单的把变量省略掉。<br/> 不算大的改动。<br/> 之前是<code>try {} catch(e) {}</code>现在是<code>try {} catch {}</code></p>\n<h3><a id=\"10_BigInt_516\"></a>10. 新的基本数据类型BigInt</h3>\n<p>现在的基本数据类型（值类型）不止5种（<strong>ES6之后是六种</strong>）了哦！加上BigInt一共有<code>七种基本数据类型</code>，分别是：<code>String、Number、Boolean、Null、Undefined、Symbol、BigInt</code></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}