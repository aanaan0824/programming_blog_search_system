{"blogid": "126712597", "writerAge": "码龄4年", "writerBlogNum": "367", "writerCollect": "707", "writerComment": "55", "writerFan": "366", "writerGrade": "5级", "writerIntegral": "4016", "writerName": "悬浮海", "writerProfileAdress": "writer_image\\profile_126712597.jpg", "writerRankTotal": "6488", "writerRankWeekly": "213620", "writerThumb": "173", "writerVisitNum": "140629", "blog_read_count": "65", "blog_time": "于 2022-09-05 20:11:50 发布", "blog_title": "Java中的注解是怎么发挥作用的？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_2\">注解是啥</a></li><li><a href=\"#_8\">常见注解的种类</a></li><li><a href=\"#_12\">注解三板斧</a></li><li><a href=\"#_23\">第一步：定义注解</a></li><li><ul><li><a href=\"#_27\">前置知识</a></li><li><a href=\"#_69\">声明注解</a></li><li><a href=\"#_86\">注解的修饰目标</a></li><li><a href=\"#_135\">注解的生命周期</a></li><li><a href=\"#_174\">注解的属性</a></li></ul>\n</li><li><a href=\"#_192\">第二步：使用注解</a></li><li><a href=\"#_209\">第三步：读取注解</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_2\"></a>注解是啥</h2>\n<p>注解本身不提供作用，注解只能是被看作元数据，它不包含任何业务逻辑。注解更像是一个标签，一个声明，表面被注释的这个地方，将具有某种特定的逻辑。</p>\n<p>注解（Annotation），也叫元数据，是一种代码级别的说明。是Java 的JDK1.5版本开始引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、属性、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p>\n<h2><a id=\"_8\"></a>常见注解的种类</h2>\n<p>常见的注解有三大类：JDK的，自定义的，第三方的（比如框架）</p>\n<h2><a id=\"_12\"></a>注解三板斧</h2>\n<p>定义、使用、读取</p>\n<ul><li> <p>定义：包括名字，能用到哪些地方，有效期，是否可以被继承</p> </li><li> <p>使用：定义好之后在允许的地方使用标注即可</p> </li><li> <p>读取：让注解发挥作用，给注解注入灵魂</p> </li></ul>\n<p>光有前两步，没什么用，如最熟悉的@Override注解，为什么能验证重写是否有效，怎么不是验证重载？spring的@Autowired为什么是注入作用，而不是输出一句话？显然，他们在程序中做了实现，使得其注解具有各自的作用，也具有了意义，而赋予灵魂的一步就是读取</p>\n<h2><a id=\"_23\"></a>第一步：定义注解</h2>\n<p>定义一个注解很简单，和定义一个类很相似。</p>\n<h3><a id=\"_27\"></a>前置知识</h3>\n<p>首先是元注解，Java给我们提供了四个元注解，用于我们自定义的注解上：</p>\n<p><strong>@Documented| @Retention | @Target | @Inherited</strong></p>\n<p>分别解释下</p>\n<p>@Documented</p>\n<blockquote>\n<p>代表着此注解会被javadoc工具提取成文档</p>\n</blockquote>\n<p>@Retention：</p>\n<blockquote>\n<p>代表该注解的有效期<br/> <code>SOURCE</code> 表示编译期，如@Override，只做编译时的提示，不会写入字节码中。<br/> <code>CLASS</code>表示类加载期，会保存在class文件中，但在运行class文件被丢弃，也是默认值<br/> <code>RUNTIME</code> 表示运行期，也是最常用的，可以在代码运行时进行反射执行相关的操作</p>\n</blockquote>\n<p>@Target：</p>\n<blockquote>\n<p>表示这个注解可以放在哪<br/> <code>TYPE</code>：接口、类、枚举、注解<br/> <code>FIELD</code>：字段、枚举的常量<br/> <code>METHOD</code>：方法<br/> <code>PARAMETER</code>：参数<br/> <code>CONSTRUCTOR</code>：构造函数<br/> <code>LOCAL_VARIABLE</code>：局部变量<br/> <code>ANNOTATION_TYPE</code>：注解<br/> <code>PACKAGE</code>：包</p>\n</blockquote>\n<p>@Inherited：</p>\n<blockquote>\n<p>表示子类可以继承该类的注解</p>\n</blockquote>\n<p>定义一个注解，分为以下几步：</p>\n<ul><li>注解的名字（声明注解）</li><li>注解的修饰目标</li><li>注解的生命周期</li><li>注解的属性。</li></ul>\n<h3><a id=\"_69\"></a>声明注解</h3>\n<p>注解的声明形式如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span>  注解名字 <span class=\"token punctuation\">{<!-- --></span>\n\t注解属性\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>例如我们声明注解类型MyAnnotation.java，如下所示：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_86\"></a>注解的修饰目标</h3>\n<p>注解可以用于不同的目标，例如接口、类、构造方法、方法、属性、类型等；</p>\n<p>声明注解时，可以使用JDK中已经定义好的元注解<code>@Target</code>声明注解修饰的目标；</p>\n<p><code>@Target</code>中使用枚举ElementType表示修饰目标，有如下几种修饰目标：</p>\n<blockquote>\n<p>表示这个注解可以放在哪<br/> <code>TYPE</code>：接口、类、枚举、注解<br/> <code>FIELD</code>：字段、枚举的常量<br/> <code>METHOD</code>：方法<br/> <code>PARAMETER</code>：参数<br/> <code>CONSTRUCTOR</code>：构造函数<br/> <code>LOCAL_VARIABLE</code>：局部变量<br/> <code>ANNOTATION_TYPE</code>：注解<br/> <code>PACKAGE</code>：包</p>\n</blockquote>\n<p>来看下<code>@Target</code>的源码：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>ANNOTATION_TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Target</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/**\n     * Returns an array of the kinds of elements an annotation type\n     * can be applied to.\n     * @return an array of the kinds of elements an annotation type\n     * can be applied to\n     */</span>\n    <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>在自定义注解中使用元注解：<code>@Target</code></p>\n<p>自定义注解<code>@MyAnnotation</code>使用<code>@Target</code>，指定修饰目标为TYPE和METHOD，即接口、类、枚举、注解、方法上可以使用注解<code>MyAnnotation</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">,</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span> <span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_135\"></a>注解的生命周期</h3>\n<p>元注解<code>@Retention</code>，用来定义注解的声明周期；</p>\n<blockquote>\n<p>代表该注解的有效期<br/> <code>SOURCE</code> 表示编译期，如@Override，只做编译时的提示，不会写入字节码中。<br/> <code>CLASS</code>表示类加载期，会保存在class文件中，但在运行class文件被丢弃，也是默认值<br/> <code>RUNTIME</code> 表示运行期，也是最常用的，可以在代码运行时进行反射执行相关的操作</p>\n</blockquote>\n<p>来看下<code>@Retention</code>的源码：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>ANNOTATION_TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Retention</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/**\n     * Returns the retention policy.\n     * @return the retention policy\n     */</span>\n    <span class=\"token class-name\">RetentionPolicy</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在自定义注解中元注解:<code>@Retention</code></p>\n<p>指注解<code>@MyAnnotation</code>的生命周期为运行时（我们在一个Test类中使用@MyAnnotation，编译后看Test.class文件，里面没有任何关于注解<code>@MyAnnotation</code>的影子）</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">,</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_174\"></a>注解的属性</h3>\n<p>注解的属性看起来像个方法，其实是属性，属性类型包括所有基本类型、 String、Class、enum、 Annotation、以上类型的数组形式，注解元素声明形式如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">,</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">// 默认全是public的，所以public可以忽略  </span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"MyAnnotation\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">onload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注解中的属性在使用的时候可以指定值，也可以在声明的时候赋默认值；</p>\n<h2><a id=\"_192\"></a>第二步：使用注解</h2>\n<p>使用注解非常简单，不管是JDK中内置的已经定义好的注解还是自定义的注解，只要使用 <code>@注解名称(属性值列表)</code>的形式，均可以使用；</p>\n<p>例如：</p>\n<pre><code class=\"prism language-java\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token annotation punctuation\">@MyAnnotation</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">,</span> onload <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试注解\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_209\"></a>第三步：读取注解</h2>\n<p>读取注解一般都是通过反射获取到某个类，或者某个方法上的注解，然后得到注解中属性的值，去做一些判断。</p>\n<p>可以看下这个例子：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>wlw<span class=\"token punctuation\">.</span>annotion</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>yaml<span class=\"token punctuation\">.</span>snakeyaml<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author glen.wang\n * @date 2022/9/5\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@MyAnnotation</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">,</span> onload <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试注解\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//获得测试类</span>\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">MyAnnotation</span> myAnnotation <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyAnnotation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myAnnotation <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myAnnotation<span class=\"token punctuation\">.</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myAnnotation<span class=\"token punctuation\">.</span><span class=\"token function\">onload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n测试\n<span class=\"token boolean\">true</span>\n</code></pre>\n<p>但是在实际开发中，我们都是用spring体系开发，所以我们可以写个切面类，切入点就是这个注解，获取到使用 了这个注解的方法或者类，然后根据注解信息做一些处理。【spring 的AOP】</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}