{"blogid": "126530591", "writerAge": "码龄13年", "writerBlogNum": "311", "writerCollect": "359", "writerComment": "80", "writerFan": "81", "writerGrade": "5级", "writerIntegral": "3227", "writerName": "wang0907", "writerProfileAdress": "writer_image\\profile_126530591.jpg", "writerRankTotal": "6373", "writerRankWeekly": "8894", "writerThumb": "108", "writerVisitNum": "193416", "blog_read_count": "909", "blog_time": "于 2022-08-25 18:53:53 发布", "blog_title": "MySQL之误删数据如何处理", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-kimbie-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>写在前面</h2>\n<p>在工作中不管是程序bug，运维的失误，等，都有可能导致数据误删除，或者是误操作，此时我们就必须快速的恢复数据，避免对正常业务造成过大的影响，甚至出现事故，本文我们按照如下的几种情况来进行分析:</p>\n<pre><code>1：误删除行数据\n2：误删除表数据\n3：误删除库数据\n4：误删除MySQL实例\n</code></pre>\n<p>下面我们就按照这个顺序来一起看下。</p>\n<h2><a id=\"1_10\"></a>1：误删除行数据</h2>\n<p>对于这种情况，可以比较容易的使用flashback的功能来进行数据的恢复，目前业界已有的方式如下：</p>\n<pre><code>1：mysqlbinlog\n    优点：字段简单的话可以快速生成sql，编程门槛低\n    缺点：字段如果是比较复杂，如字段值中包含特殊字符时，需要考虑进行转义，容易出错。\n2：给源码打patach，\n    优点：可以复用MySQL server层binlog解析相关的代码，效率高\n    缺点：版本敏感，升级困难，每次升级几乎等同于依次版本的重构（这里的重构指的是patch的闪回功能）\n3：使用业界提供的binlog解析的库\n    优点：如果是成熟的库，稳定性好，容易上手\n    缺点：效率低，功能受限于所使用的binlog解析库\n</code></pre>\n<p>对于<code>1</code>考虑其易出错的问题，我们不再重点分析，对于<code>2</code>,给源码打patch，我真的很想分享一波，可以奈何实力不允许，我不会啊！所以我们就看下<code>3</code>中的佼佼者<a href=\"https://github.com/Meituan-Dianping/MyFlash\">MyFlash</a> 。</p>\n<h3><a id=\"11myflash_25\"></a>1.1：安装myflash</h3>\n<p>在<a href=\"https://download.csdn.net/download/wang0907/86438128\">这里</a> 下载源码包。<br/> 环境要求：</p>\n<pre><code>1、binlog格式必须为row，且binlog_row_image=full\n2、仅支持5.6与5.7\n3、只能回滚DML（增、删、改）\n</code></pre>\n<p>安装：</p>\n<pre><code>unzip MyFlash-master.zip\nmv MyFlash-master /usr/local/MyFlash/\ngcc -w  `pkg-config --cflags --libs glib-2.0` source/binlogParseGlib.c  -o binary/flashback\n</code></pre>\n<p>查看帮助：</p>\n<pre><code>[root@localhost MyFlash-master]# ./binary/flashback -h\nUsage:\n  flashback [OPTION?]\n\nHelp Options:\n  -h, --help                  Show help options\n\nApplication Options:\n  --databaseNames             databaseName to apply. if multiple, seperate by comma(,)\n  --tableNames                tableName to apply. if multiple, seperate by comma(,)\n  --tableNames-file           tableName to apply. if multiple, seperate by comma(,)\n  --start-position            start position\n  --stop-position             stop position\n  --start-datetime            start time (format %Y-%m-%d %H:%M:%S)\n  --stop-datetime             stop time (format %Y-%m-%d %H:%M:%S)\n  --sqlTypes                  sql type to filter . support INSERT, UPDATE ,DELETE. if multiple, seperate by comma(,)\n  --maxSplitSize              max file size after split, the uint is M\n  --binlogFileNames           binlog files to process. if multiple, seperate by comma(,)  \n  --outBinlogFileNameBase     output binlog file name base\n  --logLevel                  log level, available option is debug,warning,error\n  --include-gtids             gtids to process. if multiple, seperate by comma(,)\n  --include-gtids-file        gtids to process. if multiple, seperate by comma(,)\n  --exclude-gtids             gtids to skip. if multiple, seperate by comma(,)\n  --exclude-gtids-file        gtids to skip. if multiple, seperate by comma(,)\n</code></pre>\n<h3><a id=\"12_67\"></a>1.2：准备测试数据</h3>\n<pre><code>-- 建库\ncreate database cym; \nuse cym;\n-- 建表\nCREATE TABLE `t1` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(20) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB charset=utf8mb4;\n-- 插入数据\nflush logs;\ninsert into t1 values (1,'a'),(2,'b');\n</code></pre>\n<p>查看binlog如下：</p>\n<pre><code>mysql&gt; show binary logs;\n+----------------+-----------+\n| Log_name       | File_size |\n+----------------+-----------+\n| log-bin.000001 |       462 |\n| log-bin.000002 |       722 |\n| log-bin.000003 |       417 |\n+----------------+-----------+\n3 rows in set (0.00 sec)\n</code></pre>\n<h3><a id=\"13_94\"></a>1.3：查看数据</h3>\n<pre><code>mysql&gt; select * from t1;\n+----+------+\n| id | name |\n+----+------+\n|  1 | a    |\n|  2 | b    |\n+----+------+\n2 rows in set (0.00 sec)\n</code></pre>\n<h3><a id=\"14binlog_105\"></a>1.4：查看生成的binlog</h3>\n<blockquote>\n<p>关于binlog可以参考<a href=\"https://blog.csdn.net/wang0907/article/details/126120638\">这篇文章</a> 。</p>\n</blockquote>\n<pre><code>[root@localhost MyFlash-master]# mysqlbinlog -vv /usr/local/mysql/log-bin.000003 \n/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;\n...\n'/*!*/;\n### INSERT INTO `cym`.`t1`\n### SET\n###   @1=1 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='a' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n### INSERT INTO `cym`.`t1`\n### SET\n###   @1=2 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='b' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n# at 386\n#220823 14:49:22 server id 1  end_log_pos 417 CRC32 0xe1b8e2bd  Xid = 30\nCOMMIT/*!*/;\nSET @@SESSION.GTID_NEXT= 'AUTOMATIC' /* added by mysqlbinlog */ /*!*/;\nDELIMITER ;\n# End of log file\n/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;\n/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;\n</code></pre>\n<h3><a id=\"15myflashbinlog_129\"></a>1.5：使用myflash生成反操作的binlog</h3>\n<pre><code>[root@localhost MyFlash-master]# ./binary/flashback --binlogFileNames=/usr/local/mysql/log-bin.000003 --outBinlogFileNameBase=dongshimummy\n[root@localhost MyFlash-master]# ll | grep 'mummy'\n-rw-r--r-- 1 root root  250 Aug 23 15:14 dongshimummy.flashback\n</code></pre>\n<p>查看其内容：</p>\n<pre><code>[root@localhost MyFlash-master]# mysqlbinlog -vv dongshimummy.flashback \n/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;\n...\n'/*!*/;\n### DELETE FROM `cym`.`t1`\n### WHERE\n###   @1=1 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='a' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n### DELETE FROM `cym`.`t1`\n### WHERE\n###   @1=2 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='b' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n# at 219\n#220823 14:49:22 server id 1  end_log_pos 250 CRC32 0xe1b8e2bd  Xid = 30\nCOMMIT/*!*/;\nSET @@SESSION.GTID_NEXT= 'AUTOMATIC' /* added by mysqlbinlog */ /*!*/;\nDELIMITER ;\n# End of log file\n/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;\n/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;\n</code></pre>\n<p>可以看到生成了对应的删除语句。</p>\n<h3><a id=\"16_159\"></a>1.6：恢复数据</h3>\n<ul><li>恢复前查看数据</li></ul>\n<pre><code>mysql&gt; select * from t1;\n+----+------+\n| id | name |\n+----+------+\n|  1 | a    |\n|  2 | b    |\n+----+------+\n2 rows in set (0.00 sec)\n</code></pre>\n<ul><li>恢复数据并查看数据</li></ul>\n<pre><code>[root@localhost MyFlash-master]# mysqlbinlog /root/study/myflash/MyFlash-master/dongshimummy.flashback | mysql -uroot -p123456\nmysql: [Warning] Using a password on the command line interface can be insecure.\nmysql&gt; select * from t1;\nEmpty set (0.00 sec)\n</code></pre>\n<h3><a id=\"17_178\"></a>1.7：更新场景恢复数据</h3>\n<ul><li>准备测试数据</li></ul>\n<pre><code>-- 建库\ncreate database cym; \nuse cym;\n-- 建表\nCREATE TABLE `t1` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(20) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB charset=utf8mb4;\nmysql&gt; update t1 set name='a10000' where id=1;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql&gt; update t1 set name='a20000' where id=1;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n</code></pre>\n<blockquote>\n<p>注意此时我们并没有flush logs，即不会生成新的</p>\n</blockquote>\n<ul><li>确定位点<br/> 我们之所以没有执行flush logs，是为了模拟真实环境的情况，那么我们就需要来确定要同步的开始的位点是什么，可以像下面这样通过sql语句中的关键字来操作：</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8e84c918d40b42e698b4369ec93649ba.png\"/></p>\n<ul><li>恢复数据</li></ul>\n<pre><code>[root@localhost MyFlash-master]# binary/flashback --start-position=3084 --binlogFileNames=/usr/local/mysql/log-bin.000003 --outBinlogFileNameBase=dongshimeimei /*生成闪回文件*/\n[root@localhost MyFlash-master]# mysql -uroot -p -e\"select * from cym.t1 where id=1\" /*查看恢复数据前的值*/\nEnter password: \n+----+--------+\n| id | name   |\n+----+--------+\n|  1 | a20000 |\n+----+--------+\n[root@localhost MyFlash-master]# mysqlbinlog dongshimeimei.flashback | mysql -uroot -p /*恢复数据*/\nEnter password: \n[root@localhost MyFlash-master]# mysql -uroot -p -e\"select * from cym.t1 where id=1\" /*查看恢复数据前的值*/\nEnter password: \n+----+------+\n| id | name |\n+----+------+\n|  1 | a    |\n+----+------+\n</code></pre>\n<h3><a id=\"18_225\"></a>1.8：只恢复部分事务数据</h3>\n<p>注意打开gtid，如下配置：</p>\n<pre><code>[mysqld]\n...\ngtid-mode=on                  # 启用gtid类型，否则就是普通的复制架构\nenforce-gtid-consistency=true # 强制GTID的一致性\n</code></pre>\n<p>准备测试数据：</p>\n<pre><code>-- 建库\ncreate database cym; \nuse cym;\n-- 建表\nCREATE TABLE `t1` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(20) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB charset=utf8mb4;\n-- 插入数据\nflush logs;\ninsert into t1 values (1,'a'),(2,'b');\n</code></pre>\n<h4><a id=\"181_251\"></a>1.8.1：准备测试数据</h4>\n<p>我们使用3个事务，执行不同的修改，具体操作如下。</p>\n<ul><li>事务1执行操作<br/> 更新ID为1的name为aaaaa。</li></ul>\n<pre><code>mysql&gt; begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; update t1 set name='aaaaa' where id=1;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql&gt; commit;\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre>\n<p>查看该事务对应的gtid：</p>\n<pre><code>[root@localhost MyFlash-master]# mysqlbinlog -vv /usr/local/mysql/log-bin.000004 | grep 'aaaaa' -B 30\n...\nSET @@SESSION.GTID_NEXT= 'a5e2c832-2291-11ed-9728-000c2933f83c:4'/*!*/;\n...\n'/*!*/;\n### UPDATE `cym`.`t1`\n### WHERE\n###   @1=1 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='a' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n### SET\n###   @1=1 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='aaaaa' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n</code></pre>\n<p>从<code>SET @@SESSION.GTID_NEXT= 'a5e2c832-2291-11ed-9728-000c2933f83c:4'</code>可以看到值是<code>a5e2c832-2291-11ed-9728-000c2933f83c:4</code>，记住该值，后面需要用到。</p>\n<ul><li>事务2执行操作<br/> 插入新的行<code>insert into t1 values (3,'ccccc'),(4,'ddddd');</code>：</li></ul>\n<pre><code>mysql&gt; begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; insert into t1 values (3,'ccccc'),(4,'ddddd');\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql&gt; commit;\nQuery OK, 0 rows affected (0.01 sec)\n</code></pre>\n<p>查看该事务对应的gtid：</p>\n<pre><code>SET @@SESSION.GTID_NEXT= 'a5e2c832-2291-11ed-9728-000c2933f83c:5'/*!*/;\n...\n'/*!*/;\n### INSERT INTO `cym`.`t1`\n### SET\n###   @1=3 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='ccccc' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n### INSERT INTO `cym`.`t1`\n### SET\n###   @1=4 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='ddddd' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n</code></pre>\n<p>从<code>SET @@SESSION.GTID_NEXT= 'a5e2c832-2291-11ed-9728-000c2933f83c:5'</code>可以看到值是<code>a5e2c832-2291-11ed-9728-000c2933f83c:5</code>，记住该值，后面需要用到。</p>\n<ul><li>事务3执行操作<br/> 更新ID为2的name为bbbb2222，操作如下：</li></ul>\n<pre><code>mysql&gt; start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; update t1 set name='bbbb2222' where id=2;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql&gt; commit;\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre>\n<p>查看该事务对应的gtid：</p>\n<pre><code>[root@localhost MyFlash-master]# mysqlbinlog -vv /usr/local/mysql/log-bin.000004 | grep 'bbbb2222' -A 5 -B 30\n...\nSET @@SESSION.GTID_NEXT= 'a5e2c832-2291-11ed-9728-000c2933f83c:6'/*!*/;\n...\n'/*!*/;\n### UPDATE `cym`.`t1`\n### WHERE\n###   @1=2 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='b' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n### SET\n###   @1=2 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='bbbb2222' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n...\n</code></pre>\n<p>从<code>@@SESSION.GTID_NEXT= 'a5e2c832-2291-11ed-9728-000c2933f83c:6'</code>可以看到值是<code>a5e2c832-2291-11ed-9728-000c2933f83c:6</code>，记住该值，后面需要用到。</p>\n<ul><li>当前数据状态</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b9370dcefc774e638b629d78105a94ae.png\"/></p>\n<ul><li>恢复事务2，事务3<br/> 事务2 gtid:a5e2c832-2291-11ed-9728-000c2933f83c:5,事务3gtid：a5e2c832-2291-11ed-9728-000c2933f83c:6,生成闪回文件：</li></ul>\n<pre><code>[root@localhost MyFlash-master]# ./binary/flashback --binlogFileNames=/usr/local/mysql/log-bin.000004 --outBinlogFileNameBase=dongshigohome1 --databaseNames=cym --tableNames=t1 --sqlTypes=insert,update --include-gtids='a5e2c832-2291-11ed-9728-000c2933f83c:5,a5e2c832-2291-11ed-9728-000c2933f83c:6'\n</code></pre>\n<p>生成的闪回文件如下：</p>\n<pre><code>[root@localhost MyFlash-master]# mysqlbinlog -vv dongshigohome1.flashback \n/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;\n/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;\nDELIMITER /*!*/;\n# at 4\n#220823 18:01:13 server id 1  end_log_pos 123 CRC32 0xb2284436  Start: binlog v 4, server v 5.7.39-log created 220823 18:01:13 at startup\n# Warning: this binlog is either in use or was not closed properly.\nROLLBACK/*!*/;\nBINLOG '\naaUEYw8BAAAAdwAAAHsAAAABAAQANS43LjM5LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAABppQRjEzgNAAgAEgAEBAQEEgAAXwAEGggAAAAICAgCAAAACgoKKioAEjQA\nATZEKLI=\n'/*!*/;\n# at 123\n#220824 13:32:20 server id 1  end_log_pos 170 CRC32 0x0a7a0a8a  Table_map: `cym`.`t1` mapped to number 109\n# at 170\n#220824 13:32:20 server id 1  end_log_pos 227 CRC32 0x26e7141f  Update_rows: table id 109 flags: STMT_END_F\n\nBINLOG '\n5LcFYxMBAAAALwAAAKoAAAAAAG0AAAAAAAEAA2N5bQACdDEAAgMPAlAAAooKego=\n5LcFYx8BAAAAOQAAAOMAAAAAAG0AAAAAAAEAAgAC///8AgAAAAhiYmJiMjIyMvwCAAAAAWIfFOcm\n'/*!*/;\n### UPDATE `cym`.`t1`\n### WHERE\n###   @1=2 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='bbbb2222' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n### SET\n###   @1=2 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='b' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n# at 227\n#220823 18:08:27 server id 1  end_log_pos 258 CRC32 0x73720c50  Xid = 16\nCOMMIT/*!*/;\n# at 258\n#220823 18:41:47 server id 1  end_log_pos 305 CRC32 0xeb7b8cc1  Table_map: `cym`.`t1` mapped to number 109\n# at 305\n#220823 18:41:47 server id 1  end_log_pos 362 CRC32 0x15f84dc5  Delete_rows: table id 109 flags: STMT_END_F\n\nBINLOG '\n664EYxMBAAAALwAAADEBAAAAAG0AAAAAAAEAA2N5bQACdDEAAgMPAlAAAsGMe+s=\n664EYyABAAAAOQAAAGoBAAAAAG0AAAAAAAEAAgAC//wDAAAABWNjY2Nj/AQAAAAFZGRkZGTFTfgV\n'/*!*/;\n### DELETE FROM `cym`.`t1`\n### WHERE\n###   @1=3 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='ccccc' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n### DELETE FROM `cym`.`t1`\n### WHERE\n###   @1=4 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='ddddd' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n# at 362\n#220823 18:08:27 server id 1  end_log_pos 393 CRC32 0x73720c50  Xid = 16\nCOMMIT/*!*/;\nSET @@SESSION.GTID_NEXT= 'AUTOMATIC' /* added by mysqlbinlog */ /*!*/;\nDELIMITER ;\n# End of log file\n/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;\n/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;\n</code></pre>\n<p>可以看到按照相反的操作顺序，即事务3，事务2的顺序，生成了反向操作的sql语句，然后我们就可以用来恢复数据了。</p>\n<ul><li>恢复数据并查看</li></ul>\n<pre><code>[root@localhost MyFlash-master]# mysqlbinlog -vv --skip-gtids dongshigohome1.flashback | mysql -uroot -p \nEnter password: \n[root@localhost MyFlash-master]# \n</code></pre>\n<p>查看数据：</p>\n<pre><code>mysql&gt; select * from t1;\n+----+-------+\n| id | name  |\n+----+-------+\n|  1 | aaaaa |\n|  2 | b     |\n+----+-------+\n2 rows in set (0.00 sec)\n</code></pre>\n<p>可以看到除了事务1的修改，事务2和事务3都恢复成功了(๑•̀ㅂ•́)و✧。</p>\n<h3><a id=\"19_429\"></a>1.9：如何预防数据误操作</h3>\n<ul><li>开启<a href=\"https://blog.csdn.net/wang0907/article/details/125480857?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22125480857%22%2C%22source%22%3A%22wang0907%22%7D#t30\">sql_safe_update</a> 。</li><li>review代码，sql审计。</li></ul>\n<h2><a id=\"2_433\"></a>2：误删除表数据</h2>\n<p>需要定期备份数据库，并开启binlog日志，接下来通过具体的实战来看下如何操作。</p>\n<h3><a id=\"21_435\"></a>2.1：模拟正常的业务操作</h3>\n<p>创建数据库testdb_restore_table，创建2张表t1,t2,并插入测试数据：</p>\n<pre><code>create database testdb_restore_table; \nuse testdb_restore_table;\nCREATE TABLE `t1` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(20) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB charset=utf8mb4;\nCREATE TABLE `t2` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `age` int(20) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB charset=utf8mb4;\n\ninsert into t1 values (1,'aaaaa'),(2,'bbbbbb');\ninsert into t2 values (1,23),(2,34);\n</code></pre>\n<p>查看此时数据：</p>\n<pre><code>mysql&gt; use testdb_restore_table;\nDatabase changed\nmysql&gt; show tables;\n+--------------------------------+\n| Tables_in_testdb_restore_table |\n+--------------------------------+\n| t1                             |\n| t2                             |\n+--------------------------------+\n2 rows in set (0.00 sec)\n\nmysql&gt; select * from t1;\n+----+--------+\n| id | name   |\n+----+--------+\n|  1 | aaaaa  |\n|  2 | bbbbbb |\n+----+--------+\n2 rows in set (0.00 sec)\n\nmysql&gt; select * from t2;\n+----+------+\n| id | age  |\n+----+------+\n|  1 |   23 |\n|  2 |   34 |\n+----+------+\n2 rows in set (0.00 sec)\n</code></pre>\n<h3><a id=\"22_485\"></a>2.2：模拟某时刻全量备份数据</h3>\n<pre><code>[root@localhost MyFlash-master]# mysqldump --databases --set-gtid-purged=OFF testdb_restore_table -uroot -p &gt; /tmp/testdb_restore_table_backup20220825_1.sql\nEnter password: \n</code></pre>\n<p>即将全量数据备份到<code>/tmp/testdb_restore_table_backup20220825_1.sql</code>。</p>\n<h3><a id=\"23t1_492\"></a>2.3：模拟对表t1的各种正常业务操作</h3>\n<pre><code>mysql&gt; update t1 set name='aaaaa1' where id=1;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql&gt; select * from t1;\n+----+--------+\n| id | name   |\n+----+--------+\n|  1 | aaaaa1 |\n|  2 | bbbbbb |\n+----+--------+\n2 rows in set (0.00 sec)\n\nmysql&gt; insert into t1 values(3,'cccccc');\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; select * from t1;\n+----+--------+\n| id | name   |\n+----+--------+\n|  1 | aaaaa1 |\n|  2 | bbbbbb |\n|  3 | cccccc |\n+----+--------+\n3 rows in set (0.00 sec)\n</code></pre>\n<p>即更新了ID=1的行，增加了ID=3的行。</p>\n<h3><a id=\"24_521\"></a>2.4：模拟误删除</h3>\n<p>误删除表t1：</p>\n<pre><code>mysql&gt; delete from t1 where id&gt;0;\nQuery OK, 3 rows affected (0.01 sec)\n\nmysql&gt; select count(*) from t1;\n+----------+\n| count(*) |\n+----------+\n|        0 |\n+----------+\n1 row in set (0.00 sec)\n</code></pre>\n<h3><a id=\"25MySQL_535\"></a>2.5：在另外一个MySQL实例恢复数据</h3>\n<p>另选一个MySQL实例，而不直接操作原来的数据库的原因是，避免操作失误，对数据造成二次伤害。</p>\n<ul><li>在新实例创建数据库testdb_restore_table</li></ul>\n<pre><code>mysql&gt; create database testdb_restore_table;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; use testdb_restore_table;\nDatabase changed\n\nmysql&gt; show tables;\nEmpty set (0.00 sec)\n</code></pre>\n<ul><li>恢复备份的全量数据</li></ul>\n<pre><code>mysql&gt; source /tmp/testdb_restore_table_backup20220825_1.sql;\nQuery OK, 0 rows affected (0.00 sec)\n...\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; select * from t1 union select * from t2;\n+----+--------+\n| id | name   |\n+----+--------+\n|  1 | aaaaa  |\n|  2 | bbbbbb |\n|  1 | 23     |\n|  2 | 34     |\n+----+--------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul><li>获取备份后的第一个修改的时间</li></ul>\n<pre><code>[root@localhost tmp]# mysqlbinlog -vv /usr/local/mysql/log-bin.000007 | egrep 'aaaaa1' -B 30\n###   @2=34 /* INT meta=0 nullable=1 is_null=0 */\n# at 1811\n#220825 18:21:42 server id 1  end_log_pos 1842 CRC32 0xb38ce58a         Xid = 97\nCOMMIT/*!*/;\n# at 1842\n#220825 18:24:04 server id 1  end_log_pos 1907 CRC32 0xf416ca14         GTID    last_committed=6        sequence_number=7       rbr_only=yes\n/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*//*!*/;\nSET @@SESSION.GTID_NEXT= 'a5e2c832-2291-11ed-9728-000c2933f83c:62'/*!*/;\n# at 1907\n#220825 18:24:04 server id 1  end_log_pos 1995 CRC32 0x7dd3689d         Query   thread_id=3     exec_time=0     error_code=0\nSET TIMESTAMP=1661423044/*!*/;\nBEGIN\n/*!*/;\n# at 1995\n#220825 18:24:04 server id 1  end_log_pos 2059 CRC32 0xab5d0664         Table_map: `testdb_restore_table`.`t1` mapped to number 118\n# at 2059\n#220825 18:24:04 server id 1  end_log_pos 2118 CRC32 0xd5640c69         Update_rows: table id 118 flags: STMT_END_F\n...ZNU=\n'/*!*/;\n### UPDATE `testdb_restore_table`.`t1`\n### WHERE\n###   @1=1 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='aaaaa' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n### SET\n###   @1=1 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='aaaaa1' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n--\n...\n</code></pre>\n<p>可以看到时间大概是<code>220825 18:24:04</code>,记住这个时间，我们会从该时间开始来恢复备份后产生的修改。</p>\n<ul><li>获取误删除数据事务的gtid</li></ul>\n<pre><code>[root@localhost tmp]# mysqlbinlog -vv /usr/local/mysql/log-bin.000007 | egrep 'DELETE FROM `testdb_restore_table`.`t1`' -B 30\n...\nSET @@SESSION.GTID_NEXT= 'a5e2c832-2291-11ed-9728-000c2933f83c:64'/*!*/;\n...\n'/*!*/;\n### DELETE FROM `testdb_restore_table`.`t1`\n### WHERE\n###   @1=1 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='aaaaa1' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n### DELETE FROM `testdb_restore_table`.`t1`\n### WHERE\n###   @1=2 /* INT meta=0 nullable=0 is_null=0 */\n###   @2='bbbbbb' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */\n### DELETE FROM `testdb_restore_table`.`t1`\n</code></pre>\n<p>从<code>SET @@SESSION.GTID_NEXT= 'a5e2c832-2291-11ed-9728-000c2933f83c:64'</code>可以看出误删除表数据的gtid是<code>a5e2c832-2291-11ed-9728-000c2933f83c:64</code>，记住该值后面我们需要用其来跳过误删除数据的事务。</p>\n<ul><li>恢复数据</li></ul>\n<pre><code>[root@localhost tmp]# mysqlbinlog -vv --start-datetime='2022-08-25 18:24:00' --exclude-gtids='a5e2c832-2291-11ed-9728-000c2933f83c:64' /tmp/log-bin.000007 | mysql -uroot -p\nEnter password: \n</code></pre>\n<p>恢复后查看数据：</p>\n<pre><code>mysql&gt; select * from t1;\n+----+--------+\n| id | name   |\n+----+--------+\n|  1 | aaaaa1 |\n|  2 | bbbbbb |\n|  3 | cccccc |\n+----+--------+\n3 rows in set (0.00 sec)\n</code></pre>\n<p>可以看到恢复成功了。</p>\n<h2><a id=\"3_636\"></a>3：误删库</h2>\n<p>过程同<code>2：误删除表数据</code>。</p>\n<h2><a id=\"_639\"></a>写在后面</h2>\n<p>参考文章列表：</p>\n<p><a href=\"https://www.cnblogs.com/plluoye/p/13072353.html\">[美团] Myflash 的安装使用</a> 。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}