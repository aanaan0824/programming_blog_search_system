{"blogid": "125167843", "writerAge": "码龄4年", "writerBlogNum": "150", "writerCollect": "94", "writerComment": "13", "writerFan": "603", "writerGrade": "5级", "writerIntegral": "1973", "writerName": "望天hous", "writerProfileAdress": "writer_image\\profile_125167843.jpg", "writerRankTotal": "19885", "writerRankWeekly": "9758", "writerThumb": "20", "writerVisitNum": "61248", "blog_read_count": "811", "blog_time": "于 2022-06-07 16:27:32 发布", "blog_title": "什么是 Blazor?", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>生成 Web 应用的公司通常为聘请开发人员担任不同角色。 某些开发人员创建后端服务器端逻辑。 其他开发人员生成客户端 Web 应用。 这些开发人员通常使用不同的开发语言和技术。</p>\n<p>C# 和 Microsoft .NET 是生成服务器端逻辑的常用选项。 但客户端应用通常是使用 Web UI 框架生成的，该框架通常使用 JavaScript。 使用多种语言和工具集需要掌握多种技能，并且通常需要两个单独的团队。 此外，用于传输和表示数据的代码必须使用两种语言生成并保持同步。</p>\n<p>在本单元中，首先介绍 Blazor，然后探讨 Razor 组件。</p>\n<p>什么是 Blazor？<br/> Blazor 应用包含使用 C#、HTML 和 CSS 生成的可重复使用的 Web UI 组件。 借助 Blazor，开发人员可以使用 C# 生成客户端和服务器代码。 他们还可以与前端客户端代码和后端逻辑共享代码和库。 使用 C# 生成所有代码可简化在前端和后端之间共享数据，重复使用代码以加速开发和维护。</p>\n<p>可以使用 Blazor 生成：</p>\n<p>通过 WebSocket 连接处理 UI 交互的服务器端代码。<br/> <em><strong>通过 WebAssembly 直接在浏览器中运行的客户端 Web 应用。</strong></em></p>\n<p>什么是 WebAssembly？<br/> WebAssembly (WASM) 是一种开放的二进制标准。 它用于定义旨在 Web 浏览器中运行的程序的可移植代码格式。 WebAssembly 是一种文本程序集语言，具有专用于实现快速下载和近乎本机性能的精简二进制格式。</p>\n<p>WebAssembly 为 C、C++ 和 Rust 等语言提供了编译目标。 它设计为与 JavaScript 一起运行，因此两者可协同工作。 WebAssembly 还可生成可下载和脱机运行的渐进式 Web 应用程序。</p>\n<p>什么是 Blazor WebAssembly？<br/> 使用 Blazor WebAssembly，开发人员可以在浏览器中运行 .NET 代码。 它是一种单页应用框架，使用的是 WebAssembly 开放标准，无需插件或代码生成。</p>\n<p>在浏览器中通过 WebAssembly 执行的 .NET 代码在浏览器的 JavaScript 沙盒中运行。 该代码具有沙盒提供的所有安全和保护特性。 这有助于防止客户端计算机上的恶意操作。</p>\n<p><em><strong>WebAssembly 由此可见是运行在虚拟上的， 在客户端第一次访问服务端，下载程序包会比较耗时，以后再次访问，可以比较快。</strong></em><br/> <img alt=\"在这里插入图片描述\" src=\"image\\3bfdf8a044b24a138957ddbb06755afe.png\"/><br/> Blazor 使用编译为 WebAssembly 模块的 .NET 运行时，该模块随应用一起下载。 该模块可执行 Blazor 应用中包含的 .NET Standard 代码。</p>\n<p>Blazor WebAssembly 应用仅限于执行应用的浏览器的功能。 但该应用可以通过 JavaScript 互操作访问完整的浏览器功能。</p>\n<p>什么是 Blazor Server？<br/> Blazor 服务器在 ASP.NET Core 应用中添加了对在服务器上托管 Razor 组件的支持。 可通过 SignalR 连接处理 UI 更新。</p>\n<p>运行时停留在服务器上并处理：</p>\n<p>执行应用的 C# 代码。<br/> 将 UI 事件从浏览器发送到服务器。<br/> 将 UI 更新应用于服务器发送回的呈现组件。<br/> Blazor 服务器用于与浏览器通信的连接还用于处理 JavaScript 互操作调用。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fb39e862984e4baf8a37660e6fede38d.png\"/><br/> <em><strong>Blazor Server 感觉前景不是很好，因为现在的vue也可以通过这种方式进行数据交互。</strong></em></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}