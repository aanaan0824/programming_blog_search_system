{"blogid": "126148501", "writerAge": "码龄3年", "writerBlogNum": "85", "writerCollect": "2338", "writerComment": "2028", "writerFan": "4579", "writerGrade": "6级", "writerIntegral": "6215", "writerName": "赵四司机", "writerProfileAdress": "writer_image\\profile_126148501.jpg", "writerRankTotal": "2434", "writerRankWeekly": "19", "writerThumb": "2058", "writerVisitNum": "204078", "blog_read_count": "953", "blog_time": "已于 2022-08-17 09:26:43 修改", "blog_title": "【Spring Cloud】新闻头条微服务项目：分布式文件系统MinIO实现文章页面存取", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p> <img alt=\"8420b26844034fab91b6df661ae68671.png\" src=\"image\\8420b26844034fab91b6df661ae68671.png\"/></p>\n<p><strong>个人简介： </strong></p>\n<blockquote>\n<p>&gt; 📦个人主页：<a href=\"https://blog.csdn.net/weixin_45750572?type=blog\" title=\"赵四司机\">赵四司机</a><br/> &gt; 🏆学习方向：JAVA后端开发 <br/> &gt; 📣种一棵树最好的时间是十年前，其次是现在！<br/> &gt; ⏰往期文章：<a href=\"https://blog.csdn.net/weixin_45750572/article/details/125534014\" title=\"SpringBoot项目整合微信支付\">SpringBoot项目整合微信支付</a><br/> &gt; 🧡喜欢的话麻烦点点关注喔，你们的支持是我的最大动力。</p>\n</blockquote>\n<p><strong>前言：</strong></p>\n<blockquote>\n<p>最近在做一个基于SpringCloud+Springboot+Docker的新闻头条微服务项目，现在项目开发进入了尾声，我打算通过写文章的形式进行梳理一遍，并且会将梳理过程中发现的Bug进行修复，有需要改进的地方我也会继续做出改进。这一系列的文章我将会放入微服务项目专栏中，这个项目适合刚接触微服务的人作为练手项目，假如你对这个项目感兴趣你可以订阅我的专栏进行查看，需要资料可以私信我，当然要是能给我点个小小的关注就更好了，你们的支持是我最大的动力。</p>\n</blockquote>\n<p><strong>目录</strong></p>\n<p style=\"margin-left:0px;\"> </p>\n<p style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%EF%BC%9A%E6%A6%82%E8%BF%B0\">一：概述</a></p>\n<p style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%EF%BC%9A%E4%B8%BA%E4%BD%95%E9%80%89%E7%94%A8MinIO\">二：为何选用MinIO</a></p>\n<p style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%EF%BC%9AMinIO%E7%89%B9%E7%82%B9\">三：MinIO特点</a></p>\n<p style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%EF%BC%9A%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88\">四：实现方案</a></p>\n<p style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%EF%BC%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0\">五：功能实现</a></p>\n<p style=\"margin-left:40px;\"><a href=\"#1.%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8\">1.创建容器</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#%EF%BC%881%EF%BC%89%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F\">（1）拉取镜像</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#%EF%BC%882%EF%BC%89%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8\">（2）启动容器</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#%EF%BC%883%EF%BC%89%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0\">（3）管理控制台</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#%EF%BC%884%EF%BC%89%E5%88%9B%E5%BB%BA%E6%A1%B6\">（4）创建桶</a></p>\n<p style=\"margin-left:40px;\"><a href=\"#2.%E5%B0%81%E8%A3%85MinIO%E4%B8%BAStart\">2.封装MinIO为Start</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#%EF%BC%881%EF%BC%89%E6%A8%A1%E5%9D%97%E5%88%9B%E5%BB%BA\">（1）模块创建</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#%EF%BC%882%EF%BC%89%E9%85%8D%E7%BD%AE%E7%B1%BB\">（2）配置类</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#%EF%BC%883%EF%BC%89%E5%B0%81%E8%A3%85%E6%93%8D%E4%BD%9CMinIO%E7%B1%BB\">（3）封装操作MinIO类</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#%EF%BC%884%EF%BC%89%E5%AF%B9%E5%A4%96%E5%8A%A0%E5%85%A5%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE\">（4）对外加入自动配置</a></p>\n<hr/>\n<p> </p>\n<h1>一：概述</h1>\n<p>        MinIO基于Apache License v2.0开源协议的对象存储服务，可以做为云存储的解决方案用来保存海量的图片，视频，文档。由于采用Golang实现，服务端可以工作在Windows,Linux, OS X和FreeBSD上。配置简单，基本是复制可执行程序，单行命令可以运行起来。</p>\n<p>        MinIO兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。</p>\n<h1>二：为何选用MinIO</h1>\n<p>        其实我们也可以通过文章id到数据库中查询到该文章然后再通过模板引擎生成静态页面展示给用户，这种方式开发便捷，成本较低，但是将来要扩展业务的话比较困难。除此之外还可以采用第三方存储技术，比如阿里云、七牛云等，这种方案开发简单，功能强大且不用自己维护，缺点就是要收费。最后，还可以选用分布式文件系统来进行存储，其优点是容易实现扩容，但是复杂度较高，常用的分布式文件系统有FastDFS，其有如下优点：</p>\n<ul><li>主从备份，高可用</li><li>支持主从文件，支持自定义扩展名</li><li>支持动态扩容</li></ul>\n<p>其缺点就是没有完备的官方文档，近几年都没有进行过更新，而且环境搭建起来比较麻烦。</p>\n<p>而另外一个就是我们用到的MinIO，其优点如下</p>\n<ul><li> 性能高，准硬件条件下他能达到55GB/s的读，35GB/s的写速率</li><li>部署自带管理页面</li><li>它是MinIO.Inc运营的开源项目，社区活跃度高</li><li>提供了所有主流开发语言的SDK</li></ul>\n<p>当然其缺点就是不支持动态增加节点。 </p>\n<h1>三：MinIO特点</h1>\n<ul><li> <p>数据保护</p> <p>Minio使用Minio Erasure Code（纠删码）来防止硬件故障。即便损坏一半以上的driver，但是仍然可以从中恢复。</p> </li><li> <p>高性能</p> <p>作为高性能对象存储，在标准硬件条件下它能达到55GB/s的读、35GB/s的写速率</p> </li><li> <p>可扩容</p> <p>不同MinIO集群可以组成联邦，并形成一个全局的命名空间，并跨越多个数据中心</p> </li><li> <p>SDK支持</p> <p>基于Minio轻量的特点，它得到类似Java、Python或Go等语言的sdk支持</p> </li><li> <p>有操作页面</p> <p>面向用户友好的简单操作界面，非常方便的管理Bucket及里面的文件资源</p> </li><li> <p>功能简单</p> <p>这一设计原则让MinIO不容易出错、更快启动</p> </li><li> <p>丰富的API</p> <p>支持文件资源的分享连接及分享链接的过期策略、存储桶操作、文件列表访问及文件上传下载的基本功能等。</p> </li><li> <p>文件变化主动通知</p> <p>存储桶（Bucket）如果发生改变,比如上传对象和删除对象，可以使用存储桶事件通知机制进行监控，并通过以下方式发布出去:AMQP、MQTT、Elasticsearch、Redis、NATS、MySQL、Kafka、Webhooks等。</p> </li></ul>\n<h1>四：实现方案</h1>\n<p><img alt=\"3e445182f2ee4b15b758d25b9d1c3f2b.png\" src=\"image\\3e445182f2ee4b15b758d25b9d1c3f2b.png\"/></p>\n<p>        首先根据文章内容通过模板引擎技术生成静态html文件之后，把生成的html文件访问路径存入到文章数据库中，并同时把文件存入分布式文件系统MinIO，当用户访问某一篇文章时候就会根据文章id查询到数据库中该文章的URL地址，然后再根据该地址从MinIO获取文件并返回。 </p>\n<h1>五：功能实现</h1>\n<h2>1.创建容器</h2>\n<h3>（1）拉取镜像</h3>\n<pre><code>docker pull minio/minio server</code></pre>\n<h3>（2）启动容器</h3>\n<pre><code>docker run -p 9000:9000 -p 9090:9090 --name minio -d --restart=always -e \"MINIO_ROOT_USER=minio\" -e \"MINIO_ROOT_PASSWORD=minio123\" -v /home/data:/data -v /home/config:/root/.minio minio/minio server /data --console-address \":9090\"</code></pre>\n<h3>（3）管理控制台</h3>\n<p>打开浏览器输入http://你的ip:9090/login即可进行登录，账号为minio，密码为minio123</p>\n<p><img alt=\"98e098aa6629444985d5d481d4b9248d.png\" src=\"image\\98e098aa6629444985d5d481d4b9248d.png\"/></p>\n<h3>（4）创建桶</h3>\n<p><img alt=\"8593848162174684b877547d192cc1fe.png\" src=\"image\\8593848162174684b877547d192cc1fe.png\"/></p>\n<p>点击Create Bucket创建一个名为headlines的桶</p>\n<h2>2.封装MinIO为Start</h2>\n<h3>（1）模块创建</h3>\n<p><img alt=\"afc12cf911a84ad5857644b0ea4490ad.png\" src=\"image\\afc12cf911a84ad5857644b0ea4490ad.png\"/></p>\n<p>导入如下依赖：</p>\n<pre><code class=\"language-XML\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-autoconfigure&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.minio&lt;/groupId&gt;\n        &lt;artifactId&gt;minio&lt;/artifactId&gt;\n        &lt;version&gt;7.1.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;\n        &lt;optional&gt;true&lt;/optional&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;</code></pre>\n<h3>（2）配置类</h3>\n<p>MinIOConfigProperties</p>\n<pre><code class=\"language-java\">package com.my.file.config;\n\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\nimport java.io.Serializable;\n\n@Data\n@ConfigurationProperties(prefix = \"minio\")  // 文件上传 配置前缀file.oss\npublic class MinIOConfigProperties implements Serializable {\n\n    private String accessKey;\n    private String secretKey;\n    private String bucket;\n    private String endpoint;\n    private String readPath;\n}\n</code></pre>\n<p>MinIOConfig </p>\n<pre><code class=\"language-java\">package com.my.file.config;\n\nimport com.my.file.service.FileStorageService;\nimport io.minio.MinioClient;\nimport lombok.Data;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n\n@Data\n@Configuration\n@EnableConfigurationProperties({MinIOConfigProperties.class})\n//当引入FileStorageService接口时\n@ConditionalOnClass(FileStorageService.class)\npublic class MinIOConfig {\n\n    @Autowired\n    private MinIOConfigProperties minIOConfigProperties;\n\n    @Bean\n    public MinioClient buildMinioClient() {\n        return MinioClient\n                .builder()\n                .credentials(minIOConfigProperties.getAccessKey(), minIOConfigProperties.getSecretKey())\n                .endpoint(minIOConfigProperties.getEndpoint())\n                .build();\n    }\n}</code></pre>\n<h3>（3）封装操作MinIO类</h3>\n<p> FileStorageService</p>\n<pre><code class=\"language-java\">package com.my.file.service;\n\nimport java.io.InputStream;\n\n/**\n * @author itheima\n */\npublic interface FileStorageService {\n\n\n    /**\n     *  上传图片文件\n     * @param prefix  文件前缀\n     * @param filename  文件名\n     * @param inputStream 文件流\n     * @return  文件全路径\n     */\n    public String uploadImgFile(String prefix, String filename,InputStream inputStream);\n\n    /**\n     *  上传html文件\n     * @param prefix  文件前缀\n     * @param filename   文件名\n     * @param inputStream  文件流\n     * @return  文件全路径\n     */\n    public String uploadHtmlFile(String prefix, String filename,InputStream inputStream);\n\n    /**\n     * 删除文件\n     * @param pathUrl  文件全路径\n     */\n    public void delete(String pathUrl);\n\n    /**\n     * 下载文件\n     * @param pathUrl  文件全路径\n     * @return\n     *\n     */\n    public byte[]  downLoadFile(String pathUrl);\n\n}\n</code></pre>\n<pre>MinIOFileStorageService</pre>\n<pre><code class=\"language-java\">package com.my.file.service.impl;\n\n\nimport com.my.file.config.MinIOConfig;\nimport com.my.file.config.MinIOConfigProperties;\nimport com.my.file.service.FileStorageService;\nimport io.minio.GetObjectArgs;\nimport io.minio.MinioClient;\nimport io.minio.PutObjectArgs;\nimport io.minio.RemoveObjectArgs;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.StringUtils;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n@Slf4j\n@EnableConfigurationProperties(MinIOConfigProperties.class)\n@Import(MinIOConfig.class)\n@Service\npublic class MinIOFileStorageService implements FileStorageService {\n\n    @Autowired\n    private MinioClient minioClient;\n\n    @Autowired\n    private MinIOConfigProperties minIOConfigProperties;\n\n    private final static String separator = \"/\";\n\n    /**\n     * @param dirPath\n     * @param filename  yyyy/mm/dd/file.jpg\n     * @return\n     */\n    public String builderFilePath(String dirPath,String filename) {\n        StringBuilder stringBuilder = new StringBuilder(50);\n        if(!StringUtils.isEmpty(dirPath)){\n            stringBuilder.append(dirPath).append(separator);\n        }\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy/MM/dd\");\n        String todayStr = sdf.format(new Date());\n        stringBuilder.append(todayStr).append(separator);\n        stringBuilder.append(filename);\n        return stringBuilder.toString();\n    }\n\n    /**\n     *  上传图片文件\n     * @param prefix  文件前缀\n     * @param filename  文件名\n     * @param inputStream 文件流\n     * @return  文件全路径\n     */\n    @Override\n    public String uploadImgFile(String prefix, String filename,InputStream inputStream) {\n        String filePath = builderFilePath(prefix, filename);\n        try {\n            PutObjectArgs putObjectArgs = PutObjectArgs.builder()\n                    .object(filePath)\n                    .contentType(\"image/jpg\")\n                    .bucket(minIOConfigProperties.getBucket()).stream(inputStream,inputStream.available(),-1)\n                    .build();\n            minioClient.putObject(putObjectArgs);\n            StringBuilder urlPath = new StringBuilder(minIOConfigProperties.getReadPath());\n            urlPath.append(separator+minIOConfigProperties.getBucket());\n            urlPath.append(separator);\n            urlPath.append(filePath);\n            return urlPath.toString();\n        }catch (Exception ex){\n            log.error(\"minio put file error.\",ex);\n            throw new RuntimeException(\"上传文件失败\");\n        }\n    }\n\n    /**\n     *  上传html文件\n     * @param prefix  文件前缀\n     * @param filename   文件名\n     * @param inputStream  文件流\n     * @return  文件全路径\n     */\n    @Override\n    public String uploadHtmlFile(String prefix, String filename,InputStream inputStream) {\n        String filePath = builderFilePath(prefix, filename);\n        try {\n            PutObjectArgs putObjectArgs = PutObjectArgs.builder()\n                    .object(filePath)\n                    .contentType(\"text/html\")\n                    .bucket(minIOConfigProperties.getBucket()).stream(inputStream,inputStream.available(),-1)\n                    .build();\n            minioClient.putObject(putObjectArgs);\n            StringBuilder urlPath = new StringBuilder(minIOConfigProperties.getReadPath());\n            urlPath.append(separator+minIOConfigProperties.getBucket());\n            urlPath.append(separator);\n            urlPath.append(filePath);\n            return urlPath.toString();\n        }catch (Exception ex){\n            log.error(\"minio put file error.\",ex);\n            ex.printStackTrace();\n            throw new RuntimeException(\"上传文件失败\");\n        }\n    }\n\n    /**\n     * 删除文件\n     * @param pathUrl  文件全路径\n     */\n    @Override\n    public void delete(String pathUrl) {\n        String key = pathUrl.replace(minIOConfigProperties.getEndpoint()+\"/\",\"\");\n        int index = key.indexOf(separator);\n        String bucket = key.substring(0,index);\n        String filePath = key.substring(index+1);\n        // 删除Objects\n        RemoveObjectArgs removeObjectArgs = RemoveObjectArgs.builder().bucket(bucket).object(filePath).build();\n        try {\n            minioClient.removeObject(removeObjectArgs);\n        } catch (Exception e) {\n            log.error(\"minio remove file error.  pathUrl:{}\",pathUrl);\n            e.printStackTrace();\n        }\n    }\n\n\n    /**\n     * 下载文件\n     * @param pathUrl  文件全路径\n     * @return  文件流\n     *\n     */\n    @Override\n    public byte[] downLoadFile(String pathUrl)  {\n        String key = pathUrl.replace(minIOConfigProperties.getEndpoint()+\"/\",\"\");\n        int index = key.indexOf(separator);\n        String bucket = key.substring(0,index);\n        String filePath = key.substring(index+1);\n        InputStream inputStream = null;\n        try {\n            inputStream = minioClient.getObject(GetObjectArgs.builder().bucket(minIOConfigProperties.getBucket()).object(filePath).build());\n        } catch (Exception e) {\n            log.error(\"minio down file error.  pathUrl:{}\",pathUrl);\n            e.printStackTrace();\n        }\n\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        byte[] buff = new byte[100];\n        int rc = 0;\n        while (true) {\n            try {\n                if (!((rc = inputStream.read(buff, 0, 100)) &gt; 0)) break;\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            byteArrayOutputStream.write(buff, 0, rc);\n        }\n        return byteArrayOutputStream.toByteArray();\n    }\n}\n</code></pre>\n<h3>（4）对外加入自动配置</h3>\n<p>在resources中新建<code>META-INF/spring.factories</code>  </p>\n<pre><code>org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n  com.my.file.service.impl.MinIOFileStorageService</code></pre>\n<p> </p>\n<p> </p>\n</div>\n</div>"}