{"blogid": "125487727", "writerAge": "码龄4年", "writerBlogNum": "27", "writerCollect": "19", "writerComment": "1", "writerFan": "686", "writerGrade": "2级", "writerIntegral": "250", "writerName": "Star_MengMeng", "writerProfileAdress": "writer_image\\profile_125487727.jpg", "writerRankTotal": "52599", "writerRankWeekly": "10667", "writerThumb": "16", "writerVisitNum": "22858", "blog_read_count": "789", "blog_time": "已于 2022-06-28 10:49:11 修改", "blog_title": "Unity - Pico开发 输入系统等相关API的使用---C#篇", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>Unity用的是2020.2.25</p>\n<p>Pico SDK用的版本是 v2.0.5  </p>\n<p>直接上代码，C#篇：</p>\n<pre>using System.Collections;\nusing System.Collections.Generic;\nusing Unity.XR.PXR;\nusing UnityEngine;\nusing UnityEngine.XR;\nusing UnityEngine.XR.Interaction.Toolkit;\n\npublic class PicoInputTest : MonoBehaviour\n{\n    //手柄控制器\n    private InputDevice leftController;\n    private InputDevice rightController;\n    private InputDevice headController;\n\n    private bool isTriggerDown;\n    private Vector2 axis;\n    \n    //手柄射线\n    XRRayInteractor leftInteractor;\n    XRRayInteractor rightInteractor;\n    //手柄射线光线\n    private XRInteractorLineVisual leftRayLine;\n    private XRInteractorLineVisual rightRayLine;\n    \n    //射线\n    RaycastHit leftRayInfo;\n\n    public GameObject cube;\n    public GameObject sphere;\n\n    void Start()\n    {\n        InitDevice();\n        InitData();\n        SetRayLineVisual();\n    }\n\n    //初始化设备\n    void InitDevice()\n    {\n        //设备举例，其他的需要的也可以检测一下\n        if (PXR_Input.IsControllerConnected(PXR_Input.Controller.LeftController))\n        {\n            leftController = InputDevices.GetDeviceAtXRNode(XRNode.LeftHand);\n            rightController = InputDevices.GetDeviceAtXRNode(XRNode.RightHand);\n            headController = InputDevices.GetDeviceAtXRNode(XRNode.Head);\n        }\n       \n        //注意路径根节点！\n        leftInteractor = transform.Find(\"Camera Offset/LeftHand Controller\").GetComponent&lt;XRRayInteractor&gt;();\n        rightInteractor = transform.Find(\"Camera Offset/RightHand Controller\").GetComponent&lt;XRRayInteractor&gt;();\n        \n        //左右手射线\n        leftRayLine = transform.Find(\"Camera Offset/LeftHand Controller\").GetComponent&lt;XRInteractorLineVisual&gt;();\n        rightRayLine = transform.Find(\"Camera Offset/LeftHand Controller\").GetComponent&lt;XRInteractorLineVisual&gt;();\n    }\n\n    //数据初始化\n    void InitData()\n    {\n        isTriggerDown = false;\n        axis = Vector2.zero;\n    }\n\n    //获取所有设备列表\n    private List&lt;InputDevice&gt; GetAllDevs()\n    {\n        List&lt;InputDevice&gt; deviceList = new List&lt;InputDevice&gt;();\n        InputDevices.GetDevices(deviceList);\n        return deviceList;\n    }\n    // Update is called once per frame\n    void Update()\n    {\n        //设备输入系统检测\n        DevicesInputUpdate();\n        //射线检测\n        RayCheck();\n    }\n\n    //设置射线颜色等属性\n    public void SetRayLineVisual()\n    {\n        Gradient g;\n        g = new Gradient();\n        GradientColorKey[] gck;\n        gck= new GradientColorKey[2];\n        GradientAlphaKey[] gak;\n        gak = new GradientAlphaKey[2];\n        \n        gck[0].color=Color.blue;\n        gck[0].time = 0.0f;\n        gck[1].color=Color.red;\n        gck[1].time = 1.0f;\n\n        gak[0].alpha = 1.0f;\n        gak[0].time = 0.0f;\n        gak[1].alpha = 1.0f;\n        gak[1].time = 1.0f;\n        \n        g.SetKeys(gck,gak);\n\n        leftRayLine.lineWidth = 0.01f;//范围0.0001-0.05\n        leftRayLine.invalidColorGradient = g;//默认状态时无交互射线颜色\n        //leftRayLine.validColorGradient = g2;//再定义个颜色g2、即产生交互时射线颜色；\n\n    }\n    //设备按钮检测\n    private void DevicesInputUpdate()\n    {\n        //板机键检测，其他的按钮一样原理，直接看API定义就行\n        if (leftController.TryGetFeatureValue(CommonUsages.triggerButton,out isTriggerDown)&amp;&amp;isTriggerDown)\n        {\n            //TODO:\n            cube.SetActive(false);\n        }\n\n        //摇杆检测，也可以直接通过0——1去判断\n        if (leftController.TryGetFeatureValue(CommonUsages.primary2DAxis,out axis)&amp;&amp;!axis.Equals(Vector2.zero))\n        {\n            //TODO:\n            float angle = VectorAngle(new Vector2(1, 0), axis);\n            //上    \n            if (angle &gt; 45 &amp;&amp; angle &lt; 135)\n            {\n             transform.Translate(Camera.main.transform.forward*5*Time.deltaTime);\n            }\n            //下      \n            else if (angle &lt; -45 &amp;&amp; angle &gt; -135)\n            {\n                transform.Translate(Camera.main.transform.forward*-5*Time.deltaTime);\n            }\n            //左      \n            else if ((angle &lt; 180 &amp;&amp; angle &gt; 135) || (angle &lt; -135 &amp;&amp; angle &gt; -180))\n            {\n                transform.Rotate(Vector3.up*-30*Time.deltaTime);\n            }\n            //右      \n            else if ((angle &gt; 0 &amp;&amp; angle &lt; 45) || (angle &gt; -45 &amp;&amp; angle &lt; 0))\n            {\n                transform.Rotate(Vector3.up*30*Time.deltaTime);\n            }\n            \n        }\n\n      \n    }\n\n    //update手柄射线检测\n    //右键 XR-UICanvas 创建Canvas只有在此Canvas下的UI组件才能和手柄射线产生正常的交互\n    private void RayCheck()\n    {\n        if (leftInteractor.GetCurrentRaycastHit(out leftRayInfo))\n        {\n            if (leftRayInfo.collider != null &amp;&amp; leftRayInfo.collider.CompareTag(\"Player\"))\n            {\n                //TODO:\n                sphere.transform.localScale = Vector3.one * 5;\n            }\n            else\n            {\n                sphere.transform.localScale = Vector3.one * 1;\n            }\n\n            if (leftRayInfo.collider.gameObject.name == \"look1Obj\")\n            {\n                if (leftController.TryGetFeatureValue(CommonUsages.triggerButton, out isTriggerDown) &amp;&amp; isTriggerDown)\n                {\n                    sphere.GetComponent&lt;MeshRenderer&gt;().material.color = Color.red;\n                    //Ui3DTest._onVrCLick.Invoke(\"look1Obj\");\n                }\n            }\n            else\n            {\n                sphere.GetComponent&lt;MeshRenderer&gt;().material.color = Color.blue;\n            }\n        }\n    }\n\n    float VectorAngle(Vector2 from,Vector2 to)\n    {\n        float angle;\n        Vector3 cross = Vector3.Cross(from, to);\n        angle = Vector2.Angle(from, to);\n        return cross.z &gt; 0 ? angle : -angle;\n    }\n\n}</pre>\n<p>附上Pico API官方文档：</p>\n<p><a href=\"https://developer.pico-interactive.com/docs/cn/12050/unity-xr-sdk-overview/\" title=\"概览 - Pico开发者文档\">概览 - Pico开发者文档</a></p>\n</div>\n</div>"}