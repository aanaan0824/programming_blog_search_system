{"blogid": "121938642", "writerAge": "码龄3年", "writerBlogNum": "8", "writerCollect": "285", "writerComment": "5", "writerFan": "47", "writerGrade": "1级", "writerIntegral": "76", "writerName": "断眉727", "writerProfileAdress": "writer_image\\profile_121938642.jpg", "writerRankTotal": "259166", "writerRankWeekly": "278140", "writerThumb": "40", "writerVisitNum": "7694", "blog_read_count": "5811", "blog_time": "于 2021-12-14 19:54:58 发布", "blog_title": "尚硅谷JAVA基础笔记吐血整理", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>JAVA基础</h3>\n<ul><li><ul><li><a href=\"#456__8\">第4/5/6章 面向对象</a></li><li><ul><li><a href=\"#Day_8_P198P218_14\">Day 8 （P198-P218）</a></li><li><ul><li><a href=\"#1_16\">1、形参与实参</a></li><li><a href=\"#2_22\">2、值传递机制</a></li><li><a href=\"#3vs__30\">3、属性（成员变量）vs 局部变量</a></li></ul>\n</li><li><a href=\"#Day_9_P219P241_78\">Day 9 （P219-P241）</a></li><li><ul><li><a href=\"#1_80\">1、封装与隐藏</a></li><li><a href=\"#2_86\">2、权限修饰符</a></li><li><a href=\"#3_103\">3、构造器</a></li><li><a href=\"#4UML_115\">4、UML类图</a></li><li><a href=\"#5this_118\">5、this关键字</a></li><li><a href=\"#6package_132\">6、package关键字的使用</a></li><li><a href=\"#7MVC_140\">7、MVC设计模式</a></li><li><a href=\"#8import_144\">8、import关键字</a></li></ul>\n</li><li><a href=\"#Day_10_P242P264_158\">Day 10 (P242-P264)</a></li><li><ul><li><a href=\"#12_160\">1、项目2</a></li><li><a href=\"#2_166\">2、继承性</a></li></ul>\n</li><li><a href=\"#Day_11_P265P284_194\">Day 11 （P265-P284）</a></li><li><ul><li><a href=\"#1overwrite_196\">1、方法重写（overwrite）</a></li><li><a href=\"#2super_226\">2、super关键字</a></li><li><a href=\"#3_240\">3、多态性</a></li></ul>\n</li><li><a href=\"#Day_12_P285P311_256\">Day 12 （P285-P311）</a></li><li><ul><li><a href=\"#1_258\">1、向下转型</a></li><li><a href=\"#2instanceof_268\">2、instanceof关键字</a></li><li><a href=\"#3Object_274\">3、Object类</a></li><li><a href=\"#4_285\">4、==</a></li><li><a href=\"#5equals_295\">5、equals（）</a></li><li><a href=\"#6toString_327\">6、toString()</a></li><li><a href=\"#7_343\">7、单元测试</a></li><li><a href=\"#8_347\">8、包装类的使用</a></li></ul>\n</li><li><a href=\"#Day_13_P312P338_431\">Day 13 (P312-P338)</a></li><li><ul><li><a href=\"#1static_433\">1、static关键字</a></li><li><a href=\"#2_477\">2、内存结构图</a></li><li><a href=\"#3_512\">3、单例设计模式</a></li><li><a href=\"#4main_568\">4、理解main方法</a></li><li><a href=\"#5_574\">5、代码块</a></li><li><a href=\"#6final_645\">6、final关键字</a></li></ul>\n</li><li><a href=\"#Day_14P339P366_659\">Day 14（P339-P366）</a></li><li><ul><li><a href=\"#1abstract_663\">1、abstract</a></li><li><ul><li><a href=\"#abstract_665\">abstract介绍</a></li><li><a href=\"#_685\">抽象的应用</a></li><li><a href=\"#_689\">抽象类的匿名子类对象</a></li></ul>\n</li><li><a href=\"#2_736\">2、接口</a></li><li><ul><li><a href=\"#_738\">接口介绍</a></li><li><a href=\"#_767\">接口应用</a></li><li><a href=\"#_781\">接口笔试题</a></li><li><a href=\"#java8_839\">java8中接口新特性</a></li><li><a href=\"#_849\">抽象类和接口的异同</a></li></ul>\n</li><li><a href=\"#3_858\">3、内部类</a></li><li><a href=\"#4_940\">4、关键字总结</a></li></ul>\n</li></ul>\n</li><li><a href=\"#7__948\">第7章 异常处理</a></li><li><ul><li><a href=\"#Day_15P367P385_950\">Day 15（P367-P385）</a></li><li><ul><li><a href=\"#1_952\">1、异常概述与异常体系结构</a></li><li><a href=\"#2_992\">2、常见异常</a></li><li><a href=\"#3trycatchfinally_1050\">3、try-catch-finally</a></li><li><ul><li><a href=\"#_1052\">异常的处理：抓抛模型</a></li><li><a href=\"#trycatchfinally_1057\">try-catch-finally</a></li></ul>\n</li><li><a href=\"#4throws_1129\">4、throws</a></li><li><ul><li><a href=\"#_1148\">方法重写的规则</a></li><li><a href=\"#_1152\">开发中异常处理的选择</a></li></ul>\n</li><li><a href=\"#5throw_1157\">5、手动抛出异常：throw</a></li><li><a href=\"#6_1161\">6、用户自定义异常类</a></li></ul>\n</li></ul>\n</li><li><a href=\"#8__1196\">第8章 多线程</a></li><li><ul><li><a href=\"#Day_15_P406P427_1198\">Day 15 （P406-P427）</a></li><li><ul><li><a href=\"#1_1202\">1、程序、进程、线程</a></li><li><a href=\"#2_1232\">2、线程的创建和使用</a></li><li><ul><li><a href=\"#Thread_1234\">方式一：继承于Thread类</a></li><li><a href=\"#Runnable_1288\">方式二：实现Runnable接口</a></li><li><a href=\"#_1316\">两种方式的对比</a></li></ul>\n</li></ul>\n</li><li><a href=\"#Day_16P428P447_1321\">Day 16（P428-P447）</a></li><li><ul><li><a href=\"#3_1323\">3、线程的生命周期</a></li><li><a href=\"#4_1327\">4、线程的同步</a></li><li><ul><li><a href=\"#_1336\">方式一：同步代码块</a></li><li><a href=\"#_1376\">方式二：同步方法</a></li><li><a href=\"#_1421\">同步方法总结</a></li><li><a href=\"#_1435\">线程安全的单例模式：懒汉式</a></li><li><a href=\"#_1473\">死锁</a></li><li><a href=\"#Lock_1479\">Lock（锁）</a></li></ul>\n</li><li><a href=\"#5_1528\">5、线程的通信</a></li><li><ul><li><a href=\"#_1582\">经典例题:生产者/消费者问题</a></li></ul>\n</li><li><a href=\"#6JDK50_1596\">6、JDK5.0新增线程创建方式</a></li><li><ul><li><a href=\"#Callable_1598\">实现Callable接口</a></li><li><a href=\"#_1640\">使用线程池</a></li></ul>\n</li><li><a href=\"#7_1686\">7、总结</a></li></ul>\n</li></ul>\n</li><li><a href=\"#9_JAVA_1722\">第9章 JAVA常用类</a></li><li><ul><li><a href=\"#1_1724\">1、字符串相关的类</a></li><li><ul><li><a href=\"#String_1726\">String类及常用方法</a></li><li><a href=\"#StringBufferStringBuilder_1818\">StringBuffer/StringBuilder</a></li></ul>\n</li><li><a href=\"#2JDK8API_1845\">2、JDK8之前的日期时间API</a></li><li><ul><li><a href=\"#System_1847\">System静态方法</a></li><li><a href=\"#Date_1853\">Date类</a></li><li><a href=\"#Calendar_1888\">Calendar类</a></li><li><a href=\"#SimpleDateFormat_1914\">SimpleDateFormat类</a></li></ul>\n</li><li><a href=\"#3JDK8API_1955\">3、JDK8中新日期时间API</a></li><li><ul><li><a href=\"#LocalDateLocalTimeLocalDateTime_1957\">LocalDate/LocalTime/LocalDateTime</a></li><li><a href=\"#Instant_1961\">Instant</a></li><li><a href=\"#DateTimeFormatter_1965\">DateTimeFormatter</a></li><li><a href=\"#_1971\">其他类</a></li></ul>\n</li><li><a href=\"#4JAVA_1973\">4、JAVA比较器</a></li><li><ul><li><a href=\"#Comparable_1975\">Comparable接口</a></li><li><a href=\"#Comparator_1979\">Comparator接口</a></li></ul>\n</li><li><a href=\"#5System_1983\">5、System类</a></li><li><a href=\"#6Math_1985\">6、Math类</a></li><li><a href=\"#7BigIntegerBigDecimal_1987\">7、BigInteger与BigDecimal</a></li></ul>\n</li><li><a href=\"#10__1993\">第10章 枚举类&amp;注解</a></li><li><ul><li><a href=\"#_1995\">枚举类</a></li><li><a href=\"#1_1997\">1、如何自定义枚举类</a></li><li><a href=\"#2enum_2021\">2、如何使用关键字enum定义枚举类</a></li><li><a href=\"#3Enum_2043\">3、Enum类的主要方法</a></li><li><a href=\"#4_2051\">4、实现接口的枚举类</a></li><li><a href=\"#_2096\">注解</a></li></ul>\n</li><li><a href=\"#11_JAVA_2150\">第11章 JAVA集合</a></li><li><ul><li><a href=\"#1JAVA_2152\">1、JAVA集合框架概述</a></li><li><a href=\"#2Collection_2166\">2、Collection接口方法</a></li><li><a href=\"#3Iterator_2185\">3、Iterator迭代器接口</a></li><li><a href=\"#4CollectionList_2200\">4、Collection子接口一：List</a></li><li><ul><li><a href=\"#ArrayList_2212\">ArrayList源码分析</a></li><li><a href=\"#LinkedList_2234\">LinkedList源码分析</a></li></ul>\n</li><li><a href=\"#5CollectionSet_2238\">5、Collection子接口二：Set</a></li><li><ul><li><a href=\"#HashSet_2249\">HashSet</a></li><li><a href=\"#LinkedHashSet_2271\">LinkedHashSet</a></li><li><a href=\"#TreeSet_2275\">TreeSet</a></li></ul>\n</li><li><a href=\"#set_2281\">set习题</a></li><li><a href=\"#6Map_2333\">6、Map接口</a></li><li><ul><li><a href=\"#Map_2335\">Map实现类结构</a></li><li><a href=\"#Map_2359\">Map结构</a></li><li><a href=\"#HashMap_JDK7_2369\">HashMap JDK7</a></li><li><ul><li><a href=\"#_2371\">底层实现</a></li><li><a href=\"#_2390\">源码分析</a></li></ul>\n</li><li><a href=\"#HashMap_JDK8_2394\">HashMap JDK8</a></li><li><ul><li><a href=\"#_2396\">底层实现</a></li><li><a href=\"#_2410\">源码分析</a></li></ul>\n</li><li><a href=\"#LinkedHashMap_2422\">LinkedHashMap</a></li><li><a href=\"#Map_2448\">Map中定义的方法</a></li><li><a href=\"#TreeMap_2462\">TreeMap</a></li><li><a href=\"#Properties_2478\">Properties</a></li></ul>\n</li><li><a href=\"#7Collections_2482\">7、Collections工具类</a></li></ul>\n</li><li><a href=\"#12__2502\">第12章 泛型</a></li><li><ul><li><a href=\"#1_2504\">1、为什么要有泛型</a></li><li><a href=\"#2_2510\">2、在集合中使用泛型</a></li><li><a href=\"#3_2516\">3、自定义泛型结构</a></li><li><a href=\"#4_2545\">4、泛型在继承上的体现</a></li><li><a href=\"#5_2549\">5、通配符的使用</a></li></ul>\n</li><li><a href=\"#13IO_2561\">**第13章IO流**</a></li><li><ul><li><a href=\"#1File_2563\">1、File类的使用</a></li><li><a href=\"#2IO_2598\">2、IO流原理及流的分类</a></li><li><a href=\"#3_2614\">3、节点流（或文件流）</a></li><li><ul><li><a href=\"#_2616\">读入</a></li><li><a href=\"#_2650\">写出</a></li></ul>\n</li><li><a href=\"#4_2675\">4、缓冲流</a></li><li><a href=\"#5_2681\">5、转换流</a></li><li><a href=\"#6_2689\">6、标准输入、输出流</a></li><li><a href=\"#7_2691\">7、打印流</a></li><li><a href=\"#8_2693\">8、数据流</a></li><li><a href=\"#9_2695\">9、对象流</a></li><li><ul><li><a href=\"#_2699\">序列化和反序列化</a></li><li><a href=\"#Serializable_2709\">Serializable接口</a></li></ul>\n</li><li><a href=\"#10_2717\">10、随机存取文件流</a></li><li><a href=\"#11NIO2PathPathsFiles_2719\">11、NIO.2中Path、Paths、Files类的使用</a></li></ul>\n</li><li><a href=\"#14__2721\">第14章 网络编程</a></li><li><ul><li><ul><li><a href=\"#1_2725\">1、网络通信要素概述</a></li><li><a href=\"#21IP_2731\">2、通信要素1：IP和端口号</a></li><li><a href=\"#32_2737\">3、通信要素2：网络协议</a></li><li><a href=\"#4TCP_2741\">4、TCP网络编程</a></li><li><a href=\"#5UDP_2866\">5、UDP网络编程</a></li><li><a href=\"#6URL_2872\">6、URL编程</a></li></ul>\n</li></ul>\n</li><li><a href=\"#15_JAVA_2884\">第15章 JAVA反射机制</a></li><li><ul><li><a href=\"#1Java_2886\">1、Java反射机制概述</a></li><li><a href=\"#2ClassClass_2896\">2、理解Class类并获取Class实例</a></li><li><a href=\"#3ClassLoader_2961\">3、类的加载与ClassLoader的理解</a></li><li><a href=\"#4_2981\">4、创建运行时类的对象</a></li><li><a href=\"#5_2985\">5、获取运行时类的完整结构</a></li><li><a href=\"#6_2987\">6、调用运行时类的指定结构</a></li><li><a href=\"#7_2991\">7、反射的应用：动态代理</a></li></ul>\n</li><li><a href=\"#16JAVA8__3064\">第16章JAVA8 的其他新特性</a></li><li><ul><li><a href=\"#JAVA8_3066\">之前提到的JAVA8新特性：</a></li><li><ul><li><a href=\"#java8_3068\">java8中接口新特性</a></li><li><a href=\"#JDK8API_3078\">JDK8中新日期时间API</a></li><li><a href=\"#JDK8_3080\">JDK8中注解的新特性</a></li><li><a href=\"#HashMap_JDK8_3084\">HashMap JDK8</a></li></ul>\n</li><li><a href=\"#_3088\">其他新特性</a></li><li><ul><li><a href=\"#1Lambda_3092\">1、Lambda表达式</a></li><li><a href=\"#2Functional_3108\">2、函数式（Functional）接口</a></li><li><a href=\"#3_3110\">3、方法引用与构造器引用</a></li><li><a href=\"#4Stream_API_3124\">4、强大的Stream API</a></li><li><a href=\"#5Optional_3150\">5、Optional类</a></li></ul>\n</li></ul>\n</li><li><a href=\"#17_JAVA9__JAVA10__JAVA11_3152\">第17章 JAVA9 &amp; JAVA10 &amp; JAVA11新特性</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<p>第1章 JAVA语言概述</p>\n<p>第2章 基本语法</p>\n<p>第3章 数组</p>\n<h2><a id=\"456__8\"></a>第4/5/6章 面向对象</h2>\n<ol><li>类和类的成员：属性、方法、构造器、代码块和内部类</li><li>封装、继承和多态</li><li>关键字及其使用</li></ol>\n<h3><a id=\"Day_8_P198P218_14\"></a>Day 8 （P198-P218）</h3>\n<h4><a id=\"1_16\"></a>1、形参与实参</h4>\n<p>形参：方法定义时，声明的小括号内的参数</p>\n<p>实参：方法调用时，实际传递给形参的数据</p>\n<h4><a id=\"2_22\"></a>2、值传递机制</h4>\n<p>方法的形参传递机制：值传递</p>\n<p>如果参数是基本数据类型，此时实参赋给形参的是实参真实存储的数据值</p>\n<p>如果参数是引用数据类型，此时实参赋给形参的是实参存储数据的地址值</p>\n<h4><a id=\"3vs__30\"></a>3、属性（成员变量）vs 局部变量</h4>\n<p>相同点：</p>\n<p>​ 1、定义变量的格式：数据类型 变量名=变量值</p>\n<p>​ 2、先声明后使用</p>\n<p>​ 3、变量都有其作用域</p>\n<p>不同点：</p>\n<p>​ 1、在类中声明的位置不同，属性直接定义在类的{}内，局部变量声明在方法内，方法形参，代码块内，构造器 形参、构造器内部的变量</p>\n<p>​ 2、权限修饰符：</p>\n<p>​ 属性：可以在声明属性时，指明其权限，使用权限修饰符</p>\n<p>​ 常用的权限修饰符：private、public、缺省、protected</p>\n<p>​ 局部变量：不可以使用权限修饰符</p>\n<p>​ 3、默认初始化值</p>\n<p>​ 属性：类的属性，根据其类型都有默认初始化值</p>\n<p>​ 整型（byte、short、int、long）:0</p>\n<p>​ 浮点型（float、double）:0.0</p>\n<p>​ 字符型（char）:0（或’\\u0000’）</p>\n<p>​ 布尔型（boolean）:false</p>\n<p>​ 引用数据类型（<strong>字符串</strong>、类、数组、接口）:null</p>\n<p>​ 局部变量：没有默认初始化，在调用局部变量之前一定要显式化赋值</p>\n<p>​ 特别的，形参在调用时赋值即可</p>\n<p>​ 4、在内存中加载的位置</p>\n<p>​ 属性：加载到堆空间中</p>\n<p>​ 局部变量：加载到栈空间</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-r1RExbh9-1639482821176)(C:\\Users\\86187\\Desktop\\MK笔记\\JAVA基础\\变量.png)]</p>\n<h3><a id=\"Day_9_P219P241_78\"></a>Day 9 （P219-P241）</h3>\n<h4><a id=\"1_80\"></a>1、封装与隐藏</h4>\n<p>高内聚：类的内部数据操作细节自己完成，不允许外部干涉</p>\n<p>低耦合：仅对外暴露少量的方法用于使用</p>\n<h4><a id=\"2_86\"></a>2、权限修饰符</h4>\n<p>​ 1、四种权限（从小到大）：private，缺省(default)，protected，public</p>\n<table><thead><tr><th>修饰符</th><th>类内部</th><th>同一个包</th><th>不同包的子类</th><th>同一个工程</th></tr></thead><tbody><tr><td>private</td><td>Yes</td><td></td><td></td><td></td></tr><tr><td>缺省</td><td>Yes</td><td>Yes</td><td></td><td></td></tr><tr><td>protected</td><td>Yes</td><td>Yes</td><td>Yes</td><td></td></tr><tr><td>public</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr></tbody></table>\n<p>​ 2、4种权限可以用来修饰类及内部类的内部结构：属性、方法、构造器、内部类</p>\n<p>​ 修饰类只能用缺省、public</p>\n<p>​ 总结封装性：JAVA提供了4种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构在被调用时的可见性的大小</p>\n<h4><a id=\"3_103\"></a>3、构造器</h4>\n<p>​ 1、构造器的作用：创建对象、初始化对象的属性</p>\n<p>​ 如果没有显式的定义类的构造器，则系统默认提供一个空参的构造器</p>\n<p>​ 一个类中定义的多个构造器彼此构成重载</p>\n<p>​ 2、属性赋值的选后顺序：①默认初始化 ②显式初始化 ③构造器中赋值 ④通过对象.方法或对象.属性赋值</p>\n<p>​ 3、只要造对象，就一定会使用构造器，这句话任何时候都是对的</p>\n<h4><a id=\"4UML_115\"></a>4、UML类图</h4>\n<h4><a id=\"5this_118\"></a>5、this关键字</h4>\n<p>​ 1、方法的形参和类的属性同名时，必须显式使用this.变量的方式，表明此变量是属性，而非形参</p>\n<p>​ 2、this可以调用属性、方法和构造器</p>\n<p>​ 3、可以显式使用\"this(形参列表)\"方式，调用本类中指定的其他构造器</p>\n<p>​ \"this(形参列表)\"必须声明在当前构造器的首行</p>\n<p>​ 构造器中不能使用 \"this(形参列表)\"的方式调用自己</p>\n<p>​ 构造器内部最多只能声明一个\"this(形参列表)\"调用其他构造器</p>\n<h4><a id=\"6package_132\"></a>6、package关键字的使用</h4>\n<p>​ 1、使用package声明类或者接口所属的包，声明在源文件的首行</p>\n<p>​ 2、每“.”一次，就代表一层文件目录</p>\n<p>​ 3、同一个包下，不能命名同名的接口和类，不同包下可以声明同名的接口和类</p>\n<h4><a id=\"7MVC_140\"></a>7、MVC设计模式</h4>\n<p>将程序分成三个层次：视图模型层（view）、控制器层（controller）与数据模型层（model）[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-bcVUFlqt-1639482821181)(C:\\Users\\86187\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211112170536925.png)]</p>\n<h4><a id=\"8import_144\"></a>8、import关键字</h4>\n<p>​ 1、在源文件中使用import导入指定包下的类和接口</p>\n<p>​ 2、如果使用的类或者接口时java.lang包下定义的，则可以省略import结构</p>\n<p>​ 如果使用的类或者接口是本包下定义的，则可以省略import结构</p>\n<p>​ 3、如果在源文件中使用了不同包下的同名类，则必须至少有一个类需要以全类名的方式显示</p>\n<p>​ 4、使用“xxx.*”的方式可以调用包中的所有结构，但如果是子包，仍需要显式调用（我的理解就是没有子包，都是并列的包）</p>\n<p>​ 5、import static：导入类或接口中的静态结构（意思就是导入属性或者方法），单import是导入类或接口</p>\n<h3><a id=\"Day_10_P242P264_158\"></a>Day 10 (P242-P264)</h3>\n<h4><a id=\"12_160\"></a>1、项目2</h4>\n<p>​ 1、动态数组，大小随时改变的写法</p>\n<p>​ 2、删除数组中的元素，后面的元素要覆盖前面的，不能直接指空</p>\n<h4><a id=\"2_166\"></a>2、继承性</h4>\n<p>1、继承性的优点：</p>\n<p>​ ①减少代码冗余，提高代码复用性</p>\n<p>​ ②便于功能的扩展</p>\n<p>2、继承的格式：classA extends classB{}</p>\n<p>​ A：子类、派生类、subclass</p>\n<p>​ B：父类、基类、超类、superclass</p>\n<p>​ 体现：一旦子类继承父类之后，子类就获取了父类中声明的属性和方法。</p>\n<p>​ 特别的，父类中声明为private的属性或者方法，仍然认为获取了父类中私有的结构，只是因为封装性的影响， 子类不能直接调用。子类继承父类之后，可以声明自己持有的属性或方法实现功能的扩展。</p>\n<p>3、JAVA中关于继承的规定</p>\n<p>​ ①支持单继承和多层继承，不允许多重继承</p>\n<p>​ 一个子类只能有一个父类，一个父类可以派生多个子类</p>\n<p>​ ②直接父类和间接父类</p>\n<p>​ ③所有类都直接或间接继承于Object类</p>\n<h3><a id=\"Day_11_P265P284_194\"></a>Day 11 （P265-P284）</h3>\n<h4><a id=\"1overwrite_196\"></a>1、方法重写（overwrite）</h4>\n<p>​ 1、重写：子类继承父类以后，可以对父类中同名参数的方法进行覆盖操作</p>\n<p>​ 2、重写之后，当创建子类对象以后，通过子类对象调用子父类中的同名同参数的方法时，实际执行的是子类重写父类的方法</p>\n<p>​ 3、重写的规定：</p>\n<p>​ 方法的声明：权限修饰符 返回值类型 方法名（形参列表）throws 异常的类型{ 方法体 }</p>\n<p>​ 子类中叫<strong>重写</strong>的方法，父类中叫<strong>被重写</strong>的方法</p>\n<p>​ ①子类重写的方法的方法名和形参列表与父类被重写的方法名和形参列表相同</p>\n<p>​ ②子类重写的方法的权限修饰符不小于父类被重写方法的权限修饰符</p>\n<p>​ 特殊情况：子类不能重写父类中声明为private权限的方法</p>\n<p>​ ③返回值类型：</p>\n<p>​ 父类被重写的方法的返回值是void：子类重写的方法只能是void</p>\n<p>​ 父类被重写的方法的返回值是引用类型：子类重写的方法只能和父类相同或者为其子类</p>\n<p>​ 父类被重写的方法的返回值是基本类型：子类重写的方法只能是相同的基本类型</p>\n<p>​ ④子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p>\n<p>​ ⑤必须是非static</p>\n<h4><a id=\"2super_226\"></a>2、super关键字</h4>\n<p>​ 1、super可以用来调用属性、方法和构造器。</p>\n<p>​ 2、当子类和父类中定义了同名的属性时，要想在子类中调用父类中声明的属性则必须显式使用super.属性。</p>\n<p>​ 当子类重写了父类中的方法之后，要在子类中调用父类中被重写的方法则必须显式使用super.属性。</p>\n<p>​ 3、super调用构造器</p>\n<p>​ 可以在子类中使用 super（形参列表）的方式调用父类中声明的指定的构造器，必须声明在首行</p>\n<p>​ 在类的构造器中 this( 形参列表 )和super（形参列表）只能二选一，在构造器没有显式声明时，默认调用父类中的空参构造器</p>\n<h4><a id=\"3_240\"></a>3、多态性</h4>\n<p>​ 1、父类的引用指向子类的对象——对象的多态性</p>\n<p>​ 2、多态的使用：虚拟方法的调用</p>\n<p>​ 有了对象的多态性之后，在编译期只能调用父类中声明的方法，编译期实际执行的是子类重写父类的方法</p>\n<p>​ <strong>编译看左边，运行看右边</strong></p>\n<p>​ 3、多态性使用前提：①有类的继承关系 ②要有方法的重写</p>\n<p>​ 4、对象的多态性只适用于方法不适用于属性（还是父类的属性）</p>\n<p>​ 5、多态性是一个运行时行为，要到运行的时候才知道具体是哪一个，而重载是编译时行为，编译的时候就知道具体是哪一个</p>\n<h3><a id=\"Day_12_P285P311_256\"></a>Day 12 （P285-P311）</h3>\n<h4><a id=\"1_258\"></a>1、向下转型</h4>\n<p>​ 1、有了对象的多态性之后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时只能使用父类中声明的属性和方法。使用强制类型转换符之后就可以使用子类的属性和方法，即向下转型。</p>\n<p>​ 2、自动类型提升和强制类型转化（有可能会转不成功</p>\n<p>​ 3、P289：向下转型的几个问题</p>\n<p>​ (那几个练习还蛮重要的感觉)</p>\n<h4><a id=\"2instanceof_268\"></a>2、instanceof关键字</h4>\n<p>​ 1、a instanceof A:判断对象a是否为A的实例，如果是返回true。</p>\n<p>​ 2、使用情景：避免在向下转型时出现异常，先进行判断。</p>\n<h4><a id=\"3Object_274\"></a>3、Object类</h4>\n<p>​ 1、Object类是所有类的根父类，类中的属性和方法具有通用性，Object类中只声明了一个空参构造器</p>\n<p>​ 2、Object类中的方法：</p>\n<ul><li>clone()，克隆一个对象</li><li>funalize()，对象调用的用于垃圾回收的方法（不要主动调用，由垃圾回收器调用）</li><li><strong>equals()</strong> / <strong>toString()</strong> / getClass() / hashCode() / wait() / notify() / notifyAll()</li><li>数组也作为Object类的子类出现，可以调用Object类中声明的方法</li></ul>\n<h4><a id=\"4_285\"></a>4、==</h4>\n<p>​ 1、可以使用在基本数据类型变量和引用数据类型变量中</p>\n<p>​ 2、基本数据类型变量：比较保存的数据（类型可以不同）</p>\n<p>​ 引用数据类型变量：比较地址值，即两个引用是否指向同一个对象实体</p>\n<p>​ 3、基本数据类型除了boolean以外都会有自动类型提升所以不用太关注类型，关注值。引用类型的话类型都不同地址必不可能相同</p>\n<h4><a id=\"5equals_295\"></a>5、equals（）</h4>\n<p>​ 1、基本数据类型不是类，无法调用equals（）方法，只适用于引用数据类型</p>\n<p>​ 2、Object类中equals()方法的定义：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">==</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>​ 说明Object类中equals()方法和==相同，比较地址值，即两个引用是否指向同一个对象实体</p>\n<p>​ 3、String\\Date\\File\\包装类都重写了Object类中的equals()方法，重写后比较的是属性是否相同（内容是否相同）</p>\n<p>​ 4、自定义的类如果使用equals()方法，也通常是比较实体内容，那就需要重写。重写的步骤：先<mark>判断一下，如果</mark>直接返回true，然后判断是否为同一类型，是的话向下转型然后比较需要的属性</p>\n<p>​ 系统可以自动生成equals()方法比较你需要的属性。</p>\n<p>​ 5、x.equals(null)永远都是false,比较的前提是类型相同</p>\n<p>​ 6、常量池</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">String</span> s1<span class=\"token operator\">=</span><span class=\"token string\">\"BB\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s2<span class=\"token operator\">=</span><span class=\"token string\">\"BB\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token operator\">==</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n</code></pre>\n<p>两个对象都在常量池中，两个对象的地址一样</p>\n<h4><a id=\"6toString_327\"></a>6、toString()</h4>\n<p>​ 1、当我们输出一个对象的引用时，实际上是调用当前对象的toString()</p>\n<p>​ 2、Object类中toString()的定义</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"@\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出：类名@地址值（JVM中的虚拟地址值）</p>\n<p>​ 3、String/Date/File/包装类把toString()重写了，输出的是内容。自定义类也可以重写。</p>\n<h4><a id=\"7_343\"></a>7、单元测试</h4>\n<p>（讲的是Eclipse的单元测试，要用的话就去找IDEA的）</p>\n<h4><a id=\"8_347\"></a>8、包装类的使用</h4>\n<table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr></tbody></table>\n<p>1、基本类型与包装类的转换</p>\n<ul><li>基本数据类型–&gt;包装类：调用包装类的构造器</li><li>包装类–&gt;基本数据类型：调用xxxValue()</li></ul>\n<p>2、JDK 5.0新特性：自动装箱和自动拆箱</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> num1<span class=\"token operator\">=</span>num<span class=\"token punctuation\">;</span><span class=\"token comment\">//自动装箱：基本数据类型---&gt;包装类</span>\n<span class=\"token keyword\">int</span> num2<span class=\"token operator\">=</span>num1<span class=\"token punctuation\">;</span><span class=\"token comment\">//自动拆箱：包装类---&gt;基本数据类型  </span>\n</code></pre>\n<p>3、基本数据类型、包装类—&gt;String</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//方式1:连接运算（其他基本类型都可以用这种方式）</span>\n<span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str<span class=\"token operator\">=</span>num<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//方式2：valueOf()</span>\n<span class=\"token keyword\">float</span> f1<span class=\"token operator\">=</span><span class=\"token number\">12.3f</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str1<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>4、String—&gt;基本数据类型、包装类：调用包装类的parseXxx()</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">String</span> str<span class=\"token operator\">=</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>可能会报NumberFormatException，比如\"true\"要转int就是不可能的，就会报错[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-kk9L7pDt-1639482821183)(C:\\Users\\86187\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211119210908171.png)]</p>\n<p>熟练掌握：<strong>自动装箱和拆箱，valueOf()，parseXxx()</strong></p>\n<p>5、课后题</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//题目1</span>\n<span class=\"token class-name\">Object</span> o1<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token operator\">?</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1.0</span>\n<span class=\"token comment\">//三目运算符要求类型相同，int自动类型提升为double</span>\n<span class=\"token class-name\">Object</span> o2<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>o2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> o2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//题目2</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Integer</span> i<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Integer</span> j<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n    \n    <span class=\"token class-name\">Integer</span> m<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Integer</span> n<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n    \n    <span class=\"token class-name\">Integer</span> x<span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Integer</span> y<span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>①两个不同的对象</p>\n<p>②Integer内部定义了IngeterCache()方法，其中定义了Ingeter[]，保存了-128<sub>127的整数，如果给Ingeter赋值的范围在-128</sub>127以内，可以直接使用数组中的元素，不用去new了，如此可以提高效率</p>\n<p>③超过了缓存池的大小，所以是new了两个不同的对象</p>\n<h3><a id=\"Day_13_P312P338_431\"></a>Day 13 (P312-P338)</h3>\n<h4><a id=\"1static_433\"></a>1、static关键字</h4>\n<p>​ 1、static可以用来修饰：属性、方法、代码块、内部类</p>\n<p>​ 2、static修饰属性：静态变量（类变量），非静态变量（实例变量)</p>\n<ul><li> <p>按是否有static修饰，属性又可分为静态属性和非静态属性</p> </li><li> <p>实例变量：创建了多个对象之后，每个对象独立拥有一套非静态属性，修改其中一个对象的非静态属性不会导致其他对象中同样的属性的修改</p> </li><li> <p>静态变量：多个对象共享同一个静态变量，当通过某一个对象修改静态变量时，其他对象的该变量也一起改变</p> </li><li> <p>静态变量随着类的加载而加载，早于对象的创建，可以通过“类.静态变量”的方式调用</p> <p>由于类只会加载一次，静态变量在内存中也只有一份</p> </li><li> <p>静态属性举例：System.out，Math.PI</p> </li></ul>\n<p>​ 3、static修饰方法：静态方法</p>\n<p>​ ① 静态方法随着类的加载而加载，早于对象的创建，可以通过“类.静态方法”的方式调用</p>\n<p>​ ② 静态方法中，只能调用静态的方法和属性</p>\n<p>​ 非静态方法中，既可以调用静态的属性和方法，也可以调用非静态的</p>\n<p>​ 4、在静态方法内，不能室友this、super关键字</p>\n<p>​ 5、在开发中，如何确定一个属性要声明为static？</p>\n<p>​ 属性可以被多个对象共享，不会因为对象的不同而不同</p>\n<p>​ 6、在开发中，如何确定一个方法要声明为static？</p>\n<p>​ 工具类中的方法，习惯上声明为static，比如Math\\Arrays\\Collections</p>\n<p>​ 操作静态属性的方法</p>\n<p>​ 7、使用举例</p>\n<p>​ ①Math\\Arrays\\Collections等工具类</p>\n<p>​ ②单例模式</p>\n<h4><a id=\"2_477\"></a>2、内存结构图</h4>\n<p>栈：局部变量</p>\n<p>堆：new出来的结构，对象、数组</p>\n<p>方法区：类的加载信息、静态域、常量池</p>\n<pre><code class=\"prism language-Java\">class Chinese{\n    String name;\n    int age;\n    static String nation;\n}\npublic static void main(String[] args){\n    Chinese.nation=\"中国\";\n    \n    Chinese c1=new Chinese();\n    c1.name=\"姚明\";\n    c1.age=40;\n    \n    Chinese c2=new Chinese();\n    c1.name=\"马龙\";\n    c1.age=30;\n    \n    System.out.println(c1.nation);//中国\n    c1.nation=\"CHN\";\n    System.out.println(c2.nation);//CHN\n    c2.nation=\"CHINA\";\n    System.out.println(c1.nation);//CHINA\n}\n</code></pre>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-rP0Vw7Pi-1639482821184)(C:\\Users\\86187\\Desktop\\MK笔记\\JAVA基础\\图片1.png)]</p>\n<h4><a id=\"3_512\"></a>3、单例设计模式</h4>\n<ol><li> <p>单例设计模式就是采取一定的方法保证整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法。</p> </li><li> <p>单例模式的优点：只生成一个实例，减少系统性能开销。使用例：getRuntime()</p> </li><li> <p>区分饿汉式和懒汉式：</p> <p>饿汉式——缺点：先创建对象，对象加载时间过长；优点：线程安全</p> <p>懒汉式——优点：延迟对象的创建；缺点：下述写法线程不安全</p> <p><strong>面试让你写的话优先写饿汉式</strong></p> </li><li> <pre><code class=\"prism language-Java\">public class SingletonTest{\n    public static void main(String[] args){\n        \n        Bank bank1=Bank.getInstance();\n        Bank bank2=Bank.getInstance();\n        System.out.println(bank1==bank2);//true\n        \n        \n    }\n}\n//--------饿汉式单例模式\nclass Bank{\n    //1、私有化类的构造器\n    private Bank(){\n        \n    }\n    //2、内部创建类的对象\n    private static Bank instance=new Bank();\n    //3、提供公共的静态方法返回类的对象,可以在main方法中通过类名调用方法\n    public static Bank getInstance(){\n        return instance;\n    }\n}\n//--------懒汉式单例模式\nclass Order{\n    //1、私有化类的构造器\n    private Order(){\n        \n    }\n    //2、声明当前类的对象\n    private static Order instance=null;\n    //3、声明public、static的返回当前类的对象\n    public static Order getInstance(){\n        if(instance==null){\n            instance=new Order();\n        }\n        return instance;\n    }\n}\n</code></pre> </li></ol>\n<h4><a id=\"4main_568\"></a>4、理解main方法</h4>\n<ol><li>main()方法是程序的入口</li><li>main()方法也是一个普通的静态方法</li><li>main()方法可以作为我们与控制台交互的方式</li></ol>\n<h4><a id=\"5_574\"></a>5、代码块</h4>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//属性</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> desc<span class=\"token operator\">=</span><span class=\"token string\">\"我是一个人\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//构造器</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//非静态代码块</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"block\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//静态代码块</span>\n    <span class=\"token keyword\">static</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"static block\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吃饭\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Person[name=\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\",age=\"</span><span class=\"token operator\">+</span>age<span class=\"token operator\">+</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>        \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol><li> <p>代码块用于初始化类和对象，如果有修饰的话只能用static，加上static为静态代码块，不加为非静态</p> </li><li> <p>静态代码块：</p> <p>①内部可以有输出语句</p> <p>②随着类的加载而执行，而且只执行一次</p> <p>③如果一个类中使用了多个静态代码块，则按照声明的先后顺序执行</p> <p>④静态代码块的执行优先于非静态代码块的执行</p> <p>⑤只能调用静态的属性或方法</p> </li><li> <p>非静态代码块</p> <p>①内部可以有输出语句</p> <p>②随着对象的创建而执行，每创建一个对象就执行一次，可以在创建对象时对对象的属性进行初始化</p> <p>③如果一个类中使用了多个非静态代码块，则按照声明的先后顺序执行</p> <p>④可以调用静态和非静态的属性或方法</p> </li><li> <p>给属性赋值的顺序</p> <p>①默认初始化</p> <p>②显式初始化/在代码块中赋值（看谁写在前面）</p> <p>③构造器中初始化</p> <p>④创建对象，通过对象.属性或者对象.方法赋值</p> </li><li> <p>代码块的练习值得看一看：P332</p> </li></ol>\n<h4><a id=\"6final_645\"></a>6、final关键字</h4>\n<ol><li> <p>final修饰类：此类不能被其他类所继承，比如：String、System、StringBuffer</p> </li><li> <p>final修饰方法：此方法不能再被重写，比如：Object类中的getClass()</p> </li><li> <p>static final用来修饰属性：全局常量</p> </li><li> <p>final修饰变量：此时的变量就称为是一个常量</p> <p>final修饰属性：可以考虑赋值的位置：显式初始化，代码块中初始化、构造器中初始化</p> <p>final修饰局部变量：尤其是用final修饰形参时，表明此形参是一个常量，当调用此方法时，给常量形参赋实参，一旦赋值就只能在方法体内使用此形参，但不能重新赋值</p> </li></ol>\n<h3><a id=\"Day_14P339P366_659\"></a>Day 14（P339-P366）</h3>\n<p>P340后面改单例模式的权限修饰符，private改public有必要听一下</p>\n<h4><a id=\"1abstract_663\"></a>1、abstract</h4>\n<h5><a id=\"abstract_665\"></a>abstract介绍</h5>\n<ol><li> <p>可以用于修饰：类（抽象类）、方法（抽象方法）</p> </li><li> <p>abstract修饰类：</p> <p>①此类不能实例化（也就是不能创建这个类的对象</p> <p>②虽然自己不能实例化，但是子类会调用父类的构造器，所以抽象类中一定有构造器</p> </li><li> <p>abstract修饰方法</p> <p>① 抽象方法只有方法的声明没有方法体，所在的类一定是抽象类。因为如果类不是抽象的，那这个类就可以造对象，可以造对象就可以调用。反之抽象类中可以没有抽象方法。</p> <p>② 若子类重写了子类重写了父类所有的抽象方法才能实例化，如果没有全部重写，那么子类也是抽象类，也需要用abstract修饰</p> <p>③ abstract不能用来修饰私有方法、静态方法、final关键字修饰的方法、final关键字修饰的类</p> <p>因为如果两个方法都是static，不认为两个方法是重写或者覆盖，所以abstract用来修饰静态方法，就无法重写</p> </li></ol>\n<h5><a id=\"_685\"></a>抽象的应用</h5>\n<p>模板方法设计模式。在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤在父类中写好，某些易变的和不确定的部分可以抽象出来给子类实现。</p>\n<h5><a id=\"_689\"></a>抽象类的匿名子类对象</h5>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//匿名对象</span>\n    <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//非匿名类的非匿名对象</span>\n    son <span class=\"token class-name\">John</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">John</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//匿名子类对象</span>\n    father f<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>father i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//普通方法</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>father f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吃饭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//父类</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> father<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//抽象方法不能有方法体</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>father i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//子类</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> son <span class=\"token keyword\">extends</span> father<span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//继承</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上学\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>father i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\" age:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"2_736\"></a>2、接口</h4>\n<h5><a id=\"_738\"></a>接口介绍</h5>\n<ol><li> <p>接口使用Interface来定义，和类是并列关系</p> </li><li> <p>接口的定义以及接口中的成员：</p> <p>JDK7及以前：只能定义全局常量和抽象方法</p>\n<ul><li>全局常量：都是用public static final定义的，可以省略不写</li><li>抽象方法：public abstract</li></ul> <p>JDK8：除了全局常量和抽象方法，还可以定义静态方法和默认方法</p> </li><li> <p>接口中不能定义构造器，意味着接口不可以实例化，通过类去实现（implements）接口。</p> <p>如果类覆盖了接口中所有的抽象方法，则可以创造实例；</p> <p>如果类没有覆盖接口中所有的抽象方法，则该类仍为抽象类。</p> </li><li> <p>Java类可以实现多个接口——弥补了单继承性的缺陷</p> <p>class AA extends BB implements CC,DD,EE</p> </li><li> <p>接口和接口之间可以继承，且可以多继承。接口的使用体现了多态性。</p> </li><li> <p>接口是一种规范，面向接口编程。</p> </li><li> <p>面试题：抽象类和接口有哪些异同？</p> </li></ol>\n<h5><a id=\"_767\"></a>接口应用</h5>\n<ul><li>代理模式</li></ul>\n<p>代理设计就是为其他对象提供一张代理以控制对这个对象的访问</p>\n<p>应用场景：安全代理、远程代理、延迟加载</p>\n<p>分类：静态代理、动态代理</p>\n<ul><li>工厂模式</li></ul>\n<p>实现创建者和调用者的分离</p>\n<h5><a id=\"_781\"></a>接口笔试题</h5>\n<ol><li> <p>排错</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>问题：编译期不知道是要输出哪个x</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这个调用的是父类中的</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这个调用的是接口中的</span>\n</code></pre> </li><li> <p>排错</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Playable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bounceable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Rollable</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Playable</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Bounceable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Ball</span> ball<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Ball</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PingPong\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Ball</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Rollable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Ball</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        ball<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Ball</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Football\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ball<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>Ball中的play()方法重写可以认为同时重写了Playable和Bounceable的play方法</li><li>Ball ball是public final的，不能再修改，所以ball=new Ball(“Football”)是错误的</li></ul> </li></ol>\n<h5><a id=\"java8_839\"></a>java8中接口新特性</h5>\n<p>JDK8：除了全局常量和抽象方法，还可以定义静态方法和默认方法（default关键字修饰）</p>\n<ol><li>接口中定义的静态方法只能通过接口来调用，接口.方法。</li><li>通过实现类的对象，可以调用接口中的默认方法，对象.方法。如果实现类重写了接口中的默认方法，调用时仍然调用的是重写以后的方法</li><li>如果子类（或实现类）继承的父类和实现的接口中声明了同名同参数的方法，子类在没有重写此方法的情况下调用的是父类中的方法——类优先原则</li><li>如果实现类实现了多个接口，而这个多个接口中定义了同名同参数的默认方法，在实现类没有重写方法的情况下会报”接口冲突“错误，此时需要重写。</li><li>如何在子类（或者实现类）调用父类、接口中被重写的方法，接口.super.方法</li></ol>\n<h5><a id=\"_849\"></a>抽象类和接口的异同</h5>\n<p>相同点：不能实例化，都可以包含抽象方法</p>\n<p>不同点：</p>\n<ol><li>把抽象类和接口（java7、java8)的定义、内部结构解释说明</li><li>类：单继承性，接口：多继承性，</li></ol>\n<h4><a id=\"3_858\"></a>3、内部类</h4>\n<ol><li> <p>Java允许将一个类A声明在另一个类B中，A为内部类，B为外部类</p> </li><li> <p>内部类的分类：成员内部类、局部内部类（方法内，代码块内，构造器内）</p> </li><li> <p>成员内部类</p>\n<ul><li>作为外部类的成员：可以调用外部类的结构，可以被static修饰</li><li>作为一个类：可以定义属性、方法、构造器，可以用final、abstract修饰，可以被继承</li></ul> </li><li> <p>需要关注的问题：</p>\n<ul><li> <p>如何实例化成员内部类的对象：外部类Person，静态内部类Brain，非静态内部类Lungs</p> <p>静态成员内部类：new 外部类.内部类()</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">Person<span class=\"token punctuation\">.</span>Brain</span> brain<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person<span class=\"token punctuation\">.</span>Brain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>非静态成员内部类：先造对象，对象.new 内部类()</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">Person</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token namespace\">p<span class=\"token punctuation\">.</span></span>Lungs</span> lungs<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Lungs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>如何在成员内部类中区分调用外部类的结构</p> <p>形参直接调，所在类的用this.结构，外部类的用外部类.this.结构</p> </li><li> <p>成员内部类和局部内部类在编译以后都会生成字节码文件</p> <p>成员内部类：外部类$内部类名.class</p> <p>局部内部类：外部类$数字 内部类名.class</p> </li><li> <p>在局部内部类的方法中，如果调用局部内部类所在的方法中的局部变量，该局部变量必须用final关键字修饰(JAVA8之后可以不写出来，但仍然还是final的)</p> </li></ul> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">class</span> AA<span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//局部内部类</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//局部内部类的方法</span>\n            num<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//试图修改会报错</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用局部内部类所在的方法中的局部变量</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li> <p>开发中局部内部类的使用</p> <p>常用的局部内部类：</p> <pre><code class=\"prism language-java\"><span class=\"token comment\">//方式一</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Comparable</span> <span class=\"token function\">getCompareble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComparable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//局部内部类</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyComparable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//方式二</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Comparable</span> <span class=\"token function\">getCompareble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">CompareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li></ul> </li></ol>\n<h4><a id=\"4_940\"></a>4、关键字总结</h4>\n<p>static可以用来修饰：属性、方法、代码块、内部类</p>\n<p>final关键字可以用来修饰：类、方法、变量（属性和局部变量）</p>\n<p>abstract可以用于修饰：类、方法</p>\n<h2><a id=\"7__948\"></a>第7章 异常处理</h2>\n<h3><a id=\"Day_15P367P385_950\"></a>Day 15（P367-P385）</h3>\n<h4><a id=\"1_952\"></a>1、异常概述与异常体系结构</h4>\n<p>JAVA.lang.Throwable：</p>\n<ol><li>Error：JAVA虚拟机无法解决的严重问题</li><li>Exception：其他因变成错误或偶然的外在因素导致的一般性问题</li></ol>\n<ul><li>编译时异常 \n  <ul><li>IOException</li><li>ClassNotFoundException</li></ul> </li><li>运行时异常 \n  <ul><li>NullPointerException</li><li>ArrayIndexOutOfBoundsException</li></ul> </li></ul>\n<p>面试题</p>\n<ol><li> <p>常见的异常有哪些？举例说明</p> </li><li> <p>final/finally/finalize</p> </li><li> <p>throw/throws</p> <p>throw：抛出一个异常类的对象，生成异常对象的过程，声明在方法体内</p> <p>throws：属于异常处理的方式，声明在方法体处</p> </li><li> <p>String / StringBuffer / StringBuilder</p> </li><li> <p>ArrayList / LinkedList</p> </li><li> <p>HashMap / LinkedHashMap</p> </li><li> <p>重写/重载</p> </li><li> <p>==/equals</p> </li><li> <p>抽象类 / 接口</p> </li><li> <p>sleep() / wait()</p> </li></ol>\n<h4><a id=\"2_992\"></a>2、常见异常</h4>\n<ol><li> <p>NullPointerException：空指针异常</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//空指针异常</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>ArrayIndexOutOfBoundsException：数组角标越界</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//数组角标越界</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>ClassCastException类型转换异常</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Object</span> obj<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>obj<span class=\"token punctuation\">;</span><span class=\"token comment\">//类型转换异常</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>NumberFormatException数值转换异常</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">String</span> s<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token class-name\">Intger</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//数值转换异常</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>InputMismatchException输入类型异常</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Scanner</span> scanner<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> score<span class=\"token operator\">=</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//输入“abc”，输入类型错误</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>ArithmeticException算数异常</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//算数异常</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li></ol>\n<h4><a id=\"3trycatchfinally_1050\"></a>3、try-catch-finally</h4>\n<h5><a id=\"_1052\"></a>异常的处理：抓抛模型</h5>\n<ol><li>“抛”：程序在正常执行的过程中，一旦出现异常，就会在异常代码出生成一个对应异常类的对象并将此对象抛出，其后的代码就不再执行。</li><li>“抓”：可以理解为异常处理的方式：①try-catch-finally ②throws</li></ol>\n<h5><a id=\"trycatchfinally_1057\"></a>try-catch-finally</h5>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//可能出现异常的代码</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型<span class=\"token number\">1</span> 变量名<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//处理异常的方式1</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型<span class=\"token number\">2</span> 变量名<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//处理异常的方式2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//一定会执行的代码</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">String</span> s<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token class-name\">Intger</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----1-----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NumberFormatException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出现数值转换异常\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//出现异常时采取的操作</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----2-----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//1不会输出，2会输出，因为一旦出现异常下面的代码就不再执行</span>\n</code></pre>\n<ol><li> <p>finally是可选的，可以不写。</p> </li><li> <p>使用try将可能出现异常的代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型去catch中进行匹配，一旦try中的对象匹配到某一个catch的时候就会进入异常的处理，一旦处理完成，如果没有写finally，就跳出当前的try-catch结构，继续执行其后的代码。</p> </li><li> <p>对异常的常用操作：①getMessage()返回String；②printStackTrace()</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">String</span> s<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token class-name\">Intger</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NumberFormatException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//输出For input string: \"abc\"</span>\n         e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//非常具体的异常的位置和信息</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>finally的使用：即使catch中也出现了异常，try和catch里面还有return语句，finally都会执行，就是不管怎样都一定会执行</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//算数异常</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发生异常了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出：</span>\n<span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>ArithmeticException</span><span class=\"token operator\">:</span> <span class=\"token operator\">/</span> by zero\nat <span class=\"token class-name\">ExceptionExer<span class=\"token punctuation\">.</span>ExceptionTest</span><span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExceptionTest</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\t\n发生异常了\n</code></pre> </li><li> <p>finally的使用场景：数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动回收的，我们需要自己手动的进行资源释放，此时的资源释放需要声明在finally中。</p> </li><li> <p>try-catch-finally结构可以嵌套</p> </li><li> <p>使用try-catch-finally处理编译时已成，使得程序在编译时不再报错，但运行时仍可能保持，相当于把编译时可能出现的异常延迟到运行时出现。一般不针对运行时异常使用try-catch-finally，针对编译时异常需要做处理。</p> </li></ol>\n<h4><a id=\"4throws_1129\"></a>4、throws</h4>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//main方法对异常进行处理</span>\n        <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//处理</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ArithmeticException</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//抛到main方法</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//算数异常</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>throws+异常类型写在方法的声明处，指明此方法执行时，可能会抛出的异常类型，一旦方法体执行时出现异常仍然会异常代码处生成一个异常类的对象，此对象满足throws后异常类型时就会被抛出，异常代码后续的代码就<strong>不再执行</strong>（和try-catch-finally的不同点）。</p>\n<h5><a id=\"_1148\"></a>方法重写的规则</h5>\n<p>子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p>\n<h5><a id=\"_1152\"></a>开发中异常处理的选择</h5>\n<ol><li>如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能用throws</li><li>执行的方法A中先后调用了其他方法，方法和方法之间又有递进关系，这几个方法用throws，A中用try-catch-finally</li></ol>\n<h4><a id=\"5throw_1157\"></a>5、手动抛出异常：throw</h4>\n<p>异常的产生：①自动生成 ②手动抛出</p>\n<h4><a id=\"6_1161\"></a>6、用户自定义异常类</h4>\n<ol><li>继承于现有的异常结构：RuntimeException、Exception</li><li>提供全局常量：serialVersionUID，序列版本号</li><li>提供重载的构造器</li></ol>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EcDef</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">33875164229948L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">EcDef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">EcDef</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"8__1196\"></a>第8章 多线程</h2>\n<h3><a id=\"Day_15_P406P427_1198\"></a>Day 15 （P406-P427）</h3>\n<p>正式的多线程从P415开始</p>\n<h4><a id=\"1_1202\"></a>1、程序、进程、线程</h4>\n<p><strong>程序</strong>：一段静态的代码，静态对象</p>\n<p><strong>进程</strong>：正在运行的一个程序，是一个动态的过程，有生命周期。进程作为资源分配的单位，系统在运行时会为每个进程分配内存区域。</p>\n<p><strong>线程</strong>：进程可以进一步细化为线程，同一个进程可以支持多个线程就叫多线程</p>\n<p>​ 线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-RzvwF1NH-1639482821185)(C:\\Users\\86187\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211126110036164.png)]</p>\n<p>每个线程各自有一套虚拟机栈和程序计数器</p>\n<p>每个进程各有一份方法区和堆</p>\n<p><strong>单核CPU和多核CPU</strong>：一个JAVA应用程序至少有三个线程，main主线程，gc()垃圾回收线程，异常处理线程</p>\n<p><strong>并行和并发</strong>：并行——多个CPU同时执行多个任务</p>\n<p>​ 并发——一个CPU同时执行多个任务</p>\n<p><strong>多线程程序的优点：</strong></p>\n<p>1、提高程序的响应。对图形化界面更有意义，可增强用户体验</p>\n<p>2、提高计算机系统CPU的利用率</p>\n<p>3、改善程序结构，进程分为线程独立运行，有利于理解和修改</p>\n<h4><a id=\"2_1232\"></a>2、线程的创建和使用</h4>\n<h5><a id=\"Thread_1234\"></a>方式一：继承于Thread类</h5>\n<p>1、创建Thread类的子类</p>\n<p>2、重写Thread类的方法</p>\n<p>3、创建Thread类的子类对象</p>\n<p>4、通过此对象调用start()</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">MyThread</span> t<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//①启动当前线程 ②调用当前线程的run()</span>\n    <span class=\"token comment\">//匿名子类</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//执行的先后顺序并不会按照写的先后顺序，两个线程是并行的</span>\n</code></pre>\n<p>tips:</p>\n<ol><li>不能通过run()的方式执行线程，用run()只是普通的调用方法</li><li>如果还要再启动一个线程，就再新造一个MyThread对象，再start()</li></ol>\n<p>Thread里的常用方法：</p>\n<ol><li>start()：①启动当前线程 ②调用当前线程的run()</li><li>run()：通常需要重写此方法</li><li>currentThread()：静态方法，返回执行当前代码的线程</li><li>getName()：获取当前线程的名字</li><li>setName()：设置当前线程的名字</li><li>yield()：释放当前CPU的执行权</li><li>join()：在线程A中调用B的该方法，线程A进入阻塞状态直到线程B执行完之后线程A才继续执行</li><li>sleep()：让当前线程强制阻塞</li></ol>\n<p>线程的优先级：</p>\n<ol><li>MAX——10，MIN——1，NORM——5（默认的优先级）</li><li>涉及的方法：getPriority()——返回线程的优先值，setPriority()——改变线程的优先级</li><li>高优先级的线程不一定就先执行，只是大概率先执行</li></ol>\n<h5><a id=\"Runnable_1288\"></a>方式二：实现Runnable接口</h5>\n<ol><li>创建一个实现Runnable接口的类</li><li>实现类实现Runnable中的抽象方法：run()方法</li><li>创建实现类的对象</li><li>将对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li><li>通过此对象调用start()方法</li></ol>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRun</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//创建一个实现Runnable接口的类</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//实现类实现Runnable中的抽象方法：run()方法</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">MyRun</span> r<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyRun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//创建实现类的对象</span>\n    <span class=\"token class-name\">Thread</span> t<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span>\n    t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//通过此对象调用start()方法</span>\n    \n    <span class=\"token comment\">//再启动一个线程</span>\n     <span class=\"token class-name\">Thread</span> t1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"_1316\"></a>两种方式的对比</h5>\n<ol><li>Runnable没有单继承性的局限性，更适合多个线程共享数据的情况</li><li>相同点：都需要重写run并且将线程要执行的逻辑声明在run()中</li></ol>\n<h3><a id=\"Day_16P428P447_1321\"></a>Day 16（P428-P447）</h3>\n<h4><a id=\"3_1323\"></a>3、线程的生命周期</h4>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ISKMrQs3-1639482821187)(C:\\Users\\86187\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211201152708151.png)]</p>\n<h4><a id=\"4_1327\"></a>4、线程的同步</h4>\n<p>线程安全问题：</p>\n<ul><li>多个线程执行的不确定性引起执行结果的不稳定性</li><li>多个线程对数据的共享会造成操作的不完整性，会破坏数据</li></ul>\n<p>解决：当一个线程A在操作共享数据的时候其他线程不能参与，直到线程A操作完毕，也就是同步机制。</p>\n<h5><a id=\"_1336\"></a>方式一：同步代码块</h5>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>同步监视器<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//需要被同步的代码</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol><li>操作共享数据的代码即为需要被同步的代码</li><li>共享数据：多个线程共同操作的变量</li><li>同步监视器，俗称锁。任何类的对象都可以充当锁，多个线程必须共用同一把锁。</li><li>在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器；而在继承Thread类创建多线程的方式中，可以考虑使用当前类</li></ol>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//同步代码块+实现Thread类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> ticket<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> obj<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyThread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//类只会加载一次</span>\n        <span class=\"token comment\">//synchronized (this){//实现Runnable接口创建多线程的方式用this</span>\n        <span class=\"token comment\">//synchronized(obj){//造了三个对象，有三把锁，所以不能保证线程安全</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>tikect<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"买票，票号为：\"</span><span class=\"token operator\">+</span>ticket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                ticket<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        \t<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">MyThread</span> t1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">MyThread</span> t2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">MyThread</span> t3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"_1376\"></a>方式二：同步方法</h5>\n<p>如果操作共享数据的代码完整的声明在一个方法中，不妨将此方法声明为同步的</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//同步方法+实现Runnable</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRun</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> ticket<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//这里的同步监视器就是this</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>tikect<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"买票，票号为：\"</span><span class=\"token operator\">+</span>ticket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ticket<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">MyRun</span> r<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyRun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token class-name\">Thread</span> t1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Thread</span> t2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Thread</span> t3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//同步方法+实现Thread类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> ticket<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//必须是静态的,这里的同步监视器是当前类</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>tikect<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>currentThread<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"买票，票号为：\"</span><span class=\"token operator\">+</span>ticket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ticket<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"_1421\"></a>同步方法总结</h5>\n<ul><li> <p>同步代码块</p>\n<ul><li> <p>继承Thread类：用当前类当作同步监视器（MyThread.class）</p> </li><li> <p>实现Runnable接口：用this当同步监视器</p> </li></ul> </li><li> <p>同步方法</p>\n<ul><li> <p>继承Thread类：直接用synchronized修饰方法，this当同步监视器</p> </li><li> <p>实现Runnable接口：需要用synchronized static修饰方法，当前类当同步监视器</p> </li></ul> </li></ul>\n<h5><a id=\"_1435\"></a>线程安全的单例模式：懒汉式</h5>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Bank</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bank</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Bank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Bank</span> instance<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//方法1:同步方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">Bank</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//加上synchronized</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>instance<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Bank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//方法2:同步代码块（效率稍差）</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Bank</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bank</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>instance<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Bank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//效率更高</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Bank</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bank</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>instance<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Bank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"_1473\"></a>死锁</h5>\n<p>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃，造成了线程的死锁，没有异常没有提示，但所有线程都在阻塞状态。</p>\n<p>解决：①专门的算法、原则；②尽量减少同步资源的定义；③尽量避免嵌套同步</p>\n<h5><a id=\"Lock_1479\"></a>Lock（锁）</h5>\n<p>从JDK5.0开始，JAVA提供了更强大的线程同步机制——通过显式定义同步锁来实现同步，同步锁使用Lock对象充当。java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRun</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> ticket<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//1.实例化ReentrantLock</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ReentrantLock</span> lock<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//2.调用lock()方法</span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ticket<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"票号为：\"</span><span class=\"token operator\">+</span>ticket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                ticket<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//3.调用解锁的方法</span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//如果是继承Thread方式，private static ReentrantLock lock=new ReentrantLock(true)要加static</span>\n</code></pre>\n<p>面试题：</p>\n<p>1、synchronized和lock的不同：</p>\n<ol><li> <p>Lock是显式锁(手动开启和关闭锁，别忘记关闭锁)，synchronized是隐式锁，出了作用域自动释放</p> </li><li> <p>Lock只有代码块锁，synchronized有代码块锁和方法锁</p> </li><li> <p>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好，并且具有更好的扩展性(提供更多的子类)</p> </li></ol>\n<p>2、优先使用顺序:</p>\n<p>Lock &gt;同步代码块(已经进入了方法体，分配了相应资源) &gt;同步方法(在方法体之外）</p>\n<p>3、解决线程安全问题</p>\n<p>synchronized（分为同步代码块和同步方法）和锁</p>\n<h4><a id=\"5_1528\"></a>5、线程的通信</h4>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRun</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//*********</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"当前数字：\"</span><span class=\"token operator\">+</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//*********</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li> <p>涉及的三个方法：</p>\n<ol><li> <p>wait()：强制当前线程等待，直到某个其他线程在同一个对象上调用notify()或notifyAll()</p> </li><li> <p>notify()：唤醒wait中的一个线程，如果有多个线程被阻塞，则唤醒优先级高的那个</p> </li><li> <p>notifuAll()：唤醒所有wait中的线程</p> </li></ol> </li><li> <p>说明：</p>\n<ol><li>三个方法必须使用在同步代码块或者同步方法中</li><li>三个方法的调用者必须是同步监视器，否则会出现IllegalMonitorStateException异常</li><li>三个方法声明在Object类中</li></ol> </li><li> <p>面试题：sleep()和wait()的异同</p> <p>相同点：一旦执行方法，都可以使当前线程进入阻塞状态</p> <p>不同点：</p>\n<ol><li>声明位置不同，sleep()声明在Thread类中，wait()声明在Object类中</li><li>调用的要求不同，sleep()可以在任何需要的场景下调用，wait()必须在同步代码块或者同步方法中</li><li>关于<strong>是否释放同步监视器</strong>，如果两个方法都使用在同步代码块或者同步方法中，wait()会释放同步监视器</li></ol> </li></ul>\n<h5><a id=\"_1582\"></a>经典例题:生产者/消费者问题</h5>\n<p>ps:建议多看这个视频加深理解P443</p>\n<p>●生产者(Productor)将产品交给店员(Clerk),而消费者(Customer)从店员处取走产品，店员一次只能持有固定数量的产品(比如:20)，如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产:如果店中没有产品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</p>\n<p>●这里可能出现两个问题:</p>\n<p>➢生产者比消费者快时，消费者会漏掉一些数据没有取到。</p>\n<p>➢消费者比生产者快时，消费者会取相同的数据。</p>\n<p>我理解的线程安全问题：两个线程分别生产和消费，但是操作了共同数据那就是产品，所以会出现线程安全问题，就是必须规定一段时间内只能生产或者只能消费</p>\n<h4><a id=\"6JDK50_1596\"></a>6、JDK5.0新增线程创建方式</h4>\n<h5><a id=\"Callable_1598\"></a>实现Callable接口</h5>\n<p>1、与使用Runnable相比， Callable功能更强大些</p>\n<ul><li>相比run方法， 可以有返回值</li><li>方法可以抛出异常</li><li>支持泛型的返回值</li><li>需要借助FutureTask类， 比如获取返回结果</li></ul>\n<p>2、Future接口</p>\n<ul><li>可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。</li><li>FutrueTask是Futrue接口的唯一的实现类</li><li>FutureTask 同时实现了Runnable, Future接口。它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//1.创建一个实现Callable类的实现类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCall</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//2.实现call方法，将此线程需要执行的操作声明在call方法中</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//3.创建Callable实现类的对象</span>\n    <span class=\"token class-name\">MyCall</span> myCall<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//4.将Callable实现类的对象传递到FutureTask构造器中，创建FutureTask的对象</span>\n    <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> myTask<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>myCall<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//可以使用泛型</span>\n    <span class=\"token comment\">//5.将FutureTask的对象传递到Thread构造器中并调用start方法</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>myTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//启动线程还是要用start()方法</span>\n    <span class=\"token comment\">//6.get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n        myTask<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//可以得到返回值1</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExecutionException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"_1640\"></a>使用线程池</h5>\n<p>开发中都是用线程池，好处：</p>\n<ul><li>减少创建新线程的时间，提高响应速度</li><li>重复利用线程池中的线程降低资源消耗</li><li>便于线程管理</li></ul>\n<p>1、JDK 5.0起提供了线程池相关API: ExecutorService 和Executors</p>\n<p>2、ExecutorService:真正的线程池接口。常见子类ThreadPoolExecutor</p>\n<ul><li>void execute(Runnable command):执行任务/命令，没有返回值，一般用来执行Runnable</li><li> Future submit(Callable task); 执行任务，有返回值，一般又来执行Callable</li><li>void shutdown():关闭连接池</li></ul>\n<p>3、Executors: 工具类、线程池的工厂类，用于创建并返回不同类型的线程池 ➢Exefutors newCachedThreadPool():创建一个可根据需要创建新线程的线程池 ➢Executors .newFixedThreadPool(n);创建一个可重用固定线程数的线程池</p>\n<ul><li>Executors. newSingleThreadExecutor): 创建一个只有一个线程的线程池</li><li>Executors newScheduledThreadPool(n): 创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//1.提供指定数量的线程池</span>\n    <span class=\"token class-name\">ExecutorService</span> service<span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//2.执行指定的线程的操作，需要提供实现Runnable接口或者Callable接口实现类的对象</span>\n    service<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">NumberThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//适用于Runnable</span>\n    service<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//适用于Callable</span>\n    service<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3.关闭连接池</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NumberThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCall</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"7_1686\"></a>7、总结</h4>\n<p>1、创建多线程有四种方式：</p>\n<ul><li>继承Thread类</li><li>实现Runnable接口</li><li>实现Callable接口</li><li>使用线程池</li></ul>\n<p>2、同步的方式：</p>\n<ul><li> <p>同步代码块</p>\n<ul><li> <p>继承Thread类：用当前类当作同步监视器（MyThread.class）</p> </li><li> <p>实现Runnable接口：用this当同步监视器</p> </li></ul> </li><li> <p>同步方法</p>\n<ul><li>继承Thread类：直接用synchronized修饰方法，this当同步监视器</li><li>实现Runnable接口：需要用synchronized static修饰方法，当前类当同步监视器</li></ul> </li><li> <p>定义同步锁</p> </li></ul>\n<p>3、释放锁的操作</p>\n<ul><li>当前线程的同步方法、同步代码块执行结束。</li><li>当前线程在同步代码块、同步方法中遇到break、returm终止了该代码块、该方法的继续执行。</li><li>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception,导致异常结束。</li><li>当前线程在同步代码块、同步方法中执行了线程对象的wait()方法，当前线程暂停，并释放锁。</li></ul>\n<p>4、不会释放锁的操作</p>\n<ul><li>线程执行同步代码块或同步方法时，程序调用Thread sleep()、 Thread. yield()方法暂停当前线程的执行</li><li>线程执行同步代码块时，其他线程调用了该线程的suspend()方法（挂起）将该线程挂起，该线程不会释放锁(同步监视器)</li></ul>\n<p>ps:应尽量避免使用suspend()和resume()来控制线程</p>\n<h2><a id=\"9_JAVA_1722\"></a>第9章 JAVA常用类</h2>\n<h3><a id=\"1_1724\"></a>1、字符串相关的类</h3>\n<h4><a id=\"String_1726\"></a>String类及常用方法</h4>\n<ol><li> <p>String定义了final char[] value用于存储字符串数据，代表不可变的字符序列。</p>\n<ul><li>对字符串重新赋值时，需要重写指定内存区赋值，不能使用原有的value进行赋值</li><li>当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值</li></ul> </li><li> <p>String实现了Serializable接口：表示字符串是支持序列化的。实现了Comparable接口，表示String可以比较大小</p> </li><li> <p>通过字面量的方式给一个字符串赋值，此时字符串值声明在字符串常量池中，字符串常量池中是不会存储相同内容的字符串的</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">String</span> st1<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//字面量，存储在字符串常量池中，目的是共享</span>\n<span class=\"token class-name\">String</span> st2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//字符串非常量对象存储在堆中</span>\n</code></pre> </li><li> <p>面试题：<code>String s=new String(\"abc\")</code>方式创建对象，在内存中创建了几个对象？</p> <p>两个，一个是堆空间中new的结构，另一个是<code>char[]</code>对应常量池中的数据“abc”</p> </li><li> <p>不同拼接操作的对比</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">String</span> s1<span class=\"token operator\">=</span><span class=\"token string\">\"leet\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s2<span class=\"token operator\">=</span><span class=\"token string\">\"Code\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">String</span> s3<span class=\"token operator\">=</span><span class=\"token string\">\"leetCode\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s4<span class=\"token operator\">=</span><span class=\"token string\">\"leet\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"Code\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s5<span class=\"token operator\">=</span>s1<span class=\"token operator\">+</span><span class=\"token string\">\"Code\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s6<span class=\"token operator\">=</span><span class=\"token string\">\"leet\"</span><span class=\"token operator\">+</span>s2<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s7<span class=\"token operator\">=</span>s1<span class=\"token operator\">+</span>s2<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">String</span> s8<span class=\"token operator\">=</span>s5<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回值得到的s8使用的是常量池中的字符串</span>\n\ns3<span class=\"token operator\">==</span>s4<span class=\"token punctuation\">;</span><span class=\"token comment\">//true，都是在常量池中</span>\ns3<span class=\"token operator\">==</span>s5<span class=\"token punctuation\">;</span><span class=\"token comment\">//false，只要有变量参与，都在堆中</span>\ns3<span class=\"token operator\">==</span>s6<span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\ns3<span class=\"token operator\">==</span>s7<span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n</code></pre> <p>结论：</p>\n<ol><li>常量与常量的拼接结果在常量池，且常量池中不会存在相同容量的常量</li><li>只要其中有一个是变量，结果就在堆中</li></ol> </li><li> <p>JVM中涉及字符串的内存结构</p> <p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Ubr2uZ5g-1639482821188)(C:\\Users\\86187\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211204204821092.png)]</p> </li><li> <p>String中的方法</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//转小写</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//转大写，字符串本身不变，需要新建字符串接收</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//去除收尾空格</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//和equals类似，忽略大小写</span>\n<span class=\"token keyword\">int</span> <span class=\"token class-name\">CompareTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//比较两个字符串的大小，负数则当前字符串小</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">subString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//是否以指定的字符串结束</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> toffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//指定索引位置开始的子字符串是否以指定前缀开始</span>\n</code></pre> </li><li> <p>String和其他基本数据类型和包装类的转换</p> <p>String—&gt;基本数据类型、包装类：调用包装类的静态方法parseXxx(str)</p> <p>基本数据类型、包装类—&gt;String：调用String重载的valueOf(xxx)</p> </li><li> <p>String和char[]的转换</p> <p>String—&gt;char[]：str.toCharArray</p> <p>char[]—&gt;String：调用String的构造器</p> </li><li> <p>String和byte[]的转换</p> <p>String—&gt;byte[]：调用String的getBytes()方法</p> <p>byte[]—&gt;String：调用String的构造器</p> </li><li> <pre><code class=\"prism language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> s1<span class=\"token operator\">=</span><span class=\"token string\">\"leet\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s2<span class=\"token operator\">=</span><span class=\"token string\">\"Code\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s3<span class=\"token operator\">=</span><span class=\"token string\">\"leetCode\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s4<span class=\"token operator\">=</span>s1<span class=\"token operator\">+</span><span class=\"token string\">\"Code\"</span><span class=\"token punctuation\">;</span>\ns3<span class=\"token operator\">==</span>s4<span class=\"token punctuation\">;</span><span class=\"token comment\">//true,因为s1是常量，操作在常量池中</span>\n</code></pre> </li></ol>\n<h4><a id=\"StringBufferStringBuilder_1818\"></a>StringBuffer/StringBuilder</h4>\n<ol><li> <p>String、StringBuffer和StringBuilder的区别？</p> <p>String：不可变的序列，底层使用char[]存储</p> <p>StringBuilder：可变的序列，线程安全，效率稍低，底层使用char[]存储</p> <p>StringBuilder：可变的序列，线程不安全，效率稍高，底层使用char[]存储</p> <p>效率：StringBuilder &gt; StringBuilder &gt; String</p> <p>String-----&gt;StringBuffer和StringBuilder:调用StringBuffer和StringBuilder的构造器</p> <p>StringBuffer和StringBuilder-----&gt;String:调用String的构造器</p> </li><li> <p>源码分析</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">String</span> str<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//new char[0]</span>\n<span class=\"token class-name\">String</span> str<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//new char['a','b','c']</span>\n<span class=\"token class-name\">StringBuffer</span> sb<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//char[] value=new char[16],底层造了一个长度为16的数组</span>\n<span class=\"token class-name\">StringBuffer</span> sb1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//char[] value=new char[\"abc\".length()+16];</span>\n问题<span class=\"token number\">1</span>：<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sb1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//输出3而不是19</span>\n问题<span class=\"token number\">2</span>：如果要添加的数据底层数组撑不下了，默认情况下会扩容为原来容量的<span class=\"token number\">2</span>倍<span class=\"token operator\">+</span><span class=\"token number\">2</span>，同时将原来数组的元素赋值到新的数组中\n</code></pre> </li></ol>\n<h3><a id=\"2JDK8API_1845\"></a>2、JDK8之前的日期时间API</h3>\n<h4><a id=\"System_1847\"></a>System静态方法</h4>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差，时间戳</span>\n</code></pre>\n<h4><a id=\"Date_1853\"></a>Date类</h4>\n<p>1、java.util.Date类</p>\n<p>表示特定的瞬间，精确到毫秒</p>\n<ul><li>构造器</li></ul>\n<p>Date():使用无参构造器创建的对象可以获取本地当前时间。</p>\n<p>Date(long date)：创建指定毫秒数的对象</p>\n<ul><li>常用方法</li></ul>\n<p>getTime():返回自1970 年1月 1 日 00:00:00 GMT 以来此Date对象表示的毫秒数。</p>\n<p>toString()：把Date 对象转换为以下形式的String: dow mon dd hh:mm:ss zzz yyy其中: dow 是一周中的某一天(Sun, Mon, Tue, Wed, Thu, Fri, Sat), zzz是时间标准</p>\n<p>其它很多方法都过时了</p>\n<p>2、 java.sql.Date类对应数据库中的日期类型的变量</p>\n<ul><li> <p>实例化：java.sql.Date date=new java.sql.Date();</p> </li><li> <p>将util.Date类转化为sql.Date类，sql.Date类是util.Date类的子类</p> </li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">Date</span> date<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">3253834753L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//多态</span>\n<span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>Date</span> date1<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">)</span> date<span class=\"token punctuation\">;</span><span class=\"token comment\">//强转</span>\n\n<span class=\"token class-name\">Date</span> date<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>Date</span> date1<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">)</span> date<span class=\"token punctuation\">;</span><span class=\"token comment\">//父类对象强转运行会报错</span>\n<span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>Date</span> date1<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"Calendar_1888\"></a>Calendar类</h4>\n<p>java.util.Calendar(日历)类</p>\n<p>Calendar是一个抽象基类，主用用于完成日期字段之间相互操作的功能。</p>\n<ul><li>获取Calendar实例的方法</li></ul>\n<p>使用Calendar.getInstance()方法</p>\n<p>调用它的子类GregorianCalenda的构造器</p>\n<p>●一个Calendar的实例是系统时间的抽象表示，通过get(int field)方法来取得想要的时间信息。比如YEAR、MONTH、DAY _OF WEEK、HOUR OF DAY、。MINUTE、SECOND</p>\n<p>➢public void set(int field,int value)</p>\n<p>➢public void add(int field,int amount)</p>\n<p>➢public final Date getTime()</p>\n<p>➢public final void setTime(Date date)</p>\n<p>➢获取月份时：一月是0，二月是1，以此类推，12月是11</p>\n<p>➢获取星期时：周日是1,周二是2，。。。。周六是7</p>\n<h4><a id=\"SimpleDateFormat_1914\"></a>SimpleDateFormat类</h4>\n<p>SimpleDateFormat的使用：排队日期Date类的格式化和解析，格式化：日期—&gt;字符串，解析：字符串—&gt;日期</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">SimpleDateFormat</span> simpleDateFormat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//输出Sun Dec 05 14:28:58 CST 2021</span>\n    <span class=\"token comment\">//格式化</span>\n    <span class=\"token class-name\">String</span> format <span class=\"token operator\">=</span> simpleDateFormat<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//输出21-12-5 下午2:28</span>\n    <span class=\"token comment\">//解析</span>\n    <span class=\"token class-name\">String</span> s<span class=\"token operator\">=</span><span class=\"token string\">\"21-12-5 下午2:31\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Date</span> parse <span class=\"token operator\">=</span> simpleDateFormat<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>parse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>练习题1：将字符串\"2020-09-08\"转换为java.sql.Date</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">String</span> s<span class=\"token operator\">=</span><span class=\"token string\">\"2020-09-08\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SimpleDateFormat</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Date</span> date1<span class=\"token operator\">=</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>Date</span> date2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">(</span>date1<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>练习题2：三天打鱼两天晒网，1990-01-01，2020-09-08打鱼还是晒网，其实就是求总天数</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParseException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">SimpleDateFormat</span> s1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Date</span> date1<span class=\"token operator\">=</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1999-01-01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Date</span> date2<span class=\"token operator\">=</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-09-08\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Long</span> day<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>date2<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>date1<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Long</span> res<span class=\"token operator\">=</span>day<span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"3JDK8API_1955\"></a>3、JDK8中新日期时间API</h3>\n<h4><a id=\"LocalDateLocalTimeLocalDateTime_1957\"></a>LocalDate/LocalTime/LocalDateTime</h4>\n<p>LocalDateTime最常用</p>\n<h4><a id=\"Instant_1961\"></a>Instant</h4>\n<p>时间线上的一个瞬时点</p>\n<h4><a id=\"DateTimeFormatter_1965\"></a>DateTimeFormatter</h4>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd hh:mm:ss\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h4><a id=\"_1971\"></a>其他类</h4>\n<h3><a id=\"4JAVA_1973\"></a>4、JAVA比较器</h3>\n<h4><a id=\"Comparable_1975\"></a>Comparable接口</h4>\n<p>自然排序</p>\n<h4><a id=\"Comparator_1979\"></a>Comparator接口</h4>\n<p>定制排序：重写compare(Object o1,Object o2)方法比较大小v</p>\n<h3><a id=\"5System_1983\"></a>5、System类</h3>\n<h3><a id=\"6Math_1985\"></a>6、Math类</h3>\n<h3><a id=\"7BigIntegerBigDecimal_1987\"></a>7、BigInteger与BigDecimal</h3>\n<p>BigInteger可以表示不可变的任意精度的整数</p>\n<p>要求数字精度比较高，会用到BigDecimal</p>\n<h2><a id=\"10__1993\"></a>第10章 枚举类&amp;注解</h2>\n<h3><a id=\"_1995\"></a>枚举类</h3>\n<h3><a id=\"1_1997\"></a>1、如何自定义枚举类</h3>\n<p>当一个类的对象只有有限确定个数时我们称此类为枚举类，当需要定义一组常量时强烈建议用枚举类</p>\n<p>JDK5.0之前，自定义枚举类</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//1.声明Season对象的属性：private final修饰</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> seasonName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> seasonDesc<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//2.私有化类的构造器，并给对象属性赋值</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> seasonName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> seasonDesc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>seasonName <span class=\"token operator\">=</span> seasonName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>seasonDesc <span class=\"token operator\">=</span> seasonDesc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//3.提供当前枚举类的多个对象：public static final</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Season</span> SPRING<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"春暖花开\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Season</span> SUMMER<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"夏天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"夏日炎炎\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Season</span> AUTUMN<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秋天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"秋高气爽\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Season</span> WINTER<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冬天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"冰天雪地\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"2enum_2021\"></a>2、如何使用关键字enum定义枚举类</h3>\n<p>JDK5.0之后，可以使用enum关键字定义枚举类</p>\n<p>默认继承于class java.lang.Enum</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season1</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">SPRING</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"春暖花开\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">SUMMER</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"夏天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"夏日炎炎\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">AUTUMN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秋天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"秋高气爽\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">WINTER</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冬天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"冰天雪地\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> seasonName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> seasonDesc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Season1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> seasonName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> seasonDesc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>seasonName <span class=\"token operator\">=</span> seasonName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>seasonDesc <span class=\"token operator\">=</span> seasonDesc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"3Enum_2043\"></a>3、Enum类的主要方法</h3>\n<p>values()方法: 返回枚举类型的对象数组，该方法可以很方便地遍历所有的枚举值</p>\n<p>valueOf(String str):可以把一个字符串转为对应的枚举类对象。 要求字符面串必须是枚举类对象的“名字”。如不是，会有运行时异常:llegalArgumentException.</p>\n<p>toString(): 返回当前枚举类对象常量的名称</p>\n<h3><a id=\"4_2051\"></a>4、实现接口的枚举类</h3>\n<ol><li> <p>在enum类中实现抽象方法，和一般类相同</p> </li><li> <p>每一个对象可以重写方法</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season1</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">SPRING</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"春暖花开\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">SUMMER</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"夏天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"夏日炎炎\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">AUTUMN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秋天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"秋高气爽\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">WINTER</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冬天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"冰天雪地\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> seasonName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> seasonDesc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Season1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> seasonName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> seasonDesc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>seasonName <span class=\"token operator\">=</span> seasonName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>seasonDesc <span class=\"token operator\">=</span> seasonDesc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li></ol>\n<h3><a id=\"_2096\"></a>注解</h3>\n<p>1、注解概述:P505</p>\n<p>2、常见的Annotation示例</p>\n<p>@Overide @Deprecated @SuppressWarnings</p>\n<p>3、自定义Annotation</p>\n<p>参照SuppressWarnings定义</p>\n<p>①注解声明为: @interface</p>\n<p>②内部定义成员，通常使用value表示</p>\n<p>③可以指定成员的默认值， 使用default定义</p>\n<p>④如果自定义注解没有成员，表明是一个标识作用。</p>\n<p>自定义注解必须使用反射才有意义</p>\n<p>4、JDK中的四种元注解</p>\n<p>用于修饰其他注解</p>\n<p><strong>Retention</strong>：指定所修饰的Annotation的生命周期：SOURCE/CLASS(默认行为)/RUNTIME</p>\n<p>只有声明为RUNTIME生命周期的注解才能通过反射获取</p>\n<p><strong>Target</strong>：用于指定被修饰的Annotation能用于修饰哪些程序元素</p>\n<p>------------以下出现频率较低</p>\n<p><strong>Documented</strong>：表示所修饰的注解在被javadoc解析时保留下来</p>\n<p><strong>Inherited</strong>：所修饰的注解具有继承性</p>\n<p>5、利用反射获取注解信息</p>\n<p>6、JDK8中注解的新特性：可重复注解、类型注解</p>\n<p><strong>可重复注解</strong>：</p>\n<p>① 在MyAnnotation上声明@Repeatable，成员值为MyAnnotation.class</p>\n<p>② MyAnnotation的Target和Retention等元注解必须和Annotations相同</p>\n<p><strong>类型注解</strong>：</p>\n<p>➢ElementType.TYPE_PARAMETER表示该注解能写在类型变量的声明语句中(如:泛型声明)</p>\n<p>➢ElementType.TYPE_USE表示该注解能写在使用类型的任何语句中。</p>\n<h2><a id=\"11_JAVA_2150\"></a>第11章 JAVA集合</h2>\n<h3><a id=\"1JAVA_2152\"></a>1、JAVA集合框架概述</h3>\n<p>Java集合可以分为两种体系：</p>\n<ul><li><strong>Collection接口</strong>：单列数组</li></ul>\n<p>List：元素有序、可重复的集合——ArrayList\\LinkedList\\Vector</p>\n<p>Set：元素无序、不可重复的集合——HashSet\\LinkedHashSet\\TreeSet</p>\n<ul><li><strong>Map接口</strong>：具有映射关系的“key-value”集合——<strong>HashMap</strong>\\LinkedHashMap\\TreeMap\\Hashtable\\Properties</li></ul>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-8WHDMCBP-1639482821189)(C:\\Users\\86187\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211208142527668.png)]</p>\n<h3><a id=\"2Collection_2166\"></a>2、Collection接口方法</h3>\n<ol><li> <p>contains()用的是equals方法，如果是String对象，重写过那就是比较内容，不然就是比较地址</p> </li><li> <p>retainAll相当于是求交集</p> </li><li> <p>hashCode()：求哈希值</p> </li><li> <p>toArray()：集合----&gt;数组</p> </li><li> <p>Arrays.asList()：数组-----&gt;集合</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> list1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//要用包装类</span>\n</code></pre> </li><li> <p>iterator()：返回iterator接口的实例，用于遍历集合元素</p> </li></ol>\n<h3><a id=\"3Iterator_2185\"></a>3、Iterator迭代器接口</h3>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">Collection</span> coll<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncoll<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncoll<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Iterator</span> iterator <span class=\"token operator\">=</span> coll<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//输出1</span>\n<span class=\"token punctuation\">}</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//迭代器也有remove方法</span>\n</code></pre>\n<p>jdk 5.0新增了foreach循环，用于遍历集合和数组</p>\n<h3><a id=\"4CollectionList_2200\"></a>4、Collection子接口一：List</h3>\n<p>面试题：ArrayList\\LinkedList\\Vector三者异同？</p>\n<p>相同：都实现了List接口，存储数据的特点相同</p>\n<p>不同：ArrayList——List接口的主要实现类，执行效率高，线程不安全，底层使用Object[]存储</p>\n<p>LinkedList——使用双向链表存储，对于频繁的插入删除操作效率比ArrayList高</p>\n<p>Vector——执行效率低，线程安全，底层使用Object[]</p>\n<h4><a id=\"ArrayList_2212\"></a>ArrayList源码分析</h4>\n<ol><li> <p>jdk 7情况下：</p> <p>ArrayList list = new ArrayList();//底层创建了长度是1e的bject[]数组eLementData</p> <p>list. add(123);//eLementData[e] = new Integer(123);</p> <p>list. add(11);//如果此次的添加导致底层eLementData数组容量不够，则扩容。</p> <p>默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。</p> <p>结论:建议开发中使用带参的构造器: ArrayList list = new Arraylist(int capacity)</p> </li><li> <p>jdk 8中ArrayList的变化:</p> <p>Arraylist list = new ArrayList();//底层Object[] elementData 初始化为{}.并没有创建长度</p> <p>list. add(123);//第一次调用add()时，底层才创建了长度10的数组</p> <p>后续的添加和扩容与jdk7无异</p> </li></ol>\n<h4><a id=\"LinkedList_2234\"></a>LinkedList源码分析</h4>\n<p>是双向链表</p>\n<h3><a id=\"5CollectionSet_2238\"></a>5、Collection子接口二：Set</h3>\n<ul><li> <p>HashSet：线程不安全，可以存储null值，底层是HashMap</p> </li><li> <p>LinkedHashSet：遍历数据是可以按照添加的顺序顺序遍历</p> </li><li> <p>TreeSet：可以按照添加对象的指定属性进行排序，底层是用红黑树储存的</p> </li></ul>\n<ol><li>无序性：不等于随机性，是存储的数据在底层数组中并非按照索引添加，而是按照哈希值添加</li><li>不可重复性：本质上使用equals做的比较</li></ol>\n<h4><a id=\"HashSet_2249\"></a>HashSet</h4>\n<p>我们向HashSet中添加元素,首先调用元素a所在类的hashCode()方法，计算元素a的哈希值，</p>\n<p>此哈希值接者通过某种算法计算出在HashSet底层数组中的存放位置(即为:索引位置)，判断</p>\n<p>数组此位置上是否已经有元素:</p>\n<p>如果此位置上没有其他元素，则元素a添加成功。</p>\n<p>如果此位置上有其他元素b(或以链表形式存在的多个元素)，则比较元素a与元素的hash值:</p>\n<p>如果hash值不相同，则元素a添加成功。</p>\n<p>如果hash值相同，进而需要调用元素a所在类的equlas()方法:</p>\n<p>equals()返回true,元素a添加失败</p>\n<p>equals()返回false,则元素七上八下，JDK7之前是在当前元素之前，JDK8之后是在当前元素之后</p>\n<p>像set中添加的数据其所在的类一定要重写hashCode()和equals()并保持一致性，直接用系统生成的</p>\n<h4><a id=\"LinkedHashSet_2271\"></a>LinkedHashSet</h4>\n<p>是HashSet的子类因为是有序的，所以频繁遍历的效率高于HashSet</p>\n<h4><a id=\"TreeSet_2275\"></a>TreeSet</h4>\n<p>添加的数据必须是相同类型的对象</p>\n<p>排序可以自然排序（实现compareble接口）和定制排序，自然排序中比较对象是否相同的标准为compareTo()返回0而不是equals()</p>\n<h3><a id=\"set_2281\"></a>set习题</h3>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParseException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">HashSet</span> set<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Person</span> p1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AA\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Person</span> p2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BB\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1002</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p1<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"CC\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将AA 1001对应哈希值的位置改了属性</span>\n    set<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//找CC 1001对应的哈希值删除，结果没找到</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//还是输出两个元素</span>\n    set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CC\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//放入CC 1001对应哈希值的位置</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AA\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//找到AA 1001对应哈希值的位置，但该位置放的是CC，所以成功添加</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Person{\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span>\n            <span class=\"token string\">'}'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> age <span class=\"token operator\">==</span> person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"6Map_2333\"></a>6、Map接口</h3>\n<h4><a id=\"Map_2335\"></a>Map实现类结构</h4>\n<img alt=\"image-20211208142444965\"/>\n<ul><li> <p>HashMap：Map的主要实现类，线程不安全，效率高，可以存储null的key和value</p>\n<ul><li>LinkedHashMap：在原有的HashMap底层结构上添加了一堆指针指向前一个和后一个元素，保证在遍历元素时按照添加的顺序实现遍历，对于频繁的遍历操作，此类执行效率高于HashMap</li></ul> </li><li> <p>TreeMap：保证按照添加的key-value对进行排序，实现排序遍历，使用key的自然或者定制排序</p> </li><li> <p>Hashtable：作为古老的实现类，线程安全效率低，不能存储null的key和value</p>\n<ul><li>Properties：Properties 类是 Hashtable 的子类，该对象用于处理属性文件，由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的 key 和 value 都是字符串类型</li></ul> </li></ul>\n<p>HashMap底层：数组+链表（JDK7之前</p>\n<p>​ 数组+链表+红黑树（JDK8</p>\n<p>面试题：</p>\n<ol><li>HashMap底层实现原理？</li><li>HashMap和Hashtable的异同？</li><li>CurrentHashMap与Hashtable的异同？</li></ol>\n<h4><a id=\"Map_2359\"></a>Map结构</h4>\n<p>Map中的key:无序的、不可重复的，使用Set 存储所有的key，key所在类要重写equals和hashCode方法</p>\n<p>Map中的value:无序的、可重复的，使用Collection 存储所有的vaLue</p>\n<p>一个键值对: key-value 构成了一个Entry对象。</p>\n<p>Map中的entry:无序的、不可重复的，使用set存储所有entry</p>\n<h4><a id=\"HashMap_JDK7_2369\"></a>HashMap JDK7</h4>\n<h5><a id=\"_2371\"></a>底层实现</h5>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">HashMap</span> map<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//在实例化以后，底层创建了长度是16的一维数组Entry[] table</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span>value1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>首先调用Key1所在类的hashCode方法计算key1哈希值，哈希值经过计算之后得到Entry数组中的存放位置</p>\n<ol><li>如果数据为空，添加成功</li><li>如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在，JDK放在上面，就是当前添加的数据的next是原来的数据))，比较key1和已经存在的一个或多个数据的哈希值: \n  <ol><li>如果key1的哈希值与己经存在的数据的哈希值都不相同，此时key1-value1添加成功。</li><li>如果key1的哈希值和已经存在的某一个数据的哈希值相同， 继续比较:调用key1所在类的equals()方法，比较: \n    <ol><li>如果equals()返回false:此时key1-value1添加成功</li><li>如果equals()返@true:使用新value替换旧value</li></ol> </li></ol> </li></ol>\n<p>在添加过程中会涉及到扩容问题，默认扩容为原来的2倍，之前的数据需要重新计算存放位置</p>\n<h5><a id=\"_2390\"></a>源码分析</h5>\n<p>P522</p>\n<h4><a id=\"HashMap_JDK8_2394\"></a>HashMap JDK8</h4>\n<h5><a id=\"_2396\"></a>底层实现</h5>\n<p>相较于JDK7 底层实现的不同：</p>\n<ol><li> <p>new HashMap():底层没有创建-一个长度为16的数组</p> </li><li> <p>jdk 8底层的数组是: Node[], 而非Entry[]</p> </li><li> <p>首次调用put()方法时，底层创建长度为16的数组</p> </li><li> <p>JDK7：数组+链表，JDK8：数组+链表+红黑树</p> <p>当数组的某一个索引位置上的元素以链表形式存在的数据个数&gt;8且当前数组的长度&gt;64，此时所以位置上的所有数据改为红黑树存储（查找效率高很多</p> </li></ol>\n<h5><a id=\"_2410\"></a>源码分析</h5>\n<p>DEFAULT_ INITIAL_ CAPACITY : HashMap的默认容量，16</p>\n<p>DEFAULT_ LOAD FACTOR: HashMap的默认加载因子: 0.75</p>\n<p>threshold:扩容的临界值，=容量*填充因子: 16 * 0.75 =&gt; 12</p>\n<p>TREEIFY THRESHOLD: Bucket 中链表长度大于该默认值，转化为红黑树:8</p>\n<p>MIN TREEIFY CAPACITY:桶中的Node被树化时最小的hash表容量:64</p>\n<h4><a id=\"LinkedHashMap_2422\"></a>LinkedHashMap</h4>\n<p>PS:了解就可以了</p>\n<p>HashMap中的内部类：Node</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>LinkedHashMap中的内部类：Entry</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HashMap<span class=\"token punctuation\">.</span>Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> before<span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    \t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"Map_2448\"></a>Map中定义的方法</h4>\n<p>元视图操作的方法：</p>\n<p>Set keySet()：返回所有key构成的Set集合</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">Set</span> set<span class=\"token operator\">=</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Collection values()：返回所有value构成的Collection集合</p>\n<p>Set entrySet()：返回所有key-value对构成的Set集合</p>\n<h4><a id=\"TreeMap_2462\"></a>TreeMap</h4>\n<p>TreeMap存储 Key-Value 对时，需要根据 key-value 对进行排序。</p>\n<p>TreeMap 可以保证所有的 Key-Value 对处于有序状态。</p>\n<p>TreeSet底层使用红黑树结构存储数据</p>\n<p>TreeMap 的 Key 的排序：</p>\n<ul><li> <p>自然排序：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有 的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException</p> </li><li> <p>定制排序：创建 TreeMap 时，传入一个 Comparator 对象，该对象负责对 TreeMap 中的所有 key 进行排序。此时不需要 Map 的 Key 实现 Comparable 接口</p> </li></ul>\n<p>TreeMap判断两个key相等的标准：两个key通过compareTo()方法或 者compare()方法返回0。</p>\n<h4><a id=\"Properties_2478\"></a>Properties</h4>\n<p>Properties 类是 Hashtable 的子类，该对象用于处理属性文件，由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的 key 和 value 都是字符串类型</p>\n<h3><a id=\"7Collections_2482\"></a>7、Collections工具类</h3>\n<p>Collections 是一个操作 Set、List 和 Map 等集合的工具类</p>\n<p>Collection和Collections的区别?Collection是接口，Collections是工具类</p>\n<ul><li>void copy(List dest,List src)：将src中的内容复制到dest中</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">List</span> list<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">345</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span> list1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//IndexOutOfBoundsException: Source does not fit in dest</span>\n<span class=\"token comment\">//lsit1容量比list小</span>\n<span class=\"token class-name\">List</span> list1<span class=\"token operator\">=</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这样就容量一样了</span>\n</code></pre>\n<ul><li>Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集 合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全 问题</li></ul>\n<h2><a id=\"12__2502\"></a>第12章 泛型</h2>\n<h3><a id=\"1_2504\"></a>1、为什么要有泛型</h3>\n<p>任何类型都可以添加到集合中：类型不安全</p>\n<p>读取出来的对象需要强转：繁琐，可能有ClassCastException</p>\n<h3><a id=\"2_2510\"></a>2、在集合中使用泛型</h3>\n<p>集合类或者集合接口都在JDK5.0的时候修改为带泛型的结构</p>\n<p>泛型的类型必须是类，如果是基本数据类型则用包装类</p>\n<h3><a id=\"3_2516\"></a>3、自定义泛型结构</h3>\n<p>泛型类/泛型接口</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//泛型类，如果定义了泛型类，实例化时没有指明类型，则认为此时泛型类型为Object类型</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Order</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">T</span> orderT<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> orderT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orderT <span class=\"token operator\">=</span> orderT<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>由于子类在继承带泛型的父类时同样继承了泛型，新建对象时不需要指明泛型，此时子类不是泛型类</p>\n<p>泛型方法</p>\n<p>在方法中出现了泛型的结构，泛型参数与类的泛型参数没有任何关系，泛型方法所属的类是不是泛型类都没有关系</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">pro</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"4_2545\"></a>4、泛型在继承上的体现</h3>\n<p>如果B是A的一个子类型（子类或者子接口），而G是具有泛型声明的类或接口，<code>G&lt;B&gt;</code><strong>并不是</strong><code>G&lt;A&gt;</code>的子类型</p>\n<h3><a id=\"5_2549\"></a>5、通配符的使用</h3>\n<p>List&lt;?&gt;是List、List等各种泛型List的父类</p>\n<p>list&lt;?&gt;不能向其内部添加数据。因为我们不知道c的元素类型，我们不能向其中添加对象，<strong>null除外</strong></p>\n<p>有限制条件的通配符的使用：</p>\n<p>？extends Person：&lt;=</p>\n<p>? super Person：&gt;=</p>\n<h2><a id=\"13IO_2561\"></a><strong>第13章IO流</strong></h2>\n<h3><a id=\"1File_2563\"></a>1、File类的使用</h3>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">File</span> file<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//hello.txt</span>\n    <span class=\"token class-name\">File</span> file1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"C:\\\\Users\\\\86187\\\\Desktop\\\\hotel.txt\\\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"C:\\Users\\86187\\Desktop\\hotel.txt\"</span>\n    <span class=\"token class-name\">File</span> file2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"C:\\\\Users\\\\86187\\\\Desktop\\\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"JavaSenior\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"C:\\Users\\86187\\Desktop\"\\JavaSenior</span>\n    <span class=\"token class-name\">File</span> file3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>file2<span class=\"token punctuation\">,</span><span class=\"token string\">\"hi.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"C:\\Users\\86187\\Desktop\"\\JavaSenior\\hi.txt</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol><li> <p>File类的一个对象，代表一个文件或者一个文件目录</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> parentPath<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> childPath<span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> parentFile<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> childPath<span class=\"token punctuation\">)</span>\n</code></pre> </li><li> <p>File类声明在java.io包下，路径可以分为相对路径和绝对路径</p> <p>相对：相较于某个路径下指明的路径</p> <p>绝对：包含盘符在内的文件或者文件目录的路径</p> </li><li> <p>常用方法</p> <p>涉及到关于文件或文件目录的创建、删除、重命名、修改时间、文件大小等方法，并未涉及到写入或读入文件内容的操作，如果需要读取或写入文件内容，必须使用IO流来完成</p> </li><li> <p>后续File类的对象通常会作为参数传递到流的构造器中，指明读取或者写入的终点</p> </li></ol>\n<h3><a id=\"2IO_2598\"></a>2、IO流原理及流的分类</h3>\n<ul><li> <p>按操作数据单位不同分为：字节流(8 bit)，字符流(16 bit)</p> </li><li> <p>按数据流的流向不同分为：输入流，输出流</p> </li><li> <p>按流的角色的不同分为：节点流，处理流</p> </li></ul>\n<img alt=\"image-20211210142652719\"/>\n<p>重点：缓冲流、转换流、对象流</p>\n<p>了解：标准打印输入、输出流、打印流、数据流、随机存取文件流，NIO.2</p>\n<img alt=\"image-20211211125620004\"/>\n<h3><a id=\"3_2614\"></a>3、节点流（或文件流）</h3>\n<h4><a id=\"_2616\"></a>读入</h4>\n<ol><li>read()的理解: 返回读入的一个字符。如果达到文件末尾，返回-1</li><li>异常的处理:为了保证流资源定可以执行关闭操作。需要使用try-catch-finally处理</li><li>读入的文件定要存在， 否则就会报FileNotFoundException</li></ol>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">FileReader</span> fR<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//1、实例化File类的对象，指明要操作的文件</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2、提供具体的流</span>\n        fR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//3、数据的读入</span>\n        <span class=\"token comment\">//read()返回读入的一个字符，如果达到文件末尾返回-1</span>\n        <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>fR<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//4、流的关闭</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fR<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>fR<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_2650\"></a>写出</h4>\n<p>1.创建流对象，建立数据存放文件，文件可以不存在，不会报异常，会自动创建此文件</p>\n<ul><li> <p>FileWriter(file,false)/ FileWriter(file)会对原有文件进行覆盖</p> </li><li> <p>FileWriter(file,true)会在原文件基础上追加</p> </li></ul>\n<p>2.调用流对象的写入方法，将数据写入流</p>\n<p>3.关闭流资源，并将流中的数据清空到文件中</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testFileWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">File</span> file<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">FileWriter</span> fw<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I have a dream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li> <p>字节流操作字节，比如：.mp3，.avi，.rmvb，mp4，.jpg，.doc，.ppt</p> </li><li> <p>字符流操作字符，只能操作普通文本文件。最常见的文本文 件：.txt，.java，.c，.cpp 等语言的源代码。尤其注意.doc,excel,ppt这些不是文本文件。</p> </li></ul>\n<h3><a id=\"4_2675\"></a>4、缓冲流</h3>\n<p>提供流的读取、写入的速度</p>\n<p>提高读写速度的原因：提供了一个缓冲区</p>\n<h3><a id=\"5_2681\"></a>5、转换流</h3>\n<p>将char转换为byte</p>\n<p>InputStreamReader：实现将字节的输入流按指定字符集转换为字符的输入流，解码</p>\n<p>OutputStreamWriter：实现将字符的输出流按指定字符集转换为字节的输出流，编码</p>\n<h3><a id=\"6_2689\"></a>6、标准输入、输出流</h3>\n<h3><a id=\"7_2691\"></a>7、打印流</h3>\n<h3><a id=\"8_2693\"></a>8、数据流</h3>\n<h3><a id=\"9_2695\"></a>9、对象流</h3>\n<p>重点：序列化机制</p>\n<h4><a id=\"_2699\"></a>序列化和反序列化</h4>\n<p>序列化：用ObjectOutputStream类保存基本类型数据或对象的机制，内存-----&gt;文件</p>\n<p>将内存中的java对象保存到磁盘中或者通过网络传输出去</p>\n<p>反序列化：用ObjectInputStream类读取基本类型数据或对象的机制，文件-----&gt;内存</p>\n<p>将磁盘中的对象数据源读出</p>\n<h4><a id=\"Serializable_2709\"></a>Serializable接口</h4>\n<p>凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量：</p>\n<p>private static final long serialVersionUID;</p>\n<p>serialVersionUID用来表明类的不同版本间的兼容性。简言之，其目的是以序列化对象进行版本控制，有关各版本反序列化时是否兼容。如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节自动生成的。若类的实例变量做了修改，serialVersionUID 可能发生变化。故建议显式声明。</p>\n<h3><a id=\"10_2717\"></a>10、随机存取文件流</h3>\n<h3><a id=\"11NIO2PathPathsFiles_2719\"></a>11、NIO.2中Path、Paths、Files类的使用</h3>\n<h2><a id=\"14__2721\"></a>第14章 网络编程</h2>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-aulVXBpJ-1639482821191)(C:\\Users\\86187\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211211154252672.png)]</p>\n<h4><a id=\"1_2725\"></a>1、网络通信要素概述</h4>\n<p>IP和端口号</p>\n<p>网络通信协议</p>\n<h4><a id=\"21IP_2731\"></a>2、通信要素1：IP和端口号</h4>\n<p>IP：唯一的标识 Internet 上的计算机（通信实体）</p>\n<p>端口号：标识正在计算机上运行的进程（程序）</p>\n<h4><a id=\"32_2737\"></a>3、通信要素2：网络协议</h4>\n<p>TCP/IP协议簇</p>\n<h4><a id=\"4TCP_2741\"></a>4、TCP网络编程</h4>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-P14KWYRr-1639482821192)(C:\\Users\\86187\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211211165932089.png)]</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token class-name\">WindowTest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>xml<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span>saaj<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ByteOutputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OutputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Socket</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>charset<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n * 实现TCP的网络编程\n * 客户端发送信息给服务端，服务端将数据显示在控制台上\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WindowTest</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">OutputStream</span> os <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//1、创建Socket对象，指明服务器算的ip和端口号</span>\n            <span class=\"token class-name\">InetAddress</span> inet<span class=\"token operator\">=</span><span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span>inet<span class=\"token punctuation\">,</span><span class=\"token number\">8899</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//2、获取一个输出流用于输出数据</span>\n            os <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//3、写出数据的操作</span>\n            os<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//4、资源的关闭</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>os<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    os<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>socket<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    socket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">ServerSocket</span> ss<span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Socket</span> socket<span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">InputStream</span> is<span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ByteOutputStream</span> baos<span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//1、创建服务器端的ServerSocket，指明自己的端口号</span>\n            ss <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">8899</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//2、调用accept方法表示接收来自客户端的socket</span>\n            socket <span class=\"token operator\">=</span> ss<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//3、获取输入流</span>\n            is <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//4、读取输入流中的数据</span>\n            baos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">=</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                baos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>baos<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//5、资源的关闭</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>baos <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    baos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    is<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>socket<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    socket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ss<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    ss<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<ul><li> <p>客户端：</p>\n<ul><li> <p>自定义</p> </li><li> <p>浏览器</p> </li></ul> </li><li> <p>服务端：</p>\n<ul><li> <p>自定义</p> </li><li> <p>Tomcat服务器</p> </li></ul> </li></ul>\n<h4><a id=\"5UDP_2866\"></a>5、UDP网络编程</h4>\n<ol><li>UDP数据报通过数据报套接字 DatagramSocket 发送和接收，系统不保证 UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</li><li>DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP 地址和端口号以及接收端的IP地址和端口号。</li><li>UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和 接收方的连接。</li></ol>\n<h4><a id=\"6URL_2872\"></a>6、URL编程</h4>\n<p>URL(Uniform Resource Locator)：统一资源定位符，它表示 Internet 上某一资源的地址</p>\n<p><strong>URI、URL和URN的区别</strong></p>\n<ol><li>URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。</li><li>URL是uniform resource locator，统一资源定位符，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。</li><li>URN，uniform resource name，统一资源命名，是通过名字来标识资源， 比如mailto:java-net@java.sun.com。</li><li>URI是以一种抽象的，高层 次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。</li><li>URL 和URN都是一种URI。</li></ol>\n<h2><a id=\"15_JAVA_2884\"></a>第15章 JAVA反射机制</h2>\n<h3><a id=\"1Java_2886\"></a>1、Java反射机制概述</h3>\n<p>java.lang.Class:代表一个类</p>\n<p>java.lang.reflect.Method:代表类的方法</p>\n<p>java.lang.reflect.Field:代表类的成员变量</p>\n<p>java.lang.reflect.Constructor:代表类的构造器</p>\n<h3><a id=\"2ClassClass_2896\"></a>2、理解Class类并获取Class实例</h3>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Class</span> clazz<span class=\"token operator\">=</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//1、通过反射，创建Person类的对象</span>\n    <span class=\"token class-name\">Constructor</span> con<span class=\"token operator\">=</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span> obj<span class=\"token operator\">=</span>con<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Person</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//2、通过反射调用对象指定的属性、方法</span>\n    <span class=\"token comment\">//调用属性</span>\n    <span class=\"token class-name\">Field</span> age<span class=\"token operator\">=</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//调用方法</span>\n    <span class=\"token class-name\">Method</span> show <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"show\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    show<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"**************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//通过反射，可以调用Person类的私有结构</span>\n    <span class=\"token class-name\">Constructor</span> deC <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    deC<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> deC<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jerry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//调用私有属性</span>\n    <span class=\"token class-name\">Field</span> name <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    name<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    name<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span><span class=\"token string\">\"Micheal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//调用私有方法</span>\n    <span class=\"token class-name\">Method</span> showNation <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"showNation\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    showNation<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    showNation<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span><span class=\"token string\">\"中国\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol><li> <p>直接通过new的方式或者反射的方式都可以调用公共的结构，开发中到底用哪个</p> <p>直接new，什么时候用反射，反射的特征：动态性</p> </li><li> <p>反射机制与面向对象中的封装性是不是矛盾的？如何看待两个技术</p> <p>不矛盾</p> </li><li> <p>java.lang.Class的理解</p> <p>类的加载过程：程序经过javac.exe命令之后，会生成一个或多个字节码文件（.class）结尾，接着使用java.exe命令对某个字节码文件进行解释运行，相当于将某个字节码文件加载到内存中，此过程就称为类的加载，加载到内存中的类就称为运行时的类，也就是class的实例对应一个运行时类。加载到内存中的运行时类会缓存一定时间，在此时间之内，可以通过不同的方式来获取此运行时类。</p> </li><li> <p>获取Class实例的方式</p> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//方式1：调用运行时类的属性.class</span>\n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">&gt;</span></span> class1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>class1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//方式2：通过运行时类的对象</span>\n    <span class=\"token class-name\">Person</span> p1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Class</span> class2<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//方式3：调用Class的静态方法：forName(String classPath)（用得最多）</span>\n    <span class=\"token class-name\">Class</span> class3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WindowTest.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>class3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li></ol>\n<h3><a id=\"3ClassLoader_2961\"></a>3、类的加载与ClassLoader的理解</h3>\n<img alt=\"image-20211212162455735\"/>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//读取配置文件（这个代码需要掌握）</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//配置文件默认识别为当前module的src下</span>\n    <span class=\"token class-name\">Properties</span> pros <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ClassLoader</span> classLoader <span class=\"token operator\">=</span> <span class=\"token class-name\">ReflectionTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pros<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> user <span class=\"token operator\">=</span> pros<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> pros<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user=\"</span><span class=\"token operator\">+</span>user<span class=\"token operator\">+</span><span class=\"token string\">\"password=\"</span><span class=\"token operator\">+</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"4_2981\"></a>4、创建运行时类的对象</h3>\n<p>需要掌握</p>\n<h3><a id=\"5_2985\"></a>5、获取运行时类的完整结构</h3>\n<h3><a id=\"6_2987\"></a>6、调用运行时类的指定结构</h3>\n<p>需要掌握</p>\n<h3><a id=\"7_2991\"></a>7、反射的应用：动态代理</h3>\n<p>想要实现动态代理，需要解决的问题？</p>\n<ol><li>如何根据加载到内存中的被代理类，动态的创建一个代理类及其对象</li><li>当通过代理类的对象调用方法时，如何动态地调用被代理类中地同名方法</li></ol>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token class-name\">WindowTest</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NewInstanceTest</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SuperMan</span> superMan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SuperMan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//被代理类的对象</span>\n        <span class=\"token comment\">//1、创建代理类的对象，传入参数：被代理类的对象</span>\n        <span class=\"token class-name\">Human</span> proxyInstance <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Human</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">ProxyFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProxyInstance</span><span class=\"token punctuation\">(</span>superMan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2、使用代理的对象调用被代理类的方法</span>\n        proxyInstance<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"土豆\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>proxyInstance<span class=\"token punctuation\">.</span><span class=\"token function\">getBelief</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//代理类和被代理类需要实现同一个接口</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">getBelief</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> food<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//被代理类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperMan</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getBelief</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"共产主义\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> food<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我喜欢吃\"</span><span class=\"token operator\">+</span>food<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//生成代理类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProxyFactory</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//调用此方法返回一个代理类的对象</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getProxyInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//obj:被代理类的对象</span>\n        <span class=\"token class-name\">MyInvocationHandler</span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyInvocationHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        handler<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//参数分别为：被代理类的加载器，被代理类的接口（因为代理类和被代理类需要实现同一个接口），代理类到被代理类的一个方法转换的接口</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyInvocationHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">;</span><span class=\"token comment\">//被代理类，需要使用被代理类的对象赋值</span>\n    <span class=\"token comment\">//方法功能：使用被代理类的对象赋值</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>obj<span class=\"token operator\">=</span>obj<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//当通过代理类的对象调用方法时，就会自动调用如下的方法：invoke()</span>\n    <span class=\"token comment\">//将被代理类要执行的方法的功能声明在invoke中</span>\n    <span class=\"token comment\">//参数含义：代理类的对象，代理类的对象想要调用的方法，方法形参</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Object</span> returnValue <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//利用反射，调用方法的主体是被代理类的对象</span>\n        <span class=\"token keyword\">return</span> returnValue<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>此时整个代码里没有代理类，也叫不出代理类的类名，代理类是通过代理类工厂自动生成的，直接得到了代理类的对象</p>\n<p>APO</p>\n<h2><a id=\"16JAVA8__3064\"></a>第16章JAVA8 的其他新特性</h2>\n<h3><a id=\"JAVA8_3066\"></a>之前提到的JAVA8新特性：</h3>\n<h4><a id=\"java8_3068\"></a>java8中接口新特性</h4>\n<p>JDK8：除了全局常量和抽象方法，还可以定义静态方法和默认方法（default关键字修饰）</p>\n<ol><li>接口中定义的静态方法只能通过接口来调用，接口.方法。</li><li>通过实现类的对象，可以调用接口中的默认方法，对象.方法。如果实现类重写了接口中的默认方法，调用时仍然调用的是重写以后的方法</li><li>如果子类（或实现类）继承的父类和实现的接口中声明了同名同参数的方法，子类在没有重写此方法的情况下调用的是父类中的方法——类优先原则</li><li>如果实现类实现了多个接口，而这个多个接口中定义了同名同参数的默认方法，在实现类没有重写方法的情况下会报”接口冲突“错误，此时需要重写。</li><li>如何在子类（或者实现类）调用父类、接口中被重写的方法，接口.super.方法</li></ol>\n<h4><a id=\"JDK8API_3078\"></a>JDK8中新日期时间API</h4>\n<h4><a id=\"JDK8_3080\"></a>JDK8中注解的新特性</h4>\n<p>可重复注解、类型注解</p>\n<h4><a id=\"HashMap_JDK8_3084\"></a>HashMap JDK8</h4>\n<p>JAVA8之前是先建好数组，JAVA8之后是添加元素的时候才去造数组</p>\n<h3><a id=\"_3088\"></a>其他新特性</h3>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-nhbDv7hD-1639482821200)(C:\\Users\\86187\\Desktop\\offer\\尚硅谷\\尚硅谷JAVA基础课件笔记源码资料\\新建文件夹\\1_课件\\第2部分：Java高级编程\\尚硅谷_宋红康_第16章_Java8的其它新特性\\Java 8新特性 尚硅谷-宋红康.bmp)]</p>\n<h4><a id=\"1Lambda_3092\"></a>1、Lambda表达式</h4>\n<pre><code class=\"prism language-java\"> <span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span>o2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>2.格式:</p>\n<p>-&gt; :Lambda 操作符或 箭头操作符</p>\n<p>-&gt;左边: lambda形参列表(其实就是接口中的抽象方法的形参列表)</p>\n<p>-&gt;右边: Lambda体 (其实就是重写的抽象方法的方法体)</p>\n<p>Lambda表达式的本质：作为函数式接口的实例</p>\n<h4><a id=\"2Functional_3108\"></a>2、函数式（Functional）接口</h4>\n<h4><a id=\"3_3110\"></a>3、方法引用与构造器引用</h4>\n<ol><li> <p>方法引用本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例，自然方法引用也是函数时接口的实例</p> </li><li> <p>使用格式：类（或对象）：：方法名</p> <p>​ 对象：：非静态方法 P673</p> <p>​ 类：：静态方法 P674</p> <p>​ 类：：非静态方法 P675</p> </li><li> <p>要求：接口中的抽象方法的形参列表和返回值类型与方法医用的方法形参列表和返回值类型相同</p> </li></ol>\n<h4><a id=\"4Stream_API_3124\"></a>4、强大的Stream API</h4>\n<p>1、Sream关注的是对数据的运算，与CPU打交道</p>\n<p>​ 集合关注的是数据的存储，与内存打交道</p>\n<p>2、操作流程</p>\n<p>1- 创建 Stream 一个数据源（如：集合、数组），获取一个流</p>\n<p>2- 中间操作 一个中间操作链，对数据源的数据进行处理</p>\n<p>3- 终止操作(终端操作) 一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用</p>\n<p>3、说明</p>\n<p>①Stream 自己不会存储元素。</p>\n<p>②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</p>\n<p>③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</p>\n<p>4、一个中间操作链，对数据源的数据进行处理</p>\n<p>一旦执行终止操作，就执行中间操作链并产生结果，之后不会再被使用</p>\n<h4><a id=\"5Optional_3150\"></a>5、Optional类</h4>\n<h2><a id=\"17_JAVA9__JAVA10__JAVA11_3152\"></a>第17章 JAVA9 &amp; JAVA10 &amp; JAVA11新特性</h2>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}