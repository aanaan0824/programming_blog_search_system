{"blogid": "125771094", "writerAge": "码龄3年", "writerBlogNum": "11", "writerCollect": "738", "writerComment": "380", "writerFan": "1170", "writerGrade": "4级", "writerIntegral": "818", "writerName": "算法小学徒", "writerProfileAdress": "writer_image\\profile_125771094.jpg", "writerRankTotal": "23428", "writerRankWeekly": "3022", "writerThumb": "338", "writerVisitNum": "37813", "blog_read_count": "4899", "blog_time": "已于 2022-07-18 14:23:38 修改", "blog_title": "C/C++后端实习经验大礼包", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"CC_0\"></a>C/C++后端实习经验大礼包</h1>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#CC_0\">C/C++后端实习经验大礼包</a></li><li><a href=\"#_6\">一、前言</a></li><li><a href=\"#_11\">二、实习面试宝典</a></li><li><ul><li><a href=\"#1_14\">1.自我介绍</a></li><li><a href=\"#2_16\">2.深挖个人项目(多个问题不同角度)</a></li><li><a href=\"#3STLSTL_18\">3.有用过STL吗?常用哪些STL?</a></li><li><a href=\"#4STL_22\">4.介绍一下你对STL的理解</a></li><li><a href=\"#5STL_26\">5.深挖STL底层</a></li><li><a href=\"#6QtQtTcp_35\">6.Qt有接触过吗?Qt下Tcp通信的整个流程是怎么样的?</a></li><li><a href=\"#7_54\">7.设计模式的问题</a></li><li><a href=\"#8_58\">8.编译原理的简单问题</a></li><li><a href=\"#9dijkstra_62\">9.讲一下dijkstra算法</a></li><li><a href=\"#10STL_68\">10.谈一下你对STL的理解</a></li><li><a href=\"#11STL_76\">11.STL的使用场景</a></li><li><a href=\"#12C11_88\">12.C++11语法熟悉吗</a></li><li><a href=\"#13_92\">13.工程里面的回溯是什么?</a></li><li><a href=\"#14WidgetWidgetQWidget_parent_QWidgetparent_95\">14.Widget::Widget(QWidget *parent) :QWidget(parent)什么意思</a></li><li><a href=\"#15_101\">15.算法题:跳台阶(找规律可以发现是个斐波那契数列)</a></li><li><a href=\"#16__140\">16.算法题: 餐厅(区间贪心)</a></li><li><a href=\"#17_226\">17.反问面试官环节</a></li></ul>\n</li><li><a href=\"#_229\">三、实习工作分享</a></li><li><ul><li><a href=\"#1_231\">1.实习专有名词及分析篇</a></li><li><a href=\"#11SDKSoftware_Development_Kit_234\">1.1SDK：软件开发工具包(Software Development Kit)</a></li><li><a href=\"#12APIApplication_Programming_Interface_238\">1.2API:应用程序接口（Application Programming Interface)</a></li><li><a href=\"#windowsAPI_243\">举例:windows串口通信函数API</a></li><li><a href=\"#13_255\">1.3上位机</a></li><li><a href=\"#14_258\">1.4下位机</a></li><li><a href=\"#15_261\">1.5上位机与下位机区别</a></li></ul>\n</li><li><a href=\"#_267\">四、总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_6\"></a>一、前言</h1>\n<pre><code>这篇文章是C/C++后端实习经验大礼包的第一弹,后面会持续更新,谢谢大家支持~~撒花,\n前面说过博主目前在一家互联网公司实习,今天给大家带来第一弹C/C++后端实习经验大\n礼包,希望大家喜欢。\n</code></pre>\n<h1><a id=\"_11\"></a>二、实习面试宝典</h1>\n<p>流程:投简历-&gt;简历筛选-&gt;笔试-&gt;技术电话面-&gt;技术视频面-&gt;hr面(有些公司可能在中间环节比较多,比如两次技术电话面,两次技术视频面等,视频面多为主管之类的,ps:主管面会参考之前的部门对你面试的评价)</p>\n<h2><a id=\"1_14\"></a>1.自我介绍</h2>\n<h2><a id=\"2_16\"></a>2.深挖个人项目(多个问题不同角度)</h2>\n<h2><a id=\"3STLSTL_18\"></a>3.有用过STL吗?常用哪些STL?</h2>\n<p>回答:用过,平时用的比较多,常用vector,map,unordered_map,stack,queue,deque，set,multiset,unordered_set,priority_queue,bitset,list之类的</p>\n<h2><a id=\"4STL_22\"></a>4.介绍一下你对STL的理解</h2>\n<p>回答:STL就是标准模板库,可以提高程序的开发效率和复用性。</p>\n<h2><a id=\"5STL_26\"></a>5.深挖STL底层</h2>\n<p>vector:底层存储是一个可变大小的数组,支持O(1)的随机访问,在尾部之外的位置插入和删除操作时间复杂度是 O(n)；<br/> deque:双端队列，支持O(1)随机访问在头部和尾部之外的位置插入和删除的时间复杂度是O(n)；<br/> list： 双向链表,不支持随机访问,只支持顺序访问,在任意位置的插入和删除速度很快；<br/> forward_list:单向链表；<br/> array是固定大小的数组（vector是可变大小的数组）；<br/> string:与vector类似，可以理解为特殊的vector,专门用来存储字符,支持随机访问,在尾部之外的位置插入的时间复杂度是O(n)；</p>\n<h2><a id=\"6QtQtTcp_35\"></a>6.Qt有接触过吗?Qt下Tcp通信的整个流程是怎么样的?</h2>\n<p>有的,主要从服务器端和客户端两方面介绍:<br/> 1.服务器端<br/> 创建用于监听的套接字(Socket)<br/> Socket可以看成在两个程序进行通讯连接中的一个端点,一个程序将一段信息写入Socket中,该Socket将这段信息发送给另外一个Socket中,使这段信息能传送到其他程序中。<br/> 给套接字设置监听<br/> 如果有连接到来, 监听的套接字会发出信号newConnected<br/> 接收连接, 通过nextPendingConnection()函数, 返回一个QTcpSocket类型的套接字对象(用于通信)<br/> 使用用于通信的套接字对象通信<br/> 1 发送数据: write<br/> 2. 接收数据: readAll/read<br/> 客户端方面:<br/> 创建用于通信的套接字<br/> 连接服务器: connectToHost<br/> 连接成功与服务器通信<br/> 1 发送数据: write<br/> 2.接收数据: readAll/read</p>\n<h2><a id=\"7_54\"></a>7.设计模式的问题</h2>\n<p>后面我会专门写文章来讲</p>\n<h2><a id=\"8_58\"></a>8.编译原理的简单问题</h2>\n<p>后面我会专门写文章来讲</p>\n<h2><a id=\"9dijkstra_62\"></a>9.讲一下dijkstra算法</h2>\n<p>回答:。dijkstra算法是从一个顶点到其余各顶点的最短路径算法,解决的是有权图中最短路径问题。迪杰斯特拉算法主要特点是从起始点开始,采用贪心算法的策略,每次遍历到始点距离最近且未访问过的顶点的邻接节点,直到扩展到终点为止。<br/> 时间复杂度:朴素版写法O(V方) 进阶写法:基于优先队列的写法（适用于稀疏图）总复杂度为 O(V log E)<br/> Edge:边 Vertex:顶点</p>\n<h2><a id=\"10STL_68\"></a>10.谈一下你对STL的理解</h2>\n<p>C++ STL 做为C++的一个标准类库,包含了复用性最高的数据结构(容器)与算法(模板函数)。<br/> STL的容器可以分为以下几个大类:<br/> 一:序列容器,有vector, list, deque,string.<br/> 二:关联容器可以分为 set（集合）和 map（映射表）两大类，及其衍生体 multiset 和 multimap。这些容器的底层机制均以 RB-tree（红黑树）实现。RB-tree 也是一个独立容器，但并不开放使用。<br/> SGI STL 还提供一个不在标准规格的关联式容器 hash_table（散列表），以及以 hash_table 为底层机制而完成的 hash_set散列集合、hash_map散列映射表、hash_multiset散列多键集合、hash_multimap散列多键映射表。<br/> 关联容器，类似关联式数据库，每个元素都有一个键值key和一个实值value。关联式容器的内部结构是一个平衡二叉树，包括 AVL-tree、RB-tree、AA-tree，STl 中运用的是 RB-tree红黑树。</p>\n<h2><a id=\"11STL_76\"></a>11.STL的使用场景</h2>\n<p>vector(可变长的动态数组)适用场景：需要快速查找,不需要频繁插入/删除的场景<br/> string：string 类型支持长度可变的字符串,实际上就是vector，便于程序员操作字符串的类库。<br/> 也可以认为string是一个类：string封装了char* ,管理这个字符串，是一个char* 型的容器；<br/> array：数组 使用场景:类似vector，比数组更安全（不担心越界），但是内容在栈上，且属于定长容器。<br/> deque：（double-ended queue，双端队列）是一种具有队列和栈的性质的数据结构。双端队列中的元素可以从两端弹出，其限定插入和删除操作在表的两端进行。<br/> 使用场景:头尾增删元素很快，随机访问比vector慢一点，因为内部处理堆跳转。中间插入和删除效率交较高。但因为他是list和vector的结合体,出场次数不多。<br/> forward_list：使用场景：需要list的优势，但只要向前迭代<br/> list：需要频繁插入/删除，不需要快速查找<br/> queue：FIFO（先进先出）~( First Input First Output)。底层容器可以是list或deque。<br/> set/multiset:需要元素有序，查找/删除/插入性能一样。红黑树效率都是O(logN)。即使是几个亿的内容，最多也查几十次。<br/> map/multimap 映射/多重映射：需要key有序将值关联到key，O(logN)查找/删除/插入性能一样</p>\n<h2><a id=\"12C11_88\"></a>12.C++11语法熟悉吗</h2>\n<p>回答:还行,之后问了std::function,我回答是std::function是一个函数包装模板，可以包装下列这几种可调用元素类型：函数、函数指针、类成员函数指针或任意类型的函数对象（例如定义了operator()操作并拥有函数闭包）。std::function对象可被拷贝和转移，并且可以使用指定的调用特征来直接调用目标元素。当std::function对象未包裹任何实际的可调用元素，调用该std::function对象将抛出std::bad_function_call异常。</p>\n<h2><a id=\"13_92\"></a>13.工程里面的回溯是什么?</h2>\n<p>回答:用git一直备份版本有需要就回退一下</p>\n<h2><a id=\"14WidgetWidgetQWidget_parent_QWidgetparent_95\"></a>14.Widget::Widget(QWidget *parent) :QWidget(parent)什么意思</h2>\n<p>由于构造函数是指在创建一个新对象的时候,自动执行,因此通常用来实现一些默认操作。<br/> 此处“Widget::Widget(QWidget *parent) ”定义派生类的构造函数；<br/> :QWidget(parent)基类的有参构造函数<br/> 最终达到:调用基类的有参构造函数,实现对象树上基类的功能</p>\n<h2><a id=\"15_101\"></a>15.算法题:跳台阶(找规律可以发现是个斐波那契数列)</h2>\n<p>一个楼梯共有 n 级台阶，每次可以走一级或者两级，问从第 0 级台阶走到第 n 级台阶一共有多少种方案。</p>\n<p>输入格式<br/> 共一行，包含一个整数 n。</p>\n<p>输出格式<br/> 共一行，包含一个整数，表示方案数。</p>\n<p>数据范围<br/> 1≤n≤15<br/> 输入样例：<br/> 5<br/> 输出样例：<br/> 8</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">&gt;&gt;</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> w<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>w<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            c<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n            a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span>c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"16__140\"></a>16.算法题: 餐厅(区间贪心)</h2>\n<p>一家餐厅收到了 n 个客人的预约订单。</p>\n<p>每个订单都有开始时间和结束时间。</p>\n<p>对于每个订单，餐厅有权利接单，也有权利拒单。</p>\n<p>接受的订单，两两之间不得有任何时间交集，甚至不得有时刻交集，即如果一个订单的开始时间和另一个订单的结束时间相同，则两订单也不得同时接受。</p>\n<p>为了赚更多钱，餐厅需要尽可能多的接单。</p>\n<p>请问，餐厅最多可以接多少单？</p>\n<p>输入格式<br/> 第一行包含一个整数 n。</p>\n<p>接下来 n 行，每行包含两个整数 l,r，表示一个订单的开始时间和结束时间。</p>\n<p>输出格式<br/> 输出可以接受的最大订单数量。</p>\n<p>数据范围<br/> 1≤n≤5×105,<br/> 1≤l≤r≤109<br/> 输入样例1：<br/> 2<br/> 7 11<br/> 4 7<br/> 输出样例1：<br/> 1<br/> 输入样例2：<br/> 5<br/> 1 2<br/> 2 3<br/> 3 4<br/> 4 5<br/> 5 6<br/> 输出样例2：<br/> 3<br/> 输入样例3：<br/> 6<br/> 4 8<br/> 1 5<br/> 4 7<br/> 2 5<br/> 1 3<br/> 6 8<br/> 输出样例3：<br/> 2</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>node x<span class=\"token punctuation\">,</span>node y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>r<span class=\"token operator\">&lt;</span>y<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cin<span class=\"token operator\">&gt;&gt;</span>n<span class=\"token punctuation\">;</span>\n    node a<span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cin<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span>n<span class=\"token punctuation\">,</span>cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> tot<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">&gt;</span>temp<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            temp<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n            tot<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>tot<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"17_226\"></a>17.反问面试官环节</h2>\n<p>自由发挥即可,可以提前准备一些大众问题和自己关心的问题。</p>\n<h1><a id=\"_229\"></a>三、实习工作分享</h1>\n<h2><a id=\"1_231\"></a>1.实习专有名词及分析篇</h2>\n<p><strong>实习中你肯定会接触到很多自己没不熟悉的名词,在这里算法小学徒给大家分享一些cpp后端专有名词的解释:</strong></p>\n<h2><a id=\"11SDKSoftware_Development_Kit_234\"></a>1.1SDK：软件开发工具包(Software Development Kit)</h2>\n<p><strong>软件开发工具包一般都是一些软件工程师为特定的软件包、软件框架、硬件平台、操作系统等建立应用软件时的开发工具的集合。<br/> SDK相当于是一个开发者集成的环境,作为APP供应链中重要的一环,在提升App兼容性和灵活性、节约开发成本方面表现卓著。一个产品想实现某些特定功能如消息推送,便可以找到相关的第三方SDK,工程师直接接入SDK,不用再重新开发。这样,工程师可以将更多的时间和精力投入到其他产品业务相关功能的开发上。</strong></p>\n<h2><a id=\"12APIApplication_Programming_Interface_238\"></a>1.2API:应用程序接口（Application Programming Interface)</h2>\n<p><strong>API又称为应用编程接口，就是软件系统不同组成部分衔接的约定。由于近年来软件的规模日益庞大，常常需要把复杂的系统划分成小的组成部分，编程接口的设计十分重要。程序设计的实践中，编程接口的设计首先要使软件系统的职责得到合理划分。良好的接口设计可以降低系统各部分的相互依赖，提高组成单元的内聚性，降低组成单元间的耦合程度，从而提高系统的维护性和扩展性。</strong><br/> <strong>简单地说:API就是接口，就是通道，负责一个程序和其他软件的沟通，本质是预先定义的函数。</strong></p>\n<h2><a id=\"windowsAPI_243\"></a>举例:windows串口通信函数API</h2>\n<p><strong>1.CreateFile - 打开串口；<br/> 2.SetupComm-初始化一个指定的通信设备的通信参数<br/> 3.ReadFile - 读数据；<br/> 4.WriteFile - 写数据；<br/> 5.CloseHandle - 关闭串口；<br/> 6.GetCommState - 取得串口当前状态；<br/> 7.SetCommState - 设置串口状态；<br/> 8.PurgeComm - 清除串口缓冲区 ；<br/> 9.ClearCommError - 清除串口错误或者读取串口现在的状态；<br/> 10.SetCommMask - 设置串口通信事件；</strong></p>\n<h2><a id=\"13_255\"></a>1.3上位机</h2>\n<p><strong>上位机是指可以直接发出操控命令的计算机。</strong></p>\n<h2><a id=\"14_258\"></a>1.4下位机</h2>\n<p><strong>下位机是直接控制设备获取设备状况的计算机。</strong></p>\n<h2><a id=\"15_261\"></a>1.5上位机与下位机区别</h2>\n<p><strong>1.上位机一般是集中管理监控机，下位机是指现场直接控制器或控制机。上位机面向管理级用户，下位机面向底层设备控制。<br/> 2.上位机:上位监视系统，一般为计算机系统（监控软件;下位机:控制系统的现场执行系统，一般为PLC等设备。<br/> 3上位机是指工业控制中位于较高层次的计算机，一般是指电脑;而下位机是直接控制设备获取设备状况的的计算机，一般是指PLC/单片机之类的。<br/> 4.经验：通常工控机，工作站，触摸屏作为上位机;而通信控制PLC，单片机等作为下位机，从而控制相关设备元件和驱动装置。</strong></p>\n<h1><a id=\"_267\"></a>四、总结</h1>\n<p><strong>后面博主会继续为大家带来 C/C++后端实习经验大礼包的其他内容,希望大家喜欢,撒花~~,另外根据博主的亲身实习经验,自学能力不管是面试还是实习过程中都非常受青睐, 程序员行业是一个需要终身学习的行业，大部分时间别人教你的东西只能作为一个参考,而且自学这种能力可以让人感觉到了无限的可能和创造性,跨越认识边界,不受限制的感觉真的很奇妙</strong><br/> <strong>每日一句:不是因为有希望才去努力,而是努力了,才能看到希望。成功重在努力与坚持,抓住时机,就趁现在!与大家共勉!!!</strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}