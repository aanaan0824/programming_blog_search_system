{"blogid": "126450406", "writerAge": "码龄6年", "writerBlogNum": "43", "writerCollect": "162", "writerComment": "89", "writerFan": "175", "writerGrade": "4级", "writerIntegral": "924", "writerName": "凌波漫步&", "writerProfileAdress": "writer_image\\profile_126450406.jpg", "writerRankTotal": "21043", "writerRankWeekly": "2053", "writerThumb": "95", "writerVisitNum": "51851", "blog_read_count": "477", "blog_time": "于 2022-08-22 15:21:57 发布", "blog_title": "Spring声明式基于注解的缓存（2-实践篇）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night-eighties\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_1\">一、序言</a></li><li><a href=\"#_9\">二、使用示例</a></li><li><ul><li><a href=\"#1_10\">1、配置</a></li><li><ul><li><a href=\"#1_applicationproperties_11\">(1) application.properties</a></li><li><a href=\"#2_RedisCacheManager_25\">(2) 基于Redis缓存的CacheManager配置</a></li></ul>\n</li><li><a href=\"#2_54\">2、注解运用测试用例</a></li><li><ul><li><a href=\"#1_key_116\">(1) 指定key条件式缓存</a></li><li><a href=\"#2_Optional_155\">(2) 返回值为Optional类型条件式缓存</a></li><li><a href=\"#3_key_190\">(3) 不指定key条件式缓存</a></li><li><a href=\"#4_key_213\">(4) 指定key删除缓存</a></li><li><a href=\"#5_key_246\">(5) 指定key更新缓存</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_282\">三、结语</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>一、序言</h1>\n<p>在前面 <a href=\"https://blog.csdn.net/lingbomanbu_lyl/article/details/126224449?spm=1001.2014.3001.5501\">Spring声明式基于注解的缓存（1-理论篇）</a>一节中我们大致介绍了基于注解的缓存抽象相关理论知识，包括常用注解<code>@Cacheable</code>、<code>@CachePut</code>、<code>@CacheEvict</code>、<code>@Caching</code>和<code>@CacheConfig</code>，还有缓存相关组件<code>CacheManager</code>和<code>CacheResolver</code>的作用。</p>\n<p>这篇是实战环节，主要会包含<strong>缓存相关注解的应用</strong>。</p>\n<hr/>\n<br/>\n<h1><a id=\"_9\"></a>二、使用示例</h1>\n<h2><a id=\"1_10\"></a>1、配置</h2>\n<h3><a id=\"1_applicationproperties_11\"></a>(1) application.properties</h3>\n<pre><code class=\"prism language-yaml\">spring.redis.host=127.0.0.1\nspring.redis.port=6379\nspring.redis.password=lyl\nspring.redis.database=0\nspring.redis.timeout=1000ms\nspring.redis.lettuce.pool.min<span class=\"token punctuation\">-</span>idle=0\nspring.redis.lettuce.pool.max<span class=\"token punctuation\">-</span>idle=8\nspring.redis.lettuce.pool.max<span class=\"token punctuation\">-</span>active=50\nspring.redis.lettuce.pool.max<span class=\"token punctuation\">-</span>wait=1000ms\nspring.redis.lettuce.pool.time<span class=\"token punctuation\">-</span>between<span class=\"token punctuation\">-</span>eviction<span class=\"token punctuation\">-</span>runs=30000ms\n</code></pre>\n<h3><a id=\"2_RedisCacheManager_25\"></a>(2) 基于Redis缓存的CacheManager配置</h3>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@EnableCaching</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisCacheConfig</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> KEY_SEPERATOR <span class=\"token operator\">=</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * 自定义CacheManager，具体配置参考{@link org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration}\n\t * @param redisConnectionFactory 自动配置会注入\n\t * @return\n\t */</span>\n\t<span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"redisCacheManager\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisCacheManager</span> <span class=\"token function\">redisCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> redisConnectionFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">RedisSerializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> keySerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">RedisSerializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> valueSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericJackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">RedisCacheConfiguration</span> cacheConfig <span class=\"token operator\">=</span> <span class=\"token class-name\">RedisCacheConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token function\">defaultCacheConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">serializeKeysWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SerializationPair</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromSerializer</span><span class=\"token punctuation\">(</span>keySerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">serializeValuesWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SerializationPair</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromSerializer</span><span class=\"token punctuation\">(</span>valueSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">computePrefixWith</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">-&gt;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>KEY_SEPERATOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">RedisCacheManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>redisConnectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">cacheDefaults</span><span class=\"token punctuation\">(</span>cacheConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>备注：上面我们指定了 <code>key</code>和<code>value</code>的序列化器，还有缓存key的拼接策略。</p>\n</blockquote>\n<br/>\n<h2><a id=\"2_54\"></a>2、注解运用测试用例</h2>\n<p><code>SpringCacheService</code>定义了相关的缓存操作，如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@CacheConfig</span><span class=\"token punctuation\">(</span>cacheManager <span class=\"token operator\">=</span> <span class=\"token string\">\"redisCacheManager\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringCacheService</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token comment\">/**\n\t * key：缓存key名称，支持SPEL\n\t * value：缓存名称\n\t * condition：满足条件可缓存才缓存结果，支持SPEL\n\t * unless：满足条件结果不缓存，支持SPEL\n\t * @param stuNo\n\t * @return\n\t */</span>\n\t<span class=\"token annotation punctuation\">@Cacheable</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">=</span> <span class=\"token string\">\"#stuNo\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"student-cache\"</span><span class=\"token punctuation\">,</span> condition <span class=\"token operator\">=</span> <span class=\"token string\">\"#stuNo gt 0\"</span><span class=\"token punctuation\">,</span> unless <span class=\"token operator\">=</span> <span class=\"token string\">\"#result eq null\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">StudentDO</span> <span class=\"token function\">getStudentByNo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> stuNo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">StudentDO</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StudentDO</span><span class=\"token punctuation\">(</span>stuNo<span class=\"token punctuation\">,</span> <span class=\"token string\">\"liuyalou\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"模拟从数据库中读取：\"</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> student<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/**\n\t * 不指定key，默认会用{@link org.springframework.cache.interceptor.SimpleKeyGenerator}\n\t * 如果方法无参数则返回空字符串，只有一个参数则返回参数值，两个参数则返回包含两参数的SimpleKey\n\t * @param username\n\t * @param age\n\t * @return\n\t */</span>\n\t<span class=\"token annotation punctuation\">@Cacheable</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"user-cache\"</span><span class=\"token punctuation\">,</span> unless <span class=\"token operator\">=</span> <span class=\"token string\">\"#result eq null\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDO</span> <span class=\"token function\">getUserByUsernameAndAge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">UserDO</span> userDo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserDO</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"模拟从数据库中读取：\"</span> <span class=\"token operator\">+</span> userDo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> userDo<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Cacheable</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">=</span> <span class=\"token string\">\"#stuNo + '_' +#stuName\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"student-cache\"</span><span class=\"token punctuation\">,</span> unless <span class=\"token operator\">=</span> <span class=\"token string\">\"#result?.stuName eq null\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StudentDO</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getStudentByNoAndName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> stuNo<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> stuName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stuNo <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token class-name\">StudentDO</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StudentDO</span><span class=\"token punctuation\">(</span>stuNo<span class=\"token punctuation\">,</span> stuName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"模拟从数据库中读取：\"</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@CacheEvict</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"student-cache\"</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"#stuNo\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeStudentByStudNo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> stuNo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"从数据库删除数据，key为\"</span> <span class=\"token operator\">+</span> stuNo <span class=\"token operator\">+</span> <span class=\"token string\">\"的缓存将会被删\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@CachePut</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"student-cache\"</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"#student.stuNo\"</span><span class=\"token punctuation\">,</span> condition <span class=\"token operator\">=</span> <span class=\"token string\">\"#result ne null\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">StudentDO</span> <span class=\"token function\">updateStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StudentDO</span> student<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据库进行了更新，检查缓存是否一致\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> student<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"1_key_116\"></a>(1) 指定key条件式缓存</h3>\n<p>这里我们定义了名为<code>student-cache</code>，key为<code>1</code>的缓存，以及是否缓存的两个条件：</p>\n<ul><li>如果<code>stuNo</code>小于0则不缓存。</li><li>如果方法执行结果不为空才缓存。</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n\t * key：缓存key名称，支持SPEL\n\t * value：缓存名称\n\t * condition：满足条件可缓存才缓存结果，支持SPEL\n\t * unless：满足条件结果不缓存，支持SPEL\n\t * @param stuNo\n\t * @return\n\t */</span>\n\t<span class=\"token annotation punctuation\">@Cacheable</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">=</span> <span class=\"token string\">\"#stuNo\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"student-cache\"</span><span class=\"token punctuation\">,</span> condition <span class=\"token operator\">=</span> <span class=\"token string\">\"#stuNo gt 0\"</span><span class=\"token punctuation\">,</span> unless <span class=\"token operator\">=</span> <span class=\"token string\">\"#result eq null\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">StudentDO</span> <span class=\"token function\">getStudentByNo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> stuNo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">StudentDO</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StudentDO</span><span class=\"token punctuation\">(</span>stuNo<span class=\"token punctuation\">,</span> <span class=\"token string\">\"liuyalou\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"模拟从数据库中读取：\"</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> student<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\">\t<span class=\"token annotation punctuation\">@Test</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getStudentByNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">StudentDO</span> studentDo <span class=\"token operator\">=</span> springCacheService<span class=\"token punctuation\">.</span><span class=\"token function\">getStudentByNo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>studentDo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>控制台输出如下，如果Redis中没有该<code>student-cache:1</code>对应的值，则会执行方法体的代码。</p>\n<pre><code class=\"prism language-bash\">模拟从数据库中读取：StudentDO<span class=\"token punctuation\">[</span>stuName<span class=\"token operator\">=</span>liuyalou,stuNo<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n程序执行结果为: StudentDO<span class=\"token punctuation\">[</span>stuName<span class=\"token operator\">=</span>liuyalou,stuNo<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>该方法执行后，让我们看看Redis中的key，可以看到多了<code>student-cache:1</code>的缓存键值对信息。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b6e6ed10ee8c4f77b3b310a1f71feff9.png\"/></p>\n<blockquote>\n<p>备注：当再次执行该方法时，不会执行方法体逻辑，而是从Redis中获取对应缓存key的值。</p>\n</blockquote>\n<h3><a id=\"2_Optional_155\"></a>(2) 返回值为Optional类型条件式缓存</h3>\n<p>这里我们自定义了名为<code>student-cache</code>，key为<code>stuNo_stuName</code>的缓存，方法返回参数为<code>Optional</code>类型。如果<code>Optional</code>的值为空，则方法的执行结果不会被缓存。</p>\n<pre><code class=\"prism language-java\">\t<span class=\"token annotation punctuation\">@Cacheable</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">=</span> <span class=\"token string\">\"#stuNo + '_' +#stuName\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"student-cache\"</span><span class=\"token punctuation\">,</span> unless <span class=\"token operator\">=</span> <span class=\"token string\">\"#result?.stuName eq null\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StudentDO</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getStudentByNoAndName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> stuNo<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> stuName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stuNo <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token class-name\">StudentDO</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StudentDO</span><span class=\"token punctuation\">(</span>stuNo<span class=\"token punctuation\">,</span> stuName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"模拟从数据库中读取：\"</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\">\t<span class=\"token annotation punctuation\">@Test</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getStudentByNoAndName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StudentDO</span><span class=\"token punctuation\">&gt;</span></span> studentDo <span class=\"token operator\">=</span> springCacheService<span class=\"token punctuation\">.</span><span class=\"token function\">getStudentByNoAndName</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Nick\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"程序执行结果为: \"</span> <span class=\"token operator\">+</span> studentDo<span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>备注：<code>#result</code>指向的不是<code>Optional</code>实例，而是<code>Student</code>实例，因为<strong>Optional</strong>中的值可能为null，这里我们用了<code>安全导航操作符?</code>。</p>\n</blockquote>\n<p>控制台输出：</p>\n<pre><code class=\"prism language-java\">模拟从数据库中读取：<span class=\"token class-name\">StudentDO</span><span class=\"token punctuation\">[</span>stuName<span class=\"token operator\">=</span><span class=\"token class-name\">Nick</span><span class=\"token punctuation\">,</span>stuNo<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n程序执行结果为<span class=\"token operator\">:</span> <span class=\"token class-name\">StudentDO</span><span class=\"token punctuation\">[</span>stuName<span class=\"token operator\">=</span><span class=\"token class-name\">Nick</span><span class=\"token punctuation\">,</span>stuNo<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>让我们再看下Redis中的key情况：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f3a1e2118dae42b0b0fbf93157885ef7.png\"/></p>\n<h3><a id=\"3_key_190\"></a>(3) 不指定key条件式缓存</h3>\n<p>下面的方法我们没有指定<code>key</code>属性，key的生成会用默认的key生成器<code>SimpleKeyGenerator</code>来生成。</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Cacheable</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"user-cache\"</span><span class=\"token punctuation\">,</span> unless <span class=\"token operator\">=</span> <span class=\"token string\">\"#result eq null\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDO</span> <span class=\"token function\">getUserByUsernameAndAge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">UserDO</span> userDo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserDO</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"模拟从数据库中读取：\"</span> <span class=\"token operator\">+</span> userDo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> userDo<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getUserByUsernameAndAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">UserDO</span> userDo <span class=\"token operator\">=</span> springCacheService<span class=\"token punctuation\">.</span><span class=\"token function\">getUserByUsernameAndAge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"liuyalou\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"程序执行结果为: \"</span> <span class=\"token operator\">+</span> userDo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>方法执行完后，让我们看看Redis中的key情况：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\314f501cae0e49749f4d37178362d68c.png\"/></p>\n<blockquote>\n<p>备注：可以看到<code>SimpleKeyGernerator</code>生成的key名是根据对象属性来生成的。</p>\n</blockquote>\n<h3><a id=\"4_key_213\"></a>(4) 指定key删除缓存</h3>\n<p>这个注解我们用来根据指定缓存key来清除缓存。</p>\n<pre><code class=\"prism language-java\">\t<span class=\"token annotation punctuation\">@CacheEvict</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"student-cache\"</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"#stuNo\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeStudentByStudNo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> stuNo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"从数据库删除数据，key为\"</span> <span class=\"token operator\">+</span> stuNo <span class=\"token operator\">+</span> <span class=\"token string\">\"的缓存将会被删\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\">\t<span class=\"token annotation punctuation\">@Test</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getStudentByNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">StudentDO</span> studentDo <span class=\"token operator\">=</span> springCacheService<span class=\"token punctuation\">.</span><span class=\"token function\">getStudentByNo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"程序执行结果为: \"</span> <span class=\"token operator\">+</span> studentDo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token annotation punctuation\">@Test</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeStudentByStudNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tspringCacheService<span class=\"token punctuation\">.</span><span class=\"token function\">removeStudentByStudNo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们先执行<code>getStudentByNo</code>测试用例，再执行<code>removeStudentByStudNo</code>，控制台输出如下：</p>\n<pre><code class=\"prism language-bash\">模拟从数据库中读取：StudentDO<span class=\"token punctuation\">[</span>stuName<span class=\"token operator\">=</span>liuyalou,stuNo<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n程序执行结果为: StudentDO<span class=\"token punctuation\">[</span>stuName<span class=\"token operator\">=</span>liuyalou,stuNo<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<pre><code class=\"prism language-bash\">从数据库删除数据，key为1的缓存将会被删\n</code></pre>\n<blockquote>\n<p>备注：执行完后可以看到Redis中的key会被删除。</p>\n</blockquote>\n<h3><a id=\"5_key_246\"></a>(5) 指定key更新缓存</h3>\n<p>接下来我们根据指定key更新缓存，这里我们也指定了缓存条件，只有当缓存结果不为空时才缓存。</p>\n<pre><code class=\"prism language-java\">\t<span class=\"token annotation punctuation\">@CachePut</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"student-cache\"</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"#student.stuNo\"</span><span class=\"token punctuation\">,</span> unless <span class=\"token operator\">=</span> \"#result eq <span class=\"token keyword\">null</span>”<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">StudentDO</span> <span class=\"token function\">updateStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StudentDO</span> student<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据库进行了更新，检查缓存是否一致\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> student<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-java\">\t<span class=\"token annotation punctuation\">@Test</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">StudentDO</span> oldStudent <span class=\"token operator\">=</span> springCacheService<span class=\"token punctuation\">.</span><span class=\"token function\">getStudentByNo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"原缓存内容为：\"</span> <span class=\"token operator\">+</span> oldStudent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tspringCacheService<span class=\"token punctuation\">.</span><span class=\"token function\">updateStudent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StudentDO</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Evy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">StudentDO</span> newStudent <span class=\"token operator\">=</span> springCacheService<span class=\"token punctuation\">.</span><span class=\"token function\">getStudentByNo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"更新后缓存内容为：\"</span> <span class=\"token operator\">+</span> newStudent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>控制台输出为：</p>\n<pre><code class=\"prism language-bash\">原缓存内容为：StudentDO<span class=\"token punctuation\">[</span>stuName<span class=\"token operator\">=</span>Evy,stuNo<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n数据库进行了更新，检查缓存是否一致\n更新后缓存内容为：StudentDO<span class=\"token punctuation\">[</span>stuName<span class=\"token operator\">=</span>Evy,stuNo<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>最终Redis中的key信息如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7603062adb154d29859b866894d39270.png\"/></p>\n<hr/>\n<br/>\n<h1><a id=\"_282\"></a>三、结语</h1>\n<p>总得来说，声明式缓存抽象和声明式事务一样，使用起来都比较简单。更多的细节描述可以参考：<a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#cache\">Spring缓存抽象官方文档</a>。</p>\n<p>有同学可能会发现，Spring提供的这些注解不支持过期时间的设置，官方文档也有一些解释，如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\66e0efe046ae4bb4a18f59cce5b6766b.png\"/><br/> 官方提供的建议是通过缓存提供器来实现，其实就是我们可以通过自定义<code>CacheManager</code>来实现。缓存抽象只是一种逻辑抽象，而不是具体的缓存实现，具体怎么写缓存，缓存写到哪里应该由缓存管理器来实现。</p>\n<p>下一节我们会通过自定义<code>CacheResolver</code>、<code>RedisCacheManager</code>、以及相关Cache注解来实现带过期时间的缓存实现。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\91160ba30adf4d428ec91865b1b2d22e.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}