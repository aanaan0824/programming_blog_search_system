{"blogid": "126678970", "writerAge": "码龄3年", "writerBlogNum": "84", "writerCollect": "262", "writerComment": "390", "writerFan": "328", "writerGrade": "5级", "writerIntegral": "1706", "writerName": "一只咸鱼。。", "writerProfileAdress": "writer_image\\profile_126678970.jpg", "writerRankTotal": "11235", "writerRankWeekly": "409", "writerThumb": "435", "writerVisitNum": "39030", "blog_read_count": "509", "blog_time": "于 2022-09-04 00:11:40 发布", "blog_title": "Java高阶数据结构之红黑树", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2 id=\"mulu\"> </h2>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_8\">一、红黑树的概念</a></li><li><a href=\"#_27\">二、插入和调整</a></li><li><ul><li><a href=\"#_curpgu_35\">情况一: cur为红，p为红，g为黑，u存在且为红</a></li><li><a href=\"#_curpguu_42\">情况二: cur为红，p为红，g为黑，u不存在/u为黑</a></li><li><a href=\"#_curpguu_57\">情况三: cur为红，p为红，g为黑，u不存在/u为黑</a></li></ul>\n</li><li><a href=\"#_68\">四、删除</a></li><li><a href=\"#_73\">五、性能分析</a></li><li><a href=\"#_84\">六、完整代码</a></li></ul>\n</div>\n<p></p>\n<hr color=\"#000000\" size='1\"'/>\n<font color=\"#999AAA\">提示：以下是本篇文章正文内容，Java系列学习将会持续更新 </font>\n<p></p>\n<h1><a id=\"_8\"></a>一、红黑树的概念</h1>\n<p> <strong>红黑树</strong>，是一种二叉搜索树，但在每个结点上增加一个存储位表示结点的颜色，可以是<code>Red</code>或<code>Black</code>。 <font color=\"blue\">通过对任何一条从根到叶子的路径上各个结点着色方式的限制，红黑树确保没有一条路径会比其他路径长出俩倍，<strong>因而是接近平衡的</strong>。</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\37c773b42fac4e59b57c29cfee7083e6.png\"/></p>\n<p><strong>红黑树的性质:</strong></p>\n<ol><li>最长路径最多是最短路径的2倍<br/> <font color=\"orang\"><strong>原因</strong>：每条路径黑色节点数相同，则<font color=\"black\"><strong>最短路径 = 没有红色节点的路径</strong><font color=\"#999AAA\">(一般不会出现这种极端情况)；<font color=\"red\">最长路径 = 红色节点最多的路径<font color=\"#999AAA\">(由于红色节点不能连续，所以最多也就是和黑色节点数相同)。<font color=\"blue\">所以, 最长路径 = 2 x 最短路径 = 2 x 黑色节点数</font></font></font></font></font></font></li><li>每个结点不是红色就是黑色</li><li>根节点是黑色的</li><li>如果一个节点是红色的，则它的两个孩子结点是黑色的【<strong>没有2个连续的红色节点</strong>】</li><li>对于每个结点，从该结点到其所有后代叶结点的简单路径上，均包含<strong>相同数目的黑色结点</strong></li><li>每个叶子结点都是黑色的 (此处的叶子结点指的是空结点)</li></ol>\n<p><a href=\"#mulu\">回到目录…</a></p>\n<h1><a id=\"_27\"></a>二、插入和调整</h1>\n<p>红黑树是在二叉搜索树的基础上加上其平衡限制条件，因此红黑树的插入可分为两步：</p>\n<ol><li><strong>按照二叉搜索的树规则插入新节点</strong></li><li><strong>检测新节点插入后，红黑树的性质是否造到破坏</strong><br/> 因为新节点的默认颜色是红色，因此：如果其<strong>双亲节点的颜色是黑色</strong>，没有违反红黑树任何性质，则不需要调整；但当新插入节点的<strong>双亲节点颜色为红色时</strong>，就违反了性质三不能有连在一起的红色节点，此时需要对红黑树分情况来讨论。</li></ol>\n<p><font color=\"blue\"><strong>约定</strong>: cur为当前节点，p为父节点，u为叔叔节点，g为祖父节点。</font></p>\n<h2><a id=\"_curpgu_35\"></a>情况一: cur为红，p为红，g为黑，u存在且为红</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\794d7774278d448e995888ed99b884dd.png\"/></p>\n<p><strong>解决方式：将p,u改为黑，g改为红，然后把g当成cur，继续向上调整。</strong></p>\n<p><a href=\"#mulu\">回到目录…</a></p>\n<h2><a id=\"_curpguu_42\"></a>情况二: cur为红，p为红，g为黑，u不存在/u为黑</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\24f43a37eb7a45f7a2d6902a5d3c2268.png\"/></p>\n<p><strong>说明: u的情况有两种</strong></p>\n<ol><li>如果u节点不存在，则cur- -定是新插入节点，因为如果cur不是新插入节点，则cur和p一定有一个节点的颜色是黑色，就不满足性质4:每条路径黑色节点个数相同。</li><li>如果u节点存在,则其-定是黑色的，那么cur节点原来的颜色一定是黑色的,现在看到其是红色的原因是因为cur的子树在调整的过程中将cur节点的颜色由黑色改成红色。</li></ol>\n<p><strong>解决方式：</strong><br/> p为g的左孩子，cur为p的左孩子，则进行右单旋转；相反，<br/> p为g的右孩子，cur为p的右孩子，则进行左单旋转<br/> p、g变色 —— p变黑，g变红</p>\n<p><a href=\"#mulu\">回到目录…</a></p>\n<h2><a id=\"_curpguu_57\"></a>情况三: cur为红，p为红，g为黑，u不存在/u为黑</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0cd34cfba43d4044bd6049e87b2cd3bc.png\"/></p>\n<p><strong>解决方式：</strong><br/> p为g的左孩子，cur为p的右孩子，则针对p做左单旋转；相反，<br/> p为g的右孩子，cur为p的左孩子，则针对p做右单旋转<br/> 则转换成了情况2</p>\n<p><a href=\"#mulu\">回到目录…</a></p>\n<h1><a id=\"_68\"></a>四、删除</h1>\n<p><a href=\"https://www.cnblogs.com/fornever/archive/2011/12/02/2270692.html\">博客园：红黑树的删除</a><br/> <a href=\"https://blog.csdn.net/chenhuajie123/article/details/11951777\">CSDN：红黑树</a></p>\n<h1><a id=\"_73\"></a>五、性能分析</h1>\n<p>红黑树和AVL树都是高效的平衡二叉树，增删改查的时间复杂度都是O(logN)，红黑树不追求绝对平衡，其只需保证最长路径不超过最短路径的2倍，相对而言，降低了插入和旋转的次数，所以在经常进行增删的结构中性能比AVL树更优，而且红黑树实现比较简单，所以<strong>实际运用中红黑树更多</strong>。</p>\n<p><strong>红黑树的应用：</strong></p>\n<ol><li>java集合框架中的：TreeMap、TreeSet底层使用的就是红黑树</li><li>C++ STL库 – map/set、mutil_map/mutil_set</li><li>linux内核：进程调度中使用红黑树管理进程控制块，epoll在内核中实现时使用红黑树管理事件块</li><li>其他一些库：比如nginx中用红黑树管理timer等</li></ol>\n<p><a href=\"#mulu\">回到目录…</a></p>\n<h1><a id=\"_84\"></a>六、完整代码</h1>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RBTree</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">RBTreeNode</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">RBTreeNode</span> left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">RBTreeNode</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">RBTreeNode</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">COLOR</span> color<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 节点的颜色</span>\n        <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">RBTreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 默认新增节点为红色</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> COLOR<span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RBTreeNode</span> root<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 插入</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">RBTreeNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RBTreeNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n            root<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> COLOR<span class=\"token punctuation\">.</span>BLACK<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">RBTreeNode</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">RBTreeNode</span> cur <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">==</span> cur<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> cur<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                parent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n                cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                parent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n                cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 此时，cur = null</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> parent<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        node<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n        cur <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 调整颜色</span>\n        <span class=\"token comment\">// 新节点插入后，如果parent节点的颜色是红色，一定违反性质三</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">==</span> COLOR<span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">RBTreeNode</span> grandFather <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> grandFather<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">RBTreeNode</span> uncle <span class=\"token operator\">=</span> grandFather<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token punctuation\">.</span>color <span class=\"token operator\">==</span> COLOR<span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// 情况一：叔叔节点存在且为红,</span>\n                    <span class=\"token comment\">// 解决方式：将叔叔和父节点改为黑色，祖父节点改为红色</span>\n                    <span class=\"token comment\">// 如果祖父的双亲节点的颜色是红色，需要继续往上调整</span>\n                    parent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> COLOR<span class=\"token punctuation\">.</span>BLACK<span class=\"token punctuation\">;</span>\n                    uncle<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> COLOR<span class=\"token punctuation\">.</span>BLACK<span class=\"token punctuation\">;</span>\n                    grandFather<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> COLOR<span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// 把 g当成cur，继续向上调整</span>\n                    cur <span class=\"token operator\">=</span> grandFather<span class=\"token punctuation\">;</span>\n                    parent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 此时，叔叔节点不存在 || 叔叔节点存在，但是颜色是黑色</span>\n                    <span class=\"token comment\">// 再讨论cur是左孩子还是右孩子 ?</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">// 情况二</span>\n                        <span class=\"token function\">rotateR</span><span class=\"token punctuation\">(</span>grandFather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        parent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> COLOR<span class=\"token punctuation\">.</span>BLACK<span class=\"token punctuation\">;</span>\n                        grandFather<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> COLOR<span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">// 情况三</span>\n                        <span class=\"token function\">rotateL</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">RBTreeNode</span> temp <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n                        parent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n                        cur <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// parent == grandFather.right</span>\n                <span class=\"token comment\">// 以上情况是插入左边，此时是插入到右边，原理一样</span>\n                <span class=\"token class-name\">RBTreeNode</span> uncle <span class=\"token operator\">=</span> grandFather<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token punctuation\">.</span>color <span class=\"token operator\">==</span> COLOR<span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// 情况一：叔叔节点存在且为红,</span>\n                    <span class=\"token comment\">// 解决方式：将叔叔和父节点改为黑色，祖父节点改为红色</span>\n                    <span class=\"token comment\">// 如果祖父的双亲节点的颜色是红色，需要继续往上调整</span>\n                    parent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> COLOR<span class=\"token punctuation\">.</span>BLACK<span class=\"token punctuation\">;</span>\n                    uncle<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> COLOR<span class=\"token punctuation\">.</span>BLACK<span class=\"token punctuation\">;</span>\n                    grandFather<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> COLOR<span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// 把 g当成cur，继续向上调整</span>\n                    cur <span class=\"token operator\">=</span> grandFather<span class=\"token punctuation\">;</span>\n                    parent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 此时，叔叔节点不存在 || 叔叔节点存在，但是颜色是黑色</span>\n                    <span class=\"token comment\">// 再讨论cur是左孩子还是右孩子 ?</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">// 情况二</span>\n                        <span class=\"token function\">rotateL</span><span class=\"token punctuation\">(</span>grandFather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        parent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> COLOR<span class=\"token punctuation\">.</span>BLACK<span class=\"token punctuation\">;</span>\n                        grandFather<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> COLOR<span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">// 情况三</span>\n                        <span class=\"token function\">rotateR</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">RBTreeNode</span> temp <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n                        parent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n                        cur <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 在上述循环更新期间，可能会将根节点给成红色，因此此处必须将根节点改为黑色</span>\n        root<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> COLOR<span class=\"token punctuation\">.</span>BLACK<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 左单旋</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rotateL</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RBTreeNode</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// p 的母节点</span>\n        <span class=\"token class-name\">RBTreeNode</span> pp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// p 的右孩子</span>\n        <span class=\"token class-name\">RBTreeNode</span> subR <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// subR 的左孩子，可能不存在</span>\n        <span class=\"token class-name\">RBTreeNode</span> subRL <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// subR 提上去</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pp <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            pp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// pp.right == parent</span>\n            pp<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        subR<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> pp<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// p 作为 subR 的左孩子</span>\n        subR<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n        p<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> subR<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// p 与 subRL 连接</span>\n        p<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> subRL<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subRL <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            subRL<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 右单旋</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rotateR</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RBTreeNode</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// p 的父节点</span>\n        <span class=\"token class-name\">RBTreeNode</span> pp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// p 的左孩子</span>\n        <span class=\"token class-name\">RBTreeNode</span> subL <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// subL 的右孩子，可能不存在</span>\n        <span class=\"token class-name\">RBTreeNode</span> subLR <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pp <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            pp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            pp<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        subL<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> pp<span class=\"token punctuation\">;</span>\n        subL<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n        p<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> subL<span class=\"token punctuation\">;</span>\n        p<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> subLR<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subLR <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            subLR<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 打印二叉树, 中序遍历的结果\n     **/</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">inOrder</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"是否标准红黑树: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">isValidRBTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 中序遍历</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">inOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> list<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RBTreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">inOrder</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">inOrder</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * 检验是否符合红黑树的性质\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValidRBTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 空树也是红黑树</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 根节点是黑色</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>color <span class=\"token operator\">!=</span> COLOR<span class=\"token punctuation\">.</span>BLACK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"违反了性质2：根节点不是黑色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 获取单条路径中节点的个数</span>\n        <span class=\"token keyword\">int</span> blackCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">RBTreeNode</span> cur <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>color <span class=\"token operator\">==</span> COLOR<span class=\"token punctuation\">.</span>BLACK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                blackCount <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 具体的检验方式</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">_isValidRBtree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> blackCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 检验是否存在连续的红色节点</span>\n    <span class=\"token comment\">// 检验是否每条路径黑色节点数相同</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">_isValidRBtree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RBTreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pathCount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> blackCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 遇到一个黑色节点，统计当前路径中黑色节点个数</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>color <span class=\"token operator\">==</span> COLOR<span class=\"token punctuation\">.</span>BLACK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            pathCount <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 验证性质4</span>\n        <span class=\"token class-name\">RBTreeNode</span> parent <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">==</span> COLOR<span class=\"token punctuation\">.</span>RED <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>color <span class=\"token operator\">==</span> COLOR<span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"违反了性质4：有连在一起的红色节点\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 验证性质5</span>\n        <span class=\"token comment\">// 如果是叶子节点，则一条路径已经走到底，检验该条路径中黑色节点总个数是否与先前统计的结果相同</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathCount <span class=\"token operator\">!=</span> blackCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"违反了性质5：每条路径中黑色节点个数不一致\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 以递归的方式检测 root 的左右子树</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">_isValidRBtree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> pathCount<span class=\"token punctuation\">,</span> blackCount<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                <span class=\"token function\">_isValidRBtree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> pathCount<span class=\"token punctuation\">,</span> blackCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><a href=\"#mulu\">回到目录…</a></p>\n<hr color=\"#000000\" size='1\"'/>\n<p><strong>总结</strong>:<br/> <font color=\"#999AAA\">提示：这里对文章进行总结：<br/> 以上就是今天的学习内容，本文是Java高阶数据结构的学习，剖析红黑树底层原理，红黑树的时间复杂度，红黑树的插入以及插入时的平衡调整。之后的学习内容将持续更新！！！</font></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}