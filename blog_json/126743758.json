{"blogid": "126743758", "writerAge": "码龄1年", "writerBlogNum": "571", "writerCollect": "249", "writerComment": "31", "writerFan": "9633", "writerGrade": "6级", "writerIntegral": "5925", "writerName": "m0_67265464", "writerProfileAdress": "writer_image\\profile_126743758.jpg", "writerRankTotal": "2987", "writerRankWeekly": "659", "writerThumb": "61", "writerVisitNum": "250501", "blog_read_count": "17", "blog_time": "于 2022-09-07 13:23:41 发布", "blog_title": "JVM内存模型及分区", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>Java虚拟机在程序执行过程会把jvm的内存分为若干个不同的数据区域来管理，这些区域有自己的用途，以及创建和销毁时间。<br/> jvm管理的内存区域包括以下几个区域：<br/> <img alt=\"这里写图片描述\" src=\"https://img-blog.csdn.net/20160530222930189\"/></p>\n<p><strong>栈区：</strong><br/> 栈分为java虚拟机栈和本地方法栈</p>\n<ul><li>重点是Java虚拟机栈，它是线程<strong>私有的</strong>，生命周期与线程相同。</li><li>每个方法执行都会创建一个栈帧，用于存放<strong>局部变量表，操作栈，动态链接，方法出口</strong>等。每个方法从被调用，直到被执行完。对应着一个栈帧在虚拟机中从入栈到出栈的过程。</li><li>通常说的栈就是指<strong>局部变量表</strong>部分，存放编译期间可知的8种基本数据类型，及对象引用和指令地址。局部变量表是在<strong>编译期间</strong>完成分配，当进入一个方法时，这个栈中的局部变量分配内存大小是确定的。</li><li>会有两种异常StackOverFlowError和 OutOfMemoneyError。当线程请求栈深度大于虚拟机所允许的深度就会抛出StackOverFlowError错误；虚拟机栈动态扩展，当扩展无法申请到足够的内存空间时候，抛出OutOfMemoneyError。</li><li>本地方法栈 为虚拟机使用到本地方法服务（native）</li></ul>\n<p><strong>堆区：</strong></p>\n<ul><li>堆被所有<strong>线程共享</strong>区域，在虚拟机启动时创建，唯一目的存放<strong>对象实例</strong>。</li><li>堆区是gc的主要区域，通常情况下分为两个区块年轻代和年老代。更细一点年轻代又分为Eden区最要放新创建对象，From survivor 和 To survivor 保存gc后幸存下的对象，默认情况下各自占比 8:1:1。<br/> 不过很多文章介绍分为3个区块，把方法区算着为永久代。这大概是基于Hotspot虚拟机划分， 然后比如IBM j9就不存在永久代概论。不管怎么分区，都是存放对象实例。</li><li>会有异常OutOfMemoneyError</li></ul>\n<p><strong>方法区：</strong></p>\n<ul><li>被所有<strong>线程共享</strong>区域，用于存放<strong>已被虚拟机加载</strong>的类信息，常量，静态变量等数据。被Java虚拟机描述为堆的一个逻辑部分。习惯是也叫它永久代（permanment generation）</li><li>垃圾回收很少光顾这个区域，不过也是需要回收的，主要针对常量池回收，类型卸载。</li><li>常量池用于存放<strong>编译期</strong>生成的各种字节码和符号引用，常量池具有一定的动态性，里面可以存放编译期生成的常量；<strong>运行期间</strong>的常量也可以添加进入常量池中，比如string的intern()方法。</li></ul>\n<p><strong>程序计数器</strong>：</p>\n<ul><li>当前线程所执行的行号指示器。通过改变计数器的值来确定下一条指令，比如循环，分支，跳转，异常处理，线程恢复等都是依赖计数器来完成。</li><li>Java虚拟机多线程是通过线程轮流切换并分配处理器执行时间的方式实现的。为了线程切换能恢复到正确的位置，每条线程都需要一个<strong>独立的程序计数器</strong>，所以它是线程私有的。</li><li>唯一一块Java虚拟机<strong>没有</strong>规定任何OutofMemoryError的区块</li></ul>\n<p>jvm分区大致就这个块，具体里面还有很多细节，及其各个模块工作的算法都很复杂，这里只是对分区进行简单介绍，掌握一些基本的知识点。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}