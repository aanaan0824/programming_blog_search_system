{"blogid": "121341057", "writerAge": "码龄2年", "writerBlogNum": "12", "writerCollect": "154", "writerComment": "5", "writerFan": "33", "writerGrade": "2级", "writerIntegral": "161", "writerName": "DayGas", "writerProfileAdress": "writer_image\\profile_121341057.jpg", "writerRankTotal": "102606", "writerRankWeekly": "960883", "writerThumb": "35", "writerVisitNum": "39710", "blog_read_count": "4185", "blog_time": "于 2021-11-15 19:22:58 发布", "blog_title": "命令执行漏洞", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1 id=\"RaHm1\">前言：</h1>\n<p id=\"ub746bb40\">坚持就是有点麻烦，但是你只要做下去就会感到习惯和快乐的事。</p>\n<h1 id=\"pRoQh\">一、命令执行漏洞概念</h1>\n<p id=\"u67d25e3d\">什么是命令执行漏洞？命令执行漏洞就是服务器端没有对客户端用户输入的命令进行过滤，导致用户可以通过任意拼接系统命令，使服务器端成功执行任意系统命令。为什么客户端能直接对服务器执行命令呢，因为在服务器安装的web程序，web框架和web组件等外部程序有时候去需要调用执行命令的函数，所以如果没有对客户端用户输入的命令进行过滤，就会使得用户通过外部程序直接编写和执行系统的命令函数。</p>\n<h1 id=\"Pljli\">二、命令执行原理</h1>\n<p id=\"u31bf3bbd\">命令执行漏洞主要是服务端没有对执行命令的函数做出过滤导致的。我们可通过编写一些系统函数来输入疑似存在命令执行接口的地方，来检测是否此接口是否存在命令执行漏洞。</p>\n<h2 id=\"eioUh\">1. 常见的执行系统命令的函数有：</h2>\n<p id=\"uf10fb2bd\">windows系统：</p>\n<p id=\"u1be7082a\">whoami:查看服务器用户名</p>\n<p id=\"u23cfb368\">ipconfig:查看本机IP地址子网掩码以及默认网关等</p>\n<p id=\"uc88eff07\">dir:查看本目录文件</p>\n<p id=\"uc0e1ad9f\">Linux系统：</p>\n<p id=\"u8d99d939\">whoami:查看服务器用户名</p>\n<p id=\"u34d59b26\">ifconfig:查看本机IP地址子网掩码以及默认网关等</p>\n<p id=\"u95ad7c15\">ls:列出本目录文件</p>\n<p id=\"uddd479fa\">pwd:查看现目录的绝对路径</p>\n<p id=\"u3268faef\">除了拼接函数外，我们还可以使用命令连接符来组合这些系统函数增加命令执行成功率。常见的命令连接符有（“|，&amp;&amp;，||”这三个连接符都是Windows系统与Linux系统共有的，而“&amp;”是Windows系统特有，“；”是Linux系统特有的）：</p>\n<ul><li id=\"u105e1a99\">|</li></ul>\n<p id=\"u34636856\">管道操作符</p>\n<p id=\"ubceec75f\">A|B:无论执行的A命令是否正确，B命令都执行</p>\n<ul><li id=\"u6c2a4fdb\">&amp;&amp;</li></ul>\n<p id=\"udb1f8610\">逻辑与</p>\n<p id=\"ud0b9ac9b\">A&amp;&amp;B：只有在A命令成功执行的前提下，B命令才可以执行</p>\n<ul><li id=\"ue9736de3\">||</li></ul>\n<p id=\"u6b8e69af\">逻辑或</p>\n<p id=\"u728ed773\">A||B：只有在A命令没有执行失败的前提下，B命令才可以执行</p>\n<ul><li id=\"ue8ffa846\">&amp;</li></ul>\n<p id=\"ub90fcccc\">A&amp;B:不管A是否执行成功，B命令都会执行</p>\n<ul><li id=\"ud02a636b\">;</li></ul>\n<p id=\"u822de6f1\">A&amp;B:不管A是否执行成功，B命令都会执行</p>\n<h2 id=\"w4abf\">2. 代码命令执行</h2>\n<p id=\"u4a8c8185\">一般我们能通过外部程序直接调用的系统命令的接口并不多，但是有些外部程序使用的代码可以也导致命令执行。 PHP代码执行漏洞是将PHP代码注入到Web应用中通过Web容器执行 。例如PHP中的 eval()、assert()、``、system()、exec()、shell_exec()、passthru()、 pcntl_exec()等（Windows上未对反斜杠进行过滤），当用户可以控制命令执行函数中的参数时，将可以注入恶意系统命令到正常命令中，造成命令执行攻击。</p>\n<p id=\"u69ba9033\">我们来解释一下这些命令的意思</p>\n<p id=\"u37071c4c\"><strong>system()：</strong></p>\n<p id=\"u2db17b01\">system函数是php函数通过调用外部程序命令来实现与系统命令函数交互达到执行系统函数的目的，system将执行结果显示输出</p>\n<p id=\"u796d0e28\">举例</p>\n<p id=\"ucdcdeabe\">创建一个123.php文件，在里面写入</p>\n<pre><code>&lt;?php\nsystem(\"whoami\");\n?&gt;</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"ucd15d1e3\" src=\"image\\22762b7f2c216258a7341b3ec5d83e0d.png\" width=\"352\"/></p>\n<p id=\"u31e91d64\">执行命令whoami并输出</p>\n<p id=\"u8779e3fe\"><strong>passthru()</strong></p>\n<p id=\"u5e60c9e7\">passthru()函数（一般用于UNIX系统）和system函数类似，执行命令并且可以将输出结果回显</p>\n<pre><code>&lt;?php\necho\"&lt;pre&gt;\";\npassthru(\"ipconfig\");\necho\"&lt;/pre&gt;\";\n?&gt;</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"u2fd9a084\" src=\"image\\a6316262c670848ae66b721f870ec1ff.png\" width=\"322\"/></p>\n<p id=\"udc256dfd\"></p>\n<p id=\"uea286b80\"></p>\n<p></p>\n<p id=\"u044e76fc\">exec函数也是命令执行函数。作用与system差不多，只不过exec函数可以执行，但是不回显结果，只返回执行结果的最后一行。</p>\n<p id=\"ue8849b96\">要回显结果可以加上echo函数</p>\n<pre><code>&lt;?php\nexec(\"ipconfig\");\n?&gt;</code></pre>\n<p id=\"u8211e337\"></p>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"qDQsr\" src=\"image\\a2ee745412d502b16b0b7ee8808e14f5.png\" width=\"351\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"ud496661c\" src=\"image\\45dca7471f6e160dc3c6f2f8859fb0ee.png\" width=\"441\"/></p>\n<p id=\"uc68f4be4\"></p>\n<p id=\"ubb083337\"><strong>shell_exec(）</strong></p>\n<p id=\"u2788a62b\">与exec函数差不多，执行命令函数，但是不回显，我们可以使用echo函数把执行结果显示出来</p>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"u678448e6\" src=\"image\\11a0bd2aab1542908023a3ea5e36570d.png\" width=\"415\"/></p>\n<p id=\"u9cb20707\"></p>\n<p id=\"uef6da39e\"></p>\n<p id=\"ud32157e1\"><strong>代码执行漏洞</strong></p>\n<p id=\"ub674d8b1\">由于服务器对危险函数过滤不严，导致用户输入的一些字符串可以被转换成代码来执行，从而造成代码执行漏洞。</p>\n<p id=\"uf3e0e9ea\">下面介绍一些危险函数，它们可以将输入的字符串转化为代码。</p>\n<p id=\"u931cb839\"><strong>eval()</strong></p>\n<p id=\"u87590df9\">eval() 函数可将括号里面的字符串转换为代码执行，字符串必须是合法的php代码并且用分号结束，这样才能执行代码命令。</p>\n<p id=\"ud51d5de5\">创建text.php文件。里面代码是</p>\n<pre><code>&lt;?php\n$cmd=$_GET[\"cmd\"];\neval(\"$cmd\");\n?&gt;</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"u4e567bc9\" src=\"image\\489db4ddf86911b356793ce7b54e8fe9.png\" width=\"286\"/></p>\n<p id=\"u28a2f87e\">然后我们往这个文件名后面加上?cmd=phpinfo();</p>\n<p id=\"u16078029\"></p>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"u1c114c98\" src=\"image\\ceb7786d5dcdc36a9c463a5869a0ce2d.png\" width=\"792\"/></p>\n<p id=\"u2e646320\">发现代码被后台解析了，并且成功执行了，但是一般情况下这个页面是不能显示出来了，是被过滤掉的，因为这样会暴露里面的配置信息。而这里是因为eval函数我们才能实现代码执行。</p>\n<p id=\"u0a695277\">这里说一下php中的phpinf代码是表示输出php的配置信息的。如果服务端没有过滤eval这个危险注入函数的话，就会导致代码执行漏洞。</p>\n<p id=\"u12e84090\"><strong>assert() </strong></p>\n<p id=\"u51488ef7\">assert()函数是一个断言函数，在php里面判断一个表达式是否成立，返回真或假。如果直接将PHP代码传入也会被执行</p>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"u8c2ef0fd\" src=\"image\\a94d6a33c7d3ba63f589bff770bfdd46.png\" width=\"671\"/></p>\n<p id=\"ud960929d\"></p>\n<h1 id=\"ABh6Y\">三、命令执行漏洞演示</h1>\n<p id=\"ucd5786ba\">我们只是通过文字解说的话太抽象了，听起来还是懵懂，所以我们来通过使用DVWA靶场来为大家演示命令执行漏洞。</p>\n<p id=\"u672eb3d2\">首先我们观察这个页面得知，这里是一个ping装置，就是说类似于我们使用cmd窗口ping的功能</p>\n<p id=\"u027e8659\">一般来说ping装置只能输入ip进行ping，而输入其他系统则不能成功执行的。这时候如果我们能执行除了ip之外的系统命令，就证明存在命令执行漏洞了。</p>\n<p id=\"u0ae9fd1d\">LOW等级：</p>\n<p id=\"u2ba09ab5\">我们输入ip试试，可以执行成功</p>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"u04d52171\" src=\"image\\59249e093a2f711d5c4f158b91184af7.png\" width=\"454\"/></p>\n<p id=\"u62c0fa19\">再试一下直接输入其他系统命令。</p>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"u8c2af951\" src=\"image\\35b693e2c0c327e604b32e8c63a007fd.png\" width=\"290\"/></p>\n<p id=\"u5b4dc3b2\">发现不成功。</p>\n<p id=\"uf3025718\">说明这里需要使用命令连接符拼接。</p>\n<p id=\"uefffcd58\">然后我们查看一下源码，发现没有任何防护，也就是说我们可以通过这个装置任意执行其他命令</p>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"u1ed37488\" src=\"image\\6c286d1e852a5edf1b3c49ffd9c53383.png\" width=\"447\"/></p>\n<p id=\"u9acac188\">我们试一下拼接系统命令来查看服务器的用户，发现这里居然能执行成功</p>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"u1bf5f79c\" src=\"image\\d7f471c21c34eff70dd68524f0574eb0.png\" width=\"667\"/></p>\n<p id=\"u25c01d4a\">medium等级</p>\n<p id=\"u7f9b790a\">我们再次输入上次那个low等级的命令函数试一下，发现执行失败</p>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"u730822ac\" src=\"image\\b289d81f6b2fa655dadf89e170872b21.png\" width=\"441\"/></p>\n<p id=\"u154b1068\">我们看一下源码，发现这里多了一层防护，过滤掉了&amp;&amp;和；符号</p>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"u6b26a050\" src=\"image\\f01ebb9f6b58402da135856f0b074c94.png\" width=\"480\"/></p>\n<p id=\"u54a473d2\">但是命令连接符可不止这两个啊，既然这两个被过滤掉了，我们使用其他命令</p>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"u601d75f0\" src=\"image\\da4f0cc00b3aa87711874a207efa5f3f.png\" width=\"444\"/></p>\n<p id=\"u62c53d6f\">high等级</p>\n<p id=\"ue814a466\">我们尝试输入了所有的命令连接符去拼接系统命令了，发现都不能执行系统命令了，为啥呢，我们查看一下源码</p>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"u0459812e\" src=\"image\\e5f39343fc1f8354fc0124204b2a8a9e.png\" width=\"453\"/></p>\n<p id=\"ud3112c7c\">发现所有的连接符都被过滤掉了，这个可怎么办啊，难道没有办法了吗，不，既然这里直接拼接的命令不成功，那我们试一下绕过</p>\n<p id=\"udf35ec77\">使用空格绕过</p>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"u99ef5f37\" src=\"image\\4640c2051732151373354248489505f4.png\" width=\"404\"/></p>\n<p id=\"u0b091dd7\">成功绕过。</p>\n<h1 id=\"xw8Y4\">四、漏洞危害</h1>\n<p id=\"uaedb74bf\">1. 继承Web服务器程序的权限，去执行系统命令或读写文件</p>\n<p id=\"ue124c232\">2. 可以反弹shell</p>\n<h1>五、安全防护</h1>\n<p>1. 服务端过滤危险函数</p>\n<p>2. 使用自定义函数或函数库来代替外部命令</p>\n<p><br/> ————————————————<br/> 版权声明：本文为CSDN博主「bk天气」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br/> 原文链接：https://blog.csdn.net/m0_49577923/article/details/121341057</p>\n</div>\n</div>"}