{"blogid": "126455194", "writerAge": "码龄7年", "writerBlogNum": "157", "writerCollect": "1278", "writerComment": "314", "writerFan": "869", "writerGrade": "6级", "writerIntegral": "6703", "writerName": "ithewei", "writerProfileAdress": "writer_image\\profile_126455194.jpg", "writerRankTotal": "2579", "writerRankWeekly": "5360", "writerThumb": "460", "writerVisitNum": "618574", "blog_read_count": "1801", "blog_time": "于 2022-08-28 10:10:44 发布", "blog_title": "国产网络库libhv开源四周年回顾", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><code>libhv</code>是一个跨平台的<code>c/c++</code>网络库，本文写在<code>libhv</code>开源四周年之际，借机回顾了<code>libhv</code>的发展历程。</p>\n<p><code>github</code>地址：<a href=\"https://github.com/ithewei/libhv\">https://github.com/ithewei/libhv</a></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_7\">无心插柳，扬长避短</a></li><li><a href=\"#_21\">精心呵护，深耕细作</a></li><li><a href=\"#_54\">齐心协力，厚积薄发</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_7\"></a>无心插柳，扬长避短</h2>\n<hr/>\n<p><strong>时光荏苒，如白驹过隙。<br/> 往事回首，恰插柳成荫。</strong></p>\n<p><a href=\"https://github.com/ithewei/libhv\">libhv</a> 的 <a href=\"https://github.com/ithewei/libhv/commit/c74df3b33d9a6dc417ede990a2232065bb9ae25d\">first commit</a> 记录是在2018年8月28日，芳龄25的我在阅面科技搬砖，刚刚从<code>PC</code>客户端转型做<code>linux</code>服务端开发（想扒拉我牛马一生的可以看我的另一篇博客，<a href=\"https://hewei.blog.csdn.net/article/details/78298266\">一个程序猿的自传</a>）。</p>\n<p><code>libhv</code>最初只是我个人积累的一些跨平台基础设施代码片段，连库都算不上，如时间、日志、线程、字符串等，也就是现在的 <a href=\"https://github.com/ithewei/libhv/tree/master/base\">base模块</a>，她最初也不叫<code>libhv</code>，叫<code>hw</code>（不是碰瓷华为，也不是硬件，仅仅是我个人名字的首字母缩写），后面因为在项目中使用过<code>libevent、libuv</code>（c语言领域大名鼎鼎的网络库），但总觉得有不好用或者不好理解的地方，如<code>libevent</code>的<code>bufferevent</code>就非常难以理解，函数命名也不统一，参数里有很多宏定义，造成了极大的认知负担；<code>libuv</code>的命名倒是非常规整，统一以<code>uv_</code>作为前缀，唯一我认为极不好用的一点是<code>uv_write</code>函数，需要扩展<code>uv_write_t</code>结构体构造一个写请求，然后在写完成回调里去释放<code>uv_buf_t</code>和这个写请求结构体，对于非阻塞写的内存管理完全交给用户，没有提供一个便捷的内置实现，这里对新手来说非常难以使用好，每次写请求都需要<code>malloc/free</code>的示例写法绝不是合理的。关于常见<code>c/c++</code>网络库的<code>echo-server</code>写法比较以及<code>ping-pong</code>性能测试见 <a href=\"https://github.com/ithewei/libhv/tree/master/echo-servers\">echo-servers 目录</a>。</p>\n<p>于是我发奋图强，凿壁借二大爷家的光，走马观花了<code>libevent、libev、libuv、nginx、redis</code>源码，给<code>hw</code>加上了<a href=\"https://github.com/ithewei/libhv/tree/master/event\">event 事件循环模块</a>，封装了<code>select、poll、epoll、kqueue</code>等多种IO多路复用模型，（ <code>libhv</code>拥有了<code>event</code>模块，就犹如张无忌获得了九阳神功这门高深内功，开发应用层协议那就是小菜一碟），并易名为<code>libhv</code>，寓意高性能的事件循环库 <code>High-performance event loop library</code>（强行寓意，我TM真是个人才啊）。但<code>libhv</code>绝不是闭门造车和简单的重复造轮子，她站在巨人上的肩膀上再创作，扬长避短，去糟取精，精雕细琢，她有着自己的信仰和使命，为国产争光。</p>\n<p>当然有人说没必要开发使用网络库，直接使用<code>epoll</code>不行吗？也就<code>socket-&gt;bind-&gt;listen-&gt;accept、epoll_create、epoll_ctl、epoll_wait</code>几个系统API，当然可以，但当你真正工程实践时，且不论<code>跨平台</code>，<code>定时心跳、定时推送需要用到定时器</code>、<code>write、close的线程安全问题</code>、<code>非阻塞写队列的维护</code>、<code>读缓冲readbuf的自动扩缩容</code>、<code>粘包分包的处理</code>、<code>负载均衡策略</code>，哪一项不是有挑战性的难题，久而久之自然就形成了一层封装，形成所谓的网络库，而且网络库需要时间的沉淀和考验。</p>\n<h2><a id=\"_21\"></a>精心呵护，深耕细作</h2>\n<hr/>\n<p><strong>一颗幼苗想要长成为参天大树，必先深深扎根于大地，然后不断施肥浇水、悉心照料，才能茁壮成长。</strong></p>\n<p>在2019年到2020年，2年的时间里，libhv都在不断完善和新增功能阶段，包括：</p>\n<ul><li>参考 <a href=\"https://github.com/chenshuo/muduo\">陈硕的muduo</a> 和 <a href=\"https://github.com/Qihoo360/evpp\">奇虎360的evpp</a>，提供了c++类封装的 <a href=\"https://github.com/ithewei/libhv/tree/master/evpp\">evpp 模块</a>；</li><li>实现了本世纪最通用的<code>HTTP</code>协议以及<code>WebSocket</code>协议，源代码见 <a href=\"https://github.com/ithewei/libhv/tree/master/http\">http 模块</a>，客户端接口设计参考了 <a href=\"https://github.com/psf/requests\">python 的 requests</a> ，服务端接口设计参考了 <a href=\"https://github.com/gin-gonic/gin\">golang 的 gin</a> 和 <a href=\"https://github.com/expressjs/express\">nodejs 的 express</a>（所以<code>libhv</code>真不是闭门造车，反倒是山寨之王）；</li><li>集成了<code>openssl、mbedtls、gnutls</code>等<code>SSL/TLS</code>库提供加密功能，源代码见 <a href=\"https://github.com/ithewei/libhv/tree/master/ssl\">ssl 模块</a>；</li></ul>\n<p>起步阶段，<code>libhv</code>的<code>star</code>数量增长是非常缓慢的，我记得在我2020年5月面试字节时（想了解字节面试的可以看我的另外一篇博客 <a href=\"https://hewei.blog.csdn.net/article/details/109267352\">十面字节跳动</a>，欢迎找我内推），<code>libhv</code>才四百多星，下图是我在 <a href=\"https://star-history.com/#ithewei/libhv&amp;Date\">star-history</a> 网站下载的一张<code>star</code>走势图：<br/> <img alt=\"libhv star history\" src=\"image\\b38deef5694c4b41bb49c197b22b53f9.png\"/></p>\n<p>在2020年11月，有一段直线上升期，那是因为该月内上了几次<code>github trending</code>榜，所以<code>star</code>数量猛增突破了1k星，为此我还高兴了好一阵，特写了一篇博文纪念之，见 <a href=\"https://hewei.blog.csdn.net/article/details/109703459\">纪念libhv上github trending</a> （决不放过任何一个可以吹牛的机会）。</p>\n<p><img alt=\"github-trending\" src=\"image\\20201115152746441.jpeg\"/></p>\n<p>直到2021年2月28日，我才正式release了第一个版本，见 <a href=\"https://github.com/ithewei/libhv/releases\">github releases 记录</a> 。</p>\n<p>2021、2022两年的时间里，主要是完善了教程和技术支持，包括：</p>\n<ul><li>建立了 QQ技术交流群 <code>739352073</code>，目前已有群成员1k+，欢迎入群交流；</li><li>提供了很多的示例代码，见 <a href=\"https://github.com/ithewei/libhv/tree/master/examples\">examples 目录</a>；</li><li>编写了 <a href=\"https://hewei.blog.csdn.net/article/details/113733758\">libhv入门教程</a>（写教程可一点不比写代码轻松）；</li></ul>\n<p>当然也有技术上的重大更新，包括：</p>\n<ul><li>内置拆包模式，支持<code>固定包长、分隔符、头部长度字段</code>三种常见的拆包方式（这个在<code>c/c++</code>领域绝对是首屈一指，目前我只在<code>java</code>的<code>netty</code>里见过），详见 <a href=\"https://github.com/ithewei/libhv/wiki/%E4%B8%AD%E6%96%87FAQ#q-tcp%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E7%B2%98%E5%8C%85%E4%B8%8E%E5%88%86%E5%8C%85\">TCP如何处理粘包与分包</a>；</li><li><code>http</code>添加了<code>HttpService::Static</code>设置静态资源目录，以及<code>HttpService::Proxy</code>设置代理转发，可以很方便实现和<code>nginx</code>的配置文件里<code>location、root、proxy_pass</code>类似功能；</li><li>添加了 <a href=\"https://github.com/ithewei/libhv/tree/master/mqtt\">mqtt 模块</a>（利用了上面提到的拆包功能，整个<code>mqtt</code>协议实现只花了不到 600 行，非常适合学习开发自定义协议）</li><li><code>可靠UDP</code>支持，集成了<code>KCP</code>（私下实现了c语言版本的<code>kcptun</code>，这部分尚未开源）</li></ul>\n<h2><a id=\"_54\"></a>齐心协力，厚积薄发</h2>\n<hr/>\n<p><strong>世上绝没有随随便便的成功，一切偶然其实也是必然</strong>。</p>\n<p>令我欣慰的是，自建群以来，我收到不少说<code>libhv简单易用</code>、<code>已用于生产环境</code>、<code>通过libhv学到了很多</code>等正向反馈；当然也有出现bug的反馈，也都会及时跟进修复；群管理员也非常给力，非常耐心地答疑解惑，再次感谢他们的付出（当然也呼吁大家提问前能先翻阅下 <a href=\"https://github.com/ithewei/libhv/wiki/%E4%B8%AD%E6%96%87FAQ\">FAQ文档</a>，80%的问题可以在这里面找到答案，关于网络编程里常见的坑请参考 <a href=\"https://hewei.blog.csdn.net/article/details/121313149\">网络编程十宗罪</a> 排查下）；另外 <a href=\"https://github.com/ithewei/libhv/graphs/contributors\">contributors</a> 也多了十几位，可惜我没有薪资报酬你们，都是用爱发电。</p>\n<p><code>libhv</code>的口号是<code>让世上没有难写的网络程序</code>，虽然目前已取得一些成效，但还有很长的路要走。<br/> 关于<code>libhv</code>的一些后续计划，见 <a href=\"https://github.com/ithewei/libhv/blob/master/docs/PLAN.md\">https://github.com/ithewei/libhv/blob/master/docs/PLAN.md</a></p>\n<p>包括：</p>\n<ul><li>开发<code>libhv官网</code></li><li><code>redis client</code>：<code>redis</code>同步/异步客户端</li><li><code>mysql client</code>：<code>mysql</code>同步/异步客户端（虽然我不太赞成使用<code>c/c++</code>开发数据库<code>CURD</code>业务）</li><li><code>async DNS</code>：异步<code>DNS</code>（自实现或者接入<code>cares</code>）</li><li>绑定到其它语言，如<code>lua、js、python</code>，可以使用脚本开发业务逻辑</li><li><code>hrpc </code>：基于<code>libhv</code>实现<code>RPC</code>框架，兼容<code>grpc</code>、<code>thrift</code>协议（注：简单的<code>rpc</code>实现可以参考 <a href=\"https://github.com/ithewei/libhv/tree/master/examples\">examples目录</a> 下的 <a href=\"https://github.com/ithewei/libhv/tree/master/examples/jsonrpc\">jsonrpc</a>，<a href=\"https://github.com/ithewei/libhv/tree/master/examples/protorpc\">protorpc</a>，当然一个完善的<code>RPC</code>框架涉及<code>IDL</code>自动生成各种语言的脚手架、服务注册与发现、负载均衡、重试、熔断、限流等，推荐看 <a href=\"https://github.com/apache/incubator-brpc/tree/master/docs/cn\">brpc的文档</a>，能学到很多，目前能满足多语言版本的成熟<code>RPC</code>框架也就<code>grpc</code>、<code>thrift</code>）</li><li><code>rudp</code>: 可靠<code>UDP</code>（目前接入了<code>KCP</code>，后续可能接入<code>FEC、QUIC</code>）</li><li><code>io_uring</code>：接入<code>io_uring</code>尝鲜</li><li><code>coroutine</code>：协程，我的想法是等<code>c++20</code>成熟后，直接基于<code>c++20</code>的协程实现</li><li><code>cppsocket.io</code>：基于<code>libhv</code>实现<code>c++</code>版本的 <a href=\"https://github.com/socketio/socket.io\">socket.io</a></li><li><code>IM-libhv</code>：基于<code>libhv</code>实现<code>IM即时通信</code>，例如网页即时聊天、即时消息推送、微信小程序、手机app消息推送、PC软件消息推送等等</li><li><code>MediaServer-libhv</code>：基于<code>libhv</code>实现<code>流媒体服务</code>，类似 <a href=\"https://github.com/ossrs/srs\">srs</a>、<a href=\"https://github.com/ZLMediaKit/ZLMediaKit\">ZLMediaKit</a></li><li><code>GameServer-libhv</code>：基于<code>libhv</code>实现<code>游戏服务</code>，类似 <a href=\"https://github.com/cloudwu/skynet\">skynet</a>、<a href=\"https://github.com/kbengine/kbengine\">kbengine</a></li></ul>\n<p>以上列举的这些计划和应用场景仅供参考，抛砖引玉，给大家提供一个思路；</p>\n<p>一个人的时间精力毕竟有限，只有依靠社区的力量才能做大做强，建立起生态，希望有越来越多的人能加入到<code>libhv</code>的贡献中来。</p>\n<p>最后，想说的是：</p>\n<p><strong>即使c++推出标准网络库，我希望ta也有用武之地；<br/> 即使终将凋零，至少ta曾经绽放过；<br/> 为开源精神点赞！<br/> 为国产争光！</strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}