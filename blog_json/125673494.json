{"blogid": "125673494", "writerAge": "码龄2年", "writerBlogNum": "8", "writerCollect": "35", "writerComment": "0", "writerFan": "4", "writerGrade": "2级", "writerIntegral": "106", "writerName": "Penda xx", "writerProfileAdress": "writer_image\\profile_125673494.jpg", "writerRankTotal": "100742", "writerRankWeekly": "1009675", "writerThumb": "16", "writerVisitNum": "12990", "blog_read_count": "4705", "blog_time": "已于 2022-07-08 10:52:27 修改", "blog_title": "抽象类和接口的区别（通俗易理解）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB\">一、抽象类</a></p>\n<p id=\"1.1%C2%A0%20%E6%8A%BD%E8%B1%A1%E7%B1%BB%E6%A6%82%E5%BF%B5%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#1.1%C2%A0%20%E6%8A%BD%E8%B1%A1%E7%B1%BB%E6%A6%82%E5%BF%B5%EF%BC%9A\">1.1  抽象类概念：</a></p>\n<p id=\"1.2%C2%A0%20%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%89%B9%E7%82%B9-toc\" style=\"margin-left:40px;\"><a href=\"#1.2%C2%A0%20%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%89%B9%E7%82%B9\">1.2  抽象类特点</a></p>\n<p id=\"1.3%C2%A0%20%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%AD%98%E5%9C%A8%E4%BB%B7%E5%80%BC-toc\" style=\"margin-left:40px;\"><a href=\"#1.3%C2%A0%20%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%AD%98%E5%9C%A8%E4%BB%B7%E5%80%BC\">1.3  抽象类存在价值</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E6%8E%A5%E5%8F%A3-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E6%8E%A5%E5%8F%A3\">二、接口</a></p>\n<p id=\"2.1%C2%A0%20%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%A6%82%E5%BF%B5-toc\" style=\"margin-left:40px;\"><a href=\"#2.1%C2%A0%20%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%A6%82%E5%BF%B5\">2.1  接口的概念</a></p>\n<p id=\"2.2%C2%A0%20%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%89%B9%E7%82%B9-toc\" style=\"margin-left:40px;\"><a href=\"#2.2%C2%A0%20%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%89%B9%E7%82%B9\">2.2  接口的特点</a></p>\n<p id=\"2.3%C2%A0%20%E6%8E%A5%E5%8F%A3%E5%AD%98%E5%9C%A8%E7%9A%84%E4%BB%B7%E5%80%BC-toc\" style=\"margin-left:40px;\"><a href=\"#2.3%C2%A0%20%E6%8E%A5%E5%8F%A3%E5%AD%98%E5%9C%A8%E7%9A%84%E4%BB%B7%E5%80%BC\">2.3  接口存在价值</a></p>\n<p id=\"%E4%B8%89%E3%80%81%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%85%B3%E7%B3%BB-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%85%B3%E7%B3%BB\">三、接口和抽象类的关系</a></p>\n<p id=\"3.1%C2%A0%20%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9B%B8%E5%90%8C%E7%82%B9-toc\" style=\"margin-left:40px;\"><a href=\"#3.1%C2%A0%20%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9B%B8%E5%90%8C%E7%82%B9\">3.1  接口和抽象类相同点</a></p>\n<p id=\"3.2%C2%A0%20%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB-toc\" style=\"margin-left:40px;\"><a href=\"#3.2%C2%A0%20%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB\">3.2  接口和抽象类的区别</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<p></p>\n<h1 id=\"%E4%B8%80%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB\">一、抽象类</h1>\n<p>关键字： abstract         是模棱两可的，似是而非的，无法给出具体明确的</p>\n<h2 id=\"1.1%C2%A0%20%E6%8A%BD%E8%B1%A1%E7%B1%BB%E6%A6%82%E5%BF%B5%EF%BC%9A\">1.1  抽象类概念：</h2>\n<ol><li>一个方法无法给出具体明确的，该方法可以声明为抽象方法</li><li>拥有抽象类方法的类，叫做抽象类</li></ol>\n<h2 id=\"1.2%C2%A0%20%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%89%B9%E7%82%B9\">1.2  抽象类特点</h2>\n<ol><li>继承了抽象类的子类，要么对父类的抽象方法进行重写，要么自己也是抽象类</li><li>抽象类也可以拥有普通方法</li><li>抽象类不能创建对象</li><li>抽象类也有构造方法，但是是为了子类创建对象使用</li></ol>\n<h2 id=\"1.3%C2%A0%20%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%AD%98%E5%9C%A8%E4%BB%B7%E5%80%BC\">1.3  抽象类存在价值</h2>\n<p>       <strong> 模板模式：</strong>由于抽象类既能拥有普通的方法，又有抽象的方法，这样，抽象类既能自己完成一些功能，又给子类提供无限的可能。</p>\n<h1 id=\"%E4%BA%8C%E3%80%81%E6%8E%A5%E5%8F%A3\">二、接口</h1>\n<p>关键字：interface</p>\n<h2 id=\"2.1%C2%A0%20%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%A6%82%E5%BF%B5\">2.1  接口的概念</h2>\n<p>比抽象还抽象，或者说是一种特殊的抽象类</p>\n<h2 id=\"2.2%C2%A0%20%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%89%B9%E7%82%B9\">2.2  接口的特点</h2>\n<ol><li>不能实例化</li><li>没有构造方法</li><li>方法默认public abstract修饰</li><li>变量默认public static final修饰</li></ol>\n<h2 id=\"2.3%C2%A0%20%E6%8E%A5%E5%8F%A3%E5%AD%98%E5%9C%A8%E7%9A%84%E4%BB%B7%E5%80%BC\">2.3  接口存在价值</h2>\n<ol><li>    定义了规则：一个类可以同时实现多个接口</li><li>    拓展了程序</li></ol>\n<h1 id=\"%E4%B8%89%E3%80%81%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%85%B3%E7%B3%BB\">三、接口和抽象类的关系</h1>\n<h2 id=\"3.1%C2%A0%20%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9B%B8%E5%90%8C%E7%82%B9\">3.1  接口和抽象类相同点</h2>\n<p>都是不断抽取出来的抽象概念</p>\n<h2 id=\"3.2%C2%A0%20%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB\">3.2  接口和抽象类的区别</h2>\n<ol><li>接口是行为的抽象，是一种行为的规范，接口是like a 的关系；抽象是对类的抽象，是一种模板设计，抽象类是is a 的关系。</li><li>接口没有构造方法，而抽象类有构造方法，其方法一般给子类使用</li><li>接口只有定义，不能有方法的实现，java 1.8中可以定义default方法体，而抽象类可以有定义与实现，方法可在抽象类中实现。</li><li>抽象体现出了继承关系，继承只能单继承。接口提现出来了实现的关系，实现可以多实现。接口强调特定功能的实现，而抽象类强调所属关系。</li><li>接口成员变量默认为public static final，必须赋初值，不能被修改；其所有的成员方法都是public abstract的。抽象类中成员变量默认default，可在子类中被重新定义，也可被重新赋值；抽象方法被abstract修饰，不能被private、static、synchronized和native等修饰，必须以分号结尾，不带花括号。 </li></ol>\n<p><strong>注：JDK1.8中对接口增加了新的特性：</strong></p>\n<p><strong>（1）默认方法（default method）：</strong>JDK 1.8允许给接口添加非抽象的方法实现，但必须使用default关键字修饰；定义了default的方法可以不被实现子类所实现，但只能被实现子类的对象调用；如果子类实现了多个接口，并且这些接口包含一样的默认方法，则子类必须重写默认方法；<strong>（2）静态方法（static method）：</strong>JDK 1.8中允许使用static关键字修饰一个方法，并提供实现，称为接口静态方法。接口静态方法只能通过接口调用（接口名.静态方法名）。</p>\n<p>        </p>\n</div>\n</div>"}