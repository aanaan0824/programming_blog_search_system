{"blogid": "124769886", "writerAge": "码龄4年", "writerBlogNum": "3", "writerCollect": "16", "writerComment": "0", "writerFan": "1", "writerGrade": "1级", "writerIntegral": "41", "writerName": "soledade", "writerProfileAdress": "writer_image\\profile_124769886.jpg", "writerRankTotal": "171642", "writerRankWeekly": "438388", "writerThumb": "5", "writerVisitNum": "2675", "blog_read_count": "1742", "blog_time": "已于 2022-05-14 16:56:58 修改", "blog_title": "【C语言】结构体中的函数指针", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%E3%80%81%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\">一、函数指针是什么？</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88\">二、结构体中的函数指针</a></p>\n<p id=\"-toc\" style=\"margin-left:0px;\"></p>\n<p></p>\n</blockquote>\n<hr/>\n<p></p>\n<h1 id=\"%E4%B8%80%E3%80%81%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><a id=\"pandas_16\"></a>一、函数指针是什么？</h1>\n<p><strong>函数指针</strong>是指向<strong>函数</strong>的<strong>指针</strong>变量。 通常我们说的<strong>指针</strong>变量是指向一个整型、字符型或数组等变量，而<strong>函数指针</strong>是指向<strong>函数</strong>。 <strong>函数指针</strong>可以像一般<strong>函数</strong>一样，用于调用<strong>函数</strong>、传递参数。</p>\n<p><span style=\"color:#fe2c24;\"><strong>正确形式：int (*f) ( )；</strong></span></p>\n<p>这个声明有两对括号，每对的含义各不相同。第2对括号是函数调用操作符，但第1对括号只起到聚组的作用。它迫使间接访问在函数调用之前进行，使f成为一个函数指针，它所指向的函数返回一个整型值。</p>\n<p>容易混淆的地方：int （*f）()； 与 int * f ();</p>\n<p>两者看似只相差了一个（），但是在编译器看来却是两种截然不同的情况。</p>\n<p>int (*f) () :这里<strong> \"f\"</strong> <strong>是一个函数指针 </strong>，它存储着一个没有参数，返回值为int类型的函数的<strong>地址</strong>。</p>\n<p>int *f () ：这里<strong> \"f\"</strong> <strong>是一个函数名</strong>，它没有参数，返回一个<strong>指针</strong>，<strong>int *类型</strong>。</p>\n<ul><li>函数指针的调用方式 </li></ul>\n<pre><code class=\"language-cpp\">void test(int);\n\nint main(void)\n{\n    void (*fp)(int);\n    fp=test;    \n    (*fp)(9);   //调用方式一：函数指针  \n\n    fp(9);      //调用方式二：函数指示符\n    return 0;\n}\n\nvoid test(int a)\n{\n\n  printf( \"%d\\n\", a );\n\n}\n\n输出结果：\n9\n9</code></pre>\n<p>这两种形式是等价的。</p>\n<p>这是因为在 C/C++ 中总是使用函数指针的形式来调用函数。即使在函数调用中使用的是函数指示符（代表函数类型）， 也会被转换为函数指针使用，这就是默认的 function-to-pointer 转换。</p>\n<p>尽管二者等价，但个人还是比较推荐用<strong>函数指针的形式</strong>来调用函数。</p>\n<h1 id=\"%E4%BA%8C%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88\"><a id=\"_19\"></a>二、结构体中的函数指针</h1>\n<p>函数指针可以作为结构体的成员使用。</p>\n<p>以下是使用示例</p>\n<pre><code class=\"language-cpp\">void Dance_func()\n\n{\n  printf(\"Xiao Ming is dancing!\\n\");\n}\n\nvoid Sing_func(int i) {\n  printf(\"Xiao Ming Sang %d Songs.\\n\", i);\n}\n\ntypedef struct {\n\n  void (*dance)();   //函数指针的正确形式\n  void (*sing)(int i);\n  //void * sing (int i);  错误形式，无法通过编译\n} student;\n\nint main(void)\n{\n\n  student Xiao_Ming;\n  Xiao_Ming.dance = Dance_func; //对结构体变量的赋值。函数名Dance_func是指针\n  Xiao_Ming.dance();            //调用Dance_func()\n  Xiao_Ming.sing = Sing_func;   //同上\n  Xiao_Ming.sing(3);\n\n  return 0;\n}\n\n输出结果：\n\nXiao Ming is dancing!\nXiao Ming Sang 3 Songs.</code></pre>\n<p>注意：</p>\n<pre><code>  Xiao_Ming.dance = Dance_func; //对结构体变量的赋值。函数名Dance_func是指针\n  Xiao_Ming.dance();            //调用Dance_func()</code></pre>\n<p> 二者只相差一个括号，但是意义不同。</p>\n<p></p>\n<p></p>\n<p></p>\n<h1></h1>\n</div>\n</div>"}