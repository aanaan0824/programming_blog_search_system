{"blogid": "122948389", "writerAge": "码龄2年", "writerBlogNum": "41", "writerCollect": "850", "writerComment": "474", "writerFan": "1845", "writerGrade": "5级", "writerIntegral": "1959", "writerName": "雨轩（爵丶迹）", "writerProfileAdress": "writer_image\\profile_122948389.jpg", "writerRankTotal": "27371", "writerRankWeekly": "26453", "writerThumb": "748", "writerVisitNum": "82588", "blog_read_count": "9103", "blog_time": "于 2022-03-17 17:44:46 发布", "blog_title": "C++11特性（详细版）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>C11</h3>\n<ul><li><a href=\"#1C11_1\">1、C11优势</a></li><li><a href=\"#2_3\">2、列表初始化</a></li><li><a href=\"#3_84\">3、变量类型推导</a></li><li><ul><li><a href=\"#1_85\">1、为什么需要类型推导</a></li><li><a href=\"#2decltype_115\">2、decltype类型推导（了解）</a></li><li><ul><li><a href=\"#decltype_116\">为什么需要decltype</a></li><li><a href=\"#decltype_118\">decltype</a></li></ul>\n</li></ul>\n</li><li><a href=\"#4final__override_144\">4、final 与 override</a></li><li><ul><li><a href=\"#final_145\">final</a></li><li><a href=\"#override_184\">override</a></li></ul>\n</li><li><a href=\"#5_210\">5、默认成员函数控制</a></li><li><ul><li><a href=\"#1_212\">1、显示缺省函数</a></li><li><a href=\"#2_231\">2、删除默认函数（禁止调用）</a></li></ul>\n</li><li><a href=\"#6_253\">6、右值引用与移动语义</a></li><li><ul><li><a href=\"#1_254\">1、左值引用和右值引用</a></li><li><ul><li><a href=\"#1_256\">1、什么是左值？什么是左值引用？</a></li><li><a href=\"#2_274\">2、什么是右值？什么是右值引用？</a></li></ul>\n</li><li><a href=\"#2_296\">2、左值引用与右值引用比较</a></li><li><a href=\"#3_323\">3、右值引用使用场景和意义</a></li></ul>\n</li><li><a href=\"#7_386\">7、完美转发</a></li><li><a href=\"#8_443\">8、新的类功能</a></li><li><a href=\"#9lambda_470\">9、lambda表达式</a></li><li><ul><li><a href=\"#lambda_508\">lambda表达式语法</a></li></ul>\n</li><li><a href=\"#10_608\">10、可变参数列表（先学会基本特性）</a></li><li><ul><li><a href=\"#_704\">可变参数包结合完美转发的好处</a></li></ul>\n</li><li><a href=\"#11_709\">11、包装器</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1C11_1\"></a>1、C11优势</h1>\n<p>  相比C++98/03，C++11则带来了数量可观的变化，其中包含了约140个新特性，以及对C++03标准中约600个缺陷的修正，这使得C++11更像是从C++98/03中孕育出的一种新语言。相比较而言，<strong>C++11能更好地用于系统开发和库开发、语法更加泛华和简单化、更加稳定和安全，不仅功能更强大，而且能提升程序员的开发效率</strong>。</p>\n<h1><a id=\"2_3\"></a>2、列表初始化</h1>\n<ol><li>在C++98中，标准允许使用花括号{}对数组元素进行统一的列表初始值设定</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> array1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> array2<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>C++98对于自定义类型，无法使用列表初始化，在C++11中改进了</p>\n</blockquote>\n<ol start=\"2\"><li>C++11中自定义类型也可以使用列表初始化<br/> C++11扩大了用大括号括起的列表(初始化列表)的使用范围，使其可用于所有的内置类型和用户自定义的类型，使用初始化列表时，<strong>可添加等号(=)，也可不添加</strong>。</li></ol>\n<p>1、<strong>内置类型的列表初始化</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 内置类型变量</span>\n<span class=\"token keyword\">int</span> x1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> x2<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//建议使用原来的</span>\n<span class=\"token keyword\">int</span> x3 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> x4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> x5<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 数组</span>\n<span class=\"token keyword\">int</span> arr1<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> arr2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 动态数组，在C++98中不支持</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 标准容器</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> v<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这种初始化就很友好，不用push_back一个一个插入</span>\nmap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> m<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>2、<strong>自定义类型的列表初始化</strong></p>\n<ol><li>标准库支持单个对象的列表初始化</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">_x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tPointer p <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tPointer p<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//不建议</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"2\"><li>多个对象的列表初始化<br/> 多个对象想要支持列表初始化，需给该类(模板类)添加一个带有initializer_list类型参数的构造函数即可。<br/> 注意：initializer_list是系统自定义的类模板，该类模板中主要有三个方法：begin()、end()迭代器以及获取区间中元素个数的方法size()</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Date</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> month <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> day <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_year</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_month</span><span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_day</span><span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"这是日期类\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _year<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _month<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _day<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//C++11容器都实现了带有initializer_list类型参数的构造函数</span>\n\tvector<span class=\"token operator\">&lt;</span>Date<span class=\"token operator\">&gt;</span> vd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Date<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1dcdd041971e49748a7279c52e9c799d.png\"/></p>\n<h1><a id=\"3_84\"></a>3、变量类型推导</h1>\n<h2><a id=\"1_85\"></a>1、为什么需要类型推导</h2>\n<p>  在定义变量时，必须先给出变量的实际类型，编译器才允许定义，但有些情况下可能不知道需要实际类型怎么给，或者类型写起来特别复杂</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">short</span> a <span class=\"token operator\">=</span> <span class=\"token number\">32670</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">short</span> b <span class=\"token operator\">=</span> <span class=\"token number\">32670</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// c如果给成short，会造成数据丢失，如果能够让编译器根据a+b的结果推导c的实际类型，就不会存在问题</span>\n\t<span class=\"token keyword\">short</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&gt;</span> m<span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"苹果\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"香蕉\"</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// 使用迭代器遍历容器, 迭代器类型太繁琐</span>\n\tstd<span class=\"token operator\">::</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>C++11中，可以使用auto来根据变量初始化表达式类型推导变量的实际类型，可以给程序的书写提供许多方便。将程序中c与it的类型换成auto，程序可以通过编译，而且更加简洁。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 使用迭代器遍历容器, 迭代器类型太繁琐   可以使用auto</span>\n<span class=\"token comment\">//std::map&lt;std::string, std::string&gt;::iterator it = m.begin();</span>\n<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"2decltype_115\"></a>2、decltype类型推导（了解）</h2>\n<h3><a id=\"decltype_116\"></a>为什么需要decltype</h3>\n<p><strong>auto使用的前提是：必须要对auto声明的类型进行初始化，否则编译器无法推导出auto的实际类型</strong>。但有时候可能需要根据表达式运行完成之后结果的类型进行推导，因为编译期间，代码不会运行，此时auto也就无能为力。</p>\n<h3><a id=\"decltype_118\"></a>decltype</h3>\n<p>decltype是根据表达式的实际类型推演出定义变量时所用的类型，比如<br/> 1、推演表达式类型作为变量的定义类型</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span>c<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\569af236be5246d5bc9b929c3fcdf7d2.png\"/><br/> 2. 推演函数返回值的类型</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span><span class=\"token operator\">&gt;</span>\nT1 <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T1<span class=\"token operator\">&amp;</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T2<span class=\"token operator\">&amp;</span> right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3579353637c74351a49f74ad35db2218.png\"/></p>\n<h1><a id=\"4final__override_144\"></a>4、final 与 override</h1>\n<h2><a id=\"final_145\"></a>final</h2>\n<p>1、final修饰类的时候，表示该类不能被继承</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> final <span class=\"token comment\">//表示该类是最后一个类</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _year<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> A <span class=\"token comment\">//无法继承</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\11b908340f2e4184a79e82b611054fcd.png\"/><br/> 2、final修饰虚函数时，这个虚函数不能被重写</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> \n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> final<span class=\"token comment\">//修饰虚函数</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"this is A\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _year<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> A\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//父类虚函数用final修饰，表示最后一个虚函数，无法重写</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"this is B\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f57a16f3d4f24ac498cc95ac8ba2af23.png\"/></p>\n<h2><a id=\"override_184\"></a>override</h2>\n<p>检查派生类虚函数是否重写了基类某个虚函数，如果没有重写编译报错</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> \n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"this is A\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _year<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> A\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> override\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"this is B\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d41dc907e8b142648be1c349f659d7a9.png\"/></p>\n<h1><a id=\"5_210\"></a>5、默认成员函数控制</h1>\n<p>在C++中对于<strong>空类编译器会生成一些默认的成员函数</strong>，比如：<strong>构造函数、拷贝构造函数、运算符重载、析构函数和&amp;和const&amp;的重载、移动构造、移动拷贝构造等函数</strong>。<strong>如果在类中显式定义了，编译器将不会重新生成默认版本</strong>。有时候这样的规则可能被忘记，最常见的是声明了带参数的构造函数，必时则需要定义不带参数的版本以实例化无参的对象。而且<strong>有时编译器会生成，有时又不生成，容易造成混乱</strong>，<strong>于是C++11让程序员可以控制是否需要编译器生成</strong>。</p>\n<h2><a id=\"1_212\"></a>1、显示缺省函数</h2>\n<p>在C++11中，可以在默认函数定义或者声明时加上=default，从而<strong>显式的指定编译器生成该函数的默认版本（默认成员函数）</strong>，用=default修饰的函数称为<strong>显式缺省函数</strong>。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> \n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//让编译器默认生成无参构造函数</span>\n\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">)</span>    <span class=\"token comment\">//这样不写缺省值的时候，就不需要自己在去实现一个默认的无参构造函数</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_year</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"this is A\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _year<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"2_231\"></a>2、删除默认函数（禁止调用）</h2>\n<p>如果能<strong>想要限制某些默认函数的生成</strong>，在C++98中，是该函数<strong>设置private</strong>，并且不给定义，这样只要其他人想要调用就会报错。在C++11中更简单，只需在该函数声明<strong>加上=delete即可</strong>，该语法指示编译器不生成对应函数的默认版本，称=delete修饰的函数为<strong>删除函数</strong>。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">_a</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//C++11</span>\n\t<span class=\"token comment\">// 禁止编译器生成默认的拷贝构造函数以及赋值运算符重载</span>\n\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> A<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\tA<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> A<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _a<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//C++98，设置成private就可以了</span>\n\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> A<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\tA<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> A<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"6_253\"></a>6、右值引用与移动语义</h1>\n<h2><a id=\"1_254\"></a>1、左值引用和右值引用</h2>\n<p>传统的C++就有引用，称为左值引用，C++11后，出了右值引用。<strong>无论是左值引用还是右值引用，都是给对象取别名（与对象共享一片空间）</strong>。</p>\n<h3><a id=\"1_256\"></a>1、什么是左值？什么是左值引用？</h3>\n<p>  左值是一个表示数据的表达式（如变量名和解引用的指针），<strong>我们可以获取它的地址，也可以对它赋值，左值可以出现在赋值符号的左边，右值不可以出现在左边</strong>。左引用加const修饰，不能对其赋值，但可取地址，是一种特殊情况。左值引用就是给左值取别名。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//以下都是左值</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//对左值的引用</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span> pp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> pa <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> rb <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>左值：<br/>   1、可以取地址<br/>   2、一般情况下可以修改（const修饰时不能修改）</p>\n</blockquote>\n<h3><a id=\"2_274\"></a>2、什么是右值？什么是右值引用？</h3>\n<p>  右值也是一个表示数据的表达式，如：字面常量、表达式返回值、传值返回函数的返回值（不能是左值引用返回）等，右值可以出现在赋值符号的右边，但是不能出现在左边。右值引用就是给右值取别名。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//常见右值</span>\n<span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//右值引用</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;&amp;</span> rr1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span><span class=\"token operator\">&amp;&amp;</span> rr2 <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;&amp;</span> rr3 <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//右值引用一般情况不能引用左值，可使用move将一个左值强制转化为右值引用</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>rr4 <span class=\"token operator\">=</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//右值不能出现在左边，错误</span>\n<span class=\"token number\">10</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">+</span> y <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>move：当需要用右值引用引用一个左值时，可以通过move函数将左值转化为右值。C++11中，std::move()函数位于头文件中，该函数名字具有迷惑性，它并不搬移任何东西，唯一的功能就是<strong>将一个左值强制转化为右值引用，然后实现移动语义</strong>。</p>\n<h2><a id=\"2_296\"></a>2、左值引用与右值引用比较</h2>\n<p>左值引用总结：</p>\n<ol><li>左值引用只能引用左值，不能引用右值</li><li>const左值引用既可引用左值，也可引用右值</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 左值引用只能引用左值，不能引用右值</span>\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ra1 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ra为a的别名</span>\n<span class=\"token comment\">//int&amp; ra2 = 10; // 编译失败，因为10是右值</span>\n\n<span class=\"token comment\">//const左值引用既可以引用左值，也可以引用右值</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ra3 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ra4 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>右值引用总结：</p>\n<ol><li>右值引用只能引用右值，一般情况下不能引用左值</li><li>右值引用可以引用move以后的左值</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//不能引用左值</span>\n<span class=\"token comment\">//int&amp;&amp; rr1 = a;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;&amp;</span> rr2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;&amp;</span> rr3 <span class=\"token operator\">=</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//强制转换为右值引用</span>\n</code></pre>\n<h2><a id=\"3_323\"></a>3、右值引用使用场景和意义</h2>\n<p>  左值引用既可以引用左值，可以引用右值，为什么C++11还要提出右值引用？因为左值引用存在短板，下面我们来看看这个短板以及右值引用是如何弥补这个短板的！</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span>bit<span class=\"token operator\">::</span>string s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span>bit<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tbit<span class=\"token operator\">::</span>string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//fun1(s);</span>\n\t<span class=\"token comment\">//fun2(s);//左值引用提高了效率，不存在拷贝临时对象的问题</span>\n\n\t<span class=\"token comment\">//可以使用左值引用返回，这个对象还在</span>\n\ts <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//不能使用左值引用返回，这个就是左值引用的一个短板</span>\n\t<span class=\"token comment\">//函数返回对象出了作用域就不在了，就不能用左值引用返回（因为返回的是本身地址，栈帧已销毁）</span>\n\t<span class=\"token comment\">//所以会存在拷贝问题</span>\n\tbit<span class=\"token operator\">::</span>string ret <span class=\"token operator\">=</span> bit<span class=\"token operator\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token number\">1234</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2193951f16fe4c3195adeb5f504d7817.png\"/> 右值引用弥补这个短板（右值引用场景1）</p>\n<blockquote>\n<p>C++11移动语义的提出：将一个对象中资源移动到另一个对象中的方式。</p>\n</blockquote>\n<p>  str在按照值返回时，必须创建一个临时对象，临时对象创建好之后，str就被销毁了，str是一个将亡值，C++11认为其为右值，在用str构造临时对象时，就会采用移动构造，即将str中资源转移到临时对象中。而临时对象也是右值，因此在用临时对象构造s3时，也采用移动构造，将临时对象中资源转移到ret中，整个过程，只需要创建一块堆内存即可，既省了空间，又大大提高程序运行的效率。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\716fe11c9c4747b697aed2e3c40b13e9.png\"/></p>\n<blockquote>\n<p>这里我们就又可以对右值进行一个定义：<br/> 右值：1、纯右值 10 a+b 2、将亡值，函数返回的临时对象，匿名对象</p>\n</blockquote>\n<p>此时我们将这一条语句分开写，看看又是什么情况</p>\n<pre><code class=\"prism language-cpp\">bit<span class=\"token operator\">::</span>string ret<span class=\"token punctuation\">;</span>\nret <span class=\"token operator\">=</span> bit<span class=\"token operator\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token number\">1234</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//赋值重载多了一次拷贝构造</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0401dedc6f3a497fa09a7b6087f63e05.png\"/><br/> 我们将移动赋值写上，就会进行优化，少一次拷贝构造<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e7adf9330f5a418fa4dd375f6ca989b2.png\"/></p>\n<blockquote>\n<p>总结一下：右值引用出来以后，并不是直接使用右值引用<strong>去减少拷贝，提高效率</strong>。而是<strong>支持深拷贝的类</strong>，<strong>提供移动构造和移动赋值</strong>，这时这些类的对象进行<strong>传值返回</strong>或者是<strong>参数为右值</strong>时，则可以用移动构造和移动赋值，<strong>转移资源</strong>，<strong>避免深拷贝</strong>，<strong>提高效率</strong>。</p>\n</blockquote>\n<p>以上是右值使用的场景1</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//左值，拷贝构造，使用左值引用</span>\nlist<span class=\"token operator\">&lt;</span>bit<span class=\"token operator\">::</span>string<span class=\"token operator\">&gt;</span> lt<span class=\"token punctuation\">;</span>\nbit<span class=\"token operator\">::</span>string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlt<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//以下传的都是右值，右值引用，所以是移动构造</span>\nlt<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlt<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>bit<span class=\"token operator\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2121\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlt<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\036a1cc65f044be0ac299aa0dd9f8efb.png\"/></p>\n<blockquote>\n<p>总结一下:右值引用使用场景二，还可以使用在容器插入接口函数中，如果实参是右值，则可以转移它的资源，减少拷贝</p>\n</blockquote>\n<h1><a id=\"7_386\"></a>7、完美转发</h1>\n<p>完美转发是指在函数模板中，完全依照模板的参数的类型，将参数传递给函数模板中调用的另外一个函数。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PerfectForward</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">Func</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>  <strong>PerfectForward为转发的模板函数，Func为实际目标函数</strong>，但是上述转发还不算完美，完美转发是<strong>目标函数总希望将参数按照传递给转发函数的实际类型转给目标函数，而不产生额外的开销，就好像转发者不存在一样</strong>。<br/> 所谓完美：函数模板在向其他函数传递自身形参时，<strong>如果相应实参是左值，它就应该被转发为左值；如果相应实参是右值，它就应该被转发为右值</strong>。这样做是为了保留在其他函数针对转发而来的参数的左右值属性进行不同处理（比如参数为左值时实施拷贝语义；参数为右值时实施移动语义）。</p>\n</blockquote>\n<p>我们先来了解万能引用</p>\n<blockquote>\n<p>1、模板中的&amp;&amp;不代表右值引用，而是万能引用，其既能接收左值又能接收右值。<br/> 2、模板的万能引用只是提供了能够接收同时接收左值引用和右值引用的能力<br/> 3、但是引用类型的唯一作用就是限制了接收的类型，后续使用中都退化成了左值<br/> 4、我们希望能够在传递过程中保持它的左值或者右值的属性，就需要用我们下面学习的完美转发</p>\n</blockquote>\n<p>C++11通过forward函数来实现完美转发</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"左值引用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"const 左值引用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"右值引用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"const 右值引用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PerfectForward</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//Func(t);//没有使用forward保持其右值的属性，退化为左值</span>\n\t<span class=\"token function\">Func</span><span class=\"token punctuation\">(</span>forward<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">PerfectForward</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//右值</span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PerfectForward</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PerfectForward</span><span class=\"token punctuation\">(</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PerfectForward</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PerfectForward</span><span class=\"token punctuation\">(</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2e5e785f79414db3965ee659364fd5e5.png\"/></p>\n<blockquote>\n<p>右值引用的对象，再作为实参传递时，属性会退化为左值，只能匹配左值引用。使用完美转发，可以保持他的右值属性</p>\n</blockquote>\n<h1><a id=\"8_443\"></a>8、新的类功能</h1>\n<p>默认成员函数<br/> 原来C++类中，有6个默认成员函数:</p>\n<ol><li>构造函数</li><li>析构函数</li><li>拷贝构造函数</li><li>拷贝赋值重载</li><li>取地址重载</li><li>const取地址重载</li></ol>\n<p>重要的是前4个，后两个用处不大。默认成员函数就是我们不写编译器会生成一个默认的。<br/> C++11新增了两个：移动构造函数和移动赋值逸算符重载。<br/> C++11新增了两个：移动构造函数和移动赋值运算符重载。<br/> 针对移动构造函数和移动赋值运算符重载有一些需要注意的点如下:</p>\n<ul><li>如果你没有自己实现移动构造函数，且<strong>没有实现</strong>析构函数、拷贝构造、拷贝赋值重载中的<strong>任意一个</strong>。那么编译器会自动生成一个默认移动构造。默认生成的移动构造函数，对于内置类型成员会执行逐成员按字节拷贝，自定义类型成员，则需要看这个成员<strong>是否实现移动构造，如果实现了就调用移动构造，没有实现就调用拷贝构造</strong>。</li><li>如果你没有自己实现移动赋值重载函数，目<strong>没有实现</strong>析构函数。接贝构造、拷贝赋值重载中的<strong>任意一个</strong>，那么编译器会自动生成一个默认移动赋值。默认生成的移动构造函数，对于内置类型成员会执行逐成员按字节拷贝，自定义类型成员，则需要看这个成员<strong>是否实现移动赋值，如果实现了就调用移动赋值，没有实现就调用拷贝赋值</strong>。(默认移动赋值跟上面移动构造完全类似)</li><li>如果你提供了移动构造或者移动赋值，编译器不会自动提供拷贝构造和拷贝赋值。</li></ul>\n<p>没有实现移动构造的情况<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8cbc1bd8fa1a4e018fbc7adca1fa3f8f.png\"/></p>\n<p>没有实现移动赋值的情况</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\673f59b74d924baebba6798c6ada7497.png\"/></p>\n<blockquote>\n<p>C++对于自定义类型成员变量非常的友好，默认成员函数都会恰当处理自定义类型成员</p>\n</blockquote>\n<h1><a id=\"9lambda_470\"></a>9、lambda表达式</h1>\n<p>之前我们要比较自定义类型的一个大小，需要自己实现一个类，并写上仿函数，这样有点复杂。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> Goods\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring _name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> _price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> Compare\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Goods<span class=\"token operator\">&amp;</span> gl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Goods<span class=\"token operator\">&amp;</span> gr<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> gl<span class=\"token punctuation\">.</span>_price <span class=\"token operator\">&lt;=</span> gr<span class=\"token punctuation\">.</span>_price<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tGoods gds<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"苹果\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"相交\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"橙子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"菠萝\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>gds<span class=\"token punctuation\">,</span> gds<span class=\"token operator\">+</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>gds<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>gds<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Compare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>之前自己写的过于复杂，随着lambda的推出，写这种比较大小排序就比较简单了。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tGoods gds<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"苹果\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"相交\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"橙子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"菠萝\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>gds<span class=\"token punctuation\">,</span> gds <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>gds<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>gds<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Goods<span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Goods<span class=\"token operator\">&amp;</span> r<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">bool</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> l<span class=\"token punctuation\">.</span>_price <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">.</span>_price<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上面的写法，相当于是把函数直接写到sort的第三个位置上，接下来我们来看一下lambda的语法。</p>\n<h2><a id=\"lambda_508\"></a>lambda表达式语法</h2>\n<p>lambda表达式书写格式：[capture-list] (parameters) mutable -&gt; return-type { statement }</p>\n<ol><li>lambda表达式各部分说明</li></ol>\n<ul><li>[capture-list] : 捕捉列表，该列表总是出现在lambda函数的开始位置，编译器根据[]来判断接下来的代码是否为lambda函数，捕捉列表能够捕捉上下文中的变量供lambda函数使用。</li><li>(parameters)：参数列表。与普通函数的参数列表一致，如果不需要参数传递，则可以连同()一起省略</li><li>mutable：默认情况下，lambda函数总是一个const函数，mutable可以取消其常量性。使用该修饰符时，参数列表不可省略(即使参数为空)。</li><li>-&gt;returntype：返回值类型。用追踪返回类型形式声明函数的返回值类型，没有返回值时此部分可省略。返回值类型明确情况下，也可省略，由编译器对返回类型进行推导。</li><li>{statement}：函数体。在该函数体内，除了可以使用其参数外，还可以使用所有捕获到的变量。<br/> <strong>注意</strong>： 在lambda函数定义中，参数列表和返回值类型都是可选部分，而<strong>捕捉列表和函数体可以为空</strong>。<br/> 因此C++11中<strong>最简单</strong>的lambda函数为：[]{}; 该lambda函数不能做任何事情。</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//最简单的lambda表达式上面也不做</span>\n\t<span class=\"token comment\">// 省略参数列表和返回值类型，返回值类型由编译器推导为int</span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// 省略了返回值类型，无返回值类型</span>\n\t<span class=\"token comment\">//引用传递捕捉a 和 b变量</span>\n\t<span class=\"token keyword\">auto</span> fun1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>b <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 各部分都很完善的lambda函数</span>\n\t<span class=\"token comment\">//引用方式捕捉b，值传递捕捉其他所有变量</span>\n\t<span class=\"token keyword\">auto</span> fun2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">return</span> b <span class=\"token operator\">+</span><span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 值传递捕捉x</span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> add_x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> <span class=\"token punctuation\">{<!-- --></span> x <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">add_x</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>通过上述例子可以看出，lambda表达式实际上可以理解为无名函数，该函数无法直接调用，如果想要直接调用，可借助auto将其赋值给一个变量。</p>\n</blockquote>\n<ol start=\"2\"><li>捕获列表说明<br/> 捕捉列表描述了上下文中那些数据可以被lambda使用，<strong>以及使用的方式传值还是传引用</strong>。</li></ol>\n<ul><li>[var]：表示值传递方式捕捉变量var</li><li>[=]：表示值传递方式捕获所有父作用域中的变量(包括this)</li><li>[&amp;var]：表示引用传递捕捉变量var</li><li>[&amp;]：表示引用传递捕捉所有父作用域中的变量(包括this)</li></ul>\n<p>注意：<br/> a. 父作用域指包含lambda函数的语句块<br/> b. 语法上捕捉列表可由多个捕捉项组成，并以逗号分割。<br/> 比如：[=, &amp;a, &amp;b]：以引用传递的方式捕捉变量a和b，值传递方式捕捉其他所有变量 [&amp;，a, this]：值传递方式捕捉变量a和this，引用方式捕捉其他变量</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">auto</span> fun1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>b <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>c. 捕捉列表<strong>不允许变量重复传递</strong>，否则就会导致<strong>编译错误</strong>。 比如：[=, a]：=已经以值传递方式捕捉了所有变量，捕捉a重复</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">auto</span> add_x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> <span class=\"token punctuation\">{<!-- --></span> x <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">add_x</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>d. 在<strong>块作用域以外</strong>的lambda函数捕捉列表必须为空。<br/> e. 在块作用域中的lambda函数仅能捕捉父作用域中局部变量，捕捉任何非此作用域或者非局部变量都会导致编译报错。<br/> f. lambda表达式之间不能相互赋值，即使看起来类型相同</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rate</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Rate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> rate<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">_rate</span><span class=\"token punctuation\">(</span>rate<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">double</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> money<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> money <span class=\"token operator\">*</span> _rate <span class=\"token operator\">*</span> year<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">double</span> _rate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 函数对象</span>\n\t<span class=\"token keyword\">double</span> rate <span class=\"token operator\">=</span> <span class=\"token number\">0.49</span><span class=\"token punctuation\">;</span>\n\tRate <span class=\"token function\">r1</span><span class=\"token punctuation\">(</span>rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">r1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// lamber</span>\n\t<span class=\"token keyword\">auto</span> r2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> monty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">return</span> monty<span class=\"token operator\">*</span>rate<span class=\"token operator\">*</span>year<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">r2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>从使用方式上来看，函数对象与lambda表达式<strong>完全一样</strong>。<br/> 函数对象将rate作为其成员变量，在定义对象时给出初始值即可，lambda表达式<strong>通过捕获列表</strong>可以直接将该变量捕获到。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a405f1021cf84d55bc35466ce1e3e07c.png\"/></p>\n<p>实际在底层编译器对于lambda表达式的处理方式，完全就是按照函数对象的方式处理的，即：如果定义了一个lambda表达式，编译器会自动生成一个类，在该类中重载了operator()。</p>\n<h1><a id=\"10_608\"></a>10、可变参数列表（先学会基本特性）</h1>\n<p>C++11的新特性可变参数模板能够让您创建可以接受可变参数的函数模板和类模板，相比C++98/03，类模版和函数模版中只能含固定数量的模版参数，可变模版参数无疑是一个巨大的改进。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//可变参数，你传int，char，还是自定义都会自动给你推导</span>\n可以包含<span class=\"token number\">0</span><span class=\"token operator\">-</span>任意个参数\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>Args<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ShowList</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//计算个数</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">ShowList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ShowList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ShowList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4bf3f740db69434db899f885994ef52b.png\"/><br/> 如果我们要对其取值，如何取那?</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//需要加上结尾函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ShowList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>Args<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ShowList</span><span class=\"token punctuation\">(</span>T value<span class=\"token punctuation\">,</span> Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> value <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ShowList</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//不断调用自己，直到最后参数为空，调用上面的结尾函数</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3c40a2a39844482aa63958bd735c969a.png\"/></p>\n<p>接下来我们在看看可变参数在列表初始化的应用</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>Args<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ShowList</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//可变参数初始化列表</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a148abfbfd46402e9996094cb1e7b911.png\"/><br/> 我们这里列表初始化内部都是一样的数据，如果我们要传不一样的数据，该如何实现？</p>\n<blockquote>\n<p>C++11，利用逗号表达式调用例外一个函数，最后的0留给数据。</p>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintArg</span><span class=\"token punctuation\">(</span>T t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> t <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>Args<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ShowList</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 列表初始化</span>\n\t<span class=\"token comment\">// {(printarg(args), 0)...}将会展开成((printarg(arg1),0), (printarg(arg2),0), (printarg(arg3),0), etc... )</span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">(</span><span class=\"token function\">PrintArg</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">ShowList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ShowList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ShowList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\95352d75d4de4ebfbc2f74371c729ef4.png\"/><br/> 也可以给模板函数设置一个返回值</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">PrintArg</span><span class=\"token punctuation\">(</span>T t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> t <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>Args<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ShowList</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 列表初始化 </span>\n\t<span class=\"token comment\">//也可以给模板函数设置一个返回值</span>\n\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token function\">PrintArg</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c95c4705fa4d4b1fab68ebd3c9c0714d.png\"/></p>\n<h2><a id=\"_704\"></a>可变参数包结合完美转发的好处</h2>\n<blockquote>\n<p>直接就是普通构造函数的形式，不存在移动构造或者拷贝构造，节省空间</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3f42a331fa6f4797a0dd8dac85f10181.png\"/></p>\n<h1><a id=\"11_709\"></a>11、包装器</h1>\n<p>函数包装器器其实就是函数指针，用了包装器之后，函数模板只会实例化一次，这里我们了解其用法即可。</p>\n<p>可调用对象的类型:函数指针、仿函数(函数对象)、lambda</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 函数模板会被实例化多次</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\nT <span class=\"token function\">useF</span><span class=\"token punctuation\">(</span>F f<span class=\"token punctuation\">,</span> T x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"count:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">++</span>count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"count:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> i <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> Functor\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">double</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> d <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 函数名</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">useF</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token number\">11.11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 函数对象</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">useF</span><span class=\"token punctuation\">(</span><span class=\"token function\">Functor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11.11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// lamber表达式</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">useF</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> d<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> d <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11.11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里我们可以看到静态变量count，每次的地址都不一样，说明函数模板实例化了3次。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4571b4fc06cb44c0b51416746167ab3a.png\"/></p>\n<p>我们可以通过包装器只让函数模板实例化一次</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\t\n\t<span class=\"token comment\">// 函数名 生成一个函数包装器，f1就是函数指针 ==  double (*f1)(double)</span>\n\tstd<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> f1 <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">useF</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">,</span> <span class=\"token number\">11.11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 函数对象</span>\n\tstd<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> f2 <span class=\"token operator\">=</span> <span class=\"token function\">Functor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">useF</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">,</span> <span class=\"token number\">11.11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// lamber表达式</span>\n\tstd<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> f3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> d<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> d <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">useF</span><span class=\"token punctuation\">(</span>f3<span class=\"token punctuation\">,</span> <span class=\"token number\">11.11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可以看到count的值是累加的，说明函数模板只实例化了一次<br/> <img alt=\"在这里插入图片描述\" src=\"image\\98b563eeb26e430fa7035c6db214b1e9.png\"/><br/> 总结：</p>\n<blockquote>\n<p>std::function包装各种可调用的对象，统一可调用对象类型，并且指定了参数和返回值类型。<br/> 为什么有std:function，因为不包装前可调用类型存在很多问题:<br/> 1、函数指针类型太复杂，不方便使用和理解<br/> 2、仿函数类型是一个类名，没有指定调用参数和返回值。得去看operator()的实现才能看出来。3、lambda表达式在语法层，看不到类型。底层有类型，基本都是lambda_uuid，也很难看</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}