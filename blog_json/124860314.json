{"blogid": "124860314", "writerAge": "码龄2年", "writerBlogNum": "67", "writerCollect": "41", "writerComment": "12", "writerFan": "224", "writerGrade": "3级", "writerIntegral": "732", "writerName": "♚陌上花开", "writerProfileAdress": "writer_image\\profile_124860314.jpg", "writerRankTotal": "29781", "writerRankWeekly": "359287", "writerThumb": "34", "writerVisitNum": "23788", "blog_read_count": "1402", "blog_time": "于 2022-05-19 14:35:29 发布", "blog_title": "指针空值——nullptr", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>以c语言和c++分别运行以下代码，大家可以先猜猜此程序在不同环境中的运行结果是什么，会不会有什么不同~</p>\n<pre><code class=\"language-cpp\">#include&lt;stdio.h&gt;\nvoid func(char* p)\n{\n\tprintf(\"char*\\n\");\n}\nvoid func(int x)\n{\n\tprintf(\"char*\\n\");\n}\nint main()\n{\n\tfunc(NULL);\n\treturn 0;\n}</code></pre>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\nusing namespace std;\n\nvoid func(char* p)\n{\n\tcout &lt;&lt; \" char*\" &lt;&lt; endl;\n}\nvoid func(int x)\n{\n\tcout &lt;&lt; \"int x\" &lt;&lt; endl;\n}\nint main()\n{\n\tfunc(NULL);\n\treturn 0;\n}\n</code></pre>\n<p>按照我们原来的想法，NULL是空指针，那么它就应该是个指针，两种情况都是调用 void func(char* p),可是结果真的是这样吗？让我们拭目以待~</p>\n<p>在c语言中：</p>\n<p><img alt=\"\" height=\"376\" src=\"image\\ad47cc4d1ada4ef78e686fe85bfec5e7.png\" width=\"616\"/></p>\n<p>在c++中：</p>\n<p><img alt=\"\" height=\"352\" src=\"image\\66f903848785471ebde0b67cf524c5ed.png\" width=\"652\"/></p>\n<p>  同样的程序，在c语言中运行程序结果如我们所料是char * ,但在c++中程序运行打印的结果却是int x，为什么会是这样的结果？</p>\n<p><img alt=\"\" class=\"left\" height=\"320\" src=\"image\\897a546d2de0d9aa301118693dc6d773.png\" width=\"471\"/></p>\n<p>一般情况下，NULL是一个宏定义。在传统C头文件（stddef.h）里我么你可以找到如下代码：</p>\n<pre><code class=\"language-cpp\">#undef NULL\n#if defined (_cplusplus)\n#define NULL 0\n#else\n#define NULL ((void*)0)\n#endif\n</code></pre>\n<p>可以看到，<strong>NULL可能被定义为<span style=\"color:#fe2c24;\">字面常量0</span>，或者是定义为<span style=\"color:#fe2c24;\">无类型指针(void*) 0</span>常量。</strong></p>\n<p>在c语言中，使用宏定义 #define NULL (void*)0 ，将NULL强制定义为（void*）0，</p>\n<p>C++中类型检查比较强悍，#define NULL 0，eg: int *ip =NULL; 其实都是0值。</p>\n<p>引起上述问题的元凶是字面常量0的二义性，在<strong>C++98标准</strong>中，字面常量<strong>0的类型既可以是一个整型，也可以是一个无类型指针(void * )。</strong>如果想在代码调用func (char*）版本的话，则必须对字面常量0进行<strong>强制类型转换（(char*)0)才可以调用</strong>，否则编译器总是会<strong>优先把0看作是一个整型常量。</strong></p>\n<p><img alt=\"\" height=\"323\" src=\"image\\b02918f92a104a2c97bc715e58e6988d.png\" width=\"607\"/></p>\n<p></p>\n<p>在C++11新标准中，出于兼容性的考虑，字面常量0的二义性并没有被消除。</p>\n<p>但标准还是为二义性给出了新的答案，就是<span style=\"color:#fe2c24;\"><strong>nullptr</strong></span>。</p>\n<p>在C++11标准中，<span style=\"color:#fe2c24;\"><strong>nullptr是一个所谓\"指针空值类型\"的常量</strong></span>。</p>\n<p><strong>指针空值类型被命名为nullptr_t</strong>，事实上，我们可以在支持nullptr的头文件(cstddef)中找出如下定义:</p>\n<pre><code class=\"language-cpp\">typedef decltype(nullptr)nullptr_t;</code></pre>\n<p>在现有编译器情况下，使用nullptr_t 的时候必须#include ,而nullptr则不用。</p>\n<p>简而言之，<strong>nullptr是有类型的，且仅可以被隐式转化为指针类型</strong></p>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\nusing namespace std;\n\nvoid func(char* p)\n{\n\tcout &lt;&lt; \"char*\" &lt;&lt; endl;\n}\nvoid func(int x)\n{\n\tcout &lt;&lt; \"int x\" &lt;&lt; endl;\n}\nint main()\n{\n\tfunc(nullptr);\n\tfunc(0);\n\treturn 0;\n}</code></pre>\n<p><img alt=\"\" height=\"376\" src=\"image\\75036815fac04d21b9863ca3d852d362.png\" width=\"521\"/></p>\n<p>所以，在书写C++11代码时<strong>将NULL替换为nullptr</strong>可以使我们获得更加健壮的代码。</p>\n<p>注意：</p>\n<p>1、nullptr是C11新引入的关键字，是一个所谓\"指针空值类型\"的常量，在C++程序中直接使用。2、在C11中, sizeof(nullptr)与sizeof((void*)0)所占的字节数相同都（4，或8)。<br/> 3、为了提高代码的健壮性，在后续表示指针空值时建议最好使用nullptr。</p>\n<h2>为什么NULL指向的空值为0而不是其他值？</h2>\n<p>        初始化指针是将其指向一个\"空\"的位置，比如0。由于大多数计算机<strong>系统不允许用户程序写地址为0的内存空间</strong>，倘若程序无意中对该指针所指地址赋值，通常在运行时就会导致程序退出。虽然程序退出并非什么好事，但这样一来错误也容易被程序员找到。</p>\n<p></p>\n</div>\n</div>"}