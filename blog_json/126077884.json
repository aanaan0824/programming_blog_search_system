{"blogid": "126077884", "writerAge": "码龄1年", "writerBlogNum": "32", "writerCollect": "2903", "writerComment": "3788", "writerFan": "7896", "writerGrade": "6级", "writerIntegral": "6768", "writerName": "程序猿教你打篮球", "writerProfileAdress": "writer_image\\profile_126077884.jpg", "writerRankTotal": "2069", "writerRankWeekly": "104", "writerThumb": "2593", "writerVisitNum": "246312", "blog_read_count": "9180", "blog_time": "已于 2022-08-22 21:31:03 修改", "blog_title": "【Java SE】程序逻辑控制", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<div class=\"img-center\">\n<figure class=\"image\">\n<img alt=\"\" height=\"105\" src=\"image\\b4e6ca8983a34017be11d504193bfa0e.png\" width=\"112\"/>\n<figcaption>\n   篮球哥温馨提示：编程的同时不要忘记锻炼哦！\n  </figcaption>\n</figure>\n</div>\n<h1 style=\"text-align:center;\">最美的不是下雨天，是曾与你躲过雨的屋檐.</h1>\n<hr/>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1%E3%80%81%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5-toc\" style=\"margin-left:0px;\"><a href=\"#1%E3%80%81%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5\">1、分支语句</a></p>\n<p id=\"1.1%20%E8%AE%A4%E8%AF%86%20if%20%E8%AF%AD%E5%8F%A5-toc\" style=\"margin-left:40px;\"><a href=\"#1.1%20%E8%AE%A4%E8%AF%86%20if%20%E8%AF%AD%E5%8F%A5\">1.1 认识 if 语句</a></p>\n<p id=\"1.2%20%E4%B8%A4%E4%B8%AA%20if%20%E5%88%86%E6%94%AF%E4%BB%A5%E4%B8%8A%E7%9A%84%E6%83%85%E5%86%B5-toc\" style=\"margin-left:40px;\"><a href=\"#1.2%20%E4%B8%A4%E4%B8%AA%20if%20%E5%88%86%E6%94%AF%E4%BB%A5%E4%B8%8A%E7%9A%84%E6%83%85%E5%86%B5\">1.2 两个 if 分支以上的情况</a></p>\n<p id=\"1.3%20if%20%E5%B5%8C%E5%A5%97%E7%9A%84%E6%83%85%E5%86%B5-toc\" style=\"margin-left:40px;\"><a href=\"#1.3%20if%20%E5%B5%8C%E5%A5%97%E7%9A%84%E6%83%85%E5%86%B5\">1.3 if 嵌套的情况</a></p>\n<p id=\"1.4%20switch%20%E8%AF%AD%E5%8F%A5%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#1.4%20switch%20%E8%AF%AD%E5%8F%A5%C2%A0\">1.4 switch 语句 </a></p>\n<p id=\"1.5%20%E4%BD%BF%E7%94%A8%20switch%20%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-toc\" style=\"margin-left:40px;\"><a href=\"#1.5%20%E4%BD%BF%E7%94%A8%20switch%20%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">1.5 使用 switch 的注意事项</a></p>\n<p id=\"2%E3%80%81%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#2%E3%80%81%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%C2%A0\">2、循环结构 </a></p>\n<p id=\"2.1%20while%20%E5%BE%AA%E7%8E%AF-toc\" style=\"margin-left:40px;\"><a href=\"#2.1%20while%20%E5%BE%AA%E7%8E%AF\">2.1 while 循环</a></p>\n<p id=\"2.2%20for%20%E5%BE%AA%E7%8E%AF%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#2.2%20for%20%E5%BE%AA%E7%8E%AF%C2%A0\">2.2 for 循环 </a></p>\n<p id=\"2.3%20do%20while%20%E5%BE%AA%E7%8E%AF%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#2.3%20do%20while%20%E5%BE%AA%E7%8E%AF%C2%A0\">2.3 do while 循环 </a></p>\n<p id=\"2.4%20break%20%E5%92%8C%20continue%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#2.4%20break%20%E5%92%8C%20continue%C2%A0\">2.4 break 和 continue </a></p>\n<p id=\"3%E3%80%81%E8%BE%93%E5%87%BA%E5%88%B0%E6%8E%A7%E5%88%B6%E5%8F%B0-toc\" style=\"margin-left:0px;\"><a href=\"#3%E3%80%81%E8%BE%93%E5%87%BA%E5%88%B0%E6%8E%A7%E5%88%B6%E5%8F%B0\">3、输出到控制台</a></p>\n<p id=\"4%E3%80%81%E4%BB%8E%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5-toc\" style=\"margin-left:0px;\"><a href=\"#4%E3%80%81%E4%BB%8E%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5\">4、从键盘输入</a></p>\n<hr/>\n<h1 id=\"1%E3%80%81%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5\"><span style=\"color:#ad720d;\"><strong>1、分支语句</strong></span></h1>\n<p>提到分支语句我们都不陌生，比如我们生活中都要面临着种种选择，而每个选择对应着不同的结果，我们的程序也是有许许多多的分支构成的，在Java中为我们提供了两种分支语句：<span style=\"color:#38d8f0;\"><span style=\"background-color:#e7fafa;\">if</span></span> 和 <span style=\"color:#4da8ee;\"><span style=\"background-color:#eaf4fc;\">switch</span></span>语句，下面我们就来学习下这两个语句。</p>\n<h2 id=\"1.1%20%E8%AE%A4%E8%AF%86%20if%20%E8%AF%AD%E5%8F%A5\">1.1 认识 if 语句</h2>\n<p>这里举一个很简单的双分支语句的例子：张三今天去买彩票，要不中奖了，要不就没有中奖，如果中奖了，那么张三就开心，如果没有中奖张三就不开心，放在程序里面我们怎么表示呢？如果为 <span style=\"color:#956fe7;\"><span style=\"background-color:#efedf6;\">ture</span></span> 真，我们则认为张三中奖，如果为 <span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">false</span></span> 假，我们则认为张三没有中奖，接下来我们来简单实现这个代码：</p>\n<pre><code class=\"language-java\">public class TestDemo {\n    public static void main(String[] args) {\n        boolean lottery = true;\n        if (lottery) {\n            System.out.println(\"happy\");\n        } else {\n            System.out.println(\"unhappy\");\n        }\n    }\n}</code></pre>\n<p>如上就是我们很简单的一个 if 语句，其实这里我们用 <span style=\"color:#ff9900;\"><span style=\"background-color:#fff5e6;\">boolean</span></span> 类型变量举例就是想告诉大家，<span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">if ()</span></span> 括号里面的表达式结果必须得是布尔值，你不能像 C 语言一样写个 1，或者直接 int a = 1; if (a)，这样都是不行了，<strong>Java中里面一定得是布尔表达式！</strong>当然后面的 else 你也可以结合情况而省略。</p>\n<h2 id=\"1.2%20%E4%B8%A4%E4%B8%AA%20if%20%E5%88%86%E6%94%AF%E4%BB%A5%E4%B8%8A%E7%9A%84%E6%83%85%E5%86%B5\">1.2 两个 if 分支以上的情况</h2>\n<p>当然，在写代码中，我们不可能只碰到两种情况，可能有多种情况需要我们判断，就比如拿学生考试成绩来说，如果在80分以上为优秀，60分以上为及格，60分以下就不及格，这样我们应该怎么表示呢？我们先来看下三种情况的语法格式：</p>\n<blockquote>\n<p><span style=\"color:#ff9900;\">if</span> (<span style=\"color:#4da8ee;\">布尔表达式1</span>) {<!-- --><br/>     <span style=\"color:#a2e043;\">//...code1</span><br/> } <span style=\"color:#ff9900;\">else if</span> (<span style=\"color:#4da8ee;\">布尔表达式2</span>) {<!-- --><br/>     <span style=\"color:#a2e043;\">//...code2</span><br/> } <span style=\"color:#ff9900;\">else</span> {<!-- --><br/>     <span style=\"color:#a2e043;\">//...code3</span><br/> }</p>\n</blockquote>\n<p>如果表达式1成立执行 <span style=\"color:#a2e043;\"><span style=\"background-color:#edf6e8;\">code1</span></span>，如果不成立我们才执行<span style=\"color:#4da8ee;\"><span style=\"background-color:#eaf4fc;\">布尔表达式2</span></span>，如果<span style=\"color:#4da8ee;\"><span style=\"background-color:#eaf4fc;\">布尔表达式2</span></span>成立我们则执行 <span style=\"color:#a2e043;\"><span style=\"background-color:#edf6e8;\">code2</span></span>，如果都不成立则执行 <span style=\"color:#a2e043;\"><span style=\"background-color:#edf6e8;\">code3</span></span></p>\n<pre><code class=\"language-java\">public class TestDemo {\n    public static void main(String[] args) {\n        int a = 30;\n        if (a &gt;= 80) {\n            System.out.println(\"优秀\");\n        } else if (a &gt;= 60) {\n            System.out.println(\"及格\");\n        } else {\n            System.out.println(\"不及格\");\n        }\n    }\n}</code></pre>\n<p>当然，在这里，你仍然可以结合情况省略最后的 else，虽然 if 可以不需要else，但是 else 绝对不能单独出现，else 必须配合 if 使用！</p>\n<h2 id=\"1.3%20if%20%E5%B5%8C%E5%A5%97%E7%9A%84%E6%83%85%E5%86%B5\">1.3 if 嵌套的情况</h2>\n<p>这种情况在我们编程的过程中也难免会碰到， 但是如果有着不良好的代码风格，那可谓是影响代码的可读性，比如：</p>\n<pre><code class=\"language-java\">public class TestDemo {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        if (a &gt; 0) \n            if (b &gt; 0)\n                System.out.println(\"happy\");\n        else\n            System.out.println(\"unhappy\");\n    }\n}</code></pre>\n<p>这也就是我们常形容的悬空 else，从表面来看，第一时间反应 else 是跟 第一个 if 匹配，但事实不是这样的，在学习C语言应该就学过，else 跟最近的 if 匹配，那么如何才能写出 Java 中良好风格的代码呢？</p>\n<pre><code class=\"language-java\">public class TestDemo {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        if (a &gt; 0) {\n            if (b &gt; 0) {\n                System.out.println(\"happy\");\n            } else {\n                System.out.println(\"unhappy\");\n            }\n        }\n    }\n}</code></pre>\n<p>在实际开发中，我们更建议这样写，最好都加上大括号，不要特立独行，好的代码不是说让别人看不懂，而是让别人看的舒服，看得懂，性能好这才叫做好代码，你代码写的乱七八糟只有你自己看得懂，那八成公司不会留你。</p>\n<blockquote>\n<p><strong>注意：if 表达式后面不要跟分号，这样会导致分号是 if 语句的语句体，而 { } 中的代码已经和 if 无关。</strong></p>\n</blockquote>\n<h2 id=\"1.4%20switch%20%E8%AF%AD%E5%8F%A5%C2%A0\">1.4 switch 语句 </h2>\n<p>这个语句使用起来很简单，具体在我们C语言深度解剖专栏有详细介绍，这里的基本语法我们也就不在强调了。 </p>\n<p><strong>我们来看一段代码：</strong></p>\n<p style=\"text-align:center;\"><strong><img alt=\"\" src=\"image\\1ec1e535b8b5430e8343dddd106b0a49.png\"/></strong></p>\n<p>如上代码我们可以分析出什么呢？</p>\n<blockquote>\n<ul><li>switch 也是从上到下执行的，表达式的值找到匹配的case入口才进入</li><li>如果没有 break 语句就会一直往下执行，直到遇到 break</li><li>当表达式的值，都匹配不上的话，执行 default</li></ul>\n</blockquote>\n<p>这就是为什么之前C语言的时候，也在强调，每个 case 最好带上 break，如果是产品要求，那你可以不带，就好比我们之前写过，1~5输出工作日，6~7输出休息日，那就可以适当的不带上break，具体我们还是要根据实际情况而定。至于 default 这个建议都带上。</p>\n<h2 id=\"1.5%20%E4%BD%BF%E7%94%A8%20switch%20%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">1.5 使用 switch 的注意事项</h2>\n<p><span style=\"color:#fe2c24;\"><strong>注意：在有多个 case 的时候，case 后面的常量值不能重复！</strong></span></p>\n<p><img alt=\"\" src=\"image\\8ac65006766e43ba8ebb01ef4467663d.png\"/></p>\n<blockquote>\n<ul><li>switch() 括号里面只能是如上红框框类型的表达式。</li><li>switch 的分支很单一，就比如说你要满足一个变量 大于 20 并且 小于 50 才执行某某某，这样用 if 就很方面，而 switch 却做不到，他并不能表达复杂的条件。</li><li>在case后面，我们的代码要尽可能的简短，不要写的特别复杂。</li><li>虽然 switch 支持嵌套，但是一般很少这样做，既不美观，又影响代码可读性</li></ul>\n</blockquote>\n<hr/>\n<h1 id=\"2%E3%80%81%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%C2%A0\"><span style=\"color:#ad720d;\"><strong>2、循环结构 </strong></span></h1>\n<p>我们先简单的通过流程图来认识以下Java中的三种循环结构：</p>\n<p><img alt=\"\" src=\"image\\02d0fd76c6e74980814a045d4193d202.png\"/></p>\n<ul><li><span style=\"color:#ff9900;\"><span style=\"background-color:#fff5e6;\">while 循环</span></span>，如果碰到 break 则跳出循环，如果碰到 continue 结束本次循环回到循环条件判断部分。</li><li><span style=\"color:#4da8ee;\"><span style=\"background-color:#eaf4fc;\">for 循环</span></span>，如果碰到 break 则跳出循环，如果碰到 continue 则结束本次循环，跳到表达式3，并不会回到循环条件判断表达式2。</li><li><span style=\"color:#956fe7;\"><span style=\"background-color:#efedf6;\">do while 循环</span></span>，如果碰到break，则跳出循环，如果碰到 continue 则结束本次循环回到循环条件判断部分。</li></ul>\n<blockquote>\n<p><span style=\"color:#ff9900;\"><span style=\"background-color:#fff5e6;\">while循环</span></span>条件 <span style=\"color:#a2e043;\"><span style=\"background-color:#edf6e8;\">expr</span></span> 结果必须为 <span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">true</span></span> 或者 <span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">fase</span></span> 也就是布尔值，</p>\n<p><span style=\"color:#4da8ee;\"><span style=\"background-color:#eaf4fc;\">for循环</span></span>条件 <span style=\"color:#a2e043;\"><span style=\"background-color:#edf6e8;\">expr2</span></span> 结果也必须是布尔值，</p>\n<p>同理，<span style=\"color:#956fe7;\"><span style=\"background-color:#efedf6;\">do while循环</span></span>条件 <span style=\"color:#a2e043;\"><span style=\"background-color:#edf6e8;\">expr</span></span> 结果也的是布尔值。所有的循环，一旦碰到循环条件为 <span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">false</span></span> 都会结束循环(do while 最少执行一次循环)</p>\n</blockquote>\n<p>以上则是我们通过流程图得出的结论，下面我们将依次演示每个循环的具体代码实现：</p>\n<h2 id=\"2.1%20while%20%E5%BE%AA%E7%8E%AF\">2.1 while 循环</h2>\n<p>这里我们举一个很简单的例子来看，张三很喜欢买彩票，他每天都买，直到张三买了十年彩票总算中大奖了，然后张三变成了富豪，结束了他每天买彩票的日子，我们简单算一下，就按一年 365 天算，张三一共要买 3650 天的彩票才能中奖，那么我们如何用程序来简单的表示呢？这里就可以用到 while 了：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\6ff61471138446899c3597741ab1a52f.png\"/></p>\n<p>这个简单的循环程序我们可以发现，当 while 条件表达式不成立了，我们则会跳出循环，而且每次进入循环，我们都会 a自增1，更接近不成立的那个条件，这也叫做循环的迭代条件，如果循环语句中的条件恒成立的话，那将会是个死循环！当然像以上的代码你也可以写个恒成立的表达式，只要达到条件使用 break 跳出即可，berak我们后面会讲，先放着。</p>\n<h2 id=\"2.2%20for%20%E5%BE%AA%E7%8E%AF%C2%A0\">2.2 for 循环 </h2>\n<p>for 循环的格式会比 while 循环更直观，如果循环里面代码特别多的话，我们可能很难找到循环更新的表达式，而 for 循环刚好就弥补了这个麻烦，循环更新表达式直接在一行当中：</p>\n<blockquote>\n<p><span style=\"color:#ff9900;\">for</span> ( <span style=\"color:#4da8ee;\">表达式1</span>;  <span style=\"color:#4da8ee;\">布尔表达式2</span>; <span style=\"color:#4da8ee;\"> 表达式3</span> ) {<!-- --></p>\n<p>        <span style=\"color:#a2e043;\">//....code</span><br/> }</p>\n</blockquote>\n<ul><li>表达式1：用来设置循环变量的初始值</li><li>表达式2：循环条件，用来判断是否为真假，条件为假则跳出循环</li><li>表达式3：循环变量的更新方式 </li></ul>\n<p>在我们的刚开始循环图也能看出来，for循环的执行过程是：1-&gt;2-&gt;code-&gt;3-&gt;2-&gt;code-&gt;3-&gt;2-&gt;code-&gt;3.....</p>\n<p>这里我们在写一个很简单的例子来让大家更充分认识 for，求 1~100的和：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\7c0109121f4344e886719c45048582ba.png\"/></p>\n<h2 id=\"2.3%20do%20while%20%E5%BE%AA%E7%8E%AF%C2%A0\">2.3 do while 循环 </h2>\n<p>这个循环相对于前两个循环使用的频率就会少很多了，看刚开始的图大家也能分析到，此循环最低执行一次，也很好理解，二话不说先执行循环体，在进行条件判断，像类似的，我们在写C语言三子棋的时候用到过，一进来先打印菜单让你进行选择。这里我们也写一个简单的例子让大家看一下 do while 循环的语法，比如打印 1~10 的数字：</p>\n<pre><code class=\"language-java\">public class TestDemo {\n    public static void main(String[] args) {\n        int i = 1;\n        do {\n            System.out.println(i);\n            i++;\n        } while (i &lt;= 10);\n    }\n}</code></pre>\n<p><strong>注意：while后面的分号要写上 </strong></p>\n<h2 id=\"2.4%20break%20%E5%92%8C%20continue%C2%A0\">2.4 break 和 continue </h2>\n<ul><li><span style=\"color:#956fe7;\"><span style=\"background-color:#efedf6;\">break</span></span> 的功能是跳出循环，如果是嵌套循环则是跳出最近的循环</li><li><span style=\"color:#4da8ee;\"><span style=\"background-color:#eaf4fc;\">continue</span></span> 的功能是跳过本次循环，进入下次循环。</li></ul>\n<p>至于 <span style=\"color:#956fe7;\"><span style=\"background-color:#efedf6;\">break</span></span> 和 <span style=\"color:#4da8ee;\"><span style=\"background-color:#eaf4fc;\">continue</span></span> 他们执行后分别跳到了哪个地方，再这一节刚开始的那个流程图已经画的非常清楚了，大家可以去看一下，接着我们就来简单的实现下最开始讲的张三中彩票使用 <span style=\"color:#956fe7;\"><span style=\"background-color:#efedf6;\">break</span></span> 的写法：</p>\n<pre><code class=\"language-java\">public class TestDemo {\n    public static void main(String[] args) {\n        int a = 1;\n        while (true) {\n            if (3650 == a) {\n                System.out.println(\"第\" + a + \"天,中奖了！\");\n                break;\n            }\n            System.out.println(\"第\" + a + \"天,没中奖！\");\n            a++;\n        }\n    }\n}</code></pre>\n<p>至于 continue 概念已经很清楚了，感兴趣的可以自己下去摸索，学习一定得自己尝试，每期我可能都会留一个很简单的让你们去实践得出真理，如果不想实践可以移步至---&gt;</p>\n<p><a href=\"https://blog.csdn.net/m0_61784621/article/details/124525682\" title=\"【C语言】关键字的深入理解（第四期）_程序猿教你打篮球的博客-CSDN博客\">【C语言】关键字的深入理解（第四期）_程序猿教你打篮球的博客-CSDN博客</a></p>\n<p>如上C语言文章很详细的介绍了 continue，因为 Java 在这里跟C与语言区别不是很大，只要记住，Java部分表达式需要布尔表达式即可。 </p>\n<hr/>\n<h1 id=\"3%E3%80%81%E8%BE%93%E5%87%BA%E5%88%B0%E6%8E%A7%E5%88%B6%E5%8F%B0\"><span style=\"color:#ad720d;\"><strong>3、输出到控制台</strong></span></h1>\n<p>在Java中有三种基本输出语法：</p>\n<blockquote>\n<p><span style=\"color:#ff9900;\">System</span>.<span style=\"color:#956fe7;\">out</span>.<span style=\"color:#4da8ee;\">println</span>(<span style=\"color:#a2e043;\">mgs</span>); //输出一个字符串，换行<br/><span style=\"color:#ff9900;\">System</span>.<span style=\"color:#956fe7;\">out</span>.<span style=\"color:#4da8ee;\">print</span>(<span style=\"color:#a2e043;\">mgs</span>); //输出一个字符串，不换行<br/><span style=\"color:#ff9900;\">System</span>.<span style=\"color:#956fe7;\">out</span>.<span style=\"color:#4da8ee;\">printf</span>(<span style=\"color:#a2e043;\">format, msg</span>);  //格式化输出，与C语言基本一致</p>\n</blockquote>\n<p><strong>演示： </strong><img alt=\"\" src=\"image\\a7e9e8dd68044aecbed8beadf5e69308.png\"/></p>\n<p>说真的，像这些打印函数几乎以后开发中用不上的，也没必要去给他完全研究透，只要我们会用即可。</p>\n<h1 id=\"4%E3%80%81%E4%BB%8E%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5\"><strong>4、从键盘输入</strong></h1>\n<p>这个输入语句，我们只要会用就行目前，因为还没有讲到类，所以理解起来会比较麻烦，现在我们只需要照葫芦画瓢即可，等把类讲完，你自然就懂了我今天的操作。</p>\n<p><strong>例如，我今天要输入姓名，年龄，然后把他们打印出来： </strong><img alt=\"\" src=\"image\\21626c14719a4b2ab589bcc01ca891eb.png\"/></p>\n<p>像平时刷题的时候，如果碰到需要循环输入的话，我们可以在 while() 括号里直接写上我们定义的</p>\n<p><span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">scanner.hasNextInt() //一直读取，判断是否有下一个整数，返回值为布尔类型</span></span></p>\n<p>当循环条件是以上语句的时候，使用 ctrl + z 来结束输入 (Windows 上使用 ctrl + z，Linux / Mac 上使用 ctrl + d)，具体为什么这么使用我们后期会介绍，我们目前能会用即可。</p>\n<hr/>\n<p class=\"img-center\"><img alt=\"\" height=\"132\" src=\"image\\96bcb84670f448848a35c59daca46b8f.png\" width=\"164\"/></p>\n<p style=\"text-align:center;\">下期预告：【Java SE】方法的使用</p>\n</div>\n</div>"}