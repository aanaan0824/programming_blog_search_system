{"blogid": "124108069", "writerAge": "码龄9年", "writerBlogNum": "7", "writerCollect": "13", "writerComment": "3", "writerFan": "1", "writerGrade": "1级", "writerIntegral": "73", "writerName": "码农@cj", "writerProfileAdress": "writer_image\\profile_124108069.jpg", "writerRankTotal": "156270", "writerRankWeekly": "266248", "writerThumb": "0", "writerVisitNum": "11575", "blog_read_count": "3919", "blog_time": "已于 2022-04-22 18:32:21 修改", "blog_title": "使用Dockerfile文件部署php项目", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%E3%80%81%E5%BD%93%E5%89%8D%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E5%BD%93%E5%89%8D%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\">一、当前项目结构</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E5%88%9B%E5%BB%BADockerfile%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E5%88%9B%E5%BB%BADockerfile%E6%96%87%E4%BB%B6\">二、创建Dockerfile文件</a></p>\n<p id=\"%E4%B8%89%E3%80%81%E7%94%9F%E6%88%90%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81%E7%94%9F%E6%88%90%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6\">三、生成镜像文件</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E4%BD%BF%E7%94%A8%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B9%B6%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E4%BD%BF%E7%94%A8%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B9%B6%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8\">四、使用镜像文件，并启动容器</a></p>\n<p id=\"%E4%BA%94%E3%80%81%E8%BF%9E%E6%8E%A5%E5%B7%B2%E5%90%AF%E5%8A%A8%E7%9A%84%E9%95%9C%E5%83%8F%E5%AE%B9%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81%E8%BF%9E%E6%8E%A5%E5%B7%B2%E5%90%AF%E5%8A%A8%E7%9A%84%E9%95%9C%E5%83%8F%E5%AE%B9%E5%99%A8\">五、连接已启动的镜像容器</a></p>\n<p id=\"%E5%85%AD%E3%80%81%20%E5%BD%93%E5%89%8D%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%AD%E3%80%81%20%E5%BD%93%E5%89%8D%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98\">六、 构建项目出现的问题</a></p>\n<p id=\"%E4%B8%83%E3%80%81%E5%88%A0%E9%99%A4%E5%AE%B9%E5%99%A8%E3%80%81%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%83%E3%80%81%E5%88%A0%E9%99%A4%E5%AE%B9%E5%99%A8%E3%80%81%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6\">七、删除容器、删除镜像文件</a></p>\n<p id=\"%E4%B8%83%E3%80%81%E6%88%91%E8%87%AA%E5%B7%B1%E6%9E%84%E5%BB%BA%E7%94%9F%E6%88%90%E7%9A%84%E9%95%9C%E5%83%8F-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%83%E3%80%81%E6%88%91%E8%87%AA%E5%B7%B1%E6%9E%84%E5%BB%BA%E7%94%9F%E6%88%90%E7%9A%84%E9%95%9C%E5%83%8F\">八、我自己构建生成的镜像</a></p>\n<p id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A01%E3%80%81ubuntu%20%2B%20nginx%20%2B%20php-fpm7.4%20%E7%89%88%E6%9C%AC%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A01%E3%80%81ubuntu%20%2B%20nginx%20%2B%20php-fpm7.4%20%E7%89%88%E6%9C%AC%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83\"> 1、ubuntu + nginx + php-fpm7.4 版本的运行环境</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%E4%B8%80%E3%80%81%E5%BD%93%E5%89%8D%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\">一、当前项目结构</h1>\n<pre><code>/project_name\n|-- /dist          #--- 项目编译后输出的目录\n|-- /config        #--- 配置文件目录\n|---|\n|---|-- Dockerfile #--- Dockerfile文件\n|---|-- nginx.conf #--- nginx配置文件\n</code></pre>\n<p> nginx.conf文件</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\9a288051d33345d38de18e34e3870d40.png\"/></p>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"image\\5d2225b18fc8448ba88b48fe2a16fbcb.png\"/></p>\n<p></p>\n<h1 id=\"%E4%BA%8C%E3%80%81%E5%88%9B%E5%BB%BADockerfile%E6%96%87%E4%BB%B6\">二、创建Dockerfile文件</h1>\n<pre><code class=\"language-bash\"># 从ubuntu镜像中构建应用\nFROM ubuntu:latest\n\n# 设置镜像的制作者\nMAINTAINER congjiang\n\n# 安装nginx + php-fpm7.4 \n\nRUN apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get install -y nginx php7.4-fpm vim\n\n# 上一条命令安装nginx和fpm\n# nginx 默认安装路径 /etc/nginx/\n# php-fpm 默认安装路径 /etc/php/fpm/\n# nginx配置文件存放目录 /etc/nginx/conf.d/ \n# nginx默认项目路径 /var/www/html/\n\n# 在上传目录之前，可以先删除旧项目代码\n# RUN [\"rm\", \"-rf\", \"/var/www/project_name/\"]\n\n# 项目文件上传, 把当前目录下的所有文件上传到/var/www/project_name目录下\nCOPY ./dist/ /var/www/project_name/\n\n# 把当前项目的nginx.conf配置文件上传到/etc/nginx/conf.d/目录下\nCOPY ./config/nginx.conf /etc/nginx/conf.d/default.conf\n\n# 容器运行时启动应用\n# php-fpm7.4 -D : 启动fpm并在后台运行\n# nginx -g 'daemon off;' : 启动nginx, 前台执行, 并保持进程常驻, 避免docker容器启动后就自动关闭了\nCMD php-fpm7.4 -D &amp;&amp; nginx -g 'daemon off;'\n</code></pre>\n<h1 id=\"%E4%B8%89%E3%80%81%E7%94%9F%E6%88%90%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6\">三、生成镜像文件</h1>\n<pre><code class=\"language-bash\"># 在项目project_name目录下执行命令\n\ndocker build -f config/Dockerfile -t myproject:latest .\n\n# 注：  最后的参数表示路径，  . : 表示当前目录下\n# -f 指定Dockerfile文件所在目录， 如果是相对路径，则从当前目录下查找\n# -t 重新指定镜像的名称和标签  &lt;name&gt;:&lt;tag&gt;</code></pre>\n<h1 id=\"%E5%9B%9B%E3%80%81%E4%BD%BF%E7%94%A8%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B9%B6%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8\">四、使用镜像文件，并启动容器</h1>\n<pre><code class=\"language-bash\"># 启动镜像\n\ndocker run -itd -p 80:8080 myproject:latest\n\n# --name &lt;name&gt; 为启动的容器指定名称，不指定会默认随机一个名称\n# -p 访问的端口:镜像内程序的端口\n# -d 表示当前容器在后台运行\n# -it 指定要启动的镜像名称和标签 &lt;name&gt;:&lt;tag&gt;\n# -v 本地路径:镜像内的路径   可以将本地路径和容器内的路径映射，可以即时修改文件即时生效，方便测试\n# -v 命令可以有多条\n# --rm 当前容器退出后将自动删除\n# eg:  -v E:/logs/:/var/logs/nginx/   把nginx的日志文件映射到本地\n</code></pre>\n<blockquote>\n<p>注： nginx + php-fpm 环境搭建到这里已经完成。</p>\n<p>启动运行容器后， 打开本地浏览器：  http://localhost/  就可以访问了</p>\n</blockquote>\n<h1 id=\"%E4%BA%94%E3%80%81%E8%BF%9E%E6%8E%A5%E5%B7%B2%E5%90%AF%E5%8A%A8%E7%9A%84%E9%95%9C%E5%83%8F%E5%AE%B9%E5%99%A8\">五、连接已启动的镜像容器</h1>\n<pre><code># 查看正在运行的容器\n\ndocker ps\n\n# CONTAINER ID    IMAGE  ...\n# 01f82e69c455    myproject  ...\n\ndocker exec -it 01f82e69c455 /bin/bash\n\n# -it 需要连接的容器的CONTAINER ID\n# /bin/bash 当前参数必须的</code></pre>\n<h1 id=\"%E5%85%AD%E3%80%81%20%E5%BD%93%E5%89%8D%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98\">六、 构建项目出现的问题</h1>\n<p>        1.  每次重新构建项目，都会新创建一个镜像文件</p>\n<p>        2.  如果构建镜像文件时，指定的name和标签与原来的镜像一样，则原来的镜像不会删除，会被更名为&lt;none&gt;:&lt;none&gt; 的镜像文件</p>\n<pre><code class=\"language-bash\"># 已找到相关命令解决上面两个问题， 在创建相同名称的新镜像文件时，避免旧镜像残留\n# 可以先删除旧镜像文件\n\ndocker rmi -f &lt;name&gt;:&lt;tag&gt;  \n# 当前命令可以强制删除指定名称和tag的镜像文件</code></pre>\n<h1 id=\"%E4%B8%83%E3%80%81%E5%88%A0%E9%99%A4%E5%AE%B9%E5%99%A8%E3%80%81%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6\">七、删除容器、删除镜像文件</h1>\n<pre><code class=\"language-R\"># 删除运行的容器\ndocker rm -f &lt;name&gt;\n# -f 强制删除，如果容器正在运行也会被删除\n# -v 删除当前容器挂载的数据卷\n\n# 删除所有没有运行的容器\ndocker rm $(docker ps -a -q)\n\n# 删除本地镜像文件\ndocker rmi -f &lt;name&gt;:&lt;tag&gt;\n\n</code></pre>\n<h1 id=\"%E4%B8%83%E3%80%81%E6%88%91%E8%87%AA%E5%B7%B1%E6%9E%84%E5%BB%BA%E7%94%9F%E6%88%90%E7%9A%84%E9%95%9C%E5%83%8F\">八、镜像仓库地址</h1>\n<h3 id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A01%E3%80%81ubuntu%20%2B%20nginx%20%2B%20php-fpm7.4%20%E7%89%88%E6%9C%AC%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83\"> 1、ubuntu + nginx + php-fpm7.4 版本的运行环境</h3>\n<p>  命令拉取镜像：</p>\n<pre><code class=\"language-bash\">docker pull freedomx20/nginx-fpm7.4:1.0</code></pre>\n<p>  docker镜像仓库：<br/><a class=\"has-card\" href=\"https://hub.docker.com/r/freedomx20/nginx-fpm7.4\" title=\"Docker Hub (ubuntu + nginx + php-fpm7.4 环境)\"><span class=\"link-card-box\"><span class=\"link-title\">Docker Hub (ubuntu + nginx + php-fpm7.4 环境)</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"image\\icon-default.png\"/>https://hub.docker.com/r/freedomx20/nginx-fpm7.4</span></span></a></p>\n</div>\n</div>"}