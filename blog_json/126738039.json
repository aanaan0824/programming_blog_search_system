{"blogid": "126738039", "writerAge": "码龄2年", "writerBlogNum": "74", "writerCollect": "172", "writerComment": "75", "writerFan": "2174", "writerGrade": "4级", "writerIntegral": "955", "writerName": "就一枚小白", "writerProfileAdress": "writer_image\\profile_126738039.jpg", "writerRankTotal": "21566", "writerRankWeekly": "3643", "writerThumb": "126", "writerVisitNum": "75481", "blog_read_count": "13", "blog_time": "已于 2022-09-07 12:18:26 修改", "blog_title": "C# string字符串内存管理深入分析（全程干货）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><ul><li><a href=\"#_1\">前言</a></li><li><a href=\"#_3\">内存分区</a></li><li><a href=\"#_8\">字符串的存放区域</a></li><li><ul><li><a href=\"#_17\">猜测</a></li><li><a href=\"#_19\">结果</a></li><li><a href=\"#_32\">原理</a></li><li><a href=\"#_35\">实践</a></li><li><ul><li><a href=\"#_42\">一、文本字符串常量+文本字符串常量</a></li><li><a href=\"#_64\">二、非文本字符串对象+非文本字符串对象</a></li><li><a href=\"#Internstring_86\">三、使用Intern方法，拼接创建string对象</a></li><li><a href=\"#newstring_107\">四、使用new，构造函数，创建string对象</a></li></ul>\n</li><li><a href=\"#_129\">动态创建的字符串对象存储在哪了？</a></li></ul>\n</li><li><a href=\"#_179\">总结</a></li><li><a href=\"#_187\">关于字符串常量池的更深理解</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_1\"></a>前言</h2>\n<p>最近突然想研究下string类型的内存管理。查了下网上的资料，发现有些文章说法不一，更有甚者误人子弟。所以我结合网上的文章和自己的实验写下这篇文章。</p>\n<h2><a id=\"_3\"></a>内存分区</h2>\n<ol><li>栈区：由编译器自动分配释放 ，存放值类型的对象本身，引用类型的引用地址（指针），静态区对象的引用地址（指针），常量区对象的引用地址（指针）等。其操作方式类似于数据结构中的栈。</li><li>堆区（托管堆）:用于存放引用类型对象本身。在c#中由.net平台的垃圾回收机制（GC）管理。栈，堆都属于动态存储区，可以实现动态分配。</li><li>静态区及常量区：用于存放静态类，静态成员（静态变量，静态方法），常量的对象本身。由于存在栈内的引用地址都在程序运行开始最先入栈，因此静态区和常量区内的对象的生命周期会持续到程序运行结束时，届时静态区内和常量区内对象才会被释放和回收（编译器自动释放）。所以应限制使用静态类，静态成员（静态变量，静态方法），常量，否则程序负荷高。</li><li>代码区：存放函数体内的二进制代码。</li></ol>\n<h2><a id=\"_8\"></a>字符串的存放区域</h2>\n<p>先看如下代码</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\ns2 <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_17\"></a>猜测</h3>\n<p>如果是引用类型，输出的应该是123，因为s1和s2指向了同一块区域，s2对这一块区域的值进行修改了，那么输出s1的值应该是被修改之后的值。</p>\n<h3><a id=\"_19\"></a>结果</h3>\n<p>但是输出的是1，也就是说输出的是s1一开始赋的值。</p>\n<hr/>\n<ol><li>在C#中，string的值是<strong>不可变的</strong>，它是<strong>只读不可写</strong>。也就是说如果你要去修改它的值，那么就会申请一个新的空闲区域，然后把新建的值放进去。</li><li>string类型在.Net中是引用类型，它属于基本数据类型，也是基本数据类型中唯一的引用类型。</li><li>string的存储方式很特殊，CLR为了减少字符串对象的重复创建，其维护了一个特殊的内存，这段内存被成为<strong>字符串常量池</strong>。字符串常量池不在堆中也不在栈中,是独立的内存空间管理，在内存的常量区。</li><li><strong>CLR</strong>是公共语言运行库 <strong>(Common Language Runtime)</strong> 和Java虚拟机一样也是一个运行时环境，它负责资源管理（内存分配和垃圾收集等）。</li></ol>\n<p>所以上面代码的内存分配是这样的<br/> <img alt=\"在这里插入图片描述\" src=\"image\\40caba44d3ca464bae6138c0f489e9ef.png\"/><br/> 当我们让s1 = “123”;的时候<br/> <img alt=\"在这里插入图片描述\" src=\"image\\31b191bfb40d4517842767fed5f106c5.png\"/></p>\n<h3><a id=\"_32\"></a>原理</h3>\n<p>当我们定义了s1和s2的字符串，然后CLR内部机制去字符串常量池中找，如果存在相同内容的字符串对象的引用，则将这个引用返回。否则新的字符串对象被创建，然后将这个引用放入字符串常量池，并返回该引用。当然如果是new出来的对象，则放在托管堆中。</p>\n<h3><a id=\"_35\"></a>实践</h3>\n<ol><li>我们可以使用ReferenceEquals() 判断，如果地址相同返回true，反之false。</li><li>我们可以使用Equals() 判断，如果值相同返回true，反之false。</li><li>string.Intern()可以把动态创建的字符串加入到字符串常量池中。</li></ol>\n<p><strong>测试环境：Unity</strong></p>\n<blockquote>\n<p>Tips：先看代码和结果，结论我放在后面</p>\n</blockquote>\n<h4><a id=\"_42\"></a>一、文本字符串常量+文本字符串常量</h4>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ToStringTest</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str12 <span class=\"token operator\">=</span> <span class=\"token string\">\"12\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"s的值为</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">s</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"s与str12值是否相等：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">s<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>str12<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"s与str12地址是否相等：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\"><span class=\"token function\">ReferenceEquals</span><span class=\"token punctuation\">(</span>str12<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\017162604dfe4ec78347932c73f1a68d.png\"/></p>\n<h4><a id=\"_64\"></a>二、非文本字符串对象+非文本字符串对象</h4>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ToStringTest</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str12 <span class=\"token operator\">=</span> <span class=\"token string\">\"12\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s <span class=\"token operator\">=</span> str1 <span class=\"token operator\">+</span> str2<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"s的值为</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">s</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"s与str12值是否相等：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">s<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>str12<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"s与str12地址是否相等：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\"><span class=\"token function\">ReferenceEquals</span><span class=\"token punctuation\">(</span>str12<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1d3fd37a88584a11ada8034c2029f4a7.png\"/></p>\n<h4><a id=\"Internstring_86\"></a>三、使用Intern方法，拼接创建string对象</h4>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ToStringTest</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str12 <span class=\"token operator\">=</span> <span class=\"token string\">\"12\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Intern</span><span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">+</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"s的值为</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">s</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"s与str12值是否相等：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">s<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>str12<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"s与str12地址是否相等：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\"><span class=\"token function\">ReferenceEquals</span><span class=\"token punctuation\">(</span>str12<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6db381f00aa845b99ea15c5be061bad2.png\"/></p>\n<h4><a id=\"newstring_107\"></a>四、使用new，构造函数，创建string对象</h4>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ToStringTest</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str12 <span class=\"token operator\">=</span> <span class=\"token string\">\"12\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> chs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">(</span>chs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"s的值为</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">s</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"s与str12值是否相等：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">s<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>str12<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"s与str12地址是否相等：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\"><span class=\"token function\">ReferenceEquals</span><span class=\"token punctuation\">(</span>str12<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c50bf1c42af046a6b5cc0e7a764cba14.png\"/></p>\n<h3><a id=\"_129\"></a>动态创建的字符串对象存储在哪了？</h3>\n<p>我们可以使用System.String.IsInterned判断，如果 str 在公共语言运行时的暂存池中，则返回对它的引用；否则返回 null。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ToStringTest</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> chs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">(</span>chs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsInterned</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b6380ccd06c74e7293f2d129eb9c8e16.png\"/><br/> 这说明了字符串常量池中并没有\"12\"，这个字符串常量。</p>\n<p>注意：有些同学可能会这么说<br/> 为什么不用string.IsInterned(“12”)，而用string.IsInterned(s)呢？<br/> 好，那么我们看看下面这部分代码</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ToStringTest</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> chs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">(</span>chs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsInterned</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"121212121212\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d384d96964ae4f848bdf23d2d70d5b13.png\"/><br/> 看到了吗，这里有一个需要注意的点，因为我们传参传了\"121212121212\"。所以就已经在字符串常量池中创建了这个对象，所以这并不能说明什么。</p>\n<p>如果不信的话，再看下面这串代码</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">(</span>chs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsInterned</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">+</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\dd851ad7b04545aca3aaf6543fbe35eb.png\"/></p>\n<h2><a id=\"_179\"></a>总结</h2>\n<p>以下三种情况会查询暂存池（若查询不到就将其存入暂存池）</p>\n<ul><li>利用字面量值创建string对象</li><li>利用string.Intern()创建string对象</li><li>字面量值+字面量值拼接创建string对象</li></ul>\n<p><strong>注意</strong>：不是所有的字符串都放在暂存池中，运行时期动态创建的字符串不会被加入到暂存池中。</p>\n<h2><a id=\"_187\"></a>关于字符串常量池的更深理解</h2>\n<ol><li> <p>暂存池由CLR来维护，其中的所有字符串对象的值都不相同。</p> </li><li> <p><strong>只有编译阶段的文本字符常量</strong>会被自动添加到暂存池。</p> </li><li> <p><strong>运行时期动态创建的字符串</strong>不会被加入到暂存池中，而是托管堆。</p> </li><li> <p>string.Intern()可以把动态创建的字符串加入到暂存池中。</p> </li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}