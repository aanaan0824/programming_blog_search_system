{"blogid": "119251703", "writerAge": "码龄2年", "writerBlogNum": "43", "writerCollect": "1559", "writerComment": "95", "writerFan": "85", "writerGrade": "4级", "writerIntegral": "988", "writerName": "NiUoW", "writerProfileAdress": "writer_image\\profile_119251703.jpg", "writerRankTotal": "1099030", "writerRankWeekly": "279142", "writerThumb": "303", "writerVisitNum": "108828", "blog_read_count": "10234", "blog_time": "已于 2022-04-28 10:57:40 修改", "blog_title": "C++迭代器（iterator）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"iterator_0\"></a><strong>什么是迭代器（iterator）</strong></h1>\n<p>迭代器（iterator）是一种可以遍历容器元素的数据类型。迭代器是一个变量，相当于容器和操纵容器的算法之间的中介。C++更趋向于使用迭代器而不是数组下标操作，因为标准库为每一种标准容器（如vector、map和list等）定义了一种迭代器类型，而只有少数容器（如vector）支持数组下标操作访问容器元素。可以通过迭代器指向你想访问容器的元素地址，通过*x打印出元素值。这和我们所熟知的指针极其类似。</p>\n<p>C语言有指针，指针用起来十分灵活高效。<br/> C++语言有迭代器，迭代器相对于指针而言功能更为丰富。</p>\n<p>vector，是数组实现的，也就是说，只要知道数组的首地址，就能访问到后面的元素。所以，我们可以通过访问vector的迭代器来遍历vector容器元素。<br/> List，是链表实现的，我们知道，链表的元素都存储在一段不是连续的地址空间中。我们需要通过next指针来访问下一个元素。那么，我们也可以通过访问list的迭代器来实现遍历list容器元素。</p>\n<p>由此可见，迭代器和容器是密不可分的、紧密相连的的关系。不同的容器，它们的迭代器也是不同的，但是它们的迭代器功能是一样的。假如没有迭代器，由于vector和list容器的存储特点，你需要两种算法去实现遍历vector和list容器的功能，复杂且低效。有了迭代器，遍历容器的效率会大大提高。</p>\n<h1><a id=\"iterator_11\"></a><strong>迭代器（iterator）的使用</strong></h1>\n<p>容器都有成员begin和end，其中begin成员复制返回指向第一个元素的迭代器（用*迭代器打印出元素值），而end成员返回指向容器尾元素的下一个位置的迭代器，它是一个不存在的元素位置。</p>\n<p>所以如果你想遍历容器（vector）元素的话，一般这样写</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> it <span class=\"token operator\">=</span> vector<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> vector<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>it<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>vector容器的迭代器定义</p>\n<pre><code class=\"prism language-cpp\">std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//it能读写vector&lt;int&gt;的元素</span>\nstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>const_iterator it<span class=\"token punctuation\">;</span><span class=\"token comment\">//it只能读vector&lt;int&gt;的元素，不可以修改vector&lt;int&gt;中的元素</span>\n</code></pre>\n<h3><a id=\"_27\"></a>当然，也可以逆序迭代！</h3>\n<pre><code class=\"prism language-cpp\"> <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>reverse_iterator it <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">!=</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>it<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9eeba872aa16403e843a278e72251705.png\"/><br/> std::也可以没有，因为前面应经给出来了</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_40\"></a>其他容器用法类似！</h3>\n<hr/>\n<h1><a id=\"vectorC_44\"></a><strong>下面是以vector容器为例的C++代码，仅供参考</strong></h1>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//要使用的vector容器应该位于所有定义容器语句的最后一句，应在1而不是2 </span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> c<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//1</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> vector<span class=\"token punctuation\">;</span>\n\t                    <span class=\"token comment\">//2</span>\n\tvector<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入尾部 </span>\n\tvector<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvector<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\n\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>vector<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>vector<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>vector<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"sort_result: \"</span><span class=\"token operator\">&lt;&lt;</span>vector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"头部元素为：\"</span><span class=\"token operator\">&lt;&lt;</span>vector<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//头部元素 </span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"尾部元素为：\"</span><span class=\"token operator\">&lt;&lt;</span>vector<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//尾部元素</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"容器尺寸大小为：\"</span><span class=\"token operator\">&lt;&lt;</span>vector<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//容器尺寸大小</span>\n\t \n\tvector<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//修改容器头部元素值 </span>\n\tvector<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//修改容器尾部元素值</span>\n\t\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"修改后头部元素为：\"</span><span class=\"token operator\">&lt;&lt;</span>vector<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//头部元素</span>\n\tvector<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除尾部元素</span>\n\t \n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"修改+删除后尾部元素为：\"</span><span class=\"token operator\">&lt;&lt;</span>vector<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//尾部元素</span>\n\tvector<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>vector<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"用数组输出vector[\"</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"]：\"</span><span class=\"token operator\">&lt;&lt;</span>vector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\n\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>const_iterator it<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> it <span class=\"token operator\">=</span> vector<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> vector<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"用迭代器输出：\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>it<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\n\tvector<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>vector<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入开始位置 </span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>vector<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"insert_result:\"</span><span class=\"token operator\">&lt;&lt;</span>vector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"头部元素为：\"</span><span class=\"token operator\">&lt;&lt;</span>vector<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1><a id=\"_94\"></a><strong>运行结果</strong></h1>\n<pre><code class=\"prism language-cpp\">sort_result<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\nsort_result<span class=\"token operator\">:</span> <span class=\"token number\">5</span>\nsort_result<span class=\"token operator\">:</span> <span class=\"token number\">9</span>\n头部元素为：<span class=\"token number\">1</span>\n尾部元素为：<span class=\"token number\">9</span>\n容器尺寸大小为：<span class=\"token number\">3</span>\n修改后头部元素为：<span class=\"token number\">11</span>\n修改<span class=\"token operator\">+</span>删除后尾部元素为：<span class=\"token number\">5</span>\n用数组输出vector<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>：<span class=\"token number\">11</span>\n用数组输出vector<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>：<span class=\"token number\">5</span>\n用数组输出vector<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>：<span class=\"token number\">16</span>\n用迭代器输出：<span class=\"token number\">11</span>\n用迭代器输出：<span class=\"token number\">5</span>\n用迭代器输出：<span class=\"token number\">16</span>\ninsert_result<span class=\"token operator\">:</span><span class=\"token number\">100</span>\ninsert_result<span class=\"token operator\">:</span><span class=\"token number\">11</span>\ninsert_result<span class=\"token operator\">:</span><span class=\"token number\">5</span>\ninsert_result<span class=\"token operator\">:</span><span class=\"token number\">16</span>\n头部元素为：<span class=\"token number\">100</span>\n\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\nProcess exited after <span class=\"token number\">0.02426</span> seconds with <span class=\"token keyword\">return</span> value <span class=\"token number\">0</span>\n请按任意键继续<span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span>\n</code></pre>\n<h1><a id=\"iterator_122\"></a><strong>不同容器的迭代器（iterator）的功能</strong></h1>\n<pre><code class=\"prism language-bash\">vector  \t\t\t\t随机访问\ndeque\t    \t\t\t随机访问\nlist\t\t\t\t\t双向\n<span class=\"token builtin class-name\">set</span> / multiset\t\t\t双向\nmap / multimap\t\t\t双向\nstack\t\t\t\t\t不支持迭代器\nqueue\t\t\t\t\t不支持迭代器\npriority_queue\t\t\t不支持迭代器\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}