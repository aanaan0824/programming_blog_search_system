{"blogid": "126332065", "writerAge": "码龄3年", "writerBlogNum": "57", "writerCollect": "78", "writerComment": "7", "writerFan": "33", "writerGrade": "3级", "writerIntegral": "636", "writerName": "Fan Wang&YuanyuanLuo", "writerProfileAdress": "writer_image\\profile_126332065.jpg", "writerRankTotal": "29922", "writerRankWeekly": "24840", "writerThumb": "56", "writerVisitNum": "785543", "blog_read_count": "5737", "blog_time": "于 2022-08-14 15:24:05 发布", "blog_title": "一文速学 - PHP7特性", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"php7_0\"></a>php7新特性</h1>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#php7_0\">php7新特性</a></li><li><a href=\"#_3\">前言</a></li><li><ul><li><ul><li><a href=\"#_15\">一、函数参数声明</a></li><li><ul><li><a href=\"#1_17\">1.一般模式</a></li><li><a href=\"#__25\">示例: 一般模式</a></li><li><a href=\"#_34\">严格模式</a></li></ul>\n</li><li><a href=\"#_63\">返回类型声明实例</a></li><li><ul><li><ul><li><a href=\"#_67\">示例</a></li><li><a href=\"#_88\">错误示例</a></li></ul>\n</li><li><a href=\"#void__109\">void 函数</a></li><li><ul><li><a href=\"#_117\">示例</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#Null_145\">二、Null合并运算</a></li><li><a href=\"#_160\">三、太空船运算</a></li><li><ul><li><a href=\"#_164\">示例</a></li></ul>\n</li><li><a href=\"#__201\">四、 常量数组</a></li><li><ul><li><a href=\"#_205\">示例</a></li></ul>\n</li><li><a href=\"#_226\">五、匿名内部类</a></li><li><ul><li><a href=\"#_230\">示例</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_3\"></a>前言</h1>\n<blockquote>\n<p><strong>PHP 7+ 版本极大地改进了性能，在一些WordPress基准测试当中，性能可以达到PHP 5.6的3倍。</strong><br/> 1、PHP 7 除了在性能方面有极大提升外，还添加了很多新的特性，如太空船操作符、标量类型声明、返回值的类型说明、全局的 throwable 接口、抽象语法树等。</p>\n<p>2、在使用 PHP 7之前，我们在函数和类之间传递参数时不必声明变量类型。同样地，在返回数据时也不必声明变量类型。同样地，在返回数据时也不必声明变量类型。任何数据类型都可以被传递、返回。这样便给 PHP 带来了一个很大的问题——PHP 不清楚你传递的是什么类型的变量，函数、方法接收到的变量也不知道是什么类型。为了解决这个问题，PHP 7引入了类型声明，目前明确的有两类变量可以声明类型：形参、返回值。</p>\n<p>3、PHP 7 支持的形参类型声明的类型有：字符串（string）、整型（int）、浮点型（float）以及布尔型（bool）。</p>\n<p>4、PHP 7.1对函数返回值的声明做了扩充，可以定义其返回值为void，无论是否开启严格模式，只要函数中只能有“return;”，其他以外的其他return语句都会报错。</p>\n<p>5、PHP 7.1.0对参数类型和返回值还有进一步的支持，其类型可以是可空类型，在参数或返回值类型声明前面加上“?”,表示返回值要么是null，要么是声明的类型</p>\n</blockquote>\n<h3><a id=\"_15\"></a>一、函数参数声明</h3>\n<h4><a id=\"1_17\"></a>1.一般模式</h4>\n<p>在php7中一个新的功能,标量类型声明已被接入,标量类型声明有两种方式</p>\n<blockquote>\n<p>一般方式,默认模式</p>\n<p>严格方式 - 严格模式有明确的暗示</p>\n</blockquote>\n<h4><a id=\"__25\"></a>示例: 一般模式</h4>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-declaration\">int</span> <span class=\"token operator\">...</span><span class=\"token variable\">$int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">array_sum</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"2\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h4><a id=\"_34\"></a>严格模式</h4>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">declare</span><span class=\"token punctuation\">(</span>strict_type<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-declaration\">int</span> <span class=\"token operator\">...</span><span class=\"token variable\">$int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">array_sum</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"2\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//错误示例</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//正确示例</span>\n</code></pre>\n<blockquote>\n<p>在严格模式中代码中通过指定 strict_types的值（1或者0），1表示严格类型校验模式，作用于函数调用和返回语句；0表示弱类型校验模式。</p>\n</blockquote>\n<blockquote>\n<p>可以使用的类型参数有：</p>\n</blockquote>\n<ul><li>int</li><li>float</li><li>bool</li><li>string</li><li>interfaces</li><li>array</li><li>callable</li></ul>\n<p>以上程序由于采用了严格模式，所以如果参数中出现不适整数的类型会报错，执行输出结果为：</p>\n<pre><code>PHP Fatal error:  Uncaught TypeError: Argument 2 passed to sum() must be of the type integer, string given, called in……\n</code></pre>\n<h3><a id=\"_63\"></a>返回类型声明实例</h3>\n<p>实例中，要求返回结果为整数：</p>\n<h5><a id=\"_67\"></a>示例</h5>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">declare</span><span class=\"token punctuation\">(</span>strict_types<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">returnIntValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">int</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">returnIntValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>以上程序执行输出结果为：</p>\n<pre><code>5\n</code></pre>\n<h5><a id=\"_88\"></a>错误示例</h5>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">declare</span><span class=\"token punctuation\">(</span>strict_types<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">returnIntValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">int</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">+</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">returnIntValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>对于以上运行实际返回值为float 会导致异常</p>\n<pre><code class=\"prism language-shell\">Fatal error: Uncaught TypeError: Return value of returnIntValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> must be of the <span class=\"token builtin class-name\">type</span> integer, float returned<span class=\"token punctuation\">..</span>.\n</code></pre>\n<h4><a id=\"void__109\"></a>void 函数</h4>\n<p>一个新的返回值类型void被引入。 返回值声明为 void 类型的方法要么干脆省去 return 语句，要么使用一个空的 return 语句。 对于 void 函数来说，NULL 不是一个合法的返回值。</p>\n<p>返回的类型还有 void，定义返回类型为 void 的函数不能有返回值，即使返回 null 也不行。</p>\n<p>void 函数可以省去 return 语句，或者使用一个空的 return 语句。</p>\n<h5><a id=\"_117\"></a>示例</h5>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token variable\">$left</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token variable\">$right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$left</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token variable\">$tmp</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$left</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$left</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$right</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$right</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$tmp</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>以上实例输出结果：</p>\n<pre><code>null\nint(2)\nint(1)\n</code></pre>\n<h2><a id=\"Null_145\"></a>二、Null合并运算</h2>\n<p>之前需要先判断是否存在 再通过三元运算符去计算</p>\n<pre><code class=\"prism language-php\"><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$GET</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"site\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$GET</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"site\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token string double-quoted-string\">\"空空如也\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>现在可以通过?? 如果<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        G\n       \n       \n        E\n       \n       \n        T\n       \n       \n        [\n       \n       \n        \"\n       \n       \n        s\n       \n       \n        i\n       \n       \n        t\n       \n       \n        e\n       \n       \n        \"\n       \n       \n        ]\n       \n       \n        存在并且有值则输出\n       \n      \n      \n       GET[\"site\"] 存在并且有值则输出\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.1389em;\">GET</span><span class=\"mopen\">[</span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">\"</span><span class=\"mclose\">]</span><span class=\"mord cjk_fallback\">存在并且有值则输出</span></span></span></span></span>GET[“site”] 否则输出空空如也</p>\n<pre><code class=\"prism language-php\"><span class=\"token variable\">$GET</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'site'</span><span class=\"token operator\">=&gt;</span><span class=\"token string double-quoted-string\">\"ccc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$GET</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"site\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">??</span> <span class=\"token string single-quoted-string\">'空空如也'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_160\"></a>三、太空船运算</h2>\n<p>PHP 7 新增加的太空船运算符（组合比较符）用于比较两个表达式 <strong><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         a\n        \n        \n         ∗\n        \n        \n         ∗\n        \n        \n         和\n        \n        \n         ∗\n        \n        \n         ∗\n        \n       \n       \n        a** 和 **\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.4653em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord\">∗</span><span class=\"mord cjk_fallback\">和</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.4653em;\"></span><span class=\"mord\">∗</span></span></span></span></span>b</strong>，如果 <strong><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         a\n        \n        \n         ∗\n        \n        \n         ∗\n        \n        \n         小于、等于或大于\n        \n        \n         ∗\n        \n        \n         ∗\n        \n       \n       \n        a** 小于、等于或大于 **\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.4653em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord\">∗</span><span class=\"mord cjk_fallback\">小于、等于或大于</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.4653em;\"></span><span class=\"mord\">∗</span></span></span></span></span>b</strong>时，它分别返回-1、0或1。</p>\n<h3><a id=\"_164\"></a>示例</h3>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// 整型比较</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;=&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;br/&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;=&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;br/&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;=&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;br/&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 浮点型比较</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1.5</span> <span class=\"token operator\">&lt;=&gt;</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;br/&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1.5</span> <span class=\"token operator\">&lt;=&gt;</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;br/&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2.5</span> <span class=\"token operator\">&lt;=&gt;</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;br/&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 字符串比较</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span> <span class=\"token string double-quoted-string\">\"a\"</span> <span class=\"token operator\">&lt;=&gt;</span> <span class=\"token string double-quoted-string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;br/&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span> <span class=\"token string double-quoted-string\">\"a\"</span> <span class=\"token operator\">&lt;=&gt;</span> <span class=\"token string double-quoted-string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;br/&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span> <span class=\"token string double-quoted-string\">\"b\"</span> <span class=\"token operator\">&lt;=&gt;</span> <span class=\"token string double-quoted-string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;br/&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>以上程序执行输出结果为：</p>\n<pre><code>0\n-1\n1\n\n0\n-1\n1\n\n0\n-1\n1\n</code></pre>\n<h2><a id=\"__201\"></a>四、 常量数组</h2>\n<p>在 PHP 5.6 中仅能通过 const 定义常量数组，PHP 7 可以通过 define() 来定义。</p>\n<h3><a id=\"_205\"></a>示例</h3>\n<pre><code>&lt;?php\n// 使用 define 函数来定义数组\ndefine('sites', [\n   'Google',\n   'Runoob',\n   'Taobao'\n]);\n\nprint(sites[1]);\n?&gt;\n</code></pre>\n<p>以上程序执行输出结果为：</p>\n<pre><code>Runoob\n</code></pre>\n<h2><a id=\"_226\"></a>五、匿名内部类</h2>\n<p>PHP 7 支持通过 <strong>new class</strong> 来实例化一个匿名类，这可以用来替代一些\"用后即焚\"的完整类定义。</p>\n<h3><a id=\"_230\"></a>示例</h3>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name-definition class-name\">Logger</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Application</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">private</span> <span class=\"token variable\">$logger</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">Logger</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">logger</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">setLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Logger</span> <span class=\"token variable\">$logger</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">logger</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$logger</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$app</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 使用 new class 创建匿名类</span>\n<span class=\"token variable\">$app</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">setLogger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">implements</span> <span class=\"token class-name\">Logger</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$app</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"我的第一条日志\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>以上程序执行输出结果为：</p>\n<pre><code>我的第一条日志\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}