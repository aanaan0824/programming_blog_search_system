{"blogid": "123993027", "writerAge": "码龄4年", "writerBlogNum": "8", "writerCollect": "41", "writerComment": "5", "writerFan": "1", "writerGrade": "2级", "writerIntegral": "117", "writerName": "neverland06", "writerProfileAdress": "writer_image\\profile_123993027.jpg", "writerRankTotal": "142962", "writerRankWeekly": "203920", "writerThumb": "11", "writerVisitNum": "12055", "blog_read_count": "4418", "blog_time": "于 2022-04-06 17:58:20 发布", "blog_title": "java邮件发送", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>一、JavaMail介绍<br/> 1、概述</p>\n<p>JavaMail是利用现有的邮件账户发送邮件的工具，比如我在网易注册一个邮箱账户，通过JavaMail的操控，我可以不亲自登录网易邮箱，让程序自动的使用网易邮箱发送邮件。这一机制被广泛的用在注册激活和垃圾邮件的发送等方面。</p>\n<p>JavaMail 是sun公司（现以被甲骨文收购）为方便Java开发人员在应用程序中实现邮件发送和接收功能而提供的一套标准开发包，它支持一些常用的邮件协议，如前面所讲的SMTP，POP3，IMAP,还有MIME等。我们在使用JavaMail API 编写邮件时，无须考虑邮件的底层实现细节，只要调用JavaMail 开发包中相应的API类就可以了。</p>\n<blockquote>\n<p><em>SMTP（Simple Mail Transfer Protocol）：简单邮件传输协议，用于发送电子邮件的传输协议<br/> POP3（Post Office Protocol - Version 3）：用于接收电子邮件的标准协议<br/> IMAP（Internet Mail Access Protocol）：互联网消息协议，是POP3的替代协议</em></p>\n</blockquote>\n<p>JavaMail下载(javax.mail-1.6.0.jar)：<a href=\"https://www.oracle.com/java/technologies/javamail-releases.html\" title=\"JavaMail API\">JavaMail API</a></p>\n<p>2、JavaMail API</p>\n<p>JavaMail API 按照功能可以划分为如下三大类：</p>\n<p>　　①、创建和解析邮件的API</p>\n<p>　　②、发送邮件的API</p>\n<p>　　③、接收邮件的API</p>\n<p>　　以上三种类型的API在JavaMail 中由多个类组成，但是主要有四个核心类，我们在编写程序时，记住这四个核心类，就很容易编写出Java邮件处理程序。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"327\" src=\"image\\9f02337559ca49439d401a2c31bde758.png\" width=\"1037\"/></p>\n<p>①Message 类:javax.mail.Message 类是<strong>创建和解析</strong>邮件的核心 API，这是一个抽象类，通常使用它的子类javax.mail.internet.MimeMessage 类。它的实例对象表示一份电子邮件。客户端程序发送邮件时，首先使用创建邮件的 JavaMail API 创建出封装了邮件数据的 Message 对象，然后把这个对象传递给邮件发送API（Transport 类） 发送。客户端程序接收邮件时，邮件接收API把接收到的邮件数据封装在Message 类的实例中，客户端程序在使用邮件解析API从这个对象中解析收到的邮件数据。</p>\n<p>②Transport 类：javax.mail.Transport 类是<strong>发送邮件</strong>的核心API 类，它的实例对象代表实现了某个邮件发送协议的邮件发送对象，例如 SMTP 协议，客户端程序创建好 Message 对象后，只需要使用邮件发送API 得到 Transport 对象，然后把 Message 对象传递给 Transport 对象，并调用它的发送方法，就可以把邮件发送给指定的 SMTP 服务器。</p>\n<p>③Store 类：javax.mail.Store 类是<strong>接收邮件</strong>的核心 API 类，它的实例对象代表实现了某个邮件接收协议的邮件接收对象，例如 POP3 协议，客户端程序接收邮件时，只需要使用邮件接收 API 得到 Store 对象，然后调用 Store 对象的接收方法，就可以从指定的 POP3 服务器获得邮件数据，并把这些邮件数据封装到表示邮件的 Message 对象中。</p>\n<p>④Session 类：javax.mail.Session 类用于定义<strong>整个应用程序所需的环境信息</strong>，以及收集客户端与邮件服务器建立网络连接的<strong>会话信息</strong>，例如邮件服务器的主机名、端口号、采用的邮件发送和接收协议等。Session 对象根据这些信息构建用于邮件收发的 Transport 和 Store 对象，以及为客户端创建 Message 对象时提供信息支持。</p>\n<p>二、基于JavaMail的简单邮件发送</p>\n<p>1、准备工作<br/> (1)新建java项目，将下载的javax.mail-1.6.0添加进项目</p>\n<p class=\"img-center\"><img alt=\"\" height=\"699\" src=\"image\\8da7d3f21ccf43899a375dcff154ef3b.png\" width=\"1200\"/></p>\n<p> (2)准备好邮箱授权码，授权密码不是邮箱密码，邮箱授权密码要自己去申请，具体百度！</p>\n<p>2、邮件创建步骤</p>\n<ul><li>创建一个邮件对象(MimeMessage)；</li><li>设置发件人，收件人，可选增加多个收件人，抄送人，密送人；</li><li>设置邮件的主题（标题）；</li><li>设置邮件的正文（内容）；</li><li>设置显示的发送时间；</li><li>保存到本地。</li></ul>\n<p>3、简单邮件发送主程序<br/> 以下代码需要修改成自己对应的发送人邮箱地址、授权码、收件人邮箱地址。</p>\n<pre><code class=\"language-java\">import java.util.Date;\nimport java.util.Properties;\nimport javax.mail.Session;\nimport javax.mail.Transport;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeMessage;\n\n/**\n * JavaMail 版本: 1.6.0\n * JDK 版本: JDK 1.7 以上（必须）\n */\npublic class sendEmail{\n    //发件人的邮箱和密码（替换为自己的邮箱和密码）\n    //PS: 某些邮箱服务器为了增加邮箱本身密码的安全性，给 SMTP 客户端设置了独立密码（有的邮箱称为“授权码”）,\n    //对于开启了独立密码的邮箱, 这里的邮箱密码必需使用这个独立密码（授权码）。\n    public static String myEmailAccount = \"xxx@163.com\";\n    public static String myEmailPassword = \"XXXXXXXX\";\n\n    //发件人邮箱的 SMTP服务器地址,必须准确,不同邮件服务器地址不同, 一般(只是一般, 绝非绝对)格式为: smtp.xxx.com\n    //网易163邮箱的 SMTP 服务器地址为: smtp.163.com\n    public static String myEmailSMTPHost = \"smtp.163.com\";\n\n    // 收件人邮箱（替换为自己知道的有效邮箱）\n    public static String receiveMailAccount = \"xxx@qq.com\";\n\n    public static void main(String[] args) throws Exception {\n        //1.创建参数配置, 用于连接邮件服务器的参数配置\n        Properties props = new Properties();                    //参数配置\n        props.setProperty(\"mail.transport.protocol\", \"smtp\");   //使用的协议（JavaMail规范要求）\n        props.setProperty(\"mail.smtp.host\", myEmailSMTPHost);   //发件人的邮箱的 SMTP 服务器地址\n        props.setProperty(\"mail.smtp.auth\", \"true\");            //需要请求认证\n\n        // PS: 某些邮箱服务器要求 SMTP 连接需要使用 SSL 安全认证 (为了提高安全性, 邮箱支持SSL连接, 也可以自己开启),\n        //     如果无法连接邮件服务器, 仔细查看控制台打印的 log, 如果有有类似 “连接失败, 要求 SSL 安全连接” 等错误,\n        //     打开下面 /* ... */ 之间的注释代码, 开启 SSL 安全连接。\n\n        /*\n        // SMTP 服务器的端口 (非 SSL 连接的端口一般默认为 25, 可以不添加, 如果开启了 SSL 连接,\n        //                  需要改为对应邮箱的 SMTP 服务器的端口, 具体可查看对应邮箱服务的帮助,\n        //                  QQ邮箱的SMTP(SLL)端口为465或587, 其他邮箱自行去查看)\n        final String smtpPort = \"465\";\n        props.setProperty(\"mail.smtp.port\", smtpPort);\n        props.setProperty(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\");\n        props.setProperty(\"mail.smtp.socketFactory.fallback\", \"false\");\n        props.setProperty(\"mail.smtp.socketFactory.port\", smtpPort);\n        */\n\n        //2.根据配置创建会话对象, 用于和邮件服务器交互\n        Session session = Session.getInstance(props);\n        //session.setDebug(true);                                 //设置为debug模式,可以查看详细的发送log\n\n        //3.创建一封邮件\n        MimeMessage message = createMimeMessage(session, myEmailAccount, receiveMailAccount);\n\n        //4.根据 Session获取邮件传输对象\n        Transport transport = session.getTransport();\n\n        // 5.使用邮箱账号和密码连接邮件服务器, 这里认证的邮箱必须与 message中的发件人邮箱一致,否则报错\n        //\n        //    PS_01: 成败的判断关键在此一句, 如果连接服务器失败, 都会在控制台输出相应失败原因的 log,\n        //           仔细查看失败原因, 有些邮箱服务器会返回错误码或查看错误类型的链接, 根据给出的错误\n        //           类型到对应邮件服务器的帮助网站上查看具体失败原因。\n        //\n        //    PS_02: 连接失败的原因通常为以下几点, 仔细检查代码:\n        //           (1)邮箱没有开启 SMTP 服务;\n        //           (2)邮箱密码错误, 例如某些邮箱开启了独立密码;\n        //           (3)邮箱服务器要求必须要使用 SSL 安全连接;\n        //           (4)请求过于频繁或其他原因, 被邮件服务器拒绝服务;\n        //           (5)如果以上几点都确定无误, 到邮件服务器网站查找帮助。\n        //\n        //PS_03:仔细看log,认真看log,看懂log,错误原因都在log已说明。\n        transport.connect(myEmailAccount, myEmailPassword);\n        //6.发送邮件,发到所有的收件地址,message.getAllRecipients()获取到的是在创建邮件对象时添加的所有收件人, 抄送人, 密送人\n        transport.sendMessage(message, message.getAllRecipients());\n        System.out.println(\"邮件发送成功\");\n        // 7. 关闭连接\n        transport.close();\n    }\n\n    /**\n     * 创建一封只包含文本的简单邮件\n     *\n     * @param session 和服务器交互的会话\n     * @param sendMail 发件人邮箱\n     * @param receiveMail 收件人邮箱\n     * @return\n     * @throws Exception\n     */\n    public static MimeMessage createMimeMessage(Session session, String sendMail, String receiveMail) throws Exception {\n        // 1.创建一封邮件\n        MimeMessage message = new MimeMessage(session);\n        // 2.From:发件人（昵称有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改昵称）\n        message.setFrom(new InternetAddress(sendMail, \"某宝网\", \"UTF-8\"));\n        // 3.To:收件人（可以增加多个收件人、抄送、密送）\n        message.setRecipient(MimeMessage.RecipientType.TO, new InternetAddress(receiveMail, \"XX用户\", \"UTF-8\"));\n        // 4.Subject: 邮件主题（标题有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改标题）\n        message.setSubject(\"打折钜惠\", \"UTF-8\");\n        // 5.Content: 邮件正文（可以使用html标签）（内容有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改发送内容）\n        message.setContent(\"XX用户你好, 今天全场5折, 快来抢购, 错过今天再等一年。。。\", \"text/html;charset=UTF-8\");\n        // 6.设置发件时间\n        message.setSentDate(new Date());\n        // 7.保存设置\n        message.saveChanges();\n        return message;\n    }\n}</code></pre>\n<p>结果：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"193\" src=\"image\\9ca90ef054284f3ca29ec1e6c928fa54.png\" width=\"624\"/></p>\n<p>三、基于JavaMail的复杂邮件发送(包含图片、附件等)</p>\n<pre><code class=\"language-java\">import java.util.Date;\nimport java.util.Properties;\nimport javax.activation.DataHandler;\nimport javax.activation.FileDataSource;\nimport javax.mail.Message.RecipientType;\nimport javax.mail.Session;\nimport javax.mail.Transport;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeBodyPart;\nimport javax.mail.internet.MimeMessage;\nimport javax.mail.internet.MimeMultipart;\nimport javax.mail.internet.MimeUtility;\n\n/**\n * 创建并发送一封包含文本、图片、附件的复杂邮件\n *\n * JavaMail 版本: 1.6.0\n * JDK 版本: JDK 1.7 以上（必须）\n *\n * @author xietansheng\n */\npublic class SendMail{\n    //发件人的邮箱和密码（替换为自己的邮箱和密码）\n    public static String myEmailAccount = \"xxx@163.com\";\n    public static String myEmailPassword = \"XXXXXXXXXX\";\n\n    //发件人邮箱的 SMTP 服务器地址, 必须准确, 不同邮件服务器地址不同, 一般格式为: smtp.xxx.com\n    //网易163邮箱的 SMTP 服务器地址为: smtp.163.com\n    public static String myEmailSMTPHost = \"smtp.163.com\";\n\n    //收件人邮箱（替换为自己知道的有效邮箱）\n    public static String receiveMailAccount = \"xxx@qq.com\";\n\n    public static void main(String[] args) throws Exception {\n        //1.创建参数配置, 用于连接邮件服务器的参数配置\n        Properties props = new Properties();                    //参数配置\n        props.setProperty(\"mail.transport.protocol\", \"smtp\");   //使用的协议（JavaMail规范要求）\n        props.setProperty(\"mail.smtp.host\", myEmailSMTPHost);   //发件人的邮箱的 SMTP 服务器地址\n        props.setProperty(\"mail.smtp.auth\", \"true\");            //需要请求认证\n\n        //如果要开启SSL连接，参考基于JavaMail的简单邮件发送注释部分\n\n        //2.根据配置创建会话对象, 用于和邮件服务器交互\n        Session session = Session.getInstance(props);\n        //session.setDebug(true);                                 // 设置为debug模式, 可以查看详细的发送 log\n\n        //3.创建一封邮件\n        MimeMessage message = createMimeMessage(session, myEmailAccount, receiveMailAccount);\n\n        //也可以保持到本地查看\n        //message.writeTo(file_out_put_stream);\n\n        //4.根据 Session 获取邮件传输对象\n        Transport transport = session.getTransport();\n\n        //5.使用 邮箱账号 和 密码 连接邮件服务器\n        //这里认证的邮箱必须与 message 中的发件人邮箱一致，否则报错\n        transport.connect(myEmailAccount, myEmailPassword);\n\n        //6.发送邮件, 发到所有的收件地址, message.getAllRecipients() 获取到的是在创建邮件对象时添加的所有收件人, 抄送人, 密送人\n        transport.sendMessage(message, message.getAllRecipients());\n\n        System.out.println(\"邮件发送成功！\");\n\n        //7.关闭连接\n        transport.close();\n    }\n\n    /**\n     * 创建一封复杂邮件（文本+图片+附件）\n     */\n    public static MimeMessage createMimeMessage(Session session, String sendMail, String receiveMail) throws Exception {\n        //1.创建邮件对象\n        MimeMessage message = new MimeMessage(session);\n        //2.From: 发件人\n        message.setFrom(new InternetAddress(sendMail, \"我的测试邮件_发件人昵称\", \"UTF-8\"));\n        //3.To: 收件人（可以增加多个收件人、抄送、密送）\n        message.addRecipient(RecipientType.TO, new InternetAddress(receiveMail, \"我的测试邮件_收件人昵称\", \"UTF-8\"));\n        //4.Subject: 邮件主题\n        message.setSubject(\"TEST邮件主题（文本+图片+附件）\", \"UTF-8\");\n        /*\n         * 下面是邮件内容的创建:\n         */\n\n        //5.创建图片“节点”\n        MimeBodyPart image = new MimeBodyPart();\n        DataHandler dh = new DataHandler(new FileDataSource(\"E:\\\\guigu\\\\test\\\\src\\\\mail\\\\picture.png\")); //读取本地文件\n        image.setDataHandler(dh);\t\t            // 将图片数据添加到“节点”\n        image.setContentID(\"image_picture\");\t    // 为“节点”设置一个唯一编号（在文本“节点”将引用该ID）\n\n        //6.创建文本“节点”\n        MimeBodyPart text = new MimeBodyPart();\n        //    这里添加图片的方式是将整个图片包含到邮件内容中, 实际上也可以以 http 链接的形式添加网络图片\n        text.setContent(\"这是一张图片&lt;br/&gt;&lt;img src='cid:image_picture'/&gt;\", \"text/html;charset=UTF-8\");\n\n        //7.（文本+图片）设置 文本 和 图片 “节点”的关系（将 文本 和 图片 “节点”合成一个混合“节点”）\n        MimeMultipart mm_text_image = new MimeMultipart();\n        mm_text_image.addBodyPart(text);\n        mm_text_image.addBodyPart(image);\n        mm_text_image.setSubType(\"related\");\t// 关联关系\n\n        //8.将 文本+图片 的混合“节点”封装成一个普通“节点”\n        //最终添加到邮件的 Content 是由多个 BodyPart 组成的 Multipart, 所以我们需要的是 BodyPart,\n        //上面的 mm_text_image 并非 BodyPart, 所有要把 mm_text_image 封装成一个 BodyPart\n        MimeBodyPart text_image = new MimeBodyPart();\n        text_image.setContent(mm_text_image);\n\n        //9.创建附件“节点”\n        MimeBodyPart attachment = new MimeBodyPart();\n        DataHandler dh2 = new DataHandler(new FileDataSource(\"E:\\\\guigu\\\\test\\\\src\\\\mail\\\\word1.docx\"));  //读取本地文件\n        attachment.setDataHandler(dh2);\t\t//将附件数据添加到“节点”\n        attachment.setFileName(MimeUtility.encodeText(dh2.getName()));//设置附件的文件名（需要编码）\n\n        //10.设置（文本+图片）和 附件 的关系（合成一个大的混合“节点” / Multipart ）\n        MimeMultipart mm = new MimeMultipart();\n        mm.addBodyPart(text_image);\n        mm.addBodyPart(attachment);\t\t//如果有多个附件，可以创建多个多次添加\n        mm.setSubType(\"mixed\");\t\t\t//混合关系\n\n        //11.设置整个邮件的关系（将最终的混合“节点”作为邮件的内容添加到邮件对象）\n        message.setContent(mm);\n\n        //12.设置发件时间\n        message.setSentDate(new Date());\n\n        //13.保存上面的所有设置\n        message.saveChanges();\n\n        return message;\n    }\n\n}\n</code></pre>\n<p>结果：</p>\n<p><img alt=\"\" height=\"685\" src=\"image\\dd17db205f7346738491b2d947fb0219.png\" width=\"1168\"/></p>\n<p>四、基于SpringBoot框架发送邮件</p>\n<p>1、在工程的pom.xml中导入SpringBoot整合JavaMail的坐标</p>\n<pre><code class=\"language-XML\">&lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre>\n<p>2、在application.yml文件中配置JavaMail</p>\n<p>password处填写授权码，不是邮箱登录密码。</p>\n<p><img alt=\"\" class=\"left\" height=\"175\" src=\"image\\7e3055f43b3d4b61bbab3648323d7366.png\" width=\"390\"/></p>\n<p> 3、编写功能类<br/> (1)SendMailServiceImpl实现简单邮件发送</p>\n<pre><code class=\"language-java\">import com.itheima.service.SendMailService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.mail.SimpleMailMessage;\nimport org.springframework.mail.javamail.JavaMailSender;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class SendMailServiceImpl implements SendMailService {\n    @Autowired\n    private JavaMailSender javaMailSender;\n    //发送人\n    private String from = \"xxx@163.com\";\n    //接收人\n    private String to = \"xxx@qq.com\";\n    //标题\n    private String subject = \"测试邮件\";\n    //正文\n    private String context = \"测试邮件正文内容\";\n    @Override\n    public void sendMail() {\n        SimpleMailMessage message = new SimpleMailMessage();\n        message.setFrom(from+\"(小甜甜)\");\n        message.setTo(to);\n        message.setSubject(subject);\n        message.setText(context);\n        javaMailSender.send(message);\n    }\n}\n</code></pre>\n<p>在测试类中运行<br/>  </p>\n<pre><code class=\"language-java\">import com.itheima.service.SendMailService;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass Springboot23MailApplicationTests {\n\n    @Autowired\n    private SendMailService sendMailService;\n\n    @Test\n    void contextLoads() {\n        sendMailService.sendMail();\n    }\n}</code></pre>\n<p>结果：</p>\n<p><img alt=\"\" height=\"209\" src=\"image\\671b995e836d492cb5b5224d5e3048a0.png\" width=\"922\"/></p>\n<p>(2)SendMailServiceImpl2实现复杂邮件发送</p>\n<pre><code class=\"language-java\">import com.itheima.service.SendMailService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.mail.javamail.JavaMailSender;\nimport org.springframework.mail.javamail.MimeMessageHelper;\nimport org.springframework.stereotype.Service;\nimport javax.mail.internet.MimeMessage;\nimport java.io.File;\n\n@Service\npublic class SendMailServiceImpl2 implements SendMailService {\n    @Autowired\n    private JavaMailSender javaMailSender;\n    //发送人\n    private String from = \"xxx@163.com\";\n    //接收人\n    private String to = \"xxx@qq.com\";\n    //标题\n    private String subject = \"测试邮件\";\n    //正文\n    private String context = \"&lt;img src='https://img-blog.csdnimg.cn/8774575ed57d48159111f8f505235f89.png?x-oss-process=image/resize,m_fixed,h_300,image/format,png'/&gt;&lt;a href='https://www.baidu.com/'&gt;点开有惊喜&lt;/a&gt;\";\n\n    @Override\n    public void sendMail() {\n        try {\n            MimeMessage message = javaMailSender.createMimeMessage();\n            MimeMessageHelper helper = new MimeMessageHelper(message,true);\n            helper.setFrom(from +\"(小甜甜)\");\n            helper.setTo(to);\n            helper.setSubject(subject);\n            helper.setText(context,true);\n\n            //添加附件\n            File f1 = new File(\"E:\\\\guigu\\\\springbooot\\\\springboot_23_mail\\\\target\\\\classes\\\\logo.png\");\n            File f2 = new File(\"E:\\\\guigu\\\\test\\\\src\\\\mail\\\\word1.docx\");\n\n            helper.addAttachment(f1.getName(),f1);\n            helper.addAttachment(\"最靠谱的培训结构.png\",f2);\n\n            javaMailSender.send(message);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}</code></pre>\n<p>结果：</p>\n<p><img alt=\"\" height=\"792\" src=\"image\\8a28a6a1c56b4702b595cd0f86ee64da.png\" width=\"985\"/></p>\n<p>参考链接：</p>\n<p>1、<a href=\"https://www.cnblogs.com/ysocean/p/7666061.html\" title=\"邮件实现详解（四）------JavaMail 发送（带图片和附件）和接收邮件 - YSOcean - 博客园\">邮件实现详解（四）------JavaMail 发送（带图片和附件）和接收邮件 - YSOcean - 博客园</a></p>\n<p>2、<a href=\"https://xiets.blog.csdn.net/article/details/51673073?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-3.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-3.pc_relevant_antiscanv2&amp;utm_relevant_index=6\" title=\"基于JavaMail的Java邮件发送：简单邮件发送_xietansheng的博客-CSDN博客_javamail\">基于JavaMail的Java邮件发送：简单邮件发送_xietansheng的博客-CSDN博客_javamail</a></p>\n<p>3、<a href=\"https://blog.csdn.net/xietansheng/article/details/51722660\" title=\"基于JavaMail的Java邮件发送：复杂邮件发送_xietansheng的博客-CSDN博客_java发送邮件\">基于JavaMail的Java邮件发送：复杂邮件发送_xietansheng的博客-CSDN博客_java发送邮件</a></p>\n</div>\n</div>"}