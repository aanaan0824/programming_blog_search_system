{"blogid": "124396989", "writerAge": "码龄5年", "writerBlogNum": "10", "writerCollect": "32", "writerComment": "1", "writerFan": "0", "writerGrade": "2级", "writerIntegral": "117", "writerName": "不会编程的-程序猿", "writerProfileAdress": "writer_image\\profile_124396989.jpg", "writerRankTotal": "131607", "writerRankWeekly": "212308", "writerThumb": "8", "writerVisitNum": "7900", "blog_read_count": "5116", "blog_time": "于 2022-04-28 16:01:52 发布", "blog_title": "C++:共享指针shared_ptr的理解与应用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_shared_ptr_0\"></a>一 为什么要使用shared_ptr？</h2>\n<p>在实际的 C++ 开发中，我们经常会遇到诸如程序运行中突然崩溃、程序运行所用内存越来越多最终不得不重启等问题，这些问题往往都是内存资源管理不当造成的。比如：</p>\n<ul><li>有些内存资源已经被释放，但指向它的指针并没有改变指向（成为了野指针），并且后续还在使用；</li><li>有些内存资源已经被释放，后期又试图再释放一次（重复释放同一块内存会导致程序运行崩溃）；</li><li>没有及时释放不再使用的内存资源，造成内存泄漏，程序占用的内存资源越来越多。</li></ul>\n<blockquote>\n<p>智能指针shared_ptr 是存储动态创建对象的指针，其主要功能是管理动态创建对象的销毁，从而帮助彻底消除内存泄漏和悬空指针的问题。</p>\n</blockquote>\n<h2><a id=\"_shared_ptr_7\"></a>二 shared_ptr的原理和特点</h2>\n<p><strong>基本原理</strong>:就是记录对象被引用的次数，当引用次数为 0 的时候，也就是最后一个指向该对象的共享指针析构的时候，共享指针的析构函数就把指向的内存区域释放掉。<br/> <strong>特点</strong>:它所指向的资源具有共享性，即多个shared_ptr可以指向同一份资源，并在内部使用引用计数机制来实现这一点。</p>\n<blockquote>\n<p><strong>共享指针内存</strong>：每个 shared_ptr 对象在内部指向两个内存位置：</p>\n<ul><li>指向对象的指针；</li><li>用于控制引用计数数据的指针。</li></ul>\n<p><strong>1.当新的 shared_ptr 对象与指针关联时，则在其构造函数中，将与此指针关联的引用计数增加1。<br/> 2.当任何 shared_ptr 对象超出作用域时，则在其析构函数中，它将关联指针的引用计数减1。如果引用计数变为0，则表示没有其他 shared_ptr 对象与此内存关联，在这种情况下，它使用delete函数删除该内存。</strong></p>\n</blockquote>\n<p>shared_ptr像普通指针一样使用，可以将*和-&gt;与 shared_ptr 对象一起使用，也可以像其他 shared_ptr 对象一样进行比较;</p>\n<h2><a id=\"_shared_ptr_20\"></a>三 shared_ptr的使用</h2>\n<h3><a id=\"31_21\"></a>3.1.构造函数创建</h3>\n<pre><code class=\"prism language-c\"><span class=\"token number\">1.</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> ptr<span class=\"token punctuation\">;</span><span class=\"token comment\">//ptr 的意义就相当于一个 NULL 指针</span>\n<span class=\"token number\">2.</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//从new操作符的返回值构造</span>\n<span class=\"token number\">3.</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> <span class=\"token function\">ptr2</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 使用拷贝构造函数的方法，会让引用计数加 1</span>\n                               <span class=\"token comment\">//shared_ptr 可以当作函数的参数传递，或者当作函数的返回值返回，这个时候其实也相当于使用拷贝构造函数。</span>\n<span class=\"token number\">4.</span><span class=\"token comment\">/*假设B是A的子类*/</span>\nshared_ptr<span class=\"token operator\">&lt;</span>B<span class=\"token operator\">&gt;</span> <span class=\"token function\">ptrb</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshared_ptr<span class=\"token operator\">&lt;</span>A<span class=\"token operator\">&gt;</span> <span class=\"token function\">ptra</span><span class=\"token punctuation\">(</span> dynamic_pointer_cast<span class=\"token operator\">&lt;</span>A<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>ptrb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//从 shared_ptr 提供的类型转换 (cast) 函数的返回值构造</span>\n<span class=\"token number\">5.</span><span class=\"token comment\">/* shared_ptr 的“赋值”*/</span>\nshared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 此后 a 原先所指的对象会被销毁，b 所指的对象引用计数加 1</span>\n\t\t<span class=\"token comment\">//shared_ptr 也可以直接赋值，但是必须是赋给相同类型的 shared_ptr 对象，而不能是普通的 C 指针或 new 运算符的返回值。</span>\n\t\t<span class=\"token comment\">//当共享指针 a 被赋值成 b 的时候，如果 a 原来是 NULL, 那么直接让 a 等于 b 并且让它们指向的东西的引用计数加 1;</span>\n\t\t<span class=\"token comment\">// 如果 a 原来也指向某些东西的时候，如果 a 被赋值成 b, 那么原来 a 指向的东西的引用计数被减 1, 而新指向的对象的引用计数加 1。</span>\n<span class=\"token number\">6.</span><span class=\"token comment\">/*已定义的共享指针指向新的new对象————reset()*/</span>\nshared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nptr<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 原来所指的对象会被销毁</span>\n</code></pre>\n<h3><a id=\"32make_shared_41\"></a>3.2.make_shared辅助函数创建</h3>\n<pre><code class=\"prism language-c\">std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> foo <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>建议使用make_shared的方式构造</strong></p>\n<h3><a id=\"33__47\"></a>3.3 自定义所指堆内存的释放规则</h3>\n<p>在初始化 shared_ptr 智能指针时，还可以自定义所指堆内存的释放规则，这样当堆内存的引用计数为 0 时，会优先调用我们自定义的释放规则。</p>\n<p>在某些场景中，自定义释放规则是很有必要的。比如，对于申请的动态数组来说，shared_ptr 指针默认的释放规则是不支持释放数组的，只能自定义对应的释放规则，才能正确地释放申请的堆内存。</p>\n<p>对于申请的动态数组，释放规则可以</p>\n<ol><li>使用 C++11 标准中提供的 default_delete 模板类</li><li>可以自定义释放规则</li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//指定 default_delete 作为释放规则</span>\nstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">p6</span><span class=\"token punctuation\">(</span>new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>default_delete<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//自定义释放规则</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">deleteInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//初始化智能指针，并自定义释放规则</span>\nstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">p7</span><span class=\"token punctuation\">(</span>new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> deleteInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_shared_ptr_65\"></a>四 shared_ptr常用函数</h2>\n<ul><li>get()函数，表示返回当前存储的指针（就是被shared_ptr所管理的指针） 。<br/> 但是不建议使用get()函数获取 shared_ptr 关联的原始指针，因为如果在 shared_ptr 析构之前手动调用了delete函数，会导致错误。</li></ul>\n<pre><code class=\"prism language-c\">shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nT <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> ptr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获得传统 C 指针</span>\n</code></pre>\n<ul><li>use_count()函数，表示当前引用计数</li></ul>\n<pre><code class=\"prism language-c\">shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取当前的引用计数</span>\n</code></pre>\n<ul><li>reset()函数，表示重置当前存储的指针。</li></ul>\n<pre><code class=\"prism language-c\">shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此后 a 原先所指的对象会被销毁，并且 a 会变成 NULL</span>\n</code></pre>\n<ul><li>operator*，表示返回对存储指针指向的对象的引用。它相当于：* get（）。</li><li>operator-&gt;，表示返回指向存储指针所指向的对象的指针，以便访问其中一个成员。跟get函数一样的效果。</li></ul>\n<p><strong>示例1：shared_ptr的基础应用</strong>：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;memory&gt;</span> <span class=\"token comment\">// 共享指针必须要包含的头文件</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 最好使用make_shared创建共享指针，</span>\n\tshared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> p1 <span class=\"token operator\">=</span> make_shared<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//make_shared 创建空对象，</span>\n\t<span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出10</span>\n\n\t<span class=\"token comment\">// 打印引用个数：1</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1 count = \"</span> <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// 第2个 shared_ptr 对象指向同一个指针</span>\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// 输出2</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p2 count = \"</span> <span class=\"token operator\">&lt;&lt;</span> p2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> sendl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1 count = \"</span> <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 比较智能指针，p1 等于 p2</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> p2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tstd<span class=\"token operator\">::</span>cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1 and p2 are pointing to same pointer\\n\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 无参数调用reset，无关联指针，引用个数为0</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1 Count = \"</span> <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\n\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>new <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 带参数调用reset，引用个数为1</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1 Count = \"</span> <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\tp1 <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span><span class=\"token comment\">// 把对象重置为NULL，引用计数为0</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1  Reference Count = \"</span> <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1 is NULL\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>示例2：shared_ptr作返回值</strong></p>\n<pre><code class=\"prism language-c\">shared_ptr<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n    shared_ptr<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> p1 <span class=\"token operator\">=</span> make_shared<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">use_factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n    shared_ptr<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> p <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//!离开作用域时，p引用的对象被销毁。</span>\n<span class=\"token punctuation\">}</span>\nshared_ptr<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> <span class=\"token function\">return_share_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    shared_ptr<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> p <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//!返回p时，引用计数进行了递增操作。 </span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">//!p离开了作用域，但他指向的内存不会被释放掉。 </span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">use_factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> <span class=\"token function\">return_share_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//可以认为每个shared_ptr都有一个关联的计数器，通常称其为引用计数。无论何时我们拷贝一个shared_ptr，计数器都会递增。</span>\n<span class=\"token comment\">//例如，当用一个shared_ptr去初始化另一个shared_ptr；当我们给shared_ptr赋予一个新的值或者是shared_ptr被销毁(例如一个局部的shared_ptr离开其作用域)时，计数器就会递减。</span>\n<span class=\"token comment\">//一旦一个shared_ptr的计数器变为0，他就会自动释放自己所管理的对象。</span>\n</code></pre>\n<p><strong>示例3：容器中的shared_ptr-记得用erease节省内存</strong></p>\n<blockquote>\n<p>对于一块内存，shared_ptr类保证只要有任何shared_ptr对象引用它，他就不会被释放掉。由于这个特性，保证shared_ptr在不用之后不再保留就非常重要了，通常这个过程能够自动执行而不需要人工干预，有一种例外就是我们将shared_ptr放在了<strong>容器</strong>中。所以永远不要忘记<strong>erease</strong>不用的shared_ptr。</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    list<span class=\"token operator\">&lt;</span>shared_ptr<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;&gt;</span>pstrList<span class=\"token punctuation\">;</span>\n    pstrList<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>make_shared<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pstrList<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>make_shared<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pstrList<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>make_shared<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3333\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pstrList<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>make_shared<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4444\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> p<span class=\"token operator\">:</span>pstrList<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">==</span> <span class=\"token string\">\"3333\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/*do some thing!*/</span>\n        <span class=\"token punctuation\">}</span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>p<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/*包含\"3333\"的数据我们已经使用完了！*/</span>\n    \n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">&lt;</span>shared_ptr<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">::</span>iterator itr <span class=\"token operator\">=</span> pstrList<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>itr<span class=\"token operator\">!=</span>pstrList<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>itr<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>itr <span class=\"token operator\">==</span> <span class=\"token string\">\"3333\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>itr<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n            pstrList<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-------------after remove------------\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> p<span class=\"token operator\">:</span>pstrList<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>p<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n　　<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n　　<span class=\"token punctuation\">{<!-- --></span>\n　　　　<span class=\"token comment\">/*do somthing other works!*/</span>\n　　　　<span class=\"token comment\">/*遍历 pstrList*/</span>    <span class=\"token comment\">//！这样不仅节约了大量内存，也为容器的使用增加了效率　　</span>\n　　<span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>示例4：shared_ptr：对象共享相同状态</strong></p>\n<blockquote>\n<p>使用shared_ptr在一个常见的原因是允许多个多个对象共享相同的状态，而非多个对象独立的拷贝！</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">copyCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//!v1==v2占用两段内存</span>\n\n    v1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">//!v1!=v2</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>p<span class=\"token operator\">:</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>p<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"--------void copyCase()---------\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>p<span class=\"token operator\">:</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>p<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">//v1和v2分属两个不同的对象，一个改变不会影响的状态。</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">shareCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    shared_ptr<span class=\"token operator\">&lt;</span>list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;&gt;</span> v1 <span class=\"token operator\">=</span> make_shared<span class=\"token operator\">&lt;</span>list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shared_ptr<span class=\"token operator\">&lt;</span>list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;&gt;</span> v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c2c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>p<span class=\"token operator\">:</span><span class=\"token operator\">*</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>p<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"----------shareCase()--------\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>p<span class=\"token operator\">:</span><span class=\"token operator\">*</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>p<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">//v1和v2属于一个对象的两个引用，有引用计数为证，其内容的改变是统一的。</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">copyCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"++++++++++++++++\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">shareCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>示例5：shared_ptr管理动态数组</strong></p>\n<blockquote>\n<p>默认情况下，shared_ptr指向的动态的内存是使用delete来删除的。这和我们手动去调用delete然后调用对象内部的析构函数是一样的。与unique_ptr不同，shared_ptr不直接管理动态数组。如果希望使用shared_ptr管理一个动态数组，必须提供自定义的删除器来替代delete 。</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\nclass DelTest\n<span class=\"token punctuation\">{<!-- --></span>\npublic<span class=\"token operator\">:</span>\n    <span class=\"token function\">DelTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        j<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" DelTest()\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\":\"</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">++</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">DelTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"~ DelTest()\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\":\"</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">++</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n　　<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> DelTest<span class=\"token operator\">::</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> DelTest<span class=\"token operator\">::</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">noDefine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"no_define start running!\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    shared_ptr<span class=\"token operator\">&lt;</span>DelTest<span class=\"token operator\">&gt;</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>new DelTest<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">slefDefine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"slefDefine start running!\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    shared_ptr<span class=\"token operator\">&lt;</span>DelTest<span class=\"token operator\">&gt;</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>new DelTest<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>DelTest <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>delete<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>     　　　　　　　　　　　　　　　　<span class=\"token comment\">//!传入lambada表达式代替delete操作。</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">noDefine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> 　　<span class=\"token comment\">//!构造10次，析构1次。内存泄漏。</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"----------------------\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">slefDefine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//!构造次数==析构次数 无内存泄漏</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"__286\"></a>五 注意</h2>\n<h3><a id=\"51_287\"></a>5.1.常见错误(注意以下代码全是错误代码)</h3>\n<p><strong>1.不能使用原始指针初始化多个shared_ptr。</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p11 <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">p12</span><span class=\"token punctuation\">(</span>p11<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">p13</span><span class=\"token punctuation\">(</span>p11<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 由于p1和p2是两个不同对象，但是管理的是同一个指针，这样容易造成空悬指针，</span>\n<span class=\"token comment\">//比如p1已经将aa delete了，这时候p2里边的aa就是空悬指针了</span>\n</code></pre>\n<p><strong>2.不允许以暴露裸漏的指针进行赋值</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//带有参数的 shared_ptr 构造函数是 explicit 类型的，所以不能像这样</span>\nstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> p1 <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//不能隐式转换，类型不匹配</span>\n</code></pre>\n<p>隐式调用它构造函数</p>\n<p><strong>3.不要用栈中的指针构造 shared_ptr 对象</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>shared_ptr 默认的构造函数中使用的是delete来删除关联的指针，所以构造的时候也必须使用new出来的堆空间的指针。当 shared_ptr 对象超出作用域调用析构函数delete 指针&amp;x时会出错。</p>\n<p><strong>4.不要使用shared_ptr的get()初始化另一个shared_ptr</strong></p>\n<pre><code class=\"prism language-c\">Base <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> new <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Base<span class=\"token operator\">&gt;</span> <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Base<span class=\"token operator\">&gt;</span> <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//p1、p2各自保留了对一段内存的引用计数，其中有一个引用计数耗尽，资源也就释放了,会出现同一块内存重复释放的问题</span>\n</code></pre>\n<p><strong>5. 多线程中使用 shared_ptr</strong><br/> shared_ptr的引用计数本身是安全且无锁的，但对象的读写则不是，因为shared_ptr 有两个数据成员，读写操作不能原子化。shared_ptr 的线程安全级别和内建类型、标准库容器、std::string 一样，即：</p>\n<ul><li>一个 shared_ptr 对象实体可被多个线程同时读取</li><li>两个 shared_ptr 对象实体可以被两个线程同时写入，“析构”算写操作<br/> 如果要从多个线程读写同一个 shared_ptr 对象，那么需要加锁</li></ul>\n<h2><a id=\"__322\"></a>六 文章分享</h2>\n<p>1.<a href=\"https://blog.csdn.net/yj_android_develop/article/details/88895449?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&amp;utm_relevant_index=1\">C++智能指针——share_ptr详解</a><br/> 2.<a href=\"https://blog.csdn.net/u012477435/article/details/106875121/\">C++多线程与共享指针</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}