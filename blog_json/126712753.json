{"blogid": "126712753", "writerAge": "码龄5年", "writerBlogNum": "42", "writerCollect": "540", "writerComment": "29", "writerFan": "178", "writerGrade": "4级", "writerIntegral": "1253", "writerName": "Moon_3181961725", "writerProfileAdress": "writer_image\\profile_126712753.jpg", "writerRankTotal": "15817", "writerRankWeekly": "23203", "writerThumb": "67", "writerVisitNum": "90199", "blog_read_count": "49", "blog_time": "已于 2022-09-06 19:36:40 修改", "blog_title": "【小月电子】FPGA开发板（XLOGIC_V1）系统学习教程-LESSON8 LCD1602液晶显示", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"center_LCD1602center_0\"></a>\n<center>\n   LCD1602显示例程讲解\n </center></h1>\n<p>我们先来看一下我们做实验的开发板长啥样，颜值还可以吧，如果想学习XLOGIC_V1开发板的工程文件和视频教程，可以直接联系技术工程师，感谢您的关注！<br/> <img alt=\"在这里插入图片描述\" src=\"image\\eb4d411d18b747cb9813a19171c34648.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\da5e81f83dd44217902dde0d43d40227.png\"/><br/> 根据多年工作经验，总结出的FPGA的设计流程，概括起来总共有以上12步，其中根据项目难易度可省去其中一些步骤。比如非常简单的项目，我们可以省去虚线框里面的步骤，但是我们的入门级课程，即使再简单，也按照这12个步骤来进行讲解。</p>\n<h2><a id=\"1__5\"></a>1. 需求解读</h2>\n<h3><a id=\"11__6\"></a>1.1 需求</h3>\n<p>在液晶屏第一行显示“HELLO FPGA 1234!”</p>\n<h3><a id=\"12___8\"></a>1.2 知识背景</h3>\n<p>1602液晶也叫1602字符型液晶，它是一种专门用来显示字母、数字、符号等的点阵型液晶模块。它由若干个5X7或者5X11等点阵字符位组成，每个点阵字符位都可以显示一个字符，每位之间有一个点距的间隔，每行之间也有间隔，起到了字符间距和行间距的作用，正因为如此所以它不能很好地显示图形(用自定义CGRAM，显示效果也不好)。<br/> LCD1602是指显示的内容为16X2,即可以显示两行，每行16个字符液晶模块(显示字符和数字)。一般来说，LCD1602有16条引脚，据说还有14条引脚的，与16脚的相比缺少了背光电源A(15脚)和地线K(16脚)。实物如下图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\86e5fcf8ed07414488e8c61029c19a8d.png\"/><br/> 引脚定义如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\acc3f96656af4cd7855c55dbfe41150e.png\"/></p>\n<p>说明：</p>\n<ol><li>VSS接电源地。</li><li>VDD接+5V。</li><li>VO是液晶显示的偏压信号，可接10K的电位器用于调节显示效果。</li><li>RS是命令/数据选择引脚，当RS为低电平时，选择命令；当RS为高电平时，选择数据。</li><li>RW是读/写选择引脚，当RW为低电平时，向LCD1602写入命令或数据；当RW为高电 平时，从LCD1602读取状态或数据。如果不需要进行读取操作，可以直接将其接VSS。</li><li>E，执行命令的使能引脚。</li><li>D0—D7，并行数据输入/输出引脚 。</li><li>A背光正极，与VDD相连接。</li><li>K背光负极，接VSS。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1691239a8f634dbfaf054caedbf71b96.png\"/></li></ol>\n<center>\n 写操作时序\n</center>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9293f58a61bc41b0905eaca77822dc47.png\"/></p>\n<center>\n 时序参数\n</center>\n<h3><a id=\"13__31\"></a>1.3 硬件设计</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6cb0ec04907142cf8b2ee8e2ac3db869.png\"/></p>\n<center>\n 有源晶振\n</center>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\319df05972a84fccbbf3cae9147faf27.png\"/></p>\n<center>\n 液晶接口电路图\n</center>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\16bf28fd4ea544128e7ff6a6ac88b473.png\"/></p>\n<center>\n FPGA管脚映射图\n</center>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6eaa64c7973e413cb2465540361ca629.png\"/></p>\n<center>\n PCB板上管脚标注\n</center>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7bc14c8def5f437fbbe0f5e5da2c3dbc.png\"/></p>\n<center>\n LCD1602液晶与开发板管脚连接图\n</center>\n<h3><a id=\"14__52\"></a>1.4 接口说明</h3>\n<p>LCD_RS 输出 K12 命令/数据选择引脚，当RS为低电平时，选择命令；当RS为高电平时，选择数据<br/> LCD_RW 输出 L16 是读/写选择引脚，当RW为低电平时，向LCD1602写入命令或数据；当RW为高电平时，从LCD1602读取状态或数据<br/> LCD_CLK 输出 K15 执行命令的使能引脚<br/> LCD_DB0 输出 H15 并行数据输入/输出引脚<br/> LCD_DB1 输出 H13 并行数据输入/输出引脚<br/> LCD_DB2 输出 D14 并行数据输入/输出引脚<br/> LCD_DB3 输出 C15 并行数据输入/输出引脚<br/> LCD_DB4 输出 F12 并行数据输入/输出引脚<br/> LCD_DB5 输出 A10 并行数据输入/输出引脚<br/> LCD_DB6 输出 G6 并行数据输入/输出引脚<br/> LCD_DB7 输出 G5 并行数据输入/输出引脚</p>\n<table><thead><tr><th>信号名</th><th>方向</th><th>FPGA管脚号</th><th>说明</th></tr></thead><tbody><tr><td>CLK50M</td><td>输入</td><td>B10</td><td>时钟信号，50MHZ</td></tr><tr><td>LCD_RS</td><td>输出</td><td>K12</td><td>命令/数据选择引脚，当RS为低电平时，选择命令；当RS为高电平时，选择数据</td></tr><tr><td>LCD_RW</td><td>输出</td><td>L16</td><td>是读/写选择引脚，当RW为低电平时，向LCD1602写入命令或数据；当RW为高电平时，从LCD1602读取状态或数据</td></tr><tr><td>LCD_CLK</td><td>输出</td><td>K15</td><td>执行命令的使能引脚</td></tr><tr><td>LCD_DB0</td><td>输出</td><td>H15</td><td>并行数据输入/输出引脚</td></tr><tr><td>LCD_DB1</td><td>输出</td><td>H13</td><td>并行数据输入/输出引脚</td></tr><tr><td>LCD_DB2</td><td>输出</td><td>D14</td><td>并行数据输入/输出引脚</td></tr><tr><td>LCD_DB3</td><td>输出</td><td>C15</td><td>并行数据输入/输出引脚</td></tr><tr><td>LCD_DB4</td><td>输出</td><td>F12</td><td>并行数据输入/输出引脚</td></tr><tr><td>LCD_DB5</td><td>输出</td><td>A10</td><td>并行数据输入/输出引脚</td></tr><tr><td>LCD_DB6</td><td>输出</td><td>G6</td><td>并行数据输入/输出引脚</td></tr><tr><td>LCD_DB7</td><td>输出</td><td>G5</td><td>并行数据输入/输出引脚</td></tr></tbody></table>\n<h2><a id=\"2__80\"></a>2. 绘制理论波形图</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\697ae52329434016a0c80411adf9aaec.png\"/></p>\n<center>\n 理论波形图\n</center>\n<h2><a id=\"3ISE_85\"></a>3.新建ISE工程</h2>\n<p>为了让工程看起来整洁，同时方便工程移植。我们新建4个文件夹，分别是Project，Source，Sim，Doc。<br/> Project — 工程文件夹，里面放的ISE工程<br/> Source — 源代码文件夹，里面放的工程源码（.v文件或.vhd文件）<br/> Sim — 仿真文件夹，里面放的仿真相关的文件<br/> Doc — 存放相关资料，比如数据手册，需求文档等</p>\n<h2><a id=\"4_91\"></a>4.编写代码</h2>\n<pre><code>///\n//QQ:3181961725\n//TEL/WX:13540738439\n//作者：Mr Wang\n//模块介绍：LCD1602显示驱动\n///\nmodule lcd ( \n\tinput \t\t\t\tclk\t\t,//系统时钟输入50M\n\tinput\t\t\t\trst_n\t,//复位，低电平有效\n \toutput \treg\t[7:0] \tdat\t\t,//LCD的8位数据口\n \toutput  reg\t\t\trs\t\t,//数据命令选择信号，高电平表示数据，低电平表示命令\n \toutput\t\t\t\trw\t\t,//读写标志，高电平表示读，低电平表示写，该程序我们只对液晶屏进行写操作\n \toutput\t\t\t\ten\t\t//LCD的控制脚\n );\n reg\t[15:0]\tcounter\t; \n reg \t[ 5:0] \tcurrent\t; \n reg \t\t\tclkr\t; \n reg\t\t\te\t\t;\n //定义了LCD状态机需要的状态。\n parameter  set0 =6'd0; \n parameter  set1 =6'd1; \n parameter  set2 =6'd2; \n parameter  set3 =6'd3; \n parameter  set4 =6'd4;   \n parameter  dat0 =6'd5; \n parameter  dat1 =6'd6; \n parameter  dat2 =6'd7; \n parameter  dat3 =6'd8; \n parameter  dat4 =6'd9; \n parameter  dat5 =6'd10;\n parameter  dat6 =6'd11; \n parameter  dat7 =6'd12; \n parameter  dat8 =6'd13; \n parameter  dat9 =6'd14;\n parameter  dat10=6'd15; \n parameter  dat11=6'd16;\n parameter\tdat12=6'd17;  \n parameter\tdat13=6'd18; \n parameter\tdat14=6'd19; \n parameter\tdat15=6'd20; \n parameter  fini=6'hF1; \nalways @(posedge clk or negedge rst_n)         //da de data_w1 zhong pinlv \n begin \n \tif(!rst_n)\n \t\tbegin\n \t\t\tcounter&lt;=0;\n \t\t\tclkr&lt;=0;\n \t\tend\n \telse\n \t\tbegin\n  \t\t\tcounter&lt;=counter+1; \n  \t\t\tif(counter==16'h000f)  \n  \t\t\t\tclkr&lt;=~clkr; \n  \t\t\telse\n  \t\t\t\t;\n  \t\tend\nend \nalways @(posedge clkr or negedge rst_n) \nbegin \n\tif(!rst_n)\n\t\tbegin\n\t\t\tcurrent&lt;=set0;\n\t\t\tdat&lt;=0;\n\t\t\trs&lt;=0;\n\t\t\te&lt;=1;\n\t\tend\n\telse\n\t\tbegin\n  \t\t\tcase(current) \n    \t\tset0:   begin  e&lt;=0;rs&lt;=0; dat&lt;=8'h38; \tcurrent&lt;=set1; \t\tend //*设置8位格式,2行,5*7*\n    \t\tset1:   begin  e&lt;=0;rs&lt;=0; dat&lt;=8'h0C; \tcurrent&lt;=set2; \t\tend //*整体显示,关光标,不闪烁*/  \n    \t\tset2:   begin  e&lt;=0;rs&lt;=0; dat&lt;=8'h06; \tcurrent&lt;=set3; \t\tend //*设定输入方式,增量不移位*/  \n    \t\tset3:   begin  e&lt;=0;rs&lt;=0; dat&lt;=8'h01; \tcurrent&lt;=set4; \t\tend //*清除显示*/   \n\t\t\tset4:   begin  e&lt;=0;rs&lt;=0; dat&lt;=8'h80; \tcurrent&lt;=dat0; \t\tend //设置显示第一行\n    \t\tdat0:   begin  e&lt;=0;rs&lt;=1; dat&lt;=\"H\"; \tcurrent&lt;=dat1; \t\tend    \n    \t\tdat1:   begin  e&lt;=0;rs&lt;=1; dat&lt;=\"E\"; \tcurrent&lt;=dat2; \t\tend \n    \t\tdat2:   begin  e&lt;=0;rs&lt;=1; dat&lt;=\"L\"; \tcurrent&lt;=dat3; \t\tend \n    \t\tdat3:   begin  e&lt;=0;rs&lt;=1; dat&lt;=\"L\";\tcurrent&lt;=dat4; \t\tend \n    \t\tdat4:   begin  e&lt;=0;rs&lt;=1; dat&lt;=\"O\"; \tcurrent&lt;=dat5; \t\tend \n    \t\tdat5:   begin  e&lt;=0;rs&lt;=1; dat&lt;=\" \"; \tcurrent&lt;=dat6; \t\tend \n    \t\tdat6:   begin  e&lt;=0;rs&lt;=1; dat&lt;=\"F\"; \tcurrent&lt;=dat7; \t\tend \n    \t\tdat7:   begin  e&lt;=0;rs&lt;=1; dat&lt;=\"P\";\tcurrent&lt;=dat8; \t\tend \n    \t\tdat8:   begin  e&lt;=0;rs&lt;=1; dat&lt;=\"G\"; \tcurrent&lt;=dat9; \t\tend \n    \t\tdat9:   begin  e&lt;=0;rs&lt;=1; dat&lt;=\"A\";\tcurrent&lt;=dat10 ; \tend \n    \t\tdat10:  begin  e&lt;=0;rs&lt;=1; dat&lt;=\"!\"; \tcurrent&lt;=dat11; \tend \n    \t\tdat11:  begin  e&lt;=0;rs&lt;=1; dat&lt;=\"1\"; \tcurrent&lt;=dat12; \tend \n    \t\tdat12:  begin  e&lt;=0;rs&lt;=1; dat&lt;=\"2\"; \tcurrent&lt;=dat13; \tend \n\t\t\tdat13:  begin  e&lt;=0;rs&lt;=1; dat&lt;=\"3\"; \tcurrent&lt;=dat14; \tend \n\t\t\tdat14:  begin  e&lt;=0;rs&lt;=1; dat&lt;=\"4\"; \tcurrent&lt;=dat15; \tend \n\t\t\tdat15:  begin  e&lt;=0;rs&lt;=1; dat&lt;=\"6\"; \tcurrent&lt;=fini; \t\tend \n    \t\tfini:   begin  e&lt;=1;rs&lt;=0; dat&lt;=8'h00;       \t\t\t\tend\n   \t\t\tdefault:   current&lt;=set0; \n    \t\tendcase \n    \tend\n end \nassign en=clkr|e; \nassign rw=0; \nendmodule  \n</code></pre>\n<h2><a id=\"5_193\"></a>5.编写仿真测试激励文件</h2>\n<pre><code>`timescale 1ns/1ns\nmodule lcd1602_tb;\n\treg\t\t\t\t\tclk\t\t;\n\treg\t\t\t\t\trst_n\t;\ninitial\nbegin\n\tclk = 0;\n\trst_n=0;\n\t#1000\n\trst_n=1;\nend\nalways #10 clk=~clk;\nlcd Ulcd( \n\t.clk\t\t(clk),//系统时钟输入50M\n\t.rst_n\t\t(rst_n),//复位，低电平有效\n \t.dat\t\t(),//LCD的8位数据口\n \t.rs\t\t\t(),//数据命令选择信号，高电平表示数据，低电平表示命令\n \t.rw\t\t\t(),//读写标志，高电平表示读，低电平表示写，该程序我们只对液晶屏进行写操作\n \t.en\t\t\t()//LCD的控制脚\n );\nendmodule\n\n</code></pre>\n<h2><a id=\"6Modelsim_218\"></a>6.Modelsim仿真</h2>\n<p>Modelsim仿真一般有两种方法</p>\n<ol><li> <p><strong>图形化界面仿真</strong>，即所有的操作都是在Modelsim软件界面上来完成，该方式的优点是，简单易学，适用于简单的项目，缺点是操作步骤繁琐。</p> </li><li> <p><strong>批处理仿真</strong>，这种方式在仿真前需要编写相应的脚本文件，该方式的优点是，一键即可完成仿真，省时省力，缺点是前期需要编写脚本文件。前两讲采用的是图形化界面仿真的方式；为了更贴近工程实际，从第三讲开始，我们就采用批处理方式仿真。具体操作步骤可参考我们的视频教程<br/> 仿真出的波形如下图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6ac189bb6929493aafe25305d64be6d2.png\"/></p> </li></ol>\n<h2><a id=\"7_230\"></a>7.对比波形图</h2>\n<p>将第二步绘制的理论波形图与第六步Modelsim仿真出来的波形图进行对比，结果一致，说明我们的逻辑设计是正确的。如果发现比对结果不一致，就需要找到不一致的原因，最终要保证对比结果一致。通过对比，理论波形与仿真波形一致，说明功能符合设计要求。</p>\n<h2><a id=\"8UCF_232\"></a>8.绑定管脚（编写UCF文件）</h2>\n<pre><code>NET \"clk\" TNM_NET = \"clk\";\nTIMESPEC TS_sys_clk_i = PERIOD \"clk\" 20 ns HIGH 50 %;\nNET \"clk\" \t\t\tLOC = B10\t| IOSTANDARD = LVCMOS33 ;\n\nNET \"rst_n\" \t\tLOC = E4\t| IOSTANDARD = LVCMOS33;\n\nNET \"en\" \t\t\tLOC = K15\t| IOSTANDARD = LVCMOS33;\nNET \"rw\" \t\t\tLOC = L16\t| IOSTANDARD = LVCMOS33;\nNET \"rs\" \t\t\tLOC = K12\t| IOSTANDARD = LVCMOS33;\nNET \"dat[7]\" \t\tLOC = G5\t| IOSTANDARD = LVCMOS33;\nNET \"dat[6]\" \t\tLOC = G6\t| IOSTANDARD = LVCMOS33;\nNET \"dat[5]\" \t\tLOC = A10\t| IOSTANDARD = LVCMOS33;\nNET \"dat[4]\" \t\tLOC = F12\t| IOSTANDARD = LVCMOS33;\nNET \"dat[3]\" \t\tLOC = C15\t| IOSTANDARD = LVCMOS33;\nNET \"dat[2]\" \t\tLOC = D14\t| IOSTANDARD = LVCMOS33;\nNET \"dat[1]\" \t\tLOC = H13\t| IOSTANDARD = LVCMOS33;\nNET \"dat[0]\" \t\tLOC = H15\t| IOSTANDARD = LVCMOS33;\n\n\n</code></pre>\n<h2><a id=\"9vucf_254\"></a>9.添加.v和.ucf文件</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f4a34d1c16c34d52956fcb4b0d121581.png\"/></p>\n<h2><a id=\"10_258\"></a>10.编译综合，同时将未使用管脚设置为悬空状态</h2>\n<p>1.设置未使用管脚为悬空状态<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dbf78b48a2c4405db002a41f693190c1.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\53b03d6955e441a2a3b4073a20658d83.png\"/></p>\n<p>2.编译综合<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c504b7bf56854f9794216ab344c16d77.png\"/></p>\n<h2><a id=\"11BIT_268\"></a>11.下载BIT文件</h2>\n<p>编译综合成功后便可以将生成的BIT文件下载到开发板（记得插上下载器，同时开发板上电）<br/> 1.打开IMPACT<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5e6400e1b9e1451caf438eeedea682d2.png\"/></p>\n<p>2.搜索器件</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e934edcf96744d1496f8e98233be770b.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d5da4d2b8f64470dbfda720e45935f1c.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\128b3183877e45079aaf41ea75192c23.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\dd27f2f9dda1496293b59f1edef5e59a.png\"/></p>\n<p>3.选择bit文件</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4e3c6d15b844431e96a6455654404a58.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\0548b5e93bfe4a119592f9dc9925b93b.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c61a91f00de14e9797e3cb279e01e551.png\"/></p>\n<p>下载成功后，便可以观察到开发板上的实验现象，如果实验现象与设计需求相符，那说明我们的设计是没有问题的，即可进行下一步生成MCS文件</p>\n<h2><a id=\"12MCS_291\"></a>12.生成MCS文件，同时固化到配置芯片中</h2>\n<p>FPGA有一个特性，就是掉电后配置信息会丢失，所以我们需要将配置信息存储在配置芯片（FLASH）中，待开发板上电后，FPGA便会读取配置芯片中的配置信息，这样开发板掉电再上电后同样可正常工作。要将程序固化到配置芯片，需要先生成MCS文件。<br/> <strong>BIT文件转换成MCS文件步骤：</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1ae099add58245b69ca514ee5cc2ed6f.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\e064a6f906904c6db73a48c9fd6b6a14.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\abf60b5ff7574e2ca9de41439be7aeaa.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b6dadce7341e475793a1de2778c66dca.png\"/></p>\n<p><strong>固化MCS文件</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\f0af8a97a23e438283a13edcb4c2cd88.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\25c0e5ed4a514cd898bece6b09cabb8f.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a1b92f421ab24503817c0c314148e38c.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\ee5b10be73264e4984d031ddfa112c17.png\"/><br/> 固化成功后，开发板断电再重新上电，可以观察到开发板仍然可以执行刚刚的功能。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}