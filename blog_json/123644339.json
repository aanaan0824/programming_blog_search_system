{"blogid": "123644339", "writerAge": "码龄1年", "writerBlogNum": "27", "writerCollect": "72", "writerComment": "18", "writerFan": "137", "writerGrade": "2级", "writerIntegral": "346", "writerName": "拼个世界给自己", "writerProfileAdress": "writer_image\\profile_123644339.jpg", "writerRankTotal": "95711", "writerRankWeekly": "489177", "writerThumb": "39", "writerVisitNum": "24733", "blog_read_count": "1797", "blog_time": "已于 2022-03-27 14:45:42 修改", "blog_title": "Linux驱动开发之按键中断实验【完整教程】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>【完整代码在文章最后面】</h2>\n<p>本实验目的是驱动正点原子阿尔法开发板上的KEY0按键，采用中断的方式，并且采用定时器来实现按键消抖，应用程序APP读取按键值并且打印出来。</p>\n<p>  <br/> 实验前需要了解的知识：</p>\n<p>什么是中断：<br/> <font color=\"red\"> 中断使得硬件得以发出通知给处理器。中断本质上是一种特殊的电信号，由硬件设备发向处理器，不同设备对应的中断不同，而每个中断都通过一个唯一的数字标志。 </font><br/> 什么是中断处理函数：<br/> <font color=\"red\">中断处理函数是被内核调用来响应中断的，而他们运行于我们称之为中断上下文的特殊上下文中 </font><br/> 什么是中断上下文（中断上下半部）<br/> <font color=\"red\"> 当执行一个中断处理函数时，内核处于中断上下文中。中断上下文和进程并没有什么瓜葛，中断上下文不可以睡眠，它具有较为严格的时间限制。</font></p>\n<p>一：中断相关函数<br/> （1）Linux中断：每个中断都有一个中断号，通过中断号区分不同中断。<br/> （2）申请中断函数：request_irq()函数是在Linux内核中想要使用某个中断时候需要申请的<br/> （3）释放中断函数：free_irq(unsigned int irq, void *dev).<br/> （4）中断处理函数：irqreturn_t(<em>irq_handler_t)(int , void</em>)，使用request_irq函数申请中断的时候需要设置中断处理函数，<br/> （5）中断使能与禁止中断：中断使能函数enable_irq(unsigned int irq),中断禁止函数disable_irq(unsigned int irq)，enable_irq和disable_irq用于使能和禁止指定的中断，irq就是要禁止的中断号。</p>\n<p>二：上半部和下半部<br/>   request_irq申请中断的时候注册的中断服务函数属于中断处理的上半部，只要中断触发，中断服务函数就会执行，中断处理函数一定要快点执行完毕，越快越好，但事实上事与愿违，于是我们必须缩短中断服务函数的执行时间，这个时候中断处理就分为上半部和下半部了。<br/>   上半部：上半部就是中断处理函数，耗时较短。<br/>   下半部：如果中断处理过程比较耗时，就将这耗时的代码提出来，交给下半部去执行。<br/>   上下半部的没有严格区分，这里给出几个参考点:<br/> ①、如果要处理的内容不希望被其他中断打断，那么可以放到上半部。<br/> ②、如果要处理的任务对时间敏感，可以放到上半部。<br/> ③、如果要处理的任务与硬件有关，可以放到上半部<br/> ④、除了上述三点以外的其他任务，优先考虑放到下半部。<br/> 这里记录一下下半部机制<br/> （1）软中断<br/>   Linux内核使用结构体softirq_action表示软中断，定义在include/linux/interrupt.h文件中</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">softirq_action</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">softirq_action</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>软中断描述符有10个，了解一下就好了，要使用软中断，要先注册，使用函数open_softir，注册以后还要使用raise_softirq触发<br/> （2）tasklet<br/>   tasklet是利用软中断来实现的另外一种下半部机制，在软中断和tasklet之间，推荐使用tasklet。Linux内核使用结构体tasklet_struct来定义</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tasklet_struct</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">tasklet_struct</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 下一个 tasklet */</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> state<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* tasklet 状态 */</span>\n\t<span class=\"token class-name\">atomic_t</span> count<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 计数器，记录对 tasklet 的引用数 */</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* tasklet 执行的函数 */</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> data<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 函数 func 的参数 */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>tasklet也需要用到上半部，知识上半部的中断处理函数重点是调用tasklet_schedule，使用tasklet首先要定义一个tasklet函数，然后是初始化（重点是设置对应的处理函数）<br/> （3）工作队列<br/>   工作队列是另外一种下半部执行方式，工作队列在进程上下文执行，工作队列将要推后的工作交给一个内核线程去执行，工作队列在Linux内核中是一个结构体</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">work_struct</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token class-name\">atomic_long_t</span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">list_head</span> entry<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">work_func_t</span> func<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 工作队列处理函数 */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>三：设备树中断信息节点<br/>   在imx6ull.dtsi文件中，有中断信息节点，如下</p>\n<pre><code class=\"prism language-c\">intc<span class=\"token operator\">:</span> interrupt<span class=\"token operator\">-</span>controller@<span class=\"token number\">00</span>a01000 <span class=\"token punctuation\">{<!-- --></span>\n\tcompatible <span class=\"token operator\">=</span> <span class=\"token string\">\"arm,cortex-a7-gic\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">interrupt</span><span class=\"token expression\"><span class=\"token operator\">-</span>cells <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span></span>\n\tinterrupt<span class=\"token operator\">-</span>controller<span class=\"token punctuation\">;</span>\n\treg <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">0x00a01000</span> <span class=\"token number\">0x1000</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token operator\">&lt;</span><span class=\"token number\">0x00a02000</span> <span class=\"token number\">0x100</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>**</p>\n<h2><a id=\"_79\"></a>驱动编写</h2>\n<p>**<br/> 一:修改设备树<br/>   在前几期的<a href=\"https://editor.csdn.net/md/?articleId=123608569\">Linux驱动开发之按键实验</a>已经编写好了key节点，本次中断实验只需要在原来的节点添加interrupt属性。如下，其中 IRQ_TYPE_EDGE_BOTH是在include/linux/irq.h中有定义。IRQ_TYPE_EDGE_BOTH意味着松开和释放按键都会触发中断</p>\n<pre><code class=\"prism language-c\">key<span class=\"token punctuation\">{<!-- --></span>\n\t\tcompatible <span class=\"token operator\">=</span> <span class=\"token string\">\"alientek,key\"</span><span class=\"token punctuation\">;</span>\n\t\tpinctrl<span class=\"token operator\">-</span>names <span class=\"token operator\">=</span> <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">;</span>\n\t\tpinctrl<span class=\"token operator\">-</span><span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span>pinctrl_key<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n\t\tkey<span class=\"token operator\">-</span>gpios <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span>gpio1 <span class=\"token number\">18</span> GPIO_ACTIVE_HIGH<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n\t\tstatus <span class=\"token operator\">=</span> <span class=\"token string\">\"okay\"</span><span class=\"token punctuation\">;</span>\n\t\tinterrupt<span class=\"token operator\">-</span>parent <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span>gpio1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n\t\tinterrupts <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">18</span> IRQ_TYPE_EDGE_BOTH<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>二：老规矩，摆上创建好的字符设备驱动框架，做驱动嘛，就应该保留好能够兼容其他驱动的框架，全部替换重命名就好了。有需要的也可以复制下面的驱动框架。</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/init.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/kernel.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/module.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/fs.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/uaccess.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/io.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/cdev.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/slab.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/device.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/of.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/of_address.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/of_irq.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/gpio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/of_gpio.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMX6UIRQ_CNT</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMX6UIRQ_NAME</span> <span class=\"token string\">\"imx6uirq\"</span></span>\n\n<span class=\"token comment\">/*imx6uirq设备结构体*/</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">imx6uirq_dev</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">dev_t</span> devid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> major<span class=\"token punctuation\">;</span> <span class=\"token comment\">//主设备号</span>\n    <span class=\"token keyword\">int</span> minor<span class=\"token punctuation\">;</span> <span class=\"token comment\">//次设备号</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cdev</span> cdev<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">class</span> <span class=\"token operator\">*</span>class<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">device</span> <span class=\"token operator\">*</span>device<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">device_node</span> <span class=\"token operator\">*</span>nd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">imx6uirq_dev</span> imx6uirq<span class=\"token punctuation\">;</span><span class=\"token comment\">/*imx6uirq*/</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">imx6uirq_open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">inode</span> <span class=\"token operator\">*</span>inode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">file</span> <span class=\"token operator\">*</span>filp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    filp<span class=\"token operator\">-&gt;</span>private_data <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">imx6uirq_release</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">inode</span> <span class=\"token operator\">*</span>inode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">file</span> <span class=\"token operator\">*</span>filp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">ssize_t</span> <span class=\"token function\">imx6uirq_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">file</span> <span class=\"token operator\">*</span>filp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> __user <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">,</span> <span class=\"token class-name\">loff_t</span> <span class=\"token operator\">*</span>ppos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span>\n        \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*cdev操作集合*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">file_operations</span> imx6uirq_fops <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">.</span>owner   <span class=\"token operator\">=</span> THIS_MODULE<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>write   <span class=\"token operator\">=</span> imx6uirq_write<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>open    <span class=\"token operator\">=</span> imx6uirq_open<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>release <span class=\"token operator\">=</span> imx6uirq_release<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*驱动入口函数*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> __init <span class=\"token function\">imx6uirq_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/*1注册字符设备驱动*/</span>\n    imx6uirq<span class=\"token punctuation\">.</span>major <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>major<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//给定主设备号</span>\n        imx6uirq<span class=\"token punctuation\">.</span>devid <span class=\"token operator\">=</span> <span class=\"token function\">MKDEV</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>major<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">register_chrdev_region</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> IMX6UIRQ_CNT<span class=\"token punctuation\">,</span> IMX6UIRQ_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//没有给定设备号</span>\n        <span class=\"token function\">alloc_chrdev_region</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> IMX6UIRQ_CNT<span class=\"token punctuation\">,</span> IMX6UIRQ_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        imx6uirq<span class=\"token punctuation\">.</span>major <span class=\"token operator\">=</span> <span class=\"token function\">MAJOR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        imx6uirq<span class=\"token punctuation\">.</span>minor <span class=\"token operator\">=</span> <span class=\"token function\">MINOR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">goto</span> fail_devid<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"imx6uirq major = %d, imx6uirq = %d \\r\\n\"</span><span class=\"token punctuation\">,</span>imx6uirq<span class=\"token punctuation\">.</span>major<span class=\"token punctuation\">,</span>imx6uirq<span class=\"token punctuation\">.</span>minor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/*2初始化cdev*/</span>\n    imx6uirq<span class=\"token punctuation\">.</span>cdev<span class=\"token punctuation\">.</span>owner <span class=\"token operator\">=</span> THIS_MODULE<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cdev_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">.</span>cdev<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>imx6uirq_fops<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//初始化cdev</span>\n\n    <span class=\"token comment\">/*3添加cdev*/</span>\n    <span class=\"token function\">cdev_add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">.</span>cdev<span class=\"token punctuation\">,</span> imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> IMX6UIRQ_CNT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">goto</span> fail_cdevadd<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/*4创建类*/</span>\n    imx6uirq<span class=\"token punctuation\">.</span>class <span class=\"token operator\">=</span> <span class=\"token function\">class_create</span><span class=\"token punctuation\">(</span>THIS_MODULE<span class=\"token punctuation\">,</span> IMX6UIRQ_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_ERR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        ret <span class=\"token operator\">=</span> <span class=\"token function\">PTR_ERR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> fail_class<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/*5创建设备*/</span>\n    imx6uirq<span class=\"token punctuation\">.</span>device <span class=\"token operator\">=</span> <span class=\"token function\">device_create</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> IMX6UIRQ_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_ERR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        ret <span class=\"token operator\">=</span> <span class=\"token function\">PTR_ERR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> fail_device<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nfail_device<span class=\"token operator\">:</span>\n    <span class=\"token function\">class_destroy</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfail_class<span class=\"token operator\">:</span>\n    <span class=\"token function\">cdev_del</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">.</span>cdev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfail_cdevadd<span class=\"token operator\">:</span>\n    <span class=\"token function\">unregister_chrdev_region</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> IMX6UIRQ_CNT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfail_devid<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*驱动出口函数*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> __exit <span class=\"token function\">imx6uirq_exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/*注销字符设备驱动*/</span>\n    <span class=\"token function\">cdev_del</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">.</span>cdev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">unregister_chrdev_region</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> IMX6UIRQ_CNT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*摧毁设备*/</span>\n    <span class=\"token function\">device_destroy</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">,</span> imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*摧毁类*/</span>\n    <span class=\"token function\">class_destroy</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">module_init</span><span class=\"token punctuation\">(</span>imx6uirq_init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">module_exit</span><span class=\"token punctuation\">(</span>imx6uirq_exit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">MODULE_LICENSE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GPL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">MODULE_AUTHOR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Kong\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>三：定义一个宏，KEY_NUM 代表设备按键数，KEY0VALUE 表示有效，INVAKEY表示无效</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">KEY_NUM</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">KEY0VALUE</span> <span class=\"token expression\"><span class=\"token number\">0x01</span>  </span><span class=\"token comment\">//有效</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INVAKEY</span> <span class=\"token expression\"><span class=\"token number\">0XFF</span>  </span><span class=\"token comment\">//无效</span></span>\n</code></pre>\n<p>四：构建key结构体，用于按键初始化</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/*key结构体*/</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">irq_keydesc</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> gpio<span class=\"token punctuation\">;</span>            <span class=\"token comment\">//io编号</span>\n    <span class=\"token keyword\">int</span> irqnum<span class=\"token punctuation\">;</span>          <span class=\"token comment\">//中断号</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">//键值</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//名字</span>\n    <span class=\"token class-name\">irqreturn_t</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//中断处理函数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>五：更新imx6uirq_dev结构体，添加了刚才的key结构体</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/*imx6uirq设备结构体*/</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">imx6uirq_dev</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">dev_t</span> devid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> major<span class=\"token punctuation\">;</span> <span class=\"token comment\">//主设备号</span>\n    <span class=\"token keyword\">int</span> minor<span class=\"token punctuation\">;</span> <span class=\"token comment\">//次设备号</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cdev</span> cdev<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">class</span> <span class=\"token operator\">*</span>class<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">device</span> <span class=\"token operator\">*</span>device<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">device_node</span> <span class=\"token operator\">*</span>nd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">irq_keydesc</span> irqkey<span class=\"token punctuation\">[</span>KEY_NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>六：编写一个按键初始化函数</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/*按键初始化*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">keyio_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">imx6uirq_dev</span> <span class=\"token operator\">*</span>dev<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*1.按键初始化*/</span>\n    dev<span class=\"token operator\">-&gt;</span>nd <span class=\"token operator\">=</span> <span class=\"token function\">of_find_node_by_path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>nd <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EINVAL<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> fail_nd<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>KEY_NUM<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio <span class=\"token operator\">=</span> <span class=\"token function\">of_get_named_gpio</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>nd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key-gpios\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>KEY_NUM<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"KEY%d\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">gpio_request</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio<span class=\"token punctuation\">,</span> dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">gpio_direction_input</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>irqnum <span class=\"token operator\">=</span> <span class=\"token function\">gpio_to_irq</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//第一种获取中断号方式</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n        dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>irqnum <span class=\"token operator\">=</span> <span class=\"token function\">irq_of_parse_and_map</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>nd<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//第二种获取中断号方式</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/*2.按键中断初始化*/</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nfail_nd<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>七:编写中断处理函数</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/*按键中断处理函数*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">irqreturn_t</span> <span class=\"token function\">key0_handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> irq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dev_id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> IRQ_HANDLED<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>八：完善keyio_init函数，按键中断初始化</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/*按键初始化*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">keyio_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">imx6uirq_dev</span> <span class=\"token operator\">*</span>dev<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*1.按键初始化*/</span>\n    dev<span class=\"token operator\">-&gt;</span>nd <span class=\"token operator\">=</span> <span class=\"token function\">of_find_node_by_path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>nd <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EINVAL<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> fail_nd<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>KEY_NUM<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio <span class=\"token operator\">=</span> <span class=\"token function\">of_get_named_gpio</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>nd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key-gpios\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>KEY_NUM<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"KEY%d\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">gpio_request</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio<span class=\"token punctuation\">,</span> dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">gpio_direction_input</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>irqnum <span class=\"token operator\">=</span> <span class=\"token function\">gpio_to_irq</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//第一种获取中断号方式</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n        dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>irqnum <span class=\"token operator\">=</span> <span class=\"token function\">irq_of_parse_and_map</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>nd<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//第二种获取中断号方式</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n    dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>handle <span class=\"token operator\">=</span>key0_handler<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//按键初始化</span>\n    dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value  <span class=\"token operator\">=</span>KEY0VALUE<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*2.按键中断初始化*/</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>KEY_NUM <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/*申请irq*/</span>\n        ret <span class=\"token operator\">=</span> <span class=\"token function\">request_irq</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>irqnum<span class=\"token punctuation\">,</span> dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">,</span> IRQF_TRIGGER_RISING<span class=\"token operator\">|</span>IRQF_TRIGGER_FALLING<span class=\"token punctuation\">,</span> dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"irq %d request_irq failed!\\r\\n\"</span><span class=\"token punctuation\">,</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>irqnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">goto</span> fail_irq<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n     \nfail_irq<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>KEY_NUM<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">gpio_free</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\nfail_nd<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nfail_irq<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>KEY_NUM<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">gpio_free</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\nfail_nd<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>九：在驱动入口函数添加初始化IO</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/*驱动入口函数*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> __init <span class=\"token function\">imx6uirq_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/*1注册字符设备驱动*/</span>\n    imx6uirq<span class=\"token punctuation\">.</span>major <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>major<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//给定主设备号</span>\n        imx6uirq<span class=\"token punctuation\">.</span>devid <span class=\"token operator\">=</span> <span class=\"token function\">MKDEV</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>major<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">register_chrdev_region</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> IMX6UIRQ_CNT<span class=\"token punctuation\">,</span> IMX6UIRQ_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//没有给定设备号</span>\n        <span class=\"token function\">alloc_chrdev_region</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> IMX6UIRQ_CNT<span class=\"token punctuation\">,</span> IMX6UIRQ_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        imx6uirq<span class=\"token punctuation\">.</span>major <span class=\"token operator\">=</span> <span class=\"token function\">MAJOR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        imx6uirq<span class=\"token punctuation\">.</span>minor <span class=\"token operator\">=</span> <span class=\"token function\">MINOR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">goto</span> fail_devid<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"imx6uirq major = %d, imx6uirq = %d \\r\\n\"</span><span class=\"token punctuation\">,</span>imx6uirq<span class=\"token punctuation\">.</span>major<span class=\"token punctuation\">,</span>imx6uirq<span class=\"token punctuation\">.</span>minor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/*2初始化cdev*/</span>\n    imx6uirq<span class=\"token punctuation\">.</span>cdev<span class=\"token punctuation\">.</span>owner <span class=\"token operator\">=</span> THIS_MODULE<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cdev_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">.</span>cdev<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>imx6uirq_fops<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//初始化cdev</span>\n\n    <span class=\"token comment\">/*3添加cdev*/</span>\n    <span class=\"token function\">cdev_add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">.</span>cdev<span class=\"token punctuation\">,</span> imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> IMX6UIRQ_CNT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">goto</span> fail_cdevadd<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/*4创建类*/</span>\n    imx6uirq<span class=\"token punctuation\">.</span>class <span class=\"token operator\">=</span> <span class=\"token function\">class_create</span><span class=\"token punctuation\">(</span>THIS_MODULE<span class=\"token punctuation\">,</span> IMX6UIRQ_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_ERR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        ret <span class=\"token operator\">=</span> <span class=\"token function\">PTR_ERR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> fail_class<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/*5创建设备*/</span>\n    imx6uirq<span class=\"token punctuation\">.</span>device <span class=\"token operator\">=</span> <span class=\"token function\">device_create</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> IMX6UIRQ_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_ERR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        ret <span class=\"token operator\">=</span> <span class=\"token function\">PTR_ERR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> fail_device<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/*初始化IO*/</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token function\">keyio_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">goto</span> fail_keyinit<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\nfail_keyinit<span class=\"token operator\">:</span>\nfail_device<span class=\"token operator\">:</span>\n    <span class=\"token function\">class_destroy</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfail_class<span class=\"token operator\">:</span>\n    <span class=\"token function\">cdev_del</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">.</span>cdev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfail_cdevadd<span class=\"token operator\">:</span>\n    <span class=\"token function\">unregister_chrdev_region</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> IMX6UIRQ_CNT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfail_devid<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>十：在驱动出口函数添加释放中断和IO</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/*驱动出口函数*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> __exit <span class=\"token function\">imx6uirq_exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*1.释放IO中断*/</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>KEY_NUM<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">free_irq</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>irqnum<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/*2.释放IO*/</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>KEY_NUM <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">gpio_free</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/*注销字符设备驱动*/</span>\n    <span class=\"token function\">cdev_del</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">.</span>cdev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">unregister_chrdev_region</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> IMX6UIRQ_CNT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*摧毁设备*/</span>\n    <span class=\"token function\">device_destroy</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">,</span> imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*摧毁类*/</span>\n    <span class=\"token function\">class_destroy</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>十一：完善按键中断函数</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/*按键中断处理函数*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">irqreturn_t</span> <span class=\"token function\">key0_handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> irq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dev_id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">imx6uirq_dev</span> <span class=\"token operator\">*</span>dev <span class=\"token operator\">=</span>dev_id<span class=\"token punctuation\">;</span>\n\n    value <span class=\"token operator\">=</span> <span class=\"token function\">gpio_get_value</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//按下按键</span>\n        <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"KEY0 Pushing!\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//释放按键</span>\n        <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"KEY0 release!\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> IRQ_HANDLED<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>[      <br/>       <br/>       </p>\n<h2><a id=\"_484\"></a>至此，按键中断完成了！！</h2>\n<p>编译并且加载驱动后，结果显示如图</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ccbaaa57d06644418e8855df75be56a6.png\"/></p>\n<p>      <br/>       <br/>       </p>\n<h2><a id=\"emspemspemspemspemspemspemspemspemspemspemspemsp_495\"></a>            【完整代码如下】</h2>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/init.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/kernel.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/module.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/fs.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/uaccess.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/io.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/cdev.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/slab.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/device.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/of.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/of_address.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/of_irq.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/gpio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/of_gpio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/irq.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;asm/mach/map.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;asm/uaccess.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;asm/io.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/interrupt.h&gt;</span></span>\n\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMX6UIRQ_CNT</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMX6UIRQ_NAME</span> <span class=\"token string\">\"imx6uirq\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">KEY_NUM</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">KEY0VALUE</span> <span class=\"token expression\"><span class=\"token number\">0x01</span>  </span><span class=\"token comment\">//有效</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INVAKEY</span> <span class=\"token expression\"><span class=\"token number\">0XFF</span>  </span><span class=\"token comment\">//无效</span></span>\n<span class=\"token comment\">/*key结构体*/</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">irq_keydesc</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> gpio<span class=\"token punctuation\">;</span>            <span class=\"token comment\">//io编号</span>\n    <span class=\"token keyword\">int</span> irqnum<span class=\"token punctuation\">;</span>          <span class=\"token comment\">//中断号</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">//键值</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//名字</span>\n    <span class=\"token class-name\">irqreturn_t</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//中断处理函数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*imx6uirq设备结构体*/</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">imx6uirq_dev</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">dev_t</span> devid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> major<span class=\"token punctuation\">;</span> <span class=\"token comment\">//主设备号</span>\n    <span class=\"token keyword\">int</span> minor<span class=\"token punctuation\">;</span> <span class=\"token comment\">//次设备号</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cdev</span> cdev<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">class</span> <span class=\"token operator\">*</span>class<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">device</span> <span class=\"token operator\">*</span>device<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">device_node</span> <span class=\"token operator\">*</span>nd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">irq_keydesc</span> irqkey<span class=\"token punctuation\">[</span>KEY_NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">imx6uirq_dev</span> imx6uirq<span class=\"token punctuation\">;</span><span class=\"token comment\">/*imx6uirq*/</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">imx6uirq_open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">inode</span> <span class=\"token operator\">*</span>inode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">file</span> <span class=\"token operator\">*</span>filp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    filp<span class=\"token operator\">-&gt;</span>private_data <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">imx6uirq_release</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">inode</span> <span class=\"token operator\">*</span>inode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">file</span> <span class=\"token operator\">*</span>filp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">ssize_t</span> <span class=\"token function\">imx6uirq_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">file</span> <span class=\"token operator\">*</span>filp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> __user <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">,</span> <span class=\"token class-name\">loff_t</span> <span class=\"token operator\">*</span>ppos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span>\n        \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*cdev操作集合*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">file_operations</span> imx6uirq_fops <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">.</span>owner   <span class=\"token operator\">=</span> THIS_MODULE<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>write   <span class=\"token operator\">=</span> imx6uirq_write<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>open    <span class=\"token operator\">=</span> imx6uirq_open<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>release <span class=\"token operator\">=</span> imx6uirq_release<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*按键中断处理函数*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">irqreturn_t</span> <span class=\"token function\">key0_handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> irq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dev_id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">imx6uirq_dev</span> <span class=\"token operator\">*</span>dev <span class=\"token operator\">=</span>dev_id<span class=\"token punctuation\">;</span>\n\n    value <span class=\"token operator\">=</span> <span class=\"token function\">gpio_get_value</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//按下按键</span>\n        <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"KEY0 Pushing!\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//释放按键</span>\n        <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"KEY0 release!\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> IRQ_HANDLED<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\">/*按键初始化*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">keyio_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">imx6uirq_dev</span> <span class=\"token operator\">*</span>dev<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*1.按键初始化*/</span>\n    dev<span class=\"token operator\">-&gt;</span>nd <span class=\"token operator\">=</span> <span class=\"token function\">of_find_node_by_path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>nd <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EINVAL<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> fail_nd<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>KEY_NUM<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio <span class=\"token operator\">=</span> <span class=\"token function\">of_get_named_gpio</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>nd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key-gpios\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>KEY_NUM<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"KEY%d\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">gpio_request</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio<span class=\"token punctuation\">,</span> dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">gpio_direction_input</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>irqnum <span class=\"token operator\">=</span> <span class=\"token function\">gpio_to_irq</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//第一种获取中断号方式</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n        dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>irqnum <span class=\"token operator\">=</span> <span class=\"token function\">irq_of_parse_and_map</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>nd<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//第二种获取中断号方式</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n    dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>handle <span class=\"token operator\">=</span>key0_handler<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//按键初始化</span>\n    dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value  <span class=\"token operator\">=</span>KEY0VALUE<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*2.按键中断初始化*/</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>KEY_NUM <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/*申请irq*/</span>\n        ret <span class=\"token operator\">=</span> <span class=\"token function\">request_irq</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>irqnum<span class=\"token punctuation\">,</span> dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">,</span> IRQF_TRIGGER_RISING<span class=\"token operator\">|</span>IRQF_TRIGGER_FALLING<span class=\"token punctuation\">,</span> dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"irq %d request_irq failed!\\r\\n\"</span><span class=\"token punctuation\">,</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>irqnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">goto</span> fail_irq<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n     \nfail_irq<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>KEY_NUM<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">gpio_free</span><span class=\"token punctuation\">(</span>dev<span class=\"token operator\">-&gt;</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\nfail_nd<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*驱动入口函数*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> __init <span class=\"token function\">imx6uirq_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/*1注册字符设备驱动*/</span>\n    imx6uirq<span class=\"token punctuation\">.</span>major <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>major<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//给定主设备号</span>\n        imx6uirq<span class=\"token punctuation\">.</span>devid <span class=\"token operator\">=</span> <span class=\"token function\">MKDEV</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>major<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">register_chrdev_region</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> IMX6UIRQ_CNT<span class=\"token punctuation\">,</span> IMX6UIRQ_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//没有给定设备号</span>\n        <span class=\"token function\">alloc_chrdev_region</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> IMX6UIRQ_CNT<span class=\"token punctuation\">,</span> IMX6UIRQ_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        imx6uirq<span class=\"token punctuation\">.</span>major <span class=\"token operator\">=</span> <span class=\"token function\">MAJOR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        imx6uirq<span class=\"token punctuation\">.</span>minor <span class=\"token operator\">=</span> <span class=\"token function\">MINOR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">goto</span> fail_devid<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"imx6uirq major = %d, imx6uirq = %d \\r\\n\"</span><span class=\"token punctuation\">,</span>imx6uirq<span class=\"token punctuation\">.</span>major<span class=\"token punctuation\">,</span>imx6uirq<span class=\"token punctuation\">.</span>minor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/*2初始化cdev*/</span>\n    imx6uirq<span class=\"token punctuation\">.</span>cdev<span class=\"token punctuation\">.</span>owner <span class=\"token operator\">=</span> THIS_MODULE<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cdev_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">.</span>cdev<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>imx6uirq_fops<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//初始化cdev</span>\n\n    <span class=\"token comment\">/*3添加cdev*/</span>\n    <span class=\"token function\">cdev_add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">.</span>cdev<span class=\"token punctuation\">,</span> imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> IMX6UIRQ_CNT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">goto</span> fail_cdevadd<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/*4创建类*/</span>\n    imx6uirq<span class=\"token punctuation\">.</span>class <span class=\"token operator\">=</span> <span class=\"token function\">class_create</span><span class=\"token punctuation\">(</span>THIS_MODULE<span class=\"token punctuation\">,</span> IMX6UIRQ_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_ERR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        ret <span class=\"token operator\">=</span> <span class=\"token function\">PTR_ERR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> fail_class<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/*5创建设备*/</span>\n    imx6uirq<span class=\"token punctuation\">.</span>device <span class=\"token operator\">=</span> <span class=\"token function\">device_create</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> IMX6UIRQ_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_ERR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        ret <span class=\"token operator\">=</span> <span class=\"token function\">PTR_ERR</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> fail_device<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/*初始化IO*/</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token function\">keyio_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">goto</span> fail_keyinit<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\nfail_keyinit<span class=\"token operator\">:</span>\nfail_device<span class=\"token operator\">:</span>\n    <span class=\"token function\">class_destroy</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfail_class<span class=\"token operator\">:</span>\n    <span class=\"token function\">cdev_del</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">.</span>cdev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfail_cdevadd<span class=\"token operator\">:</span>\n    <span class=\"token function\">unregister_chrdev_region</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> IMX6UIRQ_CNT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfail_devid<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*驱动出口函数*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> __exit <span class=\"token function\">imx6uirq_exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*1.释放IO中断*/</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>KEY_NUM<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">free_irq</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>irqnum<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/*2.释放IO*/</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>KEY_NUM <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">gpio_free</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>irqkey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gpio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/*注销字符设备驱动*/</span>\n    <span class=\"token function\">cdev_del</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>imx6uirq<span class=\"token punctuation\">.</span>cdev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">unregister_chrdev_region</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">,</span> IMX6UIRQ_CNT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*摧毁设备*/</span>\n    <span class=\"token function\">device_destroy</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">,</span> imx6uirq<span class=\"token punctuation\">.</span>devid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*摧毁类*/</span>\n    <span class=\"token function\">class_destroy</span><span class=\"token punctuation\">(</span>imx6uirq<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">module_init</span><span class=\"token punctuation\">(</span>imx6uirq_init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">module_exit</span><span class=\"token punctuation\">(</span>imx6uirq_exit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">MODULE_LICENSE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GPL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">MODULE_AUTHOR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Kong\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}