{"blogid": "125420279", "writerAge": "码龄1年", "writerBlogNum": "96", "writerCollect": "1175", "writerComment": "1797", "writerFan": "2590", "writerGrade": "6级", "writerIntegral": "4584", "writerName": "翼同学", "writerProfileAdress": "writer_image\\profile_125420279.jpg", "writerRankTotal": "4031", "writerRankWeekly": "2072", "writerThumb": "1306", "writerVisitNum": "57909", "blog_read_count": "773", "blog_time": "已于 2022-06-26 17:54:12 修改", "blog_title": "【C++必知必会】异常处理机制，你了解多少？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<center>\n  大家好，我是翼同学！ \n </center>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#1font_colorpurple_16\">1️⃣<font color=\"purple\">前言</font></a></li><li><a href=\"#2font_colorpurple_23\">2️⃣<font color=\"purple\">异常简介</font></a></li><li><ul><li><a href=\"#C_25\">✨什么是C++异常？</a></li><li><a href=\"#_46\">✨异常与错误的区别</a></li><li><a href=\"#C_56\">✨C++异常处理的优势</a></li></ul>\n</li><li><a href=\"#3font_colorpurple_78\">3️⃣<font color=\"purple\">异常处理简介</font></a></li><li><ul><li><a href=\"#_80\">🌱关键字</a></li><li><a href=\"#_131\">🌳小结</a></li></ul>\n</li><li><a href=\"#4font_colorpurple_152\">4️⃣<font color=\"purple\">关键字详解</font></a></li><li><ul><li><a href=\"#throw_161\">📗throw</a></li><li><ul><li><a href=\"#_163\">✔️用法</a></li><li><a href=\"#_173\">✔️扩展</a></li></ul>\n</li><li><a href=\"#trycatch_212\">📙try-catch</a></li><li><ul><li><a href=\"#_214\">✔️用法</a></li><li><a href=\"#_260\">✔️小结</a></li></ul>\n</li></ul>\n</li><li><a href=\"#5font_colorpurple_270\">5️⃣<font color=\"purple\">异常发生的位置</font></a></li><li><ul><li><a href=\"#try_275\">💡try中直接抛出异常</a></li><li><a href=\"#try_299\">💡try中调用的函数抛出异常</a></li></ul>\n</li><li><a href=\"#6font_colorpurple_333\">6️⃣<font color=\"purple\">栈解旋</font></a></li><li><ul><li><a href=\"#_335\">🔋理解</a></li><li><a href=\"#_343\">🔋示例</a></li></ul>\n</li><li><a href=\"#7font_colorpurple_394\">7️⃣<font color=\"purple\">异常变量的生命周期</font></a></li><li><a href=\"#9font_colorpurple_475\">9️⃣<font color=\"purple\">写在最后</font></a></li></ul>\n</div>\n<p></p>\n<p><img alt=\"\" src=\"image\\c231a0ce4d904d5b8ae160fea1c57fd0.png\"/></p>\n<h1><a id=\"1font_colorpurple_16\"></a>1️⃣<font color=\"purple\">前言</font></h1>\n<p>今天的笔记内容是：<kbd>C++异常处理</kbd></p>\n<hr/>\n<h1><a id=\"2font_colorpurple_23\"></a>2️⃣<font color=\"purple\">异常简介</font></h1>\n<h2><a id=\"C_25\"></a>✨什么是C++异常？</h2>\n<p>事实上，程序发生错误的类型一般可以分为三种：</p>\n<blockquote>\n<ol><li><mark>语法错误</mark></li></ol>\n<p><strong>在编译和链接阶段就能发现的错误，也就是说，只有语法正确的代码才能生成可执行程序。</strong></p>\n<ol start=\"2\"><li><mark>逻辑错误</mark></li></ol>\n<p><strong>也就是说，我们编写的代码无法解决问题，无法达到目标。因此只能通过调试来解决逻辑错误。</strong></p>\n<ol start=\"3\"><li><mark>运行错误</mark></li></ol>\n<p><strong>即程序在运行期间发生的错误，比如数组下标越界，访问了不存在的下标数据；除0溢出；内存不足；文件操作时读取的文件不存在等</strong></p>\n</blockquote>\n<p>因此，为了解决运行时发生的错误，C++提出了异常机制。</p>\n<p>当C++程序运行时，可能会发生一些错误导致程序无法继续正常运行下去。而C++异常为处理这些情况而提供了一种功能强大且灵活的工具，也就是一种转移程序控制权的方式。总结的说，抛出异常就是报告一个运行时的错误信息</p>\n<h2><a id=\"_46\"></a>✨异常与错误的区别</h2>\n<blockquote>\n<ul><li>异常<code>Exception</code>都是运行时的;</li><li>编译时产生的不是异常，而是错误<code>Error</code>;</li><li>最开始大家都将程序设计导致的错误<code>Error</code>认定文不属于异常<code>Exception</code>;</li><li>但是一般都将<code>Error</code>作为异常的一种;</li><li>所以异常一般分两类，<code>Error</code>与<code>Except</code></li></ul>\n</blockquote>\n<h2><a id=\"C_56\"></a>✨C++异常处理的优势</h2>\n<p>早期在C语言中，通常是我们人为的对返回结果加一些标志来进行判定，比如发生错误返回什么标志，正常情况下我们又是返回什么标记。也就是说我们可以通过使用整型的返回值标识错误或者使用<code>error宏</code>来记录错误。</p>\n<p>但C++的异常处理机制会比C语言的异常处理更有优势。具体如下：</p>\n<blockquote>\n<ol><li>在C语言中使用函数返回值或<code>error宏</code>来处理异常错误时，调用者可能会忘记检查，导致错误没有被处理，造成程序终止或者出现错误结果；而<strong>在C++中，如果程序出现异常且没有被捕获，那么程序就会终止。</strong></li><li><strong>C++异常包含着语义信息</strong>，通过类型就能体现出来；</li><li>整型返回值缺乏上下文信息，而<strong>异常作为一个类，可以有自己的成员</strong>，这些成员就可以传递足够多信息。</li><li><strong>异常处理可以在调用跳级</strong>。比如说在有多个函数的调用栈中出现了某个错误，使用整型返回值则要求在每一级函数中都要进行处理。而<strong>使用异常处理的栈展开机制则只需要在一处进行错误处理即可。</strong></li></ol>\n</blockquote>\n<hr/>\n<h1><a id=\"3font_colorpurple_78\"></a>3️⃣<font color=\"purple\">异常处理简介</font></h1>\n<h2><a id=\"_80\"></a>🌱关键字</h2>\n<p>C++的异常处理有三个关键字：</p>\n<ul><li><kbd>throw</kbd>：<strong>抛出异常</strong>（通过<code>throw</code>关键字来抛出异常）</li><li><kbd>try</kbd>：<strong>激活异常</strong>（在<code>try</code>语句块中编写可能发生异常的代码）</li><li><kbd>catch</kbd>：<strong>捕获异常</strong>（用<code>catch</code>关键字来捕获异常并处理）</li></ul>\n<p>举个简单的例子：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 在try语句块中编写可能发现异常的代码</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> result1 <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 无异常 </span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">&lt;&lt;</span> result1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">int</span> result2 <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有异常（c的值为0） </span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">&lt;&lt;</span> result2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t <span class=\"token comment\">// 捕获异常并做出处理 </span>\n\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"出现异常！除数不能为0\"</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span> \n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果如下：</p>\n<p><img alt=\"\" src=\"image\\53ad04c9a5d24bd2864978a686d4b905.png\"/></p>\n<h2><a id=\"_131\"></a>🌳小结</h2>\n<blockquote>\n<ol><li><strong>如果有异常发生，可以用<code>throw</code>操作，创建一个异常对象并抛出；</strong></li><li><strong>将可能发生异常的代码放在<code>try</code>语句块中；</strong></li><li><strong>如果<code>try</code>语句在执行时没有引起异常，则<code>catch</code>代码块就不会执行；</strong></li><li><strong>如果<code>try</code>语句块中发生异常，则<code>catch</code>子句则会根据出现的先后顺序逐一检查；</strong></li><li><strong>匹配到的<code>catch</code>语句（即捕获了相应异常）则会处理异常（或者也可以继续抛出异常）；</strong></li><li><strong>如果没有匹配的<code>catch</code>语句块，程序就会终止；</strong></li><li><strong>C++的异常处理机制使得异常的发生和异常的处理不必拘泥于一个函数中，这样底层的函数可以着重解决相应的问题而不必过多考虑异常的处理；</strong></li><li><strong>让调用者可以在适当的位置设置对不同类型异常的处理。</strong></li></ol>\n</blockquote>\n<hr/>\n<h1><a id=\"4font_colorpurple_152\"></a>4️⃣<font color=\"purple\">关键字详解</font></h1>\n<p>前面讲到，C++异常处理的流程为：</p>\n<p><code>抛出(throw)--&gt; 检测(try) --&gt; 捕获(catch)</code></p>\n<p>注意：异常必须显式地抛出，才能被检测和捕获到。下面重点看看各个关键字的细节。</p>\n<h2><a id=\"throw_161\"></a>📗throw</h2>\n<h3><a id=\"_163\"></a>✔️用法</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">throw</span> exceptionData<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>exceptionData</code>就是异常数据，可以是任意的数据类型（<code>int</code>、<code>double</code>、<code>char*</code>等），由我们自己决定。</p>\n<p>因此，<code>throw</code>的作用就是在函数体中抛出异常。</p>\n<h3><a id=\"_173\"></a>✔️扩展</h3>\n<ul><li>另外的，<strong><code>throw</code>还可以用作异常规范（或者叫异常列表、异常指示符）</strong></li><li>即<code>throw</code>可以在函数头和函数体之间声明，指出当前函数能够抛出的异常类型，这就是异常规范。</li></ul>\n<p>1）例1</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">func1</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<ul><li>函数<code>func1</code>并且只能抛出<code>int</code>类型的异常;</li><li>如果抛出其他类型的异常，<code>try</code>将无法捕获，程序只能终结。</li></ul>\n</blockquote>\n<p>2）例2</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">func2</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<ul><li>函数<code>func2</code>可以抛出多种异常，用逗号隔开</li></ul>\n</blockquote>\n<p>3）例3</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">func3</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> z<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<ul><li>函数<code>func3</code>不会抛出任何异常，throw( )中什么也不用写；</li><li>即使抛出了，try 也检测不到。</li></ul>\n</blockquote>\n<p>需要注意的是，异常规范的初衷是为了让程序员看到函数的定义或声明后，能够立马就知道该函数会抛出什么类型的异常，这样程序员就可以使用<code>try-catch</code>来捕获了。如果没有异常规范，程序员必须阅读函数源码才能知道函数会抛出什么异常。但由于异常规范的初衷较难实现，后来的 C++11 也将其抛弃了，因此我们不建议使用异常规范。</p>\n<h2><a id=\"trycatch_212\"></a>📙try-catch</h2>\n<h3><a id=\"_214\"></a>✔️用法</h3>\n<p>try和catch关键字是一起使用的。用法相当于让try语句块去检测代码运行时有没有异常，一旦有异常抛出就会被catch所捕获。换句话说，如果 try 语句块没有检测到异常（没有异常抛出），那么就不会执行 catch 中的语句。</p>\n<p>语法如下：</p>\n<p>1）例1</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 将可能发生异常的代码放置在try语句块中</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型 变量名<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 捕获相应异常并处理</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>2）例2</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 将可能发生异常的代码放置在try语句块中</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 加省略号表示可以处理try抛出的任何类型的异常</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>3）例3</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//可以有多级catch语句</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 将可能发生异常的代码放置在try语句块中</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型 变量名<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 捕获相应异常并处理</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型 变量名<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 捕获相应异常并处理</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 加省略号表示可以处理try抛出的任何类型的异常</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_260\"></a>✔️小结</h3>\n<blockquote>\n<ol><li><strong>只有当异常被明确抛出时（明确地告诉程序发生了什么错误），try语句才能检测到。也就是说，如果发生错误，异常又没有抛出，则<code>try</code>语句是检测不到的。</strong></li><li><strong>在<code>try</code>语句块中，一旦异常被抛出，则会立刻被<code>try</code>检测到，并且程序执行发生跳转，从异常抛出点跳转到<code>catch</code>处，将异常交给<code>catch</code>语句块处理。也就是说，位于异常抛出点之后的语句不会再执行。</strong></li><li><strong>执行完<code>catch</code>块的代码后，程序会继续执行<code>catch</code>块后面的代码，即恢复正常的执行流程。</strong></li></ol>\n</blockquote>\n<h1><a id=\"5font_colorpurple_270\"></a>5️⃣<font color=\"purple\">异常发生的位置</font></h1>\n<p><strong>无论在当前try块中直接抛出异常，还是在try中调用的某个函数发生了异常，都可以被try检测到。</strong></p>\n<h2><a id=\"try_275\"></a>💡try中直接抛出异常</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">throw</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//抛出异常 </span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"程序运行中...\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果为：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">1</span>\n</code></pre>\n<h2><a id=\"try_299\"></a>💡try中调用的函数抛出异常</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">throw</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 抛出异常 </span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"程序运行中...\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果为：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">1</span>\n</code></pre>\n<hr/>\n<h1><a id=\"6font_colorpurple_333\"></a>6️⃣<font color=\"purple\">栈解旋</font></h1>\n<h2><a id=\"_335\"></a>🔋理解</h2>\n<p>异常被抛出后，从进入try块起到异常被抛掷前，这期间在栈上构造的所有对象都会被自动析构。析构的顺序和构造的顺序相反。这一过程被称为栈的解旋。</p>\n<p>通俗来讲就是在try块中，当发生了异常并被抛出时，异常抛出前创建的对象都会被自动析构，不然的话创建的对象会一直存在，占用着内存。</p>\n<h2><a id=\"_343\"></a>🔋示例</h2>\n<p>看个小例子就能理解了</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span> </span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">myClass</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">myClass</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tm_name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span> m_name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"对象被创建了！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">myClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span> m_name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"对象被析构了！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n\tstring m_name<span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tmyClass <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmyClass <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">throw</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数1抛出异常 </span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tmyClass <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用函数1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用函数2 </span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"这里是异常处理！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果为：</p>\n<p><img alt=\"\" src=\"image\\b0a5f60ae3164d47af92ea511b18e9c5.png\"/></p>\n<hr/>\n<h1><a id=\"7font_colorpurple_394\"></a>7️⃣<font color=\"purple\">异常变量的生命周期</font></h1>\n<p>先来看一段代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span> </span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">myException</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">myException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"构造函数调用了！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">myException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> myException<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"拷贝构造函数调用了\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">myException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"析构函数调用了！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">throw</span> <span class=\"token function\">myException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 抛出异常匿名对象 </span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>myException myExcept<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"异常捕获并处理！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果如下：</p>\n<p><img alt=\"\" src=\"image\\e4a696536fe54d8c9349ea58b7c4a1ed.png\"/></p>\n<p>分析如下：</p>\n<blockquote>\n<ol><li><strong>主函数中调用了函数<code>func2()</code>，执行流程就跳到<code>func2()</code>的函数体中；</strong></li><li><strong><code>func2()</code>中有<code>try-catch</code>语句块，其中<code>try</code>语句调用了<code>func1()</code>函数，所以执行流程又跳到了<code>func1()</code>的函数体中；</strong></li><li><strong><code>func1()</code>中抛出了自定义的异常类对象<code>myException()</code>，<strong>此时构造函数调用了</strong>；</strong></li><li><strong>异常抛出后，执行流程就跳到 <code>func2()</code>中的<code>catch</code>语句块中，异常被<code>catch</code>捕获了;</strong></li><li><strong>此时调用了拷贝构造函数，将匿名对象<code>myException()</code>拷贝给了<code>myExcept</code>;</strong></li><li><strong>接着是异常的处理（在上述代码中是输出语句的执行）</strong></li><li><strong>最后是栈解旋，即析构函数的自动调用，且析构的顺序和构造的顺序相反。</strong></li></ol>\n</blockquote>\n<p>如果，在上述代码中，将catch中的捕获语句改为引用类型，如下所示：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>myException<span class=\"token operator\">&amp;</span> myExcept<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"异常捕获并处理！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>则代码运行的结果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5049524923ee4450b8dead4fb4b96c0d.png\"/></p>\n<p>也就是说没有调用拷贝构造函数。直接将抛出的异常匿名对象赋值给引用对象，也就是起别名。此时抛出的异常对象的生命周期就发生了变化。即生命周期交给引用对象所托管（这种效率会较高些）。</p>\n<h1><a id=\"9font_colorpurple_475\"></a>9️⃣<font color=\"purple\">写在最后</font></h1>\n<p>好了，本篇笔记就到写这，欢迎大家到评论区一起讨论！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}