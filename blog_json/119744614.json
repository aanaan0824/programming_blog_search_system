{"blogid": "119744614", "writerAge": "码龄2年", "writerBlogNum": "12", "writerCollect": "694", "writerComment": "158", "writerFan": "1168", "writerGrade": "4级", "writerIntegral": "1083", "writerName": "ww here", "writerProfileAdress": "writer_image\\profile_119744614.jpg", "writerRankTotal": "43684", "writerRankWeekly": "213612", "writerThumb": "583", "writerVisitNum": "35797", "blog_read_count": "17602", "blog_time": "于 2021-08-17 21:22:42 发布", "blog_title": "关于getchar的用法及实例解析", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>getchar</h3>\n<ul><li><a href=\"#getchar_1\">getchar解析</a></li><li><ul><li><a href=\"#getchar_2\">一、getchar的返回类型及作用机制</a></li><li><a href=\"#_14\">二、根据一段代码初步了解</a></li><li><a href=\"#_39\">三、实例（“输入密码”）进一步了解</a></li><li><ul><li><a href=\"#1_40\">1、代码达不到理想效果</a></li><li><ul><li><a href=\"#1_72\">（1）原理详解</a></li><li><a href=\"#2_96\">（2）解决措施</a></li></ul>\n</li><li><a href=\"#2_127\">2、输入的密码中有空格</a></li><li><ul><li><a href=\"#1_130\">（1）原理详解</a></li><li><a href=\"#2_141\">（2）解决措施</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"getchar_1\"></a>getchar解析</h1>\n<h2><a id=\"getchar_2\"></a>一、getchar的返回类型及作用机制</h2>\n<p>getchar——读取字符的函数</p>\n<blockquote>\n<p>int getchar(void)</p>\n</blockquote>\n<p>返回类型为int,参数为void.<br/> 有人可能会有疑惑，getchar既然是读取字符的，为什么返回类型是int呢？<br/> <strong>1、getchar其实返回的是字符的ASCII码值（整数）。<br/> 2、getchar在读取结束或者失败的时候，会返回EOF。</strong></p>\n<blockquote>\n<p>EOF意思是end of file,本质上是-1.</p>\n</blockquote>\n<h2><a id=\"_14\"></a>二、根据一段代码初步了解</h2>\n<p>下面我们一起来看看下面这段代码什么意思</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> ch <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>意思是<br/> getchar先读取一个字符放到ch里面去，如果这个字符不等于EOF，就进入循环，打印这个字符。当getchar读到文件末尾或者结束时，它会返回一个EOF，此时结束循环。<br/> 我们来运行试一下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\65a8c3e40e2c4e399f9c2774d4beee8c.png\"/><br/> 输入A，输出A;输入b，输出b…<br/> 当我们想要结束时，输入ctrl+Z,再按回车即可。</p>\n<p><strong>注意</strong>，如果上面的代码不用while循环的话，输入123，putchar()只会输出1。因为一个getchar一次只能读取一个字符。</p>\n<h2><a id=\"_39\"></a>三、实例（“输入密码”）进一步了解</h2>\n<h3><a id=\"1_40\"></a>1、代码达不到理想效果</h3>\n<p>我们再来看看下面这段代码</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> password<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入密码:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请确认密码(Y/N):&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'Y'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"确认成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"确认失败\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>按理说，我们是想要输入密码，然后再输入N或者Y，根据我们输入的是N还是Y打印“确认成功”或“确认失败”。<br/> 我们来运行一下，看看是否是这样<br/> <img alt=\"在这里插入图片描述\" src=\"image\\60357c46d20a42ec914ac263ba5e106f.png\"/><br/> 可以看到，我们还没有输入Y或N，他就立马跳出来了一个“确认失败”<br/> 为什么会是这样呢？<br/> <img alt=\"请添加图片描述\" src=\"image\\cc868709aa844a1eabf75f98c98af3e8.jpg\"/></p>\n<h4><a id=\"1_72\"></a>（1）原理详解</h4>\n<p>我们来看看它其中的原理：<br/> scanf和getchar都是输入函数，它们都是从键盘上来读取我们的数据，但它们<strong>不是直接从键盘上来读取我们的数据</strong>。它们和键盘之间有一个区域叫<strong>缓冲区</strong>。<br/> <strong>输入函数先来看缓冲区中是否有数据，如果有，它直接就拿走了，不需要从键盘输入，如果缓冲区什么都没有，则需要从键盘输入，再拿走。</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\cf80b9daa5194a2d96f9394ce1459ac8.png\"/><br/> 明白这个道理后，我们回到上面那串代码。<br/> 最开始缓冲区里没有东西，所以我们这行代码</p>\n<blockquote>\n<p>scanf(\"%s\", password);</p>\n</blockquote>\n<p>就是从键盘输入密码，我们输入123456。为了让123456放进去，我们还敲了一个回车，所以缓冲区里为</p>\n<blockquote>\n<p>123456\\n<br/> <img alt=\"在这里插入图片描述\" src=\"image\\67fa8c6c9a2c412c886eb82a8d729108.png\"/></p>\n</blockquote>\n<p>接下来就是scanf来读缓冲区里的字符串了，scanf读取的方式是读取\\n之前的内容，所以读取的是123456.<br/> <code>printf(\"请确认密码(Y/N):&gt;\");</code>后，就是下面这行代码：</p>\n<blockquote>\n<p>int ch = getchar();</p>\n</blockquote>\n<p>getchar用来接收字符，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\00893657376e444880bc8852ee330211.png\"/><br/> getchar看到缓冲区中有数据（\\n）,直接取走，不需要从键盘输入。自然也就出现了我们上面运行结果的那一幕：还没输入N或Y，就立马跳出“确认失败”了。</p>\n<h4><a id=\"2_96\"></a>（2）解决措施</h4>\n<p>那么我们怎么解决这个问题呢？<br/> 很自然就能想到需要<strong>先把缓冲区里清空</strong>。<br/> 那我们就在前面加一个getchar把缓冲区中的“\\n”给清理掉。<br/> 即代码变为</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> password<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入密码:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//把缓冲区中的\\n清理掉</span>\n\t\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请确认密码(Y/N):&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'Y'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"确认成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"确认失败\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行一下即可发现，现在能够得到我们的理想结果。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\61b6e4b5697f4fbbadd2165430f99922.png\"/></p>\n<h3><a id=\"2_127\"></a>2、输入的密码中有空格</h3>\n<p>不过又有一个问题，当我们输入密码为123456 789时（中间有一个空格），还没等我们输入N或Y，又立马跳出了“确认失败”。<br/> 这又是怎么回事呢？我们一起来看看</p>\n<h4><a id=\"1_130\"></a>（1）原理详解</h4>\n<p>首先缓冲区里没有东西，我们需要通过键盘输入密码123456 789，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\07f38a671e934e7fbe119e0e2b706007.png\"/><br/> 然后<strong>scanf</strong>就来取缓冲区中的数据，当它<strong>读到空格的时候，它就不再读了</strong>（这是scanf的一个作用性质）。<br/> 所以scanf就只取走了123456，而缓冲区中还剩下（空格） 789\\n。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\31151bda86694c158073303dfcadccf1.png\"/></p>\n<p>再往下，运行到<code>getchar();</code>这行代码，然而这里只有一个getchar，它只能读取一个字符，也就是只读了空格，缓冲区中还剩789\\n。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6ca0f95c76c64be9b24d1b627f99312c.png\"/><br/> 再往下，就是我们的这行代码<code>int ch = getchar();</code><br/> getchar（）一来就取走了缓冲区中的7，根本不需要我们从键盘输入N或Y。运行时自然它就自动跳出了“确认错误”。</p>\n<h4><a id=\"2_141\"></a>（2）解决措施</h4>\n<p>所以我们<strong>需要把缓冲区中的东西先全部清走</strong>。<br/> 那我们就<strong>用一个循环，只要没读到\\n，我们就一直用getchar读</strong>。<br/> 即</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//把缓冲区中的内容全读走</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>整段代码如下：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> password<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入密码:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//把缓冲区中的内容全读走</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请确认密码(Y/N):&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'Y'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"确认成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"确认失败\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行一下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c03edc820cbf4bc78c1a65d81cf2c862.png\"/><br/> 是我们想要的效果。</p>\n<p>以上就是关于getchar的用法的实例解析。如果对你有帮助，记得<strong>点赞</strong>👍+<strong>关注</strong>哦！<br/> 我的主页还有其他文章，欢迎学习指点。<br/> 关注我，让我们一起学习，一起成长吧！<img alt=\"请添加图片描述\" src=\"https://img-blog.csdnimg.cn/40e2ac534296418ea2b174f3e62d1942.gif\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}