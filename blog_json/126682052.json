{"blogid": "126682052", "writerAge": "码龄6年", "writerBlogNum": "335", "writerCollect": "7970", "writerComment": "756", "writerFan": "3516", "writerGrade": "7级", "writerIntegral": "11327", "writerName": "Leung_ManWah", "writerProfileAdress": "writer_image\\profile_126682052.jpg", "writerRankTotal": "982", "writerRankWeekly": "2641", "writerThumb": "2042", "writerVisitNum": "1087589", "blog_read_count": "260", "blog_time": "于 2022-09-03 20:28:47 发布", "blog_title": "IMX6ULL学习笔记（5）——获取和编译U-Boot", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>一、简介</h1>\n<h2><a id=\"11_BootLoader_1\"></a>1.1 BootLoader</h2>\n<blockquote>\n<p><strong>BootLoader</strong> 是系统上电时运行的一段初始化代码，用于引导完整的操作系统，然后将控制器交给操作系统。 这段 BootLoader 程序会先初始化 DDR 等外设，然后将 Linux 内核从 Flash（NAND，NOR FLASH，SD，MMC 等）拷贝到 DDR 中，最后启动 Linux 内核。</p>\n<p>另外，某些 BootLoader 可能含有一些高级特性，如校验操作系统镜像，从多个操作系统镜像中选择引导合适的操作系统， 或者添加网络功能，让系统自主从网上寻找合适的镜像并且进行引导等等。<br/> <img alt=\"\" src=\"image\\bb7660d04867120aad701ac47852bd40.png\"/></p>\n</blockquote>\n<h2><a id=\"12_UBoot_7\"></a>1.2 U-Boot</h2>\n<blockquote>\n<p><strong>U-Boot（Universal Boot Loader）</strong> 是一个主要用于嵌入式系统的引导加载程序。可以支持多种不同的计算机系统结构，包括 PPC、ARM、AVR32、MIPS、x86、68k、Nios 与 MicroBlaze。这也是一套在 GNU 通用公共许可证之下发布的自由软件。U-Boot 的主要作用是用来启动操作系统内核，它分为两个阶段，即 boot + loader， boot 阶段启动系统，初始化硬件设备，建立内存空间映射图，将系统的软硬件带到一个合适的状态， loader 阶段将操作系统内核文件加载至内存，之后跳转到内核所在地址运行。U-Boot 发展至今，已经可以实现非常多的功能，比如支持液晶屏、网络、USB 等高级功能。</p>\n</blockquote>\n<h1><a id=\"UBoot_10\"></a>二、U-Boot工程结构</h1>\n<table><thead><tr><th>目录/文件</th><th>说明</th></tr></thead><tbody><tr><td>api</td><td>通用的API函数相关目录</td></tr><tr><td>arch</td><td>与芯片架构相关目录</td></tr><tr><td>board</td><td>板级相关信息目录</td></tr><tr><td>cmd</td><td>uboot命令相关目录</td></tr><tr><td>common</td><td>通用代码目录</td></tr><tr><td>configs</td><td>boot配置文件目录</td></tr><tr><td>disk</td><td>磁盘相关内容目录</td></tr><tr><td>doc</td><td>说明文档</td></tr><tr><td>drivers</td><td>驱动代码相关目录</td></tr><tr><td>dtoverlay</td><td></td></tr><tr><td>dts</td><td>设备树相关目录</td></tr><tr><td>env</td><td>uboot环境相关</td></tr><tr><td>examples</td><td>示例代码目录</td></tr><tr><td>fs</td><td>文件系统相关目录</td></tr><tr><td>include</td><td>头文件相关目录</td></tr><tr><td>lib</td><td>lib库文件目录</td></tr><tr><td>Licenses</td><td>许可证相关目录</td></tr><tr><td>net</td><td>网络相关代码目录</td></tr><tr><td>post</td><td>上电自检相关目录</td></tr><tr><td>scripts</td><td>相关脚本目录</td></tr><tr><td>test</td><td>测试代码目录</td></tr><tr><td>tools</td><td>uboot构建工具相关目录</td></tr><tr><td>Kconfig</td><td>图形配置界面相关文件</td></tr><tr><td>Makefile</td><td>Makefile文件</td></tr></tbody></table>\n<h1><a id=\"_38\"></a>三、安装编译工具和依赖</h1>\n<p><code> sudo apt install make git gcc-arm-none-eabi gcc bison flex libssl-dev dpkg-dev lzop libncurses5-dev</code></p>\n<h1><a id=\"UBoot_41\"></a>四、获取U-Boot</h1>\n<p>【不推荐，仅列出】</p>\n<ul><li>官方uboot下载：<a href=\"https://github.com/u-boot/u-boot\">https://github.com/u-boot/u-boot</a>、<a href=\"https://ftp.denx.de/pub/u-boot/\">https://ftp.denx.de/pub/u-boot/</a></li><li>NXP提供uboot下载：<a href=\"https://source.codeaurora.org/external/imx/uboot-imx\">https://source.codeaurora.org/external/imx/uboot-imx</a></li><li>STM32提供uboot下载：<a href=\"https://github.com/STMicroelectronics/u-boot\">https://github.com/STMicroelectronics/u-boot</a></li></ul>\n<p>【新手推荐使用以下开发板商提供uboot】</p>\n<ul><li>野火提供uboot下载：<a href=\"https://gitee.com/Embedfire/ebf_linux_uboot\">https://gitee.com/Embedfire/ebf_linux_uboot</a></li><li>韦东山提供uboot下载：<a href=\"https://gitee.com/weidongshan/stm32mp15xc-uboot\">https://gitee.com/weidongshan/stm32mp15xc-uboot</a></li></ul>\n<h1><a id=\"UBoot_51\"></a>五、编译野火提供U-Boot</h1>\n<ul><li> <p><strong>获取野火提供U-Boot源码</strong><br/> <code>git clone -b ebf_v2020_10_imx https://gitee.com/Embedfire/ebf_linux_uboot</code></p> </li><li> <p><strong>进入工程目录</strong><br/> <code>cd ebf_linux_uboot</code></p> </li><li> <p><strong>清除工程</strong><br/> 清除上次生成的编译环境，避免之前的环境干扰影响编译结果<br/> <code>sudo make distclean</code></p> </li><li> <p><strong>配置工程</strong><br/> 加载板级配置文件，具体的板级配置文件在uboot根目录下的configs目录下。</p> <p>野火提供的imx6ull uboot分为nand版本和emmc版本，以编译emmc版本为例<br/> <code>sudo make ARCH=arm CROSS_COMPILE=arm-none-eabi- mx6ull_fire_mmc_defconfig</code></p>\n<ul><li>ARCH=arm：设置目标为 arm 架构</li><li>CROSS_COMPILE：指定所使用的交叉编译器</li></ul> <p>若想编译nand版本的uboot需要将 <code>mx6ull_fire_mmc_defconfig</code> 改为 <code>mx6ull_fire_nand_defconfig</code><br/> <img alt=\"\" src=\"image\\1b7fdf39408dc631e7e480c6e6757e7e.png\"/></p> </li><li> <p><strong>编译工程</strong><br/> <code>sudo make ARCH=arm CROSS_COMPILE=arm-none-eabi-</code></p>\n<ul><li>ARCH=arm：设置目标为 arm 架构</li><li>CROSS_COMPILE：指定所使用的交叉编译器</li></ul> </li></ul>\n<p><img alt=\"\" src=\"image\\96cfaa78b533f596f602db27ed494665.png\"/></p>\n<ul><li> <p><strong>生成文件</strong><br/> 编译完成以后多了一些文件：<br/> <img alt=\"\" src=\"image\\d674851278efb0884ae08044a3364a38.png\"/></p>\n<ul><li><strong>uboot</strong> ：裸机程序，因此需要在其前面加上头部(IVT、DCD 等数据)才能在 IMX6ULL 上执行。</li><li><strong>u-boot-nodtb.bin</strong> ：是在 uboot 的基础上，经过 objcopy 去除符号表信息之后的可执行程序</li><li><strong>u-boot.dtb</strong> ：uboot 的设备树，是由 arm-none-eabi-gcc 和 dtc 编译出来的</li><li><strong>u-boot.bin</strong> ：是在 u-boot-nodtb.bin 后追加了 u-boot.dtb 形成的二进制文件。</li><li><strong>u-boot-dtb.imx</strong> ：<code>就是我们最终要烧写到开发板中的 uboot 镜像文件</code>。是 u-boot.bin 添加了3KB头部信息和尾部信息(结尾添加了1298字节的00,00实际没什么作用)组成的镜像。</li></ul> </li><li> <p><strong>新建编译脚本文件</strong><br/> 每次编译 uboot 都要输入一长串命令，为了简单起见，我们可以新建一个 shell 脚本文件，将这些命令写到 shell 脚本文件里面，然后每次只需要执行 shell 脚本即可完成编译工作。</p>\n<ol><li> <p>新建名为 imx6ull_uboot.sh 的 shell 脚本文件：<br/> <code>vim imx6ull_uboot.sh</code></p> </li><li> <p>然后在里面输入如下内容：<br/> <code>建议还是使用 arm-none-eabi- 编译器编译uboot，编译出来的镜像文件会小点，否则编译的uboot可能无法运行。</code></p> </li></ol> <pre><code class=\"prism language-cpp\">#<span class=\"token operator\">!</span><span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>bash\nmake ARCH<span class=\"token operator\">=</span>arm CROSS_COMPILE<span class=\"token operator\">=</span>arm<span class=\"token operator\">-</span>linux<span class=\"token operator\">-</span>gnueabihf<span class=\"token operator\">-</span> distclean\nmake ARCH<span class=\"token operator\">=</span>arm CROSS_COMPILE<span class=\"token operator\">=</span>arm<span class=\"token operator\">-</span>linux<span class=\"token operator\">-</span>gnueabihf<span class=\"token operator\">-</span> mx6ull_fire_nand_defconfig\nmake ARCH<span class=\"token operator\">=</span>arm CROSS_COMPILE<span class=\"token operator\">=</span>arm<span class=\"token operator\">-</span>linux<span class=\"token operator\">-</span>gnueabihf<span class=\"token operator\">-</span>\n</code></pre>\n<ul><li>第1行：shell 脚本要求的，必须是 “#!/bin/bash” 或者 “#!/bin/sh”。</li><li>第2行：使用了 make 命令，用于清理工程，也就是每次在编译 uboot 之前都清理一下工程。带有三个参数，第一个是 ARCH，也就是指定架构，这里肯定是 arm；第二个参数 CROSS_COMPILE 用于指定编译器，只需要指明编译器前缀就行了，比如 arm-linux-gnueabihf-gcc 编译器的前缀就是 “arm-linux-gnueabihf-”；最后一个参数 distclean 就是清除工程。</li><li>第3行：也使用了 make 命令，用于配置 uboot。同样有三个参数，不同的是，最后一个参数是 mx6ull_fire_mmc_defconfig。前面说了 uboot 是 bootloader 的一种，可以用来引导Linux，但是 uboot 除了引导 Linux 以外还可以引导其它的系统，而且 uboot 还支持其它的架构和外设，比如 USB、网络、SD 卡等。这些都是可以配置的，需要什么功能就使能什么功能。所以在编译 uboot 之前，一定要根据自己的需求配置 uboot。mx6ull_fire_mmc_defconfig 就是野火针对 I.MX6ULL 的 EMMC 核心板编写的配置文件，这个配置文件在 uboot源码的 configs 目录中。</li><li>第4行：用于编译 uboot，通过第 3 行配置好 uboot 以后就可以直接 “make” 编译 uboot 了</li></ul>\n<ol start=\"3\"><li> <p>增加可执行权限<br/> <code>chmod 777 imx6ull_uboot.sh.sh</code></p> </li><li> <p>执行脚本文件<br/> <code>./imx6ull_uboot.sh.sh</code></p> </li></ol> </li></ul>\n<hr/>\n<p>• 由 <a href=\"https://blog.csdn.net/qq_36347513\">Leung</a> 写于 2022 年 9 月 3 日</p>\n<p>• 参考：<a href=\"https://doc.embedfire.com/lubancat/build_and_deploy/zh/latest/building_image/uboot/uboot01.html\">3. Uboot的编译</a><br/> 　　　　<a href=\"https://blog.csdn.net/zzssdd2/article/details/120817786?spm=1001.2014.3001.5506\">IMX6ULL - 移植uboot-imx_v2020.04_5.4.70_2.3.0</a><br/> 　　　　<a href=\"https://blog.csdn.net/p1279030826/article/details/105038783\">【Linux系统移植】U-Boot编译、烧写与使用</a><br/> 　　　　<a href=\"https://blog.csdn.net/p1279030826/article/details/105336641\">【Linux系统移植】NXP 官方开发板 uboot 编译与烧录</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}