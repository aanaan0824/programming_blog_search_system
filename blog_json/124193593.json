{"blogid": "124193593", "writerAge": "码龄2年", "writerBlogNum": "4", "writerCollect": "17", "writerComment": "1", "writerFan": "3", "writerGrade": "1级", "writerIntegral": "49", "writerName": "月魁的小土豆呀", "writerProfileAdress": "writer_image\\profile_124193593.jpg", "writerRankTotal": "169596", "writerRankWeekly": "1030015", "writerThumb": "9", "writerVisitNum": "5735", "blog_read_count": "4014", "blog_time": "已于 2022-04-30 13:34:10 修改", "blog_title": "51单片机多种方式点亮LED", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>基于51单片机四个按键四种方式电亮LED灯，示例中的为代码的主要部分，是实现功能的代码。delay表示延时，是自定义的函数，最终代码可直接运行。</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>51单片机多种方式点亮LED</h3>\n<ul><li><a href=\"#1___6\">方式1 全亮和全熄</a></li><li><a href=\"#2___25\">方式2 依次电亮</a></li><li><a href=\"#3___53\">方式3 从上到下，再下到上一次电亮</a></li><li><a href=\"#4___83\">方式4 两边向中间电亮</a></li><li><a href=\"#_104\">补充说明及按键控制思路</a></li><li><a href=\"#_117\">最终代码</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"1___6\"></a>方式1 全亮和全熄</h1>\n<p>对于八个LED控制高低电平，可以一次性使用P1=0x**<br/> 低电平0则亮，1则熄。<br/> 8个LED对应的不同的电平，就比如控制全熄，那么对于的八位二进制数1111 1111</p>\n<p>转为16进制则为ff，那么P1=0xff即为8个LED全熄，每个LED对应各自位的二进制数，比如最两边的不亮，1000 0001，转16进制，同理输入即可<br/> P1=~P1即为取反，1变0，0变1, 比如，1000 0001就成了0111 1110</p>\n<pre><code class=\"prism language-c\">\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tP1 <span class=\"token operator\">=</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tP1 <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>P1<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"2___25\"></a>方式2 依次电亮</h1>\n<p>我们依然可以用之前的16进制输入。不同的是，如果继续直接赋值，对应8个LED，加上每次的延时，意味着程序十几句话，更重要的是后续的打断不方便，因此采用移位的操作，A&lt;&lt;m，表示数据A向左移动m位，空余的位置补0，同时取一定的位数，我们单片机八位二进制，所以只会去取八位：</p>\n<p>比如<br/> A=0000 0001 m=2时 移位后 A=0000 0100，原来在第一位的1会到第三位，同时空缺的补0<br/> A=0100 0001 m=2时 移位后 A=0000 0100，最前边的1在移位后超出，不会取到它</p>\n<p>同时当移动完</p>\n<pre><code class=\"prism language-c\">\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t    led <span class=\"token operator\">=</span> <span class=\"token number\">0xfe</span><span class=\"token punctuation\">;</span>\n\t    P1 <span class=\"token operator\">=</span> led<span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span> \n\t\t\t<span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tled<span class=\"token operator\">=</span>led<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\tP1 <span class=\"token operator\">=</span> led<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\t\t    \n\t\t<span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tled <span class=\"token operator\">=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span>\n\t\tj <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tP1 <span class=\"token operator\">=</span> led<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> \n</code></pre>\n<h1><a id=\"3___53\"></a>方式3 从上到下，再下到上一次电亮</h1>\n<p>跟第二个同理<br/> 这里的 crol 与cror就是我们上一步说的移位类似，表示循环移位，crol 左移，cror右移，区别在于超出位数的部分会自动跑到最开始的位置，比如第八位循环移位一次，那么经过循环就该到第一位，可以当做他们是圈一样的循环。<br/> 比如<br/> A=0100 0001 m=2时 移位后 A=0000 0101</p>\n<p>需要头文件#include&lt;intrins.h&gt; <br/> 也可以跟我们上一步同样的操作实现</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\t\n\t    P1 <span class=\"token operator\">=</span> <span class=\"token number\">0xfe</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>m<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>m<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t\t\tled <span class=\"token operator\">=</span> <span class=\"token number\">0xfe</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tled <span class=\"token operator\">=</span> <span class=\"token function\">_crol_</span><span class=\"token punctuation\">(</span>led<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tP1 <span class=\"token operator\">=</span> led<span class=\"token punctuation\">;</span>\t    \n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>n<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\t \n\t\t    led <span class=\"token operator\">=</span> <span class=\"token number\">0x7f</span><span class=\"token punctuation\">;</span>\t\t\t\t\n\t\t\t<span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tled <span class=\"token operator\">=</span> <span class=\"token function\">_cror_</span><span class=\"token punctuation\">(</span>led<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t    \n\t\t\tP1 <span class=\"token operator\">=</span> led<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tm <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"4___83\"></a>方式4 两边向中间电亮</h1>\n<p>此处将两边分开表示即可</p>\n<pre><code class=\"prism language-c\">\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t    led <span class=\"token operator\">=</span> <span class=\"token number\">0x7e</span><span class=\"token punctuation\">;</span>\n\t    High<span class=\"token operator\">=</span>led<span class=\"token operator\">&amp;</span><span class=\"token number\">0xF0</span><span class=\"token punctuation\">;</span>\t\n\t    Low<span class=\"token operator\">=</span>led<span class=\"token operator\">&amp;</span><span class=\"token number\">0x0F</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">{<!-- --></span>\t\n\t\t\tled<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>High<span class=\"token operator\">&amp;</span><span class=\"token number\">0xF0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span>Low<span class=\"token operator\">&amp;</span><span class=\"token number\">0x0F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tP1 <span class=\"token operator\">=</span> led<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t    High<span class=\"token operator\">=</span>High<span class=\"token operator\">&gt;&gt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t\n\t\t    Low<span class=\"token operator\">=</span>Low<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t             \n\t\t<span class=\"token punctuation\">}</span>\n\t\ti <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tP1 <span class=\"token operator\">=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_104\"></a>补充说明及按键控制思路</h1>\n<p>对于移位也是可以跟取反一起实现的，有些需求电亮后不熄灭的，可以循环移位，让1补回去，也可以将初始亮的灯定义熄灭0，移位取反，也可以达到与方式三循环移位的效果<br/> P1=~(0x01&lt;&lt;i);</p>\n<p>关于按键控制思路<br/> 首选最大的问题在于循环的打破，我们的程序初始设置的都是死循环，那么想要打破可以判断条件，不满足则break，这里不能仅仅只动while(1)是因为程序需要更快的打破，while判断是可以打破循环，但是一次循环的过程长了也是带来诸多不变，所以对于函数内的for循环每次也加判断，这样方便更快结束程序</p>\n<p>思路一，也是最简单粗暴的，直接判断按键，比如结束第2个的循环，<br/> 最外的while(!KEY1 || !KEY3|| !KEY4)<br/> for里边的if(KEY1 || KEY3 || KEY4) break; else<br/> 但是这样并不灵敏，对于循环以及延时的而言，他们判断按键依然是有一定时间后才执行的，以至于会出现按下没打断，按下打断了但未执行下一个，只有按下足够长的时间才能保证顺利切换</p>\n<p>思路二 ，对按键赋值，让按下按键1，会有一个变量A为1，直到按下其他按键，改变A的值，同时也能够保证单片机可以及时扫描到按键按下，改变A，那么在判断的时候，比如程序2，我们只需判断A是否为2，按下3时，A不为2了跳出，同时3进行，这些切换存在的延时以及不需要我们一直按下按键了，这里采用的是定时器每隔50ms（50ms真的很快了，另外时间可以自己设置，50ms真的足够）扫描一下按键。</p>\n<h1><a id=\"_117\"></a>最终代码</h1>\n<p><strong>代码如下：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;reg52.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;intrins.h&gt;</span>\t\t\t\t\t</span>\nsbit key1<span class=\"token operator\">=</span>P3<span class=\"token operator\">^</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nsbit key2<span class=\"token operator\">=</span>P3<span class=\"token operator\">^</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nsbit key3<span class=\"token operator\">=</span>P3<span class=\"token operator\">^</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\nsbit key4<span class=\"token operator\">=</span>P3<span class=\"token operator\">^</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\t                          \n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\t\t    \n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> led<span class=\"token punctuation\">,</span>High<span class=\"token punctuation\">,</span>Low<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> key_s<span class=\"token punctuation\">;</span>\t\t                          \n\n<span class=\"token keyword\">void</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> x<span class=\"token punctuation\">)</span>                          <span class=\"token comment\">//延时函数，延时x毫秒</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>c<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>b<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">248</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">delay_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t             <span class=\"token comment\">//按键一的延时</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key_s<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">delay_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t\t\t\t            \t <span class=\"token comment\">//按键二的延时</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key_s<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">delay_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t\t\t             \t\t <span class=\"token comment\">//按键三的延时</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key_s<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">delay_4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t\t\t\t                 <span class=\"token comment\">//按键四的延时</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key_s<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t\t             <span class=\"token comment\">//各个按键的响应函数</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    P1 <span class=\"token operator\">=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>key_s<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tP1 <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>P1<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">delay_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tP1 <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>P1<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>key_s<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t    led <span class=\"token operator\">=</span> <span class=\"token number\">0xfe</span><span class=\"token punctuation\">;</span>\n\t    P1 <span class=\"token operator\">=</span> led<span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span> \n\t\t\t<span class=\"token function\">delay_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tled<span class=\"token operator\">=</span>led<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\tP1 <span class=\"token operator\">=</span> led<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\t\t    \n\t\t<span class=\"token function\">delay_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">delay_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tled <span class=\"token operator\">=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span>\n\t\tj <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tP1 <span class=\"token operator\">=</span> led<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">delay_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> \n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>key_s<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t    P1 <span class=\"token operator\">=</span> <span class=\"token number\">0xfe</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>m<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>m<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t\t\tled <span class=\"token operator\">=</span> <span class=\"token number\">0xfe</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">delay_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tled <span class=\"token operator\">=</span> <span class=\"token function\">_crol_</span><span class=\"token punctuation\">(</span>led<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tP1 <span class=\"token operator\">=</span> led<span class=\"token punctuation\">;</span>\t    \n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>n<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\t \n\t\t    led <span class=\"token operator\">=</span> <span class=\"token number\">0x7f</span><span class=\"token punctuation\">;</span>\t\t\t\t\n\t\t\t<span class=\"token function\">delay_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tled <span class=\"token operator\">=</span> <span class=\"token function\">_cror_</span><span class=\"token punctuation\">(</span>led<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t    \n\t\t\tP1 <span class=\"token operator\">=</span> led<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tm <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>   \n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>key_s<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t    led <span class=\"token operator\">=</span> <span class=\"token number\">0x7e</span><span class=\"token punctuation\">;</span>\n\t    High<span class=\"token operator\">=</span>led<span class=\"token operator\">&amp;</span><span class=\"token number\">0xF0</span><span class=\"token punctuation\">;</span>\t\n\t    Low<span class=\"token operator\">=</span>led<span class=\"token operator\">&amp;</span><span class=\"token number\">0x0F</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">{<!-- --></span>\t\n\t\t\tled<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>High<span class=\"token operator\">&amp;</span><span class=\"token number\">0xF0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span>Low<span class=\"token operator\">&amp;</span><span class=\"token number\">0x0F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tP1 <span class=\"token operator\">=</span> led<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">delay_4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t    High<span class=\"token operator\">=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>High<span class=\"token operator\">&gt;&gt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t\t    Low<span class=\"token operator\">=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>Low<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t             \n\t\t<span class=\"token punctuation\">}</span>\n\t\ti <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>   \n\n<span class=\"token keyword\">void</span> <span class=\"token function\">key_state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>               \t\t\t\t         <span class=\"token comment\">//按键状态</span>\n<span class=\"token punctuation\">{<!-- --></span> \n   \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key1<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>key2<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>key3<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>key4<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key1<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>key2<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>key3<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>key4<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key1<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t            <span class=\"token punctuation\">{<!-- --></span>key_s <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key2<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t            <span class=\"token punctuation\">{<!-- --></span>key_s <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key3<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t            <span class=\"token punctuation\">{<!-- --></span>key_s <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key4<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t            <span class=\"token punctuation\">{<!-- --></span>key_s <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t\t\t\t\t \n<span class=\"token punctuation\">{<!-- --></span>   \n    TMOD <span class=\"token operator\">=</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//选择模式</span>\n\tEA <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//总中断打开</span>\n\n\t<span class=\"token comment\">//高八位  (65536-50000)/256 转 16 进制数，也可以直接写TH0=(65536-50000)/256 ，这里的50000即5万微秒，就是50毫秒，自定义时间，不要超过65536</span>\n\tTH0 <span class=\"token operator\">=</span> <span class=\"token number\">0x3c</span><span class=\"token punctuation\">;</span>    \n\tTL0 <span class=\"token operator\">=</span> <span class=\"token number\">0xb0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//低八位  \t同理TL0=(65536-50000)%256</span>\n\tET0 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//定时器中断打开</span>\n\tTR0 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//定时器开关打开</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Timer0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> interrupt <span class=\"token number\">1</span>\t\t\t\t\t\t\t <span class=\"token comment\">//定时器中断，间隔50ms</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tTH0<span class=\"token operator\">=</span><span class=\"token number\">0x3c</span><span class=\"token punctuation\">;</span>\n\tTL0<span class=\"token operator\">=</span><span class=\"token number\">0xb0</span><span class=\"token punctuation\">;</span>\t\n    <span class=\"token function\">key_state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}