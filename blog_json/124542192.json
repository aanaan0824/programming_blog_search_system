{"blogid": "124542192", "writerAge": "码龄7年", "writerBlogNum": "148", "writerCollect": "81", "writerComment": "5", "writerFan": "423", "writerGrade": "5级", "writerIntegral": "1639", "writerName": "Mar丶流年", "writerProfileAdress": "writer_image\\profile_124542192.jpg", "writerRankTotal": "12599", "writerRankWeekly": "3324", "writerThumb": "130", "writerVisitNum": "52461", "blog_read_count": "1376", "blog_time": "于 2022-05-02 16:04:23 发布", "blog_title": "Thinkphp6的日志", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><ul><li><ul><li><a href=\"#_1\">日志级别</a></li><li><a href=\"#_5\">设置日志记录级别</a></li><li><a href=\"#_20\">单一日志</a></li><li><a href=\"#_31\">独立日志</a></li><li><a href=\"#_48\">日志的写入时机</a></li><li><a href=\"#_66\">日志通道</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h4><a id=\"_1\"></a>日志级别</h4>\n<blockquote>\n<p>debug, info, notice, warning, error, critical, alert, emergency<br/> 其中有一个特别的级别:sql，专门用来记录sql语句的</p>\n</blockquote>\n<h4><a id=\"_5\"></a>设置日志记录级别</h4>\n<blockquote>\n<p>对于程序比较重要的业务模块可以进行埋点(进行日志记录)<br/> 可以通过设置日志记录级别来开启和关闭记录<br/> 有助于排除错误(比每次出现错误去代码里增加记录日志好多了)</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">        <span class=\"token comment\"># 修改 config/log.php</span>\n        <span class=\"token comment\"># 配置 'level' =&gt; ['notice','warning']</span>\n        <span class=\"token comment\"># level 不为空时，只记录level中指定的错误级别</span>\n        <span class=\"token comment\"># level 为空时，记录所有级别</span>\n        <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> UserService::getInstance<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">&gt;</span>findByUsername<span class=\"token punctuation\">(</span><span class=\"token string\">'xieruixiang'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Log::warning<span class=\"token punctuation\">(</span><span class=\"token string\">\"warning:{user}\"</span>, compact<span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\"># info 不再 level 中 则不会记录</span>\n        Log::info<span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm info\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"_20\"></a>单一日志</h4>\n<blockquote>\n<p>默认的tp日志是写在当前日期(年月)目录下的，如(runtime/admin/log/202204/30_info.log)<br/> 单一日志设置 修改config/log.php 中通道single属性为true<br/> 设置单一日志后，将不再写在时间目录下(一直写一个固定目录)，如(runtime/admin/log/single_info.log)</p>\n</blockquote>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 开启单一日志</span>\n<span class=\"token comment\"># channels.file.single</span>\n<span class=\"token comment\"># 这里给file通道开启单一日志</span>\n<span class=\"token string\">'single'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean\">true</span>\n</code></pre>\n<h4><a id=\"_31\"></a>独立日志</h4>\n<blockquote>\n<p>每一种日志级别的日志都归类到一个文件之中(推荐开启独立日志)<br/> 设置 config/log.php 中通道apart_level属性</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">        <span class=\"token comment\">#  设置 file 通道 info，notice，warning 级别开启独立日志</span>\n        <span class=\"token comment\">#  channels.file.apart_level</span>\n        <span class=\"token comment\"># 'apart_level' =&gt; ['info', 'notice', 'warning']</span>\n        <span class=\"token comment\"># 在 apart_level中的级别会独立写到一个文件中去</span>\n\n        <span class=\"token comment\"># write to runtime/admin/log/202204/30_warning.log</span>\n        Log::warning<span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\"># write to runtime/admin/log/202204/30_info.log</span>\n        Log::info<span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm info\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\"># write to runtime/admin/log/202204/30_notice.log</span>\n        Log::notice<span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm notice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"_48\"></a>日志的写入时机</h4>\n<blockquote>\n<p>日志写入时机提供两种(实时写入，程序执行完后写入)<br/> 通过设置config/log.php中通道 realtime_write 属性</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">        <span class=\"token comment\"># 这里中断程序的执行</span>\n        <span class=\"token comment\"># 如果 realtime_write = false 则无法写到日志中去</span>\n        <span class=\"token comment\"># realtime_write = true 可以写入日志中去</span>\n        Log::warning<span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\"># 如果 realtime_write = false</span>\n        <span class=\"token comment\"># 又想实时写入</span>\n        <span class=\"token comment\"># 可以通过 Log::write($msg, $type) 实时写入</span>\n        <span class=\"token comment\"># $msg 信息</span>\n        <span class=\"token comment\"># $type 日志级别</span>\n        Log::write<span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm write\"</span>, <span class=\"token string\">'warning'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        die<span class=\"token punctuation\">(</span><span class=\"token string\">\"日志将不会写入\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"_66\"></a>日志通道</h4>\n<blockquote>\n<p>可以自定义通道<br/> 以增加邮件通道为例<br/> 将config/log.php 中通道type 改成自定义驱动类即可</p>\n</blockquote>\n<pre><code class=\"prism language-bash\">        <span class=\"token comment\"># config/log.php channels 添加</span>\n         <span class=\"token string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">\\</span>app<span class=\"token punctuation\">\\</span>admin<span class=\"token punctuation\">\\</span>driver<span class=\"token punctuation\">\\</span>EmailDriver::class,\n            <span class=\"token comment\"># 调试发送邮件时将其设置成实时比较好调试</span>\n            <span class=\"token string\">'realtime_write'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> true,\n        <span class=\"token punctuation\">]</span>\n        \n       <span class=\"token comment\"># EmailDriver 需要实现 think\\contract\\LogHandlerInterface</span>\n       class EmailDriver implements LogHandlerInterface\n       <span class=\"token punctuation\">{<!-- --></span>\n          public <span class=\"token keyword\">function</span> save<span class=\"token punctuation\">(</span>array <span class=\"token variable\">$log</span><span class=\"token punctuation\">)</span>: bool\n          <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token comment\"># 这里进行发送邮件逻辑</span>\n          <span class=\"token comment\"># 想知道邮件发送逻辑的可以参考我的文章 《php发送邮件》</span>\n          <span class=\"token comment\"># 不想知道的 可以调用第三方封装好的php发送邮件组件</span>\n           <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>使用邮件通道</p>\n</blockquote>\n<pre><code class=\"prism language-bash\"> <span class=\"token comment\"># channel($channelName) 指定发送通道</span>\n <span class=\"token comment\"># 不指定则使用默认发送通道</span>\n <span class=\"token comment\"># config/log.php</span>\n <span class=\"token comment\"># 'default' =&gt; env('log.channel', 'file'),</span>\n Log::channel<span class=\"token punctuation\">(</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">&gt;</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"this is info\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\"># 就能以邮件形式通知了</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}