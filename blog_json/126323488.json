{"blogid": "126323488", "writerAge": "码龄1年", "writerBlogNum": "72", "writerCollect": "2611", "writerComment": "4590", "writerFan": "8350", "writerGrade": "6级", "writerIntegral": "8330", "writerName": "codeMak1r.小新", "writerProfileAdress": "writer_image\\profile_126323488.jpg", "writerRankTotal": "1737", "writerRankWeekly": "13", "writerThumb": "2775", "writerVisitNum": "208531", "blog_read_count": "788", "blog_time": "已于 2022-08-27 23:15:25 修改", "blog_title": "React+Mobx｜综合项目实践（附项目源码、地址）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/7c9ed80501464743ae5093eae5d4c519.gif#pic_center\"/></p>\n<blockquote>\n<p><strong><font color=\"#FF7F50\"> 欢迎来到我的博客</font></strong><br/> <strong>📔博主是一名大学在读本科生，主要学习方向是前端。<br/> 🍭目前已经更新了<font color=\"#FF7F50\">【Vue】、【React–从基础到实战】、【TypeScript】等等系列专栏</font><br/> 🛠目前正在学习的是🔥<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          R\n         \n         \n          e\n         \n         \n          a\n         \n         \n          c\n         \n         \n          t\n         \n         \n          框架\n         \n        \n        \n         React框架\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0077em;\">R</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">t</span><span class=\"mord cjk_fallback\">框架</span></span></span></span></span>🔥，中间穿插了一些基础知识的回顾<br/> 🌈博客主页👉<a href=\"https://blog.csdn.net/Svik_zy?type=blog\">codeMak1r.小新的博客</a></strong></p>\n<p></p>\n<div class=\"toc\">\n<h3>😇本文目录😇</h3>\n<ul><li><a href=\"#Todos__Mobx___15\">Todos - Mobx - 综合案例</a></li><li><ul><li><a href=\"#1_39\">1.渲染列表</a></li><li><a href=\"#2_136\">2.单选功能实现</a></li><li><a href=\"#3_164\">3.全选功能实现</a></li><li><a href=\"#4_205\">4.删除功能实现</a></li><li><a href=\"#5_224\">5.回车新增功能实现</a></li><li><a href=\"#6_270\">6.统计计数功能实现</a></li><li><a href=\"#7Mobx__React__301\">7.Mobx - React 职责划分</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<p><strong><font color=\"#FF7F50\">本文被专栏<a href=\"https://blog.csdn.net/svik_zy/category_11671445.html?spm=1001.2014.3001.5482\">【React–从基础到实战】</a>收录</font></strong></p>\n</blockquote>\n<blockquote>\n<p><strong><font color=\"#FF7F50\">🕹坚持创作✏️，一起学习📖，码出未来👨🏻‍💻！</font></strong></p>\n</blockquote>\n<h1><a id=\"Todos__Mobx___15\"></a>Todos - Mobx - 综合案例</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0dda5c5c361b4119aa778d4f7e209d19.png\"/></p>\n<blockquote>\n<p>项目演示地址：https://react-course-series.gitee.io/mobx_react/<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/64b5c28dcd554f7dafcc7dc471bf5811.gif#pic_center\"/></p>\n</blockquote>\n<ol><li>渲染列表数据</li><li>单选功能</li><li>全选功能</li><li>删除功能</li><li>回车新增功能</li><li>统计计数功能</li></ol>\n<blockquote>\n<p>项目目录：</p>\n<pre><code>src\n├─App.jsx\n├─index.js\n├─store\n|   ├─index.js\n|   └task.Store.js\n├─Todo\n|  ├─index.css\n|  └index.jsx\n</code></pre>\n</blockquote>\n<h2><a id=\"1_39\"></a>1.渲染列表</h2>\n<p>/src/store/task.Store.js</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> makeAutoObservable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskStore</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">makeAutoObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'学习react'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">isDone</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'搞定mobx'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">isDone</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{<!-- --></span> TaskStore <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>/src/store/index.js</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> TaskStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./task.Store\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1.声明一个rootStore</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RootStore</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>taskStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TaskStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 2.实例化rootStore注入context</span>\n<span class=\"token keyword\">const</span> rootStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RootStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span>rootStore<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 3.导出useStore方法，供组件通过调用该方法使用根实例</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{<!-- --></span> useStore <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>/src/Todo/index.js</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> observer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx-react-lite'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> useStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../store'</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./index.css'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> taskStore <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>section className<span class=\"token operator\">=</span><span class=\"token string\">'todoapp'</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>header className<span class=\"token operator\">=</span><span class=\"token string\">'header'</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>todos<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/* 新增输入框 */</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>input className<span class=\"token operator\">=</span><span class=\"token string\">'new-todo'</span> autoFocus autoComplete<span class=\"token operator\">=</span><span class=\"token string\">'off'</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">'What needs to be done?'</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>header<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>section className<span class=\"token operator\">=</span><span class=\"token string\">'main'</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/* 全选 */</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"checkbox\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">'toggle-all'</span> className<span class=\"token operator\">=</span><span class=\"token string\">'toggle-all'</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>label htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"toggle-all\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>ul className<span class=\"token operator\">=</span><span class=\"token string\">'todo-list'</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/* completed类名 */</span><span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">{<!-- --></span>\n            taskStore<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todoObj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n              <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>todoObj<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> className<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>todoObj<span class=\"token punctuation\">.</span>isDone <span class=\"token operator\">?</span> <span class=\"token string\">'todo completed'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'todo'</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'view'</span><span class=\"token operator\">&gt;</span>\n                  <span class=\"token operator\">&lt;</span>input id<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>todoObj<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"checkbox\"</span> className<span class=\"token operator\">=</span><span class=\"token string\">'toggle'</span>\n                    defaultChecked<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>todoObj<span class=\"token punctuation\">.</span>isDone <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n                  <span class=\"token operator\">&lt;</span>label htmlFor<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>todoObj<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>todoObj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">&gt;</span>\n                  <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"destroy\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>section<span class=\"token operator\">&gt;</span>\n\t\t\t <span class=\"token operator\">&lt;</span>footer className<span class=\"token operator\">=</span><span class=\"token string\">'footer'</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>span className<span class=\"token operator\">=</span><span class=\"token string\">\"todo-count\"</span><span class=\"token operator\">&gt;</span>\n          任务总数：<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span> ｜ 已完成： <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>footer<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>section<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span>Task<span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>使用的是Mobx中的响应式数据，用数组的map方法对数据进行遍历，之后渲染在组件中。</p>\n</blockquote>\n<h2><a id=\"2_136\"></a>2.单选功能实现</h2>\n<p>首先要给Task组件声明一个自己的数据。（Mobx）</p>\n<blockquote>\n<p><em>思想：通过Mobx中的store去维护状态，input只需要把event.target.checked交给store让它进行修改</em></p>\n</blockquote>\n<ol><li>给<code>task.Store.js</code>添加一个修改单选框选中与否的方法（修改对应id的isDone）</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 单选操作</span>\n<span class=\"token function\">singleCheck</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> isDone</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 通过id修改对应的isDone</span>\n  <span class=\"token keyword\">const</span> todoObj <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n  todoObj<span class=\"token punctuation\">.</span>isDone <span class=\"token operator\">=</span> isDone\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"2\"><li>在<code>/src/Todo/Task.jsx</code>组件中，点击单选框触发<code>onChange</code>事件，调用store中的<code>singleCheck</code>方法。</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/* 单选受控 */</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/* 通过Mobx中的store去维护状态，input只需要把event.target.checked交给store让它进行修改 */</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span>input id<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>todoObj<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"checkbox\"</span> className<span class=\"token operator\">=</span><span class=\"token string\">'toggle'</span>\n\tchecked<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>todoObj<span class=\"token punctuation\">.</span>isDone<span class=\"token punctuation\">}</span>\n\tonChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token parameter\">event</span> <span class=\"token operator\">=&gt;</span> taskStore<span class=\"token punctuation\">.</span><span class=\"token function\">singleCheck</span><span class=\"token punctuation\">(</span>todoObj<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>checked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<h2><a id=\"3_164\"></a>3.全选功能实现</h2>\n<blockquote>\n<p><em>思想：除了在store中需要定义全选方法，还需要通过Mobx的计算属性定义一个是否所有项都被选中与否的方法，如果所有项都被选中，那么点击全选按钮可以变为全不选；如果不是所有项都被选中，那么点击全选按钮变为全选。</em></p>\n</blockquote>\n<ol><li>给<code>task.Store.js</code>添加一个全选/全不选方法。</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 全选操作</span>\n<span class=\"token function\">allCheck</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">checked</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 把所有项的isDone属性，都按照传入的最新的值修改</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    item<span class=\"token punctuation\">.</span>isDone <span class=\"token operator\">=</span> checked\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"2\"><li>给<code>task.Store.js</code>定义计算属性<code>isAllDone</code>，当所有的项都被选中时，这个属性为true；否则为false。</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 计算属性 只有所有子项都是选中的时候，才是选中的状态</span>\n<span class=\"token keyword\">get</span> <span class=\"token function\">isAllDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> item<span class=\"token punctuation\">.</span>isDone<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token operator\">-</span> <span class=\"token function\">makeAutoObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">+</span> <span class=\"token function\">makeAutoObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">isAllDone</span><span class=\"token operator\">:</span> computed\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"3\"><li>在<code>/src/Todo/Task.jsx</code>组件中，点击全选框，进行全选与全不选之间的改动</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">/* 全选 */</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"checkbox\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">'toggle-all'</span> className<span class=\"token operator\">=</span><span class=\"token string\">'toggle-all'</span>\n\tchecked<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>taskStore<span class=\"token punctuation\">.</span>isAllDone<span class=\"token punctuation\">}</span>\n\tonChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> taskStore<span class=\"token punctuation\">.</span><span class=\"token function\">allCheck</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>taskStore<span class=\"token punctuation\">.</span>isAllDone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<h2><a id=\"4_205\"></a>4.删除功能实现</h2>\n<blockquote>\n<p><em>思想：在store中定义删除方法，使用filter数组方法，删除对应id的那一组数据</em></p>\n</blockquote>\n<ol><li>给<code>task.Store.js</code>添加删除的方法</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 删除操作</span>\n<span class=\"token function\">delTask</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"2\"><li>在<code>/src/Todo/Task.jsx</code>组件中点击删除按钮，删除对应那一行的todo。</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"destroy\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> taskStore<span class=\"token punctuation\">.</span><span class=\"token function\">delTask</span><span class=\"token punctuation\">(</span>todoObj<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h2><a id=\"5_224\"></a>5.回车新增功能实现</h2>\n<blockquote>\n<p><em>思想：在组件中使用useState-hook，用于临时存放一下新增输入框的value内容。之后，在按下<code>Enter</code>之后，调用store中定义的新增方法，实现新增功能。</em></p>\n</blockquote>\n<ol><li>给<code>task.Store.js</code>添加新增的方法</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 新增操作</span>\n<span class=\"token function\">insertTask</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"2\"><li>在组件中，使用<code>useState</code>临时存放输入框的value值。</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 存放新增的todo</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>taskValue<span class=\"token punctuation\">,</span> setTaskValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 新增输入框</span>\n<span class=\"token operator\">&lt;</span>input className<span class=\"token operator\">=</span><span class=\"token string\">'new-todo'</span> autoFocus autoComplete<span class=\"token operator\">=</span><span class=\"token string\">'off'</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">'What needs to be done?'</span>\n  value<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>taskValue<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token parameter\">event</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setTaskValue</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>其实也就是受控组件一样的写法，把输入框与taskValue这个临时state绑定。</p>\n<ol start=\"3\"><li>按下<code>Enter</code>实现新增。</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 为input添加属性</span>\nonKeyUp<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token parameter\">event</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">addTask</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 定义addTask方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addTask</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">!==</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskValue<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入不能为空！'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    taskStore<span class=\"token punctuation\">.</span><span class=\"token function\">insertTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token function\">nanoid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 使用第三方库nanoid自动生成随机的id值</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> taskValue<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">isDone</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setTaskValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"6_270\"></a>6.统计计数功能实现</h2>\n<blockquote>\n<p>任务总数很简单，其实就是list数组的长度。</p>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>taskStore<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<p>已完成的数量需要借助<code>Mobx</code>中的计算属性来完成具体代码如下：</p>\n<ol><li>在<code>task.Store.js</code>中定义计算属性<code>isFinishedLength</code></li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 已完成的数量</span>\n<span class=\"token keyword\">get</span> <span class=\"token function\">isFinishedLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> item<span class=\"token punctuation\">.</span>isDone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">makeAutoObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">isAllDone</span><span class=\"token operator\">:</span> computed<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">+</span> isFinishedLength<span class=\"token operator\">:</span> computed\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"2\"><li>渲染</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token punctuation\">{<!-- --></span>taskStore<span class=\"token punctuation\">.</span>isFinishedLength<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"7Mobx__React__301\"></a>7.Mobx - React 职责划分</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\63efb267495c4981ab6ce29f5f08e614.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}