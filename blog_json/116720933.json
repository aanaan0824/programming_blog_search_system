{"blogid": "116720933", "writerAge": "码龄2年", "writerBlogNum": "65", "writerCollect": "82", "writerComment": "7", "writerFan": "22", "writerGrade": "3级", "writerIntegral": "655", "writerName": "rainboots", "writerProfileAdress": "writer_image\\profile_116720933.jpg", "writerRankTotal": "94150", "writerRankWeekly": "86886", "writerThumb": "11", "writerVisitNum": "26758", "blog_read_count": "4763", "blog_time": "于 2021-08-19 23:47:18 发布", "blog_title": "C++中string详解与用法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2>string详解</h2>\n<p>string不是基本数据类型，是C++中对char封装成的类，所以C语言中没有string。</p>\n<p>String类是不可变的，对String类的任何改变，都是返回一个新的String类对象。</p>\n<p>头文件：  #include&lt;string&gt;</p>\n<h3>构造函数</h3>\n<pre><code>string s1();   //s1为空\nstring s2(\"hello\");\nstring s3(4,'w');    //s3=\"wwww\";\nstring s4(\"12345\",1,3);   //s4=\"234\";\n\n//不能直接string s('w');</code></pre>\n<h3>string初始化</h3>\n<pre><code>//拷贝赋值\nstring s1;\ns1 = \"Hello\";  // s1 = \"Hello\"\ns2 = 'K';  // s2 = \"K”\n\n\n//利用assign函数\nstring s1(\"12345\"), s2;\ns3.assign(s1);  // s3 = s1\ns2.assign(s1, 1, 2);  // s2 = \"23\"，即 s1 的子串(1, 2)\ns2.assign(4, 'K');  // s2 = \"KKKK\"\ns2.assign(\"abcde\", 2, 3);  // s2 = \"cde\"，即 \"abcde\" 的子串(2, 3)\n\n//利用+\nstring s;\ns+=a[i];\n\n//利用substr函数\nstring s1,s2;\ns1=\"hello\";\ns2=s1.substr(0,3);   //s2=\"hel\";</code></pre>\n<hr/>\n<h2>string 函数用法</h2>\n<h3>append（）函数</h3>\n<p>除了可以使用<code>+</code>和<code>+=</code>运算符对 string 对象执行字符串的连接操作外，string 类还有 append 成员函数，可以用来向字符串后面添加内容。append 成员函数返回对象自身的引用。</p>\n<pre><code>string s1(\"123\"), s2(\"abc\");  //以下操作为平行操作\ns1.append(s2);  // s1 = \"123abc\"\ns1.append(s2, 1, 2);  // s1 = \"123bc\"\ns1.append(3, 'K');  // s1 = \"123KKK\"\ns1.append(\"ABCDE\", 2, 3);  // s1 = \"123CDE\"，添加 \"ABCDE\" 的子串(2, 3)</code></pre>\n<h3>compare()函数</h3>\n<p> 用于比较字符串。compare 成员函数有以下返回值：</p>\n<ul><li>-1 表示当前的字符串小；</li><li> 0 表示两个字符串相等；</li><li>1 表示另一个字符串小。</li></ul>\n<p><span style=\"color:#fe2c24;\"><strong>compare()比较时逐字符比较的，一旦能比较出结果，就不再比较了。</strong></span></p>\n<pre><code>    string s1=\"abandon\";\n    string s2=\"about\";\n    int b=s1.compare(s2);//直接比较，s1小于s2，故返回-1\n    cout&lt;&lt;b&lt;&lt;endl;\n\n    int c=s1.compare(2,4,s2);//s1下标为2的字符a开始的4个字符ando和s2进行比较。ando大于s2故返回1\n    cout&lt;&lt;c&lt;&lt;endl;\n\n    int d=s1.compare(2,4,s2,1,3);\n    cout&lt;&lt;d&lt;&lt;endl;//s1下标为2的字符a开始的4个字符ando和s2下标为1的字符b开始的3个字符bou比较。前者小，故返回-1。\n\n    string s3=\"abc\";\n    string s4=\"abc\";\n    int e=s3.compare(s4);//相等返回0\n    cout&lt;&lt;e&lt;&lt;endl;\n</code></pre>\n<h3>swap()交换string对象的内容</h3>\n<pre><code>string s1(\"hello\");\nstring s2(\"hi\");\ns1.swap(s2);</code></pre>\n<h3>find()函数 返回子串的下标位置</h3>\n<pre><code>/*\nstring的find()函数用于找出字母在字符串中的位置。\n\nfind(str,position)\n\nfind()的两个参数：\n\nstr：是要找的元素\n\nposition：字符串中的某个位置，表示从从这个位置开始的字符串中找指定元素。\n\n可以不填第二个参数，默认从字符串的开头进行查找。\n\n返回值为目标字符的位置，当没有找到目标字符时返回npos。\n*/\n\nstring s = \"hello world!\";\ncout &lt;&lt; s.find(\"e\") &lt;&lt; endl;   // 1\n\nstring s = \"hello world!\";\nif (s.find(\"a\") == s.npos) {\n    cout &lt;&lt; \"404 not found\" &lt;&lt; endl;\n}\n\nstring s = \"hello world!\";\ncout &lt;&lt; s.find(\"l\",5) &lt;&lt; endl;   //9\n\n//找到目标字符在字符串中第一次出现和最后一次出现的位置 \nstring s = \"hello world!\";\ncout &lt;&lt; \"first time occur in s:\"&lt;&lt;s.find_first_of(\"l\") &lt;&lt; endl;    // 2\ncout &lt;&lt; \"last time occur in s:\" &lt;&lt; s.find_last_of(\"l\") &lt;&lt; endl;    // 9\n\n//反向查找\nstring s = \"hello world!\";\ncout &lt;&lt; s.rfind(\"l\") &lt;&lt; endl;</code></pre>\n<h3>C++string中的insert()函数用法详解</h3>\n<p><strong>C++string中的insert()插入函数</strong><br/> basic_string&amp; insert (size_type pos, const basic_string&amp; str);<br/><strong><span style=\"color:#3399ea;\">在原串下标为pos的字符前插入字符串str</span></strong></p>\n<p>basic_string&amp; insert (size_type pos, const basic_string&amp; str, size_type pos1, size_type n);<br/><span style=\"color:#3399ea;\"><strong>str从下标为pos1开始数的n个字符插在原串下标为pos的字符前</strong></span></p>\n<p>basic_string&amp; insert (size_type pos, size_type n, char c);<br/><span style=\"color:#3399ea;\"><strong>在原串下标为pos的字符前插入n个字符c</strong></span></p>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    string str=\"hello\";\n    string s=\"Hahah\";\n    str.insert(1,s);//在原串下标为1的字符e前插入字符串s\n    cout&lt;&lt;str&lt;&lt;endl;        // \"Hhelloahah\"\n\n    string str1=\"hello\";\n    char c='w';\n    str1.insert(4,5,c);//在原串下标为4的字符o前插入5个字符c\n    cout&lt;&lt;str1&lt;&lt;endl;            //  helloccccco\n\n    string str2=\"hello\";\n    string s2=\"weakhaha\";\n    str2.insert(0,s2,1,3);//将字符串s2从下标为1的e开始数3个字符，分别是eak，插入原串的下标为0的字符h前\n    cout&lt;&lt;str2&lt;&lt;endl;            // eakhello\n\n    return 0;\n}\n</code></pre>\n<h3>substr()用法</h3>\n<p><span style=\"background-color:#a2e043;\">substr(pos,n)   </span>            </p>\n<p>返回一个string，包含从pos开始的n个字符的拷贝</p>\n<p>pos默认值是0，n的默认值是size（）-pos，即不加参数会默认拷贝整个string</p>\n<p>若pos的值超过string的大小，则substr函数会抛出一个out_of_range异常</p>\n<p>若pos+n的值超过了string的大小，则substr会调整n的值，只拷贝到string的末尾</p>\n<pre><code class=\"language-cpp\">#include&lt;string&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\n　　string s(\"12345asdf\");\n　　string a = s.substr(0,5);     //获得字符串s中从第0位开始的长度为5的字符串\n　　cout &lt;&lt; a &lt;&lt; endl;\n}\n\n//a为 12345</code></pre>\n<p><strong>一个经典用法</strong></p>\n<pre><code>（s+s).substr(n,s.size());\n\n/*  string s=\"abcdefg\";\n    将前n个字符移动到尾部\n    例如 移动前2个字符\n    ss=\"cdefgab\";\n*/</code></pre>\n<h3>replace() 函数 对string对象中的子串进行替换，返回值为对象自身的引用</h3>\n<pre><code>//用str替换指定字符串从起始位置pos开始长度为len的字符 \nstring&amp; replace (size_t pos, size_t len, const string&amp; str); \nstring s=\"12345\";\ns=s.replace(2,3,\"aa\");   //s=\"12aa\";\n\n\n\n//用str替换 迭代器起始位置 和 结束位置 的字符 \nstring&amp; replace (const_iterator i1, const_iterator i2, const string&amp; str);\n\nstring s=\"12345\";\ns=s.replace(s.begin(),s.begin()+3,\"aaa\");  //s=\"aaa45\";\n\nstring s1(\"Real Steel\");\ns1.replace(1, 3, \"123456\", 2, 4);  //用 \"123456\" 的子串(2,4) 替换 s1 的子串(1,3)\ncout &lt;&lt; s1 &lt;&lt; endl;  //输出 R3456 Steel\n\nstring s2(\"Harry Potter\");\ns2.replace(2, 3, 5, '0');  //用 5 个 '0' 替换子串(2,3)\ncout &lt;&lt; s2 &lt;&lt; endl;  //输出 HaOOOOO Potter\n\nint n = s2.find(\"OOOOO\");  //查找子串 \"00000\" 的位置，n=2\ns2.replace(n, 5, \"XXX\");  //将子串(n,5)替换为\"XXX\"\ncout &lt;&lt; s2 &lt; &lt; endl;  //输出 HaXXX Potter</code></pre>\n<h3>to_string()函数 把数值类型如int、double、long等转化为string</h3>\n<pre><code>int a = 4;\ndouble b = 3.14;\nstring str1, str2;\nstr1 = to_string(a);\nstr2 = to_string(b);\ncout &lt;&lt; str1 &lt;&lt; endl;\ncout &lt;&lt; str2 &lt;&lt; endl;</code></pre>\n<h3>stoi() 和atoi() 函数将字符串转化为int型</h3>\n<p><strong>区别是stoi的形参是const string*，而atoi的形参是const char*。c_str()的作用是将const string*转化为const char*</strong></p>\n<pre><code>string s1(\"1234567\");\nchar* s2 = \"1234567\";\n\nint a = stoi(s1);\nint b = atoi(s2);\nint c = atoi(s1.c_str());\ncout &lt;&lt; a &lt;&lt; endl;\ncout &lt;&lt; b &lt;&lt; endl;\ncout &lt;&lt; c &lt;&lt; endl;</code></pre>\n<h3>reverse（）函数 翻转字符串</h3>\n<pre><code>string s=\"12345\";\nreverse(str.begin(),str.end());\n\nreverse(str.begin(),str.begin()+3);</code></pre>\n<p>assign()函数 常用于赋值</p>\n<pre><code>/*\nC++ string assign()赋值常用方法\n\n函数assign()常用在给string类变量赋值.\n\n常用方法有:\n*/\nstring str1=\"hello\";\n\n//1,直接用另一个字符串赋值.\n\n str2.assign(str1);    //即用str1给str2赋值.  \"hello\"\n\n//2,用另一个字符串的一个子串赋值\n \nstr3.assign(str1, 2, 3);         //\"ll0\"\n\n//3,用一个字符串的前一段子串赋值;\n\nstr4.assign(\"World\", 5);     //\"Worl\"\n\n//4,用几个相同的字符,赋值.\n\nstr5.assign(10, 'c');          //\"cccccccccc\"</code></pre>\n<p></p>\n</div>\n</div>"}