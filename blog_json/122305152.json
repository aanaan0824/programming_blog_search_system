{"blogid": "122305152", "writerAge": "码龄2年", "writerBlogNum": "15", "writerCollect": "473", "writerComment": "85", "writerFan": "441", "writerGrade": "2级", "writerIntegral": "367", "writerName": "虚梦年华", "writerProfileAdress": "writer_image\\profile_122305152.jpg", "writerRankTotal": "70796", "writerRankWeekly": "486947", "writerThumb": "161", "writerVisitNum": "62086", "blog_read_count": "7603", "blog_time": "已于 2022-02-25 10:13:33 修改", "blog_title": "C#实现ModbusRTU详解【五】—— NModbus4的使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h3>前言</h3>\n<p>通过前面的四篇文章，我们已经了解到了ModbusRTU具体是什么，以及如何生成正确的报文，也完成了一个完整实现ModbusRTU的Demo。</p>\n<p>前面我们的实现方式，是从零开始一点点自己写，所以我们需要完整实现整个串口通讯以及报文的生成与收发。在实际使用的时候，我们其实不需要写那么多东西，GitHub上其实有很多现成的类库，可以直接导入使用，无需自己生成通讯报文。</p>\n<p>由于本专栏并非仅仅介绍实际应用，所以前面花费了不少篇幅来讲解ModbusRTU的报文。如果能完全理解前面四篇文章的内容，那么当我们遇到需要使用常用的八种功能码以外的报文的情况的时候，我们也能举一反三地写出对应的程序，而不必依赖他人的类库。</p>\n<p>在实际应用的开发过程中，如果充当主站的应用程序与子站直接的物理连接，并非完全是RS485等的串行通讯连接方式，而是中间使用了串口服务器将串行信号转换为以太网信号，那么则需要我们使用Socket通讯的方式将报文发送出去，所以就不能使用NModbus4这样的类库了。在这种情况下，虽然串行信号被转换成了以太网的信号，但是我们需要收发的报文格式是不变的，所以这时，我们只需要用我们前面写好的报文生成和解析的方法，结合Socket通讯，实现数据的请求与解析。</p>\n<p>传送门：</p>\n<p><a href=\"https://blog.csdn.net/XUMENGCAS/article/details/122062266\" title=\"C#实现ModbusRTU详解【一】—— 简介及仿真配置\">C#实现ModbusRTU详解【一】—— 简介及仿真配置</a></p>\n<p><a href=\"https://blog.csdn.net/XUMENGCAS/article/details/122077200\" title=\"C#实现ModbusRTU详解【二】—— 生成读取报文\">C#实现ModbusRTU详解【二】—— 生成读取报文</a></p>\n<p><a href=\"https://blog.csdn.net/XUMENGCAS/article/details/122185571\" title=\"C#实现ModbusRTU详解【三】—— 生成写入报文\">C#实现ModbusRTU详解【三】—— 生成写入报文</a></p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/XUMENGCAS/article/details/122235567\" title=\"C#实现ModbusRTU详解【四】—— 通讯Demo\">C#实现ModbusRTU详解【四】—— 通讯Demo</a></p>\n<hr/>\n<h3>引入类库</h3>\n<p>以下以Winform为例。创建一个Winform项目，然后在NuGet中安装NModbus4，如下图所示：</p>\n<p><img alt=\"\" height=\"300\" src=\"image\\caeb97595e934ffa970203cf768c30b1.png\" width=\"605\"/></p>\n<hr/>\n<h3>窗体界面</h3>\n<p>根据自己喜好创建布局，参考如下：</p>\n<p><img alt=\"\" height=\"437\" src=\"image\\1f66a88bd6094c63abb91d04b21b0adf.png\" width=\"830\"/></p>\n<hr/>\n<h3>读写方法</h3>\n<p>首先我们需要引入NModbusRTU。</p>\n<pre><code class=\"language-cs\">using Modbus.Device;</code></pre>\n<p>创建一个串口对象，还有一个ModbusRTU的实例对象。</p>\n<pre><code class=\"language-cs\">/// &lt;summary&gt;\n/// 私有串口实例\n/// &lt;/summary&gt;\nprivate SerialPort serialPort = new SerialPort();\n\n/// &lt;summary&gt;\n/// 私有ModbusRTU主站字段\n/// &lt;/summary&gt;\nprivate static IModbusMaster master;</code></pre>\n<p> 根据八种不同的功能，创建读写方法。</p>\n<pre><code class=\"language-cs\">/// &lt;summary&gt;\n/// 写入单个线圈\n/// &lt;/summary&gt;\nprivate void WriteSingleCoil()\n{\n    bool result = false;\n    if (rbxRWMsg.Text.Equals(\"true\", StringComparison.OrdinalIgnoreCase) || rbxRWMsg.Text.Equals(\"1\", StringComparison.OrdinalIgnoreCase))\n    {\n        result = true;\n    }\n    master.WriteSingleCoil((byte)nudSlaveID.Value, (ushort)nudStartAdr.Value, result);\n}\n\n/// &lt;summary&gt;\n/// 批量写入线圈\n/// &lt;/summary&gt;\nprivate void WriteArrayCoil()\n{\n    List&lt;string&gt; strList = rbxRWMsg.Text.Split(',').ToList();\n\n    List&lt;bool&gt; result = new List&lt;bool&gt;();\n\n    strList.ForEach(m =&gt; result.Add(m.Equals(\"true\", StringComparison.OrdinalIgnoreCase) || m.Equals(\"1\", StringComparison.OrdinalIgnoreCase)));\n\n    master.WriteMultipleCoils((byte)nudSlaveID.Value, (ushort)nudStartAdr.Value, result.ToArray());\n}\n\n/// &lt;summary&gt;\n/// 写入单个寄存器\n/// &lt;/summary&gt;\nprivate void WriteSingleRegister()\n{\n    ushort result = Convert.ToUInt16(rbxRWMsg.Text);\n\n    master.WriteSingleRegister((byte)nudSlaveID.Value, (ushort)nudStartAdr.Value, result);\n}\n\n/// &lt;summary&gt;\n/// 批量写入寄存器\n/// &lt;/summary&gt;\nprivate void WriteArrayRegister()\n{\n    List&lt;string&gt; strList = rbxRWMsg.Text.Split(',').ToList();\n\n    List&lt;ushort&gt; result = new List&lt;ushort&gt;();\n\n    strList.ForEach(m =&gt; result.Add(Convert.ToUInt16(m)));\n\n    master.WriteMultipleRegisters((byte)nudSlaveID.Value, (ushort)nudStartAdr.Value, result.ToArray());\n}\n\n/// &lt;summary&gt;\n/// 读取输出线圈\n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nprivate bool[] ReadCoils()\n{\n    return master.ReadCoils((byte)nudSlaveID.Value, (ushort)nudStartAdr.Value, (ushort)nudLength.Value);\n}\n\n/// &lt;summary&gt;\n/// 读取输入线圈\n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nprivate bool[] ReadInputs()\n{\n    return master.ReadInputs((byte)nudSlaveID.Value, (ushort)nudStartAdr.Value, (ushort)nudLength.Value);\n}\n\n/// &lt;summary&gt;\n/// 读取保持型寄存器\n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nprivate ushort[] ReadHoldingRegisters()\n{\n    return master.ReadHoldingRegisters((byte)nudSlaveID.Value, (ushort)nudStartAdr.Value, (ushort)nudLength.Value);\n}\n\n/// &lt;summary&gt;\n/// 读取输入寄存器\n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nprivate ushort[] ReadInputRegisters()\n{\n    return master.ReadInputRegisters((byte)nudSlaveID.Value, (ushort)nudStartAdr.Value, (ushort)nudLength.Value);\n}</code></pre>\n<p>创建显示读取数据到窗体的方法。</p>\n<pre><code class=\"language-cs\">/// &lt;summary&gt;\n/// 界面显示读取结果\n/// &lt;/summary&gt;\n/// &lt;typeparam name=\"T\"&gt;&lt;/typeparam&gt;\n/// &lt;param name=\"result\"&gt;&lt;/param&gt;\nprivate void SetMsg&lt;T&gt;(List&lt;T&gt; result)\n{\n    string msg = string.Empty;\n\n    result.ForEach(m =&gt; msg += $\"{m} \");\n\n    rbxRWMsg.Text = msg.Trim();\n}</code></pre>\n<p> 在按钮事件中调用读写方法。</p>\n<pre><code class=\"language-cs\">/// &lt;summary&gt;\n/// 读写事件\n/// &lt;/summary&gt;\n/// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n/// &lt;param name=\"e\"&gt;&lt;/param&gt;\nprivate void btnRW_Click(object sender, EventArgs e)\n{\n    //设定串口参数\n    serialPort.PortName = cbxPort.SelectedItem.ToString();\n    serialPort.BaudRate = (int)cbxBaudRate.SelectedItem;\n    serialPort.Parity = GetSelectedParity();\n    serialPort.DataBits = (int)cbxDataBits.SelectedItem;\n    serialPort.StopBits = GetSelectedStopBits();\n\n    //创建ModbusRTU主站实例\n    master = ModbusSerialMaster.CreateRtu(serialPort);\n\n    //打开串口\n    if (!serialPort.IsOpen) serialPort.Open();\n\n    //根据选择的模式进行读写\n    switch (cbxMode.SelectedItem.ToString())\n    {\n        case \"读取输出线圈\":\n            SetMsg(ReadCoils().ToList());\n            break;\n        case \"读取离散输入\":\n            SetMsg(ReadInputs().ToList());\n            break;\n        case \"读取保持型寄存器\":\n            SetMsg(ReadHoldingRegisters().ToList());\n            break;\n        case \"读取输入寄存器\":\n            SetMsg(ReadInputRegisters().ToList());\n            break;\n        case \"写入单个线圈\":\n            if (rbxRWMsg.Text.Contains(\",\"))\n            {\n                MessageBox.Show(\"输入值过多\");\n                return;\n            }\n            WriteSingleCoil();\n            break;\n        case \"写入多个线圈\":\n            WriteArrayCoil();\n            break;\n        case \"写入单个寄存器\":\n            if (rbxRWMsg.Text.Contains(\",\"))\n            {\n                MessageBox.Show(\"输入值过多\");\n                return;\n            }\n            WriteSingleRegister();\n            break;\n        case \"写入多个寄存器\":\n            WriteArrayRegister();\n            break;\n        default:\n            break;\n    }\n\n    //关闭串口\n    serialPort.Close();\n}</code></pre>\n<hr/>\n<h3>读写测试</h3>\n<p>读取输出线圈</p>\n<p><img alt=\"\" height=\"357\" src=\"image\\9b284413e0cc418fa6ab273caf8ef787.png\" width=\"1050\"/></p>\n<p><a name=\"t15\"></a>读取输入线圈</p>\n<p></p>\n<p><img alt=\"\" height=\"340\" src=\"image\\8a1bd7919d234f349144ae946bd5fc23.png\" width=\"1056\"/></p>\n<p><a name=\"t16\"></a>读取保持型寄存器</p>\n<p><img alt=\"\" height=\"338\" src=\"image\\b81cf686c4f84ab2aa8c8f6ad7d8d508.png\" width=\"1053\"/></p>\n<p></p>\n<p><a name=\"t17\"></a>读取输入寄存器</p>\n<p><img alt=\"\" height=\"353\" src=\"image\\43f13e1f8a384389a3b6e243a1558fdc.png\" width=\"1056\"/></p>\n<p></p>\n<p><a name=\"t18\"></a>写入单个线圈</p>\n<p><img alt=\"\" height=\"350\" src=\"image\\4113e960a0b548f9bf9d9476329c081b.png\" width=\"1051\"/></p>\n<p></p>\n<p><a name=\"t19\"></a>写入多个线圈</p>\n<p><img alt=\"\" height=\"346\" src=\"image\\5a88ad071e6e45a3ae901287a0e5e999.png\" width=\"1056\"/></p>\n<p></p>\n<p><a name=\"t20\"></a>写入单个寄存器</p>\n<p><img alt=\"\" height=\"352\" src=\"image\\efb0ed7b7cfb45998a7f45dcbd20f36e.png\" width=\"1051\"/></p>\n<p></p>\n<p><a name=\"t21\"></a>写入多个寄存器</p>\n<p><img alt=\"\" height=\"343\" src=\"image\\c06eecae40904e78b8121592ce67aacf.png\" width=\"1057\"/></p>\n<hr/>\n<h3>完整代码</h3>\n<pre><code class=\"language-cs\">using Modbus.Device;\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.IO.Ports;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace NModbusDemo\n{\n    public partial class DemoForm : Form\n    {\n        /// &lt;summary&gt;\n        /// 私有串口实例\n        /// &lt;/summary&gt;\n        private SerialPort serialPort = new SerialPort();\n\n        /// &lt;summary&gt;\n        /// 私有ModbusRTU主站字段\n        /// &lt;/summary&gt;\n        private static IModbusMaster master;\n\n        /// &lt;summary&gt;\n        /// 构造函数\n        /// &lt;/summary&gt;\n        public DemoForm()\n        {\n            InitializeComponent();            \n        }\n\n        /// &lt;summary&gt;\n        /// 窗体加载事件\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n        private void DemoForm_Load(object sender, EventArgs e)\n        {\n            //设置可选串口\n            cbxPort.Items.AddRange(SerialPort.GetPortNames());\n            //设置可选波特率\n            cbxBaudRate.Items.AddRange(new object[] { 9600, 19200 });\n            //设置可选奇偶校验\n            cbxParity.Items.AddRange(new object[] { \"None\", \"Odd\", \"Even\", \"Mark\", \"Space\" });\n            //设置可选数据位\n            cbxDataBits.Items.AddRange(new object[] { 5, 6, 7, 8 });\n            //设置可选停止位\n            cbxStopBits.Items.AddRange(new object[] { 1, 1.5, 2 });\n            //设置读写模式\n            cbxMode.Items.AddRange(new object[] {\n                \"读取输出线圈\",\n                \"读取离散输入\",\n                \"读取保持型寄存器\",\n                \"读取输入寄存器\",\n                \"写入单个线圈\",\n                \"写入多个线圈\",\n                \"写入单个寄存器\",\n                \"写入多个寄存器\"\n            });\n\n            //设置默认选中项\n            cbxPort.SelectedIndex = 1;\n            cbxBaudRate.SelectedIndex = 0;\n            cbxParity.SelectedIndex = 0;\n            cbxDataBits.SelectedIndex = 3;\n            cbxStopBits.SelectedIndex = 0;\n            cbxMode.SelectedIndex = 0;\n\n            nudLength.Minimum = 1;\n            nudSlaveID.Minimum = 1;\n            nudStartAdr.Minimum = 0;\n\n            //设置为默认输入法，即为英文半角\n            rbxRWMsg.ImeMode = ImeMode.Disable;            \n        }\n\n        /// &lt;summary&gt;\n        /// 模式切换事件\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n        private void cbxMode_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            rbxRWMsg.Clear();\n            if (cbxMode.SelectedItem.ToString().Contains(\"读取\"))\n            {\n                btnRW.Text = \"读取\";\n                rbxRWMsg.Enabled = false;\n                nudLength.Enabled = true;\n            }\n            else\n            {\n                btnRW.Text = \"写入\";\n                rbxRWMsg.Enabled = true;\n                nudLength.Enabled = false;\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 读写事件\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n        private void btnRW_Click(object sender, EventArgs e)\n        {\n            //设定串口参数\n            serialPort.PortName = cbxPort.SelectedItem.ToString();\n            serialPort.BaudRate = (int)cbxBaudRate.SelectedItem;\n            serialPort.Parity = GetSelectedParity();\n            serialPort.DataBits = (int)cbxDataBits.SelectedItem;\n            serialPort.StopBits = GetSelectedStopBits();\n\n            //创建ModbusRTU主站实例\n            master = ModbusSerialMaster.CreateRtu(serialPort);\n\n            //打开串口\n            if (!serialPort.IsOpen) serialPort.Open();\n            \n            //根据选择的模式进行读写\n            switch (cbxMode.SelectedItem.ToString())\n            {\n                case \"读取输出线圈\":\n                    SetMsg(ReadCoils().ToList());\n                    break;\n                case \"读取离散输入\":\n                    SetMsg(ReadInputs().ToList());\n                    break;\n                case \"读取保持型寄存器\":\n                    SetMsg(ReadHoldingRegisters().ToList());\n                    break;\n                case \"读取输入寄存器\":\n                    SetMsg(ReadInputRegisters().ToList());\n                    break;\n                case \"写入单个线圈\":\n                    if (rbxRWMsg.Text.Contains(\",\"))\n                    {\n                        MessageBox.Show(\"输入值过多\");\n                        serialPort.Close();\n                        return;\n                    }\n                    WriteSingleCoil();\n                    break;\n                case \"写入多个线圈\":\n                    WriteArrayCoil();\n                    break;\n                case \"写入单个寄存器\":\n                    if (rbxRWMsg.Text.Contains(\",\"))\n                    {\n                        MessageBox.Show(\"输入值过多\");\n                        serialPort.Close();\n                        return;\n                    }\n                    WriteSingleRegister();\n                    break;\n                case \"写入多个寄存器\":\n                    WriteArrayRegister();\n                    break;\n                default:\n                    break;\n            }\n\n            //关闭串口\n            serialPort.Close();\n        }\n\n        /// &lt;summary&gt;\n        /// 更新写入值计数\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n        private void rbxRWMsg_TextChanged(object sender, EventArgs e)\n        {\n            nudLength.Value = Regex.Matches(rbxRWMsg.Text, \",\").Count + 1;\n        }\n\n        /// &lt;summary&gt;\n        /// 获取窗体选中的奇偶校验\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private Parity GetSelectedParity()\n        {\n            switch (cbxParity.SelectedItem.ToString())\n            {\n                case \"Odd\":\n                    return Parity.Odd;\n                case \"Even\":\n                    return Parity.Even;\n                case \"Mark\":\n                    return Parity.Mark;\n                case \"Space\":\n                    return Parity.Space;\n                case \"None\":\n                default:\n                    return Parity.None;\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 获取窗体选中的停止位\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private StopBits GetSelectedStopBits()\n        {\n            switch (Convert.ToDouble(cbxStopBits.SelectedItem))\n            {\n                case 1:\n                    return StopBits.One;\n                case 1.5:\n                    return StopBits.OnePointFive;\n                case 2:\n                    return StopBits.Two;\n                default:\n                    return StopBits.One;\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 写入单个线圈\n        /// &lt;/summary&gt;\n        private void WriteSingleCoil()\n        {\n            bool result = false;\n            if (rbxRWMsg.Text.Equals(\"true\", StringComparison.OrdinalIgnoreCase) || rbxRWMsg.Text.Equals(\"1\", StringComparison.OrdinalIgnoreCase))\n            {\n                result = true;\n            }\n            master.WriteSingleCoil((byte)nudSlaveID.Value, (ushort)nudStartAdr.Value, result);\n        }\n\n        /// &lt;summary&gt;\n        /// 批量写入线圈\n        /// &lt;/summary&gt;\n        private void WriteArrayCoil()\n        {\n            List&lt;string&gt; strList = rbxRWMsg.Text.Split(',').ToList();\n\n            List&lt;bool&gt; result = new List&lt;bool&gt;();\n\n            strList.ForEach(m =&gt; result.Add(m.Equals(\"true\", StringComparison.OrdinalIgnoreCase) || m.Equals(\"1\", StringComparison.OrdinalIgnoreCase)));\n\n            master.WriteMultipleCoils((byte)nudSlaveID.Value, (ushort)nudStartAdr.Value, result.ToArray());\n        }\n\n        /// &lt;summary&gt;\n        /// 写入单个寄存器\n        /// &lt;/summary&gt;\n        private void WriteSingleRegister()\n        {\n            ushort result = Convert.ToUInt16(rbxRWMsg.Text);\n\n            master.WriteSingleRegister((byte)nudSlaveID.Value, (ushort)nudStartAdr.Value, result);\n        }\n\n        /// &lt;summary&gt;\n        /// 批量写入寄存器\n        /// &lt;/summary&gt;\n        private void WriteArrayRegister()\n        {\n            List&lt;string&gt; strList = rbxRWMsg.Text.Split(',').ToList();\n\n            List&lt;ushort&gt; result = new List&lt;ushort&gt;();\n\n            strList.ForEach(m =&gt; result.Add(Convert.ToUInt16(m)));\n\n            master.WriteMultipleRegisters((byte)nudSlaveID.Value, (ushort)nudStartAdr.Value, result.ToArray());\n        }\n\n        /// &lt;summary&gt;\n        /// 读取输出线圈\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private bool[] ReadCoils()\n        {\n            return master.ReadCoils((byte)nudSlaveID.Value, (ushort)nudStartAdr.Value, (ushort)nudLength.Value);\n        }\n\n        /// &lt;summary&gt;\n        /// 读取输入线圈\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private bool[] ReadInputs()\n        {\n            return master.ReadInputs((byte)nudSlaveID.Value, (ushort)nudStartAdr.Value, (ushort)nudLength.Value);\n        }\n\n        /// &lt;summary&gt;\n        /// 读取保持型寄存器\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private ushort[] ReadHoldingRegisters()\n        {\n            return master.ReadHoldingRegisters((byte)nudSlaveID.Value, (ushort)nudStartAdr.Value, (ushort)nudLength.Value);\n        }\n\n        /// &lt;summary&gt;\n        /// 读取输入寄存器\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private ushort[] ReadInputRegisters()\n        {\n            return master.ReadInputRegisters((byte)nudSlaveID.Value, (ushort)nudStartAdr.Value, (ushort)nudLength.Value);\n        }\n\n        /// &lt;summary&gt;\n        /// 界面显示读取结果\n        /// &lt;/summary&gt;\n        /// &lt;typeparam name=\"T\"&gt;&lt;/typeparam&gt;\n        /// &lt;param name=\"result\"&gt;&lt;/param&gt;\n        private void SetMsg&lt;T&gt;(List&lt;T&gt; result)\n        {\n            string msg = string.Empty;\n\n            result.ForEach(m =&gt; msg += $\"{m} \");\n\n            rbxRWMsg.Text = msg.Trim();\n        }\n    }\n}</code></pre>\n<hr/>\n<h3>结尾</h3>\n<p>至此，本专栏需要介绍的所有东西都已经介绍完毕了。</p>\n</div>\n</div>"}