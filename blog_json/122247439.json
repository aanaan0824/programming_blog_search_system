{"blogid": "122247439", "writerAge": "码龄3年", "writerBlogNum": "166", "writerCollect": "1789", "writerComment": "232", "writerFan": "158", "writerGrade": "5级", "writerIntegral": "2985", "writerName": "Adenialzz", "writerProfileAdress": "writer_image\\profile_122247439.jpg", "writerRankTotal": "6677", "writerRankWeekly": "19195", "writerThumb": "524", "writerVisitNum": "338766", "blog_read_count": "5558", "blog_time": "已于 2022-04-10 22:24:57 修改", "blog_title": "C++ ACM模式输入输出", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"C_ACM_0\"></a>C++ ACM模式输入输出</h1>\n<p>以下我们都以求和作为题目要求，来看一下各种输入输出应该怎么写。</p>\n<h2><a id=\"1__6\"></a>1 只有一个或几个输入</h2>\n<p>输入样例：</p>\n<pre><code>3 5 7\n</code></pre>\n<p>输入输出模板：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span>\n \t\t<span class=\"token comment\">// 接收有限个输入</span>\n    cin <span class=\"token operator\">&gt;&gt;</span> a <span class=\"token operator\">&gt;&gt;</span> b <span class=\"token operator\">&gt;&gt;</span> c<span class=\"token punctuation\">;</span>\n  \t<span class=\"token comment\">// 输出结果</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"2__27\"></a>2 先给元素个数，再给元素</h2>\n<h4><a id=\"TT_29\"></a>先给行数T，再给出T行</h4>\n<p>输入样例：</p>\n<pre><code>3\n3 5 7\n6 8 9\n12 9 5\n</code></pre>\n<p>输入输出模板：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n  \t<span class=\"token comment\">// 拿到输入行数T</span>\n    cin <span class=\"token operator\">&gt;&gt;</span> T<span class=\"token punctuation\">;</span>\n  \t<span class=\"token comment\">// 接收T行输入</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">&gt;&gt;</span> a <span class=\"token operator\">&gt;&gt;</span> b <span class=\"token operator\">&gt;&gt;</span> c<span class=\"token punctuation\">;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  \t<span class=\"token comment\">// 输出结果</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_61\"></a>先给数组元素个数，再给一行数组</h4>\n<p><code>n</code>, <code>m</code>分别是接下来要给的两个数组元素的个数，输入样例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">5</span> <span class=\"token number\">2</span>\n<span class=\"token number\">1</span> <span class=\"token number\">4</span> <span class=\"token number\">2</span> <span class=\"token number\">6</span> <span class=\"token number\">5</span>\n<span class=\"token number\">2</span> <span class=\"token number\">3</span>\n</code></pre>\n<p>接收输入代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">&gt;&gt;</span> n <span class=\"token operator\">&gt;&gt;</span> m<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">nums</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> cin <span class=\"token operator\">&gt;&gt;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">lens</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> cin <span class=\"token operator\">&gt;&gt;</span> lens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3_EOF_84\"></a>3 多组输入，读到文件结束符EOF为止</h2>\n<p>不直接告知有多少组输入，而是由EOF来判断。</p>\n<p><strong>方法一</strong>：</p>\n<p><code>cin</code> 读到有数据输入时会返回非0，而读到文件结束符时会返回0，结束while循环。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin <span class=\"token operator\">&gt;&gt;</span> a <span class=\"token operator\">&gt;&gt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>方法二</strong>：</p>\n<p><code>scanf</code> 读到文件结束符时会返回-1，而-1的补码表示恰好是全1，从而用按位取反得到0，此时结束 while 循环。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"4__116\"></a>4 字符串的输入</h2>\n<p>同样有 <code>cin</code> 和 <code>scanf</code> 两种方法</p>\n<p><strong>方法一</strong>：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>方法二：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    string s<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">&gt;&gt;</span> s<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>字符串的输入有几点需要注意：</p>\n<ul><li>C/C++ 中读入的字符串时包含结束符 <code>\\0</code> 的，我们需要的字符数组的长度要比真正的字符数加一；</li><li><code>cin</code> 和 <code>scanf</code> 两种读入方式都会忽略行首和行位的空格。</li></ul>\n<h2><a id=\"5_scanf_145\"></a>5 格式化输入scanf</h2>\n<p><strong>情况一</strong>：</p>\n<p>当我们面对这样的字符串输入：<code>214+1352</code>，要来计算两数之和时，<code>cin</code> 就不好使了。需要我们的格式化输入 <code>scanf</code>。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d+%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token operator\">+</span>b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>情况二</strong>：</p>\n<p>如果我们会接收到一排数字，而我们想要计算其中每单个数字的和，我们也可以借助格式化输入的 <code>%1d</code> 来实现，它能一位一位地读入标准输入：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        sum <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>标准化输入函数 <code>scanf</code> 还有许多奇妙的用法，有兴趣可以自行查阅相关资料。</p>\n<h2><a id=\"6__ASCII_175\"></a>6 ASCII码</h2>\n<ol><li>可以根据 ASCII 码的区间来判断某个字符是数字还是大小写字母等（比如通过与 <code>'a'</code>、<code>'z'</code>等 ASCII 码值的大小关系）。</li><li>根据数字字符的 ASCII 码得到数字本身的值：减去 <code>0</code> 的 ASCII 码 <code>char c='3'; int a = c-'0'</code>，整型变量 <code>a</code> 的值为 3。</li></ol>\n<h2><a id=\"7__180\"></a>7 整行读取字符串</h2>\n<p>当我们不确定一行中是否有空格等特殊字符，我们可以使用 <code>getline</code> 进行整行读取：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    string s<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>默认以回车作为结束，如果需要自定义，可：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> <span class=\"token char\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_198\"></a>补充知识</h2>\n<h3><a id=\"stringchar_200\"></a>string与char数组</h3>\n<ol><li>char[] 在C/C++中均可用，string仅在C++中可用，且需要 <code>#include &lt;string&gt;</code>，一般称 char[] 为 C 风格的字符串，称 string 为 C++ 风格的字符串</li><li>string 通常用 cin 读入，char[] 通常用 scanf 读入。scanf 不可以用来读入 string</li><li>char[] 构造 string：<code>string str(s);</code></li><li>string 转换为 char[]：<code>s = str.c_str();</code></li><li>一般直接 cin 读取 string 会很慢，可以读到 char[] 中，再构造为 string</li></ol>\n<h3><a id=\"printfscanf__coutcin_208\"></a>printf/scanf 与 cout/cin</h3>\n<p>在读取数据量巨大（经验值为大于1e5个正数以上）时，cin 会很慢，这是因为 cin/cout 需要与 scanf/printf 同步。</p>\n<p>解决方法：</p>\n<ol><li> <p>改用 scanf/printf</p> </li><li> <p>关闭同步，改善效率（有的编译器可行，有的无效）</p> <pre><code class=\"prism language-cpp\">cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p><code>cout &lt;&lt; endl;</code> 除了换行之外，还会清空缓存区，而清空缓存区这件事情会耗时很久，因此为了提高速度，一般直接：<code>cout &lt;&lt; \"\\n\";</code>，会快很多</p> </li></ol>\n<h3><a id=\"_224\"></a>保留小数位数</h3>\n<ol><li>如保留 3 位小数：<code>printf(\"%.4f\\n\", a);</code>， 此种方法会自动的四舍五入。</li><li>一位小数四舍五入成整数：<code>float a = 2.7; printf(\"%d\\n\", int(a+0.5));</code></li></ol>\n<p>Ref：</p>\n<p>https://www.bilibili.com/video/BV1ri4y1L7f7?from=search&amp;seid=11052128712667700362&amp;spm_id_from=333.337.0.0</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}