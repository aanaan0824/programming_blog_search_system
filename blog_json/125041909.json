{"blogid": "125041909", "writerAge": "码龄4年", "writerBlogNum": "29", "writerCollect": "204", "writerComment": "13", "writerFan": "27", "writerGrade": "3级", "writerIntegral": "618", "writerName": "@榴莲酥", "writerProfileAdress": "writer_image\\profile_125041909.jpg", "writerRankTotal": "29606", "writerRankWeekly": "488787", "writerThumb": "37", "writerVisitNum": "60272", "blog_read_count": "2107", "blog_time": "已于 2022-06-13 15:34:13 修改", "blog_title": "fanuc机床使用focas协议采集数据window和Linux都支持（下载中包括所有资料和demo）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p></p>\n<p>focas协议是用来采集fanuc机床的协议，通过以太网进行采集。</p>\n<h3><strong>1. focas1/2的简明教程可以看（稍后我会把所有的资料都上传，这是我从各个地方收集到并整理的）：</strong></h3>\n<p>这个文档主要介绍了fanuc机床的ip和端口如何配置，能通讯的数据分类，和采集方法的简单介绍</p>\n<p><img alt=\"\" height=\"31\" src=\"image\\5b091a9f8d2240f9a3c51c513a0a02fa.png\" width=\"764\"/></p>\n<p>如果你按照上面的文档配置，那么你应该就可以连接到机床。<a class=\"link-info\" href=\"https://download.csdn.net/download/weixin_42415843/85626507\" title=\"下载\">下载</a></p>\n<h3>2.利用focas API采集数据</h3>\n<p>1.按照如下图1路径找到了FWLIB32,记住使用<span style=\"color:#fe2c24;\">IE浏览器打开</span></p>\n<p>2.如图2点击允许阻止的内容，Connection type选择Ethernet(网口)，Applicable CNCs 选择机床的类型，这里我使用oi-MODEL F(大家可以根据自己的机床类型选择)</p>\n<p>3.如图3点击<img alt=\"\" height=\"22\" src=\"image\\57d73d32d22a46aebfd5c05c8f976344.png\" width=\"210\"/>这时候就会单出功能函数，如图4.相关的函数使用方法和说明文档的中文版，我也打包放一起了。<a class=\"link-info\" href=\"https://download.csdn.net/download/weixin_42415843/85500213\" title=\"下载\">下载</a></p>\n<p><img alt=\"\" height=\"731\" src=\"image\\f00135da84c04d18ad127bbfe98811e8.png\" width=\"1016\"/></p>\n<p style=\"text-align:center;\">图1</p>\n<p><img alt=\"\" height=\"890\" src=\"image\\82efab64a8f84c5ca888e0e35a06cc16.png\" width=\"1200\"/></p>\n<p></p>\n<p style=\"text-align:center;\">图2</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"867\" src=\"image\\9990b21b65334e86a671291d4e757d35.png\" width=\"1200\"/></p>\n<p style=\"text-align:center;\">图3 </p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"867\" src=\"image\\57a0de1ebbdf48b8babc522123f00806.png\" width=\"1200\"/></p>\n<p style=\"text-align:center;\">图4 </p>\n<h3>3.使用C#连接实战</h3>\n<p>在介绍了机床的IP和端口的配置和focas相关函数的使用以后，接下来我们用C#连接写一下简单的demo</p>\n<p>环境准备：</p>\n<p>         1.开发环境：VS2019  winform</p>\n<p>         2.找到fwlib32.dll和fwlib1.dll2个必备的库，如图5</p>\n<p>         3.按照如下路径找到fwlib32.cs复制到项目中，因为focas协议用的是C++写的，这个是官方给我们用C#封装好调用C++的库，直接使用即可，如图6</p>\n<p><img alt=\"\" height=\"737\" src=\"image\\0f7527dd696f46ac821410102b83a1df.png\" width=\"1025\"/></p>\n<p style=\"text-align:center;\">图5 </p>\n<p><img alt=\"\" height=\"730\" src=\"image\\4a347c1ec9f64281a476df2e384a9fa9.png\" width=\"1037\"/></p>\n<p style=\"text-align:center;\">图6</p>\n<p></p>\n<p>项目创建：</p>\n<p>        1.首先创建一个winform起名FanucFocasDemo，然后把fwlib32.dll,fwlib1.dll和fwlib32.cs复制到项目中</p>\n<p>        2.fwlib32.dll和fwlib1.dll2个DLL点击他们的属性，复制到输出目录选择始终复制，如图8。这样我们不管在重新生成项目文件或者清理后生成项目文件，dll都会在Debug/release文件下，这个时候Debug/release下面的可执行程序才可以调用到DLL</p>\n<p><img alt=\"\" height=\"222\" src=\"image\\14dc065686e84f87b0f7778a75fe7e00.png\" width=\"274\"/></p>\n<p>                                图7 </p>\n<p><img alt=\"\" height=\"618\" src=\"image\\2e97abb3bbde494293b9ada1efb77599.png\" width=\"618\"/></p>\n<p>                                                                图8 </p>\n<p>        3.连接，通过cnc_allclibhndl3方法进行连接</p>\n<pre><code class=\"language-cs\">        private void connection_Click(object sender, EventArgs e)\n        {\n            this.ret = Focas1.cnc_allclibhndl3(ip, Convert.ToUInt16(port), Convert.ToInt32(timeout), out h);\n            if (this.ret != Focas1.EW_OK)\n            {\n                //设备未连接上\n                MessageBox.Show(\"设备未连接上\");\n            }\n            else if (this.ret == Focas1.EW_OK)\n            {\n                MessageBox.Show(\"设备连接成功\");\n            }\n        }</code></pre>\n<p> 注意：   </p>\n<p>我们看下fwlib32.cs函数库的一个枚举（如图9）：focas_ret</p>\n<p>所有的数据请求，函数库都会返回一个请求结果（成功or失败）以及ref或者out出来的响应数据（如主轴信息、转速信息、加工信息等。）</p>\n<p>请求结果为0代表请求成功，即以下的EW_OK，说明响应数据返回并且正确，负责全部为请求失败，详细问题看英文注释，如</p>\n<p><span style=\"color:#fe2c24;\">    EW_SOCKET   =     (-16),           /* Windows socket error */代表了tcp Socket套接字错误，说明网络问题。</span></p>\n<p><span style=\"color:#fe2c24;\">      EW_NODLL    =     (-15),           /* DLL not exist error */代表DLL未找到，查看是否引用或者程序同级目录有没有我上述讲到的两个dll库。各类原因我不一一解释，可以查阅翻译软件对英文进行翻译</span><br/><img alt=\"\" height=\"676\" src=\"image\\b3327660719846a1b2b90d2e1072eb99.png\" width=\"777\"/></p>\n<p style=\"text-align:center;\">图9 </p>\n<p>    4.采集，这个是我能采集到的数据如图10</p>\n<p><img alt=\"\" height=\"655\" src=\"image\\e25478ed66494ba7b508176adbce4088.png\" width=\"903\"/></p>\n<p style=\"text-align:center;\">图10</p>\n<p> 坐标：</p>\n<pre><code class=\"language-cs\">            Focas1.ODBPOS fos = new Focas1.ODBPOS();\n            short num = Focas1.MAX_AXIS;\n            short type = -1;\n            short ret = Focas1.cnc_rdposition(h, type, ref num, fos);\n            if (ret == 0)\n            {\n                //绝对\n                txtXAbsolutely.Text = (fos.p1.abs.data * Math.Pow(10, -fos.p1.abs.dec)).ToString();\n                txtYAbsolutely.Text = (fos.p2.abs.data * Math.Pow(10, -fos.p2.abs.dec)).ToString();\n                //相对\n                txtXRelative.Text = (fos.p1.rel.data * Math.Pow(10, -fos.p1.rel.dec)).ToString();\n                txtYRelative.Text = (fos.p2.rel.data * Math.Pow(10, -fos.p2.rel.dec)).ToString();\n            }</code></pre>\n<p> 系统信息：是</p>\n<pre><code class=\"language-cs\">            Focas1.ODBSYS k1 = new Focas1.ODBSYS();\n            ret = Focas1.cnc_sysinfo(h, k1);\n            if (ret == Focas1.EW_OK)\n            {\n                MaxAxis = k1.max_axis.ToString();//最大轴数 \n                this.txtMaxAxis.Text = MaxAxis;\n                string type1 = k1.cnc_type[0].ToString() + k1.cnc_type[1].ToString();//CNC类型\n                #region 机床系统类型判断\n                switch (type1)\n                {\n                    case \"15\":\n                        CNCType = \"Series 15/15i\";\n                        break;\n                    case \"16\":\n                        CNCType = \"Series 16/16i\";\n                        break;\n                    case \"18\":\n                        CNCType = \"Series 18/18i\";\n                        break;\n                    case \"21\":\n                        CNCType = \"Series 21/21i\";\n                        break;\n                    case \"30\":\n                        CNCType = \"Series 30i\";\n                        break;\n                    case \"31\":\n                        CNCType = \"Series 31i\";\n                        break;\n                    case \"32\":\n                        CNCType = \"Series 32i\";\n                        break;\n                    case \"35\":\n                        CNCType = \"Series 35i\";\n                        break;\n                    case \" 0\":\n                        CNCType = \"Series 0i\";\n                        break;\n                    case \"PD\":\n                        CNCType = \"Power Mate i-D\";\n                        break;\n                    case \"PH\":\n                        CNCType = \"Power Mate i-H\";\n                        break;\n                    case \"PM\":\n                        CNCType = \"Power Motion i\";\n                        break;\n                    default:\n                        CNCType = \"其它类型\";\n                        break;\n                }\n                #endregion\n                this.txtCNCType.Text = CNCType;\n                MTType = k1.mt_type[0].ToString() + k1.mt_type[1].ToString();\n                SerialNumber = k1.series[0].ToString() + k1.series[1].ToString() + k1.series[2].ToString() + k1.series[3].ToString();//CNC型号\n                this.txtSerialNumber.Text = SerialNumber;\n                Version = k1.version[0].ToString() + k1.version[1].ToString() + k1.version[2].ToString() + k1.version[3].ToString();\n                Axis = k1.axes[0].ToString() + k1.axes[1].ToString();\n            }</code></pre>\n<p></p>\n<p>设备状态和工作模式：</p>\n<pre><code class=\"language-cs\">  Focas1.ODBST statinfo = new Focas1.ODBST();\n            ret = Focas1.cnc_statinfo(h, statinfo);\n            if (ret == Focas1.EW_OK)\n            {\n                //设备状态的判定方法：如果Alarm不为0则有报警。当没有报警时，如果run=3认为是在运行，其他都为待机\n                run = statinfo.run;\n                Alarm = statinfo.alarm;\n                //MTMode = statinfo.tmmode;\n                if (Alarm != 0)\n                    run = 5;//5为设备报警状态\n                this.txtDevStatus.Text = run.ToString();\n                #region 工作模式判断\n                switch (statinfo.aut)\n                {\n                    case 0:\n                        CNCModel = \"MDI\";\n                        break;\n                    case 1:\n                        CNCModel = \"MEMory\";\n                        break;\n                    case 2:\n                        CNCModel = \"Not Defined\";\n                        break;\n                    case 3:\n                        CNCModel = \"EDIT\";\n                        break;\n                    case 4:\n                        CNCModel = \"HaNDle\";\n                        break;\n                    case 5:\n                        CNCModel = \"JOG\";\n                        break;\n                    case 6:\n                        CNCModel = \"Teach in JOG\";\n                        break;\n                    case 7:\n                        CNCModel = \"Teach in HaNDle\";\n                        break;\n                    case 8:\n                        CNCModel = \"INC·feed\";\n                        break;\n                    case 9:\n                        CNCModel = \"REFerence\";\n                        break;\n                    case 10:\n                        CNCModel = \"ReMoTe\";\n                        break;\n                    default:\n                        CNCModel = \"others mode\";\n                        break;\n                }\n                #endregion\n                this.txtCNCModel.Text = CNCModel.ToString();\n            }</code></pre>\n<p></p>\n<p>报警数据：</p>\n<pre><code class=\"language-cs\"> #region 报警数据\n            ret = Focas1.cnc_alarm2(h, out almdsta);//Focas1.cnc_alarm2(h, out almdsta);\n            if (ret == Focas1.EW_OK)\n            {\n                #region 报警判断\n                switch (almdsta)\n                {\n                    case 0:\n                        AlarmMessage = \"参数开启（SW）\";\n                        break;\n                    case 1:\n                        AlarmMessage = \"关机参数设置（PW）\";\n                        break;\n                    case 2:\n                        AlarmMessage = \"I / O错误（IO）\";\n                        break;\n                    case 3:\n                        AlarmMessage = \"前景P / S（PS\";\n                        break;\n                    case 4:\n                        AlarmMessage = \"超程，外部数据（OT\";\n                        break;\n                    case 5:\n                        AlarmMessage = \"过热报警（OH）\";\n                        break;\n                    case 6:\n                        AlarmMessage = \"伺服报警（SV\";\n                        break;\n                    case 7:\n                        AlarmMessage = \"数据I / O错误（SR）\";\n                        break;\n                    case 8:\n                        AlarmMessage = \"宏指令报警（MC\";\n                        break;\n                    case 9:\n                        AlarmMessage = \"主轴报警（SP）\";\n                        break;\n                    case 10:\n                        AlarmMessage = \"其他警报（DS）\";\n                        break;\n                    case 11:\n                        AlarmMessage = \"有关故障防止功能（IE）的警报\";\n                        break;\n                    case 12:\n                        AlarmMessage = \"背景P / S（BG）\";\n                        break;\n                    case 13:\n                        AlarmMessage = \"同步错误（SN）\";\n                        break;\n                    case 14:\n                        AlarmMessage = \"保留\";\n                        break;\n                    case 15:\n                        AlarmMessage = \"外部报警信息（EX）\";\n                        break;\n                    case 16:\n                        AlarmMessage = \"正向超程（软限位1）\";\n                        break;\n                    default:\n                        AlarmMessage = \"未知错误\";\n                        break;\n                }\n                #endregion\n            }\n            #endregion</code></pre>\n<p>主程序号和子程序号：</p>\n<p></p>\n<pre><code class=\"language-cs\">            Focas1.ODBPRO dbpro = new Focas1.ODBPRO();\n            if (Focas1.EW_OK == Focas1.cnc_rdprgnum(h, dbpro))\n            {\n                Mainpg = dbpro.mdata;//主程序号\n                this.txtMainpg.Text = Mainpg.ToString();\n                Currentpg = dbpro.data;//当前运行程序号（子程序号）\n                this.txtCurrentpg.Text = Currentpg.ToString();\n\n            }</code></pre>\n<p> 主轴实际转速：</p>\n<pre><code class=\"language-cs\">            Focas1.ODBACT data = new Focas1.ODBACT();\n            ret = Focas1.cnc_acts(h, data);\n            if (ret == Focas1.EW_OK)\n            {\n                Speed = data.data.ToString();\n                this.txtSpeed.Text = Speed.ToString();//单位r/min\n            }</code></pre>\n<p>进给率F 切削实际速度：</p>\n<pre><code class=\"language-cs\">            Focas1.ODBACT ff = new Focas1.ODBACT();\n            ret = Focas1.cnc_actf(h, ff);\n            if (ret == Focas1.EW_OK)\n            {\n                FeedRate = ff.data; //单位 mm/min\n                this.txtFeedRate.Text = FeedRate.ToString();\n            }</code></pre>\n<p> 取刀具号 ，目前我试了没用：</p>\n<pre><code class=\"language-cs\">            //short number = 1;\n            //Focas1.IODBTLDT c = new Focas1.IODBTLDT();\n            //ret = Focas1.cnc_rdtooldata(h, 1, ref number, c);\n            //if (ret == Focas1.EW_OK)\n            //{\n            //    if (c.data1 != null)\n            //    {\n            //        Tool_no = c.data1.tool_no;\n            //    }\n            //}</code></pre>\n<p>进给倍率：</p>\n<pre><code class=\"language-cs\">            Focas1.IODBPMC0 ig = new Focas1.IODBPMC0();\n            ret = Focas1.pmc_rdpmcrng(h, 0, 1, 12, 13, 8 + 1 * 2, ig);\n            if (ret == Focas1.EW_OK)\n            {\n                FeedOverRide = (100 - (ig.cdata[0] - 155)).ToString();//进给倍率   转换成百分比 为什么是155没搞懂，设备不同也可能不是155\n                this.txtFeedOverRide.Text = FeedOverRide.ToString();\n            }</code></pre>\n<p>单次工件计数 这个和控制板上的数量相对应   ：</p>\n<pre><code class=\"language-cs\">            Focas1.ODBM bb = new Focas1.ODBM();\n            ret = Focas1.cnc_rdmacro(h, 0xf3d, 0x0a, bb);\n            if (ret == Focas1.EW_OK)\n            {\n                string PartCnt = (bb.mcr_val / 100000).ToString();\n                this.txtPartCnt.Text = PartCnt.ToString();\n            }</code></pre>\n<p>工件总数：</p>\n<pre><code class=\"language-cs\">            Focas1.IODBPSD_1 param6712 = new Focas1.IODBPSD_1();\n            ret = Focas1.cnc_rdparam(h, 6712, 0, 8, param6712);\n            if (ret == Focas1.EW_OK)\n            {\n                int totalparts = param6712.ldata;\n                this.txttotalparts.Text = totalparts.ToString();\n            }</code></pre>\n<p>时间：</p>\n<pre><code class=\"language-cs\">            #region 获取切削时间\n            Focas1.IODBPSD_1 param6753 = new Focas1.IODBPSD_1();\n            Focas1.IODBPSD_1 param6754 = new Focas1.IODBPSD_1();\n            ret = Focas1.cnc_rdparam(h, 6753, 0, 8 + 32, param6753);\n            if (ret == Focas1.EW_OK)\n            {\n                int cuttingTimeSec = param6753.ldata / 1000;\n                ret = Focas1.cnc_rdparam(h, 6754, 0, 8 + 32, param6754);\n                if (ret == Focas1.EW_OK)\n                {\n                    int cuttingTimeMin = param6754.ldata;\n                    int CutTime = cuttingTimeMin * 60 + cuttingTimeSec;\n                    this.txtCutTime.Text = CutTime.ToString();\n                }\n            }\n            #endregion\n            #region 获取运行时间\n            Focas1.IODBPSD_1 param6751 = new Focas1.IODBPSD_1();\n            Focas1.IODBPSD_1 param6752 = new Focas1.IODBPSD_1();\n            ret = Focas1.cnc_rdparam(h, 6751, 0, 8, param6751);\n            if (ret == Focas1.EW_OK)\n            {\n                int workingTimeSec = param6751.ldata / 1000;\n                ret = Focas1.cnc_rdparam(h, 6752, 0, 8, param6752);\n                if (ret == Focas1.EW_OK)\n                {\n                    int workingTimeMin = param6752.ldata;\n                    int CycSec = workingTimeMin * 60 + workingTimeSec;\n                    this.txtworkingTime.Text = CycSec.ToString();\n                }\n            }\n            #endregion\n            #region 获取开机时间\n            Focas1.IODBPSD_1 param6750 = new Focas1.IODBPSD_1();\n            ret = Focas1.cnc_rdparam(h, 6750, 0, 8 + 32, param6750);\n            if (ret == Focas1.EW_OK)\n            {\n                int PoweOnTime = param6750.ldata * 60;\n                this.txtPoweOnTime.Text = PoweOnTime.ToString();\n            }</code></pre>\n<p>特别说明cnc_rdparam这个函数这个函数中的第二个参数要明白其含义，它代表的是机床PARAMETER参数表的序号。这个函数根据第二参数不同可以采集到很多信息，具体那些参数可以参考<img alt=\"\" height=\"32\" src=\"image\\1b7ac0243fff4dac9a760109725c6588.png\" width=\"627\"/></p>\n<p><a class=\"link-info\" href=\"https://download.csdn.net/download/weixin_42415843/85500213\" title=\"下载\">下载</a></p>\n<h3>4.在Linux平台使用 </h3>\n<p>Fwlib32.dll是在windows上运行的，如果你想在linux使用，以linux-arm系统为例。</p>\n<p>        1.把如图11路径中的libfw32lib.so.1.0.1复制到到项目中。重命名为libfw32lib.so</p>\n<p> <img alt=\"\" height=\"174\" src=\"image\\5e2e204b03724c27a1b0262d403c1558.png\" width=\"695\"/></p>\n<p style=\"text-align:center;\">图11 </p>\n<p>        2.现在查找 fwlib32.cs 的行查找所有文本实例fwlib32.dll\"替换为libfwlib32.so\"</p>\n<p>        3.在 fwlib32.cs中添加cnc_startupprocess和cnc_exitprocess()，如图12</p>\n<pre><code class=\"language-cs\">    /* cnc_startupprocess for linux */\n    [DllImport(\"libfwlib32.so\", EntryPoint = \"cnc_startupprocess\")]\n    public static extern void cnc_startupprocess(long level, string filename);\n\n    /* cnc_exitprocess for linux */\n    [DllImport(\"libfwlib32.so\", EntryPoint = \"cnc_exitprocess\")]\n    public static extern void cnc_exitprocess();</code></pre>\n<p style=\"text-align:center;\"> <img alt=\"\" height=\"596\" src=\"image\\30ecdd73980a4e87b315d21322ac8d18.png\" width=\"1131\"/></p>\n<p style=\"text-align:center;\">图12</p>\n<p>        4.在调用任何其他 fwlib32.cs 库函数之前调用此函数</p>\n<pre><code class=\"language-cs\">long level = 3; string filename = \"focas.log\"; Focas1.cnc_startupprocess(level, filename);\n</code></pre>\n<p>        5.调用之后，你可以使用下面的线连接，接下来你可以调用任何库函数最后使用完函数之后别忘了调用cnc_exitprocess函数退出。</p>\n<pre>参考博客：<a href=\"https://www.it610.com/article/1282737333061304320.htm\" title=\"浅谈几种主流数控机床的数据采集技术 - it610.com\">浅谈几种主流数控机床的数据采集技术 - it610.com</a></pre>\n<p>                 <a href=\"https://blog.csdn.net/yangxd_ah/article/details/107723136\" title=\"c++ fanuc cnc数据采集踩过坑_yangxd_ah的博客-CSDN博客\">c++ fanuc cnc数据采集踩过坑_yangxd_ah的博客-CSDN博客</a></p>\n<p>                 <a href=\"https://www.it1352.com/2859753.html\" title=\"Linux平台上的Focas fwlib32 CNC库 - IT屋-程序员软件开发技术分享社区\">Linux平台上的Focas fwlib32 CNC库 - IT屋-程序员软件开发技术分享社区</a></p>\n<p></p>\n<p style=\"text-align:center;\"></p>\n</div>\n</div>"}