{"blogid": "125533080", "writerAge": "码龄169天", "writerBlogNum": "26", "writerCollect": "442", "writerComment": "20", "writerFan": "86", "writerGrade": "2级", "writerIntegral": "373", "writerName": "星悦糖", "writerProfileAdress": "writer_image\\profile_125533080.jpg", "writerRankTotal": "41964", "writerRankWeekly": "277996", "writerThumb": "93", "writerVisitNum": "79801", "blog_read_count": "2389", "blog_time": "已于 2022-07-08 15:30:40 修改", "blog_title": "vue如何请求后端数据", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>在vue中，我们如何通过<span style=\"background-color:#ffd900;\">请求接口</span>来访问后端的数据呢？在这里简单总结了一个小示例：</p>\n<p>主要问题：如果不封装的话，在每次请求的时候都要书写一遍下面的代码，造成代码冗余。</p>\n<p>                             <img alt=\"\" height=\"185\" src=\"image\\4c20975ba53446af985e3a3d5b1f1918.png\" width=\"346\"/> </p>\n<p>        1、在src目录下创建一个utils文件夹，然后在里面创建一个js文件。这里我创建了一个request.js文件。</p>\n<pre><code class=\"language-html\">/*引入axios*/\nimport axios from 'axios'\nconst request = axios.create({\n    baseURL: 'http://localhost:8280/user', // 基础路径,将统一的部分全部封装\n    withCredentials: true // 表示请求可以携带cookie\n})\n//前端采用export.default，在写后端代码时用module.export\nexport default request</code></pre>\n<p>        在app.vue中进行测试：</p>\n<pre><code class=\"language-html\">&lt;script&gt;\nimport request from './utils/request'\n\nexport default {\n  created() {\n    request({\n      method:'GET',\n      url:'/products',\n      params:{test:'111',hello:'world'},\n    })\n  },\n}\n&lt;/script&gt;</code></pre>\n<p>        2、在src文件夹下创建一个api文件夹，根据不同的功能进行分组，分别写不同的接口。这里我创建了一个product.js。</p>\n<pre><code class=\"language-java\">import request from '../utils/request';\n\nexport function getList(params={}) {\n    return request({\n        methods:'GET',\n        url:'/products',\n        params,\n    })\n}\n\nexport function getProduct(id) {\n    return request({\n        methods:'GET',\n        url:'/products/${id}',\n    })\n}\nexport function update(id,data) {\n    return request({\n        methods:'PUT',\n        url:'/products/${id}',\n        data,\n    })\n}</code></pre>\n<p>        3、在api文件夹下创建index.js</p>\n<pre><code class=\"language-java\">import products from './products';\n\nexport default{\n    products,\n}</code></pre>\n<p>        4、在main.js中引入api文件夹下的index。</p>\n<pre><code class=\"language-java\">import api from './api/index.js';\n\nVue.prototype.$api = api\n</code></pre>\n<p>        5、此时通过接口获取后端数据的方式就变成了如下格式:</p>\n<pre><code class=\"language-java\">getProducts(){\n    this.$api.products.getList(this.query).then((response)=&gt;{\n        this.products = response.data.data\n        this.total = response.data.total\n    })\n}</code></pre>\n<p>        6、列表展示案例：</p>\n<p><span style=\"background-color:#ffd900;\">main.js中添加代码</span></p>\n<pre><code class=\"language-java\">import Vue from 'vue'\nimport App from './App'\nimport router from './router'\nimport axios from 'axios';\n\n//Vue.prototype.$http=axios;//修改内部的$http为axios  $http.get(\"\") .post()\n\nVue.config.productionTip = false\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  router,\n  components: { App },\n  template: '&lt;App/&gt;',\n  render:h =&gt; h(App),\n  beforeCreate() {\n    //安装全局事件总线，$bus就是当前应用的vm\n    Vue.prototype.$bus = this\n  },\n\n})</code></pre>\n<p><span style=\"background-color:#ffd900;\">App.vue中添加代码</span></p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;Search/&gt;\n    &lt;List/&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport List from \"./components/List\";\nimport Search from \"./components/Search\";\nexport default {\n  name: 'App',\n  components: {Search, List},\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n\n&lt;/style&gt;</code></pre>\n<p><span style=\"background-color:#ffd900;\">router下的index.js中的代码</span></p>\n<pre><code class=\"language-java\">import Vue from 'vue'\nimport Router from 'vue-router'\n\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n\n  ]\n})</code></pre>\n<p><span style=\"background-color:#ffd900;\">list.vue代码示例：</span></p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;!--展示用户数据--&gt;\n    &lt;div class=\"card\" v-show=\"info.users.length\" v-for=\"user in info.users\" :key=\"user.login\"&gt;\n      &lt;a :href=\"user.html_url\" target=\"_blank\"&gt;\n        &lt;img :src=\"user.avatar_url\" style=\"width: 100px\"/&gt;\n      &lt;/a&gt;\n      &lt;p class=\"card-text\"&gt;{<!-- -->{user.login}}&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;!--展示欢迎词--&gt;\n    &lt;h1 v-show=\"info.isFirst\"&gt;欢迎使用&lt;/h1&gt;\n    &lt;!--展示加载中--&gt;\n    &lt;h1 v-show=\"info.isLoading\"&gt;加载中....&lt;/h1&gt;\n    &lt;!--展示错误信息--&gt;\n    &lt;h1 v-show=\"info.errMsg\"&gt;{<!-- -->{info.errMsg}}&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: \"List\",\n  data(){\n    return{\n     info:{\n       isFirst:true,//是否是初次展示\n       isLoading:false,//是否处于加载中\n       errMsg:'',\n       users:[],\n     }\n    }\n  },\n  //使用全局事件总线在两个组件之间传递数据\n  //接收数据：list组件想接收数据，则要在list组件中给$bus绑定自定义事件，事件的回调留在list组件自身。\n  mounted() {\n    this.$bus.$on('updateListDate',(dataObj)=&gt;{\n      console.log(dataObj)\n      this.info = {...this.info,...dataObj};\n      /*this.isFirst = isFirst\n      this.isLoading = isLoading\n      this.errMsg = errMsg\n      this.users = users*/\n    })\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n<p><span style=\"background-color:#ffd900;\">search.vue代码示例：</span></p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;section class=\"jumbotron\"&gt;\n    &lt;h3 class=\"jumbotron-heading\"&gt; search gitHub Users&lt;/h3&gt;\n    &lt;div&gt;\n      &lt;input type=\"text\" placeholder=\"enter the name you search\" v-model=\"keyWord\"/&gt;&amp;nbsp;\n      &lt;button @click=\"searchUsers\" &gt;Search&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/section&gt;\n&lt;/template&gt;\n&lt;script&gt;\nimport axios from 'axios';\nexport default {\n  name: \"Search\",\n  data(){\n    return{\n      keyWord:''\n    }\n  },\n  methods:{\n    searchUsers(){\n      //请求前更新list里面的数据\n      this.$bus.$emit('updateListDate',{isFirst:false,isLoading:true,errMsg:'',users:[]})\n      axios.get(`https://api.github.com/search/users?q=${this.keyWord}`).then(\n        res =&gt;{\n          console.log(\"请求成功\")\n          //提供数据：search组件要给list组件传递数据，就要触发list组件中的自定义事件并携带要传递的数据\n          //请求成功后更新list里面的数据\n          this.$bus.$emit(\"updateListDate\",{isLoading:false,errMsg:'',users:res.data.items})\n        },\n        error =&gt;{\n          console.log(\"请求成功\",error.message)\n          //请求失败后更新list里面的数据\n          this.$bus.$emit(\"updateListDate\",{isLoading:false,errMsg:error.message,users:[]})\n        }\n      )\n    }\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n\n</code></pre>\n<p><span style=\"background-color:#ffd900;\">注：Vue全局事件总线$bus安装与应用【附带图片讲解】可以参考下面的地址：</span></p>\n<p><a class=\"has-card\" href=\"https://blog.csdn.net/annans/article/details/124658904\" title=\"Vue全局事件总线$bus安装与应用【附带图片讲解】_codnan的博客-CSDN博客_安装事件总线\"><span class=\"link-card-box\"><span class=\"link-title\">Vue全局事件总线$bus安装与应用【附带图片讲解】_codnan的博客-CSDN博客_安装事件总线</span><span class=\"link-desc\">Vue全局事件总线$bus安装与应用【附带图片讲解】</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\"/>https://blog.csdn.net/annans/article/details/124658904</span></span></a></p>\n</div>\n</div>"}