{"blogid": "122632541", "writerAge": "码龄4年", "writerBlogNum": "17", "writerCollect": "65", "writerComment": "11", "writerFan": "15", "writerGrade": "3级", "writerIntegral": "719", "writerName": "dicw", "writerProfileAdress": "writer_image\\profile_122632541.jpg", "writerRankTotal": "73871", "writerRankWeekly": "99424", "writerThumb": "24", "writerVisitNum": "88539", "blog_read_count": "2789", "blog_time": "于 2022-01-22 04:01:05 发布", "blog_title": "在PHP中调用Python并获取运行结果", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>版权</h2>\n<p>本文首发于<code>soarli博客</code>，转载请注明来源。<a href=\"https://blog.soarli.top/archives/605.html\">传送门</a></p>\n<h2><a id=\"_3\"></a>前言</h2>\n<p>在毕设中需要用到<code>PHP</code>传递参数调用<code>Python</code>脚本并获取后者返回的结果，经过查阅资料该问题得以解决。</p>\n<h2><a id=\"_7\"></a>思路</h2>\n<p><code>PHP</code>借助<code>shell_exec</code>通过类似于<code>python sum.py $aa $bb</code>的形式以执行系统命令的方式传递参数给<code>Python</code>文件；</p>\n<p><code>Python</code>则通过<code>sys.argv</code>（需引入<code>sys</code>模块）来接收命令中所包含的参数（需要注意的是：此时传入的参数都会被默认为<code>str</code>类型，需要在函数内部进行解析和转换）并将处理结果通过<code>print</code>函数输出；</p>\n<p><code>PHP</code>通过将<code>shell_exec</code>函数返回的结果赋给变量实现取得<code>Python</code>返回数据的效果。</p>\n<h2><a id=\"_15\"></a>代码</h2>\n<p><code>PHP</code>:</p>\n<pre><code class=\"prism language-php\"><span class=\"token operator\">&lt;</span>form action<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"\"</span> method<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"post\"</span><span class=\"token operator\">&gt;</span>\n    请输入<span class=\"token argument-name\">a</span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"number\"</span> name<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"a\"</span> value<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"请输入a\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">&gt;</span> 请输入<span class=\"token argument-name\">b</span><span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"number\"</span> name<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"b\"</span> value<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"请输入b\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"submit\"</span><span class=\"token operator\">&gt;</span>计算<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token class-name type-declaration\">php</span>\n<span class=\"token variable\">$aa</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$bb</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$cmd</span> <span class=\"token operator\">=</span> <span class=\"token function\">shell_exec</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"python sum.py <span class=\"token interpolation\"><span class=\"token variable\">$aa</span></span> <span class=\"token interpolation\"><span class=\"token variable\">$bb</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"a与b的和是： <span class=\"token interpolation\"><span class=\"token variable\">$cmd</span></span>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><code>Python</code>:</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> sys\n\na<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>   <span class=\"token comment\"># 接收位置参数</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_42\"></a>效果</h2>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/e72c204b468627c6dfd18ae851a6cdcf.gif\"/></p>\n<h2><a id=\"_46\"></a>补充</h2>\n<h3><a id=\"Python_48\"></a><code>Python</code>:</h3>\n<p>除了<code>sys.argv</code>，<code>Python</code>还可以通过<code>argparse</code>、<code>tf.app.run</code>获取传入参数。</p>\n<p>相对于<code>sys.argv</code>，<code>argparse</code>和<code>tf.app.run</code>可以认为是<code>基于参数名称的传入</code>（前者是<code>基于位置的参数传入</code>）。</p>\n<p>后者的具体使用方法记录如下：</p>\n<h4><a id=\"argparse_56\"></a><code>argparse</code></h4>\n<p>示例1：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> argparse\nparser <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>ArgumentParser<span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">'manual to this script'</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--gpus'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> default <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--batch-size'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\nargs <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> args<span class=\"token punctuation\">.</span>gpus\n<span class=\"token keyword\">print</span> args<span class=\"token punctuation\">.</span>batch_size\n</code></pre>\n<p>利用<code>argparse</code>模块，在函数内定义好相关的命名参数（包括名称、数据类型和默认值等），从而在命令行中可以方便的调用。</p>\n<p>需要注意的是，脚本运行命令<code>python script.py -gpus=0,1,2 --batch-size=10</code>中的<code>--batch-size</code>会被自动解析成<code>batch_size</code>.<br/> <code>parser.add_argument</code> 方法的<code>type</code>参数理论上可以是任何合法的类型， 但有些参数传入格式比较麻烦，例如<code>list</code>，所以一般使用<code>bool</code>, <code>int</code>, <code>str</code>, <code>float</code>这些基本类型就行了，更复杂的需求可以通过<code>str</code>传入，然后手动解析。<code>bool</code>类型的解析比较特殊，传入任何值都会被解析成<code>True</code>，传入空值时才为<code>False</code></p>\n<pre><code class=\"prism language-shell\">python script.py --bool-val<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token comment\"># args.bool_val=True</span>\npython script.py --bool-val<span class=\"token operator\">=</span>False <span class=\"token comment\"># args.bool_val=True</span>\npython script.py --bool-val<span class=\"token operator\">=</span>     <span class=\"token comment\"># args.bool_val=什么都不写False</span>\n</code></pre>\n<p>示例2：</p>\n<p><code>Python</code>:</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> argparse\n\nparser <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>ArgumentParser<span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">'a demo of script'</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--a'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 添加变量</span>\nparser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--b'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    args <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 解析所有的命令行传入变量</span>\n    add<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span>\n\n\n</code></pre>\n<p><code>Shell</code>:</p>\n<pre><code class=\"prism language-shell\">python script.py --a<span class=\"token operator\">=</span><span class=\"token number\">4.0</span> --b<span class=\"token operator\">=</span><span class=\"token number\">3.0</span>\n<span class=\"token comment\">#  另一种写法： python script.py --a 4.0 --b 3.0</span>\n<span class=\"token comment\">#　返回结果7.0</span>\n\n</code></pre>\n<p>总结：通过这个方法还能指定命令的帮助信息。具体请看<code>API</code>文档：https://docs.python.org/2/library/argparse.html</p>\n<p>通过这个方法还能指定命令的帮助信息。具体请看<code>API</code>文档：https://docs.python.org/2/library/argparse.html</p>\n<h4><a id=\"tfapprun_114\"></a><code>tf.app.run</code></h4>\n<p><code>tensorflow</code>也提供了一种方便的解析方式。<br/> 脚本的执行命令为：</p>\n<pre><code class=\"prism language-shell\">python script.py -gpus<span class=\"token operator\">=</span><span class=\"token number\">0,1</span>,2 --batch_size<span class=\"token operator\">=</span><span class=\"token number\">10</span>\n</code></pre>\n<p>对应的python代码为：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> tensorflow <span class=\"token keyword\">as</span> tf\ntf<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>flags<span class=\"token punctuation\">.</span>DEFINE_string<span class=\"token punctuation\">(</span><span class=\"token string\">'gpus'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gpus to use'</span><span class=\"token punctuation\">)</span>\ntf<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>flags<span class=\"token punctuation\">.</span>DEFINE_integer<span class=\"token punctuation\">(</span><span class=\"token string\">'batch_size'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'batch size'</span><span class=\"token punctuation\">)</span>\n\nFLAGS <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>flags<span class=\"token punctuation\">.</span>FLAGS\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> FLAGS<span class=\"token punctuation\">.</span>gpus\n    <span class=\"token keyword\">print</span> FLAGS<span class=\"token punctuation\">.</span>batch_size\n\n<span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    tf<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>有几点需要注意：</p>\n<p><code>tensorflow</code>只提供以下几种方法：</p>\n<p><code>tf.app.flags.DEFINE_string</code>，</p>\n<p><code>tf.app.flags.DEFINE_integer</code>,</p>\n<p><code>tf.app.flags.DEFINE_boolean</code>,</p>\n<p><code>tf.app.flags.DEFINE_float</code> 四种方法，分别对应<code>str</code>, <code>int</code>,<code>bool</code>,<code>float</code>类型的参数。这里对<code>bool</code>的解析比较严格，传入<code>1</code>会被解析成<code>True</code>，其余任何值都会被解析成<code>False</code>。</p>\n<p>脚本中需要定义一个接收一个参数的<code>main</code>方法：<code>def main(_):</code>，这个传入的参数是脚本名，一般用不到， 所以用下划线接收。</p>\n<p>以<code>batch_size</code>参数为例，传入这个参数时使用的名称为<code>--batch_size</code>，也就是说，中划线不会像在<code>argparse</code> 中一样被解析成下划线。</p>\n<p><code>tf.app.run()</code>会寻找并执行入口脚本的<code>main</code>方法。也只有在执行了<code>tf.app.run()</code>之后才能从<code>FLAGS</code>中取出参数。</p>\n<p>从它的签名来看，它也是可以自己指定需要执行的方法的，不一定非得叫<code>main</code>：</p>\n<pre><code class=\"prism language-python\">run<span class=\"token punctuation\">(</span>\n    main<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n    argv<span class=\"token operator\">=</span><span class=\"token boolean\">None</span>\n<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><code>tf.app.flags</code>只是对<code>argpars</code>的简单封装。代码见https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/python/platform/flags.py</p>\n<h3><a id=\"PHP_170\"></a><code>PHP</code>:</h3>\n<p>除了使用<code>shell_exec()</code>，还可以使用<code>exec()</code>、<code>passthru()</code>和<code>system()</code>函数调用系统命令，</p>\n<p>它们四者的区别如下：</p>\n<blockquote>\n<ul><li><code>shell_exec()</code></li></ul>\n<p>通过 <code>shell</code> 环境执行命令，并且将完整的输出以字符串的方式返回。<br/> 也就是说, <code>PHP</code>先运行一个<code>shell</code>环境, 然后让<code>shell</code>进程运行你的命令, 并且把所有输出以字符串形式返回, 如果程序执行有错误或者程序没有任何输出, 则返回<code>null</code>.</p>\n<ul><li><code>exec()</code></li></ul>\n<p><code>string exec ( string $command [, array &amp;$output [, int &amp;$return_var ]] )</code><br/> 与 <code>shell_exec()</code> 不一样, <code>exec</code>不会创建<code>shell</code>进程, 可以理解是<code>php</code>进程直接创建一个子进程, 运行指定的命令, 返回值只返回命令的最后一行, 所有的返回以参数形式返回, 上面的 <code>$output</code>, 进程的退出代码以另外一个参数变量返回, 上面的 <code>$return_var</code></p>\n<ul><li><code>passthru()</code></li></ul>\n<p><code>void passthru ( string $command [, int &amp;$return_var ] )</code><br/> 与 <code>exec()</code> 类似, 唯一不同的是, 命令的所有输出返回内容都不再导入到 <code>PHP</code> 环境, 而是直接作为输出内容, 返回到浏览器的输出上, 等效是把所有返回内容直接 <code>echo</code> 输出.</p>\n<ul><li><code>system()</code></li></ul>\n<p>这个方法和 <code>passthru()</code> 类似, 但是 <code>system()</code> 方法会在程序的每行输出的时候执行一次缓存输出动作, 可以理解为, 只要外部程序输出一行, <code>php</code> 就会马上把内容推送到浏览器, 无论这个内容是否足够大. <code>php</code>通常为了输出效率, 都会有一个输出缓存, 会等到输出内容足够大之后, 再一次输出返回. <code>system()</code> 方法则强制输出内容立刻推送, 即使输出的内容只有一个字母. 如果客户端具有实时打印服务器的返回 <code>http</code> 内容流的能力, 就可以看到 <code>system()</code> 的实时推送效果.</p>\n</blockquote>\n<p><strong>参考资料：</strong></p>\n<p>https://www.cnblogs.com/chenbjin/p/4060590.html</p>\n<p>https://blog.csdn.net/weixin_35653315/article/details/72886718</p>\n<p>https://blog.csdn.net/guofei_fly/article/details/104577019</p>\n<p>https://www.zhihu.com/question/47622493</p>\n<p>https://segmentfault.com/q/1010000010717254</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}