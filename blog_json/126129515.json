{"blogid": "126129515", "writerAge": "码龄1年", "writerBlogNum": "32", "writerCollect": "2903", "writerComment": "3788", "writerFan": "7897", "writerGrade": "6级", "writerIntegral": "6768", "writerName": "程序猿教你打篮球", "writerProfileAdress": "writer_image\\profile_126129515.jpg", "writerRankTotal": "2069", "writerRankWeekly": "104", "writerThumb": "2593", "writerVisitNum": "246339", "blog_read_count": "18479", "blog_time": "于 2022-08-07 09:00:00 发布", "blog_title": "【C语言】指针和数组的深入理解（第四期）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<div class=\"img-center\">\n<figure class=\"image\">\n<img alt=\"\" height=\"105\" src=\"image\\b4e6ca8983a34017be11d504193bfa0e.png\" width=\"112\"/>\n<figcaption>\n   篮球哥温馨提示：编程的同时不要忘记锻炼哦！\n  </figcaption>\n</figure>\n</div>\n<h1 id=\"%E4%B8%8A%E4%BA%86%E7%BC%96%E7%A8%8B%E7%9A%84%E8%B4%BC%E8%88%B9%EF%BC%8C%E5%B0%B1%E5%81%9A%E5%BF%AB%E4%B9%90%E7%9A%84%E6%B5%B7%E7%9B%97\" style=\"text-align:center;\">上了编程的贼船，就做快乐的海盗</h1>\n<hr/>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1%E3%80%81%E6%95%B0%E7%BB%84%E5%8F%82%E6%95%B0%E5%92%8C%E6%8C%87%E9%92%88%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:0px;\"><a href=\"#1%E3%80%81%E6%95%B0%E7%BB%84%E5%8F%82%E6%95%B0%E5%92%8C%E6%8C%87%E9%92%88%E5%8F%82%E6%95%B0\">1、数组参数和指针参数</a></p>\n<p id=\"1.1%20%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E4%BC%A0%E5%8F%82%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#1.1%20%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E4%BC%A0%E5%8F%82%C2%A0\">1.1 一维数组传参 </a></p>\n<p id=\"1.2%20%E4%B8%80%E7%BA%A7%E6%8C%87%E9%92%88%E4%BC%A0%E5%8F%82%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#1.2%20%E4%B8%80%E7%BA%A7%E6%8C%87%E9%92%88%E4%BC%A0%E5%8F%82%C2%A0\">1.2 一级指针传参 </a></p>\n<p id=\"1.3%20%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%8F%82%E6%95%B0%E5%92%8C%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:40px;\"><a href=\"#1.3%20%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%8F%82%E6%95%B0%E5%92%8C%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E5%8F%82%E6%95%B0\">1.3 二维数组参数和二级指针参数</a></p>\n<p id=\"1.4%20%E9%87%8E%E6%8C%87%E9%92%88%E7%9A%84%E9%97%AE%E9%A2%98-toc\" style=\"margin-left:40px;\"><a href=\"#1.4%20%E9%87%8E%E6%8C%87%E9%92%88%E7%9A%84%E9%97%AE%E9%A2%98\">1.4 野指针的问题</a></p>\n<p id=\"2%E3%80%81%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88-toc\" style=\"margin-left:0px;\"><a href=\"#2%E3%80%81%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88\">2、函数指针</a></p>\n<p id=\"3%E3%80%81%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84-toc\" style=\"margin-left:0px;\"><a href=\"#3%E3%80%81%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84\">3、函数指针数组</a></p>\n<p id=\"4%E3%80%81%E6%8C%87%E5%90%91%E5%87%BD%E6%95%B0%E6%95%B0%E7%BB%84%E7%9A%84%E6%8C%87%E9%92%88-toc\" style=\"margin-left:0px;\"><a href=\"#4%E3%80%81%E6%8C%87%E5%90%91%E5%87%BD%E6%95%B0%E6%95%B0%E7%BB%84%E7%9A%84%E6%8C%87%E9%92%88\">4、指向函数数组的指针</a></p>\n<p id=\"5%E3%80%81%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#5%E3%80%81%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%C2%A0\">5、回调函数 </a></p>\n<p id=\"6%E3%80%81%E4%B8%80%E9%81%93%E7%AC%94%E8%AF%95%E9%A2%98-toc\" style=\"margin-left:0px;\"><a href=\"#6%E3%80%81%E4%B8%80%E9%81%93%E7%AC%94%E8%AF%95%E9%A2%98\">6、一道笔试题</a></p>\n<hr/>\n<h1 id=\"1%E3%80%81%E6%95%B0%E7%BB%84%E5%8F%82%E6%95%B0%E5%92%8C%E6%8C%87%E9%92%88%E5%8F%82%E6%95%B0\"><span style=\"color:#ad720d;\"><strong>1、数组参数和指针参数</strong></span></h1>\n<h2 id=\"1.1%20%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E4%BC%A0%E5%8F%82%C2%A0\">1.1 一维数组传参 </h2>\n<p>这里在前几期我们已经初略的见识过了，但是这里我们要提一个概念，数组给函数传参是会发生降维的，降维成什么呢？我们看代码：</p>\n<p><img alt=\"\" src=\"image\\511bee13521f475db6d75b013e4e6bab.png\"/></p>\n<p>这里通过打印形参的大小，发现是 <span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">4</span></span>，其实也不奇怪，目前我们是 <span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">32</span></span> 位操作环境，所以一个指针也就是 4 个字节，所以从这里我们可以看出，数组传参的时候，是发生降维的，数组名除了 <span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">&amp;数组名</span></span> 和 <span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">sizeof(数组名)</span></span> 其他所有情况都是首元素地址，所以本质上我们是降维成指向其数组内部元素类型的指针，为什么呢，因为他是数组首元素的地址，首元素是 int 类型，所以传过去的也是对应的 int 类型的指针，同理我们需要拿同类型指针变量来接收，所以本质上我们 <span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">p</span></span> 变量中保存的就是 <span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">arr[0]</span></span> 的地址！</p>\n<p>我们在看一段代码：</p>\n<pre><code class=\"language-cpp\">void printSize(int arr[100], int n)\n{\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main()\n{\n    int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };\n    printSize(arr, 10);\n    return 0;\n}</code></pre>\n<p>如上这段代码有问题吗？其实是没有问题的，实际传递数组大小与函数形参指定的数组大小没有关系，因为他已经是指针了，只是访问方式被打通了，第二期我们有讲过，那么既然如此，我们也可以不要里面的元素个数直接成 <span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">printSize(int arr[], int n)</span></span> 这样也是可以的，至少不会让阅读者感到误会。</p>\n<h2 id=\"1.2%20%E4%B8%80%E7%BA%A7%E6%8C%87%E9%92%88%E4%BC%A0%E5%8F%82%C2%A0\">1.2 一级指针传参 </h2>\n<pre><code class=\"language-cpp\">void print(int* p, int n)\n{\n\tfor (int i = 0; i &lt; n; i++)\n\t{\n\t\tprintf(\"%d \", *(p + i));\n\t}\n    printf(\"\\n\");\n}\nint main()\n{\n\tint arr[10] = { 1,2,3,4,5,6,7,8,9,10 };\n\tint* p = arr;\n\tint sz = sizeof(arr) / sizeof(arr[0]);\n\t//一级指针p，传给函数\n\tprint(p, sz);\n\treturn 0;\n}</code></pre>\n<p><strong>这里我们需要讨论一个问题，指针作为参数需要发生拷贝吗？</strong></p>\n<p>答案是需要的，因为指针变量也是变量，在传参上得符合变量的要求，也就是在栈上开辟空间，同时我们也知道，<span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">main</span></span> 函数中的 <span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">p</span></span> 是一个局部变量，它只在 <span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">main</span></span> 函数内有效，所以只能对实参做一份拷贝，并传递给被调用的函数。</p>\n<h2 id=\"1.3%20%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%8F%82%E6%95%B0%E5%92%8C%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E5%8F%82%E6%95%B0\">1.3 二维数组参数和二级指针参数</h2>\n<p><img alt=\"\" src=\"image\\bd6d4eacc3b34e0f841ad9b6321f9961.png\"/></p>\n<p>这个例子我们发现，二维数组传参的时候也会发生降维，如何理解呢？上一期我们用了数组指针来接收了二级指针传参，这里我们就来做一个总结：</p>\n<p>任何维度的数组，传参的时候都要发生降维，降维成指向其内部元素类型的指针，那么，二维数组内部元素我们可以看成是多个一维数组，所以，二维数组传参其实是降维成指向一维数组的指针，而这里的 arr 也就代表着首元素地址，也就是第一行一维数组的地址！这也就是我们之前可以拿指针数组来接收的原因了。</p>\n<p>这里我们还是可以省略第一个下标的值：<span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">char arr[][4]</span></span> ，但是为什么不能省略第二个下标值呢？我们可以想一下，之前写用数组指针接收是这样写的 <span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">char (*p)[4]</span></span> ，上面我们提到过，<span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">int arr[]</span></span> 用来接收实参，它本质上就是个指针，所以 <span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">char arr[][4]</span></span> 本质上是个数组指针，从他的角度看，他指向了一个存放 4 个 char 类型元素的数组，所以如果省略了第二个下标则指针类型不明确！</p>\n<h2 id=\"1.4%20%E9%87%8E%E6%8C%87%E9%92%88%E7%9A%84%E9%97%AE%E9%A2%98\">1.4 野指针的问题</h2>\n<p>这个问题其实很多书中都会有写，我们这里就简单提一下：</p>\n<ul><li>指针未初始化，默认是随机值，如果直接访问会非法访问内存</li><li>指针越界访问，当指针指向不属于我们的内存，p就是野指针</li><li>指针指向的空间被释放，如果动态开辟的内存被释放但是指针没置NULL，就会形成野指针，他仍然记录者已经不属于他的内存</li><li>返回局部变量的地址，如果我们一个函数被销毁后但是仍然返回函数内局部变量的地址也会造成也会造成野指针</li></ul>\n<hr/>\n<h1 id=\"2%E3%80%81%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88\"><strong><span style=\"color:#ad720d;\">2、函数指针</span></strong></h1>\n<p>指针变量是用来保存地址的，那么函数有地址吗？有！函数是由我们自己写的一些语句构成的，程序运行的时候就会把定义好的函数中的语句调用到内存中去，那么函数代码在内存中开始的那个内存空间的地址也就是函数的地址！ </p>\n<p><img alt=\"\" src=\"image\\303a0f3e1d18471bb7b98e4a21664e4d.png\"/></p>\n<p>这里我们也能发现，函数是有地址的，而且 &amp;函数名 和 单独的函数名 都能表示函数的地址。</p>\n<p>那么我们如果想把函数的地址存起来该如何做呢？有了上面学习指针数组和数组指针的经验，其实函数指针也很好理解：</p>\n<p><span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">void  (*pfun) ()</span></span> 其实这么写可以了，我们来解读下这句代码：<span style=\"color:#956fe7;\"><span style=\"background-color:#efedf6;\">pfun</span></span> 先和 <span style=\"color:#956fe7;\"><span style=\"background-color:#efedf6;\">*</span></span> 结合，正如我们之前所说，就能说明他是一个指针，指向的是一个无参数并且无返回类型的函数。</p>\n<p>那我们如果要指向一个 <span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">int add (int x, int y)</span></span> 这样的一个函数，我们应该如何定义函数指针呢？</p>\n<p><span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">int (*p) (int, int) </span></span>如同上面一样，首先要保证 p 是指针，所以带上括号，指向的是一个返回值为 int 参数为 int int 的函数。</p>\n<p>接下来我们来使用函数指针，使用方法跟函数一样，直接把指针变量名当函数名使用即可： <img alt=\"\" src=\"image\\9e73a1347a774056b645edd7885820aa.png\"/></p>\n<p><strong>让我们来看一道有意思的题：</strong></p>\n<pre><code class=\"language-cpp\">int main()\n{\n\t(*(void (*)())0)();\n\treturn 0;\n}</code></pre>\n<p>首先这道题的解法肯定先从 0 下手，我们先分析，0 前面的 (void (*) ()) 是什么？这很明显是一个函数指针类型，所以可以理解成把 0 强转成函数指针， 也就是把 0 当成了一个函数的地址，然后再 * 引用这个地址，也就是找到 0 地址处的函数进行调用。所以此代码就是一次函数调用，被调函数无参，返回类型是void。</p>\n<hr/>\n<h1 id=\"3%E3%80%81%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84\"><span style=\"color:#ad720d;\"><strong>3、函数指针数组</strong></span></h1>\n<p>有了上面的学习就很好理解了，无非就是保存函数地址的数组，那么它的语法格式是什么呢？</p>\n<p><span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">int (*arr[10]) (int, int) </span></span></p>\n<p>这里我们可以分析到：首先 arr 跟 [ ] 先结合，所以它是个数组，这个数组的每个元素是 int (*) (int int) 类型的函数指针，它的作用主要是转移表，那我们这里就简单用一下即可</p>\n<p>假设我们需要两个整数的 + - * / 我们写完了四个函数是不是可以放到一个数组里，然后通过访问数组下标就能调用我们想用的函数了：</p>\n<pre><code class=\"language-cpp\">int add(int x, int y)\n{\n\treturn x + y;\n}\nint sub(int x, int y)\n{\n\treturn x - y;\n}\nint mul(int x, int y)\n{\n\treturn x * y;\n}\nint div(int x, int y)\n{\n\treturn x / y;\n}\n\nint main()\n{\n\tint (*arr[4]) (int, int) = { add, sub, mul, div };\n\tprintf(\"加法：%d\\n\", arr[0](1, 2));\n\tprintf(\"减法：%d\\n\", arr[1](5, 2));\n\tprintf(\"乘法：%d\\n\", arr[2](3, 3));\n\tprintf(\"除法：%d\\n\", arr[3](6, 2));\n\treturn 0;\n}</code></pre>\n<hr/>\n<h1 id=\"4%E3%80%81%E6%8C%87%E5%90%91%E5%87%BD%E6%95%B0%E6%95%B0%E7%BB%84%E7%9A%84%E6%8C%87%E9%92%88\"><span style=\"color:#ad720d;\"><strong>4、指向函数数组的指针</strong></span></h1>\n<p>看到这可能有的小伙伴觉得越来越套娃了，但其实这个也很好理解，无非就是一个指针指向了一个数组，数组每个元素是函数指针，这里我们简单了解下概念即可，用的其实也不是很多，当别人如果写了这种代码我们能看懂就行：</p>\n<p>函数指针如何定义：</p>\n<pre><code class=\"language-cpp\">int test(char* str)\n{\n\tif (str == NULL) {\n\t\treturn 0;\n\t}\n\telse\n\t{\n\t\tprintf(\"%s\\n\", str);\n\t\treturn 1;\n\t}\n}\nint main()\n{\n\t//函数指针pfun\n\tint (*pfun)(char*) = test;\n\n\t//函数指针的数组pfunArr\n\tint (*pfunArr[5])(char* str);\n\n\tpfunArr[0] = test;\n\n\t//指向函数指针数组pfunArr的指针ppfunArr\n\tint (*(*ppfunArr)[5])(char*) = &amp;pfunArr;\n\n\treturn 0;\n}</code></pre>\n<p>我们来分析一下这个：<span style=\"color:#fe2c24;\"><span style=\"background-color:#fef2f0;\">int (*(*ppfunArr)[5])(char*)</span></span>，首先看到 <span style=\"color:#956fe7;\"><span style=\"background-color:#efedf6;\">(*ppfunArr)</span></span> 这括号括起来先跟 <span style=\"color:#956fe7;\"><span style=\"background-color:#efedf6;\">*</span></span> 结合证明它是一个指针，指向的类型是什么呢？把它去掉剩下的就是它的类型，<span style=\"color:#4da8ee;\"><span style=\"background-color:#eaf4fc;\">int (*[5])(char*)</span></span>，通过这个可以发现，是一个带有5个元素的数组，每个元素的类型是一个函数指针，而函数的返回值为int，参数为 char*</p>\n<p><strong>这里我们能看懂即可。</strong></p>\n<hr/>\n<h1 id=\"5%E3%80%81%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%C2%A0\"><strong><span style=\"color:#ad720d;\">5、回调函数 </span></strong></h1>\n<p>回调函数指的就是一个通过函数指针调用的函数，如果你把函数的指针(地址)，作为参数传递给另一个函数的话，当这个指针被用来调用其指向的函数，这里就被称为回调函数。其实 qsort 函数就是很典型使用了回调函数的例子，感兴趣的可以自行下来了解一下，这里我们就简单的演示下如何使用，用回调函数实现三个数比较大小：</p>\n<pre><code class=\"language-cpp\">int max(int x, int y, int z, int(*pfun)(int, int))\n{\n\tif (x &gt; pfun(y, z)) {\n\t\treturn x;\n\t}\n\telse\n\t{\n\t\treturn pfun(y, z);\n\t}\n}\nint tmp(int x, int y) \n{\n\treturn x &gt; y ? x : y;\n}\n\nint main()\n{\n\tint ret = max(10, 20, 30, tmp);\n\tprintf(\"%d\\n\", ret);\n\treturn 0;\n}</code></pre>\n<p>比较三个数的最大值是有更优的解决方案的，我们这里只是演示一下回调函数的简单使用，跟上面一样，会用即可，其实不用研究的特别深入</p>\n<hr/>\n<h1 id=\"6%E3%80%81%E4%B8%80%E9%81%93%E7%AC%94%E8%AF%95%E9%A2%98\"><span style=\"color:#ad720d;\"><strong>6、一道笔试题</strong></span></h1>\n<pre><code class=\"language-cpp\">int main()\n{\n\tchar* c[] = { \"ENTER\",\"NEW\",\"POINT\",\"FIRST\" };\n\tchar** cp[] = { c + 3,c + 2,c + 1,c };\n\tchar*** cpp = cp;\n\tprintf(\"%s\\n\", **++cpp);\n\tprintf(\"%s\\n\", *-- * ++cpp + 3);\n\tprintf(\"%s\\n\", *cpp[-2] + 3);\n\tprintf(\"%s\\n\", cpp[-1][-1] + 1);\n\treturn 0;\n}</code></pre>\n<p>这道题我就不讲解了，学习一定得有自己研究的一个过程，包括后续 Java 的文章，每一期基本上都会留一个小疑问让大家自己下去解答，其实这道题很简单，耐心画画图就能理解了，如果你能自己解决这道题，说明你的指针的数组这两章的内容已经通关了，实在是难以解决的话，可以问一下博主。</p>\n<p>后续其实还有动态内存管理，但是这个知识点无非就是掌握对 <span style=\"color:#fe2c24;\">malloc</span>  <span style=\"color:#fe2c24;\">calloc</span>  <span style=\"color:#fe2c24;\">realloc</span>  <span style=\"color:#fe2c24;\">free</span> 的使用，如果你是以后 <span style=\"color:#fe2c24;\">C++</span> 方向可学习一下，如果你是 <span style=\"color:#fe2c24;\">Java</span> 方向其实有个基本认识就行，毕竟 Java接触底层不多，有了前面学习的铺垫，去网上看看内存管理的文章是很轻松学会的，学习最主要是培养学习的能力，</p>\n<p>最后来个大总结：从刚开始我们一共讲解了32个关键字，在关键字中也穿插了很多内容，比如大小端，结构体，往后就是符号的理解了，包括我们平常用的注释，以及各种运算符但是除法和取模我们没有放进去，这个在JavaSE系列中会介绍，再往后就是对预处理的深入理解了，最终我们以数组和指针结尾，C语言系列就到此结束了。</p>\n<hr/>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"179\" src=\"image\\6e2fef8d6e1d4e4187baf7526771617e.png\" width=\"180\"/></p>\n<p style=\"text-align:center;\"><strong> C语言深度解剖（完）</strong></p>\n</div>\n</div>"}