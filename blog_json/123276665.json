{"blogid": "123276665", "writerAge": "码龄3年", "writerBlogNum": "50", "writerCollect": "1531", "writerComment": "28", "writerFan": "12544", "writerGrade": "4级", "writerIntegral": "1117", "writerName": "HNUJSY", "writerProfileAdress": "writer_image\\profile_123276665.jpg", "writerRankTotal": "76206", "writerRankWeekly": "1534", "writerThumb": "272", "writerVisitNum": "100096", "blog_read_count": "14250", "blog_time": "已于 2022-09-02 16:24:15 修改", "blog_title": "【Python】全网最详细的Python入门基础教程（非常详细，整理而来）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>标识符</h1>\n<p>在 Python 中，所有标识符可以包括<strong>英文（区分大小写的）、数字以及下划线(_)</strong>，但不能以数字开头。</p>\n<p>以<strong>单下划线</strong>开头 _foo 的代表<strong>不能直接访问</strong>的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。<br/> 以<strong>双下划线</strong>开头的 __foo 代表类的<strong>私有成员</strong>，<br/> 以<strong>双下划线开头和结尾</strong>的 __ foo__ 代表 Python 里<strong>特殊方法专用的标识</strong>，如 __init__() 代表类的构造函数。</p>\n<h1><a id=\"_6\"></a>语句</h1>\n<p>Python 的代码块中必须使用相同数目的<strong>行首缩进空格数</strong></p>\n<p>python中<strong>单行注释</strong>采用 # 开头。<br/> python 中<strong>多行注释</strong>使用三个单引号(‘’')或三个双引号(“”\")。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># Python语句中一般以新行作为语句的结束符。但是我们可以使用【斜杠（ \\）】将一行的语句分为多行显示，</span>\n<span class=\"token comment\"># 语句中包含 [], {} 或 () 括号就不需要使用多行连接符。</span>\n<span class=\"token comment\"># Python可以在同一行中使用多条语句，语句之间使用【分号(;)】分割</span>\ntotal <span class=\"token operator\">=</span> item_one <span class=\"token operator\">+</span> \\\n        item_two <span class=\"token operator\">+</span> \\\n        item_three\ndays <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Monday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tuesday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Wednesday'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Thursday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Friday'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Python可以在同一行中使用多条语句，语句之间使用【分号(;)】分割。</span>\n<span class=\"token keyword\">import</span> sys<span class=\"token punctuation\">;</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'runoob'</span><span class=\"token punctuation\">;</span> sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Python 可以使用【引号( ' )、双引号( \" )、三引号( ''' 或 \"\"\" ) 】来表示字符串</span>\nword <span class=\"token operator\">=</span> <span class=\"token string\">'word'</span>\nsentence <span class=\"token operator\">=</span> <span class=\"token string\">\"这是一个句子。\"</span>\nparagraph <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"这是一个段落。\n包含了多个语句\"\"\"</span>\n\n<span class=\"token comment\"># print 默认输出是换行的，如果要实现【不换行需要在变量末尾加上逗号】 。</span>\n<span class=\"token keyword\">print</span> x<span class=\"token punctuation\">,</span>y\n</code></pre>\n<h1><a id=\"_34\"></a>变量</h1>\n<p>Python3 中有六个标准的数据类型：<br/> Number（数字）<br/> String（字符串）<br/> List（列表）<br/> Tuple（元组）<br/> Set（集合）<br/> Dictionary（字典）</p>\n<p>Python3 的六个标准数据类型中：<br/> 不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；<br/> 可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</p>\n<p>Number（数字）: int、float、bool、complex（复数）</p>\n<p>内部函数中，<strong>strings, tuples, 和 numbers</strong> 是不可更改的对象，全局变量必须为init变量或者在函数中用self定义；而 <strong>list,dict</strong> 等则是可以修改的对象，内部函数可以直接使用函数中的局部变量。</p>\n<pre><code class=\"prism language-python\">counter <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\"># 赋值整型变量</span>\nmiles <span class=\"token operator\">=</span> <span class=\"token number\">1000.0</span> <span class=\"token comment\"># 浮点型</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span> <span class=\"token comment\"># 字符串</span>\n\n二进制转换：\n<span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">'10'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \n<span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span>\n<span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;</span> <span class=\"token string\">'0b1010'</span>\n<span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\"># c为字符</span>\n<span class=\"token comment\"># 返回值：对应的十进制整数（ASCll数值）</span>\n<span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\"># c为字符，转化为对应的数字</span>\n\n<span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-inf'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 最小值</span>\n\na <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\na<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"john\"</span>\n\n<span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 函数用于判断给定的可迭代参数 iterable 中的所有元素是否都为 TRUE，如果是返回 True，否则返回 False。</span>\n\n<span class=\"token comment\"># 从左到右索引默认【0开始的】，最大范围是字符串【长度少1】</span>\n<span class=\"token comment\"># 从右到左索引默认【-1开始的】，最大范围是【字符串开头】</span>\n<span class=\"token comment\"># 第三个参数，参数作用是【截取的步长】</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">\"a1a2···an\"</span>   <span class=\"token comment\"># n&gt;=0</span>\n\n向上取整：math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n向下取整：math<span class=\"token punctuation\">.</span>floor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>、整除<span class=\"token string\">\"//\"</span>\n四舍五入：<span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>——奇数向远离<span class=\"token number\">0</span>取整，偶数去尾取整；或言之：奇数进位，偶数去尾\n向<span class=\"token number\">0</span>取整：<span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>List（列表）</p>\n<pre><code class=\"prism language-python\">tinylist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'john'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>            <span class=\"token comment\"># 输出列表的第一个元素</span>\n<span class=\"token keyword\">print</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>          <span class=\"token comment\"># 输出第二个至第三个元素 </span>\n<span class=\"token keyword\">print</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>           <span class=\"token comment\"># 输出从第三个开始至列表末尾的所有元素</span>\n\n<span class=\"token comment\"># 二维数组</span>\nnum_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\ndp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\nclone_node<span class=\"token punctuation\">.</span>neighbors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>cloneGraph<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> node<span class=\"token punctuation\">.</span>neighbors<span class=\"token punctuation\">]</span> \n\n<span class=\"token comment\"># 加号 + 是列表连接运算符，星号 * 是重复操作</span>\n<span class=\"token keyword\">print</span> tinylist <span class=\"token operator\">*</span> <span class=\"token number\">2</span>       <span class=\"token comment\"># 输出列表两次</span>\n<span class=\"token keyword\">print</span> <span class=\"token builtin\">list</span> <span class=\"token operator\">+</span> tinylist    <span class=\"token comment\"># 打印组合的列表</span>\n\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'Google'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 使用 append() 添加元素</span>\n<span class=\"token keyword\">del</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\t\t\t<span class=\"token comment\"># 可以使用 del 语句来删除列表的元素</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\t\t\t<span class=\"token comment\"># 指定pop参数，将会删除该位置的元素；无参数时默认删除最后一个元素</span>\n\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>sublist<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 引用传递</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sublist<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 值传递</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\t<span class=\"token number\">3</span>\t<span class=\"token comment\">#长度</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\t<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\t<span class=\"token comment\">#组合</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Hi!'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span>\t<span class=\"token punctuation\">[</span><span class=\"token string\">'Hi!'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hi!'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hi!'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hi!'</span><span class=\"token punctuation\">]</span>\t<span class=\"token comment\">#重复</span>\n<span class=\"token number\">3</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\t<span class=\"token boolean\">True</span>\t<span class=\"token comment\">#元素是否存在于列表中</span>\n<span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span> x<span class=\"token punctuation\">,</span>\t<span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span>\t<span class=\"token comment\">#迭代</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 数组反转</span>\n\n<span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 求list的最大值</span>\n\n<span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#求和</span>\n<span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>s <span class=\"token keyword\">in</span> jewelsSet <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> stones<span class=\"token punctuation\">)</span>\n\nnums<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 排序</span>\nscore<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">list</span>有一个sort方法，<span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>将<span class=\"token builtin\">list</span>进行排序，返回<span class=\"token boolean\">None</span>\nsort<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>key <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>reverse <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\nkey是一个函数，这个函数的作用是从<span class=\"token builtin\">list</span>的每个元素中提取用于当作排序依据的属性\n默认是从小到大，即reserve为<span class=\"token boolean\">False</span>的时候，如果reserve为<span class=\"token boolean\">True</span>，排列顺序就是从大到小\n<span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key <span class=\"token operator\">=</span> f<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> item<span class=\"token punctuation\">:</span>item<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>key<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> item<span class=\"token punctuation\">:</span>item<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n列表解析 List Comprehensions\n表达式：<span class=\"token punctuation\">[</span>expression <span class=\"token keyword\">for</span> iter_val <span class=\"token keyword\">in</span> iterable <span class=\"token keyword\">if</span> cond_expr<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>expression<span class=\"token punctuation\">]</span>：最后执行的结果\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">for</span> iter_val <span class=\"token keyword\">in</span> iterable<span class=\"token punctuation\">]</span>：这个可以是一个多层循环\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> cond_expr<span class=\"token punctuation\">]</span>：两个<span class=\"token keyword\">for</span>间是不能有判断语句的，判断语句只能在最后；顺序不定，默认是左到右。\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>k2<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>dict_one<span class=\"token punctuation\">,</span> dict_two<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 遍历两个list或者dict</span>\n\nneighbors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> neighbor <span class=\"token keyword\">in</span> neighbors<span class=\"token punctuation\">:</span>\n\tr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>row <span class=\"token operator\">+</span> neighbor<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\tc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>col <span class=\"token operator\">+</span> neighbor<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> u<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> neighbors<span class=\"token punctuation\">:</span>\n\t\ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 从指定索引1开始</span>\n<span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># int转化为字符串，转化为list</span>\n\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>word <span class=\"token keyword\">for</span> word<span class=\"token punctuation\">,</span>f <span class=\"token keyword\">in</span> freq<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> f<span class=\"token operator\">==</span>maxFreq<span class=\"token punctuation\">)</span> <span class=\"token comment\"># next()取list第一个值</span>\n\n<span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 求每行的最大值</span>\n<span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 求每列的最大值</span>\nstrs <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>nums<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 转换为list(str)</span>\nr1<span class=\"token punctuation\">,</span>m1 <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> num1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># list(str)转化为list(int)</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span>numSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> zipped <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>     <span class=\"token comment\"># 返回一个对象</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> zipped\n<span class=\"token operator\">&lt;</span><span class=\"token builtin\">zip</span> <span class=\"token builtin\">object</span> at <span class=\"token number\">0x103abc288</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>zipped<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># list() 转换为列表</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\"># 元素个数与最短的列表一致</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a1<span class=\"token punctuation\">,</span> a2 <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\"># 与 zip 相反，zip(*) 可理解为解压，返回二维矩阵式</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>tuple(元组)</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。</span>\ntinytuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'john'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Dict(字典)</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 字典用\"{ }\"标识。字典由索引(key)和它对应的值value组成。</span>\n<span class=\"token builtin\">dict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token builtin\">dict</span><span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"This is one\"</span>\n<span class=\"token builtin\">dict</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"This is two\"</span>\n\n<span class=\"token comment\"># 值可以取任何数据类型，但键必须是不可变的，如字符串，数字或 元组 。 用列表就不行</span>\n<span class=\"token builtin\">dict</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 以列表返回字典中的所有值</span>\n<span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\ntinydict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'runoob'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">:</span><span class=\"token number\">6734</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dept'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'sales'</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">]</span>          <span class=\"token comment\"># 输出键为'one' 的值</span>\n<span class=\"token keyword\">print</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>              <span class=\"token comment\"># 输出键为 2 的值</span>\n\n<span class=\"token keyword\">print</span> tinydict             <span class=\"token comment\"># 输出完整的字典</span>\n<span class=\"token keyword\">print</span> tinydict<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 输出所有键</span>\n<span class=\"token keyword\">print</span> tinydict<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 输出所有值</span>\nmaxFreq <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>freq<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 求value的最大值</span>\n\ntinydict<span class=\"token punctuation\">[</span><span class=\"token string\">'Age'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token comment\"># 更新</span>\ntinydict<span class=\"token punctuation\">[</span><span class=\"token string\">'School'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"RUNOOB\"</span> <span class=\"token comment\"># 添加</span>\n\n<span class=\"token keyword\">del</span> tinydict<span class=\"token punctuation\">[</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 删除键是'Name'的条目</span>\ntinydict<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 清空字典所有条目</span>\n<span class=\"token keyword\">del</span> tinydict          <span class=\"token comment\"># 删除字典</span>\n\ndefaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>   defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># defaultdict类的初始化函数接受一个类型作为参数，当所访问的键不存在的时候，可以实例化一个值作为默认值：</span>\n\ncount<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 默认值为0</span>\n\nitems<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>返回所有（key，value）元组的数组<span class=\"token punctuation\">,</span>类似于‘列表’\n<span class=\"token punctuation\">[</span>s <span class=\"token keyword\">for</span> s<span class=\"token punctuation\">,</span> c <span class=\"token keyword\">in</span> cnt<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> maxCnt<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 遍历dict</span>\n\n<span class=\"token builtin\">dict</span>排序\n<span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> item<span class=\"token punctuation\">:</span>item<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nitems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>val<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> val <span class=\"token keyword\">in</span> count<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 变更为tuple</span>\n<span class=\"token keyword\">for</span> val<span class=\"token punctuation\">,</span> key <span class=\"token keyword\">in</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 遍历排序后的tuple</span>\n\n\n</code></pre>\n<p>set(集合)</p>\n<pre><code class=\"prism language-python\">parame <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>value01<span class=\"token punctuation\">,</span>value02<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n或者\n<span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\ns<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span>\n\ns<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span> <span class=\"token comment\"># 参数可以是列表，元组，字典等</span>\n\ns<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span>\n\ns<span class=\"token punctuation\">.</span>discard<span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\ns<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nx <span class=\"token keyword\">in</span> s\n\n<span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h1><a id=\"_262\"></a>运算符</h1>\n<p><strong>/</strong> 除 - x除以y<br/> <strong>%</strong> 取模 - 返回除法的余数 <br/> <strong>**</strong> 幂 - 返回x的y次幂 <br/> <strong>//</strong> 取整除 - 返回商的整数部分（向下取整）</p>\n<p><strong>and</strong> x and y 布尔\"与\" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。 <br/> <strong>or</strong> x or y 布尔\"或\" - 如果 x 是非 0，它返回 x 的计算值，否则它返回 y 的计算值。<br/> <strong>not</strong> not x 布尔\"非\" - 如果 x 为 True，返回 False 。</p>\n<p><strong>is</strong> is 是判断两个标识符是不是引用自一个对象<br/> <strong>is not</strong> is not 是判断两个标识符是不是引用自不同对象<br/> <strong>is 与 == 区别</strong>：<br/> is 用于判断两个变量引用对象是否为同一个(同一块内存空间)， == 用于判断引用变量的值是否相等。</p>\n<h1><a id=\"_277\"></a>条件语句</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>            <span class=\"token comment\"># 判断num的值</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">'boss'</span>        \n<span class=\"token keyword\">elif</span> num <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">'user'</span>\n<span class=\"token keyword\">elif</span> num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">'worker'</span>\n<span class=\"token keyword\">elif</span> num <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>           <span class=\"token comment\"># 值小于零时输出</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">'error'</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">'roadman'</span>     <span class=\"token comment\"># 条件均不成立时输出</span>\n</code></pre>\n<h1><a id=\"_291\"></a>循环语句</h1>\n<pre><code class=\"prism language-python\">i <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span>   \n    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">if</span> i<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>     <span class=\"token comment\"># 非双数时跳过输出</span>\n        <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">print</span> i         <span class=\"token comment\"># 输出双数2、4、6、8、10</span>\n    \ni <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>            <span class=\"token comment\"># 循环条件为1必定成立</span>\n    <span class=\"token keyword\">print</span> i         <span class=\"token comment\"># 输出1~10</span>\n    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">if</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span>     <span class=\"token comment\"># 当i大于10时跳出循环</span>\n        <span class=\"token keyword\">break</span>\n\nflag <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span> <span class=\"token string\">'Given flag is really true!'</span>\n\nfruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'mango'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> fruit <span class=\"token keyword\">in</span> fruits<span class=\"token punctuation\">:</span>        <span class=\"token comment\"># 第二个实例</span>\n   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'当前水果: %s'</span><span class=\"token operator\">%</span> fruit<span class=\"token punctuation\">)</span>\n\nfruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'mango'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'当前水果 : %s'</span> <span class=\"token operator\">%</span> fruits<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 逆序</span>\n\n<span class=\"token keyword\">for</span> letter <span class=\"token keyword\">in</span> <span class=\"token string\">'Python'</span><span class=\"token punctuation\">:</span>     <span class=\"token comment\"># 第一个实例</span>\n   <span class=\"token keyword\">if</span> letter <span class=\"token operator\">==</span> <span class=\"token string\">'h'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">break</span>\n   <span class=\"token keyword\">print</span> <span class=\"token string\">'当前字母 :'</span><span class=\"token punctuation\">,</span> letter\n\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> ch <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> frequency<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> i\n\ndiff <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> a<span class=\"token punctuation\">,</span>b <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>goal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> a<span class=\"token operator\">!=</span>b<span class=\"token punctuation\">]</span>\n\n</code></pre>\n<h1><a id=\"_332\"></a>字符串</h1>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">+</span>\t字符串连接\t\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>a <span class=\"token operator\">+</span> b\n<span class=\"token string\">'HelloPython'</span>\n\n<span class=\"token operator\">*</span>\t重复输出字符串\t\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>a <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token string\">'HelloHello'</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\t通过索引获取字符串中字符\t\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token string\">'e'</span>\n\n<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">]</span>\t截取字符串中的一部分\t\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token string\">'ell'</span>\n\n<span class=\"token keyword\">in</span>\t成员运算符 <span class=\"token operator\">-</span> 如果字符串中包含给定的字符返回 <span class=\"token boolean\">True</span>\t\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span><span class=\"token string\">\"H\"</span> <span class=\"token keyword\">in</span> a\n<span class=\"token boolean\">True</span>\n<span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span>\t成员运算符 <span class=\"token operator\">-</span> 如果字符串中不包含给定的字符返回 <span class=\"token boolean\">True</span>\t\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span><span class=\"token string\">\"M\"</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> a\n<span class=\"token boolean\">True</span>\n\nr<span class=\"token operator\">/</span>R\t原始字符串 <span class=\"token operator\">-</span> 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母<span class=\"token string\">\"r\"</span>（可以大小写）以外，与普通字符串有着几乎完全相同的语法。\t\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">print</span> <span class=\"token string\">r'\\n'</span>\n\\n\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">print</span> <span class=\"token string\">R'\\n'</span>\n\\n\n\nstrs <span class=\"token operator\">=</span> <span class=\"token string\">'abcd'</span>\n<span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> strs<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n\nstrs <span class=\"token operator\">=</span> <span class=\"token string\">'abcd'</span>\n<span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n\nres <span class=\"token operator\">+=</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token comment\"># 'aaa'</span>\n\ns<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将字符串分割成单词列表</span>\n\n<span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将单词列表转换为字符串，以空格分隔</span>\n\n<span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>bulls<span class=\"token punctuation\">}</span></span><span class=\"token string\">A</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>cows<span class=\"token punctuation\">}</span></span><span class=\"token string\">B'</span></span> <span class=\"token comment\"># {}计算格式化</span>\n\n</code></pre>\n<p>字符串格式化</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span> <span class=\"token string\">\"My name is %s and weight is %d kg!\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Zara'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span> \n<span class=\"token operator\">%</span>s\t 格式化字符串\n<span class=\"token operator\">%</span>d\t 格式化整数\n<span class=\"token operator\">%</span>f\t 格式化浮点数字，可指定小数点后的精度\n</code></pre>\n<p>三引号</p>\n<pre><code class=\"prism language-python\">允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符\n <span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> hi <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''hi \nthere'''</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> hi   <span class=\"token comment\"># repr()</span>\n<span class=\"token string\">'hi\\nthere'</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">print</span> hi  <span class=\"token comment\"># str()</span>\nhi \nthere  \n</code></pre>\n<p>函数</p>\n<pre><code class=\"prism language-python\">string<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> beg<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n返回 <span class=\"token builtin\">str</span> 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 <span class=\"token builtin\">str</span> 出现的次数\nstring<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> beg<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>否则返回 <span class=\"token boolean\">False</span><span class=\"token punctuation\">.</span>\nstring<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> beg<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n检测 <span class=\"token builtin\">str</span> 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回<span class=\"token operator\">-</span><span class=\"token number\">1</span>\nstring<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n格式化字符串\nstring<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> beg<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n跟find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法一样，只不过如果<span class=\"token builtin\">str</span>不在 string中会报一个异常<span class=\"token punctuation\">.</span>\nstring<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">)</span>\n以 string 作为分隔符，将 seq 中所有的元素<span class=\"token punctuation\">(</span>的字符串表示<span class=\"token punctuation\">)</span>合并为一个新的字符串\nstring<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">,</span>  num<span class=\"token operator\">=</span>string<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n把 string 中的 str1 替换成 str2<span class=\"token punctuation\">,</span>如果 num 指定，则替换不超过 num 次<span class=\"token punctuation\">.</span>\nstring<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> num<span class=\"token operator\">=</span>string<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n以 <span class=\"token builtin\">str</span> 为分隔符切片 string，如果 num 有指定值，则仅分隔 num<span class=\"token operator\">+</span><span class=\"token number\">1</span> 个子字符串\n</code></pre>\n<h1><a id=\"_421\"></a>函数</h1>\n<p>在 python 中，<strong>strings, tuples, 和 numbers</strong> 是不可更改的对象，而 <strong>list,dict</strong> 等则是可以修改的对象。</p>\n<p>不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。<br/> 可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</p>\n<p>在Python中，数字、字符或者元组等<strong>不可变对象</strong>类型都属于<strong>值传递</strong>，而字典dict或者列表list等<strong>可变对象类型</strong>属于<strong>引用传递</strong>。<br/> 如果要想修改新赋值后原对象不变，则需要用到python的copy模块，即对象拷贝。<br/> copy.copy属于浅拷贝，拷贝的是第一层list，而copy.deepcopy属于深拷贝，对list所有子元素都进行深拷贝。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#可写函数说明</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">printinfo</span><span class=\"token punctuation\">(</span> name<span class=\"token punctuation\">,</span> age <span class=\"token operator\">=</span> <span class=\"token number\">35</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token string\">\"打印任何传入的字符串\"</span>\n   <span class=\"token keyword\">print</span> <span class=\"token string\">\"Name: \"</span><span class=\"token punctuation\">,</span> name\n   <span class=\"token keyword\">print</span> <span class=\"token string\">\"Age \"</span><span class=\"token punctuation\">,</span> age\n   <span class=\"token keyword\">return</span>\n<span class=\"token comment\">#调用printinfo函数</span>\nprintinfo<span class=\"token punctuation\">(</span> age<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"miki\"</span> <span class=\"token punctuation\">)</span>\nprintinfo<span class=\"token punctuation\">(</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"miki\"</span> <span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 可写函数说明</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">printinfo</span><span class=\"token punctuation\">(</span> arg1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>vartuple <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token string\">\"打印任何传入的参数\"</span>\n   <span class=\"token keyword\">print</span> <span class=\"token string\">\"输出: \"</span>\n   <span class=\"token keyword\">print</span> arg1\n   <span class=\"token keyword\">for</span> var <span class=\"token keyword\">in</span> vartuple<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">print</span> var\n   <span class=\"token keyword\">return</span>\n<span class=\"token comment\"># 调用printinfo 函数</span>\nprintinfo<span class=\"token punctuation\">(</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span>\nprintinfo<span class=\"token punctuation\">(</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">import</span> copy\nl1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nl2 <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">)</span>\nl3 <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">)</span>\nl2<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nl2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nl3<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\nl1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nl2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nl3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>匿名函数</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 可写函数说明</span>\n<span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">:</span> arg1 <span class=\"token operator\">+</span> arg2\n<span class=\"token comment\"># 调用sum函数</span>\n<span class=\"token keyword\">print</span> <span class=\"token string\">\"相加后的值为 : \"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token string\">\"相加后的值为 : \"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"_474\"></a>模块</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> support\n\n<span class=\"token keyword\">from</span> fib <span class=\"token keyword\">import</span> fibonacci\n\n<span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n</code></pre>\n<p><strong>搜索路径</strong><br/> 1、当前目录<br/> 2、如果不在当前目录，Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录。<br/> 3、如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/。<br/> 模块搜索路径存储在 system 模块的 sys.path 变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。</p>\n<p><strong>Python中的包</strong><br/> 包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 的应用环境。</p>\n<p>简单来说，<strong>包就是文件夹</strong>，但该文件夹下<strong>必须存在 __init__.py 文件</strong>, 该文件的内容可以为空。 __init__.py 用于标识当前文件夹是一个包。</p>\n<p>考虑一个在 package_runoob 目录下的 runoob1.py、runoob2.py、 __init__.py 文件，test.py 为测试调用包的代码，目录结构如下:<br/> test.py<br/> package_runoob<br/> |-- __init__.py<br/> |-- runoob1.py<br/> |-- runoob2.py</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 导入 Phone 包</span>\n<span class=\"token keyword\">from</span> package_runoob<span class=\"token punctuation\">.</span>runoob1 <span class=\"token keyword\">import</span> runoob1\n<span class=\"token keyword\">from</span> package_runoob<span class=\"token punctuation\">.</span>runoob2 <span class=\"token keyword\">import</span> runoob2\n \nrunoob1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nrunoob2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"_509\"></a>文件</h1>\n<pre><code class=\"prism language-python\"><span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入：\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token string\">\"你输入的内容是: \"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span>\n\nfo <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token string\">\"文件名: \"</span><span class=\"token punctuation\">,</span> fo<span class=\"token punctuation\">.</span>name\n<span class=\"token keyword\">print</span> <span class=\"token string\">\"是否已关闭 : \"</span><span class=\"token punctuation\">,</span> fo<span class=\"token punctuation\">.</span>closed\n<span class=\"token keyword\">print</span> <span class=\"token string\">\"访问模式 : \"</span><span class=\"token punctuation\">,</span> fo<span class=\"token punctuation\">.</span>mode\n<span class=\"token keyword\">print</span> <span class=\"token string\">\"末尾是否强制加空格 : \"</span><span class=\"token punctuation\">,</span> fo<span class=\"token punctuation\">.</span>softspace\n\n<span class=\"token comment\"># 打开一个文件</span>\nfo <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> fo<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nfo<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span> <span class=\"token string\">\"www.runoob.com!\\nVery good site!\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 关闭打开的文件</span>\nfo<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>文件和文件夹</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> os\nos<span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">(</span> <span class=\"token string\">\"test1.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test2.txt\"</span> <span class=\"token punctuation\">)</span>\nos<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">\"test2.txt\"</span><span class=\"token punctuation\">)</span>\n\nos<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 将当前目录改为\"/home/newdir\"</span>\nos<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"/home/newdir\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 给出当前的目录</span>\n<span class=\"token keyword\">print</span> os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 删除”/tmp/test”目录</span>\nos<span class=\"token punctuation\">.</span>rmdir<span class=\"token punctuation\">(</span> <span class=\"token string\">\"/tmp/test\"</span>  <span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"_543\"></a>异常</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    正常的操作\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n    发生异常，执行这块代码\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    如果没有异常执行这块代码\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    fh <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testfile\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span>\n    fh<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"这是一个测试文件，用于测试异常!!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> IOError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">\"Error: 没有找到文件或读取文件失败\"</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">\"内容写入文件成功\"</span>\n    fh<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span><span class=\"token operator\">-</span><span class=\"token keyword\">finally</span> 语句无论是否发生异常都将执行最后的代码。\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n<span class=\"token operator\">&lt;</span>语句<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n<span class=\"token operator\">&lt;</span>语句<span class=\"token operator\">&gt;</span>    <span class=\"token comment\">#退出try时总会执行</span>\n<span class=\"token keyword\">raise</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    fh <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testfile\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        fh<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"这是一个测试文件，用于测试异常!!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"关闭文件\"</span>\n        fh<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> IOError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">\"Error: 没有找到文件或读取文件失败\"</span>\n</code></pre>\n<h1><a id=\"_581\"></a>面向对象</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">:</span>\n   <span class=\"token string\">'所有员工的基类'</span>\n   empCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n \n   <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n      self<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> salary\n      Employee<span class=\"token punctuation\">.</span>empCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n   \n   <span class=\"token keyword\">def</span> <span class=\"token function\">displayCount</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     <span class=\"token keyword\">print</span> <span class=\"token string\">\"Total Employee %d\"</span> <span class=\"token operator\">%</span> Employee<span class=\"token punctuation\">.</span>empCount\n \n   <span class=\"token keyword\">def</span> <span class=\"token function\">displayEmployee</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">print</span> <span class=\"token string\">\"Name : \"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>  <span class=\"token string\">\", Salary: \"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>salary\n \n<span class=\"token string\">\"创建 Employee 类的第一个对象\"</span>\nemp1 <span class=\"token operator\">=</span> Employee<span class=\"token punctuation\">(</span><span class=\"token string\">\"Zara\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"创建 Employee 类的第二个对象\"</span>\nemp2 <span class=\"token operator\">=</span> Employee<span class=\"token punctuation\">(</span><span class=\"token string\">\"Manni\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span>\nemp1<span class=\"token punctuation\">.</span>displayEmployee<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nemp2<span class=\"token punctuation\">.</span>displayEmployee<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token string\">\"Total Employee %d\"</span> <span class=\"token operator\">%</span> Employee<span class=\"token punctuation\">.</span>empCount\n\n</code></pre>\n<p>empCount 变量是一个<strong>类变量</strong>，它的值将在这个类的<strong>所有实例之间共享</strong>。你可以在内部类或外部类使用 Employee.empCount 访问。</p>\n<p>第一种方法__init__()方法是一种特殊的方法，被称为类的<strong>构造函数或初始化方法</strong>，当创建了这个类的实例时就会调用该方法</p>\n<p><strong>self 代表类的实例</strong>，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。</p>\n<p><strong>继承</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>        <span class=\"token comment\"># 定义类 A</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">:</span>         <span class=\"token comment\"># 定义类 B</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>   <span class=\"token comment\"># 继承类 A 和 B</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<p><strong>重写</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">:</span>        <span class=\"token comment\"># 定义父类</span>\n   <span class=\"token keyword\">def</span> <span class=\"token function\">myMethod</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">print</span> <span class=\"token string\">'调用父类方法'</span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span>Parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 定义子类</span>\n   <span class=\"token keyword\">def</span> <span class=\"token function\">myMethod</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">print</span> <span class=\"token string\">'调用子类方法'</span>\n</code></pre>\n<p><strong>运算符重载</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">:</span>        <span class=\"token comment\"># 定义父类</span>\n   <span class=\"token keyword\">def</span> <span class=\"token function\">myMethod</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">print</span> <span class=\"token string\">'调用父类方法'</span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span>Parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 定义子类</span>\n   <span class=\"token keyword\">def</span> <span class=\"token function\">myMethod</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">print</span> <span class=\"token string\">'调用子类方法'</span>\n</code></pre>\n<p><strong>类属性和方法</strong><br/> 类的<strong>私有属性</strong><br/> __private_attrs：<strong>两个下划线开头</strong>，声明该属性为<strong>私有</strong>，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。</p>\n<p>类的<strong>方法</strong><br/> 在类的内部，使用 def 关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含<strong>参数 self</strong>,且为<strong>第一个参数</strong></p>\n<p>类的<strong>私有方法</strong><br/> __private_method：<strong>两个下划线开头</strong>，声明该方法为私有方法，不能在类的外部调用。在类的内部调用 self.__private_methods</p>\n<p><strong>单下划线、双下划线、头尾双下划线</strong>说明：<br/> __foo__: 定义的是<strong>特殊方法</strong>，一般是系统定义名字 ，类似 __init__() 之类的。</p>\n<p>_foo: 以单下划线开头的表示的是 <strong>protected 类型的变量</strong>，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *</p>\n<p>__foo: 双下划线的表示的是<strong>私有类型(private)的变量</strong>, 只能是允许这个类本身进行访问了。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}