{"blogid": "126717401", "writerAge": "码龄2年", "writerBlogNum": "40", "writerCollect": "140", "writerComment": "220", "writerFan": "333", "writerGrade": "4级", "writerIntegral": "912", "writerName": "念舒_C.ying", "writerProfileAdress": "writer_image\\profile_126717401.jpg", "writerRankTotal": "25979", "writerRankWeekly": "662", "writerThumb": "247", "writerVisitNum": "7399", "blog_read_count": "121", "blog_time": "已于 2022-09-06 15:03:08 修改", "blog_title": "【云原生 · Kubernetes】runtime组件", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p><font face=\"楷体\" size=\"3\"><strong>个人名片：</strong><br/> 因为云计算成为了监控工程师👨🏻‍💻<br/> <font color=\"#FF0000\" face=\"楷体\" size=\"3\">个人博客🏆：<a href=\"https://nianshu2022.github.io/\">念舒_C.ying</a><br/> CSDN主页✏️：<a href=\"https://blog.csdn.net/qq_52716296?spm=1011.2415.3001.5343\">念舒_C.ying</a></font></font></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>runtime组件</h3>\n<ul><li><ul><li><ul><li><a href=\"#81_crio_6\">8.1 部署cri-o组件</a></li><li><a href=\"#82__12\">8.2 下载二进制文件</a></li><li><a href=\"#83__24\">8.3 修改配置文件</a></li><li><a href=\"#84__crio_systemd_unit__196\">8.4 创建 cri-o systemd unit 文件</a></li><li><a href=\"#85__222\">8.5 分发文件</a></li><li><a href=\"#86_crio__259\">8.6 启动cri-o 服务</a></li><li><a href=\"#87__269\">8.7 检查启动结果</a></li><li><a href=\"#88__crictl__282\">8.8 创建和分发 crictl 配置文件</a></li><li><a href=\"#89_crio_308\">8.9 验证cri-o是否能正常访问</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h3><a id=\"81_crio_6\"></a>8.1 部署cri-o组件</h3>\n<p>cri-o 实现了 kubernetes 的 Container Runtime Interface (CRI) 接口，提供容器运行时核心功能，如镜像管理、容器管理等，相比 docker 更加简单、健壮和可移植。</p>\n<p><strong>containerd cadvisor接口无pod网络不能很直观的监控pod网络使用所以本文选择cri-o</strong></p>\n<h3><a id=\"82__12\"></a>8.2 下载二进制文件</h3>\n<p>下载二进制文件：</p>\n<pre><code class=\"prism language-b\">cd /opt/k8s/work\nwget https://storage.googleapis.com/cri-o/artifacts/crio.amd64.9b7f5ae815c22a1d754abfbc2890d8d4c10e240d.tar.gz\n</code></pre>\n<p>解压压缩包：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">tar</span> -xvf cri-o.amd64.9b7f5ae815c22a1d754abfbc2890d8d4c10e240d.tar.gz\n</code></pre>\n<h3><a id=\"83__24\"></a>8.3 修改配置文件</h3>\n<p>cri-o 配置文件生成：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">cd</span> cri-o/etc\n<span class=\"token function\">cat</span> <span class=\"token operator\">&gt;</span> crio.conf <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n[crio]\nroot = \"/var/lib/containers/storage\"\nrunroot = \"/var/run/containers/storage\"\nlog_dir = \"/var/log/crio/pods\"\nversion_file = \"/var/run/crio/version\"\nversion_file_persist = \"/var/lib/crio/version\"\n[crio.api]\nlisten = \"/var/run/crio/crio.sock\"\nstream_address = \"127.0.0.1\"\nstream_port = \"0\"\nstream_enable_tls = false\nstream_tls_cert = \"\"\nstream_tls_key = \"\"\nstream_tls_ca = \"\"\ngrpc_max_send_msg_size = 16777216\ngrpc_max_recv_msg_size = 16777216\n[crio.runtime]\ndefault_ulimits = [\n\"nofile=65535:65535\",\n\"nproc=65535:65535\",\n\"core=-1:-1\"\n]\ndefault_runtime = \"crun\"\nno_pivot = false\ndecryption_keys_path = \"/apps/crio/keys/\"\nconmon = \"/apps/crio/bin/conmon\"\nconmon_cgroup = \"system.slice\"\nconmon_env = [\n\"PATH=/apps/crio/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n]\ndefault_env = [\n]\nselinux = false\nseccomp_profile = \"\"\napparmor_profile = \"crio-default\"\ncgroup_manager = \"systemd\"\ndefault_capabilities = [\n\"CHOWN\",\n\"MKNOD\",\n\"DAC_OVERRIDE\",\n\"NET_ADMIN\",\n\"NET_RAW\",\n\"SYS_CHROOT\",\n\"FSETID\",\n\"FOWNER\",\n\"SETGID\",\n\"SETUID\",\n\"SETPCAP\",\n\"NET_BIND_SERVICE\",\n\"KILL\",\n]\ndefault_sysctls = [\n]\nadditional_devices = [\n]\nhooks_dir = [\n\"/apps/crio/containers/oci/hooks.d\",\n]\ndefault_mounts = [\n]\npids_limit = 102400\nlog_size_max = -1\nlog_to_journald = false\ncontainer_exits_dir = \"/apps/crio/run/crio/exits\"\ncontainer_attach_socket_dir = \"/var/run/crio\"\nbind_mount_prefix = \"\"\nread_only = false\nlog_level = \"info\"\nlog_filter = \"\"\nuid_mappings = \"\"\ngid_mappings = \"\"\nctr_stop_timeout = 30\nmanage_ns_lifecycle = true\nnamespaces_dir = \"/apps/crio/run\"\npinns_path = \"/apps/crio/bin/pinns\"\n[crio.runtime.runtimes.crun]\nruntime_path = \"/apps/crio/bin/crun\"\nruntime_type = \"oci\"\nruntime_root = \"/apps/crio/run/crun\"\nallowed_annotations = [\n\"io.containers.trace-syscall\",\n]\n[crio.image]\ndefault_transport = \"docker://\"\nglobal_auth_file = \"\"\npause_image = \"docker.io/juestnow/pause:3.5\"\npause_image_auth_file = \"\"\npause_command = \"/pause\"\nsignature_policy = \"\"\nimage_volumes = \"mkdir\"\n[crio.network]\nnetwork_dir = \"/etc/cni/net.d\"\nplugin_dirs = [\n\"/opt/cni/bin\",\n]\n[crio.metrics]\nenable_metrics = false\nmetrics_port = 9090\nEOF</span>\n</code></pre>\n<p>参数说明：</p>\n<ul><li><mark>root</mark> ：容器镜像存放目录；</li><li><mark>runroot</mark> ：容器运行目录；</li><li><mark>log_dir</mark> ：容器日志默认存放目录 kubelet指定目录就存放kubelet所指定目录；</li><li><mark>default_runtime</mark> ：指定默认运行时；</li><li><mark>conmon</mark> ：conmon二进制文件的路径，用于监控 OCI 运行时;</li><li><mark>conmon_env</mark> ：conmon 运行时的环境变量；</li><li><mark>hooks_dir</mark> ：OCIhooks 目录；</li><li><mark>container_exits_dir</mark> ：conmon 将容器出口文件写入其中的目录的路径；</li><li><mark>namespaces_dir</mark> ：管理命名空间状态被跟踪的目录。仅在 manage_ns_lifecycle 为 true 时使用；</li><li><mark>pinns_path</mark> ：pinns_path 是查找 pinns 二进制文件的路径，这是管理命名空间生命周期所必需的 ；</li><li><mark>runtime_path</mark> ：运行时可执行文件的绝对路径 ;</li><li><mark>runtime_root</mark> ：存放容器的根目录；</li><li><mark>pause_image</mark>：pause镜像路径；</li><li><mark>network_dir</mark> ： cni 配置文件路径；</li><li><mark>plugin_dirs</mark> ：cni 二进制文件存放路径；</li><li><mark>default runtime</mark>：使用crun 运行路径：/apps/crio 请根据自己环境修改</li></ul>\n<p><strong>cri-o 启动其它所需配置文件生成</strong></p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">cd</span> /opt/k8s/work/cri-o\n<span class=\"token function\">mkdir</span> containers\n<span class=\"token function\">cd</span> containers\n<span class=\"token function\">cat</span> <span class=\"token operator\">&gt;</span> policy.json <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n{\n\"default\": [\n{\n\"type\": \"insecureAcceptAnything\"\n}\n],\n\"transports\":\n{\n\"docker-daemon\":\n{\n\"\": [{\"type\":\"insecureAcceptAnything\"}]\n}\n}\n}\nEOF</span>\n<span class=\"token function\">cat</span> <span class=\"token operator\">&gt;</span>registries.conf <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n# This is a system-wide configuration file used to\n# keep track of registries for various container backends.\n# It adheres to TOML format and does not support recursive\n# lists of registries.\n# The default location for this configuration file is\n/etc/containers/registries.conf.\n# The only valid categories are: 'registries.search', 'registries.insecure',\n# and 'registries.block'.\n[registries.search]\nregistries = ['registry.access.redhat.com', 'docker.io',\n'registry.fedoraproject.org', 'quay.io', 'registry.centos.org']\n# If you need to access insecure registries, add the registry's fully-qualified name.\n# An insecure registry is one that does not have a valid SSL certificate or only does\nHTTP.\n[registries.insecure]\nregistries = []\n# If you need to block pull access from a registry, uncomment the section below\n# and add the registries fully-qualified name.\n#\n# Docker only\n[registries.block]\nregistries = []\nEOF</span>\n</code></pre>\n<h3><a id=\"84__crio_systemd_unit__196\"></a>8.4 创建 cri-o systemd unit 文件</h3>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">cd</span> /opt/k8s/work\n<span class=\"token function\">cat</span> <span class=\"token operator\">&gt;</span>crio.service <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n[Unit]\nDescription=OCI-based implementation of Kubernetes Container Runtime Interface\nDocumentation=https://github.com/github.com/cri-o/cri-o\n[Service]\nType=notify\nExecStartPre=-/sbin/modprobe br_netfilter\nExecStartPre=-/sbin/modprobe overlay\nExecStart=/apps/crio/bin/crio --config /apps/crio/etc/crio.conf --log-level info\nRestart=on-failure\nRestartSec=5\nLimitNOFILE=655350\nLimitNPROC=655350\nLimitCORE=infinity\nLimitMEMLOCK=infinity\nTasksMax=infinity\nDelegate=yes\nKillMode=process\n[Install]\nWantedBy=multi-user.target\nEOF</span>\n</code></pre>\n<h3><a id=\"85__222\"></a>8.5 分发文件</h3>\n<p>分发二进制文件及配置文件：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">cd</span> /opt/k8s/work/cri-o\n<span class=\"token function\">scp</span> -r <span class=\"token punctuation\">{<!-- --></span>bin,etc<span class=\"token punctuation\">}</span> root@192.168.2.175:/apps/crio\n<span class=\"token function\">scp</span> -r <span class=\"token punctuation\">{<!-- --></span>bin,etc<span class=\"token punctuation\">}</span> root@192.168.2.176:/apps/crio\n<span class=\"token function\">scp</span> -r <span class=\"token punctuation\">{<!-- --></span>bin,etc<span class=\"token punctuation\">}</span> root@192.168.2.177:/apps/crio\n<span class=\"token function\">scp</span> -r <span class=\"token punctuation\">{<!-- --></span>bin,etc<span class=\"token punctuation\">}</span> root@192.168.2.185:/apps/crio\n<span class=\"token function\">scp</span> -r <span class=\"token punctuation\">{<!-- --></span>bin,etc<span class=\"token punctuation\">}</span> root@192.168.2.187:/apps/crio\n<span class=\"token function\">scp</span> -r <span class=\"token punctuation\">{<!-- --></span>bin,etc<span class=\"token punctuation\">}</span> root@192.168.3.62:/apps/crio\n<span class=\"token function\">scp</span> -r <span class=\"token punctuation\">{<!-- --></span>bin,etc<span class=\"token punctuation\">}</span> root@192.168.3.70/apps/crio\n</code></pre>\n<p>分发其它配置文件：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">cd</span> /opt/k8s/work/cri-o\n<span class=\"token function\">scp</span> -r containers root@192.168.2.175:/etc/\n<span class=\"token function\">scp</span> -r containers root@192.168.2.176:/etc/\n<span class=\"token function\">scp</span> -r containers root@192.168.2.177:/etc/\n<span class=\"token function\">scp</span> -r containers root@192.168.2.185:/etc/\n<span class=\"token function\">scp</span> -r containers root@192.168.2.187:/etc/\n<span class=\"token function\">scp</span> -r containers root@192.168.3.62:/etc/\n<span class=\"token function\">scp</span> -r containers root@192.168.3.70:/etc/\n</code></pre>\n<p>分发启动文件：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">cd</span> /opt/k8s/work\n<span class=\"token function\">scp</span> crio.service root@192.168.2.175:/usr/lib/systemd/system/crio.service\n<span class=\"token function\">scp</span> crio.service root@192.168.2.176:/usr/lib/systemd/system/crio.service\n<span class=\"token function\">scp</span> crio.service root@192.168.2.177:/usr/lib/systemd/system/crio.service\n<span class=\"token function\">scp</span> crio.service root@192.168.2.185:/usr/lib/systemd/system/crio.service\n<span class=\"token function\">scp</span> crio.service root@192.168.2.187:/usr/lib/systemd/system/crio.service\n<span class=\"token function\">scp</span> crio.service root@192.168.3.62:/usr/lib/systemd/system/crio.service\n<span class=\"token function\">scp</span> crio.service root@192.168.3.70:/usr/lib/systemd/system/crio.service\n</code></pre>\n<h3><a id=\"86_crio__259\"></a>8.6 启动cri-o 服务</h3>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 全局刷新service</span>\nsystemctl daemon-reload\n<span class=\"token comment\"># 设置cri-o开机启动</span>\nsystemctl <span class=\"token function\">enable</span> crio\n<span class=\"token comment\">#重启cri-o</span>\nsystemctl restart crio\n</code></pre>\n<h3><a id=\"87__269\"></a>8.7 检查启动结果</h3>\n<p><strong>所有节点执行</strong></p>\n<pre><code class=\"prism language-bash\">systemctl status crio<span class=\"token operator\">|</span><span class=\"token function\">grep</span> Active\n<span class=\"token punctuation\">[</span>root@k8s-master-3 bin<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl status crio|grep Active</span>\nActive: active <span class=\"token punctuation\">(</span>running<span class=\"token punctuation\">)</span> since Fri 2022-02-11 13:48:39 CST<span class=\"token punctuation\">;</span> 3 days ago\n<span class=\"token punctuation\">[</span>root@k8s-master-2 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl status crio|grep Active</span>\nActive: active <span class=\"token punctuation\">(</span>running<span class=\"token punctuation\">)</span> since Fri 2022-02-11 13:49:31 CST<span class=\"token punctuation\">;</span> 3 days ago\n<span class=\"token punctuation\">[</span>root@k8s-master-1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl status crio|grep Active</span>\nActive: active <span class=\"token punctuation\">(</span>running<span class=\"token punctuation\">)</span> since Fri 2022-02-11 13:49:30 CST<span class=\"token punctuation\">;</span> 3 days ago\n<span class=\"token comment\"># 请自行全部节点检查</span>\n</code></pre>\n<h3><a id=\"88__crictl__282\"></a>8.8 创建和分发 crictl 配置文件</h3>\n<p>crictl 是兼容 CRI 容器运行时的命令行工具，提供类似于 docker 命令的功能。</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">cd</span> /opt/k8s/work\n<span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span> EOF <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> crictl.yaml\nruntime-endpoint: <span class=\"token string\">\"unix:///var/run/crio/crio.sock\"</span>\nimage-endpoint: <span class=\"token string\">\"unix:///var/run/crio/crio.sock\"</span>\ntimeout: 10\ndebug: <span class=\"token boolean\">false</span>\npull-image-on-create: <span class=\"token boolean\">true</span>\ndisable-pull-on-run: <span class=\"token boolean\">false</span>\nEOF\n</code></pre>\n<p>分发到所有节点：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">cd</span> /opt/k8s/work\n<span class=\"token function\">scp</span> crictl.yaml root@192.168.2.175:/etc/crictl.yaml\n<span class=\"token function\">scp</span> crictl.yaml root@192.168.2.176:/etc/crictl.yaml\n<span class=\"token function\">scp</span> crictl.yaml root@192.168.2.177:/etc/crictl.yaml\n<span class=\"token function\">scp</span> crictl.yaml root@192.168.2.185:/etc/crictl.yaml\n<span class=\"token function\">scp</span> crictl.yaml root@192.168.2.187:/etc/crictl.yaml\n<span class=\"token function\">scp</span> crictl.yaml root@192.168.3.62:/etc/crictl.yaml\n<span class=\"token function\">scp</span> crictl.yaml root@192.168.3.70:/etc/crictl.yaml\n</code></pre>\n<h3><a id=\"89_crio_308\"></a>8.9 验证cri-o是否能正常访问</h3>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 查询镜像</span>\ncrictl images\n<span class=\"token comment\"># pull 镜像</span>\ncrictl pull docker.io/library/busybox:1.24\n<span class=\"token comment\"># 查看容器运行状态</span>\ncrictl <span class=\"token function\">ps</span> -a\n</code></pre>\n<blockquote>\n<p>期待下次的分享，别忘了三连支持博主呀~<br/> 我是 <strong><a href=\"https://blog.csdn.net/qq_52716296?type=blog\">念舒_C.ying</a></strong> ，期待你的关注~💪💪💪</p>\n</blockquote>\n<p>附专栏链接<br/> <a href=\"https://blog.csdn.net/qq_52716296/article/details/126703722\">【云原生 · Kubernetes】apiserver高可用</a><br/> <a href=\"https://editor.csdn.net/md/?articleId=126673652\">【云原生 · Kubernetes】kubernetes v1.23.3 二进制部署（三）</a><br/> <a href=\"https://editor.csdn.net/md/?articleId=126657607\">【云原生 · Kubernetes】kubernetes v1.23.3 二进制部署（二）</a><br/> <a href=\"https://editor.csdn.net/md/?articleId=126565454\">【云原生 · Kubernetes】kubernetes v1.23.3 二进制部署（一）</a><br/> <a href=\"https://editor.csdn.net/md/?articleId=126447755\">【云原生 · Kubernetes】Kubernetes 编排部署GPMall（一）</a><br/> <a href=\"https://mp.csdn.net/mp_blog/creation/editor/126188025\">【云原生 · Kubernetes】Kubernetes容器云平台部署与运维</a><br/> <a href=\"https://mp.csdn.net/mp_blog/creation/editor/126163946\">【云原生 · Kubernetes】部署博客系统</a><br/> <a href=\"https://editor.csdn.net/md/?articleId=126133208\">【云原生 · Kubernetes】部署Kubernetes集群</a><br/> <a href=\"https://editor.csdn.net/md/?articleId=126096419\">【云原生 · Kubernetes】Kubernetes基础环境搭建</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}