{"blogid": "126165246", "writerAge": "码龄4年", "writerBlogNum": "47", "writerCollect": "70", "writerComment": "153", "writerFan": "227", "writerGrade": "3级", "writerIntegral": "728", "writerName": "H.Y_C", "writerProfileAdress": "writer_image\\profile_126165246.jpg", "writerRankTotal": "24226", "writerRankWeekly": "1263", "writerThumb": "124", "writerVisitNum": "37879", "blog_read_count": "456", "blog_time": "已于 2022-08-05 13:15:46 修改", "blog_title": "【C++】教大家在七夕new一个对象", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>new是啥？</h1>\n<p>“new”是C++的关键字之一，它一般用来在<strong>堆</strong>上创建<strong>对象</strong>，但它与一般的创建对象的方法不同，它在创建对象时，会<strong>返回这个对象的指针</strong>。</p>\n<p></p>\n<h1>堆是啥？还有……和栈有什么区别？</h1>\n<ul><li>栈是由编译器自动分配和释放的，一般存放函数的参数值、局部变量的值等（速度较快）</li><li>堆是由程序员分配和释放的，如果不释放，可能会被回收（速度慢，容易有碎片）</li></ul>\n<p></p>\n<ul><li>栈的速度快，内存空间是连续的，所以内存占用较少</li><li>堆的内存空间不是连续的，内存占用会稍大</li></ul>\n<p></p>\n<h1>那堆有什么好处呢？</h1>\n<p>栈不利于管理大内存，栈中的数据大小和生存周期都是确定的，缺乏灵活性；堆内存的管理和申请相对复杂，更消耗系统资源，所以通常生命周期更长、使用范围更广的全局变量使用堆内存。</p>\n<hr/>\n<h1>如何使用new？</h1>\n<p>先看一个小例子：</p>\n<pre><code class=\"language-cpp\">int main(void) {\n    int* p = new int[5]; //new返回的是指针\n    delete[] p;          //释放内存\n    return 0;\n}</code></pre>\n<p></p>\n<p>再来一个关于类的例子：</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\nclass test {\npublic:\n\tvoid print(int n) {\n\t\tcout &lt;&lt; \"This is t\" &lt;&lt; n &lt;&lt; \".\" &lt;&lt; endl;\n\t}\n};\nint main() {\n\ttest t1;                 //在栈(stack)上分配空间\n\ttest t2 = test();        //也是在栈(stack)上分配空间\n\ttest* t3 = new test();   //在堆(heap)上分配空间\n\ttest* t4;                //只是声明，还没有分配空间\n\tt1.print(1);\n\tt2.print(2);\n\tt3-&gt;print(3);\n\tdelete t3;\n\treturn 0;\n}</code></pre>\n<p>输出：</p>\n<blockquote>\n<p>This is t1.<br/> This is t2.<br/> This is t3.</p>\n</blockquote>\n<p>第一种和第二种基本一样，一个是隐式调用，一个是显式调用，两者都是在栈中分配内存。</p>\n<p>第三种使用了new，在堆中分配了内存。</p>\n<p>第四种只是声明，没有分配空间。如果这个时候调用t4-&gt;print(4)是会报错的。</p>\n<p><strong>Tips：栈中内存的分配和管理由操作系统决定，而堆中内存的分配和管理由管理者决定。我们需要的内存很少，你又能确定你到底需要多少内存时，用栈。当你需要在运行时才知道你到底需要多少内存时，请用堆。</strong></p>\n<hr/>\n<h1>构造函数和析构函数</h1>\n<p>关于构造函数和析构函数，后续会细讲，在这里提一下，参考一下：<a class=\"link-info\" href=\"https://blog.csdn.net/weixin_39270987/article/details/116306065?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=C++%E6%9E%84%E6%9E%90%E5%87%BD%E6%95%B0%E6%98%AF%E4%BB%80%E4%B9%88&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-116306065.142%5Ev39%5Epc_rank_v37&amp;spm=1018.2226.3001.4187\" title=\"C++构造函数和析构函数\">C++构造函数和析构函数</a>。</p>\n<p>举个例子：</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\nclass test {\npublic:\n\tvoid print(int n) {\n\t\tcout &lt;&lt; \"This is t\" &lt;&lt; n &lt;&lt; \".\" &lt;&lt; endl;\n\t}\n\ttest() {\n\t\tcout &lt;&lt; \"YES\" &lt;&lt; endl;\n\t}\n\t~test() {\n\t\tcout &lt;&lt; \"NO\" &lt;&lt; endl;\n\t}\n};\nint main() {\n\ttest t1;\n\ttest t2 = test();\n\ttest* t3 = new test();\n\ttest* t4;\n\tt1.print(1);\n\tt2.print(2);\n\tt3-&gt;print(3);\n\tdelete t3;\n\treturn 0;\n}</code></pre>\n<p>当一个对象被创建时，就会执行构造函数；当一个对象被销毁时，执行析构函数。</p>\n<p>所以以上代码的输出为：</p>\n<blockquote>\n<p>YES<br/> YES<br/> YES<br/> This is t1.<br/> This is t2.<br/> This is t3.<br/> NO<br/> NO<br/> NO</p>\n</blockquote>\n<p>但是当我们去掉第23行时，输出就变成了：</p>\n<blockquote>\n<p>YES<br/> YES<br/> YES<br/> This is t1.<br/> This is t2.<br/> This is t3.<br/> NO<br/> NO</p>\n</blockquote>\n<p>这是因为t3在堆（heap）中，不会自动销毁，所以t3的析构函数没有被执行。</p>\n<hr/>\n<p>好了，今天就到这里了，你学会new对象了吗？七夕节快乐！溜了~ </p>\n</div>\n</div>"}