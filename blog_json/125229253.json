{"blogid": "125229253", "writerAge": "码龄2年", "writerBlogNum": "34", "writerCollect": "26", "writerComment": "1", "writerFan": "3", "writerGrade": "2级", "writerIntegral": "343", "writerName": "啊肖不想上班", "writerProfileAdress": "writer_image\\profile_125229253.jpg", "writerRankTotal": "60842", "writerRankWeekly": "495576", "writerThumb": "2", "writerVisitNum": "5133", "blog_read_count": "2791", "blog_time": "于 2022-06-12 11:25:00 发布", "blog_title": "Python基础之lambda表达式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"-toc\" style=\"margin-left:0px;\"></p>\n<p id=\"1%E3%80%81lambda%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D-toc\" style=\"margin-left:0px;\"><a href=\"#1%E3%80%81lambda%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D\">1、lambda函数介绍</a></p>\n<p id=\"2%E3%80%81lambda%E5%87%BD%E6%95%B0%E4%B8%8Edef%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB-toc\" style=\"margin-left:0px;\"><a href=\"#2%E3%80%81lambda%E5%87%BD%E6%95%B0%E4%B8%8Edef%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB\">2、lambda函数与def函数的区别</a></p>\n<p id=\"3%E3%80%81lambda%E6%A1%88%E4%BE%8B-toc\" style=\"margin-left:0px;\"><a href=\"#3%E3%80%81lambda%E6%A1%88%E4%BE%8B\">3、lambda案例</a></p>\n<p id=\"4%E3%80%81map%E6%96%B9%E6%B3%95%E6%B7%B7%E6%90%AD-toc\" style=\"margin-left:0px;\"><a href=\"#4%E3%80%81map%E6%96%B9%E6%B3%95%E6%B7%B7%E6%90%AD\">4、map方法混搭</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"1%E3%80%81lambda%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D\">1、lambda函数介绍</h1>\n<p>有时在使用函数时不需要给函数分配一个名称，该函数就是“匿名函数”。在python中使用lambda表达式表示匿名函数</p>\n<p><span style=\"color:#fe2c24;\">语法：lambda 参数列表：lambda体</span></p>\n<p>lambda是关键字声明，在lambda表达式中，参数列表与函数中的参数列表一样，但不需要用小括号括起来，冒号后面是lambda体，lambda表达式的主要代码在lambda体处编写，类似于函数体。</p>\n<p>提示：lambda体不能是一个代码块，不能包含多条语句，只能包含一条语句，该语句会计算一个结果返回给lambda表达式，但与函数不同的是，不需要使用return语句返回，而且当使用函数作为参数的时候。lambda表达式非常有用，可以让代码简洁，简单。</p>\n<h1 id=\"2%E3%80%81lambda%E5%87%BD%E6%95%B0%E4%B8%8Edef%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB\">2、lambda函数与def函数的区别</h1>\n<p>1.lambda可以立即传递（无需变量），自行返回结果</p>\n<p>2.lambda在内部只能包含一行代码</p>\n<p>3.lambda是一个为编写简单函数而设计的，而def用来处理更大的任务</p>\n<p>4.lambda可以定义一个匿名函数，而def定义的函数必须有一个名字</p>\n<p>lambda函数的优势：</p>\n<p>1.对于单行函数，使用lambda表达式可以省去定义函数的过程，让代码更加简洁</p>\n<p>2.对于不需要多次复用的函数，用lambda表达式可以在用完后立即释放，提高程序执行的性能。</p>\n<h1 id=\"3%E3%80%81lambda%E6%A1%88%E4%BE%8B\">3、lambda案例</h1>\n<pre><code># def函数写法\ndef add(a, b):\n    return a + b\n\n\nprint(add(10, 20))\nprint(\"-\" * 50)\n\n\n# lambda函数写法\nadd_lambda = lambda a, b: a + b\nprint(add_lambda(10, 20))\n\n\n# 使用if判断奇偶性\ndef get_odd_even(x):\n    if x % 2 == 0:\n        return \"偶数\"\n    else:\n        return \"奇数\"\n\n\nprint(get_odd_even(10))\n\n\n# lambda函数写法\nget_odd_even1 = lambda x: \"偶数\" if x % 2 == 0 else \"奇数\"\nprint(get_odd_even1(10))\n</code></pre>\n<p>列表排序</p>\n<pre><code>a = [(2, \"小黑\"), (5, \"小白\"), (4, \"张三\"), (3, \"王五\")]\na.sort(key=lambda x: x[0])\nprint(a)</code></pre>\n<h1 id=\"4%E3%80%81map%E6%96%B9%E6%B3%95%E6%B7%B7%E6%90%AD\">4、map方法混搭</h1>\n<p>遍历序列，对序列中每个元素进行操作，最终获得新的序列</p>\n<pre><code>from functools import reduce\n\n\ndef add(num):\n    return num ** 2\n\n\nx = map(add, [1, 2, 3, 4, 5])\nprint(x)\nprint(list(x))\nprint(\"_\" * 50)\n\ny = map(lambda num: num ** 2, [1, 2, 3, 4, 5])  # map()对序列中的每个元素进行操作，获得新的序列\nprint(list(y))\n\nx = filter(lambda num: num % 2 == 0, [1, 2, 3, 4, 5])  # filter()对序列中的每个元素筛选，获得新的序列\nprint(list(x))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = reduce(lambda x, y: x + y, list1)  # reduce()对序列中元素进行累加\nprint(list2)\n</code></pre>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>"}