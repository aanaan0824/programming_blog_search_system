{"blogid": "123307604", "writerAge": "码龄15年", "writerBlogNum": "5", "writerCollect": "9", "writerComment": "0", "writerFan": "7", "writerGrade": "1级", "writerIntegral": "55", "writerName": "哈二王", "writerProfileAdress": "writer_image\\profile_123307604.jpg", "writerRankTotal": "195612", "writerRankWeekly": "363067", "writerThumb": "3", "writerVisitNum": "3409", "blog_read_count": "1367", "blog_time": "已于 2022-06-23 17:48:11 修改", "blog_title": "php-beast 加密 和 解密 详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h3>php-beast 非常易用 效率又高的php代码保护扩展，介绍一下 windows 和linux上安装和使用的问题 ，以及如何处理常见解密问题</h3>\n<p></p>\n<h1>1）Windows版本加密处理</h1>\n<p><a href=\"https://github.com/imaben/php-beast-binaries\" title=\"https://github.com/imaben/php-beast-binaries\">https://github.com/imaben/php-beast-binaries</a></p>\n<p>windows下 可以直接在这里下载dll</p>\n<p>根据自己的php版本  还有是不是线程安全的 来选择下载对应的 </p>\n<p>放到对应的扩展目录 中</p>\n<p>在配置文件 php.ini中加入扩展配置</p>\n<p>extension=php_beast_x86_nts.dll</p>\n<p></p>\n<p>但是秘钥是一样的  编译的话很多时候 会失败 或者出现lib版本不匹配问题</p>\n<p>老版本 我用vs编译过 dll收到版本限制比较麻烦处理</p>\n<p></p>\n<p>官方提供的版本很稳定 直接二进制修改对应秘钥部分就可以了</p>\n<p></p>\n<h3>【1】处理aes的部分 </h3>\n<p>ida分析到 变了对应的位置</p>\n<p>static uint8_t key[] = {<!-- --><br/>     0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,<br/>     0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,<br/> };</p>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\25f48330457520c4e590ef7403a6ce6e.png\"/></p>\n<p>根据文件偏移 用ue二进制编辑 找到对应位置 修改 保存即可</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\837b4a541e765a44d2854ee7245c796e.png\"/></p>\n<p></p>\n<h3>【2】处理des部分</h3>\n<p>ida逆向分析出秘钥变量的位置 和源码里面</p>\n<p>static char key[8] = {<!-- --><br/>     0x01, 0x1f, 0x01, 0x1f,<br/>     0x01, 0x0e, 0x01, 0x0e,<br/> };</p>\n<p>正好对应上 </p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\40ea26a89f24b31c6631d4b4d0c1ac20.png\"/></p>\n<p>用ue二进制编辑 修改保存</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\e24bd876f74e78fea75e2ea10850e441.png\"/></p>\n<p></p>\n<p>测试通过  其他加密方式就不处理了   </p>\n<p></p>\n<p></p>\n<h3>[3] encrypt_file_header_sign  修改</h3>\n<p> encrypt_file_header_sign 修改</p>\n<p>ida分析到  头 信息 位置 </p>\n<p>这个数据应该是在加密的文件最前面来标示文件是否被加密了 </p>\n<p>尽量特别一点</p>\n<p>我的版本 在7760这个位置长度是8</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\ccd88baa345ba77ac7989dc6da3b5534.png\"/></p>\n<h1> 2)Linux 版本加密处理 </h1>\n<p></p>\n<p>编译前需要修改秘钥 新版本的加密方式比较多  需要修改的地方也比较多</p>\n<p>老版本的是在key.c中修改 新版 修改是在header.c中</p>\n<p></p>\n<pre><code>aes_algo_lib.c\ndes_algo_handler.c\nheader.c</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\5cdd3262b6aba404a3d5991f3e60d8b0.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\f40efc105a2450bc7d1443241880af9c.png\"/></p>\n<p></p>\n<p>编译步骤如下</p>\n<p></p>\n<pre><code>  120  wget https://github.com/liexusong/php-beast/archive/master.zip\n  121  unzip master.zip \n  122  cd php-beast-master/\n  124  phpize\n  125  ./configure --with-php-config=/apps/php/bin/php-config \n  报错 找不到 php-config \n  \n  找一下自己的 配置在哪里 \n  130  find / -name \"php-config\"\n  \n  确定配置文件位置 \n  131  ./configure --with-php-config=/usr/local/php/bin/php-config\n  132  sudo make &amp;&amp; make install\n  133  sudo make test\n  134  php -m\n  \n  发现没成功 重新试一遍\n  135  ./configure --with-php-config=/usr/local/php/bin/php-config\n  136  sudo make &amp;&amp; make install\n  后面也要加sudo root权限\n  137  sudo make &amp;&amp; sudo make install\n  138  php -m\n  140  sudo make test\n  成功 \n  添加到php配置文件种 \n  141  php -i|grep ini\n  142  gedit /usr/local/php/etc/php.ini\n 添加 extension=\"beast.so\"\n \n  146  php -i|grep extension\n  153  service php-fpm restart\n 重启php 开始加密测试\n \n \n  154  cd tools/\n  161  php encode_file.php  --encrypt DES  --oldfile 1.php --newfile 22.php\n  162  php 22.php \n  163  cat 22\n1.php 加密后生成 2.php   加密后运行测试正常</code></pre>\n<h1></h1>\n<h1> 3）php-beast解密</h1>\n<h3>        [1]修改过的密钥的 很难解密</h3>\n<p>未知密钥只能暴力破解  分析 加密的文件头部 判断是 哪一种类型加密  三种加密类型  大多数是aes des的 base64的应该没人用 </p>\n<p>分析出加密类型 对文件主体进行破解分析 </p>\n<p> -----------------------分析说明 B-----------------------------<br/>     #define INT_SIZE            (sizeof(int))  x64上占4个字节<br/>        <br/>     php_stream_write(output_stream,encrypt_file_header_sign, encrypt_file_header_length);<br/>     php_stream_write(output_stream, (const char *)&amp;dumplen, INT_SIZE);  长度 <br/>     php_stream_write(output_stream, (const char *)&amp;expireval, INT_SIZE); 过期时间<br/>     php_stream_write(output_stream, (const char *)&amp;dumptype, INT_SIZE);   加密类型 des=1<br/>     <br/>         BEAST_ENCRYPT_TYPE_DES = 1,  dumptype默认des 值为1<br/>         BEAST_ENCRYPT_TYPE_AES,<br/>         BEAST_ENCRYPT_TYPE_BASE64,<br/>         <br/>         <br/> 使用beast_encode_file()函数加密文件，函数原型如下：<br/> beast_encode_file(string $input_file, string $output_file, int expire_timestamp, int encrypt_type)。<br/> $input_file: 要加密的文件<br/> $output_file: 输出的加密文件路径<br/> $expire_timestamp: 文件过期时间戳<br/> $encrypt_type: 加密使用的算法（支持：BEAST_ENCRYPT_TYPE_DES、BEAST_ENCRYPT_TYPE_AES）</p>\n<p>  -----------------------分析说明 E----------------------------- </p>\n<h3>【2】默认密钥加密的 ，</h3>\n<p>未修改过的最多 大多数保护代码的三方为了安装容易 都会使用默认的密钥加密方式，否则一个服务器部署多个版本php-beast 会增加难度 易用性降低</p>\n<p>        默认密钥   如下 自己解密主体就好了</p>\n<p>        des_key = \"11\"<br/>         aes_key=2b,</p>\n<p>懒人也可以 用免费的工具 解密默认的php-beast加密的文件 点击 传送门<a href=\"http://tools.rxsn.cn/phpBeast.html\" title=\"phpbeast-beast解密decode-在线工具\">phpbeast-beast解密decode-在线工具</a></p>\n</div>\n</div>"}