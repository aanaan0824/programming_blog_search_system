{"blogid": "123772771", "writerAge": "码龄3年", "writerBlogNum": "25", "writerCollect": "78", "writerComment": "8", "writerFan": "36", "writerGrade": "2级", "writerIntegral": "294", "writerName": "Mercury_春秋", "writerProfileAdress": "writer_image\\profile_123772771.jpg", "writerRankTotal": "87628", "writerRankWeekly": "487715", "writerThumb": "39", "writerVisitNum": "33457", "blog_read_count": "6153", "blog_time": "已于 2022-04-27 10:55:33 修改", "blog_title": "Java中Lambda表达式使用及详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"JavaLambda_0\"></a>Java中Lambda表达式使用及详解</h1>\n<hr/>\n<hr/>\n<h1><a id=\"_4\"></a>前言</h1>\n<hr/>\n<h1><a id=\"Lambda_8\"></a>一、Lambda表达式的简介</h1>\n<p>Lambda表达式（闭包）：java8的新特性，lambda运行将函数作为一个方法的参数，也就是函数作为参数传递到方法中。使用lambda表达式可以让代码更加简洁。</p>\n<p>Lambda表达式的使用场景：用以简化接口实现。</p>\n<p>关于接口实现，可以有很多种方式来实现。例如：设计接口的实现类、使用匿名内部类。 但是lambda表达式，比这两种方式都简单。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">test</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author: Mercury\n * Date: 2022/3/20\n * Time: 17:48\n * Description:Lambda表达式\n * Version:1.0\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test04</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//使用lambda表达式实现接口</span>\n        <span class=\"token class-name\">Test</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"Lambda_41\"></a>二、Lambda表达式对接口的要求</h1>\n<p>虽然说，lambda表达式可以在⼀定程度上简化接口的实现。但是，并不是所有的接口都可以使用lambda表达式来简洁实现的。</p>\n<p>lambda表达式毕竟只是⼀个匿名方法。当实现的接口中的方法过多或者多少的时候，lambda表达式都是不适用的。</p>\n<p>lambda表达式，只能实现函数式接口。</p>\n<h2><a id=\"1_47\"></a>1.函数式接口</h2>\n<p>如果说，⼀个接口中，要求实现类必须实现的抽象方法，有且只有⼀个！这样的接口，就是函数式接口。</p>\n<blockquote>\n<p>代码如下（示例）：</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//有且只有一个实现类必须要实现的抽象方法，所以是函数式接口</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2FunctionalInterface_58\"></a>2.@FunctionalInterface</h2>\n<p>是⼀个注解，用在接口之前，判断这个接口是否是⼀个函数式接口。 如果是函数式接口，没有任何问题。如果不是函数式接口，则会报错。功能类似于 @Override。<br/> 代码如下（示例）：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3Lambda_69\"></a>3.Lambda表达式的语法</h2>\n<h3><a id=\"1Lambda_70\"></a>1.Lambda表达式的基础语法</h3>\n<p>lambda表达式，其实本质来讲，就是⼀个匿名函数。因此在写lambda表达式的时候，不需要关心方法名是什么。</p>\n<p>实际上，我们在写lambda表达式的时候，也不需要关心返回值类型。</p>\n<p>我们在写lambda表达式的时候，只需要关注两部分内容即可：参数列表和方法体</p>\n<p>lambda表达式的基础语法：<br/> (参数1,参数2,…) -&gt; {<!-- --><br/> 方法体<br/> };</p>\n<p>参数部分：方法的参数列表，要求和实现的接口中的方法参数部分⼀致，包括参数的数量和类型。</p>\n<p>方法体部分 ： 方法的实现部分，如果接口中定义的方法有返回值，则在实现的时候，注意返回值的返回。</p>\n<p>-&gt; : 分隔参数部分和方法体部分。</p>\n<p>代码示例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">test</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author: Mercury\n * Date: 2022/3/20\n * Time: 17:48\n * Description:Lambda表达式\n * Version:1.0\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test04</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//使用lambda表达式实现接口</span>\n\n        <span class=\"token comment\">//无参</span>\n<span class=\"token comment\">//        Test test = () -&gt; {<!-- --></span>\n<span class=\"token comment\">//            System.out.println(\"test\");</span>\n<span class=\"token comment\">//        };</span>\n\n        <span class=\"token comment\">//有参</span>\n<span class=\"token comment\">//        Test test = (name,age) -&gt; {<!-- --></span>\n<span class=\"token comment\">//            System.out.println(name+age+\"岁了！\");</span>\n<span class=\"token comment\">//        };</span>\n<span class=\"token comment\">//        test.test(\"小新\",18);</span>\n\n        <span class=\"token comment\">//有参+返回值</span>\n        <span class=\"token class-name\">Test</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span>  <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span>age<span class=\"token operator\">+</span><span class=\"token string\">\"岁了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> age <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小新\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//无参</span>\n<span class=\"token comment\">//interface Test{<!-- --></span>\n<span class=\"token comment\">//    public void test();</span>\n<span class=\"token comment\">//}</span>\n\n<span class=\"token comment\">//有参 无返回值</span>\n<span class=\"token comment\">//interface Test{<!-- --></span>\n<span class=\"token comment\">//    public void test(String name,int age);</span>\n<span class=\"token comment\">//}</span>\n\n<span class=\"token comment\">//有参 有返回值</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"4Lambda_141\"></a>4.Lambda表达式的语法进阶</h2>\n<p><strong>参数部分的精简</strong></p>\n<p>参数的类型</p>\n<p>由于在接口的方法中，已经定义了每⼀个参数的类型是什么。而且在使用lambda表达式实现接口的时候，必须要保证参数的数量和类 型需要和接口中的方法保持⼀致。因此，此时lambda表达式中的参数的类型可以省略不写。</p>\n<p><strong>注意点：</strong></p>\n<p>如果需要省略参数的类型，要保证：要省略， 每⼀个参数的类型都必须省略不写。绝对不能出现，有的参数类型省略了，有的参数类型没有省略。</p>\n<pre><code class=\"prism language-java\">        <span class=\"token comment\">//有参+返回值</span>\n        <span class=\"token class-name\">Test</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span>  <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span>age<span class=\"token operator\">+</span><span class=\"token string\">\"岁了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> age <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小新\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>参数的小括号</strong></p>\n<p>如果方法的参数列表中的参数数量 有且只有⼀个，此时，参数列表的小括号是可以省略不写的。</p>\n<p><strong>注意事项：</strong></p>\n<ul><li>只有当参数的数量是⼀个的时候， 多了、少了都不能省略。</li><li>省略掉小括号的同时， 必须要省略参数的类型</li></ul>\n<pre><code class=\"prism language-java\">        <span class=\"token comment\">//一个参数</span>\n        <span class=\"token class-name\">Test</span> test <span class=\"token operator\">=</span> name <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小新\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>方法体部分的精简</strong></p>\n<p>方法体⼤括号的精简</p>\n<p>当⼀个方法体中的逻辑，有且只有⼀句的情况下，⼤括号可以省略</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">Test</span> test <span class=\"token operator\">=</span> name <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        test<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小新\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>return的精简</strong></p>\n<p>如果⼀个方法中唯⼀的⼀条语句是⼀个返回语句， 此时在省略掉大括号的同时， 也必须省略掉return。</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">Test</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"_198\"></a>三、函数引用</h1>\n<p>lambda表达式是为了简化接口的实现的。在lambda表达式中，不应该出现比较复杂的逻辑。如果在lambda表达式中出现了过于复杂的逻辑，会对程序的可读性造成非常大的影响。如果在lambda表达式中需要处理的逻辑比较复杂，⼀般情况会单独的写⼀个方法。在lambda表达式中直接引用这个方法即可。</p>\n<p><strong>函数引用</strong>：引用⼀个已经存在的方法，使其替代lambda表达式完成接口的实现</p>\n<h2><a id=\"1_204\"></a>1.静态方法的引用</h2>\n<p><strong>语法</strong>：类::静态方法</p>\n<p><strong>注意事项：</strong></p>\n<ul><li>在引用的方法后面，不要添加小括号。</li><li>引用的这个方法，参数（数量、类型）和返回值，必须要跟接口中定义的⼀致</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">test</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author: Mercury\n * Date: 2022/3/20\n * Time: 18:17\n * Description:lambda表达式静态方法引用\n * Version:1.0\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test05</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//实现多个参数，一个返回值的接口</span>\n        <span class=\"token comment\">//对一个静态方法的引用，语法：类::静态方法</span>\n        <span class=\"token class-name\">Test1</span> test1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Calculator</span><span class=\"token operator\">::</span><span class=\"token function\">calculate</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>test1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 稍微复杂的逻辑：计算a和b的差值的绝对值</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Test1</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2_247\"></a>2.非静态方法的引用</h2>\n<p><strong>语法</strong>：对象::非静态方法</p>\n<p><strong>注意事项</strong>:</p>\n<ul><li>在引用的方法后⾯，不要添加小括号。</li><li>引用的这个方法， 参数（数量、类型） 和 返回值， 必须要跟接口中定义的⼀致。</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">test</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author: Mercury\n * Date: 2022/3/21\n * Time: 8:14\n * Description:lambda表达式对非静态方法的引用\n * Version:1.0\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test06</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//对非静态方法的引用，需要使用对象来完成</span>\n        <span class=\"token class-name\">Test2</span> test2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">::</span><span class=\"token function\">calculate</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>test2<span class=\"token punctuation\">.</span><span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> a <span class=\"token operator\">&gt;</span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">-</span> b <span class=\"token operator\">:</span> b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Test2</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3_281\"></a>3.构造方法的引用</h2>\n<p><strong>使用场景</strong></p>\n<p>如果某⼀个函数式接口中定义的方法，仅仅是为了得到⼀个类的对象。此时我们就可以使用构造方法的引用，简化这个方法的实现。</p>\n<p><strong>语法</strong>：类名::new</p>\n<p><strong>注意事项</strong>：可以通过接口中的方法的参数， 区分引用不同的构造方法。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cq<span class=\"token punctuation\">.</span>test</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author: Mercury\n * Date: 2022/4/27\n * Time: 10:31\n * Description:lambda构造方法的引用\n * Version:1.0\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//无参构造</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一个Dog对象通过无参构造被实例化了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//有参构造</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一个Dog对象通过有参构造被实例化了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//定义一个函数式接口,用以获取无参的对象</span>\n    <span class=\"token annotation punctuation\">@FunctionalInterface</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">GetDog</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//若此方法仅仅是为了获得一个Dog对象，而且通过无参构造去获取一个Dog对象作为返回值</span>\n        <span class=\"token class-name\">Dog</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//定义一个函数式接口,用以获取有参的对象</span>\n    <span class=\"token annotation punctuation\">@FunctionalInterface</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">GetDogWithParameter</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//若此方法仅仅是为了获得一个Dog对象，而且通过有参构造去获取一个Dog对象作为返回值</span>\n        <span class=\"token class-name\">Dog</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 测试</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//lambda表达式实现接口</span>\n        <span class=\"token class-name\">GetDog</span> lm <span class=\"token operator\">=</span> <span class=\"token class-name\">Dog</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//引用到Dog类中的无参构造方法，获取到一个Dog对象</span>\n        <span class=\"token class-name\">Dog</span> dog <span class=\"token operator\">=</span> lm<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修狗的名字：\"</span><span class=\"token operator\">+</span>dog<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\" 修狗的年龄：\"</span><span class=\"token operator\">+</span>dog<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//修狗的名字：null 修狗的年龄：0</span>\n        <span class=\"token class-name\">GetDogWithParameter</span> lm2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Dog</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//引用到Dog类中的有参构造，来获取一个Dog对象</span>\n        <span class=\"token class-name\">Dog</span> dog1 <span class=\"token operator\">=</span> lm2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"萨摩耶\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修狗的名字：\"</span><span class=\"token operator\">+</span>dog1<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\" 修狗的年龄：\"</span><span class=\"token operator\">+</span>dog1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//修狗的名字：萨摩耶 修狗的年龄：2</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"Lambda_342\"></a>四、Lambda表达式需要注意的问题</h1>\n<p>这⾥类似于局部内部类、匿名内部类，依然存在闭包的问题。</p>\n<p>如果在lambda表达式中，使用到了局部变量，那么这个局部变量会被隐式的声明为 final。是⼀个常量，不能修改值。</p>\n<hr/>\n<h1><a id=\"_349\"></a>总结</h1>\n<p>以上就是Lambda表达式相关内容，本文仅简单介绍了Lambda表达式的使用，祝各位小伙伴们学习愉快，欢迎交流！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}