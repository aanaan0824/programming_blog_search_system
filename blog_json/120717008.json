{"blogid": "120717008", "writerAge": "码龄4年", "writerBlogNum": "5", "writerCollect": "19", "writerComment": "8", "writerFan": "1", "writerGrade": "1级", "writerIntegral": "65", "writerName": "浪人甲虫", "writerProfileAdress": "writer_image\\profile_120717008.jpg", "writerRankTotal": "152904", "writerRankWeekly": "340529", "writerThumb": "7", "writerVisitNum": "7825", "blog_read_count": "2275", "blog_time": "于 2021-10-12 09:51:53 发布", "blog_title": "C#逐行读取txt文件（超大文件支持）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>最近笔者在写一个小程序的时候，遇到一个问题，相信这个问题很多朋友碰到了，即在使用系统提供的方法System.IO.StreamReader.ReadLine()时，遇到“OutOfMemoryException ”问题。 因需求目标就是逐行读取txt文件，然后进行数据解析，第一次碰到该问题还真是一脸懵逼。</p>\n<p>经过实际测试，在读取几百兆字节以内的txt文件时，System.IO.StreamReader.ReadLine()方法为首选，但是当txt文件超过1GB后，大概率会出“OutOfMemoryException ”问题。此外该方法在读取的时候占用内存极高，笔者在使用该方法读取一个1.3GB的txt文件时，占用内存最高达2.7GB，最后报告“OutOfMemoryException ”问题。</p>\n<p>关于该问题，微软的帮助文档是这样解释的：</p>\n<p><em>如果当前方法引发，则 OutOfMemoryException 读取器在基础字符串中的位置将由该方法可以读取的字符数提前，但已读入内部缓冲区的字符将被 ReadLine 丢弃。 由于不能更改读取器在字符串中的位置，因此，已读取的字符不可恢复，只能通过重新初始化来访问 StringReader 。 若要避免这种情况，请使用 Read 方法并在预分配的缓冲区中存储读取字符。</em></p>\n<p>写的这是个什么玩意？让初学编程的笔者属实难以理解！ 经过琢磨，笔者使用了StreamReader.Read()方法，重写了一个类，实现了逐行读取txt文件的功能，具体实现如下：</p>\n<p>先定义一个类：<br/> //定义类开始</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReadTxtFileLine</span>\n    <span class=\"token punctuation\">{<!-- --></span>    <span class=\"token comment\">//本类用于使用StreamReader.Read()方法，实现逐行读取文本文件，</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _IsReadEnd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//文件读取的状态，当为false时，代表未读完最后一行，true为读完了最后一行</span>\n        <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>StreamReader</span> sr1<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _LoopRowNumNow <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//定义了一个是否读到最后的属性，数据类型为整数</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> IsReadEnd <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span> <span class=\"token operator\">=&gt;</span> _IsReadEnd<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//构造函数</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">ReadTxtFileLine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> TxtFilePath<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Encoding</span> FileEncoding<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            sr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>StreamReader</span><span class=\"token punctuation\">(</span>TxtFilePath<span class=\"token punctuation\">,</span> FileEncoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _IsReadEnd <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//成员方法，执行一次，返回1行的结果，当全部读完，依然执行该方法，将返回空字符串\"\"</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetLineStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> strLine <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> charCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sr1<span class=\"token punctuation\">.</span><span class=\"token function\">Peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                charCode <span class=\"token operator\">=</span> sr1<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>charCode <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//发现换行符char10就返回拼接字符串</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    _LoopRowNumNow<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> strLine<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>charCode <span class=\"token operator\">!=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>    <span class=\"token comment\">//将一行的数据重新拼接起来</span>\n                        strLine <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>charCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            _IsReadEnd <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            sr1<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sr1<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> strLine<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>//定义类结束</p>\n<p>假设在控制台的main方法中使用：<br/> 要读取的文本文件为一个UTF8编码的txt文件，内容如下：<br/> <img alt=\"使用Windows换行标识符\" src=\"image\\4fe281cecabc4c3a8d45732ece0b68c2.png\"/></p>\n<p>假设需要在控制台程序的main方法中逐行读取并打印，代码如下：</p>\n<pre><code class=\"prism language-csharp\">  <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path <span class=\"token operator\">=</span> <span class=\"token string\">@\"D:\\测试样例.txt\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Encoding</span> encoding <span class=\"token operator\">=</span> UTF8Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">ReadTxtFileLine</span> ReadTxtFileTest1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReadTxtFileLine</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ReadTxtFileTest1<span class=\"token punctuation\">.</span>IsReadEnd<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str <span class=\"token operator\">=</span> ReadTxtFileTest1<span class=\"token punctuation\">.</span><span class=\"token function\">GetLineStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//这里将读出来的1行赋值给str</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本行的数据为:{0}\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行结果如下图所示：<br/> <img alt=\"执行结果\" src=\"image\\a6096a6fe308412188184cd50e5c3618.png\"/><br/> 使用注意事项：<br/> 1、该类有个属性IsReadEnd ，取值为0，代表未开始读和未生效，取值为-1，代表整个文件已经读取结束<br/> 2、当属性IsReadEnd 为-1时，代表文件已经读取结束。此时执行成员方法GetLineStr()，将会返回一个空字符串“”。<br/> 3、读取过程中内存占用率非常低，绝对不会出现StringReader.ReadLine方法在遇到大文件时抛出的错误。<br/> 4、只能从文件的前读到后，不能切换到任意行读取。<br/> 5、在文件读取完毕后，反复执行成员方法GetLineStr()，将会反复返回空字符串“”，可以通过属性字段IsReadEnd 的取值判断是否需要当前的返回值。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}