{"blogid": "119992775", "writerAge": "码龄2年", "writerBlogNum": "87", "writerCollect": "84697", "writerComment": "12816", "writerFan": "84369", "writerGrade": "8级", "writerIntegral": "48459", "writerName": "退休的龙叔", "writerProfileAdress": "writer_image\\profile_119992775.jpg", "writerRankTotal": "62", "writerRankWeekly": "1394", "writerThumb": "33483", "writerVisitNum": "2435559", "blog_read_count": "60020", "blog_time": "于 2021-08-30 11:23:49 发布", "blog_title": "Python正则表达式保姆式教学，带你精通大名鼎鼎的正则！", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>正则作为处理字符串的一个实用工具，在Python中经常会用到，比如爬虫爬取数据时常用正则来检索字符串等等。正则表达式已经内嵌在Python中，通过导入re模块就可以使用，作为刚学Python的新手大多数都听说”正则“这个术语。</p>\n<p>今天来给大家分享一份关于比较详细的Python正则表达式宝典，学会之后你将对正则表达式达到精通的状态。</p>\n<p><img alt=\"请添加图片描述\" src=\"image\\b0f3f391f36c4c4186afb0c767449760.jpg\"/></p>\n<hr/>\n<h2><a id=\"re_7\"></a>一、re模块</h2>\n<p>在讲正则表达式之前，我们首先得知道哪里用得到正则表达式。正则表达式是用在findall()方法当中，大多数的字符串检索都可以通过findall()来完成。</p>\n<p><strong>1.导入re模块</strong><br/> 在使用正则表达式之前，需要导入re模块。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> re\t\n</code></pre>\n<p><strong>2.findall（）的语法：</strong></p>\n<p>导入了re模块之后就可以使用findall（）方法了，那么我们必须要清楚findall（）的语法是怎么规定的。</p>\n<pre><code class=\"prism language-python\">findall<span class=\"token punctuation\">(</span>正则表达式，目标字符串<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>不难看出findall（）的是由正则表达式和目标字符串组成，目标字符串就是你要检索的东西，那么如何检索则是通过正则表达式来进行操作，也就是我们今天的重点。</p>\n<p>使用findall（）之后返回的结果是一个列表，列表中是符合正则要求的字符串</p>\n<hr/>\n<h2><a id=\"_29\"></a>二、正则表达式</h2>\n<h3><a id=\"_31\"></a>(一).字符串的匹配</h3>\n<p><strong>1.普通字符</strong><br/> 大多数的字母和字符都可以进行自身匹配。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> re\na <span class=\"token operator\">=</span> <span class=\"token string\">\"abc123+-*\"</span>\nb <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>2.元字符</strong></p>\n<p>元字符指的是. ^ $ ? + {} \\ []之类的特殊字符，通过它们我们可以对目标字符串进行个性化检索，返回我们要的结果。</p>\n<p>这里我给大家介绍10个常用的元字符以及它们的用法，这里我先给大家做1个简单的汇总，便于记忆，下面会挨个讲解每一个元字符的使用。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8c37aa9d37e14e9880b384e5b85721e3.png\"/></p>\n<p><strong>（1） []</strong></p>\n<p>[] 的使用方式主要有以下三种：</p>\n<ul><li><strong>常用来指定一个字符集。</strong></li></ul>\n<pre><code class=\"prism language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"a123456b\"</span>\nrule <span class=\"token operator\">=</span> <span class=\"token string\">\"a[0-9][1-6][1-6][1-6][1-6][1-6]b\"</span>\t<span class=\"token comment\">#这里暂时先用这种麻烦点的方法，后面有更容易的，不用敲这么多[1-6]</span>\nl <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果为：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'a123456b'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<ul><li><strong>可以表示一个范围。</strong></li></ul>\n<p>例如要在字符串\"abcabcaccaac\"中选出abc元素：</p>\n<pre><code class=\"prism language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcabcaccaac\"</span>\nrule <span class=\"token operator\">=</span> <span class=\"token string\">\"a[a,b,c]c\"</span>  <span class=\"token comment\"># rule = \"a[a-z0-9][a-z0-9][a-z0-9][a-z0-9]c\"\t</span>\nl <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果为：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'acc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aac'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<ul><li><strong>[] 内的元字符不起作用，只表示普通字符。</strong></li></ul>\n<p>例如要在字符串“caa<sup>bcabcaabc”中选出“caa</sup>”：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"caa[a，^]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"caa^bcabcaabc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果为：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'caa^'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>注意点：当<sup>在[]的第一个位置时，表示除了a以外的都进行匹配，例如把[]中的</sup>和a换一下位置：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"caa[^,a]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"caa^bcabcaabc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'caa^'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'caab'</span><span class=\"token punctuation\">]</span> \n</code></pre>\n<p><strong>（2）^</strong></p>\n<p>^ 通常用来匹配行首，例如：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"^abca\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcabcabc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'abca'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\724785f6d8f5422e8c52eaef8b552226.jpg\"/></p>\n<blockquote>\n<p><a href=\"https://docs.qq.com/doc/DWnZYcmdtUnB6bklC?_t=1631499952768\">粉丝专属福利</a></p>\n</blockquote>\n<p><strong>(3) $</strong><br/> $ 通常用来匹配行尾，例如：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"abc$\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"accabcabc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8ca641e45b994987a9a23ba070981eee.jpg\"/></p>\n<p><strong>（4）</strong>\\</p>\n<p>​ 反斜杠后面可以加不同的字符表示不同的特殊含义，常见的有以下3种。</p>\n<ul><li>\\d:匹配任何十进制数等价于[0-9]</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"c\\d\\d\\da\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc123abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果为：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'c123a'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>\\可以转义成普通字符，例如：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\^abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"^abc^abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'^abc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'^abc'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<ul><li>s</li></ul>\n<p><strong>匹配任何的空白字符</strong>例如：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\s\\s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a     c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'  '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'  '</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<ul><li><strong>\\w</strong></li></ul>\n<p>匹配任何字母数字和下划线，等价于[a-zA-Z0-9_]，例如：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\w\\w\\w\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc12_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'12_'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1e9ee27672ed489dafb11d1c71a02a02.jpg\"/></p>\n<p><strong>（5）{n}</strong></p>\n<p>{n}可以避免重复写，比如前面我们用\\w时写了3次\\w，而这里我们这需要用用上{n}就可以，n表示匹配的次数，例如：</p>\n<pre><code>print(re.findall(\"\\w{2}\", \"abc12_\"))\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'ab'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2_'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>（6）</strong>*</p>\n<p>*表示匹配零次或多次（尽可能的多去匹配），例如：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"010-\\d*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"010-123456789\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'010-123456789'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>**（7） + **</p>\n<p>+表示匹配一次或多次，例如</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"010-\\d+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"010-123456789\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'010-123456789'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>（8） .</strong></p>\n<p>.是个点，这里不是很明显，它用来操作除了换行符以外的任何字符，例如：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"010\\n?!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>(9) ？</strong></p>\n<p>？表示匹配一次或零次</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"010-\\d?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"010-123456789\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'010-1'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>这里要注意一下贪婪模式和非贪婪模式。</p>\n<p>贪婪模式：尽可能多的去匹配数据，表现为\\d后面加某个元字符，例如\\d*：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"010-\\d*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"010-123456789\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'010-123456789'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>非贪婪模式：尽可能少的去匹配数据，表现为\\d后面加？，例如\\d?</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"010-\\d*?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"010-123456789\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出为：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'010-'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>(10){m,n}</strong><br/> m,n指的是十进制数,表示最少重复m次，最多重复n次，例如：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"010-\\d{3,5}\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"010-123456789\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'010-12345'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>加上？表示尽可能少的去匹配</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"010-\\d{3,5}?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"010-123456789\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'010-123'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>{m,n}还有其他的一些灵活的写法，比如：</p>\n<ul><li>{1,} 相当于前面提过的 + 的效果</li><li>{0，1} 相当于前面提过的 ？ 的效果</li><li>{0，} 相当于前面提过的 * 的效果</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\14d7db206f8943418d2a43026521c828.jpg\"/></p>\n<p>关于常用的元字符以及使用方法就先到这里，我们再来看看正则的其他知识。</p>\n<hr/>\n<h2><a id=\"_373\"></a>（二）正则的使用</h2>\n<p><strong>1.编译正则</strong></p>\n<p>在Python中，re模块可通过compile() 方法来编译正则，re.compile(正则表达式),例如：</p>\n<pre><code class=\"prism language-python\"> s <span class=\"token operator\">=</span> <span class=\"token string\">\"010-123456789\"</span>\n rule <span class=\"token operator\">=</span> <span class=\"token string\">\"010-\\d*\"</span>\n rule_compile <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">)</span> <span class=\"token comment\">#返回一个对象</span>\n <span class=\"token comment\"># print(rule_compile)</span>\n s_compile <span class=\"token operator\">=</span> rule_compile<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s_compile<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#打印compile()返回的对象是什么</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'010-123456789'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>2.正则对象的使用方法</strong></p>\n<p>正则对象的使用方法不仅仅是通过我们前面所介绍的 findall() 来使用，还可以通过其他的方法进行使用，效果是不一样的，这里我做个简单的总结：</p>\n<p>（1）findall()<br/> 找到re匹配的所有字符串，返回一个列表</p>\n<p>（2）search()<br/> 扫描字符串，找到这个re匹配的位置（仅仅是第一个查到的）</p>\n<p>（3）match()<br/> 决定re是否在字符串刚开始的位置（匹配行首）</p>\n<p>就拿上面的 compile()编译正则之后返回的对象来做举例，我们这里不用 findall() ,用 match() 来看一下结果如何：</p>\n<pre><code class=\"prism language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"010-123456789\"</span>\nrule <span class=\"token operator\">=</span> <span class=\"token string\">\"010-\\d*\"</span>\nrule_compile <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回一个对象</span>\n<span class=\"token comment\"># print(rule_compile)</span>\ns_compile <span class=\"token operator\">=</span> rule_compile<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s_compile<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 打印compile()返回的对象是什么</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&lt;</span>re<span class=\"token punctuation\">.</span>Match <span class=\"token builtin\">object</span><span class=\"token punctuation\">;</span> span<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> match<span class=\"token operator\">=</span><span class=\"token string\">'010-123456789'</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>可以看出结果是1个match 对象，开始下标位置为0~13，match为 010-123456789 。既然返回的是对象，那么接下来我们来讲讲这个match 对象的一些操作方法。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\511fa5bb3d9e404398729084f797a7d6.jpg\"/></p>\n<blockquote>\n<p><a href=\"https://docs.qq.com/doc/DWnZYcmdtUnB6bklC\">粉丝福利</a></p>\n</blockquote>\n<p><strong>3.Match object 的操作方法</strong></p>\n<p>这里先介绍一下方法，后面我再举例，Match对象常见的使用方法有以下几个：</p>\n<p>（1）group()<br/> 返回re匹配的字符串</p>\n<p>（2）start()<br/> 返回匹配开始的位置</p>\n<p>（3）end()<br/> 返回匹配结束的位置</p>\n<p>（4）span()<br/> 返回一个元组：（开始,结束）的位置</p>\n<p>举例：用span()来对search()返回的对象进行操作：</p>\n<pre><code class=\"prism language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"010-123456789\"</span>\nrule <span class=\"token operator\">=</span> <span class=\"token string\">\"010-\\d*\"</span>\nrule_compile <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回一个对象</span>\ns_compile <span class=\"token operator\">=</span> rule_compile<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s_compile<span class=\"token punctuation\">.</span>span<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#用span()处理返回的对象</span>\n</code></pre>\n<p>结果为：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>4.re模块的函数</strong></p>\n<p>re模块中除了上面介绍的findall()函数之外，还有其他的函数，来做一个介绍：</p>\n<p><strong>（1）findall()</strong><br/> 根据正则表达式返回匹配到的所有字符串，这个我就不多说了，前面都是在介绍它。</p>\n<p><strong>（2）sub(正则,新字符串,原字符串)</strong><br/> sub() 函数的功能是替换字符串，例如：</p>\n<pre><code class=\"prism language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcabcacc\"</span> <span class=\"token comment\">#原字符串</span>\nl <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ddd\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>   <span class=\"token comment\">#通过sub()处理过的字符串</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-python\">ddddddacc\t<span class=\"token comment\">#把abc全部替换成ddd</span>\n</code></pre>\n<p><strong>(3)subn(正则,新字符串,原字符串)</strong><br/> subn()的作用是替换字符串，并返回替换的次数</p>\n<pre><code class=\"prism language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcabcacc\"</span> <span class=\"token comment\">#原字符串</span>\nl <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>subn<span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ddd\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>   <span class=\"token comment\">#通过sub()处理过的字符串</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">(</span><span class=\"token string\">'ddddddacc'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>（4）split()</strong><br/> split()分割字符串，例如：</p>\n<pre><code class=\"prism language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcabcacc\"</span>\nl <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ca'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cacc'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1b31fa941d2944b8a9131f06c72a5cd8.jpg\"/></p>\n<hr/>\n<p>关于正则，我就讲这么多了，正则几乎是Python所有方向中是必不可少的一个基础，祝你的Python之旅学有所成！</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\884b16d55fc040289932e9f4b3d23c91.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}