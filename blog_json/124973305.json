{"blogid": "124973305", "writerAge": "码龄2年", "writerBlogNum": "93", "writerCollect": "5031", "writerComment": "5454", "writerFan": "4922", "writerGrade": "7级", "writerIntegral": "13521", "writerName": "一名不会打字的程序员", "writerProfileAdress": "writer_image\\profile_124973305.jpg", "writerRankTotal": "786", "writerRankWeekly": "73", "writerThumb": "5255", "writerVisitNum": "78834", "blog_read_count": "1831", "blog_time": "已于 2022-07-11 17:01:47 修改", "blog_title": "刨析《C语言》【进阶】付费知识【二】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>👩‍💻博客主页：<a href=\"https://blog.csdn.net/weixin_51568389?spm=1011.2421.3001.5343\">choice~的博客主页</a><br/> ✨欢迎关注🖱点赞🎀收藏⭐留言✒<br/> 🔮本文由choice~原创，csdn首发！<br/> 😘系列专栏：<a href=\"https://blog.csdn.net/weixin_51568389/category_11830402.html?spm=1001.2014.3001.5482\">C语言进阶</a>、<a href=\"https://blog.csdn.net/weixin_51568389/category_11816257.html?spm=1001.2014.3001.5482\">数据结构与算法</a>、<a href=\"https://blog.csdn.net/weixin_51568389/category_11908469.html\">牛客刷题训练营</a><br/> 👕参考网站：牛客网<br/> 💻首发时间：🎞2022年7月10日🎠<br/> 🎨你的收入跟你的不可替代成正比<br/> 🀄如果觉得博主的文章还不错的话，请三连支持一下博主哦<br/> 💬给大家介绍一个求职刷题收割offer的地方👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_choice_c\">点击进入网站</a></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_11\">计算长度</a></li><li><ul><li><a href=\"#sizeof_13\">sizeof:</a></li><li><a href=\"#strlen_141\">strlen</a></li></ul>\n</li><li><a href=\"#_166\">指针</a></li><li><ul><li><ul><li><a href=\"#_168\">指针变量的大小</a></li><li><a href=\"#_197\">声明指针</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_209\">结构体</a></li><li><ul><li><ul><li><a href=\"#_251\">数组元素地址</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_263\">字符串</a></li><li><ul><li><ul><li><a href=\"#_265\">字符串的比较</a></li><li><a href=\"#_283\">字符串的拷贝</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_311\">结构体</a></li><li><ul><li><ul><li><a href=\"#_313\">内存对齐</a></li><li><a href=\"#_338\">修改默认对齐数</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_11\"></a>计算长度</h1>\n<h2><a id=\"sizeof_13\"></a>sizeof:</h2>\n<blockquote>\n<p>计算变量，数组，类型的大小，单位是字节（操作符）</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//sizeof(数组名)-数组名表示整个数组的-计算的是整个数组的大小</span>\n\t<span class=\"token comment\">//&amp;数组名 - 数组名表示的是整个数组，取出的是整个数组的地址</span>\n\t<span class=\"token comment\">//除此之外，所有的数组名都是数组首元素的地址</span>\n\n\t<span class=\"token comment\">//整形数组</span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//16</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8 a+0是第一个元素的地址，sizeof(a+0)计算的是地址的大小</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4 *a是数组的第一个元素，sizoef(*a)计算的是第一个元素的大小</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8  a+1是第二个元素的地址，sizeof(a+1)计算的地址的大小</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4 计算的是第二个元素的大小</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 4/8 -@a虽然数组的地址，但也是地址，sizeof(&amp;a)计算的是一个地址的大小</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//16 -计算的数组的大小</span>\n\t<span class=\"token comment\">//&amp;a -- int(*p)[4]=&amp;a;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8 - &amp;a+1--数组后面的空间的地址</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8</span>\n\n\t<span class=\"token comment\">//字符数组</span>\n\t<span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'f'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//6</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8 -指针大小 -指针所指地址是4个字节地址</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\4e21e19165ff4c65a28fcb43f3775049.png\"/><br/> <img alt=\"请添加图片描述\" src=\"image\\ff95e968e7f740f985a04b0dcad71510.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//sizeof(数组名)-数组名表示整个数组的-计算的是整个数组的大小</span>\n\t<span class=\"token comment\">//&amp;数组名 - 数组名表示的是整个数组，取出的是整个数组的地址</span>\n\t<span class=\"token comment\">//除此之外，所有的数组名都是数组首元素的地址</span>\n\n\t<span class=\"token comment\">//整形数组</span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//16</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8 a+0是第一个元素的地址，sizeof(a+0)计算的是地址的大小</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4 *a是数组的第一个元素，sizoef(*a)计算的是第一个元素的大小</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8  a+1是第二个元素的地址，sizeof(a+1)计算的地址的大小</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4 计算的是第二个元素的大小</span>\n\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 4/8 -@a虽然数组的地址，但也是地址，sizeof(&amp;a)计算的是一个地址的大小</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//16 -计算的数组的大小</span>\n\t<span class=\"token comment\">//&amp;a -- int(*p)[4]=&amp;a;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8 - &amp;a+1--数组后面的空间的地址</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8</span>\n\n\n\t<span class=\"token comment\">//字符数组</span>\n\n\t<span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'f'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//6</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8 -指针大小 -指针所指地址是4个字节地址</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4/8</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\bcb957342d5e45ea9a64d320917051a2.png\"/><br/> <img alt=\"请添加图片描述\" src=\"image\\37c407ceacd6453593a304cd993b7dae.png\"/></p>\n<pre><code class=\"prism language-c\">\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//48 = 3*4*sizeof(int)</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4 - a[0][0] - 是第一行第一个元素</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//16</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4 解释：a[0]作为数组名并没有单独放在sizeof内部，</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//也没取地址,所以a[0]就是第一行第一个算的地址</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//a[0]+1,就是第一行第二个元素的地址</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4 - 解释：*(a[0] + 1)是第一行第二个元素</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4 - 解释：a是二维数组的数组名，并没有取地址</span>\n\t<span class=\"token comment\">//也没有单独放在sizeof内部,所以a就表示二维数组首元素的地址，即：第一行的地址</span>\n\t<span class=\"token comment\">//a + 1就是二维数组第二行的地址</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//16 解释：a+1是第二行的地址，所以*（a+1）表示第二行</span>\n\t<span class=\"token comment\">//所以计算的就是第2行的大小</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4 解释：a[0]是第一行的数组名，</span>\n\t<span class=\"token comment\">//&amp;a[0]取出的就是第一行的地址,&amp;a[0]+1 就是第二行的地址</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&amp;a[0]+1 就是第二行的地址</span>\n\t<span class=\"token comment\">//*(&amp;a[0]+1) 就是第二行，所以计算的第二行的地址</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//16 解释：a作为二维数组的数组名，没有&amp;，没有单独放在sizeof内部</span>\n\t<span class=\"token comment\">//a就是首元素的地址，即第一行的地址，所以*a就是第一行，计算的是第一行的大小</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//16 解释：a[3]其实是第四行的数组名（如果有的话）</span>\n\t<span class=\"token comment\">//所以其实不存在，也能通过类型计算大小的</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"strlen_141\"></a>strlen</h2>\n<blockquote>\n<p>strlen:是求字符串长度的，只能对字符串长度（库函数-使用得引用头文件）</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'f'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//随机值  -遇到‘\\0’结束</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//随机值</span>\n\t<span class=\"token comment\">//printf(\"%d\\n\",strlen(*arr));//err</span>\n\t<span class=\"token comment\">//printf(\"%d\\n\",strlen(arr[1]));//err</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//随机值</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//随机值- 6</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//随机值- 1</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>因为strlen只对字符串求长度，对字符会产生随机值</p>\n</blockquote>\n<h1><a id=\"_166\"></a>指针</h1>\n<h3><a id=\"_168\"></a>指针变量的大小</h3>\n<p>32位计算机系统 整形指针占4个字节，实参传字符形参也是4个字节</p>\n<blockquote>\n<p>void test1 (char ch)//char *ch<br/> {<!-- --></p>\n<pre><code class=\"prism language-c\"> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4个字节，因为传入的是字符的首地址，也就是指针char *ch ,指针长度为4，所以char字符类型的传参是传的指针字节</span>\n</code></pre>\n<p>}<br/> char arr[10]={0};<br/> printf(“%d\\n”,sizeof(char));//10<br/> test1(ch);//字符数组首元素</p>\n</blockquote>\n<ul><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 只要在32位操作环境下，不管是什么类型，都是4个字节</li></ul>\n<p><img alt=\"请添加图片描述\" src=\"image\\801c032f8f8340a7bb1069f5d54dc31d.png\"/></p>\n<ul><li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"disabled\" type=\"checkbox\"/> 在64位环境下</li></ul>\n<p><img alt=\"请添加图片描述\" src=\"image\\78dad213281c426c88bbd9b2026bb1a1.png\"/></p>\n<h3><a id=\"_197\"></a>声明指针</h3>\n<p>int* a,b,c;<br/> 事实上只声明了变量a是指针类型<br/> 如果要声明三个指针：<br/> int *a ,*b, *c;</p>\n<p><img alt=\"请添加图片描述\" src=\"image\\5cc3bcb452d74d5b939854fd22528ade.png\"/></p>\n<h1><a id=\"_209\"></a>结构体</h1>\n<ol><li> <p>​ . ：结构体变量.成员</p> </li><li> <p>​ -&gt; ：结构体指针-&gt;成员</p> <p><img alt=\"请添加图片描述\" src=\"image\\27095647d5a94e49b3aa37347737681c.png\"/></p> </li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h&gt;</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> book_name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Book</span> b<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"c语言程序设计\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Book</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//更改价格</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>price<span class=\"token operator\">=</span><span class=\"token number\">19</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//等同于p-&gt;price</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//更改书名</span>\n\t<span class=\"token comment\">//使用库函数字符串拷贝函数</span>\n\t<span class=\"token comment\">//b1.name=\"c++\";//error</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>book_name<span class=\"token punctuation\">,</span><span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//因为book_name是字符型的数组名，数组本身是个地址，而price是变量</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>book_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t %d\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-&gt;</span>book_name<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-&gt;</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>book_name<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//(*p).book_name,(*p).price等同于p-&gt;book_name,p-&gt;price</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>book_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_251\"></a>数组元素地址</h3>\n<blockquote>\n<p>1.sizeof(数组名),计算整个数组的大小，sizeof内部单独放一个数组名，数组名表示整个数组<br/> 2.&amp;数组名，取出的数组的地址。&amp;数组名，数组名表示整个数组。</p>\n</blockquote>\n<p>除此1，2两种情况之外，所以的数组名都表示数首元素的地址</p>\n<p><img alt=\"请添加图片描述\" src=\"image\\23389c79574846db97cf71a6fe37521a.png\"/></p>\n<h1><a id=\"_263\"></a>字符串</h1>\n<h3><a id=\"_265\"></a>字符串的比较</h3>\n<blockquote>\n<p>stract(str1,str1); //err,因为自己追加自己会把’\\0’覆盖掉，导致没有一直都没有’\\0’反复循环</p>\n</blockquote>\n<p><img alt=\"请添加图片描述\" src=\"image\\d187056acad54f04ac7cad8b104e79c0.png\"/></p>\n<p>不能用两个字符串比较两个字符串相等，应该使用字符串<br/> 例：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">char</span> password<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sacnf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//if(pwssword == \"123456\")//err</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"相同\"</span><span class=\"token punctuation\">)</span>；\n</code></pre>\n<h3><a id=\"_283\"></a>字符串的拷贝</h3>\n<p>把字符串拷贝到目标地址，调试我们发现，遇到’\\0’结束拷贝</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//更改书名</span>\n\t<span class=\"token comment\">//使用库函数字符串拷贝函数</span>\n\t<span class=\"token comment\">//b1.name=\"c++\";//error</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>book_name<span class=\"token punctuation\">,</span><span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//因为book_name是字符型的数组名，数组本身是个地址</span>\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\df8b3017510d4516933cbe43a7f36e1a.png\"/></p>\n<p>当拷贝的不是’\\0’结束，程序运行出错</p>\n<p><img alt=\"请添加图片描述\" src=\"image\\402c5584f38241799c43660ca0dcb2f2.png\"/></p>\n<ul><li>源字符串必须以 ‘\\0’ 结束。</li><li>会将源字符串中的 ‘\\0’ 拷贝到目标空间。</li><li>目标空间必须足够大，以确保能存放源字符串。</li><li>目标空间必须可变。</li><li>学会模拟实现。<br/> <strong>注意：源字符必须是字符数组或者是一个指向动态分配内存的数组的指针，不能使用字符串常量！</strong></li></ul>\n<h1><a id=\"_311\"></a>结构体</h1>\n<h3><a id=\"_313\"></a>内存对齐</h3>\n<p>总体来说：</p>\n<blockquote>\n<p>结构体的内存对齐是拿空间来换取时间的做法。<br/> 起。</p>\n</blockquote>\n<blockquote>\n<p>S1和S2类型的成员一模一样，但是S1和S2所占空间的大小有了一些区别。</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//例如：</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">S1</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">char</span> c1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> c2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">S2</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">char</span> c1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> c2<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_338\"></a>修改默认对齐数</h3>\n<p>之前我们见过了 #pragma 这个预处理指令，这里我们再次使用，可以改变我们的默认对齐数。</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//例如：</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">S1</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">char</span> c1<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">char</span> c2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">S2</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">char</span> c1<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">char</span> c2<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></span><span class=\"token comment\">//设置默认对齐数为8</span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">S1</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">char</span> c1<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">char</span> c2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token comment\">//取消设置的默认对齐数，还原为默认</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span><span class=\"token comment\">//设置默认对齐数为1</span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">S2</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">char</span> c1<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">char</span> c2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token comment\">//取消设置的默认对齐数，还原为默认</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//输出的结果是什么？</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}