{"blogid": "123628350", "writerAge": "码龄3年", "writerBlogNum": "84", "writerCollect": "647", "writerComment": "34", "writerFan": "66", "writerGrade": "5级", "writerIntegral": "1633", "writerName": "杂化轨道VSEPR", "writerProfileAdress": "writer_image\\profile_123628350.jpg", "writerRankTotal": "41730", "writerRankWeekly": "219845", "writerThumb": "168", "writerVisitNum": "130330", "blog_read_count": "7803", "blog_time": "已于 2022-03-22 20:10:52 修改", "blog_title": "Hashcat从入门到入土（一）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h4><a id=\"Hashcat_0\"></a>Hashcat的官方是这么介绍自己的</h4>\n<blockquote>\n<p>Hashcat is a password recovery tool. It had a proprietary code base until 2015, but was then released as open source software. Versions are available for Linux, OS X, and Windows. Examples of hashcat-supported hashing algorithms are LM hashes, MD4, MD5, SHA-family and Unix Crypt formats as well as algorithms used in MySQL and Cisco PIX.</p>\n</blockquote>\n<h4><a id=\"_4\"></a>这段话的意思大概是这样，可以看出它支持的范围相当广泛</h4>\n<blockquote>\n<p>Hashcat是一个密码恢复工具。直到2015年，它都有一个专有的代码库，但随后作为开源软件发布。版本适用于 Linux、OS X 和 Windows。哈希卡支持的哈希算法的示例包括 LM 哈希、MD4、MD5、SHA 系列和 Unix Crypt 格式，以及 MySQL 和 Cisco PIX 中使用的算法。</p>\n</blockquote>\n<h4><a id=\"Hashcat_6\"></a>Hashcat安装教程</h4>\n<p>Hashcat的官网是<a href=\"https://hashcat.net/hashcat/\">Hashcat.net</a> ,点击进去后会有两个下载选项，我们选择<strong>hashcat binaries</strong>，这个是直接可以在Windows下运行的，另一个需要使用Cygwin进行编译，为了快速入门，我们选择前者。</p>\n<p>下载压缩包后解压到指定目录，这里是需要使用命令行运行的，我们这里使用power shell在文件夹目录中打开：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c59341d9443040e484eb5abc7d47dfee.png\"/></p>\n<p>按住shift，单击鼠标右键后选择用powershell运行选项卡，可能会提示你Windows不信任此路径，这时候使用<code>.\\hashcat --help</code>来查看所有命令，其实最常用的命令也就那几个，到时候有需要再查询即可。总的来说，Hashcat是一款非常强大的软件，很值得花时间来学习。</p>\n<p>我们可以使用<code>.\\hashcat -a</code>来选择破解密码的模式，后面接不同的参数代表着不同的破解方式</p>\n<table><thead><tr><th>a后面接的字符</th><th>破解方式</th></tr></thead><tbody><tr><td>3</td><td>Brute Force Attack 暴力破解</td></tr><tr><td>1</td><td>Combination attack 联合两个list进行组合破解</td></tr><tr><td>0</td><td>Dictionary attack 就是认为的把人们最常使用的密码譬如宠物名字之类的做成一个集后暴力破解</td></tr><tr><td>6 or 7</td><td>Mask attack就是另一种暴力破解，只不过你之前提供了你知道的密码的一些细节，使得它更精准</td></tr></tbody></table>\n<p>也可以说的更简洁，<code>.\\hashcat</code>后面连接的字母表示你要选择的工作模式，比如说我选择了a就是要让Hashcat进入密码破解模式，然后后面接的数字就选择更为详细的工作模式<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5a5a0515039f4c52a23058f5a53d47b7.png\"/><br/> 如图所示，你可以选择你想要的工作模式，官方也对每个工作模式给出了十分详细的解释<br/> <img alt=\"Hashmode\" src=\"image\\c9b4c486f5844f5fa546bc50f0bf2028.png\"/><br/> 官方也对每一个哈希模式给出了相应的数字代码</p>\n<h4><a id=\"rar_27\"></a>暴力破解演示rar加密演示</h4>\n<p>在开始之前，只有一个Hashcat还是不够的，我们还需要一个叫做John the Ripper的软件，下载地址<a href=\"https://www.openwall.com/john/\">join the ripper</a>它主要是配合Hashcat，由john the ripper解出密文后再使用hashcat转换成明文。</p>\n<h5><a id=\"jointheripperhash_29\"></a>首先使用join-the-ripper获取hash值</h5>\n<p>在join-the-ripper的文件夹目录中使用powershell打开，以我的文件目录为例：</p>\n<pre><code class=\"prism language-bash\">PS D:\\john-1.9.0-jumbo-1-win64\\john-1.9.0-jumbo-1-win64\\run<span class=\"token operator\">&gt;</span> .\\zip2john.exe C:\\Users\\gyc\\Desktop\\test2.zip\n</code></pre>\n<p>运行结果如图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7cca1a4db9824830a26ef7ee05201ebb.png\"/><br/> 可以看到Hash值为：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token variable\">$pkzip2</span><span class=\"token variable\">$2*1*1*0*8*15*de6c*5eb5*8a813c6eeff405eabee095d30add557ee06dfa6824*2*0*14*1f*a9536a8e*28*31*8*14*a953*5eb2*3415ef6fcda105a1356aa93c3d5b843345a24e2f*</span>$/pkzip2$\n</code></pre>\n<p>复制这个哈希值<br/> 到这里，我们可以看到我们已经知道这个压缩包里装的是什么文件了<br/> 下一步，使用Hashcat获得明文密码，同样的，在Hashcat的目录里打开powershell，以我的为例</p>\n<pre><code class=\"prism language-bash\">PS D:\\hashcat-6.2.5\\hashcat-6.2.5<span class=\"token operator\">&gt;</span> .\\hashcat.exe -a 3 -m 17225 <span class=\"token variable\">$pkzip2</span><span class=\"token variable\">$2*1*1*0*8*15*de6c*5eb5*8a813c6eeff405eabee095d30add557ee06dfa6824*2*0*14*1f*a9536a8e*28*31*8*14*a953*5eb2*3415ef6fcda105a1356aa93c3d5b843345a24e2f*</span>$/pkzip2$\n</code></pre>\n<p>现在可以看到它报了一个错<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a5530d69be704efdbd07e34c510c5588.png\"/></p>\n<h4><a id=\"_51\"></a>这是为什么呢？</h4>\n<p>查阅资料得知，hashcat对cpu解密的更新好久没有更新了。按照提示，下一步我们计划安装CUDA tools。<br/> 我们这里选择local tools进行下载<a href=\"https://developer.nvidia.com/cuda-downloads?target_os=Windows&amp;target_arch=x86_64&amp;target_version=10&amp;target_type=exe_local\">CUDA tools 本地端下载</a>，可根据实际需要选择。</p>\n<h5><a id=\"CUDA_54\"></a>安装CUDA如下</h5>\n<p><img alt=\"安装CUDAtools\" src=\"image\\d414156606874d5895ccda2600f58ca6.png\"/><br/> 然后我们重启试一下，运行<code>.\\hashcat.exe -a 3 -m 17225+你的哈希值</code><br/> 发现还是不可以，报错第一行提示<code>cuFuncSetAttribute is missing from CUDA shared library</code>我们上网搜一下，在hashcat的官方论坛找到了这个答案：</p>\n<blockquote>\n<p>nvrtc64_80.dll means that you have CUDA 8 installed. This is the wrong version because it’s way too old.<br/> Please get fully rid of CUDA 8 (uninstall it completely by also using driver fusion and/or ddu and remove the remaining libs).<br/> what you should have with the correct CUDA 10.1 installed is: nvrtc64_101_0.dll</p>\n</blockquote>\n<p>我们回到Powershell里面也可以发现<br/> <img alt=\"在这里插入图片描述\" src=\"image\\81c05d00e8624721877f20f684920b0c.png\"/><br/> 这里显示这个CUDA版本为8.0.0，这就奇了怪了，刚刚明明是在官网下载的最新版，怎么会这样？<br/> 继续排查<br/> 我们去Windows的system32的文件夹下面查看一下有没有<code>nvrtc.dll</code>这个文件，找一下，果然没有，但是我下载这个dll文件并把它放入<code>system32</code>文件夹以后，问题并没有得到解决，我目前这台电脑属于公司的古董台式机，实在不想折腾显卡驱动什么的，换一种方法。于是又找了一个word文件加密进行解密。</p>\n<h4><a id=\"word_68\"></a>解密加密后的word文件</h4>\n<p>我们用命令行依次运行john the rapper、hashcat。为了方便输入，我们可以把要提取hash的文件放在D盘的根目录下面，运行命令来提取哈希（在你的john the ripper&gt;run 所在的文件目录下打开命令行）：</p>\n<pre><code class=\"prism language-bash\">office2john.py D:\\test.docx\n</code></pre>\n<p>补充一点，如果你的电脑安装了pycharm之类的python IDE，你需要在前面加上python，不然会直接打开pycharm让你编辑。</p>\n<pre><code class=\"prism language-bash\">python office2john.py D:\\test.docx\n</code></pre>\n<p>输出结果类似于：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\690807e8610a41399bfd864875372c4a.png\"/><br/> 后面长长的一串就是hash</p>\n<pre><code class=\"prism language-bash\"><span class=\"token keyword\">:</span><span class=\"token variable\">$office</span><span class=\"token variable\">$*2007*20*128*16*a819d3a96e4099cc410f0aaa2138333a*dbaea363dcfe06cbc115cad79baaf7d9*cd20755cdf30aa2be75af4033c4a784b620e57e2</span>\n</code></pre>\n<p>office后面的2007要记好，这个代表这个文件加密采用的office版本，后面使用hashcat是要依次为依据来查询hashcat的mode code，可以把这个hash值保存在txt文件中方便后续使用。<br/> 然后在hashcat的文件夹目录下打开，我们可以使用<code>hashcat.exe --help</code>命令来查询mode code，前面求哈希的时候我们就已经知道了hash头是$office$2007，查表得知mode code 为 9400，然后输入：</p>\n<pre><code class=\"prism language-bash\">hashcat.exe -m 9400 -a 3 +你刚才获取的哈希值+ ?d?d?d?d?d?d+ -o out.txt\n</code></pre>\n<p>每一个?d代表一位密码位，这里相当于是告诉程序我的密码有多少位，减少了计算的时间，然后再输出到hashcat同目录文件夹下面的out.txt文件中。<br/> 算hash值过程如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3f927887070f4df09713c0a5d0ddfb47.png\"/><br/> 可以看到statue为runing<br/> 你可以在下面看到cpu温度与风扇转速<br/> 运行结果如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f3256123ff0c4c37b0941ca93ac97ccd.png\"/><br/> 可以看到现在的statue为exhausted，表示算力用尽，我目前这个台式机实在太垃圾，正常你算完就应该显示cracked。<br/> 这个系列后面有人看再更新，包括爆破wifi密码什么的，慢慢更新</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}