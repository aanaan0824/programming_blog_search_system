{"blogid": "121375968", "writerAge": "码龄11年", "writerBlogNum": "3780", "writerCollect": "5262", "writerComment": "522", "writerFan": "2658", "writerGrade": "9级", "writerIntegral": "63838", "writerName": "allway2", "writerProfileAdress": "writer_image\\profile_121375968.jpg", "writerRankTotal": "50", "writerRankWeekly": "1307", "writerThumb": "1067", "writerVisitNum": "4696914", "blog_read_count": "12570", "blog_time": "于 2021-11-17 13:34:29 发布", "blog_title": "Python SQLite3 教程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">在本教程中，我们将使用 Python 以编程方式处理 SQLite3 数据库。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">SQLite 通常是一种无服务器数据库，您可以在包括 Python 在内的几乎所有编程语言中使用它。无服务器意味着无需安装单独的服务器来使用 SQLite，因此您可以直接与数据库连接。</span></span></p>\n<div style=\"margin-left:0;\">\n<div style=\"margin-left:auto;\">\n<div id=\"div-gpt-ad-1626737267606-0\">\n<div id=\"google_ads_iframe_/22404337467,21830842126/likegeeks-300x250-Content-Left10_0__container__\"></div>\n</div>\n<div id=\"div-gpt-ad-1626751162109-0\">\n<div id=\"google_ads_iframe_/22404337467,21830842126/likegeeks-300x250-Content-Right10_0__container__\"></div>\n</div>\n</div>\n</div>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">SQLite 是一个轻量级数据库，它可以提供零配置的关系数据库管理系统，因为无需配置或设置任何东西即可使用它。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">我们将使用 SQLite 版本 3 或 SQLite3，所以让我们开始吧。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\"> </span></span></p>\n<div id=\"ez-toc-container\">\n<div>\n<p style=\"margin-left:0;text-align:left;\"><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\">目录</span></span></p>\n</div>\n<ul style=\"margin-left:0;\"><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#Create_Connection\" title=\"创建连接\">创建连接</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#SQLite3_Cursor\" title=\"SQLite3 游标\">SQLite3 游标</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#Create_Database\" title=\"创建数据库\">创建数据库</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#Create_Table\" title=\"创建表\">创建表</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#Insert_in_Table\" title=\"插入表格\">插入表格</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#Update_Table\" title=\"更新表\">更新表</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#Select_statement\" title=\"选择语句\">选择语句</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-8\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#Fetch_all_data\" title=\"获取所有数据\">获取所有数据</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-9\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#SQLite3_rowcount\" title=\"SQLite3 行数\">SQLite3 行数</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-10\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#List_tables\" title=\"列出表格\">列出表格</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-11\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#Check_if_a_table_exists_or_not\" title=\"检查表是否存在\">检查表是否存在</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-12\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#Drop_table\" title=\"删除表\">删除表</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-13\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#SQLite3_exceptions\" title=\"SQLite3 异常\">SQLite3 异常</a></span></span>\n<ul style=\"margin-left:1.5em;\"><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-14\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#DatabaseError\" title=\"数据库错误\">数据库错误</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-15\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#IntegrityError\" title=\"完整性错误\">完整性错误</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-16\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#ProgrammingError\" title=\"编程错误\">编程错误</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-17\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#OperationalError\" title=\"操作错误\">操作错误</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-18\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#NotSupportedError\" title=\"不支持错误\">不支持错误</a></span></span></li></ul></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-19\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#SQLite3_Executemany_Bulk_insert\" title=\"SQLite3 Executemany（批量插入）\">SQLite3 Executemany（批量插入）</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-20\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#Close_Connection\" title=\"关闭连接\">关闭连接</a></span></span></li><li><span style=\"background-color:#f9f9f9;\"><span style=\"color:#1a202c;\"><a class=\"ez-toc-link ez-toc-heading-21\" href=\"https://likegeeks.com/python-sqlite3-tutorial/#SQLite3_datetime\" title=\"SQLite3 日期时间\">SQLite3 日期时间</a></span></span></li></ul>\n</div>\n<div style=\"margin-left:0;\">\n<div id=\"div-gpt-ad-1626734616338-0\"></div>\n</div>\n<h2><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">创建连接</span></span></strong></h2>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">要在 Python 中使用 SQLite3，首先，您必须导入<em>sqlite3</em>模块，然后创建一个连接对象，它将我们连接到数据库并让我们执行 SQL 语句。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">您可以使用<em>connect()</em>函数创建连接对象：</span></span></p>\n<pre class=\"has\"><code class=\"language-decode:true language-python\">import sqlite3\n\ncon = sqlite3.connect('mydatabase.db')</code></pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">这将创建一个名为“mydatabase.db”的新文件。</span></span></p>\n<p style=\"text-align:center;\"><img alt=\"Python SQLite3 教程\" class=\"alignnone size-full wp-image-4773\" height=\"354\" src=\"image\\049ad584ec338e546db9a00422fa98cd.png\" width=\"682\"/></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\"> </span></span></p>\n<h2><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">SQLite3 游标</span></span></strong></h2>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">要在 Python 中执行 SQLite 语句，您需要一个游标对象。您可以使用<em>cursor()</em>方法创建它。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">SQLite3 游标是连接对象的一种方法。要执行SQLite3语句，首先要建立连接，然后使用连接对象创建游标对象，如下所示：</span></span></p>\n<div style=\"margin-left:0;\">\n<div>\n<div style=\"margin-left:auto;\">\n<div id=\"div-gpt-ad-1626737219189-0\"></div>\n<div id=\"div-gpt-ad-1626751110797-0\"></div>\n</div>\n</div>\n</div>\n<pre class=\"has\"><code class=\"language-decode:true language-python\">con = sqlite3.connect('mydatabase.db')\n\ncursorObj = con.cursor()</code></pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">现在我们可以使用游标对象调用<em>execute()</em>方法来执行任何 SQL 查询。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\"> </span></span></p>\n<h2><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">创建数据库</span></span></strong></h2>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">当您创建与 SQLite 的连接时，如果它不存在，它将自动创建一个数据库文件。这个数据库文件是在磁盘上创建的；我们还可以使用 :memory: 和 connect 函数在 RAM 中创建数据库。该数据库称为内存数据库。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">考虑下面的代码，其中我们使用<em>try</em>、<em>except</em>和<em>finally</em>块创建了一个数据库来处理任何异常：</span></span></p>\n<pre class=\"has\"><code class=\"language-decode:true language-python\">import sqlite3\n\nfrom sqlite3 import Error\n\ndef sql_connection():\n\n    try:\n\n        con = sqlite3.connect(':memory:')\n\n        print(\"Connection is established: Database is created in memory\")\n\n    except Error:\n\n        print(Error)\n\n    finally:\n\n        con.close()\n\nsql_connection()</code></pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">首先，我们导入<em>sqlite3</em>模块，然后我们定义一个函数 sql_connection。在这个函数内部，我们有一个<em>try</em>块，<em>connect()</em>函数在建立连接后返回一个连接对象。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">然后我们有<em>except</em>块，它在任何异常的情况下都会打印错误消息。如果没有错误，将建立连接并显示如下消息。</span></span></p>\n<p style=\"text-align:center;\"><img alt=\"连接到 SQLite3 数据库\" class=\"alignnone size-full wp-image-4775\" height=\"443\" src=\"image\\a7d51c0be21fe60c377009ae6345ea56.png\" width=\"776\"/></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">之后，我们在<em>finally</em>块中关闭了我们的连接。关闭连接是可选的，但这是一种很好的编程习惯，因此您可以从任何未使用的资源中释放内存。</span></span></p>\n<h2><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">创建表</span></span></strong></h2>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">要在 SQLite3 中创建表，您可以在<em>execute()</em>方法中使用 Create Table 查询。考虑以下步骤：</span></span></p>\n<ol style=\"margin-left:15px;\"><li>创建连接对象。</li><li>从连接对象创建一个游标对象。</li><li>使用游标对象，以创建表查询为参数调用execute方法。</li></ol>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">让我们创建具有以下属性的员工：</span></span></p>\n<pre>employees (id, name, salary, department, position, hireDate)</pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">代码将是这样的：</span></span></p>\n<pre class=\"has\"><code class=\"language-decode:true language-python\">import sqlite3\n\nfrom sqlite3 import Error\n\ndef sql_connection():\n\n    try:\n\n        con = sqlite3.connect('mydatabase.db')\n\n        return con\n\n    except Error:\n\n        print(Error)\n\ndef sql_table(con):\n\n    cursorObj = con.cursor()\n\n    cursorObj.execute(\"CREATE TABLE employees(id integer PRIMARY KEY, name text, salary real, department text, position text, hireDate text)\")\n\n    con.commit()\n\ncon = sql_connection()\n\nsql_table(con)</code></pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">在上面的代码中，我们定义了两个方法，第一个方法建立连接，第二个方法创建一个游标对象来执行create table语句。</span></span></p>\n<div style=\"margin-left:0;\">\n<div>\n<div style=\"margin-left:auto;\">\n<div id=\"div-gpt-ad-1626737314350-0\"></div>\n<div id=\"div-gpt-ad-1626751223313-0\"></div>\n</div>\n</div>\n</div>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">在<em>提交（）</em>方法保存所有我们所做的更改。最后，这两种方法都被调用。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">要检查我们的表是否已创建，您可以使用<a href=\"https://github.com/sqlitebrowser/sqlitebrowser/releases/tag/v3.11.0-beta3\" title=\"SQLite\">SQLite</a>的<a href=\"https://github.com/sqlitebrowser/sqlitebrowser/releases/tag/v3.11.0-beta3\" title=\"数据库浏览器\">数据库浏览器</a>来查看您的表。使用该程序打开 mydatabase.db 文件，您应该会看到您的表：</span></span></p>\n<p style=\"text-align:center;\"><img alt=\"表已创建\" class=\"alignnone size-full wp-image-4776\" height=\"669\" src=\"image\\d971441193a90f9e47c6f5df189f9fc0.png\" width=\"1200\"/></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\"> </span></span></p>\n<h2><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">插入表格</span></span></strong></h2>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">要在表中插入数据，我们使用 INSERT INTO 语句。考虑以下代码行：</span></span></p>\n<pre class=\"has\"><code class=\"language-decode:true language-python\">cursorObj.execute(\"INSERT INTO employees VALUES(1, 'John', 700, 'HR', 'Manager', '2017-01-04')\")\n\ncon.commit()</code></pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">要检查数据是否已插入，请单击 DB Browser 中的 Browse Data：</span></span></p>\n<p style=\"text-align:center;\"><img alt=\"插入行\" class=\"alignnone size-full wp-image-4777\" height=\"669\" src=\"image\\63a7d9987dfe5fbad804cc3091e57243.png\" width=\"1200\"/></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">我们还可以将值/参数传递给<em>execute()</em>方法中的 INSERT 语句。您可以使用问号 (?) 作为每个值的占位符。INSERT 的语法如下所示：</span></span></p>\n<pre>cursorObj.execute('''INSERT INTO employees(id, name, salary, department, position, hireDate) VALUES(?, ?, ?, ?, ?, ?)''', entities)</pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">其中实体包含占位符的值如下：</span></span></p>\n<pre>entities = (2, 'Andrew', 800, 'IT', 'Tech', '2018-02-06')</pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">整个代码如下：</span></span></p>\n<pre class=\"has\"><code class=\"language-decode:true language-python\">import sqlite3\n\ncon = sqlite3.connect('mydatabase.db')\n\ndef sql_insert(con, entities):\n\n    cursorObj = con.cursor()\n    \n    cursorObj.execute('INSERT INTO employees(id, name, salary, department, position, hireDate) VALUES(?, ?, ?, ?, ?, ?)', entities)\n    \n    con.commit()\n\nentities = (2, 'Andrew', 800, 'IT', 'Tech', '2018-02-06')\n\nsql_insert(con, entities)</code></pre>\n<p style=\"text-align:center;\"><img alt=\"SQL 插入结果\" class=\"alignnone size-full wp-image-4778\" height=\"669\" src=\"image\\a534bd495e86819e3548d1699c414458.png\" width=\"1200\"/></p>\n<div style=\"margin-left:0;\">\n<div>\n<div style=\"margin-left:auto;\">\n<div id=\"div-gpt-ad-1626737360949-0\"></div>\n<div id=\"div-gpt-ad-1626751265079-0\"></div>\n</div>\n</div>\n</div>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\"> </span></span></p>\n<h2><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">更新表</span></span></strong></h2>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">要更新表，只需创建一个连接，然后使用该连接创建一个游标对象，最后在<em>execute()</em>方法中使用 UPDATE 语句。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">假设我们要更新 id 等于 2 的员工的姓名。为了更新，我们将使用 UPDATE 语句和 id 等于 2 的员工。我们将使用 WHERE 子句作为选择该员工的条件。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">考虑以下代码：</span></span></p>\n<pre class=\"has\"><code class=\"language-decode:true language-python\">import sqlite3\n\ncon = sqlite3.connect('mydatabase.db')\n\ndef sql_update(con):\n\n    cursorObj = con.cursor()\n\n    cursorObj.execute('UPDATE employees SET name = \"Rogers\" where id = 2')\n\n    con.commit()\n\nsql_update(con)</code></pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">这会将名称从 Andrew 更改为 Rogers，如下所示：</span></span></p>\n<p style=\"text-align:center;\"><img alt=\"更新数据\" class=\"alignnone size-full wp-image-4779\" height=\"669\" src=\"image\\0a04e4cfd1e8f027ab6669f702fc4d84.png\" width=\"1200\"/></p>\n<h2><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">选择语句</span></span></strong></h2>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">您可以使用 select 语句从特定表中选择数据。如果要从表中选择数据的所有列，可以使用星号 (*)。其语法如下：</span></span></p>\n<pre><span style=\"background-color:#1c1d21;\"><span style=\"color:#c0c5ce;\">select * from table_name</span></span></pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">在SQLite3中，SELECT语句是在游标对象的execute方法中执行的。例如选择employees表的所有列，运行如下代码：</span></span></p>\n<pre>cursorObj.execute('SELECT * FROM employees ')</pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">如果要从表中选择几列，请指定如下所示的列：</span></span></p>\n<pre>select column1, column2 from tables_name</pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">例如，</span></span></p>\n<pre>cursorObj.execute('SELECT id, name FROM employees')</pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">select语句从数据库表中选择需要的数据，如果要获取选中的数据，则使用游标对象的<em>fetchall()</em>方法。我们将在下一节中演示这一点。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\"> </span></span></p>\n<div style=\"margin-left:0;\">\n<div>\n<div style=\"margin-left:auto;\">\n<div id=\"div-gpt-ad-1626737402301-0\">\n<div id=\"google_ads_iframe_/22404337467,21830842126/likegeeks-300x250-Content-Left4_0__container__\"></div>\n</div>\n<div id=\"div-gpt-ad-1626751315809-0\">\n<div id=\"google_ads_iframe_/22404337467,21830842126/likegeeks-300x250-Content-Right4_0__container__\"></div>\n</div>\n</div>\n</div>\n</div>\n<h2><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">获取所有数据</span></span></strong></h2>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">要从数据库中获取数据，我们将执行 SELECT 语句，然后使用游标对象的<em>fetchall()</em>方法将值存储到变量中。之后，我们将遍历变量并打印所有值。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">代码将是这样的：</span></span></p>\n<pre class=\"has\"><code class=\"language-decode:true language-python\">import sqlite3\n\ncon = sqlite3.connect('mydatabase.db')\n\ndef sql_fetch(con):\n\n    cursorObj = con.cursor()\n\n    cursorObj.execute('SELECT * FROM employees')\n\n    rows = cursorObj.fetchall()\n\n    for row in rows:\n\n        print(row)\n\nsql_fetch(con)</code></pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">上面的代码会打印出我们数据库中的记录如下：</span></span></p>\n<p style=\"text-align:center;\"><img alt=\"获取所有数据\" class=\"alignnone size-full wp-image-4780\" height=\"482\" src=\"image\\e0761749628c1dbf8bdca8d8725327e8.png\" width=\"805\"/></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">您还可以在<em>一行中</em>使用<em>fetchall()</em>，如下所示：</span></span></p>\n<pre>[print(row) for row in cursorObj.fetchall()]</pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">如果要从数据库中获取特定数据，可以使用 WHERE 子句。例如，我们想要获取工资大于 800 的员工的 id 和姓名。为此，让我们用更多行填充我们的表，然后执行我们的查询。</span></span></p>\n<p style=\"text-align:center;\"><img alt=\"填充表\" class=\"alignnone size-full wp-image-4781\" height=\"783\" src=\"image\\b9876da5284cc56af1d82332b4dea7d6.png\" width=\"1200\"/></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">您可以使用插入语句来填充数据，也可以在 DB 浏览器程序中手动输入它们。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">现在，要获取工资大于 800 的人的 id 和姓名：</span></span></p>\n<pre class=\"has\"><code class=\"language-decode:true language-python\">import sqlite3\n\ncon = sqlite3.connect('mydatabase.db')\n\ndef sql_fetch(con):\n\n    cursorObj = con.cursor()\n\n    cursorObj.execute('SELECT id, name FROM employees WHERE salary &gt; 800.0')\n\n    rows = cursorObj.fetchall()\n\n    for row in rows:\n\n        print(row)\n\nsql_fetch(con)</code></pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">在上面的 SELECT 语句中，我们没有使用星号 (*)，而是指定了 id 和 name 属性。结果将如下所示：</span></span></p>\n<p style=\"text-align:center;\"><img alt=\"选择 where 子句\" class=\"alignnone size-full wp-image-4782\" height=\"452\" src=\"image\\804695c09fd0cde4c33e131962eeac4a.png\" width=\"798\"/></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\"> </span></span></p>\n<div style=\"margin-left:0;\">\n<div>\n<div style=\"margin-left:auto;\">\n<div id=\"div-gpt-ad-1626737445323-0\"></div>\n<div id=\"div-gpt-ad-1626751385989-0\"></div>\n</div>\n</div>\n</div>\n<h2><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">SQLite3 行数</span></span></strong></h2>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">SQLite3 rowcount 用于返回最近执行的 SQL 查询影响或选择的行数。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">当我们在 SELECT 语句中使用 rowcount 时，将返回 -1，因为在全部提取之前，选择了多少行是未知的。考虑下面的例子：</span></span></p>\n<pre>print(cursorObj.execute('SELECT * FROM employees').rowcount)</pre>\n<p style=\"text-align:center;\"><img alt=\"SQLite3 行数\" class=\"alignnone size-full wp-image-4783\" height=\"409\" src=\"image\\e4a6bf780ec6690e8ed1e6a4cdc5d48d.png\" width=\"771\"/></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">因此，要获取行数，需要获取所有数据，然后获取结果的长度：</span></span></p>\n<pre class=\"has\"><code class=\"language-decode:true\">rows = cursorObj.fetchall()\n\nprint len (rows)</code></pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">当您使用不带任何条件（where 子句）的 DELETE 语句时，将删除表中的所有行，并返回 rowcount 中已删除行的总数。</span></span></p>\n<pre>print(cursorObj.execute('DELETE FROM employees').rowcount)</pre>\n<p style=\"text-align:center;\"><img alt=\"删除后影响 Rowc 计数\" class=\"alignnone size-full wp-image-4789\" height=\"257\" src=\"image\\f01734d7d2ad7a5e86a044ebfb46c883.png\" width=\"835\"/></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">如果没有行被删除，它将返回零。</span></span></p>\n<p style=\"text-align:center;\"><img alt=\"未删除任何行\" class=\"alignnone size-full wp-image-4790\" height=\"257\" src=\"image\\e0f975123bab22b5025d9922cacc20fb.png\" width=\"835\"/></p>\n<h2><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">列出表格</span></span></strong></h2>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">要列出 SQLite3 数据库中的所有表，您应该查询 sqlite_master 表，然后使用<em>fetchall()</em>从 SELECT 语句中获取结果。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">sqlite_master 是 SQLite3 中的主表，存放所有的表。</span></span></p>\n<pre class=\"has\"><code class=\"language-decode:true language-python\">import sqlite3\n\ncon = sqlite3.connect('mydatabase.db')\n\ndef sql_fetch(con):\n\n    cursorObj = con.cursor()\n\n    cursorObj.execute('SELECT name from sqlite_master where type= \"table\"')\n\n    print(cursorObj.fetchall())\n\nsql_fetch(con)</code></pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">这将列出所有表，如下所示：</span></span></p>\n<p style=\"text-align:center;\"><img alt=\"列出表格\" class=\"alignnone size-full wp-image-4791\" height=\"560\" src=\"image\\f3cc371210f4cc3212f986ce1d14c333.png\" width=\"860\"/></p>\n<div style=\"margin-left:0;\">\n<div>\n<div style=\"margin-left:auto;\">\n<div id=\"div-gpt-ad-1626737495237-0\"></div>\n<div id=\"div-gpt-ad-1626751437962-0\"></div>\n</div>\n</div>\n</div>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\"> </span></span></p>\n<h2><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">检查表是否存在</span></span></strong></h2>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">创建表时，我们应该确保该表不存在。同样，删除/删除表时，该表应该存在。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">为了检查表是否已经存在，我们在 CREATE TABLE 语句中使用“ <em>if not exists”</em>，如下所示：</span></span></p>\n<pre>create table if not exists table_name (column1, column2, …, columnN)</pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">例如：</span></span></p>\n<pre class=\"has\"><code class=\"language-decode:true language-python\">import sqlite3\n\ncon = sqlite3.connect('mydatabase.db')\n\ndef sql_fetch(con):\n\n    cursorObj = con.cursor()\n\n    cursorObj.execute('create table if not exists projects(id integer, name text)')\n\n    con.commit()\n\nsql_fetch(con)</code></pre>\n<p style=\"text-align:center;\"><img alt=\"检查表是否不存在\" class=\"alignnone size-full wp-image-4792\" height=\"611\" src=\"image\\fcfd94453ed80c91e968aa6fed3a33eb.png\" width=\"901\"/></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">同样，要在删除时检查表是否存在，我们在 DROP TABLE 语句中使用“ <em>if exists”</em>，如下所示：</span></span></p>\n<pre>drop table if exists table_name</pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">例如，</span></span></p>\n<pre>cursorObj.execute('drop table if exists projects')</pre>\n<p style=\"text-align:center;\"><img alt=\"桌子掉了\" class=\"alignnone size-full wp-image-4793\" height=\"585\" src=\"image\\495748a82fd874506283ce235d7b1c08.png\" width=\"857\"/></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">我们还可以通过执行以下查询来检查我们要访问的表是否存在：</span></span></p>\n<pre class=\"has\"><code class=\"language-decode:true language-python\">cursorObj.execute('SELECT name from sqlite_master WHERE type = \"table\" AND name = \"employees\"')\n\nprint(cursorObj.fetchall())</code></pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">如果员工表存在，它将返回其名称如下：</span></span></p>\n<p style=\"text-align:center;\"><img alt=\"表存在\" class=\"alignnone size-full wp-image-4794\" height=\"445\" src=\"image\\d455e643db148a686a44e737456f0839.png\" width=\"755\"/></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">如果我们指定的表名不存在，将返回一个空数组：</span></span></p>\n<div style=\"margin-left:0;\">\n<div>\n<div style=\"margin-left:auto;\">\n<div id=\"div-gpt-ad-1626737539629-0\"></div>\n<div id=\"div-gpt-ad-1626751485213-0\"></div>\n</div>\n</div>\n</div>\n<p style=\"text-align:center;\"><img alt=\"表不存在\" class=\"alignnone size-full wp-image-4795\" height=\"836\" src=\"image\\ded3abce5658f31d7d8188e53d1463a5.png\" width=\"1038\"/></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\"> </span></span></p>\n<h2><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">删除表</span></span></strong></h2>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">您可以使用 DROP 语句删除/删除表。DROP 语句的语法如下：</span></span></p>\n<pre>drop table table_name</pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">要删除表，该表应存在于数据库中。因此，建议在 drop 语句中使用“ <em>if exists”</em>，如下所示：</span></span></p>\n<pre>drop table if exists table_name</pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">例如，</span></span></p>\n<pre class=\"has\"><code class=\"language-decode:true language-python\">import sqlite3\n\ncon = sqlite3.connect('mydatabase.db')\n\ndef sql_fetch(con):\n\n    cursorObj = con.cursor()\n\n    cursorObj.execute('DROP table if exists employees')\n\n    con.commit()\n\nsql_fetch(con)</code></pre>\n<p style=\"text-align:center;\"><img alt=\"删除语句\" class=\"alignnone size-full wp-image-4796\" height=\"702\" src=\"image\\42011caa839342faced850770688d19b.png\" width=\"968\"/></p>\n<h2><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">SQLite3 异常</span></span></strong></h2>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">异常是运行时错误。在<a href=\"https://likegeeks.com/python-programming-basics/\" title=\"Python 编程中\">Python 编程中</a>，所有异常都是从 BaseException 派生的类的实例。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">在 SQLite3 中，我们有以下主要的 Python 异常：</span></span></p>\n<h3><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">数据库错误</span></span></strong></h3>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">任何与数据库相关的错误都会引发 DatabaseError。</span></span></p>\n<h3><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">完整性错误</span></span></strong></h3>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">IntegrityError 是 DatabaseError 的子类，在出现数据完整性问题时会引发。例如，所有表中的外部数据均未更新，从而导致数据不一致。</span></span></p>\n<h3><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">编程错误</span></span></strong></h3>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">当存在语法错误或未找到表或使用错误数量的参数/参数调用函数时，将引发异常 ProgrammingError。</span></span></p>\n<div style=\"margin-left:0;\">\n<div>\n<div style=\"margin-left:auto;\">\n<div id=\"div-gpt-ad-1626737582101-0\"></div>\n<div id=\"div-gpt-ad-1626751529921-0\"></div>\n</div>\n</div>\n</div>\n<h3><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">操作错误</span></span></strong></h3>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">当数据库操作失败时会引发此异常，例如异常断开连接。这不是程序员的错。</span></span></p>\n<h3><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">不支持错误</span></span></strong></h3>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">当您使用数据库未定义或不支持的某些方法时，将引发 NotSupportedError 异常。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\"> </span></span></p>\n<h2><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">SQLite3 Executemany（批量插入）</span></span></strong></h2>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">您可以使用 executemany 语句一次插入多行。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">考虑以下代码：</span></span></p>\n<pre class=\"has\"><code class=\"language-decode:true language-python\">import sqlite3\n\ncon = sqlite3.connect('mydatabase.db')\n\ncursorObj = con.cursor()\n\ncursorObj.execute('create table if not exists projects(id integer, name text)')\n\ndata = [(1, \"Ridesharing\"), (2, \"Water Purifying\"), (3, \"Forensics\"), (4, \"Botany\")]\n\ncursorObj.executemany(\"INSERT INTO projects VALUES(?, ?)\", data)\n\ncon.commit()</code></pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">这里我们创建了一个有两列的表，“data”每列有四个值。我们将变量与查询一起传递给<em>executemany()</em>方法。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">请注意，我们使用了占位符来传递值。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">上面的代码将生成以下结果：</span></span></p>\n<p style=\"text-align:center;\"><img alt=\"批量插入（多次执行）\" class=\"alignnone size-full wp-image-4798\" height=\"783\" src=\"image\\18317bf51c4337f679075f4cc07aefb7.png\" width=\"1200\"/></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\"> </span></span></p>\n<h2><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">关闭连接</span></span></strong></h2>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">使用完数据库后，最好关闭连接。您可以使用<em>close()</em>方法关闭连接。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">要关闭连接，请使用连接对象并调用<em>close()</em>方法，如下所示：</span></span></p>\n<pre class=\"has\"><code class=\"language-decode:true language-python\">con = sqlite3.connect('mydatabase.db')\n\n#program statements\n\ncon.close()</code></pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\"> </span></span></p>\n<h2><strong><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">SQLite3 日期时间</span></span></strong></h2>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">在 Python SQLite3 数据库中，我们可以通过导入<em>datatime</em>模块轻松存储日期或时间。以下格式是可用于日期时间的最常见格式：</span></span></p>\n<pre class=\"has\"><code class=\"language-decode:true\">YYYY-MM-DD\n\nYYYY-MM-DD HH:MM\n\nYYYY-MM-DD HH:MM:SS\n\nYYYY-MM-DD HH:MM:SS.SSS\n\nHH:MM\n\nHH:MM:SS\n\nHH:MM:SS.SSS\n\nnow</code></pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">考虑以下代码：</span></span></p>\n<pre class=\"has\"><code class=\"language-decode:true language-python\">import sqlite3\n\nimport datetime\n\ncon = sqlite3.connect('mydatabase.db')\n\ncursorObj = con.cursor()\n\ncursorObj.execute('create table if not exists assignments(id integer, name text, date date)')\n\ndata = [(1, \"Ridesharing\", datetime.date(2017, 1, 2)), (2, \"Water Purifying\", datetime.date(2018, 3, 4))]\n\ncursorObj.executemany(\"INSERT INTO assignments VALUES(?, ?, ?)\", data)\n\ncon.commit()</code></pre>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">在这段代码中，我们首先导入了 datetime 模块，并创建了一个名为 assignments 的表，其中包含三列。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">第三列的数据类型是日期。为了在列中插入日期，我们使用了<em>datetime.date</em>。同样，我们可以使用<em>datetime.time</em>来处理时间。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">上面的代码将生成以下输出：</span></span></p>\n<p style=\"text-align:center;\"><img alt=\"SQLite3 日期时间\" class=\"alignnone size-full wp-image-4799\" height=\"783\" src=\"image\\221456f447b0ab0fbb4d9e619d0201d8.png\" width=\"1200\"/></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">SQLite3 数据库的巨大灵活性和移动性使其成为任何开发人员使用它并将其与任何产品一起发布的首选。</span></span></p>\n<p><span style=\"color:#1a202c;\"><span style=\"background-color:#ffffff;\">您可以在 Windows、Linux、Mac OS、Android 和 iOS 项目中使用 SQLite3 数据库，因为它们具有出色的可移植性。因此，您随项目一起发送一个文件，仅此而已。</span></span></p>\n</div>\n</div>"}