{"blogid": "125389547", "writerAge": "码龄6年", "writerBlogNum": "10", "writerCollect": "19", "writerComment": "8", "writerFan": "0", "writerGrade": "2级", "writerIntegral": "134", "writerName": "beijixing333y", "writerProfileAdress": "writer_image\\profile_125389547.jpg", "writerRankTotal": "101891", "writerRankWeekly": "272504", "writerThumb": "11", "writerVisitNum": "11389", "blog_read_count": "1679", "blog_time": "于 2022-06-21 14:45:48 发布", "blog_title": "Element UI 的 table 单元格合并", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>项目中遇到表格单元格合并的需求，在此记录整个解决过程。</p>\n<p>项目使用的是 Element UI，表格使用的是 table 组件。Element UI 的 table 表格组件中对单元格进行合并，需要使用 table 组件的 span-method 属性。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"74\" src=\"image\\afe94dd791ee4795b44daea8ce0557f6.png\" width=\"868\"/></p>\n<p>先看一张成果图（完整代码放在末尾）：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"754\" src=\"image\\e96e71b7077e420bb866a2bf5d00dc2f.png\" width=\"1200\"/></p>\n<p></p>\n<p>解决思路：</p>\n<p>1、格式化后台返回的数据（根据实际数据格式处理）</p>\n<p>项目后台返回的数据格式为树形结构，这里做简化展示：</p>\n<pre><code class=\"language-javascript\">[\n  {\n    'column1': '111',\n    'column2': '222',\n    'column3': '333',\n    'children1': [\n      {\n        'column6': 666,\n        'column4': '4440',\n        'column5': '5550',\n        'children2': [\n          {\n            'column7': '77701',\n            'column8': '88801',\n            'column9': '99901'\n          }\n        ]\n      }\n    ]\n  }\n]</code></pre>\n<p></p>\n<p></p>\n<p>需要先将树结构数据转为一维数组：</p>\n<pre><code class=\"language-javascript\">// table 表格数据初始化处理，将树结构数据转为一维数组\n    handleData(data, parentId) {\n      data.map((res, index) =&gt; {\n        var obj = {\n          id: parentId\n        }\n        for (const key in res) {\n          const isarr = Object.values(res).find((age) =&gt; {\n            return Array.isArray(age)\n          })\n          if (isarr) {\n            if (Array.isArray(res[key])) {\n              for (let i = 0; i &lt; res[key].length; i++) {\n                Object.assign(obj, res[key][i])\n                data.push(obj)\n                res[key].splice(i, 1)\n                if (res[key].length === 0) {\n                  data.splice(index, 1)\n                }\n                this.handleData(data, parentId)\n              }\n            } else {\n              Object.assign(obj, { [key]: res[key] })\n            }\n          }\n        }\n      })\n      return data\n    }</code></pre>\n<p>因为后台返回的数据里没有唯一标识符，所以需要单独添加一个唯一标识表示转换为一维数组的数据是出自同一组树结构里。故此处在展开时单独加了一个 id 属性，用来代替唯一标识。如果后台返回的数据格式就是一个一维数组，可跳过数据格式化步骤。</p>\n<p>2、在 data 中定义数据，需要合并几列就定义几个数组和索引</p>\n<pre><code class=\"language-javascript\">  data() {\n    return {\n      tableData: [],\n      // 合并单元格\n      column1Arr: [], // column1\n      column1Index: 0, // column1索引\n      column2Arr: [], // column2\n      column2Index: 0, // column2索引\n      column3Arr: [], // column3\n      column3Index: 0, // column3索引\n      column4Arr: [], // column4\n      column4Index: 0, // column4\n      column5Arr: [], // column5\n      column5Index: 0, // column5索引\n      column6Arr: [], // column6\n      column6Index: 0 // column6索引\n    }\n  }</code></pre>\n<p> 3、定义合并函数</p>\n<p>以第一行为基准，一层层对比，参数 data 就是格式化以后的表格数据，以每个数据里的唯一标识 id 作为合并的参照字段：</p>\n<pre><code class=\"language-javascript\">    // 初始化合并行数组\n    mergeInit() {\n      this.column1Arr = [] // column1\n      this.column1Index = 0 // column1索引\n      this.column2Arr = [] // column2\n      this.column2Index = 0 // column2索引\n      this.column3Arr = [] // column3\n      this.column3Index = 0 // column3索引\n      this.column4Arr = [] // column4\n      this.column4Index = 0 // column4索引\n      this.column5Arr = [] // column5\n      this.column5Index = 0 // column5索引\n      this.column6Arr = [] // column6\n      this.column6Index = 0 // column6索引\n    },\n    // 合并表格\n    mergeTable(data) {\n      this.mergeInit()\n      if (data.length &gt; 0) {\n        for (var i = 0; i &lt; data.length; i++) {\n          if (i === 0) {\n            // 第一行必须存在，以第一行为基准\n            this.column1Arr.push(1) // column1\n            this.column1Index = 0\n\n            this.column2Arr.push(1) // column2\n            this.column2Index = 0\n\n            this.column3Arr.push(1) // column3\n            this.column3Index = 0\n\n            this.column4Arr.push(1) // column4\n            this.column4Index = 0\n\n            this.column5Arr.push(1) // column5\n            this.column5Index = 0\n\n            this.column6Arr.push(1) // column6\n            this.column6Index = 0\n          } else {\n            // 判断当前元素与上一元素是否相同\n            // column1\n            if (\n              data[i].column1 === data[i - 1].column1 &amp;&amp;\n              data[i].id === data[i - 1].id\n            ) {\n              this.column1Arr[this.column1Index] += 1\n              this.column1Arr.push(0)\n            } else {\n              this.column1Arr.push(1)\n              this.column1Index = i\n            }\n\n            // column2\n            if (\n              data[i].column2 === data[i - 1].column2 &amp;&amp;\n              data[i].id === data[i - 1].id\n            ) {\n              this.column2Arr[this.column2Index] += 1\n              this.column2Arr.push(0)\n            } else {\n              this.column2Arr.push(1)\n              this.column2Index = i\n            }\n\n            // column3\n            if (\n              data[i].column3 === data[i - 1].column3 &amp;&amp;\n              data[i].id === data[i - 1].id\n            ) {\n              this.column3Arr[this.column3Index] += 1\n              this.column3Arr.push(0)\n            } else {\n              this.column3Arr.push(1)\n              this.column3Index = i\n            }\n\n            // column4\n            if (\n              data[i].column4 === data[i - 1].column4 &amp;&amp;\n              data[i].id === data[i - 1].id\n            ) {\n              this.column4Arr[this.column4Index] += 1\n              this.column4Arr.push(0)\n            } else {\n              this.column4Arr.push(1)\n              this.column4Index = i\n            }\n\n            // column5\n            if (\n              data[i].column5 === data[i - 1].column5 &amp;&amp;\n              data[i].column4 === data[i - 1].column4 &amp;&amp;\n              data[i].id === data[i - 1].id\n            ) {\n              this.column5Arr[this.column5Index] += 1\n              this.column5Arr.push(0)\n            } else {\n              this.column5Arr.push(1)\n              this.column5Index = i\n            }\n\n            // column6\n            if (\n              data[i].column6 === data[i - 1].column6 &amp;&amp;\n              data[i].column4 === data[i - 1].column4 &amp;&amp;\n              data[i].id === data[i - 1].id\n            ) {\n              this.column6Arr[this.column6Index] += 1\n              this.column6Arr.push(0)\n            } else {\n              this.column6Arr.push(1)\n              this.column6Index = i\n            }\n          }\n        }\n      }\n    },</code></pre>\n<p>注意，同一组数据里可能会有多个  children1 或者 children2，这时合并的时候会有多个条件进行判断：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"137\" src=\"image\\84f027f5045b4a9b88105fc659a49f8d.png\" width=\"399\"/></p>\n<p> </p>\n<p> 4、table 组件属性 span-method 的单元格合并方法：</p>\n<pre><code>    handleSpanMethod({ row, column, rowIndex, columnIndex }) {\n      if (columnIndex === 0 || columnIndex === 1) {\n        // 第一列 column1\n        const _row_1 = this.column1Arr[rowIndex]\n        const _col_1 = _row_1 &gt; 0 ? 1 : 0\n        return {\n          rowspan: _row_1,\n          colspan: _col_1\n        }\n      } else if (columnIndex === 2) {\n        // 第二列 column2\n        const _row_2 = this.column2Arr[rowIndex]\n        const _col_2 = _row_2 &gt; 0 ? 1 : 0\n        return {\n          rowspan: _row_2,\n          colspan: _col_2\n        }\n      } else if (columnIndex === 3) {\n        // 第三列 column3\n        const _row_2 = this.column3Arr[rowIndex]\n        const _col_2 = _row_2 &gt; 0 ? 1 : 0\n        return {\n          rowspan: _row_2,\n          colspan: _col_2\n        }\n      } else if (columnIndex === 4) {\n        // 第四列 column4\n        const _row_2 = this.column4Arr[rowIndex]\n        const _col_2 = _row_2 &gt; 0 ? 1 : 0\n        return {\n          rowspan: _row_2,\n          colspan: _col_2\n        }\n      } else if (columnIndex === 5) {\n        // 第五列 column5\n        const _row_2 = this.column5Arr[rowIndex]\n        const _col_2 = _row_2 &gt; 0 ? 1 : 0\n        return {\n          rowspan: _row_2,\n          colspan: _col_2\n        }\n      } else if (columnIndex === 6) {\n        // 第六列 column6\n        const _row_2 = this.column6Arr[rowIndex]\n        const _col_2 = _row_2 &gt; 0 ? 1 : 0\n        return {\n          rowspan: _row_2,\n          colspan: _col_2\n        }\n      }\n    }</code></pre>\n<p>至此，整个单元格合并就完成了！</p>\n<p>如果觉得写得还不错，还请点赞支持，感谢感谢感谢！！！</p>\n<p>完整代码：</p>\n<pre><code class=\"language-javascript\">&lt;template&gt;\n  &lt;div class=\"table-wrap\"&gt;\n    &lt;el-table\n      :data=\"tableData\"\n      :span-method=\"handleSpanMethod\"\n      :cell-style=\"{ background: '#FFFFFF' }\"\n      border\n      style=\"width: 100%\"\n    &gt;\n      &lt;el-table-column prop=\"id\" label=\"序号\" align=\"center\" width=\"80\"&gt;\n        &lt;template slot-scope=\"scope\"&gt;\n          {<!-- -->{ scope.row.id + 1 }}\n        &lt;/template&gt;\n      &lt;/el-table-column&gt;\n      &lt;el-table-column prop=\"column1\" label=\"column1\" align=\"center\" /&gt;\n      &lt;el-table-column prop=\"column2\" label=\"column2\" align=\"center\" /&gt;\n      &lt;el-table-column prop=\"column3\" label=\"column3\" align=\"center\" /&gt;\n      &lt;el-table-column prop=\"column4\" label=\"column4\" align=\"center\" /&gt;\n      &lt;el-table-column prop=\"column5\" label=\"column5\" align=\"center\" /&gt;\n      &lt;el-table-column prop=\"column6\" label=\"column6\" align=\"center\" /&gt;\n      &lt;el-table-column prop=\"column7\" label=\"column7\" align=\"center\" /&gt;\n      &lt;el-table-column prop=\"column8\" label=\"column8\" align=\"center\" /&gt;\n      &lt;el-table-column prop=\"column9\" label=\"column9\" align=\"center\" /&gt;\n    &lt;/el-table&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'CellMerge',\n  data() {\n    return {\n      tableData: [],\n      // 合并单元格\n      column1Arr: [], // column1\n      column1Index: 0, // column1索引\n      column2Arr: [], // column2\n      column2Index: 0, // column2索引\n      column3Arr: [], // column3\n      column3Index: 0, // column3索引\n      column4Arr: [], // column4\n      column4Index: 0, // column4\n      column5Arr: [], // column5\n      column5Index: 0, // column5索引\n      column6Arr: [], // column6\n      column6Index: 0 // column6索引\n    }\n  },\n  mounted() {\n    this.initTableData()\n  },\n  methods: {\n    // 初始化表格数据\n    initTableData() {\n      const newTableData = [\n        {\n          'column1': '111',\n          'column2': '222',\n          'column3': '333',\n          'children1': [\n            {\n              'column6': 666,\n              'column4': '4440',\n              'column5': '5550',\n              'children2': [\n                {\n                  'column7': '77701',\n                  'column8': '88801',\n                  'column9': '99901'\n                },\n                {\n                  'column7': '77702',\n                  'column8': '88802',\n                  'column9': '99902'\n                },\n                {\n                  'column7': '77703',\n                  'column8': '88803',\n                  'column9': '99903'\n                }\n              ]\n            },\n            {\n              'column6': 666,\n              'column4': '4441',\n              'column5': '5551',\n              'children2': [\n                {\n                  'column7': '77711',\n                  'column8': '88811',\n                  'column9': '99911'\n                }\n              ]\n            },\n            {\n              'column6': 666,\n              'column4': '4442',\n              'column5': '5552',\n              'children2': [\n                {\n                  'column7': '77721',\n                  'column8': '88821',\n                  'column9': '99921'\n                },\n                {\n                  'column7': '77722',\n                  'column8': '88822',\n                  'column9': '99922'\n                }\n              ]\n            }\n          ]\n        },\n        {\n          'column1': '111',\n          'column2': '222',\n          'column3': '333',\n          'children1': [\n            {\n              'column6': 666,\n              'column4': '4440',\n              'column5': '5550',\n              'children2': [\n                {\n                  'column7': '77701',\n                  'column8': '88801',\n                  'column9': '99901'\n                }\n              ]\n            },\n            {\n              'column6': 666,\n              'column4': '4441',\n              'column5': '5551',\n              'children2': [\n                {\n                  'column7': '77711',\n                  'column8': '88811',\n                  'column9': '99911'\n                },\n                {\n                  'column7': '77712',\n                  'column8': '88812',\n                  'column9': '99912'\n                }\n              ]\n            }\n          ]\n        },\n        {\n          'column1': '111',\n          'column2': '222',\n          'column3': '333',\n          'children1': [\n            {\n              'column6': 666,\n              'column4': '4440',\n              'column5': '5550',\n              'children2': [\n                {\n                  'column7': '77701',\n                  'column8': '88801',\n                  'column9': '99901'\n                },\n                {\n                  'column7': '77702',\n                  'column8': '88802',\n                  'column9': '99902'\n                },\n                {\n                  'column7': '77703',\n                  'column8': '88803',\n                  'column9': '99903'\n                }\n              ]\n            },\n            {\n              'column6': 666,\n              'column4': '4441',\n              'column5': '5551',\n              'children2': [\n                {\n                  'column7': '77711',\n                  'column8': '88811',\n                  'column9': '99911'\n                }\n              ]\n            }\n          ]\n        }\n      ]\n      this.tableData = []\n      newTableData.map((res, index) =&gt; {\n        const parentId = index\n        this.tableData.push.apply(\n          this.tableData,\n          this.handleData([res], parentId)\n        )\n      })\n      this.mergeTable(this.tableData)\n    },\n    // table 表格数据初始化处理，将树结构数据转为一维数组\n    handleData(data, parentId) {\n      data.map((res, index) =&gt; {\n        var obj = {\n          id: parentId\n        }\n        for (const key in res) {\n          const isarr = Object.values(res).find((age) =&gt; {\n            return Array.isArray(age)\n          })\n          if (isarr) {\n            if (Array.isArray(res[key])) {\n              for (let i = 0; i &lt; res[key].length; i++) {\n                Object.assign(obj, res[key][i])\n                data.push(obj)\n                res[key].splice(i, 1)\n                if (res[key].length === 0) {\n                  data.splice(index, 1)\n                }\n                this.handleData(data, parentId)\n              }\n            } else {\n              Object.assign(obj, { [key]: res[key] })\n            }\n          }\n        }\n      })\n      return data\n    },\n    // 初始化合并行数组\n    mergeInit() {\n      this.column1Arr = [] // column1\n      this.column1Index = 0 // column1索引\n      this.column2Arr = [] // column2\n      this.column2Index = 0 // column2索引\n      this.column3Arr = [] // column3\n      this.column3Index = 0 // column3索引\n      this.column4Arr = [] // column4\n      this.column4Index = 0 // column4索引\n      this.column5Arr = [] // column5\n      this.column5Index = 0 // column5索引\n      this.column6Arr = [] // column6\n      this.column6Index = 0 // column6索引\n    },\n    // 合并表格\n    mergeTable(data) {\n      this.mergeInit()\n      if (data.length &gt; 0) {\n        for (var i = 0; i &lt; data.length; i++) {\n          if (i === 0) {\n            // 第一行必须存在，以第一行为基准\n            this.column1Arr.push(1) // column1\n            this.column1Index = 0\n\n            this.column2Arr.push(1) // column2\n            this.column2Index = 0\n\n            this.column3Arr.push(1) // column3\n            this.column3Index = 0\n\n            this.column4Arr.push(1) // column4\n            this.column4Index = 0\n\n            this.column5Arr.push(1) // column5\n            this.column5Index = 0\n\n            this.column6Arr.push(1) // column6\n            this.column6Index = 0\n          } else {\n            // 判断当前元素与上一元素是否相同\n            // column1\n            if (\n              data[i].column1 === data[i - 1].column1 &amp;&amp;\n              data[i].id === data[i - 1].id\n            ) {\n              this.column1Arr[this.column1Index] += 1\n              this.column1Arr.push(0)\n            } else {\n              this.column1Arr.push(1)\n              this.column1Index = i\n            }\n\n            // column2\n            if (\n              data[i].column2 === data[i - 1].column2 &amp;&amp;\n              data[i].id === data[i - 1].id\n            ) {\n              this.column2Arr[this.column2Index] += 1\n              this.column2Arr.push(0)\n            } else {\n              this.column2Arr.push(1)\n              this.column2Index = i\n            }\n\n            // column3\n            if (\n              data[i].column3 === data[i - 1].column3 &amp;&amp;\n              data[i].id === data[i - 1].id\n            ) {\n              this.column3Arr[this.column3Index] += 1\n              this.column3Arr.push(0)\n            } else {\n              this.column3Arr.push(1)\n              this.column3Index = i\n            }\n\n            // column4\n            if (\n              data[i].column4 === data[i - 1].column4 &amp;&amp;\n              data[i].id === data[i - 1].id\n            ) {\n              this.column4Arr[this.column4Index] += 1\n              this.column4Arr.push(0)\n            } else {\n              this.column4Arr.push(1)\n              this.column4Index = i\n            }\n\n            // column5\n            if (\n              data[i].column5 === data[i - 1].column5 &amp;&amp;\n              data[i].column4 === data[i - 1].column4 &amp;&amp;\n              data[i].id === data[i - 1].id\n            ) {\n              this.column5Arr[this.column5Index] += 1\n              this.column5Arr.push(0)\n            } else {\n              this.column5Arr.push(1)\n              this.column5Index = i\n            }\n\n            // column6\n            if (\n              data[i].column6 === data[i - 1].column6 &amp;&amp;\n              data[i].column4 === data[i - 1].column4 &amp;&amp;\n              data[i].id === data[i - 1].id\n            ) {\n              this.column6Arr[this.column6Index] += 1\n              this.column6Arr.push(0)\n            } else {\n              this.column6Arr.push(1)\n              this.column6Index = i\n            }\n          }\n        }\n      }\n    },\n    handleSpanMethod({ row, column, rowIndex, columnIndex }) {\n      if (columnIndex === 0 || columnIndex === 1) {\n        // 第一列 column1\n        const _row_1 = this.column1Arr[rowIndex]\n        const _col_1 = _row_1 &gt; 0 ? 1 : 0\n        return {\n          rowspan: _row_1,\n          colspan: _col_1\n        }\n      } else if (columnIndex === 2) {\n        // 第二列 column2\n        const _row_2 = this.column2Arr[rowIndex]\n        const _col_2 = _row_2 &gt; 0 ? 1 : 0\n        return {\n          rowspan: _row_2,\n          colspan: _col_2\n        }\n      } else if (columnIndex === 3) {\n        // 第三列 column3\n        const _row_2 = this.column3Arr[rowIndex]\n        const _col_2 = _row_2 &gt; 0 ? 1 : 0\n        return {\n          rowspan: _row_2,\n          colspan: _col_2\n        }\n      } else if (columnIndex === 4) {\n        // 第四列 column4\n        const _row_2 = this.column4Arr[rowIndex]\n        const _col_2 = _row_2 &gt; 0 ? 1 : 0\n        return {\n          rowspan: _row_2,\n          colspan: _col_2\n        }\n      } else if (columnIndex === 5) {\n        // 第五列 column5\n        const _row_2 = this.column5Arr[rowIndex]\n        const _col_2 = _row_2 &gt; 0 ? 1 : 0\n        return {\n          rowspan: _row_2,\n          colspan: _col_2\n        }\n      } else if (columnIndex === 6) {\n        // 第六列 column6\n        const _row_2 = this.column6Arr[rowIndex]\n        const _col_2 = _row_2 &gt; 0 ? 1 : 0\n        return {\n          rowspan: _row_2,\n          colspan: _col_2\n        }\n      }\n    }\n  }\n}\n&lt;/script&gt;\n&lt;style lang=\"scss\" scoped&gt;\n  .table-wrap {\n    width: 100%;\n    height: 100%;\n    padding: 20px;\n  }\n&lt;/style&gt;\n</code></pre>\n<p> </p>\n<p></p>\n</div>\n</div>"}