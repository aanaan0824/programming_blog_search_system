{"blogid": "120184708", "writerAge": "码龄3年", "writerBlogNum": "217", "writerCollect": "424", "writerComment": "81", "writerFan": "7082", "writerGrade": "5级", "writerIntegral": "2581", "writerName": "路漫漫其远，吾求索", "writerProfileAdress": "writer_image\\profile_120184708.jpg", "writerRankTotal": "17396", "writerRankWeekly": "1376", "writerThumb": "139", "writerVisitNum": "149636", "blog_read_count": "2934", "blog_time": "于 2021-09-08 17:50:08 发布", "blog_title": "cmake的安装与基本使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>CMake是一个跨平台的、开源的构建工具。cmake是makefile的上层工具，它们的目的正是为了产生可移植的makefile，并简化自己动手写makefile时的巨大工作量.目前很多开源的项目都可以通过CMake工具来轻松构建工程<br/> cmake的官网：https://cmake.org/<br/> <strong>1，安装cmake：</strong></p>\n<pre><code class=\"prism language-c\">sudo apt<span class=\"token operator\">-</span>get install cmake\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d18f2d03ab5849709503bf479d8d25d8.png\"/><br/> <strong>2，安装gcc和g++</strong></p>\n<pre><code class=\"prism language-c\">sudo apt<span class=\"token operator\">-</span>get install gcc\nsudo apt<span class=\"token operator\">-</span>get install g<span class=\"token operator\">++</span>\n</code></pre>\n<p>两个缺少任何其中一个都会导致生成Makefile失败：如下所示<br/> <img alt=\"在这里插入图片描述\" src=\"image\\bac908145c524219960e8e6e076b0643.png\"/><br/> <strong>3，安装成功查看cmake版本：</strong></p>\n<pre><code class=\"prism language-c\">cmake <span class=\"token operator\">--</span>version \n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\de2a4a0966884918b49eaabb41a37320.png\"/></p>\n<p><strong>4，main.c和CMakeLists.txt的编写</strong><br/> 注：在同一目录下编写main.c和CMakeLists.txt<br/> main.c:</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>CMakeLists.txt：</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">PROJECT</span> <span class=\"token punctuation\">(</span>HELLO<span class=\"token punctuation\">)</span>\n<span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>SRC_LIST main<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token function\">MESSAGE</span><span class=\"token punctuation\">(</span>STATUS <span class=\"token string\">\"THIS isBINARY dir\"</span> $<span class=\"token punctuation\">{<!-- --></span>HELLO_BINARY_DIR<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">ADD_EXECUTABLE</span><span class=\"token punctuation\">(</span>hello $<span class=\"token punctuation\">{<!-- --></span>SRC_LIST<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><strong>5，构建</strong><br/> 命令：<br/> 1，cmake .<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d719d4473327465eb74343afa39b26ec.png\"/><br/> 构建成功之后系统会自动生成如下文件：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ae1cb75285da4089b0ddd8c44aa67071.png\"/><br/> 2，make<br/> <img alt=\"在这里插入图片描述\" src=\"image\\21620eca28be467bbde9b4eae5bf69bf.png\"/><br/> 这时候会生成可执行程序hello<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6c0b6c6fa0654617b1fa7b4a33ebb0a2.png\"/><br/> 3，./hello<br/> <img alt=\"在这里插入图片描述\" src=\"image\\de5fb708e79a435d9fc58e4713f3e9d6.png\"/><br/> 4，make VERBOSE=1：可以查看make构建的详细过程<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8d4fef798e7d4f1a9eec32b1682f6727.png\"/><br/> <strong>6，详细解释</strong><br/> 对CMakeLists.txt的详细解释：<br/> 用这个指令定义工程名称，并且可以指定工程支持的语言，支持的语言列表是可以忽略的，默认情况表示支持所有语言。</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">PROJECT</span><span class=\"token punctuation\">(</span>projectname <span class=\"token punctuation\">[</span>CXX<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Java<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这个指令隐式的定义了两个cmake的变量：</p>\n<pre><code class=\"prism language-c\"><span class=\"token operator\">&lt;</span>projectname<span class=\"token operator\">&gt;</span>_BINARY_DIR\n<span class=\"token operator\">&lt;</span>projectname<span class=\"token operator\">&gt;</span>_SOURCE_DIR\n</code></pre>\n<p>这两个变量可以用（这样不用担心写错工程名称）。</p>\n<pre><code class=\"prism language-c\">PROJECT_BINARY_DIR\nPROJECT_SOURCE_DIR\n</code></pre>\n<p>这里先了解SET指令可以用来显示的定义变量即可。这里是</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>SRC_LIST main<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>如果有多个源文件，也可以定义为：</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>SRC_LIST main<span class=\"token punctuation\">.</span>c t1<span class=\"token punctuation\">.</span>c t2<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这个指令是向终端输出用户定义的信息，包含三种类型：</p>\n<pre><code class=\"prism language-c\">SEND_ERROR#产生错误，生成过程被跳过。\nSTATUS#输出前缀为<span class=\"token operator\">--</span>d的信息。\nFATAL_ERROR#立即终止所有的cmake过程。\n</code></pre>\n<p>定义了一个为hello的可执行文件，相关的源文件是SRC_LIST中定义的源文件列表。</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">ADD_EXECUTABLE</span><span class=\"token punctuation\">(</span>hello $<span class=\"token punctuation\">{<!-- --></span>SRC_LIST<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>7，清理工程</strong><br/> make clean：<br/> 用来清理makefile产生的中间的文件，但是，不能使用make distclean清除cmake产生的中间件<br/> rm -rf ***：<br/> 用来删除cmake的中间件</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}