{"blogid": "126583709", "writerAge": "码龄7年", "writerBlogNum": "95", "writerCollect": "80", "writerComment": "8", "writerFan": "3", "writerGrade": "4级", "writerIntegral": "1021", "writerName": "Echoo2787", "writerProfileAdress": "writer_image\\profile_126583709.jpg", "writerRankTotal": "20640", "writerRankWeekly": "7053", "writerThumb": "20", "writerVisitNum": "40750", "blog_read_count": "800", "blog_time": "已于 2022-09-02 17:33:16 修改", "blog_title": "C++基础学习", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_1\">进制与指定进制输出</a></li><li><ul><li><a href=\"#_2\">常用进制</a></li><li><a href=\"#_8\">输出指定的进制格式</a></li></ul>\n</li><li><a href=\"#_33\">结构与位字段</a></li><li><ul><li><a href=\"#_34\">位字段</a></li></ul>\n</li><li><a href=\"#_union_64\">共同体 union</a></li><li><a href=\"#_119\">枚举</a></li><li><a href=\"#_182\">指针⭐⭐⭐⭐⭐</a></li><li><ul><li><a href=\"#_184\">找到一个变量的地址</a></li><li><a href=\"#_199\">*操作符</a></li><li><a href=\"#_236\">声明和初始化指针</a></li><li><a href=\"#_242\">指针容易发生的危险</a></li><li><a href=\"#_254\">指针和数字</a></li><li><a href=\"#_new__261\">使用 new 操作符分配内存</a></li><li><a href=\"#_delete__318\">使用 delete 释放内存</a></li><li><a href=\"#_383\">指针，数组和指针算术</a></li><li><a href=\"#_386\">自动存储、静态存储和动态存储⭐</a></li><li><ul><li><a href=\"#_388\">自动存储</a></li><li><a href=\"#_392\">静态存储</a></li><li><a href=\"#_396\">动态存储</a></li></ul>\n</li><li><a href=\"#_401\">堆栈、堆和内存泄漏⭐</a></li><li><a href=\"#_408\">总结</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>进制与指定进制输出</h1>\n<h2><a id=\"_2\"></a>常用进制</h2>\n<p>C++使用前一(两)位来标识数字常量的基数：</p>\n<ul><li>十进制：第一位为1 ~ 9，如93就是以10为基数的十进制数。</li><li>八进制：第一位是0，第二位为1~7，如042的基数是8，是个八进制数。</li><li>十六进制：前两位为0x或0X，如 0x42 就是基数为16的十六进制数，相当于 10 进制数66。对于十六进制数，字符a ~ f 和 A ~ F表示了十六进制位，对应10 ~ 15。如 0xF 为15，0x45 为 69(4个16加5个1)。</li></ul>\n<h2><a id=\"_8\"></a>输出指定的进制格式</h2>\n<p>使用 cout 输出时可以通过控制符 dec（十进制）、otc（八进制）、hex（十六进制） 指定输出格式</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string&gt;</span>\t</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> oct<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 使用八进制格式输出</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 输出 20 </span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>如果想要以二进制输出，可以用 bitset&lt; size &gt;(int) 函数</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bitset&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"54的二进制数 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">bitset</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">54</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 输出 00110110</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_33\"></a>结构与位字段</h1>\n<h2><a id=\"_34\"></a>位字段</h2>\n<p>位字段用于指定使用的位数，常用于整形和枚举。平常编程一般用不着，多用于低级编程。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bitset&gt;</span></span>\n\n<span class=\"token comment\">// 声明结构 structureOne</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">structureOne</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 格式： 变量名:位   // 指定变量 num 的位数 = 4</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 匿名字段，提供字段间距（增加了结构的长度）</span>\n\t<span class=\"token keyword\">bool</span> flag1 <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 原 bool 类型占用 1 字节 8 位的长度，现指定只占 1 位</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"int 的默认数位 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">8</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" bit\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tstructureOne one <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"one.num = 54\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">54</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"54的二进制数 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">bitset</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 0011 0110</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"one.num = \"</span> <span class=\"token operator\">&lt;&lt;</span> one<span class=\"token punctuation\">.</span>num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 输出</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>说明：<br/> 因为数据结构中指定了 num 的位数为4，原二进制数 0011 0110 从低位取起，取得的二进制数为 0110，所以输出十进制数 one.num = 6</p>\n</blockquote>\n<h1><a id=\"_union_64\"></a>共同体 union</h1>\n<p>共同体和结构差不多，也可以构建一个多变量数据结构，但特点是里面的变量共享内存，即只有以变量类型中最长的类型为长度的那一块内存。基于此特点，共同体只能同时存储一个变量（保证一个变量的准确）。<br/> 如：<br/>     共同体内有 int a 和 double b 两个变量，先给 a 赋值，后在给 b 赋值时，则 a 的值可能被覆盖。<br/>     反之如果先给 b 赋值，在给 a 赋值，b 的值可能不会被覆盖。<br/> 具体要看数据类型的长度和赋值的大小而定，但总的来说能保证的就其中一个变量，这也是共同体设计出来的意义。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 共同体</span>\n<span class=\"token keyword\">union</span> unionOne\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> int_val<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> double_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tunionOne one<span class=\"token punctuation\">;</span>\n\tone<span class=\"token punctuation\">.</span>double_val <span class=\"token operator\">=</span> <span class=\"token number\">87.54</span><span class=\"token punctuation\">;</span>                               <span class=\"token comment\">// 给 double_val 赋值</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"double_val = \"</span> <span class=\"token operator\">&lt;&lt;</span> one<span class=\"token punctuation\">.</span>double_val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 87.54</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"intVal = \"</span> <span class=\"token operator\">&lt;&lt;</span> one<span class=\"token punctuation\">.</span>int_val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 1546188227</span>\n\tone<span class=\"token punctuation\">.</span>int_val <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">;</span>                                     <span class=\"token comment\">// 给 int_val 赋值</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"double_val = \"</span> <span class=\"token operator\">&lt;&lt;</span> one<span class=\"token punctuation\">.</span>double_val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 87.54</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"int_val = \"</span> <span class=\"token operator\">&lt;&lt;</span> one<span class=\"token punctuation\">.</span>int_val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 90</span>\n\tone<span class=\"token punctuation\">.</span>double_val <span class=\"token operator\">=</span> <span class=\"token number\">45.65</span><span class=\"token punctuation\">;</span>                               <span class=\"token comment\">// 给 double_val 赋值</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"double_val = \"</span> <span class=\"token operator\">&lt;&lt;</span> one<span class=\"token punctuation\">.</span>double_val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 45.65</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"int_val = \"</span> <span class=\"token operator\">&lt;&lt;</span> one<span class=\"token punctuation\">.</span>int_val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 858993459</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>在 double_val 有值的情况下，给 int_val 赋值后，double_val 的值没有被覆盖。<br/> 后面再给 double_val 赋值后，int_val 的值被覆盖了。<br/> 多次测试后得出结论: 给小类型变量赋值大类型变量不一定会被覆盖，但给最大类型变量赋值小类型变量一定会被覆盖。</p>\n</blockquote>\n<p>共用体的用途：<br/>     当数据项使用两种或更多种格式（但不会同时使用）时，可节省空间。例如，假设管<br/> 理一个小商品目录，其中有一些商品的 id 为整型，而另一些的 id 为字符串。在这种情况下，可以这样做：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">goods</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> brand<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> type<span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">union</span> id<span class=\"token punctuation\">{<!-- --></span>             <span class=\"token comment\">// id 共同体</span>\n\t\t<span class=\"token keyword\">long</span> id_num<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// long 类型 id</span>\n\t\t<span class=\"token keyword\">char</span> id_char<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符串 id</span>\n\t<span class=\"token punctuation\">}</span>id_val<span class=\"token punctuation\">;</span>              <span class=\"token comment\">// id 变量 id_val</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 初始化</span>\ngoods goodOne<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span>（goodOne<span class=\"token punctuation\">.</span>type<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 根据类型选择一种 id 类型存储</span>\n\tcin <span class=\"token operator\">&gt;</span> goodOne<span class=\"token punctuation\">.</span>id_val<span class=\"token punctuation\">.</span>id_num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存入 int 型 id 变量 id_num</span>\n<span class=\"token keyword\">else</span>\n\tcin <span class=\"token operator\">&gt;</span> goodOne<span class=\"token punctuation\">.</span>id_val<span class=\"token punctuation\">.</span>id_char<span class=\"token operator\">:</span> <span class=\"token comment\">// 存入 char 型 变量 id_char</span>\n</code></pre>\n<h1><a id=\"_119\"></a>枚举</h1>\n<p>C++的enum 工具提供了另一种创建符号常量的方式，这种方式可以代替const。.</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">enum</span>  <span class=\"token class-name\">color</span><span class=\"token punctuation\">{<!-- --></span>red<span class=\"token punctuation\">,</span>orange<span class=\"token punctuation\">,</span>yellow<span class=\"token punctuation\">,</span>green<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 定义枚举类型 color</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"red = \"</span> <span class=\"token operator\">&lt;&lt;</span> red <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// red = 0</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"orange = \"</span> <span class=\"token operator\">&lt;&lt;</span> orange <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// orange = 1</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"yellow = \"</span> <span class=\"token operator\">&lt;&lt;</span> yellow <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// yellow = 2</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"green = \"</span> <span class=\"token operator\">&lt;&lt;</span> green <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// green = 3</span>\n\t\n\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> yellow<span class=\"token punctuation\">;</span> \n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"num = \"</span> <span class=\"token operator\">&lt;&lt;</span> green <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 赋值成功，枚举自动提升为 int 类型</span>\n\n\tcolor colorOne<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 定义一个枚举 color 类型的变量 colorOne</span>\n\tcolorOne <span class=\"token operator\">=</span> orange<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 合法</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"colorOne = \"</span> <span class=\"token operator\">&lt;&lt;</span> colorOne <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// colorOne = 1</span>\n\n\t<span class=\"token comment\">//colorOne = 1;                  // 非法，枚举类型无法转换成整型 </span>\n\tcolorOne <span class=\"token operator\">=</span> <span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 合法，整型强转成 color 枚举 </span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"colorOne = \"</span> <span class=\"token operator\">&lt;&lt;</span> colorOne <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// colorOne = 2</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>总结：<br/> 枚举的创建与结构类似，里面的每个变量都是一个 enum 对象，是一个常量 ，而非字符串或数值<br/> 枚举会自动提升为整型，整型转换成枚举时需要强转。推测就是枚举是一种类似于 tinyint 的短整型数据，因此需要强转 int 。<br/> 通常枚举用来定义常量，可以选择匿名的方式 enum { red,orange,yellow,green };</p>\n</blockquote>\n<p>初始化时可以直接给枚举对象赋值，枚举对象的值必须是整型（包括 int 和 long 等），不赋值则默认从 0 开始赋值。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">{<!-- --></span>red <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> orange <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> yellow <span class=\"token operator\">=</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> green <span class=\"token operator\">=</span> <span class=\"token number\">16</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>也可以只给某些枚举对象赋值</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">{<!-- --></span>red<span class=\"token punctuation\">,</span> orange <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">,</span> green <span class=\"token operator\">=</span> <span class=\"token number\">16</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>枚举对象的默认赋的值是前一个对象的值 + 1，像这里的 red = 0，yellow = 13</p>\n</blockquote>\n<p>多个枚举对象的值可以相同</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">{<!-- --></span>red <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> orange <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> yellow <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> green <span class=\"token operator\">=</span> <span class=\"token number\">16</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>枚举的取值范围</strong></p>\n<p>最初，对于枚举来说，只有声明中指出的那些值是有效的。不过，C+现在通过强制类型转换，增加了可赋给枚举变量的合法值。每个枚举都有取值范围(range),通过强制类型转换，可以将取值范围中的任何整数值赋给枚举变量，<font color=\"red\" size=\"4\"><strong>即使这个值不是枚举值</strong></font>。例如，假设 bits 和 myflag 的定义如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">bits</span><span class=\"token punctuation\">{<!-- --></span>one <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>two <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>four <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>eight <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">}</span>；\nbits myflag；\n</code></pre>\n<p>则下面的代码将是合法的：</p>\n<pre><code class=\"prism language-cpp\">myflag <span class=\"token function\">bits</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 合法,因为 6 在 bits 枚举的取值范围内</span>\n</code></pre>\n<p>其中6不是枚举值，但它位于枚举定义的取值范围内。</p>\n<blockquote>\n<p>取值范围的定义如下。<br/>     首先，要找出上限，需要知道枚举量的最大值。找到大于这个最大值的、最小的2的幂，将它减去1，得到的便是取值范围的上限。<br/>     例如，前面定义的 bigstep 的最大值枚举值是101。在2的幂中，比这个数大的最小值为128，因此取值范围的上限为127。要计算下限，需要知道枚举量的最小值。如果它不小于0，则取值范围的下限为0。否则，采用与寻找上限方式相同的方式，但加上负号。<br/>     例如，如果最小的枚举量为-6，而比它小的、最大的2的幂是-8（加上负号），因此下限为-7。选择用多少空间来存储枚举由编译器决定。对于取值范围较小的枚举，使用1个字节或更少的空间。而对于包含long类型值的枚举，则使用4个字节。</p>\n</blockquote>\n<h1><a id=\"_182\"></a>指针⭐⭐⭐⭐⭐</h1>\n<p>指针是一个变量，其存储的是值得地址，而不是值本身。</p>\n<h2><a id=\"_184\"></a>找到一个变量的地址</h2>\n<p>如何找到一个常规变量的地址？只需要对变量应用地址操作符 ’&amp;‘ 即可。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\tstring str_one <span class=\"token operator\">=</span> <span class=\"token string\">\"嘻嘻嘻\"</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"num 地址：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>num <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// num 地址：012FF6D0</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str_one 地址：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>str_one <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// str_one 地址：012FF6AC</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_199\"></a>*操作符</h2>\n<p><code>*</code> 操作符称为间接值操作符或解除引用操作符，编译器会智能区分操作符用作 <font color=\"red\" size=\"4\"><strong>解除引用</strong></font> 还是 <font color=\"red\" size=\"4\"><strong>乘法</strong></font>。<br/> 对于一个指针变量来说，指针名表示 <font color=\"blue\" size=\"4\"><strong>地址</strong></font>，指针的间接值表示存储在该地址的 <font color=\"green\" size=\"4\"><strong>值</strong></font>。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\tstring str_one <span class=\"token operator\">=</span> <span class=\"token string\">\"嘻嘻嘻\"</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"num 地址：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>num1 <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// num 地址：012FF6D0</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str_one 地址：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>str_one <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// str_one 地址：012FF6AC</span>\n\n\t<span class=\"token comment\">// 声明指针</span>\n\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p_num<span class=\"token punctuation\">;</span>\n\tp_num <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">;</span> \n\t<span class=\"token comment\">// 输出值</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"num = \"</span> <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//    num = 6</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*p_num = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p_num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// *p_num = 6</span>\n\t<span class=\"token comment\">// 输出地址</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&amp;num = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// &amp;num = 006FFB24</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p_num  = \"</span> <span class=\"token operator\">&lt;&lt;</span> p_num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// p_num = 006FFB24</span>\n\t<span class=\"token comment\">// 用指针变量修改值</span>\n\t<span class=\"token operator\">*</span>p_num <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p_num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"after *p_num + 1, num = \"</span> <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//    num = 6</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>int 变量 <code>num</code> 和指针变量 <code>p_num</code> 只不过是同一枚硬币的两面。<br/> 变量 <code>num</code> 表示值，使用 <code>&amp;</code>操作符来获得地址。<br/> 而变量 <code>p_num</code> 表示地址，并使用 <code>*</code> 操作符来获得值。<br/> 由于 <code>p_num</code> 指向<code>num</code> ，因此<code>*p_num</code> 和 <code>num</code> 完全等价。<br/> 可以像使用int变量那样使用<code>*p_num </code>。甚至可以将值赋给<code>*p_num</code> ，这样做将修改指向的值，即 <code>num </code>。</p>\n</blockquote>\n<h2><a id=\"_236\"></a>声明和初始化指针</h2>\n<ul><li>指针是一种复合类型变量。</li><li>指针声明必须指定指针指向的数据的类型。如 <code>int *p_num</code> 、<code>double *p_double</code> 、<code>char* p_char</code>。<code>类型* 指针名</code>和<code>类型 *指针名</code>都是合法的。</li><li>虽然 <code>int *p_num</code> 、<code>double *p_double</code> 两个指针指向的数据类型长度不一样，但是指针（地址）的长度通常都是一样的。一般地址（指针）的长度为2个、4个字节，取决于计算机系统。</li><li>可以在声明指针时初始化指针，如 <code>int *pt = &amp;num</code> 。被初始化的是指针<code>pt</code>而不是它指向的值 <code>*pt</code>。</li></ul>\n<h2><a id=\"_242\"></a>指针容易发生的危险</h2>\n<p>    极其重要的一点是：<font color=\"red\" size=\"4\"><strong>在C++中创建指针时，计算机将分配用来存储地址的内存，但不会分配用来存储指针所指向的数据的内存。为数据提供空间的应该是初始化指针之前的一个独立的步骤。</strong></font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p_num<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 声明指针，但是并没有进行初始化</span>\n<span class=\"token operator\">*</span>p_num <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改值，但是因为指针没有初始化，它并没有指向任何一个地址，因此会报错。</span>\n</code></pre>\n<p>应该在赋值之前初始化数据地址</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p_num <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">;</span>   \n<span class=\"token operator\">*</span>p_num <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_254\"></a>指针和数字</h2>\n<p>不能简单的将整数赋值给指针。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p_num<span class=\"token punctuation\">;</span>\np_num <span class=\"token operator\">=</span> <span class=\"token number\">0xf5100000</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 不能直接将整数赋值给指针</span>\np_num <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xf5100000</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 把整数强转成地址再赋值给指针</span>\n</code></pre>\n<h2><a id=\"_new__261\"></a>使用 new 操作符分配内存</h2>\n<p>指针是实现 <code>OOP</code> 技术的重要部分。<br/> 变量，是在 <font color=\"red\" size=\"4\"><strong>编译阶段分配的、有名称的内存</strong></font>。<br/> 而指针只是为了可以通过名称直接访问内存提供了一个别名。<br/> 指针真正的用武之地在于，<font color=\"red\" size=\"4\"><strong>在运行阶段分配未命名的内存</strong></font> 以存储值。<br/> 在这种情况下，<font color=\"red\" size=\"4\"><strong>只能通过指针来访问内存，而不知道内存的确切位置</strong></font> 。</p>\n<p>在运行阶段为一个<code>int</code>值分配未命名的内存，并使用指针来访问这个值。<br/> 程序员要告诉 <code>new</code>，需要为哪种数据类型分配内存。<code>new</code>将找到一个长度正确的内存块，并返回该内存块的地址。程序员的责任是将该地址赋给一个指针。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如此 <code>pn</code> 就是指向新内存的指针，而新内存里存储着一个 <code>int</code> 变量，但是这个变量没有名称，称为数据对象更为合适，且只能通过指针来访问。</p>\n<p><strong>分配数组内存</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>par <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// new 操作符返回第一个元素的内存地址赋值给指针</span>\n</code></pre>\n<blockquote>\n<p>注意：<code>int</code>数组的长度无法获取，一般在初始化的时候记录下来。</p>\n</blockquote>\n<blockquote>\n<p>内存被耗尽：</p>\n<ul><li>计算机可能会由于没有足够的内存而无法满足<code>new</code>的请求。在这种情况下，new将返回O。</li><li>在C++中，值为<code>0</code>的指针被称为空值指针<code>null pointer</code>。C++ 确保空值指针不会指向有效的数据，因此它常被用来表<br/> 示操作符或函数失效，如果成功，它们将返回一个有用的指针。</li><li>如果无法分配内存，new除返回空值指针外，还可能引发<code>bad alloc</code>异常。</li><li>对于数组而言，<code>new </code>操作符返回的是第一个元素的内存地址</li></ul>\n</blockquote>\n<p><strong>创建动态结构</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">inflatable</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> volume<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\tinflatable<span class=\"token operator\">*</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> inflatable<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 创建一个未命名的 inflatable 结构</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"input name: \"</span><span class=\"token punctuation\">;</span>\n\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"input volume: \"</span><span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>volume<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"input price: \"</span><span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">&gt;&gt;</span> ps<span class=\"token operator\">-&gt;</span>price<span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"name = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"volume = \"</span> <span class=\"token operator\">&lt;&lt;</span> ps<span class=\"token operator\">-&gt;</span>volume <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"price = \"</span> <span class=\"token operator\">&lt;&lt;</span> ps<span class=\"token operator\">-&gt;</span>price <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><code>—&gt;</code> 成员操作符：提取指针指向的数据结构中的成员变量或函数，(*ps).name == ps-&gt;name</p>\n</blockquote>\n<h2><a id=\"_delete__318\"></a>使用 delete 释放内存</h2>\n<p>一般在 C++ 程序中，使用完内存需要手动释放内存。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// new 分配一块容纳 int 类型数据的内存，把地址赋给 ps 指针</span>\n<span class=\"token comment\">// 使用指针</span>\n<span class=\"token keyword\">delete</span> ps<span class=\"token operator\">:</span>          <span class=\"token comment\">// 释放掉名为 ps 的指针指向的内存</span>\n<span class=\"token keyword\">delete</span> ps<span class=\"token operator\">:</span>          <span class=\"token comment\">// 释放已经释放过的内存块，将可能发生未知后果，是不安全的行为。</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>par <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> par<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 释放数组指针</span>\n\n</code></pre>\n<blockquote>\n<p>注意:</p>\n<ul><li>delete ps 释放掉指针指向的内存，但 <font color=\"red\" size=\"4\"><strong>并没有删除 ps 这个指针</strong></font>，ps 还能重新赋值其他地址继续使用</li><li>不要尝试释放已经释放的内存块，很可能会发生未知的后果，所以一般不要使用两个指针指向同一块内存，容易出现重复释放的问题。但是对空指针使用 delete 释放是安全的。</li><li>不要用 delete 去释放不是 new 分配的内存。</li><li>如果使用 new [] 为数组分配内存，则应使用 delete [] 释放内存。</li><li>如果使用 new [] 为实体分配内存，则应使用 delete 释放内存。</li></ul>\n</blockquote>\n<p>在 C++ 编程中，一定要配对地使用new和delete，否则将发生 <font color=\"red\" size=\"4\"><strong>内存泄漏(memory leak)</strong></font>。</p>\n<blockquote>\n<p><font color=\"red\" id=\"neicunxielou\" size=\"4\"><strong>内存泄漏：</strong></font><br/>   被分配的内存再也无法使用了，通常是 new 了一个数据对象，分配了一块地址，赋给了一个指针。当指针重新指向另外一个地址之前，没有 delete 释放这个内存，这个内存就处于无引用状态，但 C++ 又不会主动释放没有被引用的内存，导致这块内存一直被占用着，于是本来能用的存储就无端少了一块，缩水了。如果内存泄漏严重，则程序将由于不断寻找更多内存而终止。</p>\n</blockquote>\n<p><strong>new 和 delete 操作字符串 范例</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>disable<span class=\"token operator\">:</span><span class=\"token number\">4996</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token comment\">// #define _CRT_SECURE_NO_WARNINGS</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>    \n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// getName() 函数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\n\tname <span class=\"token operator\">=</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"name 内存 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// (int*)name 强转指针类型，cout 对于 int* 会输出地址 </span>\n\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> name<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 重用指针</span>\n\tname <span class=\"token operator\">=</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"name 内存 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> name<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> temp<span class=\"token punctuation\">[</span><span class=\"token number\">80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 创建长度为 80 的临时字符数组</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"数组名：\"</span><span class=\"token punctuation\">;</span> \n\tcin <span class=\"token operator\">&gt;&gt;</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">//       // 给 temp 赋值</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// new 创建合适长度的新字符数组并把地址赋值给指针</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pn<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 把临时数组的内容复制到新数组 </span>\n\t<span class=\"token keyword\">return</span> pn<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 返回新数组的指针</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>说明：程序运行出现以下报错，说明你用的是微软的 cl.exe 编译器，它认为 strcpy 函数不安全，好像其他编译器不会。</p>\n<pre><code>错误 C4996 'strcpy': This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details\n</code></pre>\n<p>解决：头文件引入 <code>#define _CRT_SECURE_NO_WARNINGS</code> 或 <code>#pragma warning(disable:4996)</code> 或用 <code>strcpy_s</code> 函数代替 <code>strcpy</code> 函数</p>\n</blockquote>\n<h2><a id=\"_383\"></a>指针，数组和指针算术</h2>\n<p>指针和数组基本等价的原因在于指针算术(pointer arithmetic)和C+内部处理数组的方式。将整数变量加1后，其值将增加1：但将指针变量加1后，增加的量等于它指向的类型的字节数。将指向double的指针加1后，如果系统对double使用8个字节存储，则数值将增加8；将指向shot的指针加1后，如果系统对shot使用2个字节存储，则指针值将增加2。</p>\n<h2><a id=\"_386\"></a>自动存储、静态存储和动态存储⭐</h2>\n<p>根据分配内存的方式不同，C++有3种管理数据内存的方式：自动存储、静态存储和动态存储（有时也叫作自由存储空间或堆)。</p>\n<h3><a id=\"_388\"></a>自动存储</h3>\n<p>在函数内部定义的常规变量使用自动存储空间，被称为自动变量(automatic variable)。<br/> 这意味着它们在所属的函数被调用时 <font color=\"red\" size=\"4\"><strong>自动产生</strong></font>，在该函数结束时消亡。<br/> 例如，程序中的 temp 数组仅当 getName(）函数活动时存在。当程序控制权回到 main() 时，temp 使用的内存将 <font color=\"red\" size=\"4\"><strong>自动被释放</strong></font>。如果 getName() 返回 temp 的地址，则 main() 中的 name 指针指向的内存（即 temp 的地址所在的内存）很大几率会被覆盖掉重新使用。这就是在 getName() 中使用 new 创建匿名数组分配内存，再返回指针的原因，其不会被自动释放。实际上，自动变量是一个局部变量，其作用域为包含它的代码块。代码块是被包含在花括号中的一段代码。到目前为止，我们使用的所有代码块都是整个函数。函数内也可以有代码块。如果在其中的某个代码块定义了一个变量，则该变量仅在程序执行该代码块中的代码时存在。</p>\n<h3><a id=\"_392\"></a>静态存储</h3>\n<p>静态存储是 <font color=\"red\" size=\"4\"><strong>整个程序执行期间都存在</strong></font> 的存储方式。使变量成为静态的方式有两种：</p>\n<ul><li>一种是在函数外面定义它。</li><li>另一种是在声明变量时使用关键字static： <code>static double fee 56.50;</code></li></ul>\n<h3><a id=\"_396\"></a>动态存储</h3>\n<p><code>new</code>和<code>delete</code>操作符提供了一种比自动变量和静态变量更灵活的方法。<br/> 它们管理了一个内存池，这在<code>C++</code>中被称为自由存储空间(<code>free store</code>)。<font color=\"blue\" size=\"4\"><strong>内存池同用于静态变量和自动变量的内存是分开的</strong></font>。<br/> 上面的程序表明，<code>new</code>和<code>delete</code>允许在一个函数中分配内存，而在另一个函数中释放它。因此，数据的生命周期就 <font color=\"red\" size=\"4\"><strong>不完全受到程序或函数的生存时间的控制</strong></font>了。与使用常规变量相比，使用<code>new</code>和<code>delete</code>使程序员对程序如何使用内存有更大的控制权。</p>\n<h2><a id=\"_401\"></a>堆栈、堆和内存泄漏⭐</h2>\n<p>  如果使用<code>new</code>操作符在自由存储空间（堆）上创建变量后，后续没有调用<code>delete</code>释放数据内存，则当包含指针的内存由于作用域规则和对象生命周期的原因被释放，在自由存储空间上动态分配的变量或结构也将继续存在。这将导致无法这些存在的变量或结构，因为指向这些内存的指针已经被释放掉了或者失效了，这将导致 <font color=\"red\" size=\"4\"><strong>内存泄漏</strong></font> &lt;<a href=\"#neicunxielou\">了解详细</a>&gt; 。<strong>被泄漏的内存将在程序的整个生命周期内都不可使用</strong>。这些内存被分配出去，但无法收回。极端情况（不过不常见）是，内存泄漏可能会非常严重，以致于应用程序可用的内存被耗尽，出现内存耗尽错误，导致程序崩渍。<br/>   另外，这种泄漏还会给一些操作系统或在相同的内存空间中运行的应用程序带来负面影响，导致它们也相应崩溃。即使是最好的程序员和软件公司，也可能导致内存泄漏。<br/>   要避免内存泄漏，最好是养成这样一种习惯，即同时使用<code>new</code>和<code>delete</code>操作符，在自由存储空间上动态分配内存，随后便释放它。</p>\n<blockquote>\n<p>注意：<br/>   指针是功能最强大的C++工具之一，但也最危险，因为它们允许执行对计算机不友好的操作，如使用未经初始化的指针来访问内存或者试图释放同一个内存块两次。另外，在通过实践习惯指针表示法和指针概念之前，指针是容易引起迷惑的。</p>\n</blockquote>\n<h2><a id=\"_408\"></a>总结</h2>\n<p>数组、结构和指针是C++的3种 <strong>复合类型</strong>。</p>\n<p><font color=\"green\" size=\"4\"><strong>数组</strong></font>：<br/>   可以在一个数据对象中存储多个同种类型的值。通过使用索引或下标，可以访问数组中各个元素。</p>\n<p><font color=\"indigo\" size=\"4\"><strong>结构</strong></font>：<br/>   可以将多个不同类型的值存储在同一个数据对象中，可以使用成员关系操作符(.)来访问其中的成员。使用结构的第一步是创建结构模板，它定义结构存储了哪些成员。模板的名称将成为新类型的标识符，然后就可以声明这种类型的结构变量。</p>\n<p><font color=\"brown\" size=\"4\"><strong>共用体</strong></font>：<br/>   可以存储一个值，但是这个值可以是不同的类型，成员名指出了使用的模式。指针是被设计用来存储地址的变量的。我们说，指针指向它存储的地址。指针声明指出了指针指向的对象的类型。对指针应用解除引用操作符，将得到指针指向的位置中的值。</p>\n<p><font color=\"peru\" size=\"4\"><strong>字符串</strong></font>：<br/>   是以空字符为结尾的一系列字符。字符串可用引号括起的字符串常量表示，其中隐式包含了结尾的<code>空字符</code>。可以将字符串存储在<code>char数组</code>中，可以用被初始化为指向字符串的<code>char指针</code>表示字符串。函数<code>strlen()</code>返回字符串的长度，其中不包括空字符。函数<code>strcpy()</code>将字符串从一个位置复制到另个位置。在使用这些函数时，应当包含头文件<code>cstring</code>或<code>string.h</code>。头文件<code>string</code>支持的C++ <code>string</code>类提供了另一种对用户更为友好的字符串处理方法。具体地说，<code>string</code>对象将根据要存储的字符串自动调整其大小，用户可以使用赋值操作符来复制字符串。<code>new</code>操作符允许在程序运行时为数据对象请求内存。该操作符返回获得内存的地址，可以将这个地址赋给一个指针，程序将只能使用该指针来访问这块内存。如果数据对象是简单变量，则可以使用解除引用操作符<code>*</code>来获得其值。如果数据对象是数组，则可以像使用数组名那样使用指针来访问元素。如果数据对象是结构，则可以用指针解除引用操作符<code>-&gt;</code>来访问其成员。</p>\n<p><strong>指针和数组紧密相关</strong>。<br/>   如果<code>ar</code>是数组名，则表达式<code>ar[i]</code>被解释为<code>*(ar+i)</code>，其中数组名被解释为数组第一个元素的地址。这样，数组名的作用和指针相同。反过来，可以使用数组表示法，通过指针名来访问<code>new</code>分配的数组中的元素。操作符<code>new</code>和<code>delete</code>,允许显式控制何时给数据对象分配内存，何时将内存归还给内存池。自动变量是在函数中声明的变量，而静态变量是在函数外部或者使用关键字<code>static</code>声明的变量，这两种变量都不太灵活。自动变量在程序执行到其所属的代码块（通常是函数定义）时产生，在离开该代码块时终止。静态变量在整个程序周期内都存在。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}