{"blogid": "126340461", "writerAge": "码龄5年", "writerBlogNum": "23", "writerCollect": "616", "writerComment": "57", "writerFan": "97", "writerGrade": "3级", "writerIntegral": "484", "writerName": "weeksooo", "writerProfileAdress": "writer_image\\profile_126340461.jpg", "writerRankTotal": "30657", "writerRankWeekly": "4797", "writerThumb": "122", "writerVisitNum": "36888", "blog_read_count": "1410", "blog_time": "于 2022-08-21 11:28:42 发布", "blog_title": "利用yolov7训练自己的数据集； yolov7的安装与使用 ； yolov7源码解读", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>*<em>免责声明:<br/> 1\\此方法仅提供参考<br/> 2\\搬了其他博主的操作方法,以贴上路径.<br/> 3*</em></p>\n<h2><a id=\"Anconda_5\"></a>场景一:Anconda环境基本操作</h2>\n<h2><a id=\"yolov7_6\"></a>场景二:yolov7的使用</h2>\n<h2><a id=\"yolov7_7\"></a>场景三:yolov7训练自己的数据集</h2>\n<h2><a id=\"_8\"></a>场景四:实用工具</h2>\n<h2><a id=\"yolov7_9\"></a>场景五:yolov7源码解读</h2>\n<h2><a id=\"_14\"></a>…</h2>\n<h2><a id=\"_Anconda_16\"></a>场景一: Anconda环境基本操作</h2>\n<p><strong>1:基本命令</strong><br/> 查看Anaconda的版本信息 <code>conda -V</code><br/> 查看python版本信息 <code>python</code><br/> 打开Jupyter Notebook命令 <code>jupyter notebook</code> 或者 <code>ipython notebook</code><br/> 退出python输入环境: <code>ctrl+z</code><br/> 命令行终止正在运行的程序命令 : <code>ctrl + c</code></p>\n<p>查看 opencv版本信息:<br/> <img alt=\"请添加图片描述\" src=\"image\\4a4674fcf1f549219b2b170a3028dbd0.png\"/></p>\n<p><strong>2:创建使用自己的虚拟环境</strong></p>\n<p>生成一个名叫 jiance的环境,用来进行做识别任务:<br/> <code>conda create -n jiance python=3.7</code></p>\n<p>进入这个环境,也就是激活这个环境<br/> <code>source activate jiance </code> windows下: <code>activate jiance</code></p>\n<p>接下来就是 在这个环境中可以下载你所需要的包 <code>pip insatll numpy</code> 或者是<code>conda install numpy=1.10</code></p>\n<p>退出这个环境 :<code>source deactivate</code></p>\n<p>查看创建了哪些环境:<code>conda info --envs</code></p>\n<p>查看创建了包:<code>conda list</code></p>\n<p>退出这个jiance环境: linux 下<code>source deactivate</code> windows下 <code>deactivate</code></p>\n<p><strong>3:删除包 、删除环境 或者更新包</strong></p>\n<p>删除numpy 包：<code>conda remove numpy</code> 或者指定 <code>conda remove numpy=1.10</code></p>\n<p>更新numpy包: <code>conda update numpy</code></p>\n<p>更新jiance里面所有包: <code>conda update - -all</code></p>\n<p>搜索numpy包: <code>conda search numpy</code></p>\n<p>删除jiance这个环境的命令: <code>conda env remove -n jiance</code></p>\n<p><strong>4: 共享环境</strong></p>\n<blockquote>\n<p>例如我现在的jiance这个环境好多包我下载了,配好了识别的环境,别人想用我的环境或者是我想快速把项目从我的电脑上移植到其他电脑上:</p>\n</blockquote>\n<p>首先进入我的环境: <code>activate jiance</code> 执行这条语句<code>conda env export &gt; 名字.yaml</code></p>\n<pre><code>例如 conda env export &gt; environment.yaml  \n命令的第一部分 conda env export 用于输出环境中的所有包的名称\n通过后半部分environment.yaml将其保存到并命名为“environment.yaml”\n</code></pre>\n<p><img alt=\"请添加图片描述\" src=\"image\\1950d7abdf4547aa9ab4274e2d5eb8a1.png\"/><br/> 别人需要做的是拿到这个yaml文件: <code>conda env create -f environment.yaml</code></p>\n<h2><a id=\"_yolov7_75\"></a>场景二: yolov7的使用</h2>\n<h2><a id=\"1pytorch_77\"></a>1：安装pytorch</h2>\n<blockquote>\n<p>切换到上面的jiance的环境 <code>activate jiance</code> or <code>source activate jiance</code></p>\n</blockquote>\n<p><strong>无GPU环境</strong></p>\n<pre><code>conda install pytorch==1.8.0 torchvision==0.9.0 torchaudio==0.8.0 cpuonly\n</code></pre>\n<p><strong>GPU环境</strong></p>\n<blockquote>\n<p>进入pytorch官网，获取conda命令。<a href=\"https://pytorch.org/\">pytorch网址</a></p>\n</blockquote>\n<pre><code>conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch\n</code></pre>\n<h2><a id=\"2yolo_v7_94\"></a>2：下载yolo v7</h2>\n<p><a href=\"https://github.com/WongKinYiu/yolov7\">yolo v7 github地址</a></p>\n<p><img alt=\"请添加图片描述\" src=\"image\\7d4052f3a5104d2e9b85b90c3ad7c799.png\"/></p>\n<h2><a id=\"3pycharmAnaconda_98\"></a>3：将下载好的项目进行解压，用pycharm打开，然后将项目关联到上面在Anaconda中创建的虚拟环境</h2>\n<p><img alt=\"请添加图片描述\" src=\"image\\f9290a2ff0c64510ae966238c837a703.png\"/></p>\n<h2><a id=\"4____101\"></a>4: 下载依赖</h2>\n<blockquote>\n<p>前面已经下载过torch，所以可以把这里的requirements.txt里面的torch相关信息注释掉</p>\n</blockquote>\n<p><img alt=\"请添加图片描述\" src=\"image\\a8a49ab45ea446319cee42f2e38de53b.png\"/></p>\n<p>方式一：在pycharm终端中执行<code>pip install -r requirements.txt</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a72028a48b064546adfe4eaea89ae241.png\"/></p>\n<p>方式二：在项目文件夹中的最上方输入cmd 就可以在windows终端打开到该项目文件夹下 ,切换到虚拟环境 <code>activate jiance</code> 然后再输入命令 <code>pip install -r requirements.txt</code><br/> <img alt=\"在这里插入图片描述\" src=\"image\\4f93d7bde23a4b03bf2abde8ef69be13.png\"/></p>\n<h2><a id=\"5_113\"></a>5：下载权值文件</h2>\n<p><a href=\"https://github.com/WongKinYiu/yolov7/releases\">权值文件下载地址</a></p>\n<p><img alt=\"请添加图片描述\" src=\"image\\3c1c840b97c3498182431507b0fcce67.png\"/><br/> <img alt=\"请添加图片描述\" src=\"image\\fb174210b4c4434cb0e2ca9a031102ff.png\"/></p>\n<h2><a id=\"6__119\"></a>6： 测试</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\57e49aa2e7574ff49297e0561bd543cf.png\"/><br/> <strong>测试图片</strong></p>\n<pre><code>python detect.py --source=inference/images/bus.jpg\n</code></pre>\n<pre><code>python detect.py --source=inference/images/bus.jpg  --weights=weights/yolov7.pt\n</code></pre>\n<p><strong>置信度超过0.4显示出来</strong></p>\n<pre><code>python detect.py --source=inference/images/bus.jpg  --weights=weights/yolov7.pt  --conf 0.4\n</code></pre>\n<p><strong>测试视频</strong></p>\n<pre><code>python detect.py --source=inference/images/1.mp4  --weights=weights/yolov7.pt\n</code></pre>\n<p><strong>测试摄像头</strong></p>\n<pre><code>python detect.py --source 0\n</code></pre>\n<pre><code>python detect.py --source 0  --weights=weights/yolov7.pt\n</code></pre>\n<p><strong>模型集成检测</strong></p>\n<pre><code>python detect.py --source=inference/images/bus.jpg  --weights=weights/yolov7.pt yolov7_1.pt\n</code></pre>\n<p><strong>更改测试保存路径</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\abf63540f6674db3bc983e39f8902bab.png\"/></p>\n<h2><a id=\"_156\"></a>…</h2>\n<h2><a id=\"_yolov7_157\"></a>场景三: yolov7训练自己的数据集</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e7d155d0a15b4fab904f1d6794de952e.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3b842d5775a14ddaa5614fb75a7f285a.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\cffca0ffda444d9c9962ff5d7732e69a.png\"/></p>\n<h2><a id=\"11___165\"></a>1.1: 训练技巧</h2>\n<blockquote>\n<p>yolov7 和 yolov5的代码工程高度相似，应该是yolov5直接改过来的，所以yolov5拥有的技巧，yolov7继续沿用。</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/flyfish1986/article/details/117594265\">目标检测 YOLOv5 anchor设置</a><br/> <a href=\"https://blog.csdn.net/qq_27278957/article/details/120036450\">yolov5 anchors设置详解</a></p>\n<p><a href=\"https://blog.csdn.net/YaoYee_21/article/details/112490344\">【Python】计算VOC格式XML文件中目标面积和长宽比并生成直方图</a><br/> <img alt=\"请添加图片描述\" src=\"image\\c273f9ba7b5f44d08cb40e9122708af9.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\c926770579054ac3a8df977eb2adf1fb.png\"/></p>\n<p><strong>记得放在jyputer上计算方便保存和看结果</strong></p>\n<pre><code># -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Jan 10 21:48:48 2021\n\n@author: YaoYee\n\"\"\"\n\nimport os\nimport xml.etree.cElementTree as et\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nimport cv2\n\npath = \".......................\\Annotations\" #你的xml路径\nfiles = os.listdir(path)\n\narea_list = []\nratio_list = []\n\n\ndef file_extension(path):\n    return os.path.splitext(path)[1]\n\n\nfor xmlFile in tqdm(files, desc='Processing'):\n    if not os.path.isdir(xmlFile):\n        if file_extension(xmlFile) == '.xml':\n            tree = et.parse(os.path.join(path, xmlFile))\n            root = tree.getroot()\n            filename = root.find('filename').text\n            # print(\"--Filename is\", xmlFile)\n\n            for Object in root.findall('object'):\n                bndbox = Object.find('bndbox')\n                xmin = bndbox.find('xmin').text\n                ymin = bndbox.find('ymin').text\n                xmax = bndbox.find('xmax').text\n                ymax = bndbox.find('ymax').text\n\n                area = (int(ymax) - int(ymin)) * (int(xmax) - int(xmin))\n                area_list.append(area)\n                # print(\"Area is\", area)\n\n                ratio = (int(ymax) - int(ymin)) / (int(xmax) - int(xmin))\n                ratio_list.append(ratio)\n                # print(\"Ratio is\", round(ratio,2))\n\nsquare_array = np.array(area_list)\nsquare_max = np.max(square_array)\nsquare_min = np.min(square_array)\nsquare_mean = np.mean(square_array)\nsquare_var = np.var(square_array)\nplt.figure(1)\nplt.hist(square_array, 20)\nplt.xlabel('Area in pixel')\nplt.ylabel('Frequency of area')\nplt.title('Area\\n' \\\n          + 'max=' + str(square_max) + ', min=' + str(square_min) + '\\n' \\\n          + 'mean=' + str(int(square_mean)) + ', var=' + str(int(square_var))\n          )\nplt.savefig('aabb1.jpg')\n\n\nratio_array = np.array(ratio_list)\nratio_max = np.max(ratio_array)\nratio_min = np.min(ratio_array)\nratio_mean = np.mean(ratio_array)\nratio_var = np.var(ratio_array)\n\n\nplt.figure(2)\nplt.hist(ratio_array, 20)\nplt.xlabel('Ratio of length / width')\nplt.ylabel('Frequency of ratio')\nplt.title('Ratio\\n' \\\n          + 'max=' + str(round(ratio_max, 2)) + ', min=' + str(round(ratio_min, 2)) + '\\n' \\\n          + 'mean=' + str(round(ratio_mean, 2)) + ', var=' + str(round(ratio_var, 2))\n          )\nplt.savefig('aabb.jpg')\n\n</code></pre>\n<blockquote>\n<p>先统计宽高比 , 然后在 yolov7 程序中创建一个新的 python 文件 test.py, 手动计算锚定框：</p>\n</blockquote>\n<pre><code>import utils.autoanchor as autoAC\n \n# 对数据集重新计算 anchors\nnew_anchors = autoAC.kmean_anchors('./data/mydata.yaml', 9, 640, 5.0, 1000, True)\nprint(new_anchors)\n</code></pre>\n<blockquote>\n<p>输出的 9 组新的锚定框即是根据自己的数据集来计算的，可以按照顺序替换到你所使用的配置文件*.yaml中（比如 cfg/training/yolov7.yaml) , 就可以重新训练了。</p>\n</blockquote>\n<p><img alt=\"请添加图片描述\" src=\"image\\468491cc76fb409781188418dd726a0b.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\2efaaa173a5c40b2aefb579e5116fce2.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\7c3716bffdeb4a8c90c698ac3b730778.png\"/></p>\n<p><a href=\"https://www.cnblogs.com/sddai/p/14662545.html\">超参数进化 Hyperparameter Evolution </a><br/> <img alt=\"请添加图片描述\" src=\"image\\3d9a4490c9464fba8ad3665dfeb24737.png\"/></p>\n<pre><code>python train.py --resume\n</code></pre>\n<p><a href=\"https://github.com/ultralytics/yolov5/issues/475\">多GPU训练</a></p>\n<blockquote>\n<p>在训练时 , 当你的图片的尺寸假如是 320x256，你想让模型的输入也是 320x256.那么你只需要加 <code>--img 320 --rect</code></p>\n</blockquote>\n<h2><a id=\"12__293\"></a>1.2: 训练自己的数据集</h2>\n<p><strong>第一步:使用labelImg标注自己的数据集</strong></p>\n<blockquote>\n<p><code>不要有中文路径</code></p>\n</blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV14D4y1D7Le?from=search&amp;seid=6304322183112888765\">B站教学视频—&gt;LabelImg打标签工具使用说明</a></p>\n<blockquote>\n<p>训练思路: yolov7支持两种训练方式:第一种直接将训练文件的路径写入txt文件传入。第二种直接传入训练文件所在文件夹。</p>\n</blockquote>\n<p><strong>第二步：划分训练集/测试集</strong></p>\n<blockquote>\n<p>我们按照第二种方式:<br/> .<br/> 新建如下几个文件夹,在yolov7下创建mydata文件夹,然后在mydata文件夹下</p>\n<p>.<br/> all_images文件夹放图片<br/> all_xml文件夹放xml文件<br/> make_txt.py 文件用来划分数据集<br/> train_val.py 文件夹用来转换 labels<br/> <img alt=\"在这里插入图片描述\" src=\"image\\76156f96befe4ea3a477f5c937f1cbc9.png\"/><br/> 注意两个py文件要建在mydata文件夹下</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\51f2385a4c82470db23e020b44fa10e5.png\"/></p>\n<p><strong>运行make_txt.py</strong></p>\n<pre><code>import os\nimport random\n#什么都不用改 ,只需要改下面的划分比例\ntrainval_percent = 0.1  \ntrain_percent = 0.9    \nxmlfilepath = 'all_images'\ntxtsavepath = 'ImageSets'\ntotal_xml = os.listdir(xmlfilepath)\nnum = len(total_xml)\nlist = range(num)\ntv = int(num * trainval_percent)\ntr = int(tv * train_percent)\ntrainval = random.sample(list, tv) #从所有list中返回tv个数量的项目\ntrain = random.sample(trainval, tr)\nif not os.path.exists('ImageSets/'):\n    os.makedirs('ImageSets/')\nftrainval = open('ImageSets/trainval.txt', 'w')\nftest = open('ImageSets/test.txt', 'w')\nftrain = open('ImageSets/train.txt', 'w')\nfval = open('ImageSets/val.txt', 'w')\nfor i in list:\n    name = total_xml[i][:-4] + '\\n'\n    if i in trainval:\n        ftrainval.write(name)\n        if i in train:\n            ftest.write(name)\n        else:\n            fval.write(name)\n    else:\n        ftrain.write(name)\nftrainval.close()\nftrain.close()\nfval.close()\nftest.close()\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d5984e35406f4932b8de545210c438d3.png\"/></p>\n<p><strong>第三步: 接下来准备labels，也就是将voc格式转换为yolo格式</strong></p>\n<blockquote>\n<p>运行train_val.py,该文件一方面将all_xml中xml文件转为txt文件存于all_labels文件夹中，另一方面生成训练所需数据存放架构。（这里如果你的数据直接是txt的标签的话将标签转化的功能注释掉即可）代码如下：</p>\n</blockquote>\n<p><img alt=\"请添加图片描述\" src=\"image\\7bc10c4a8f4d40a7b39955142c3dd5a2.png\"/></p>\n<p><strong>train_val.py</strong></p>\n<pre><code>import xml.etree.ElementTree as ET\nimport pickle\nimport os\nimport shutil\nfrom os import listdir, getcwd\nfrom os.path import join\nsets = ['train', 'trainval']\n#改这里...............\nclasses = ['dog' , 'cat']\ndef convert(size, box):\n    dw = 1. / size[0]\n    dh = 1. / size[1]\n    x = (box[0] + box[1]) / 2.0\n    y = (box[2] + box[3]) / 2.0\n    w = box[1] - box[0]\n    h = box[3] - box[2]\n    x = x * dw\n    w = w * dw\n    y = y * dh\n    h = h * dh\n    return (x, y, w, h)\ndef convert_annotation(image_id):\n    in_file = open('all_xml/%s.xml' % (image_id))\n    out_file = open('all_labels/%s.txt' % (image_id), 'w')\n    tree = ET.parse(in_file)\n    root = tree.getroot()\n    size = root.find('size')\n    w = int(size.find('width').text)\n    h = int(size.find('height').text)\n    for obj in root.iter('object'):\n        difficult = obj.find('difficult').text\n        cls = obj.find('name').text\n        if cls not in classes or int(difficult) == 1:   #这里过滤了difficult为1的标签值，如果转换的数目不一样多，即（图像的数目 与转换后的label数目不一样），可以去掉这个过滤条件。\n            continue\n        cls_id = classes.index(cls)\n        xmlbox = obj.find('bndbox')\n        b = (float(xmlbox.find('xmin').text), float(xmlbox.find('xmax').text), float(xmlbox.find('ymin').text),\n             float(xmlbox.find('ymax').text))\n        bb = convert((w, h), b)\n        out_file.write(str(cls_id) + \" \" + \" \".join([str(a) for a in bb]) + '\\n')\nwd = getcwd()\nprint(wd)\nfor image_set in sets:\n    if not os.path.exists('all_labels/'):\n        os.makedirs('all_labels/')\n    image_ids = open('ImageSets/%s.txt' % (image_set)).read().strip().split()\n    image_list_file = open('images_%s.txt' % (image_set), 'w')\n    labels_list_file=open('labels_%s.txt'%(image_set),'w')\n    for image_id in image_ids:\n        image_list_file.write('%s.jpg\\n' % (image_id))\n        labels_list_file.write('%s.txt\\n'%(image_id))\n        convert_annotation(image_id) #如果标签已经是txt格式，将此行注释掉，所有的txt存放到all_labels文件夹。\n    image_list_file.close()\n    labels_list_file.close()\n\n\ndef copy_file(new_path,path_txt,search_path):#参数1：存放新文件的位置  参数2：为上一步建立好的train,val训练数据的路径txt文件  参数3：为搜索的文件位置\n    if not os.path.exists(new_path):\n        os.makedirs(new_path)\n    with open(path_txt, 'r') as lines:\n        filenames_to_copy = set(line.rstrip() for line in lines)\n        # print('filenames_to_copy:',filenames_to_copy)\n        # print(len(filenames_to_copy))\n    for root, _, filenames in os.walk(search_path):\n        # print('root',root)\n        # print(_)\n        # print(filenames)\n        for filename in filenames:\n            if filename in filenames_to_copy:\n                shutil.copy(os.path.join(root, filename), new_path)\n\n#按照划分好的训练文件的路径搜索目标，并将其复制到yolo格式下的新路径\ncopy_file('./images/train/','./images_train.txt','./all_images')\ncopy_file('./images/val/','./images_trainval.txt','./all_images')\ncopy_file('./labels/train/','./labels_train.txt','./all_labels')\ncopy_file('./labels/val/','./labels_trainval.txt','./all_labels')\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\284d5a21573e4221a583b83b4ff19c66.png\"/></p>\n<p><strong>第四步: 创建自己的yaml文件,可以copy一下 yolov7中data下的coco.yaml为mydata.yaml</strong></p>\n<pre><code>\ntrain:  ./mydata/images/train/ \nval:  ./mydata/images/val/ \n\n\n\nnc: 2\nnames: ['dog' ,'cat']\n\n</code></pre>\n<p><strong>第五步: 修改网络模型的配置文件,修改cfg/training/yolov7.yaml的内容，根据自己实际运行模型的参数需要选择一个.yaml进行修改，我选择的是yolov7.yaml。</strong></p>\n<p><code>主要修改类别数nc的值</code> <code>当然你也可以修改为自己的网络结构.</code></p>\n<p><strong>第六步: 关掉wandb （可选操作）</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e7196b38116f4ad4bf5853d0f5373eea.png\"/></p>\n<p><strong>第七步: 训练</strong></p>\n<p><strong>训练技巧在上面,当然也可以去train.py中修改对应属性的默认值.</strong></p>\n<pre><code> python train.py --data data/coco.yaml(数据信息,一般也是指定我们自己的)     --cfg cfg/training/yolov7.yaml (网络结构信息,也可以使用自己的) --weights ''  (这里的weights就是指定要不要在别人的基础之上训练) --batch-size 64\n</code></pre>\n<h2><a id=\"13___486\"></a>1.3: 性能评估</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f16961647c2c49daa0f1404a51f7369b.png\"/></p>\n<p><strong>验证模型</strong></p>\n<pre><code>python val.py --data data/coco128.yaml  --weights weighs/myyolo.pt --batch-size 6\n</code></pre>\n<p><strong>训练过程可视化:</strong></p>\n<pre><code>tensorboard --logdir  ./runs\n</code></pre>\n<p>然后在浏览器端输入 <code>http://localhsot:6006/#scalars</code> 具体还是看上面的命令返回什么</p>\n<h2><a id=\"_508\"></a>…</h2>\n<h2><a id=\"__510\"></a>场景四: 实用工具</h2>\n<h2><a id=\"11_512\"></a>1.1：统计有哪些标签</h2>\n<pre><code>import os\nfrom tqdm import tqdm\nimport xml.dom.minidom\n\ndef ReadXml(FilePath):\n    if os.path.exists(FilePath) is False:\n        return None\n    dom = xml.dom.minidom.parse(FilePath)\n    root_ = dom.documentElement\n    object_ = root_.getElementsByTagName('object')\n    info = []\n    for object_1 in object_:\n        name = object_1.getElementsByTagName(\"name\")[0].firstChild.data\n        bndbox = object_1.getElementsByTagName(\"bndbox\")[0]\n        xmin = int(bndbox.getElementsByTagName(\"xmin\")[0].firstChild.data)\n        ymin = int(bndbox.getElementsByTagName(\"ymin\")[0].firstChild.data)\n        xmax = int(bndbox.getElementsByTagName(\"xmax\")[0].firstChild.data)\n        ymax = int(bndbox.getElementsByTagName(\"ymax\")[0].firstChild.data)\n        info.append([xmin, ymin, xmax, ymax, name])\n    return info\n\n\ndef CountLabelKind(Path):\n    LabelDict = {}\n    print(\"Star to count label kinds....\")\n    for root, dirs, files in os.walk(Path):\n        for file in tqdm(files):\n            if file[-1] == 'l':\n                Infos = ReadXml(root + \"\\\\\" + file)\n                for Info in Infos:\n                    if Info[-1] not in LabelDict.keys():\n                        LabelDict[Info[-1]] = 1\n                    else:\n                        LabelDict[Info[-1]] += 1\n\n    return dict(sorted(LabelDict.items(), key=lambda x: x[0]))\n\n\nif __name__ == '__main__':\n\n    # 修改这里----------------------传入数据集的xml路径-------------------------------\n    SrcDir = r\"G:\\Temp\\Temp5\"\n\n    LabelDict = CountLabelKind(SrcDir)\n    KeyDict = sorted(LabelDict)\n    print(\"%d kind labels and %d labels in total:\" % (len(KeyDict), sum(LabelDict.values())))\n    print(KeyDict)\n    print(\"Label Name and it's number:\")\n    for key in KeyDict:\n        print(\"%s\\t: %d\" % (key, LabelDict[key]))\n\n</code></pre>\n<h2><a id=\"12_568\"></a>1.2：批量修改标签值</h2>\n<pre><code>#coding=utf-8\nimport  os.path\nimport  xml.etree.ElementTree as  xee\n\n#---------------------xml的存放路径---------------------------\npath  = r\"D:\\2\"\n\n# 获取路径下的所有文件的名字\nfilenames = os.listdir(path)\n\ni = 0 \n\nfor  xmlfile  in  filenames:   # 遍历文件\n    if not os.path.isdir(xmlfile):   # 判断文件是否是文件夹，如果不是文件夹则打开\n        \n        # 获取这个xml文件的绝对路径\n        xmlfile_path = os.path.join( path , xmlfile)\n        \n        # 将xml文件放入到xee去解析\n        dom = xee.parse( xmlfile_path )\n        \n        # 获取所有节点的内容\n        root  = dom.getroot()\n        \n        # 获取节点是object的节点内容\n        objects = root.findall('object')\n        \n        # 遍历每一个object \n        for object in  objects:\n            \n            # 修改标签值为2的标签为标签1--------------------------------------------\n            if object[0].text == \"2\":\n                object[0].text = \"1\"\n                \n                i = i + 1\n                \n                # 当然也可打印包含标签值为2的文件名字\n                print(xmlfile_path)\n                \n        dom.write(xmlfile_path)\n\nprint(\"修改\"+str(i)+\"处\")\n</code></pre>\n<h2><a id=\"_616\"></a>…</h2>\n<h2><a id=\"_yolov7_618\"></a>场景五: yolov7源码解读</h2>\n<blockquote>\n<p>yolov7与yolov5代码相似，可以先看我的另外一篇关于yolov5的源码解读，后续将在这里补充完整关于yolov7改进地方的源码解读。</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/qq_41580422/article/details/122252897\">利用yolov5训练自己的数据集； yolov5的安装与使用 ； yolov5源码解读</a></p>\n<h2><a id=\"_623\"></a>…</h2>\n<p><strong>you did it</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\20210111180925993.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}