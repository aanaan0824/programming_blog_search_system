{"blogid": "122906472", "writerAge": "码龄7年", "writerBlogNum": "14", "writerCollect": "69", "writerComment": "9", "writerFan": "4", "writerGrade": "2级", "writerIntegral": "175", "writerName": "论文写在大地上", "writerProfileAdress": "writer_image\\profile_122906472.jpg", "writerRankTotal": "168398", "writerRankWeekly": "170827", "writerThumb": "18", "writerVisitNum": "17867", "blog_read_count": "6502", "blog_time": "已于 2022-07-03 17:13:39 修改", "blog_title": "Eigen 使用指南（入门篇）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>Eigen 使用指南（入门篇）</h3>\n<ul><li><a href=\"#1_Eigen_1\">1 安装Eigen</a></li><li><ul><li><a href=\"#11_Window1064Visual_Studio2017_7\">1.1 Window10(64位)+Visual Studio2017</a></li></ul>\n</li><li><a href=\"#2_Eigen__30\">2 Eigen 的使用</a></li><li><ul><li><a href=\"#21_Matrix_32\">2.1 矩阵类Matrix</a></li><li><ul><li><a href=\"#122__64\">1.2.2 矩阵初始化与访问</a></li></ul>\n</li><li><a href=\"#23__107\">2.3 矩阵和向量代数</a></li><li><a href=\"#24_Array_144\">2.4 数组类Array</a></li><li><a href=\"#25__179\">2.5 块操作</a></li><li><a href=\"#26__248\">2.6 库函数</a></li></ul>\n</li><li><a href=\"#_273\">附录</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1_Eigen_1\"></a>1 安装Eigen</h1>\n<p>Eigen源码下载：http://eigen.tuxfamily.org/index.php?title=Main_Page<br/> 建议下载最新稳定版，Windows环境下可下载“zip”格式的文件，Linux环境可下载“tar.gz”格式的文件。下面的分析将以Eigen3.3.7为例，介绍Eigen的安装。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\af08067abd914f97912685a2ea3f0067.png\"/></p>\n<center>\n  图 1-1 Eigen官网截图 \n</center>\n<h2><a id=\"11_Window1064Visual_Studio2017_7\"></a>1.1 Window10(64位)+Visual Studio2017</h2>\n<p>解压源码，得到一个名字很长的文件夹，进入该文件夹，即可看到如下文件目录。在下图中，Eigen文件夹是我们需要使用的源文件目录，通常只要将该文件复制到对应的工程即可使用Eigen库。进入Eigen文件夹，可以看到有一个Dense文件，这是一个头文件接口，在使用Eigen库的源码中需要包含该头文件。<br/> <img alt=\"解压压缩包得到的目录\" src=\"image\\a193dea8d7344f66b8c677f148f6d2ae.png\"/></p>\n<center>\n  图1-2 解压下载的压缩包得到的目录 \n</center>\n<p><img alt=\"Eigen 目录\" src=\"image\\60514e7498064dea8fec19e56999a0b1.png\"/></p>\n<center>\n  图1-3 Eigen 源码目录 \n</center>\n<p>下面介绍Eigen如何使用的一个简单用例，但是此处不解释代码。</p>\n<ol><li>打开Visual Studio2017，新建一个C++项目(依次点击 文件-&gt;新建-&gt;项目)，养成自己设置工程路径的好习惯，一般不将工程建在C盘，如图1-4；</li><li>进入到工程存储的位置，查看工程目录，熟悉vs创建的目录结构，以创建一个名为Eigen_Test项目为例，其目录结构如图1-5所示；</li><li>在vs2017中添加源文件，命名为main.cpp，main.cpp中的内容为附录“source1.1”，源码中包含了Dense文件，这个文件是使用Eigen库的接口;</li><li>将图1-2中的Eigen文件夹复制到图1-5Eigen_Test解决方案目录下，如图1-6所示；</li><li>编译运行，如果可以正常编译运行，那么说明Eigen库已经成功配置。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b30f78b24e6e450b87ec335c12f07cce.png\"/></li></ol>\n<center>\n  图1-4 Visual studio构建C++工程 \n</center>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\98335584746c4561bfbd21a0a5712fb1.png\"/></p>\n<center>\n  图 1-5 Visual studio构建的工程目录 \n</center>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0404e6b4400041d3a60976f9b14f97e0.png\"/></p>\n<center>\n  图1-6 复制Eigen后的工程目录 \n</center>\n<h1><a id=\"2_Eigen__30\"></a>2 Eigen 的使用</h1>\n<p>在Eigen，中所有的矩阵和向量都是Matrix模板类的对象，向量只是一种特殊的矩阵。</p>\n<h2><a id=\"21_Matrix_32\"></a>2.1 矩阵类Matrix</h2>\n<p>Matrix类总共有六个模板参数首先只介绍前三个参数，剩下的三个参数有其默认值。三个强制型的参数如下：<br/> Matrix&lt;typename Scalar, int RowsAtCompileTime, int ColsAtCompileTime&gt;</p>\n<ul><li>Scalar是scalar类型，如想要构造一个单精度的浮点类型矩阵，可以选择float。所有支持的Scalar类型包括：float、double、int、std::complex(float)、和自定义类型。</li><li>RowsAtCompileTime和ColsAtCompileTime分别表示行数和列数，要求这两个参数在编译时已知。<br/> 在Eigen中提供宏定义来便捷的访问一些常用的类型，如：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">typedef</span> Matrix<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">&gt;</span> Matrix4f<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> Matrix<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">&gt;</span> Vector3f<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> Matrix<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">&gt;</span> RowVector2i<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>当然，Eigen库并不局限于那些矩阵维数在编译时已知的情形。RowsAtCompileTime和ColsAtCompileTime可以取一个特殊的值Dynamic，这表示矩阵的维度在编译时是未知的，必须作为一个运行时变量来处理。在Eigen术语中，Dynamic称为动态大小(dynamic size)，而运行时已知的大小称为固定大小(fixed size)。<br/> 创建一个双精度的动态矩阵<br/> typedef Matrix&lt;double, Dynamic, Dynamic&gt; MatrixXd;<br/> 创建一个整型列向量<br/> typedef Matrix&lt;int, Dynamic, 1&gt; VectorXi;<br/> Matrix的另外三个模板参数是可以选择的，完整的参数如下：</p>\n<pre><code class=\"prism language-cpp\">Matrix<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Scalar</span><span class=\"token punctuation\">,</span>\n       <span class=\"token keyword\">int</span> RowsAtCompileTime<span class=\"token punctuation\">,</span>\n       <span class=\"token keyword\">int</span> ColsAtCompileTime<span class=\"token punctuation\">,</span>\n       <span class=\"token keyword\">int</span> Options <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n       <span class=\"token keyword\">int</span> MaxRowsAtCompileTime <span class=\"token operator\">=</span> RowsAtCompileTime<span class=\"token punctuation\">,</span>\n       <span class=\"token keyword\">int</span> MaxColsAtCompileTime <span class=\"token operator\">=</span> ColsAtCompileTime<span class=\"token operator\">&gt;</span>\n</code></pre>\n<ul><li>Options是一个位域，它的值只能取RowMajor、ColMajor，分别表示行优先存储、列优先存储。默认情况下是使用列优先存储，一般地Eigen库在列优先存储的情况下效率要高。Eigen的存储形式的指定，只是影响矩阵在内存的形式，不会影响矩阵的访问习惯。</li><li>MaxRowsAtCompileTime和MaxColsAtCompileTime用于指定矩阵的维数的最大值。尽管有时候不知道矩阵的确切大小，但在编译时已经知道了矩阵维数的上界，那么可以指定这两个参数来避免动态内存分配。</li></ul>\n<h3><a id=\"122__64\"></a>1.2.2 矩阵初始化与访问</h3>\n<p>Eigen库提供了默认构造函数，它不会提供动态内存的分配，也不会初始化任何矩阵的值。Eigen类型可以这样使用：</p>\n<pre><code class=\"prism language-cpp\">Matrix3f a<span class=\"token punctuation\">;</span>\nMatrixXf b<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里</p>\n<ul><li>a是一个3*3的矩阵，矩阵的元素都没有被初始化；</li><li>b是一个动态矩阵，它的大小是0*0，也就是说还没有为该矩阵分配内存。<br/> 构造函数提供指定矩阵大小的重载。对矩阵来说，第一个参数是矩阵的行数。对向量来说只需指定向量的大小。它会分配矩阵或向量所需的内存的大小，但是不会初始化他们的值。</li></ul>\n<pre><code class=\"prism language-cpp\">MatrixXf <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nVectorXf <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>a是一个10*15的动态矩阵，内存进行了分配，但没有初始化；</li><li>b是一个大小为30的动态数组，但没有初始化。</li></ul>\n<p>Eigen库重载圆括号()访问矩阵或者向量的元素，序号从0开始。Eigen库不支持使用方括号[]访问矩阵的元素(向量除外)。</p>\n<pre><code class=\"prism language-cpp\">MatrixXd <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nVectorXd <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>逗号表达式初始化</p>\n<pre><code class=\"prism language-cpp\">Matrix3f m<span class=\"token punctuation\">;</span>\nm <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n     <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n     <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>std::cout &lt;&lt; m;<br/> 可以使用rows()、cols()、size()访问矩阵当前大小，使用resize()重置矩阵的大小。如果矩阵的大小没有变化，那么resize()操作没有任何影响。如果矩阵的大小改变了，那么矩阵的值可能会改变。如果你想在重设大小过程中不改变矩阵的值使用conservativeResize()。<br/> 使用赋值操作符“=”，Eigen将左操作数的大小重置为右操作数的大小。</p>\n<h2><a id=\"23__107\"></a>2.3 矩阵和向量代数</h2>\n<p>加减法：重载C++中“+”、“-”、“+=”、“-=”操作符，要求左右操作数的维度相同。不允许一个向量加上或者减去一个数。<br/> 数乘与数除：重载C++中“<em>”、“/”、“</em>=”、“/=”操作符，支持矩阵和向量乘以或者除以一个数。<br/> 转置与共轭：转置aT、共轭 、共轭转置aH分别通过transpose()、conjugate()、adjoint()实现。调用格式a.transpose()，a.conjugate()，a.adjoint()。对于实数而言，共轭没有任何影响，共轭转置等价于转置。使用a = a.transpose()可能会出现错误，这是因为Eigen在进行转置或者共轭操作时，会同时写左操作数，从而得到意想不到的结果。要实现这种功能可以使用a.transposeInPlace()。类似的，也支持adjointInPlace()。<br/> 矩阵-矩阵与矩阵-向量乘法：由于在Eigen中向量只是特殊的矩阵，因此只需重载“*”、“*=”即可实现矩阵和向量的乘法。如果你担心m=m<em>m会导致混淆，现在可以消除这个疑虑，因为Eigen以一种特殊的方式处理矩阵乘法，编译m=m</em>m时，作为</p>\n<pre><code class=\"prism language-cpp\">tmp <span class=\"token operator\">=</span> m<span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span>\nm <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>点积和叉乘：点积又可以称为内积，Eigen分别使用dot()和cross()来实现内积和向量积。叉乘只适用于三维向量。</p>\n<pre><code class=\"prism language-cpp\">Vector3d <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nVector3d <span class=\"token function\">w</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span>；\nv<span class=\"token punctuation\">.</span><span class=\"token function\">cross</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>基础的代数计算：mat.sum()计算所有矩阵元素的和，mat.pro()计算所有元素的连乘积，mat.mean()计算所有元素的平均值，mat.minCoeff()计算矩阵元素的最小值，mat.maxCoeff计算矩阵元素的最大值，mat.trace()计算矩阵的迹。计算最大值和最小值的函数支持返回最大值和最小值的位置：</p>\n<pre><code class=\"prism language-cpp\">Matrix3f m <span class=\"token operator\">=</span> <span class=\"token class-name\">Matrix3f</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>std::ptrdiff_t i, j; //ptrdiff_t是stddef.h中用于表示两个指针见的间隔的数据类型，是有符号型</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">float</span> minOfM <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">minCoeff</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>注意：</p>\n<ul><li>在计算过程中如果由于矩阵维度不满足相应的条件，那么Eigen库可以在编译时检查出静态矩阵维度的矛盾，对于动态矩阵有相应动态检查方法，如果出现维度矛盾可能会使程序崩溃。</li><li>以上的操作都不会影响操作数本身。</li><li>通过“.”操作符调用的操作可以作为左值，当然这在一般情况下是没多大意义的。</li></ul>\n<h2><a id=\"24_Array_144\"></a>2.4 数组类Array</h2>\n<p>Array类提供通常意义上的数组，它提供一些方便的对元素的非线性操作。例如让所有元素都加上一个常量，或者让两个Arrays的值对应相乘。<br/> Array类模板与Matrix相似，其含义参见Matrix类介绍。Array在其存储形式上具有矩阵的形式，只是说Array支持的运算和Matrix不一样。</p>\n<pre><code class=\"prism language-handlebars\"><span class=\"token variable\">Array</span><span class=\"token punctuation\">&lt;</span><span class=\"token variable\">typename</span> <span class=\"token variable\">Scalar</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">int</span> <span class=\"token variable\">RowsAtCompileTime</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">int</span> <span class=\"token variable\">ColsAtCompileTime</span><span class=\"token punctuation\">&gt;</span><span class=\"token variable\">；</span>\n<span class=\"token variable\">Array</span><span class=\"token punctuation\">&lt;</span><span class=\"token variable\">float</span><span class=\"token punctuation\">,</span><span class=\"token variable\">Dynamic</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&gt;</span> <span class=\"token variable\">ArrayXf</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">Array</span><span class=\"token punctuation\">&lt;</span><span class=\"token variable\">float</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&gt;</span> <span class=\"token variable\">Array3f</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">Array</span><span class=\"token punctuation\">&lt;</span><span class=\"token variable\">double</span><span class=\"token punctuation\">,</span><span class=\"token variable\">Dynamic</span><span class=\"token punctuation\">,</span><span class=\"token variable\">Dynamic</span><span class=\"token punctuation\">&gt;</span> <span class=\"token variable\">ArrayXXd</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>访问Array中的值的方式和Matrix是一样的。下面介绍和Matrix不一样的操作：<br/> 加减乘除：将对应位置元素相加（减、乘、除）。</p>\n<pre><code class=\"prism language-cpp\">ArrayXXf <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nArrayXXf <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\ncout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>输出结果为：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">5</span> <span class=\"token number\">12</span>\n<span class=\"token number\">21</span> <span class=\"token number\">32</span>\n</code></pre>\n<p>平方根、绝对值：通过调用sqrt()、abs()函数，a.abs()。<br/> 求两个矩阵的最小值：a.min(b)，要求a和b的维度相同，求对应位置的两个数的最小值。<br/> Eigen支持的数组元操作见图2-1所示。那么，如何选择Matrix和Array呢？如果要支持线性代数的操作，就选择Matrix；如果要进行coefficient-wise操作，就选择Array。如果又要支持线性代数操作，又要支持coefficient-wise操作，那么就可以使用.array()和.matrix()实现类型的转换，这种转换是没有计算代价的。这些操作也不会改变调用该函数的矩阵或者数组本身而是返回一个副本。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5d1b8b2155424ebca9ad14b77cd3a9c0.png\"/></p>\n<center>\n  图2-1 Eigen支持的数组元操作 \n</center>\n<h2><a id=\"25__179\"></a>2.5 块操作</h2>\n<p>块是矩阵的一个矩形区域，块表达式可以是左值也可以是右值。最常用的是block()操作，它有两个版本：</p>\n<pre><code class=\"prism language-cpp\">matrix<span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//动态大小的块</span>\nmatrix<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">block</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>p<span class=\"token punctuation\">,</span>q<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//固定大小的块</span>\n</code></pre>\n<p>i、j表示块的起始位置(块的左上角元素在矩阵中的角标)，p、q表示块的大小。固定大小的块在运行时效率要高。</p>\n<pre><code class=\"prism language-cpp\">Eigen<span class=\"token double-colon punctuation\">::</span>MatrixXf <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  m <span class=\"token operator\">&lt;&lt;</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n       <span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl；\n</code></pre>\n<p>结果：</p>\n<pre><code class=\"prism language-cpp\">Block of size <span class=\"token number\">3</span>x3\n <span class=\"token number\">1</span>  <span class=\"token number\">2</span>  <span class=\"token number\">3</span>\n <span class=\"token number\">5</span>  <span class=\"token number\">6</span>  <span class=\"token number\">7</span>\n <span class=\"token number\">9</span>  <span class=\"token number\">10</span>  <span class=\"token number\">11</span>\n</code></pre>\n<p>block()操作也可用于左值：</p>\n<pre><code class=\"prism language-cpp\">MatrixXd <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tVectorXd <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tm <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n\tv <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">11</span>\n<span class=\"token number\">12</span>\n<span class=\"token number\">13</span>\n</code></pre>\n<p>block()操作支持任意的块操作，对于一些特殊的访问Eigen也提供了API。</p>\n<pre><code class=\"prism language-handlebars\"><span class=\"token variable\">Block</span> <span class=\"token variable\">operation</span>\t<span class=\"token variable\">Method</span>\n<span class=\"token variable\">ith</span> <span class=\"token variable\">row</span> <span class=\"token punctuation\">*</span>\t<span class=\"token variable\">matrix</span><span class=\"token punctuation\">.</span><span class=\"token variable\">row</span><span class=\"token punctuation\">(</span><span class=\"token variable\">i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">jth</span> <span class=\"token variable\">column</span> <span class=\"token punctuation\">*</span>\t<span class=\"token variable\">matrix</span><span class=\"token punctuation\">.</span><span class=\"token variable\">col</span><span class=\"token punctuation\">(</span><span class=\"token variable\">j</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>同样的，row()操作和col ()操作既可以是左值又可以是右值。除此之外，Eigen还提供了访问一些特殊位置的块的快捷操作，如图2-2所示。<br/> 对于向量或者说一维数组，Eigen也提供了特殊的块操作，如图1-9所示。这些块操作也有静态和动态两个版本。v.head(n)可以访问向量的头n个元素，v.tail(n)可以访问向量的尾n个元素，v.segment(i,j)可以访问从标号为i开始的j个元素。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\cd481ce77ae84f0d8bf75fccb67dec83.png\"/></p>\n<center>\n  图2-2 Eigen支持的块便捷操作 \n</center>\n<h2><a id=\"26__248\"></a>2.6 库函数</h2>\n<p>随机向量或矩阵生成<br/> 使用Random函数，生成双精度的随机数在-1到1之间，生成整数的随机数在某一个负整数到某一个正整数之间与机器有关。样例：</p>\n<pre><code class=\"prism language-cpp\">MatrixXd m<span class=\"token operator\">=</span><span class=\"token class-name\">MatrixXd</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Random</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nVectorXi v<span class=\"token operator\">=</span> <span class=\"token class-name\">VectorXi</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Random</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>零向量或矩阵生成<br/> 使用Zero()函数，生成值全为零的矩阵或向量。</p>\n<pre><code class=\"prism language-cpp\">MatrixXd m<span class=\"token operator\">=</span><span class=\"token class-name\">MatrixXd</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Zero</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nVectorXi v<span class=\"token operator\">=</span> <span class=\"token class-name\">VectorXi</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Zero</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>生成单位矩阵<br/> 使用Identity()函数，生成单位矩阵或准单位矩阵。</p>\n<pre><code class=\"prism language-cpp\">MatrixXd m<span class=\"token operator\">=</span> <span class=\"token class-name\">MatrixXd</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Identity</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nMatrixXd m<span class=\"token operator\">=</span> <span class=\"token class-name\">MatrixXd</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Identity</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"_273\"></a>附录</h1>\n<center>\n  source1.1 \n</center>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"Eigen/Dense\"</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">matrix_mul_matrix</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iRow1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iCol1<span class=\"token punctuation\">,</span> T<span class=\"token operator\">*</span> p2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iRow2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iCol2<span class=\"token punctuation\">,</span> T<span class=\"token operator\">*</span> p3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iRow1 <span class=\"token operator\">!=</span> iRow2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//Column first  </span>\n\t<span class=\"token comment\">//Eigen::Map&lt; Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; &gt; map1(p1, iRow1, iCol1);  </span>\n\t<span class=\"token comment\">//Eigen::Map&lt; Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; &gt; map2(p2, iRow2, iCol2);  </span>\n\t<span class=\"token comment\">//Eigen::Map&lt; Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; &gt; map3(p3, iCol1, iCol2);  </span>\n\n\t<span class=\"token comment\">//Row first</span>\n\tEigen<span class=\"token double-colon punctuation\">::</span>Map<span class=\"token operator\">&lt;</span> Eigen<span class=\"token double-colon punctuation\">::</span>Matrix<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> Eigen<span class=\"token double-colon punctuation\">::</span>Dynamic<span class=\"token punctuation\">,</span> Eigen<span class=\"token double-colon punctuation\">::</span>Dynamic<span class=\"token punctuation\">,</span> Eigen<span class=\"token double-colon punctuation\">::</span>RowMajor<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">map1</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> iRow1<span class=\"token punctuation\">,</span> iCol1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tEigen<span class=\"token double-colon punctuation\">::</span>Map<span class=\"token operator\">&lt;</span> Eigen<span class=\"token double-colon punctuation\">::</span>Matrix<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> Eigen<span class=\"token double-colon punctuation\">::</span>Dynamic<span class=\"token punctuation\">,</span> Eigen<span class=\"token double-colon punctuation\">::</span>Dynamic<span class=\"token punctuation\">,</span> Eigen<span class=\"token double-colon punctuation\">::</span>RowMajor<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">map2</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> iRow2<span class=\"token punctuation\">,</span> iCol2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tEigen<span class=\"token double-colon punctuation\">::</span>Map<span class=\"token operator\">&lt;</span> Eigen<span class=\"token double-colon punctuation\">::</span>Matrix<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> Eigen<span class=\"token double-colon punctuation\">::</span>Dynamic<span class=\"token punctuation\">,</span> Eigen<span class=\"token double-colon punctuation\">::</span>Dynamic<span class=\"token punctuation\">,</span> Eigen<span class=\"token double-colon punctuation\">::</span>RowMajor<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">map3</span><span class=\"token punctuation\">(</span>p3<span class=\"token punctuation\">,</span> iCol1<span class=\"token punctuation\">,</span> iCol2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tmap3 <span class=\"token operator\">=</span> map1 <span class=\"token operator\">*</span> map2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tEigen<span class=\"token double-colon punctuation\">::</span>MatrixXd <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}