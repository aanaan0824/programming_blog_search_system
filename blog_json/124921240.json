{"blogid": "124921240", "writerAge": "码龄4年", "writerBlogNum": "72", "writerCollect": "200", "writerComment": "13", "writerFan": "80", "writerGrade": "4级", "writerIntegral": "982", "writerName": "IT自习小空间", "writerProfileAdress": "writer_image\\profile_124921240.jpg", "writerRankTotal": "34171", "writerRankWeekly": "63076", "writerThumb": "42", "writerVisitNum": "73848", "blog_read_count": "2506", "blog_time": "于 2022-06-03 19:01:27 发布", "blog_title": "Spring Security+JWT简述", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_Spring_Security_2\">一. 什么是Spring Security</a></li><li><ul><li><a href=\"#1__12\">1. 登陆校验的流程</a></li><li><a href=\"#2_SpringSecurity_15\">2. SpringSecurity基础案例</a></li></ul>\n</li><li><a href=\"#_Spring_Security_49\">二. Spring Security原理流程</a></li><li><ul><li><a href=\"#1__87\">1. 大致流程</a></li></ul>\n</li><li><a href=\"#_JWT_285\">三. JWT</a></li><li><ul><li><a href=\"#1_JWT_287\">1. 什么是JWT?</a></li><li><a href=\"#2_SpringSecurityJWT_307\">2. SpringSecurity集成JWT</a></li><li><ul><li><a href=\"#1__309\">(1) 认证配置</a></li><li><a href=\"#2__495\">(2) 权限配置</a></li></ul>\n</li></ul>\n</li><li><a href=\"#__656\">四. 总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_Spring_Security_2\"></a>一. 什么是Spring Security</h1>\n<blockquote>\n<p>Spring Security是Spring家族的一个安全管理框架, 相比于另一个安全框架Shiro, 它具有更丰富的功能。一般中大型项目都是使用SpringSecurity做安全框架, 而Shiro上手比较简单</p>\n</blockquote>\n<p>spring security 的核心功能:</p>\n<ul><li> <p>认证(你是谁): 只有你的用户名或密码正确才能访问某些资源</p> </li><li> <p>授权(你能干嘛): 当前用户具有哪些功能, 将资源进行划分, 如在公司中分为普通资料和高级资料, 只有经理用户以上才能访文高级资料, 其他人只能拥有访问普通资料的权限。</p> </li></ul>\n<h2><a id=\"1__12\"></a>1. 登陆校验的流程</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f78850412d8a4fa79bb9b275531086ad.png\"/></p>\n<h2><a id=\"2_SpringSecurity_15\"></a>2. SpringSecurity基础案例</h2>\n<p>首先创建一个Springboot的项目</p>\n<p>添加依赖</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-security<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>创建一个controller类</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>启动项目访问<code>http://localhost:8080/login</code>, 发现页面并没有hello字符, 下图是SpringSeurity默认的登陆界面, 默认用户名为user, 密码为启动项目时在输出框中的内容</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\929a1f992b01446bacd88655832940c8.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\bd359715ccf644f7b6289d24f2c56aa4.png\"/><br/> 在实际项目中, 显然不能使用默认的登陆界面, 所以我们需要自定义登陆认证和授权</p>\n<h1><a id=\"_Spring_Security_49\"></a>二. Spring Security原理流程</h1>\n<p>SpringSecurity底层实现是一系列过滤器链</p>\n<p>默认自动配置的过滤器<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e783a882bb0e4df181f6054288e34e8f.png\"/></p>\n<table><thead><tr><th>过滤器</th><th>作用</th></tr></thead><tbody><tr><td>WebAsyncManagerIntegrationFilter</td><td>将WebAsyncManger与SpringSecurity上下文进行集成</td></tr><tr><td>SecurityContextPersistenceFilter</td><td>在处理请求之前, 将安全信息加载到SecurityContextHolder中</td></tr><tr><td>HeaderWriterFilter</td><td>处理头信息假如响应中</td></tr><tr><td>CsrfFilter</td><td>处理CSRF攻击</td></tr><tr><td>LogoutFilter</td><td>处理注销登录</td></tr><tr><td>UsernamePasswordAuthenticationFilter</td><td>处理表单登录</td></tr><tr><td>DefaultLoginPageGeneratingFilter</td><td>配置默认登录页面</td></tr><tr><td>DefaultLogoutPageGeneratingFilter</td><td>配置默认注销页面</td></tr><tr><td>BasicAuthenticationFilter</td><td>处理HttpBasic登录</td></tr><tr><td>RequestCacheAwareFilter</td><td>处理请求缓存</td></tr><tr><td>SecurityContextHolderAwareRequestFilter</td><td>包装原始请求</td></tr><tr><td>AnonymousAuthenticationFilter</td><td>配置匿名认证</td></tr><tr><td>SessionManagementFilter</td><td>处理session并发问题</td></tr><tr><td>ExceptionTranslationFilter</td><td>处理认证/授权中的异常</td></tr><tr><td>FilterSecurityInterceptor</td><td>处理授权相关</td></tr></tbody></table>\n<p>下图是主要的过滤器<br/> <img alt=\"在这里插入图片描述\" src=\"image\\55acb4e7ed454a9697c062f889594fa6.png\"/></p>\n<p>上图只画出了核心的过滤器</p>\n<p><strong>UsernamePasswordAuthenticationFilter</strong>: 负责处理登陆页面填写的用户名和密码的登陆请求</p>\n<p><strong>ExceptionTranslationFilter</strong>: 处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException异常</p>\n<p><strong>FilterSecurityInterceptor</strong>: 负责权限校验的过滤器</p>\n<h2><a id=\"1__87\"></a>1. 大致流程</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\e7f09bb8bded468ca79e1fab09a24356.png\"/><br/> <strong>(1)</strong> 下面是<code>UsernamePasswordAuthenticationFilter</code>中的<code>attemptAuthentication</code>方法, 该方法会将前端发送的用户名和密码封装为<code>UsernamePasswordAuthenticationToken</code>对象, 该对象是<code>Authentication</code>对象的实现类</p>\n<p>注意: <code>attemptAuthentication</code>方法主要处理视图表单认证, 现今都是前后端分离项目导致不能使用该方法进行拦截, 所以我们需要自己实现一个过滤器覆盖或者在<code>UsernamePasswordAuthenticationFilter</code>之前做用户名和密码拦截处理.</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Authentication</span> <span class=\"token function\">attemptAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>postOnly <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthenticationServiceException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authentication method not supported: \"</span> <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">obtainUsername</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">obtainPassword</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>username <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            username <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>password <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            password <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        username <span class=\"token operator\">=</span> username<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> authRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setDetails</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> authRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAuthenticationManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>authRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>(2)</strong> 返回<code>getAuthenticationManager.authenticate(authRequest)</code>, 将未认证的<code>Authentication</code>对象传入<code>AuthenticationManager</code> , 进入<code>authenticate</code>方法我们看到<code>AuthenticationManager</code>是一个接口, 该接口主要做认证管理, 它的默认实现类是<code>ProviderManager</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AuthenticationManager</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Authentication</span> <span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Authentication</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>(3)</strong> 在SpringSecurity中, 在项目中支持多种不同方式的认证方式, 不同的认证方式对应不同的<code>AuthenticationProvider</code>, 多个<code>AuthenticationProvider</code> 组成一个列表, 这个列表由<code>ProviderManager</code>代理, 在<code>ProviderManager</code>中遍历列表中的每一个<code>AuthenticationProvider</code>进行认证</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Authentication</span> <span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Authentication</span> authentication<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Authentication</span><span class=\"token punctuation\">&gt;</span></span> toTest <span class=\"token operator\">=</span> authentication<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">AuthenticationException</span> lastException <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">AuthenticationException</span> parentException <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Authentication</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Authentication</span> parentResult <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> debug <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 迭代遍历认证列表</span>\n    <span class=\"token class-name\">Iterator</span> var8 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProviders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>var8<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    \t<span class=\"token comment\">// 取出当前认证</span>\n        <span class=\"token class-name\">AuthenticationProvider</span> provider <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationProvider</span><span class=\"token punctuation\">)</span>var8<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 当前认证是否支持当前的用户名和密码信息</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">.</span><span class=\"token function\">supports</span><span class=\"token punctuation\">(</span>toTest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authentication attempt using \"</span> <span class=\"token operator\">+</span> provider<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            \t<span class=\"token comment\">// 开始做认证处理</span>\n                result <span class=\"token operator\">=</span> provider<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                \t<span class=\"token comment\">// 认证成功时候返回</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyDetails</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InternalAuthenticationServiceException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">AccountStatusException</span> var13<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">prepareException</span><span class=\"token punctuation\">(</span>var13<span class=\"token punctuation\">,</span> authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">throw</span> var13<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationException</span> var14<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                lastException <span class=\"token operator\">=</span> var14<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 不支持当前认证并且parent支持该认证</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            result <span class=\"token operator\">=</span> parentResult <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ProviderNotFoundException</span> var11<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationException</span> var12<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            parentException <span class=\"token operator\">=</span> var12<span class=\"token punctuation\">;</span>\n            lastException <span class=\"token operator\">=</span> var12<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eraseCredentialsAfterAuthentication <span class=\"token operator\">&amp;&amp;</span> result <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CredentialsContainer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CredentialsContainer</span><span class=\"token punctuation\">)</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eraseCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentResult <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eventPublisher<span class=\"token punctuation\">.</span><span class=\"token function\">publishAuthenticationSuccess</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastException <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            lastException <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProviderNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ProviderManager.providerNotFound\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span>toTest<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"No AuthenticationProvider found for {0}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentException <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">prepareException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationException</span><span class=\"token punctuation\">)</span>lastException<span class=\"token punctuation\">,</span> authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">throw</span> lastException<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>拓展:<br/> <code>ProviderManager</code>可以配置一个<code>AuthenticationManager</code>作为parent, 当<code>ProviderManager</code>认证失败后, 可以进入parent中再次进行认证, 通常由<code>ProviderManager</code>来充当parent的角色, 即<code>ProviderManager</code>是<code>ProviderManager</code>的parent<br/> <code>ProviderManager</code>可以有多个, 而多个<code>ProviderManager</code>共用一个parent</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8426175c37764d13a723a7c9b2b43431.png\"/></p>\n<p><strong>(4)</strong> 当前<code>AuthenticationProvider</code>支持认证时, 会进入<code>AuthenticationProvider</code>的<code>authenticate</code>方法, 而<code>AuthenticationProvider</code>是一个接口, 它的实现类是<code>AbstractUserDetailsAuthenticationProvider</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Authentication</span> <span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Authentication</span> authentication<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> authentication<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AbstractUserDetailsAuthenticationProvider.onlySupports\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Only UsernamePasswordAuthenticationToken is supported\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 获取当前authentication的信息</span>\n    <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> authentication<span class=\"token punctuation\">.</span><span class=\"token function\">getPrincipal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"NONE_PROVIDED\"</span> <span class=\"token operator\">:</span> authentication<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> cacheWasUsed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 在缓存中查看username</span>\n    <span class=\"token class-name\">UserDetails</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userCache<span class=\"token punctuation\">.</span><span class=\"token function\">getUserFromCache</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        cacheWasUsed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n        \t<span class=\"token comment\">// 调用retrieveUser方法</span>\n            user <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">retrieveUser</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">)</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernameNotFoundException</span> var6<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User '\"</span> <span class=\"token operator\">+</span> username <span class=\"token operator\">+</span> <span class=\"token string\">\"' not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hideUserNotFoundExceptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BadCredentialsException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AbstractUserDetailsAuthenticationProvider.badCredentials\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bad credentials\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">throw</span> var6<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token string\">\"retrieveUser returned null - a violation of the interface contract\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>preAuthenticationChecks<span class=\"token punctuation\">.</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">additionalAuthenticationChecks</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">)</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationException</span> var7<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cacheWasUsed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> var7<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        cacheWasUsed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        user <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">retrieveUser</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">)</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>preAuthenticationChecks<span class=\"token punctuation\">.</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 密码的加密处理</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">additionalAuthenticationChecks</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">)</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>postAuthenticationChecks<span class=\"token punctuation\">.</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cacheWasUsed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userCache<span class=\"token punctuation\">.</span><span class=\"token function\">putUserInCache</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">Object</span> principalToReturn <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>forcePrincipalAsString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        principalToReturn <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createSuccessAuthentication</span><span class=\"token punctuation\">(</span>principalToReturn<span class=\"token punctuation\">,</span> authentication<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>(5)</strong> <code>retrieveUser</code>在<code>AbstractUserDetailsAuthenticationProvider</code>中有<code>retrieveUser</code>方法, 但是实现该方法的对象是<code>DaoAuthenticationProvider</code>, 该对象重写了<code>retrieveUser</code>方法, 在<code>retrieveUser</code>方法中, 可以看到调用了<code>UserDetailsService</code>的<code>loadUserByUsername()</code>方法, 该方法用来根据用户名查询内存或者其他数据源中的用户. 默认是基于内存查找, 我们可以自定义为数据库查询. 查询后的结果封装成<code>UserDetails</code> 对象, 该对象包含用户名、加密密码、权限以及账户相关信息. 密码的加密处理是SpringSecurity帮我们处理</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">retrieveUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> authentication<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">prepareTimingAttackProtection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n    \t<span class=\"token comment\">// 调用该方法返回一个UserDetails 对象</span>\n        <span class=\"token class-name\">UserDetails</span> loadedUser <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUserDetailsService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadUserByUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loadedUser <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalAuthenticationServiceException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UserDetailsService returned null, which is an interface contract violation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> loadedUser<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernameNotFoundException</span> var4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">mitigateAgainstTimingAttack</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">throw</span> var4<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InternalAuthenticationServiceException</span> var5<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">throw</span> var5<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> var6<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalAuthenticationServiceException</span><span class=\"token punctuation\">(</span>var6<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> var6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_JWT_285\"></a>三. JWT</h1>\n<h2><a id=\"1_JWT_287\"></a>1. 什么是JWT?</h2>\n<p>JWT主要用于用户登陆鉴权, 在之前可能会使用session和token认证, 下面简述三者session和JWT的区别</p>\n<p><strong>Session</strong></p>\n<p>用户向服务器发送一个请求时, 服务器并不知道该请求是谁发的, 所以在用户发送登录请求时, 服务器会将用户提交的用户名和密码等信息保存在session会话中(一段内存空间)。同时服务器保存的用户信息会生成一个sessionid(相当于用户信息是一个value值, 而sessionid是value值的key)返回给客户端, 客户端将sessionid保存到cookie中, 等到下一次请求客户端会将cookie一同请求给服务器做认证</p>\n<p>如果用户过多, 必然会耗费大量内存, 在cookie中存放sessionid会存在暴露用户信息的风险</p>\n<p><strong>Token</strong></p>\n<p>token是一串随机的字符串也叫令牌, 其原理和session类似, 当用户登录时, 提交的用户名和密码等信息请求给服务端, 服务端会根据用户名或者其他信息生成一个token而不是sessionid, 这和sessionid唯一区别就是, token不再存储用户信息, 客户端下一次请求会携带token, 此时服务器根据此次token进行认证。</p>\n<p>token认证时也会到数据库中查询, 会造成数据库压力过大。</p>\n<p><strong>JWT</strong></p>\n<p>JWT将登录时所有信息都存在自己身上, 并且以json格式存储, JWT不依赖Redis或者数据库, JWT安全性不太好, 所以不能存储敏感信息</p>\n<h2><a id=\"2_SpringSecurityJWT_307\"></a>2. SpringSecurity集成JWT</h2>\n<h3><a id=\"1__309\"></a>(1) 认证配置</h3>\n<p><strong>a) 配置SpringSecurity</strong></p>\n<p>首先配置一个<code>SpringSecurity</code>的配置类, 因为是基于JWT进行认证, 所以需要在配置中禁用session机制, 并不是禁用整个系统的session功能</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@EnableWebSecurity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecurityConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebSecurityConfigurerAdapter</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserServiceImpl</span> userDetailsService<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LoginFilter</span> loginFilter<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AuthFilter</span> authFilter<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 禁用session机制 </span>\n        http<span class=\"token punctuation\">.</span><span class=\"token function\">csrf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">sessionManagement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">sessionCreationPolicy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionCreationPolicy</span><span class=\"token punctuation\">.</span>STATELESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        http<span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// 指定某些接口不需要通过验证即可访问。像登陆、注册接口肯定是不需要认证的</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sec/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\">// 自定义权限配置</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withObjectPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectPostProcessor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FilterSecurityInterceptor</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">O</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FilterSecurityInterceptor</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token class-name\">O</span> <span class=\"token function\">postProcess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">O</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        o<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessDecisionManager</span><span class=\"token punctuation\">(</span>customUrlDecisionManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        o<span class=\"token punctuation\">.</span><span class=\"token function\">setSecurityMetadataSource</span><span class=\"token punctuation\">(</span>customFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// 禁用缓存</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">cacheControl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        http<span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span><span class=\"token function\">jwtAuthencationTokenFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UsernamePasswordAuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 添加自定义未授权和未登陆结果返回</span>\n        http<span class=\"token punctuation\">.</span><span class=\"token function\">exceptionHandling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">accessDeniedHandler</span><span class=\"token punctuation\">(</span>restfulAccessDeniedHandler<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">authenticationEntryPoint</span><span class=\"token punctuation\">(</span>restAuthoricationEntryPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationManagerBuilder</span> auth<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 指定UserDetailService和加密器</span>\n        auth<span class=\"token punctuation\">.</span><span class=\"token function\">userDetailsService</span><span class=\"token punctuation\">(</span>userDetailsService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">passwordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token function\">passwordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthenticationManager</span> <span class=\"token function\">authenticationManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticationManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>     \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PasswordEncoder</span> <span class=\"token function\">passwordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BCryptPasswordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>b) 实现登录接口</strong></p>\n<p>先按照正常流程, 实现一个登录的接口然后在业务层中实现</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Res</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在业务层中, 首先对密码和用户名进行检验, 然后更新security登录用户对象, 在此之前我们先来认识几个在<code>SpringSecurity</code>中重要的变量</p>\n<p><code>Authentication</code>: 存储了认证信息, 代表登录用户<br/> <code>SecurityContext</code>: 上下文对象, 用来获取<code>Authentication</code>(用户信息)<br/> <code>SecurityContextHolder</code>: 上下文管理对象, 用来在程序任何地方获取<code>SecurityContext</code><br/> <code>UserDetails</code>: 存储了用户的基本信息, 以及用户权限、是否被禁用等</p>\n<p>在<code>Authentication</code>中的认证信息有<br/> <code>Principal</code>: 用户信息<br/> <code>Credentials</code>: 用户凭证, 一般是密码<br/> <code>Authorities</code>: 用户权限</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Res</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 登陆 检测</span>\n    <span class=\"token class-name\">UserDetails</span> userDetails <span class=\"token operator\">=</span> userDetailsService<span class=\"token punctuation\">.</span><span class=\"token function\">loadUserByUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> userDetails <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>passwordEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> userDetails<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Res</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户名或密码不正确!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 更新security登录用户对象</span>\n    <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> authenticationToken <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\n            <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">(</span>userDetails<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> userDetails<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthorities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">SecurityContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAuthentication</span><span class=\"token punctuation\">(</span>authenticationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 创建一个token</span>\n    <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> jwtTokenUtil<span class=\"token punctuation\">.</span><span class=\"token function\">generateToken</span><span class=\"token punctuation\">(</span>userDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> tokenMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tokenMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tokenMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tokenHead\"</span><span class=\"token punctuation\">,</span> tokenHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Res</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登陆成功\"</span><span class=\"token punctuation\">,</span> tokenMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>下面这行代码主要是在数据库或者缓存中查询用户提交的用户名以及用户的权限信息, 将这些信息保存在<code>userDetails</code>中</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">UserDetails</span> userDetails <span class=\"token operator\">=</span> userDetailsService<span class=\"token punctuation\">.</span><span class=\"token function\">loadUserByUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>UsernamePasswordAuthenticationToken</code> 实现了<code>Authentication</code>, 也就是说此时将userDetails中的信息以及权限信息存放在<code>Authentication</code>中</p>\n<p>创建Token需要JWT的工具类, 在网上随便找个都可以, 大致都一样, 这个只需要知道就行了</p>\n<p><strong>c) 过滤请求</strong></p>\n<p>在原生<code>SpringSecurity</code>中默认的拦截在<code>UsernamePasswordAuthenticationFilter</code>这个类中,该类主要拦截表单提交的用户名和密码, 显然在前后端分离项目中不适用, 而且我们用到了JWT的验证方式, 前端每次请求都需要带上token, 所以我们需要在后端对每个请求进行提前过滤拦截</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JwtAuthencationTokenFilter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">OncePerRequestFilter</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${jwt.tokenHeader}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tokenHeader<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${jwt.tokenHead}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tokenHead<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JwtTokenUtil</span> jwtTokenUtil<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDetailsService</span> userDetailsService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilterInternal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 请求头中获取token信息</span>\n        <span class=\"token class-name\">String</span> authheader <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span>tokenHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 存在token</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> authheader <span class=\"token operator\">&amp;&amp;</span> authheader<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>tokenHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 去除字段名称, 获取真正token</span>\n            <span class=\"token class-name\">String</span> authToken <span class=\"token operator\">=</span> authheader<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>tokenHead<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 利用token获取用户名</span>\n            <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> jwtTokenUtil<span class=\"token punctuation\">.</span><span class=\"token function\">getUserNameFromToken</span><span class=\"token punctuation\">(</span>authToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// token存在用户但未登陆</span>\n            <span class=\"token comment\">// SecurityContextHolder.getContext().getAuthentication() 获取上下文对象中认证信息</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> username <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">SecurityContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 自定义数据源获取用户信息</span>\n                <span class=\"token class-name\">UserDetails</span> userDetails <span class=\"token operator\">=</span> userDetailsService<span class=\"token punctuation\">.</span><span class=\"token function\">loadUserByUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 验证token是否有效 验证token用户名和存储的用户名是否一致以及是否在有效期内, 重新设置用户对象</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>jwtTokenUtil<span class=\"token punctuation\">.</span><span class=\"token function\">validateToken</span><span class=\"token punctuation\">(</span>authToken<span class=\"token punctuation\">,</span> userDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// 重新将用户信息封装到UsernamePasswordAuthenticationToken</span>\n                    <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> authenticationToken <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\n                            <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">(</span>userDetails<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> userDetails<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthorities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    authenticationToken<span class=\"token punctuation\">.</span><span class=\"token function\">setDetails</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAuthenticationDetailsSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">buildDetails</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// 将信息存入上下文对象</span>\n                    <span class=\"token class-name\">SecurityContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAuthentication</span><span class=\"token punctuation\">(</span>authenticationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>该过滤器主要做的是:</p>\n<ol><li>提取前端发送的请求头信息, 根据JWT的工具类获取用户名</li><li>如果请求头具有有效的字符串(也就是拥有用户信息)并且上下文对象存在用户信息(数据库或者缓存中查的用户信息)则直接到下一个过滤器, 否则请求头中有信息而当前上下文对象没有存储用户信息则将请求头中的用户在数据层验证之后重新放入上下文对象中(<code>UsernamePasswordAuthenticationToken</code>)。</li><li>如果当前用户没有登录或者没有token信息(可能是token过期), 而当前请求的地址符合权限中包含的地址(也就是数据库中存在的), 则会进入权限验证(下面会讲)</li></ol>\n<p>当然以上的逻辑可以自己自定义, 不管以上什么情况都会进入权限验证</p>\n<p>要让这个过滤器加入到<code>SpringSecurity</code>的过滤器链中, 就需要在<code>SecurityConfig</code>类的<code>configure</code>方法添加下面一条语句, <code>addFilterBefore()</code>将<code>jwtAuthencationTokenFilter()</code>, 放在<code>UsernamePasswordAuthenticationFilter</code>之前</p>\n<pre><code class=\"prism language-java\">http<span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span><span class=\"token function\">jwtAuthencationTokenFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UsernamePasswordAuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"2__495\"></a>(2) 权限配置</h3>\n<p>在一个项目中, 不同的用户需要具有不同的权限, 我们怎么对用户进行区分呢?</p>\n<p><strong>a) RBAC权限表</strong></p>\n<p>将用户、角色和权限绑定，这样可以知道某个用户具有哪些角色, 而某个角色对应有哪些权限（能干什么，不能干什么），这样就知道哪些用户拥有的角色和权限信息。</p>\n<p>基于以上的想法, 我们需要三张实体表, 还需要两张多对多的关系表, 这样就构成了RBAC的五张表</p>\n<p><strong>b) 授权流程</strong></p>\n<p>在SpringSecurity中授权的过滤器是<code>FilterSecurityInterceptor</code></p>\n<p>默认的流程</p>\n<ul><li>调用<code>SecurityMetadataSource</code>获取当前请求的鉴权规则</li><li>接着调用<code>AccessDecisionManager</code> 来校验当前用户的是否拥有当前权限</li><li>如果有权限就放行, 否则抛出异常, 该异常则会被<code>AccessDeniedHandler</code>处理</li></ul>\n<p><strong>c) 自定义<code>SecurityMetadataSource</code></strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FilterInvocationSecurityMetadataSource</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ResourceService</span> resourceService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConfigAttribute</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getAttributes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IllegalArgumentException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">HttpServletRequest</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterInvocation</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Resource</span><span class=\"token punctuation\">&gt;</span></span> menus <span class=\"token operator\">=</span> resourceService<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Resource</span> menu <span class=\"token operator\">:</span> menus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> split <span class=\"token operator\">=</span> menu<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">AntPathRequestMatcher</span> ant <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AntPathRequestMatcher</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 如果请求方法和请求路径都匹配上了，则代表找到了这个请求所需的权限资源</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> ant<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 将我们权限资源id返回</span>\n                <span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singletonList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SecurityConfig</span><span class=\"token punctuation\">(</span>menu<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConfigAttribute</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getAllConfigAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> aClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><code>FilterInvocationSecurityMetadataSource</code>继承<code>SecurityMetadataSource</code></p>\n<p>在<code>getAttributes</code>方法中, o参数封装了<code>request</code>的相关信息, 可以从中获取请求的方法和URL等信息</p>\n<p>然后menus得到的是当前数据层中所有的权限路径, 接着循环所有的路径信息与当前请求的方法和URL进行验证, 如果在数据层中没有当前请求则返回null, 否则将该权限的在数据层中的信息返回</p>\n<p><strong>c) 自定义<code>AccessDecisionManager</code></strong></p>\n<p>如果在<code>SecurityMetadataSource</code>中有权限信息, 则会进入该方法</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomUrlDecisionManager</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccessDecisionManager</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">decide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Authentication</span> authentication<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConfigAttribute</span><span class=\"token punctuation\">&gt;</span></span> collection<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AccessDeniedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InsufficientAuthenticationException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>collection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigAttribute</span> configAttribute <span class=\"token operator\">:</span> collection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">GrantedAuthority</span> authority <span class=\"token operator\">:</span> authentication<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthorities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ROLE_ANONYMOUS\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>authority<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AccessDeniedException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"尚未登录, 请登录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>authority<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> configAttribute<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AccessDeniedException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"权限不足, 请联系管理员!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigAttribute</span> configAttribute<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> aClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>首先来看几个变量</p>\n<ol><li>ConfigAttribute: 这个是鉴权的规则, 根据自己项目设定, 我们这里填入的是当前请求和数据层中相匹配的权限信息id</li><li>GrantedAuthority: 当前认证用户所拥有的权限信息</li></ol>\n<p>在上述的<code>decide</code>方法中, 主要验证了用户所拥有的权限和当前请求的权限信息是否一致</p>\n<p>如果不一致, 则抛出异常, 被<code>AccessDeniedHandler</code>处理</p>\n<p><strong>d) 自定义<code>AccessDeniedHandler</code></strong></p>\n<p>自定义返回json格式数据</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RestfulAccessDeniedHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccessDeniedHandler</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AccessDeniedException</span> accessDeniedException<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{<!-- --></span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PrintWriter</span> out <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Res</span> bean <span class=\"token operator\">=</span> <span class=\"token class-name\">Res</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"权限不足, 请联系管理员!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bean<span class=\"token punctuation\">.</span><span class=\"token function\">setCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">403</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>e) 在<code>SpringSecurity</code>中的配置</strong></p>\n<p>在configure方法中, 进行了动态权限配置</p>\n<pre><code class=\"prism language-java\"><span class=\"token punctuation\">.</span><span class=\"token function\">withObjectPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectPostProcessor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FilterSecurityInterceptor</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">O</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FilterSecurityInterceptor</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token class-name\">O</span> <span class=\"token function\">postProcess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">O</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        o<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessDecisionManager</span><span class=\"token punctuation\">(</span>customUrlDecisionManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        o<span class=\"token punctuation\">.</span><span class=\"token function\">setSecurityMetadataSource</span><span class=\"token punctuation\">(</span>customFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>插入: 还有一个认证异常处理</p>\n<ol><li>用户首次登录且验证成功, 此时正常用户权限授权</li><li>请求数据时, 非首次登录, 如果没有携带token(token过期), 又或者没有登录访问内部路径时, 说明没有认证权限不能访问, 抛出未登录异常</li><li>请求数据时, 有token信息, 而上下文对象中没有用户信息, 则会重新将用户信息放入上下文对象中, 接着进入权限验证, 如果用户拥有该权限则放行, 如果没有该权限则抛出权限不足异常</li></ol>\n<p>在configure中配置未登录和未授权异常处理</p>\n<pre><code class=\"prism language-java\">http<span class=\"token punctuation\">.</span><span class=\"token function\">exceptionHandling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">accessDeniedHandler</span><span class=\"token punctuation\">(</span>restfulAccessDeniedHandler<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">authenticationEntryPoint</span><span class=\"token punctuation\">(</span>restAuthoricationEntryPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"__656\"></a>四. 总结</h1>\n<p>其实以上配置还有很多漏洞, 比如token的过期时间, 当用户上一秒还在请求数据, 下一秒token过期, 则会造成用户需要重新登录, 显然不合适</p>\n<p>本人也是初学SpringSecurity, 以上这是个人的学习见解, 如有不足之处还望指出, 大佬勿喷!!!</p>\n<p>这是项目的地址 <a href=\"https://github.com/SweiJ/Java_Daily/tree/master/secsys\">Github下载</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}