{"blogid": "124288336", "writerAge": "码龄2年", "writerBlogNum": "37", "writerCollect": "19", "writerComment": "3", "writerFan": "1", "writerGrade": "2级", "writerIntegral": "389", "writerName": "程序员中的小白", "writerProfileAdress": "writer_image\\profile_124288336.jpg", "writerRankTotal": "75175", "writerRankWeekly": "766270", "writerThumb": "5", "writerVisitNum": "17414", "blog_read_count": "2299", "blog_time": "于 2022-04-20 08:17:58 发布", "blog_title": "C# 序列化", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>一、 序列化的概念<br/> 序列化就是把一个对象保存到一个文件或数据库字段中去，反序列化就是在适当的时候<br/> 把这个文件再转化成原来的对象使用。</p>\n<p>需要分清楚的概念：对象的序列化而不是类的序列化。对象的序列化表明C#提供了将<br/> 运行中的对象（实时数据）写入到硬盘文件或者数据库中，此功能可以运用在需要保留<br/> 程序运行时状态信息的环境下。</p>\n<p>使用序列化有两个最重要的原因：<br/> 1）一个原因是将对象的状态永久保存在存储媒体中，以便可以在以后重新创建精确的<br/> 副本；<br/> 2）另一个原因是通过值将对象从一个应用程序域发送到另一个应用程序域中。<br/> 前提：要将对象的类声明为可以序列化。</p>\n<p>最主要的作用有：<br/> 1、在进程下次启动时读取上次保存的对象的信息<br/> 2、在不同的AppDomain或进程之间传递数据<br/> 3、在分布式应用系统中传递数据</p>\n<p>序列化是把一个内存中的对象的信息转化成一个可以持久化保存的形式，以便于保存或<br/> 传输，序列化的主要作用是不同平台之间进行通信，常用的序列化有json、xml、文件<br/> 等，下面就逐个讲下这三种序列化的方法。</p>\n<p>1、序列化为json<br/> C#中用于对象和json相互转换的原生类有两个：DataContractJsonSerializer和<br/> JavaScriptSerializer，其中JavaScriptSerializer主要用于web的浏览器和服务器之间的通<br/> 信。这里主要讲DataContractJsonSerializer的使用，要使用<br/> DataContractJsonSerializer，先要在项目中引用System.Runtime.Serialization。首先准<br/> 备一个测试的类Book</p>\n<p>2、序列化为xml<br/> C#中将对象序列化和反序列化为xml的类是XmlSerializer，要引用System.Xml.Serialization<br/> 先创建一个XmlSerializer对象实例，然后用实例的Serialize的方法将对象写入到文件流中。<br/> 3、序列化为文件<br/> C#中将对象序列化和反序列化为二进制文件的类是BinaryFormatter，要引用System.Runtime.Serialization.Formatters.Binary<br/> 先创建一个BinaryFormatter对象实例，然后用实例的Serialize的方法将对象写入到文件流中。</p>\n<p>4、序列化为文件<br/> C#中将对象序列化和反序列化为 SOAP 格式的类是SoapFormatter，要引用System.Runtime.Serialization.Formatters.Soap<br/> 先创建一个SoapFormatter对象实例，然后用实例的Serialize的方法将对象写入到文件流中。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}