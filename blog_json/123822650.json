{"blogid": "123822650", "writerAge": "码龄8年", "writerBlogNum": "100", "writerCollect": "767", "writerComment": "113", "writerFan": "539", "writerGrade": "5级", "writerIntegral": "3111", "writerName": "物联网_咸鱼", "writerProfileAdress": "writer_image\\profile_123822650.jpg", "writerRankTotal": "6062", "writerRankWeekly": "2742", "writerThumb": "178", "writerVisitNum": "333152", "blog_read_count": "1052", "blog_time": "于 2022-03-29 16:53:14 发布", "blog_title": "C#WebApi寄宿在一个窗口应用程序", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1></h1>\n<h1>1.前言</h1>\n<p>在我们开发应用程序的过程中，应用程序之间往往是需要相互之间进行通讯的，即便是一个窗口应用程序或者Winform应用程序。如何简单的将两个应用程序之间进行数据传递，我们目前通常的做法就是使用WebAPI、WebService、RPC等对外提供接口。我们这里的做法就是如何将WEBAPI寄宿在C#的窗口应用程序中。</p>\n<h1>2.引入dll包</h1>\n<p>我这里使用的NuGet方式管理dll包；</p>\n<h2>2.1.引入jar包</h2>\n<p>右键项目的引入功能，选择：管理BuGet程序包</p>\n<p class=\"img-center\"><img alt=\"\" height=\"199\" src=\"image\\9cbae278168f4031907835977a16e6f1.png\" width=\"328\"/></p>\n<p>在浏览里面搜索：WebApi.OwinSelfHost</p>\n<p class=\"img-center\"><img alt=\"\" height=\"481\" src=\"image\\5c826313ddfb40b5a0ca5c8c75f7c6cb.png\" width=\"868\"/></p>\n<p>点击右侧的安装即可，我这边之前安装过所有出现的是卸载与更新</p>\n<p><img alt=\"\" height=\"575\" src=\"image\\2a87fd1822e047088f573b594c4a1d71.png\" width=\"1200\"/></p>\n<h2> 2.2.启动WebApi服务</h2>\n<p>在Program类Main方法中增加WebApp.Start方法</p>\n<pre><code class=\"language-cs\"> class Program\n    {\n        static void Main(string[] args)\n        {\n            string baseURL=\"http://*:8080/\";\n            WebApp.Start&lt;WebApiConfig&gt;(baseURL);\n            Log.Instance.Show(\"Start up web api...\");\n        }\n    }</code></pre>\n<p>编写WebApiConfig类</p>\n<pre><code class=\"language-cs\"> public class WebApiConfig\n    {\n        public void Configuration(IAppBuilder app)\n        {\n            var webApiConfiguration = ConfigureWebApi();\n            \n            app.UseWebApi(webApiConfiguration);\n        }\n        private HttpConfiguration ConfigureWebApi()\n        {\n            var config = new HttpConfiguration();\n            config.MapHttpAttributeRoutes();\n            config.Formatters.JsonFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue(\"application/xml\"));\n            config.Formatters.JsonFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue(\"application/javascript\"));\n            config.Formatters.JsonFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue(\"text/plain\"));\n            config.Formatters.JsonFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue(\"text/html\"));\n            config.Routes.MapHttpRoute(\n                name: \"OpenApi\",\n                routeTemplate: \"api/{controller}/{action}/{id}\",\n                defaults: new { id = RouteParameter.Optional }\n            );\n            return config;\n        }\n    }</code></pre>\n<p>最后添加Controller以及对应自己业务处理类</p>\n<pre><code class=\"language-cs\">public class OpenController: ApiController\n{\n    [HttpPost]\n        public Result test([FromBody] Param param)\n        {\n            Result backResult = new Result();\n            ....\n            backResult.Object=\"返回结果\";\n            backResult.Result = 200;\n            backResult.Message = \"succeed\";\n        }\n}</code></pre>\n<p>代码中的Result是我自已定义的统一返回样式。</p>\n<h1>3.最后</h1>\n<p>当我们打包生成应用程序后，双击.exe启动后，WebApi服务就会被启动。</p>\n<p style=\"text-align:center;\"></p>\n</div>\n</div>"}