{"blogid": "124039862", "writerAge": "码龄5年", "writerBlogNum": "23", "writerCollect": "75", "writerComment": "20", "writerFan": "1517", "writerGrade": "2级", "writerIntegral": "306", "writerName": "“mint”", "writerProfileAdress": "writer_image\\profile_124039862.jpg", "writerRankTotal": "50754", "writerRankWeekly": "12548", "writerThumb": "15", "writerVisitNum": "26144", "blog_read_count": "6093", "blog_time": "于 2022-04-08 15:15:41 发布", "blog_title": "Vue封装websocket", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>项目中需要使用websocke，这个是我自己修修改改好多次之后用得最顺手的一版，分享一下。<br/> 这个封装需要搭配vuex使用，因为收到的数据都保存在vuex中了，真的绝绝子好用，解决了我一大堆问题。<br/> 如果需要可以搭配上心跳、websocke重连。</p>\n<p>话说，vuex的使用也有好多坑，在踩坑的路上狂奔，下次再写vuex的</p>\n<h2><a id=\"1_socketjs_6\"></a>1. 封装的socket.js文件内容：</h2>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> websock <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> global_callback <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> serverPort <span class=\"token operator\">=</span> <span class=\"token string\">\"80\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// webSocket连接端口</span>\n<span class=\"token keyword\">var</span> wsuri <span class=\"token operator\">=</span> <span class=\"token string\">\"ws://\"</span> <span class=\"token operator\">+</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>hostname <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> serverPort<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createWebSocket</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>websock <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> websock <span class=\"token operator\">!==</span> WebSocket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">initWebSocket</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">initWebSocket</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  global_callback <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 初始化websocket</span>\n  websock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span>wsuri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  websock<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">websocketonmessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  websock<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclose</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">websocketclose</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  websock<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">websocketOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 连接发生错误的回调方法</span>\n  websock<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WebSocket连接发生错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">//createWebSocket();啊，发现这样写会创建多个连接，加延时也不行</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 实际调用的方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sendSock</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">agentData</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>websock<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> websock<span class=\"token punctuation\">.</span><span class=\"token constant\">OPEN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 若是ws开启状态</span>\n    <span class=\"token function\">websocketsend</span><span class=\"token punctuation\">(</span>agentData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>websock<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> websock<span class=\"token punctuation\">.</span><span class=\"token constant\">CONNECTING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 若是 正在开启状态，则等待1s后重新调用</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">sendSock</span><span class=\"token punctuation\">(</span>agentData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 若未开启 ，则等待1s后重新调用</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">sendSock</span><span class=\"token punctuation\">(</span>agentData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">closeSock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  websock<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 数据接收</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">websocketonmessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// console.log(\"收到数据：\"+JSON.parse(e.data));</span>\n  <span class=\"token comment\">// console.log(\"收到数据：\"+msg);</span>\n\n  <span class=\"token comment\">// global_callback(JSON.parse(msg.data));</span>\n\n  <span class=\"token comment\">// 收到信息为Blob类型时</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// debugger</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsText</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      result <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//console.log(\"websocket收到\", result);</span>\n      <span class=\"token function\">global_callback</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n    result <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//console.log(\"websocket收到\", result);</span>\n    <span class=\"token function\">global_callback</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 数据发送</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">websocketsend</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">agentData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送数据：\"</span> <span class=\"token operator\">+</span> agentData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  websock<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>agentData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 关闭</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">websocketclose</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connection closed (\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>code <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">websocketOpen</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接打开\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{<!-- --></span> sendSock<span class=\"token punctuation\">,</span> createWebSocket<span class=\"token punctuation\">,</span> closeSock <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>封装的websocke暴露三个接口</p>\n<ul><li>sendSock用于发送数据</li><li>createWebSocket用于创建连接、对收到的数据进行处理</li><li>closeSock 用于关闭连接</li></ul>\n<h2><a id=\"_116\"></a>使用方法</h2>\n<p>先看目录<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f9723d2cb6f24c28aa29a3b59af0f0d0.png\"/></p>\n<h2><a id=\"1_121\"></a>1、建立连接</h2>\n<p>建立好socket.js文件之后就可以开始使用了，因为我的登录是用axios的，只有登录成功（进入主页之后才建立websocke连接），所以我把连接写在了Home.vue的文件中。</p>\n<p><strong>第一步：导入文件</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> sendSock<span class=\"token punctuation\">,</span> createWebSocket<span class=\"token punctuation\">,</span> closeSock <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/api/socket\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>第二步：初始化时建立websocket连接</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">createWebSocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>global_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n \n    <span class=\"token comment\">// websocket的回调函数，msg表示收到的消息</span>\n    <span class=\"token function\">global_callback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"websocket的回调函数收到服务器信息：\"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// console.log(\"收到服务器信息：\" + msg);</span>\n     \n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>operate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"autoIndex\"</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setAutoIndex\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"allChannelSwitch\"</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setAllChannelSwitch\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"singleChannelSwitch\"</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setSingleChannelSwitch\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"sceneSelect\"</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setSceneSelect\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p>msg.operate是用于判断收到通信数据<br/> this.$store.dispatch()是用于异步修改vuex保存的数据的函数。<br/> 界面中通信数据收到后都保存在vuex中，需要该数据的地方就从vuex中获取</p>\n<h2><a id=\"2_170\"></a>2、发送数据</h2>\n<p><strong>第一步：导入文件</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> sendSock <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/api/socket\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>第二步：发送数据</strong></p>\n<pre><code class=\"prism language-javascript\"> <span class=\"token keyword\">var</span> sendData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">operate</span><span class=\"token operator\">:</span><span class=\"token string\">\"singleChannelSwitch\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">opera</span><span class=\"token operator\">:</span>row<span class=\"token punctuation\">.</span>button_relay\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">sendSock</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>sendData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"3_187\"></a>3、关闭连接</h2>\n<p><strong>第一步：导入文件</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> closeSock<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/api/socket\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>第二步：关闭连接</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">closeSock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}