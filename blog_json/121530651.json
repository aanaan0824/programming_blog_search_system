{"blogid": "121530651", "writerAge": "码龄2年", "writerBlogNum": "11", "writerCollect": "600", "writerComment": "116", "writerFan": "66", "writerGrade": "2级", "writerIntegral": "337", "writerName": "港来港去", "writerProfileAdress": "writer_image\\profile_121530651.jpg", "writerRankTotal": "91893", "writerRankWeekly": "488041", "writerThumb": "130", "writerVisitNum": "57511", "blog_read_count": "19416", "blog_time": "于 2021-11-25 11:26:41 发布", "blog_title": "Mediapipe入门——搭建姿态检测模型并实时输出人体关节点3d坐标", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>一. 引言</strong><br/> MediaPipe 是一款由 Google Research 开发并开源的多媒体机器学习模型应用框架。在谷歌，一系列重要产品，如 YouTube、Google Lens、ARCore、Google Home 以及 Nest，都已深度整合了 MediaPipe。MediaPipe大有用武之地，可以做物体检测、自拍分割、头发分割、人脸检测、手部检测、运动追踪，等等。基于此可以实现更高级的功能。</p>\n<p><strong>二. 怎么做</strong><br/> 最近在学校做项目需要用到mediapipe，但网上没有很好的教程，于是根据官方文档自己尝试理解也有一些收获，在这里记录一下。<br/> 1.官方文档地址<a href=\"https://google.github.io/mediapipe/\">Mediapipe</a><br/> 2.实验环境</p>\n<blockquote>\n<p>I.win10<br/> II. Pycharm2021<br/> III. Python3.8<br/> IV. mediapipe0.89</p>\n</blockquote>\n<p>3.我需要检测人体骨架和手部，那么先构建这样的检测模型。根据官网的例子，mediapipe.solutions下有我们需要的解决方案，来看看。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> mediapipe <span class=\"token keyword\">as</span> mp\nmp_holistic <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span>solutions<span class=\"token punctuation\">.</span>holistic\n\n<span class=\"token builtin\">help</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">.</span>solutions<span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code class=\"prism language-python\">Help on package mediapipe<span class=\"token punctuation\">.</span>python<span class=\"token punctuation\">.</span>solutions <span class=\"token keyword\">in</span> mediapipe<span class=\"token punctuation\">.</span>python<span class=\"token punctuation\">:</span>\n\nNAME\n    mediapipe<span class=\"token punctuation\">.</span>python<span class=\"token punctuation\">.</span>solutions <span class=\"token operator\">-</span> MediaPipe Solutions Python API<span class=\"token punctuation\">.</span>\n\nPACKAGE CONTENTS\n    download_utils\n    drawing_styles\n    drawing_utils\n    drawing_utils_test\n    face_detection\n    face_detection_test\n    face_mesh\n    face_mesh_connections\n    face_mesh_test\n    hands\n    hands_connections\n    hands_test\n    holistic\n    holistic_test\n    objectron\n    objectron_test\n    pose\n    pose_connections\n    pose_test\n    selfie_segmentation\n    selfie_segmentation_test\n</code></pre>\n<p>以上就是mediapipe提供的解决方案，其中drawing_utils是画图用的，drawing_styles应该是渲染风格，face_detection用于面部检测，face_mesh用于绘人脸面网，hands用于手部检测，holistic是整体的解决方案（包括人脸、骨架、手），pose是识别姿势，objectron用于目标检测，selfie_segmentation是自拍分割。<br/> 4. 有了方法，根据官网的例子，先导入必要的包，然后建立模型。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">import</span> mediapipe <span class=\"token keyword\">as</span> mp\nmp_drawing <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span>solutions<span class=\"token punctuation\">.</span>drawing_utils  <span class=\"token comment\">#画图是必要的</span>\nmp_drawing_styles <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span>solutions<span class=\"token punctuation\">.</span>drawing_styles\n<span class=\"token comment\">#选择需要的解决方案，手部检测就mp_hands=mp.solutions.hands,其他类似</span>\nmp_holistic <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span>solutions<span class=\"token punctuation\">.</span>holistic     \n</code></pre>\n<p>5.接着打开摄像头，并建立我们的类。</p>\n<pre><code class=\"prism language-python\">cap <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>VideoCapture<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> mp_holistic<span class=\"token punctuation\">.</span>Holistic<span class=\"token punctuation\">(</span>\n    min_detection_confidence<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n    min_tracking_confidence<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> holistic<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">while</span> cap<span class=\"token punctuation\">.</span>isOpened<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    success<span class=\"token punctuation\">,</span> image <span class=\"token operator\">=</span> cap<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> success<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ignoring empty camera frame.\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># 加载一个视频的话，把continue换成break</span>\n      <span class=\"token keyword\">continue</span>\n</code></pre>\n<p>先看看mp_holistic.Holistic下有什么参数</p>\n<pre><code class=\"prism language-python\">Methods defined here<span class=\"token punctuation\">:</span>\n <span class=\"token operator\">|</span>  __init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> static_image_mode<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> model_complexity<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n            smooth_landmarks<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> enable_segmentation<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> \n            smooth_segmentation<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> refine_face_landmarks<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> \n            min_detection_confidence<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> min_tracking_confidence<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>官网解释如下：</p>\n<pre><code class=\"prism language-python\">static_image_mode\n如果设置为false，则解决方案将输入图像视为视频流。它将尝试在第一张图像中检测最突出的人，并在成功检测后进一步定位姿势和其他地标。在随后的图像中，它只是简单地跟踪那些地标，而不会调用另一个检测，直到它失去跟踪，以减少计算和延迟。如果设置为true，则人物检测会运行每个输入图像，非常适合处理一批静态的、可能不相关的图像。默认为false<span class=\"token punctuation\">.</span>\n\nmodel_complexity\n姿势地标模型的复杂度：<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span>或<span class=\"token number\">2</span>。地标准确性以及推理延迟通常随模型复杂性而增加。默认为<span class=\"token number\">1</span><span class=\"token punctuation\">.</span>\n\nsmooth_landmarks\n如果设置为true，解决方案过滤器会在不同的输入图像之间设置地标以减少抖动，但如果static_image_mode也设置为，则忽略true。默认为true<span class=\"token punctuation\">.</span>\n\nenable_segmentation\n如果设置为true，除了姿势、面部和手部地标之外，该解决方案还会生成分割掩码。默认为false<span class=\"token punctuation\">.</span>\n\nsmooth_segmentation\n如果设置为true，该解决方案会过滤不同输入图像的分割掩码以减少抖动。如果enable_segmentation为false或static_image_mode为 ，则忽略true。默认为true<span class=\"token punctuation\">.</span>\n\nrefine_face_landmarks\n是否进一步细化眼睛和嘴唇周围的地标坐标，并在虹膜周围输出额外的地标。默认为false<span class=\"token punctuation\">.</span>\n\nmin_detection_confidence\n<span class=\"token punctuation\">[</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">]</span>来自人员检测模型的最小置信值 <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>，用于将检测视为成功。默认为<span class=\"token number\">0.5</span><span class=\"token punctuation\">.</span>\n\nmin_tracking_confidence\n<span class=\"token punctuation\">[</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">]</span>来自地标跟踪模型的最小置信值（将其设置为更高的值可以提高解决方案的稳健性，但代价是更高的延迟。如果static_image_mode是true，则忽略，其中人员检测仅在每个图像上运行。默认为<span class=\"token number\">0.5</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<p>6.有了这些解释，就比较好理解了。然后对输入的视频流做一些预处理。</p>\n<pre><code class=\"prism language-python\">  \timage<span class=\"token punctuation\">.</span>flags<span class=\"token punctuation\">.</span>writeable <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    image <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>cvtColor<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>COLOR_BGR2RGB<span class=\"token punctuation\">)</span> <span class=\"token comment\">#BGR图转RGB</span>\n    results <span class=\"token operator\">=</span> holistic<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span> <span class=\"token comment\">#处理三通道彩色图</span>\n    image<span class=\"token punctuation\">.</span>flags<span class=\"token punctuation\">.</span>writeable <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    image <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>cvtColor<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>COLOR_RGB2BGR<span class=\"token punctuation\">)</span> <span class=\"token comment\">#RGB转BGR</span>\n</code></pre>\n<p>比较重要的是这一步results = holistic.process(image)，前面建立了整体检测的类，类下方法process()会处理图片并返回我们要的坐标，来help看一看。</p>\n<pre><code class=\"prism language-python\">Help on function process <span class=\"token keyword\">in</span> module mediapipe<span class=\"token punctuation\">.</span>python<span class=\"token punctuation\">.</span>solutions<span class=\"token punctuation\">.</span>holistic<span class=\"token punctuation\">:</span>\n\nprocess<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">:</span> numpy<span class=\"token punctuation\">.</span>ndarray<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'NamedTuple'</span><span class=\"token operator\">&gt;</span>\n    Processes an RGB image <span class=\"token operator\">and</span> returns the pose landmarks<span class=\"token punctuation\">,</span> left <span class=\"token operator\">and</span> right hand landmarks<span class=\"token punctuation\">,</span> <span class=\"token operator\">and</span> face landmarks on the most prominent person detected<span class=\"token punctuation\">.</span>\n    \n    Args<span class=\"token punctuation\">:</span>\n      image<span class=\"token punctuation\">:</span> An RGB image represented <span class=\"token keyword\">as</span> a numpy ndarray<span class=\"token punctuation\">.</span>\n    \n    Raises<span class=\"token punctuation\">:</span>\n      RuntimeError<span class=\"token punctuation\">:</span> If the underlying graph throws <span class=\"token builtin\">any</span> error<span class=\"token punctuation\">.</span>\n      ValueError<span class=\"token punctuation\">:</span> If the <span class=\"token builtin\">input</span> image <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> three channel RGB<span class=\"token punctuation\">.</span>\n    \n    Returns<span class=\"token punctuation\">:</span>\n      A NamedTuple <span class=\"token keyword\">with</span> fields describing the landmarks on the most prominate\n      person detected<span class=\"token punctuation\">:</span>\n        <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"pose_landmarks\"</span> field that contains the pose landmarks<span class=\"token punctuation\">.</span>\n        <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"pose_world_landmarks\"</span> field that contains the pose landmarks <span class=\"token keyword\">in</span>\n        real<span class=\"token operator\">-</span>world <span class=\"token number\">3D</span> coordinates that are <span class=\"token keyword\">in</span> meters <span class=\"token keyword\">with</span> the origin at the\n        center between hips<span class=\"token punctuation\">.</span>\n        <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"left_hand_landmarks\"</span> field that contains the left<span class=\"token operator\">-</span>hand landmarks<span class=\"token punctuation\">.</span>\n        <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"right_hand_landmarks\"</span> field that contains the right<span class=\"token operator\">-</span>hand landmarks<span class=\"token punctuation\">.</span>\n        <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"face_landmarks\"</span> field that contains the face landmarks<span class=\"token punctuation\">.</span>\n        <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"segmentation_mask\"</span> field that contains the segmentation mask <span class=\"token keyword\">if</span>\n           <span class=\"token string\">\"enable_segmentation\"</span> <span class=\"token keyword\">is</span> <span class=\"token builtin\">set</span> to true<span class=\"token punctuation\">.</span>\n</code></pre>\n<p>7.可以看到Returns下左右手、姿势、脸部的地标都能返回，待会我就从这获取坐标。处理完图片，就需要在人体关节点上渲染。</p>\n<pre><code class=\"prism language-python\">\t<span class=\"token comment\">#在关节点渲染</span>\n    mp_drawing<span class=\"token punctuation\">.</span>draw_landmarks<span class=\"token punctuation\">(</span>\n        image<span class=\"token punctuation\">,</span>\n        results<span class=\"token punctuation\">.</span>face_landmarks<span class=\"token punctuation\">,</span>  <span class=\"token comment\">#画脸</span>\n        mp_holistic<span class=\"token punctuation\">.</span>FACEMESH_CONTOURS<span class=\"token punctuation\">,</span>\n        landmark_drawing_spec<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n        connection_drawing_spec<span class=\"token operator\">=</span>mp_drawing_styles\n        <span class=\"token punctuation\">.</span>get_default_face_mesh_contours_style<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    mp_drawing<span class=\"token punctuation\">.</span>draw_landmarks<span class=\"token punctuation\">(</span>\n        image<span class=\"token punctuation\">,</span>\n        results<span class=\"token punctuation\">.</span>pose_landmarks<span class=\"token punctuation\">,</span>  <span class=\"token comment\">#画人体骨架</span>\n        mp_holistic<span class=\"token punctuation\">.</span>POSE_CONNECTIONS<span class=\"token punctuation\">,</span>\n        landmark_drawing_spec<span class=\"token operator\">=</span>mp_drawing_styles\n        <span class=\"token punctuation\">.</span>get_default_pose_landmarks_style<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#下两行是我加的，官网的例子并没有画左右手</span>\n    mp_drawing<span class=\"token punctuation\">.</span>draw_landmarks<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">.</span>left_hand_landmarks<span class=\"token punctuation\">,</span> mp_holistic<span class=\"token punctuation\">.</span>HAND_CONNECTIONS<span class=\"token punctuation\">)</span>\n    mp_drawing<span class=\"token punctuation\">.</span>draw_landmarks<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">.</span>right_hand_landmarks<span class=\"token punctuation\">,</span> mp_holistic<span class=\"token punctuation\">.</span>HAND_CONNECTIONS<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>前面mp_drawing=mp.solutions.drawing_utils，draw_landmarks()参数比较多，我挑几个重要的翻译出来。</p>\n<pre><code class=\"prism language-python\">draw_landmarks参数：\n       image：表示为 numpy ndarray 的三通道 RGB 图像。\n       地标列表：要在其上注释的规范化地标列表原始消息\n         图片。\n       connections：地标索引元组列表，指定地标如何\n         在图中连接。\n       Landmark_drawing_spec：DrawingSpec 对象或来自的映射\n         将地标传递给指定地标绘图的 DrawingSpecs\n         颜色、线条粗细和圆半径等设置。\n         如果此参数明确设置为 <span class=\"token boolean\">None</span>，则不会绘制任何地标。\n       connection_drawing_spec：DrawingSpec 对象或来自的映射\n         到 DrawingSpecs 的手连接，它指定了\n         连接的绘图设置，例如颜色和线条粗细。\n         如果此参数明确设置为 <span class=\"token boolean\">None</span>，则没有地标连接\n         被画下来。\n</code></pre>\n<p>8.接下来获取右手的21个节点坐标，如下图，来自官网。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b32f1e03f902413288c7263f12cb129e.png\"/><br/> 前面说到results = holistic.process(image)返回了结点坐标，现在来获取它。</p>\n<pre><code class=\"prism language-python\">    <span class=\"token keyword\">if</span> results<span class=\"token punctuation\">.</span>right_hand_landmarks<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span> landmarks <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>right_hand_landmarks<span class=\"token punctuation\">.</span>landmark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>landmarks <span class=\"token punctuation\">)</span>\n</code></pre>\n<p>解释一下，index是索引，即上图里每个手指节点的索引0,1,2,3等等，landmarks 是结点地标(x,y,z),是真实世界的3d坐标，原点位于手的近似几何中心。最后打开窗口，就可以愉快地使用mediapipe了</p>\n<pre><code class=\"prism language-python\">    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'MediaPipe Holistic'</span><span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>flip<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span> <span class=\"token operator\">==</span> <span class=\"token number\">27</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">break</span>\ncap<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>三. 运行结果</strong><br/> 还是挺成功的，只要我右手出现在摄像头里，坐标就会输出，右手放下去就没有输出。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d775f03f9b1947e79c3274bf86b9ce46.png\"/><br/> 如上图演示结果，19,20是结点索引index，对应上文二. 8 ，坐标是小手指最上面两个坐标。运行起来，会连续地一次性输出21个坐标。再来看看蔡老师的演示结果。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a29ee138f18b46c388177f4cbdc4f5b4.png\"/><br/> 当然，如果想输出左手，甚至是嘴唇、鼻子、肩膀等地的坐标都是可以的。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>pose_landmarks<span class=\"token punctuation\">.</span>landmark<span class=\"token punctuation\">[</span>mp_holistic<span class=\"token punctuation\">.</span>PoseLandmark<span class=\"token punctuation\">.</span>NOSE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#可以自己选择</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3abecf01b9914d42a95f338ce464ab27.png\"/><br/> 四. 完整代码</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">import</span> mediapipe <span class=\"token keyword\">as</span> mp\nmp_drawing <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span>solutions<span class=\"token punctuation\">.</span>drawing_utils\nmp_drawing_styles <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span>solutions<span class=\"token punctuation\">.</span>drawing_styles\nmp_holistic <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span>solutions<span class=\"token punctuation\">.</span>holistic\n\ncap <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>VideoCapture<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> mp_holistic<span class=\"token punctuation\">.</span>Holistic<span class=\"token punctuation\">(</span>\n    min_detection_confidence<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n    min_tracking_confidence<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> holistic<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">while</span> cap<span class=\"token punctuation\">.</span>isOpened<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    success<span class=\"token punctuation\">,</span> image <span class=\"token operator\">=</span> cap<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> success<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ignoring empty camera frame.\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># If loading a video, use 'break' instead of 'continue'.</span>\n      <span class=\"token keyword\">continue</span>\n\n    image<span class=\"token punctuation\">.</span>flags<span class=\"token punctuation\">.</span>writeable <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    image <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>cvtColor<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>COLOR_BGR2RGB<span class=\"token punctuation\">)</span>\n    results <span class=\"token operator\">=</span> holistic<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">#画图</span>\n    image<span class=\"token punctuation\">.</span>flags<span class=\"token punctuation\">.</span>writeable <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    image <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>cvtColor<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>COLOR_RGB2BGR<span class=\"token punctuation\">)</span>\n    mp_drawing<span class=\"token punctuation\">.</span>draw_landmarks<span class=\"token punctuation\">(</span>\n        image<span class=\"token punctuation\">,</span>\n        results<span class=\"token punctuation\">.</span>face_landmarks<span class=\"token punctuation\">,</span>\n        mp_holistic<span class=\"token punctuation\">.</span>FACEMESH_CONTOURS<span class=\"token punctuation\">,</span>\n        landmark_drawing_spec<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n        connection_drawing_spec<span class=\"token operator\">=</span>mp_drawing_styles\n        <span class=\"token punctuation\">.</span>get_default_face_mesh_contours_style<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    mp_drawing<span class=\"token punctuation\">.</span>draw_landmarks<span class=\"token punctuation\">(</span>\n        image<span class=\"token punctuation\">,</span>\n        results<span class=\"token punctuation\">.</span>pose_landmarks<span class=\"token punctuation\">,</span>\n        mp_holistic<span class=\"token punctuation\">.</span>POSE_CONNECTIONS<span class=\"token punctuation\">,</span>\n        landmark_drawing_spec<span class=\"token operator\">=</span>mp_drawing_styles\n        <span class=\"token punctuation\">.</span>get_default_pose_landmarks_style<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    mp_drawing<span class=\"token punctuation\">.</span>draw_landmarks<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">.</span>left_hand_landmarks<span class=\"token punctuation\">,</span> mp_holistic<span class=\"token punctuation\">.</span>HAND_CONNECTIONS<span class=\"token punctuation\">)</span>\n    mp_drawing<span class=\"token punctuation\">.</span>draw_landmarks<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">.</span>right_hand_landmarks<span class=\"token punctuation\">,</span> mp_holistic<span class=\"token punctuation\">.</span>HAND_CONNECTIONS<span class=\"token punctuation\">)</span>\n    \n\t<span class=\"token comment\">#右手21个节点坐标</span>\n    <span class=\"token keyword\">if</span> results<span class=\"token punctuation\">.</span>right_hand_landmarks<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span> landmarks  <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>right_hand_landmarks<span class=\"token punctuation\">.</span>landmark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>landmarks <span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">#鼻子坐标</span>\n    <span class=\"token comment\">#print(results.pose_landmarks.landmark[mp_holistic.PoseLandmark.NOSE])</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'MediaPipe Holistic'</span><span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>flip<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span> <span class=\"token operator\">==</span> <span class=\"token number\">27</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">break</span>\ncap<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>六. 未完待续，欢迎讨论，赐教</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}