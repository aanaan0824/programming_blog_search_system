{"blogid": "123138303", "writerAge": "码龄6年", "writerBlogNum": "183", "writerCollect": "2499", "writerComment": "503", "writerFan": "7055", "writerGrade": "6级", "writerIntegral": "5664", "writerName": "Hermit_Rabbit", "writerProfileAdress": "writer_image\\profile_123138303.jpg", "writerRankTotal": "2600", "writerRankWeekly": "1046", "writerThumb": "396", "writerVisitNum": "1075374", "blog_read_count": "7723", "blog_time": "已于 2022-08-05 14:13:23 修改", "blog_title": "C++之工厂(factory)模式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"0__0\"></a>0. 简介</h1>\n<p>继单例模式写完后，我觉得对于C++的高级用法可以来开一个专栏来专门整理与阐述，这里，我将以我们最常用的工厂模式开始，来逐步的共同学习。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8b306b62cd7247038d937328287dd9a7.png\"/></p>\n<h1><a id=\"1__5\"></a>1. 初级工厂模式</h1>\n<p>工厂顾名思义就是创建产品，根据产品是具体产品还是具体工厂可分为简单工厂模式和工厂方法模式，根据工厂的抽象程度可分为工厂方法模式和抽象工厂模式。本节从一个具体的例子逐步深入分析，来体会三种工厂模式的应用场景和利弊。这里借用网络上的<a href=\"https://www.cnblogs.com/xiaolincoding/p/11524376.html\">例子</a>来结合自己的理解来解释。</p>\n<h3><a id=\"11__7\"></a>1.1 简单工厂模式</h3>\n<p>简单工厂模式对对象创建管理方式最为简单，因为其仅仅简单的对不同类对象的创建进行了一层薄薄的封装。该模式通过向工厂传递类型来指定要创建的对象，其UML类图如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e02ba03c5a344303b0fd873302b61ea1.png\"/><br/> <strong>结构组成：</strong><br/> 工厂类(<code>ShoesFactory</code>)：工厂模式的核心类，会定义一个用于创建指定的具体实例对象的接口。<br/> 抽象产品类(<code>Shoes</code>)：是具体产品类的继承的父类或实现的接口。<br/> 具体产品类(<code>NiKeShoes\\AdidasShoes\\LiNingShoes</code>)：工厂类所创建的对象就是此具体产品实例。</p>\n<p><strong>优点与不足：</strong><br/> <strong>优点：</strong> 结构简单，管理方式简单</p>\n<p><strong>缺点:</strong> 扩展性非常差，新增产品的时候，需要去修改工厂类。</p>\n<hr/>\n<p>抽象产品类，用于存放一类特征相似的实现，并用于定义具体产品类</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 鞋子抽象类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Shoes</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Shoes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 耐克鞋子</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NiKeShoes</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Shoes</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"我是耐克球鞋，我的广告语：Just do it\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 阿迪达斯鞋子</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AdidasShoes</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Shoes</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"我是阿迪达斯球鞋，我的广告语:Impossible is nothing\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>工厂类用于统计所有的特征，可以根据<code>enum</code>类型创建具体的产品对象。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">SHOES_TYPE</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    NIKE<span class=\"token punctuation\">,</span>\n    ADIDAS\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 总鞋厂</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ShoesFactory</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// 根据鞋子类型创建对应的鞋子对象</span>\n    Shoes <span class=\"token operator\">*</span><span class=\"token function\">CreateShoes</span><span class=\"token punctuation\">(</span>SHOES_TYPE type<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">case</span> NIKE<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">NiKeShoes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> ADIDAS<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">AdidasShoes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>主函数，先是构造了工厂对象，后创建指定类型的具体产品对象，并实现内部的操作。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    ShoesFactory shoesFactory<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 从鞋工厂对象创建耐克鞋对象</span>\n    Shoes <span class=\"token operator\">*</span>pNikeShoes <span class=\"token operator\">=</span> shoesFactory<span class=\"token punctuation\">.</span><span class=\"token function\">CreateShoes</span><span class=\"token punctuation\">(</span>NIKE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pNikeShoes <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 耐克球鞋广告喊起</span>\n        pNikeShoes<span class=\"token operator\">-&gt;</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 释放资源</span>\n        <span class=\"token keyword\">delete</span> pNikeShoes<span class=\"token punctuation\">;</span>\n        pNikeShoes <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 从鞋工厂对象创建阿迪达斯鞋对象</span>\n    Shoes <span class=\"token operator\">*</span>pAdidasShoes  <span class=\"token operator\">=</span> shoesFactory<span class=\"token punctuation\">.</span><span class=\"token function\">CreateShoes</span><span class=\"token punctuation\">(</span>ADIDAS<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pAdidasShoes <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 阿里达斯球鞋广告喊起</span>\n        pAdidasShoes<span class=\"token operator\">-&gt;</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 释放资源</span>\n        <span class=\"token keyword\">delete</span> pLiNingShoes<span class=\"token punctuation\">;</span>\n        pAdidasShoes <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"12__118\"></a>1.2 工厂方法模式</h3>\n<p>和简单工厂模式中工厂负责生产所有产品相比，工厂方法模式将生成具体产品的任务分发给具体的产品工厂，其UML类图如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\206ecf6d3a7641d588ccfec9732521e1.png\"/><br/> <strong>结构组成：</strong><br/> 抽象工厂类厂（<code>ShoesFactory</code>）：工厂方法模式的核心类，提供创建具体产品的接口，由具体工厂类实现。<br/> 具体工厂类（<code>NiKeProducer\\AdidasProducer\\LiNingProducer</code>）：继承于抽象工厂，实现创建对应具体产品对象的方式。<br/> 抽象产品类（<code>Shoes</code>）：它是具体产品继承的父类（基类）。<br/> 具体产品类（<code>NiKeShoes\\AdidasShoes\\LiNingShoes</code>）：具体工厂所创建的对象，就是此类。</p>\n<p><strong>优点与不足：</strong><br/> <strong>优点：</strong> 工厂方法模式抽象出了工厂类，并把具体产品对象的创建放到具体工厂类实现。实现了一个工厂生产一类产品，不需要修改工厂类，只需要增加新的具体工厂类即可。</p>\n<p><strong>缺点：</strong> 每新增一个产品，就需要增加一个对应的产品的具体工厂类。相比简单工厂模式而言，工厂方法模式需要更多的类定义。</p>\n<hr/>\n<p>抽象工厂类，提供了创建具体工厂类的纯虚函数，并通过具体工厂类来返回具体产品类</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 总鞋厂</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ShoesFactory</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> Shoes <span class=\"token operator\">*</span><span class=\"token function\">CreateShoes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ShoesFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 耐克生产者/生产链</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NiKeProducer</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ShoesFactory</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    Shoes <span class=\"token operator\">*</span><span class=\"token function\">CreateShoes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">NiKeShoes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 阿迪达斯生产者/生产链</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AdidasProducer</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ShoesFactory</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    Shoes <span class=\"token operator\">*</span><span class=\"token function\">CreateShoes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">AdidasShoes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>抽象产品类同上</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 同上</span>\n</code></pre>\n<p>主函数函数针对每种类型的具体产品，构造了每种具体产品的具体工厂，再由每个具体工厂生产出对应的产品。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// ================ 生产耐克流程 ==================== //</span>\n    <span class=\"token comment\">// 鞋厂开设耐克生产线</span>\n    ShoesFactory <span class=\"token operator\">*</span>niKeProducer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">NiKeProducer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 耐克生产线产出球鞋</span>\n    Shoes <span class=\"token operator\">*</span>nikeShoes <span class=\"token operator\">=</span> niKeProducer<span class=\"token operator\">-&gt;</span><span class=\"token function\">CreateShoes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 耐克球鞋广告喊起</span>\n    nikeShoes<span class=\"token operator\">-&gt;</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 释放资源</span>\n    <span class=\"token keyword\">delete</span> nikeShoes<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> niKeProducer<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ================ 生产阿迪达斯流程 ==================== //</span>\n    <span class=\"token comment\">// 鞋厂开设阿迪达斯生产者</span>\n    ShoesFactory <span class=\"token operator\">*</span>adidasProducer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">AdidasProducer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 阿迪达斯生产线产出球鞋</span>\n    Shoes <span class=\"token operator\">*</span>adidasShoes <span class=\"token operator\">=</span> adidasProducer<span class=\"token operator\">-&gt;</span><span class=\"token function\">CreateShoes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 阿迪达斯球鞋广喊起</span>\n    adidasShoes<span class=\"token operator\">-&gt;</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 释放资源</span>\n    <span class=\"token keyword\">delete</span> adidasShoes<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> adidasProducer<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1><a id=\"13__200\"></a>1.3 抽象工厂模式</h1>\n<p>上面两种模式不管工厂怎么拆分抽象，都只是针对一类产品，如果需要多种产品，那就需要使用抽象工厂模式。抽象工厂模式通过在AbstarctFactory中增加创建产品的接口，并在具体子工厂中实现新加产品的创建，当然前提是子工厂支持生产该产品。否则继承的这个接口可以什么也不干。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4a67af0e8b7d48748824dbb4a694adaf.png\"/><br/> <strong>结构组成（和工厂方法模式一样）：</strong><br/> 抽象工厂类厂（<code>ShoesFactory</code>）：工厂方法模式的核心类，提供创建具体产品的接口，由具体工厂类实现。<br/> 具体工厂类（<code>NiKeProducer</code>）：继承于抽象工厂，实现创建对应具体产品对象的方式。<br/> 抽象产品类（<code>Shoes\\Clothe</code>）：它是具体产品继承的父类（基类）。<br/> 具体产品类（<code>NiKeShoes\\NiKeClothe</code>）：具体工厂所创建的对象，就是此类。</p>\n<p><strong>优点与不足：</strong><br/> <strong>优点：</strong> 提供一个接口，可以创建多个产品族中的产品对象，同一类的多个产品对象不需要创建多个工厂。</p>\n<p><strong>缺点：</strong> 相比简单工厂模式而言，抽象工厂模式需要更多的类定义。</p>\n<hr/>\n<p>抽象产品类+具体产品类</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 基类 衣服</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Clothe</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Clothe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 基类 鞋子</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Shoes</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Shoes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 耐克衣服</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NiKeClothe</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Clothe</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"我是耐克衣服，时尚我最在行！\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 耐克鞋子</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NiKeShoes</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Shoes</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"我是耐克球鞋，让你酷起来！\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>抽象工厂类+具体工厂类</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 总厂</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Factory</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> Shoes <span class=\"token operator\">*</span><span class=\"token function\">CreateShoes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> Clothe <span class=\"token operator\">*</span><span class=\"token function\">CreateClothe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 耐克生产者/生产链</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NiKeProducer</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Factory</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    Shoes <span class=\"token operator\">*</span><span class=\"token function\">CreateShoes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">NiKeShoes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t\n\tClothe <span class=\"token operator\">*</span><span class=\"token function\">CreateClothe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">NiKeClothe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>主函数可以通过调用一个工厂的不同方法类做不同的操作</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// ================ 生产耐克流程 ==================== //</span>\n    <span class=\"token comment\">// 鞋厂开设耐克生产线</span>\n    Factory <span class=\"token operator\">*</span>niKeProducer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">NiKeProducer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\">// 耐克生产线产出球鞋</span>\n    Shoes <span class=\"token operator\">*</span>nikeShoes <span class=\"token operator\">=</span> niKeProducer<span class=\"token operator\">-&gt;</span><span class=\"token function\">CreateShoes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 耐克生产线产出衣服</span>\n    Clothe <span class=\"token operator\">*</span>nikeClothe <span class=\"token operator\">=</span> niKeProducer<span class=\"token operator\">-&gt;</span><span class=\"token function\">CreateClothe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\">// 耐克球鞋广告喊起</span>\n    nikeShoes<span class=\"token operator\">-&gt;</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 耐克衣服广告喊起</span>\n    nikeClothe<span class=\"token operator\">-&gt;</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\">// 释放资源</span>\n    <span class=\"token keyword\">delete</span> nikeShoes<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> nikeClothe<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> niKeProducer<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"httpswwwguyuehomecom37108_310\"></a>…详情请参照<a href=\"https://www.guyuehome.com/37108\">古月居</a></h2>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}