{"blogid": "125904991", "writerAge": "码龄2年", "writerBlogNum": "58", "writerCollect": "1403", "writerComment": "1849", "writerFan": "2918", "writerGrade": "6级", "writerIntegral": "4705", "writerName": "风铃听雨~", "writerProfileAdress": "writer_image\\profile_125904991.jpg", "writerRankTotal": "3568", "writerRankWeekly": "54", "writerThumb": "1637", "writerVisitNum": "137674", "blog_read_count": "3962", "blog_time": "已于 2022-08-01 18:46:59 修改", "blog_title": "【java刷算法】牛客—剑指offer3栈、数组、递归、二分法的初步练习", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<ul><li>🧛‍♂️<strong>个人主页：</strong><a href=\"https://blog.csdn.net/muzi_longren?spm=1011.2415.3001.5343\">杯咖啡</a></li><li>💡进步是今天的活动，明天的保证！</li><li>✨目前正在学习：<a href=\"https://blog.csdn.net/muzi_longren/category_11902155.html?spm=1001.2014.3001.5482\">SSM框架</a>,<a href=\"https://blog.csdn.net/muzi_longren/category_11895216.html\">算法刷题</a></li><li>🙌<strong>牛客网</strong>，刷算法过面试的神级网站，<strong>用牛客你也牛。</strong> 👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_flty_jzsf\">免费注册和我一起学习刷题</a>👈</li><li>🐳希望大家多多支持🥰一起进步呀！</li><li>😎The man who fears losing has already lost.<br/> 怕输的人已经输了。 - 《权力的游戏》</li></ul>\n</blockquote>\n<hr/>\n<h1><a id=\"_8\"></a>✨今日三剑</h1>\n<p>JZ9 用两个栈实现队列<br/> JZ10 斐波那契数列<br/> JZ11 旋转数组的最小数字</p>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_8\">✨今日三剑</a></li><li><a href=\"#JZ9__19\">JZ9 用两个栈实现队列</a></li><li><ul><li><a href=\"#_20\">题目描述</a></li><li><a href=\"#_24\">思路详解</a></li><li><a href=\"#_28\">代码与结果</a></li></ul>\n</li><li><a href=\"#JZ10__54\">JZ10 斐波那契数列</a></li><li><ul><li><a href=\"#_55\">题目描述</a></li><li><a href=\"#_59\">思路详解</a></li><li><a href=\"#_63\">代码与结果</a></li></ul>\n</li><li><a href=\"#JZ11__77\">JZ11 旋转数组的最小数字</a></li><li><ul><li><a href=\"#_78\">题目描述</a></li><li><a href=\"#_81\">思路详解</a></li><li><a href=\"#_85\">代码与结果</a></li></ul>\n</li><li><a href=\"#_120\">✨总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"JZ9__19\"></a>JZ9 用两个栈实现队列</h1>\n<h2><a id=\"_20\"></a>题目描述</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\458738b1b5ea475ab0e61b090315ed9e.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\ea4e98c943c042739bff051a28ef269e.png\"/></p>\n<h2><a id=\"_24\"></a>思路详解</h2>\n<blockquote>\n<p>两个栈实现队列的想法很简单，当我们入栈的时候直接入栈就好了，出栈的时候如果第二个栈不为空的话，直接把第一个栈的所有元素出栈入栈到第二个栈，然后第二个栈再出栈就是原本的入栈顺序了。<br/> 其实思想就是<strong>倒腾了一下</strong>，第一个栈先进的后出，第二个栈也是先进后出，可是宏观看第二个栈先入的是你后输入的，所以出栈的时候就是输入的顺序了。</p>\n</blockquote>\n<h2><a id=\"_28\"></a>代码与结果</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stack</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> stack1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> stack2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        stack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                stack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> stack2<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6bff94d16b6f41dfb98fc601dbeaf982.png\"/></p>\n<h1><a id=\"JZ10__54\"></a>JZ10 斐波那契数列</h1>\n<h2><a id=\"_55\"></a>题目描述</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\37690a054b5348c3a7fd7b46d62177f5.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\44ea0dd256a142a6a53328ce8a09c4da.png\"/></p>\n<h2><a id=\"_59\"></a>思路详解</h2>\n<blockquote>\n<p>斐波那契数列很常见，那么本题也是入门级别的题，考察了递归的使用。<br/> <strong>注意特殊情况的判断就可以了。</strong></p>\n</blockquote>\n<h2><a id=\"_63\"></a>代码与结果</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">Fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7f133bc455e644df8faeb4736e83e842.png\"/></p>\n<h1><a id=\"JZ11__77\"></a>JZ11 旋转数组的最小数字</h1>\n<h2><a id=\"_78\"></a>题目描述</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\df8cf76adb6d4dd8a99bb7e75bc3fb63.png\"/></p>\n<h2><a id=\"_81\"></a>思路详解</h2>\n<blockquote>\n<p>本题的首先思想肯定是暴力破解，但是那样时间复杂度比较高。<br/> 这里采用二分法进行查找，也是二分查找的简单应用，详解上代码哦。</p>\n</blockquote>\n<h2><a id=\"_85\"></a>代码与结果</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minNumberInRotateArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token comment\">// 特殊情况判断</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>length<span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 左右指针i j</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 循环</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 找到数组的中点 m</span>\n            <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// m在左排序数组中，旋转点在 [m+1, j] 中</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> i <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// m 在右排序数组中，旋转点在 [i, m]中</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 缩小范围继续判断</span>\n            <span class=\"token keyword\">else</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 返回旋转点</span>\n        <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0912259e247142bf855e7ba9f5c13707.png\"/></p>\n<hr/>\n<h1><a id=\"_120\"></a>✨总结</h1>\n<p>今天主要练习了栈、数组、递归、二分法，这些都属于算法基本操作哦。一定要牢记，特别是二分法，在看到查找的时候第一时间要想到用哦。加油！！！</p>\n<blockquote>\n<p><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          原创不易，还希望各位大佬支持一下\n         \n        \n       \n       \n        \\textcolor{blue}{原创不易，还希望各位大佬支持一下}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: blue;\">原创不易，还希望各位大佬支持一下</span></span></span></span></span> <br/><br/> <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          点赞，你的认可是我创作的动力！\n         \n        \n       \n       \n        \\textcolor{green}{点赞，你的认可是我创作的动力！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">点赞，你的认可是我创作的动力！</span></span></span></span></span> <br/><br/> <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          收藏，你的青睐是我努力的方向！\n         \n        \n       \n       \n        \\textcolor{green}{收藏，你的青睐是我努力的方向！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">收藏，你的青睐是我努力的方向！</span></span></span></span></span> <br/><br/> <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          评论，你的意见是我进步的财富！\n         \n        \n       \n       \n        \\textcolor{green}{评论，你的意见是我进步的财富！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">评论，你的意见是我进步的财富！</span></span></span></span></span> <br/></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}