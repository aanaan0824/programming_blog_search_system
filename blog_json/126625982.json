{"blogid": "126625982", "writerAge": "码龄4年", "writerBlogNum": "41", "writerCollect": "231", "writerComment": "280", "writerFan": "175", "writerGrade": "4级", "writerIntegral": "1035", "writerName": "C_小米同学", "writerProfileAdress": "writer_image\\profile_126625982.jpg", "writerRankTotal": "18456", "writerRankWeekly": "575", "writerThumb": "234", "writerVisitNum": "10409", "blog_read_count": "276", "blog_time": "已于 2022-09-01 16:23:12 修改", "blog_title": "python从入门到实践：python常用模块", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%E3%80%81Time%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81Time%E6%A8%A1%E5%9D%97\">一、Time模块</a></p>\n<p id=\"1.%E6%97%B6%E9%97%B4%E6%88%B3-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E6%97%B6%E9%97%B4%E6%88%B3\">1.时间戳</a></p>\n<p id=\"2.%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%B6%E9%97%B4-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%B6%E9%97%B4\">2.格式化时间</a></p>\n<p id=\"3.%E7%BB%93%E6%9E%84%E5%8C%96%E6%97%B6%E9%97%B4-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E7%BB%93%E6%9E%84%E5%8C%96%E6%97%B6%E9%97%B4\">3.结构化时间</a></p>\n<p id=\"%C2%A04.%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%EF%BC%9A%E8%AE%A1%E7%AE%97%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E7%9A%84%E6%97%B6%E9%97%B4-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A04.%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%EF%BC%9A%E8%AE%A1%E7%AE%97%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E7%9A%84%E6%97%B6%E9%97%B4\">4.常见用法：计算程序执行的时间</a></p>\n<p id=\"%E4%BA%8C%E3%80%81datetime%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81datetime%E6%A8%A1%E5%9D%97\">二、datetime模块</a></p>\n<p id=\"%E4%B8%89%E3%80%81random%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81random%E6%A8%A1%E5%9D%97\">三、random模块</a></p>\n<p id=\"%E5%9B%9B%E3%80%81os%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81os%E6%A8%A1%E5%9D%97\">四、os模块</a></p>\n<p id=\"1.os%E6%A8%A1%E5%9D%97%E8%B4%9F%E8%B4%A3%E7%A8%8B%E5%BA%8F%E4%B8%8E%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%A4%E4%BA%92-toc\" style=\"margin-left:40px;\"><a href=\"#1.os%E6%A8%A1%E5%9D%97%E8%B4%9F%E8%B4%A3%E7%A8%8B%E5%BA%8F%E4%B8%8E%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%A4%E4%BA%92\">1.os模块负责程序与操作系统交互</a></p>\n<p id=\"os%E7%9A%84%E9%87%8D%E7%82%B9%E6%A8%A1%E5%9D%97%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#os%E7%9A%84%E9%87%8D%E7%82%B9%E6%A8%A1%E5%9D%97%EF%BC%9A\">2.os的重点模块：</a></p>\n<p id=\"3.os%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%EF%BC%9A%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%B7%AF%E5%8A%B2%E7%9A%84%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%8A%B2%EF%BC%8C%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%B7%AF%E5%8A%B2%E7%9A%84%E7%88%B6%E8%B7%AF%E5%BE%84%E3%80%81%E7%88%B6%E7%88%B6%E8%B7%AF%E5%8A%B2%E7%AD%89-toc\" style=\"margin-left:40px;\"><a href=\"#3.os%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%EF%BC%9A%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%B7%AF%E5%8A%B2%E7%9A%84%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%8A%B2%EF%BC%8C%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%B7%AF%E5%8A%B2%E7%9A%84%E7%88%B6%E8%B7%AF%E5%BE%84%E3%80%81%E7%88%B6%E7%88%B6%E8%B7%AF%E5%8A%B2%E7%AD%89\">3.os常见操作：获取当前路劲的绝对路劲，获取当前路劲的父路径、父父路劲等</a></p>\n<p id=\"%E4%BA%94%E3%80%81sys%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81sys%E6%A8%A1%E5%9D%97\">五、sys模块</a></p>\n<p id=\"1.sys%E6%A8%A1%E5%9D%97%E8%B4%9F%E8%B4%A3%E7%A8%8B%E5%BA%8F%E4%B8%8Epython%E8%A7%A3%E9%87%8A%E5%99%A8%E8%BF%9B%E8%A1%8C%E4%BA%A4%E4%BA%92-toc\" style=\"margin-left:40px;\"><a href=\"#1.sys%E6%A8%A1%E5%9D%97%E8%B4%9F%E8%B4%A3%E7%A8%8B%E5%BA%8F%E4%B8%8Epython%E8%A7%A3%E9%87%8A%E5%99%A8%E8%BF%9B%E8%A1%8C%E4%BA%A4%E4%BA%92\">1.sys模块负责程序与python解释器进行交互</a></p>\n<p id=\"%C2%A02.sys%E9%87%8D%E7%82%B9%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A02.sys%E9%87%8D%E7%82%B9%E6%A8%A1%E5%9D%97\">2.sys重点模块</a></p>\n<p id=\"3.%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%A1%88%E4%BE%8B%EF%BC%9A%E5%AE%9E%E7%8E%B0%E8%BF%9B%E5%BA%A6%E6%9D%A1%E7%9A%84%E6%89%93%E5%8D%B0-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%A1%88%E4%BE%8B%EF%BC%9A%E5%AE%9E%E7%8E%B0%E8%BF%9B%E5%BA%A6%E6%9D%A1%E7%9A%84%E6%89%93%E5%8D%B0\">3.一个小案例：实现进度条的打印</a></p>\n<p id=\"%E5%85%ADjson%E5%92%8Cpickle%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%ADjson%E5%92%8Cpickle%E6%A8%A1%E5%9D%97\">六、json和pickle模块</a></p>\n<p id=\"%E5%BA%8F%E5%88%97%E5%8C%96-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%BA%8F%E5%88%97%E5%8C%96\">1.序列化</a></p>\n<p id=\"%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%BC%98%E7%82%B9%3A-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%BC%98%E7%82%B9%3A\">2.序列化的优点:</a></p>\n<p id=\"json%E6%A0%BC%E5%BC%8F-toc\" style=\"margin-left:40px;\"><a href=\"#json%E6%A0%BC%E5%BC%8F\">3.json格式</a></p>\n<p id=\"%E4%B8%83%E3%80%81pickle%E6%A0%BC%E5%BC%8F-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%83%E3%80%81pickle%E6%A0%BC%E5%BC%8F\">七、pickle格式</a></p>\n<p id=\"1.pickle%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:40px;\"><a href=\"#1.pickle%E7%AE%80%E4%BB%8B\">1.pickle简介</a></p>\n<p id=\"2.pickle%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#2.pickle%E6%93%8D%E4%BD%9C\">2.pickle操作</a></p>\n<p id=\"%E5%85%AB%E3%80%81hashlib%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%AB%E3%80%81hashlib%E6%A8%A1%E5%9D%97\">八、hashlib模块</a></p>\n<p id=\"hashlib%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:40px;\"><a href=\"#hashlib%E7%AE%80%E4%BB%8B\">1.hashlib简介</a></p>\n<p id=\"hash%E5%80%BC%E7%9A%84%E7%89%B9%E7%82%B9%3A-toc\" style=\"margin-left:40px;\"><a href=\"#hash%E5%80%BC%E7%9A%84%E7%89%B9%E7%82%B9%3A\">2.hash值的特点:</a></p>\n<p id=\"3.hash%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BB%A5md5%E4%B8%BA%E4%BE%8B%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#3.hash%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BB%A5md5%E4%B8%BA%E4%BE%8B%EF%BC%89\">3.hash基本操作（以md5为例）</a></p>\n<p id=\"%E6%92%9E%E5%BA%93%E7%A0%B4%E8%A7%A3hash%E7%AE%97%E6%B3%95%E5%8A%A0%E5%AF%86-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%92%9E%E5%BA%93%E7%A0%B4%E8%A7%A3hash%E7%AE%97%E6%B3%95%E5%8A%A0%E5%AF%86\">4.撞库破解hash算法加密</a></p>\n<p id=\"%E4%B9%9D%E3%80%81shutil%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B9%9D%E3%80%81shutil%E6%A8%A1%E5%9D%97\">九、shutil模块</a></p>\n<p id=\"1.shutil%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:40px;\"><a href=\"#1.shutil%E7%AE%80%E4%BB%8B\">1.shutil简介</a></p>\n<p id=\"%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6\">2.复制文件</a></p>\n<p id=\"%E7%A7%BB%E5%8A%A8%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%A7%BB%E5%8A%A8%E6%96%87%E4%BB%B6\">3.移动文件</a></p>\n<p id=\"%E8%AF%BB%E5%8F%96%E5%8E%8B%E7%BC%A9%E5%8F%8A%E5%BD%92%E6%A1%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#%E8%AF%BB%E5%8F%96%E5%8E%8B%E7%BC%A9%E5%8F%8A%E5%BD%92%E6%A1%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6\">4.读取压缩及归档压缩文件</a></p>\n<p id=\"%E8%A7%A3%E5%8E%8B%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#%E8%A7%A3%E5%8E%8B%E6%96%87%E4%BB%B6\">5.解压文件</a></p>\n<p id=\"%E5%8D%81%E3%80%81subsprocess%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E3%80%81subsprocess%E6%A8%A1%E5%9D%97\">十、subsprocess模块</a></p>\n<p id=\"subsprocess%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:40px;\"><a href=\"#subsprocess%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B\">1.subsprocess模块简介</a></p>\n<p id=\"2.subsprocess%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#2.subsprocess%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\">2.subsprocess基本操作</a></p>\n<p id=\"%E5%8D%81%E4%B8%80%E3%80%81xml%E4%B8%8Eshelve%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E4%B8%80%E3%80%81xml%E4%B8%8Eshelve%E6%A8%A1%E5%9D%97\">十一、xml与shelve模块</a></p>\n<p id=\"1.shelve%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:40px;\"><a href=\"#1.shelve%E6%A8%A1%E5%9D%97\">1.shelve模块简介</a></p>\n<p id=\"2.shelve%E6%A8%A1%E5%9D%97%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#2.shelve%E6%A8%A1%E5%9D%97%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\">2.shelve模块基本操作</a></p>\n<p id=\"2.xml%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:40px;\"><a href=\"#2.xml%E6%A8%A1%E5%9D%97\">3.xml模块</a></p>\n<p id=\"1.xml%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:40px;\"><a href=\"#1.xml%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B\">1.xml模块简介</a></p>\n<p id=\"2.xml%E6%A8%A1%E5%9D%97%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#2.xml%E6%A8%A1%E5%9D%97%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\">4.xml模块基本操作</a></p>\n<p id=\"3.%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%B7%B1%E5%88%9B%E5%BB%BAxml%E6%96%87%E6%A1%A3-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%B7%B1%E5%88%9B%E5%BB%BAxml%E6%96%87%E6%A1%A3\">5.可以自己创建xml文档</a></p>\n<p id=\"%E5%8D%81%E4%BA%8C%E3%80%81configparser%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E4%BA%8C%E3%80%81configparser%E6%A8%A1%E5%9D%97\">十二、configparser模块</a></p>\n<p id=\"1.configparser%E6%A8%A1%E5%9D%97%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C-toc\" style=\"margin-left:40px;\"><a href=\"#1.configparser%E6%A8%A1%E5%9D%97%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\">1.configparser模块基本操作</a></p>\n<p id=\"logging%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#logging%E6%A8%A1%E5%9D%97\">十三、logging模块</a></p>\n<p id=\"%E4%B8%80%E3%80%81%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%80%E3%80%81%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB\">一、日志级别</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E9%BB%98%E8%AE%A4%E7%BA%A7%E5%88%AB%E4%B8%BAwarning%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%89%93%E5%8D%B0%E5%88%B0%E7%BB%88%E7%AB%AF-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BA%8C%E3%80%81%E9%BB%98%E8%AE%A4%E7%BA%A7%E5%88%AB%E4%B8%BAwarning%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%89%93%E5%8D%B0%E5%88%B0%E7%BB%88%E7%AB%AF\">二、默认级别为warning，默认打印到终端</a></p>\n<p id=\"%E4%B8%89%20%E3%80%81%E4%B8%BAlogging%E6%A8%A1%E5%9D%97%E6%8C%87%E5%AE%9A%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%EF%BC%8C%E9%92%88%E5%AF%B9%E6%89%80%E6%9C%89logger%E6%9C%89%E6%95%88%EF%BC%8C%E6%8E%A7%E5%88%B6%E6%89%93%E5%8D%B0%E5%88%B0%E6%96%87%E4%BB%B6%E4%B8%AD-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%89%20%E3%80%81%E4%B8%BAlogging%E6%A8%A1%E5%9D%97%E6%8C%87%E5%AE%9A%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%EF%BC%8C%E9%92%88%E5%AF%B9%E6%89%80%E6%9C%89logger%E6%9C%89%E6%95%88%EF%BC%8C%E6%8E%A7%E5%88%B6%E6%89%93%E5%8D%B0%E5%88%B0%E6%96%87%E4%BB%B6%E4%B8%AD\">三 、为logging模块指定全局配置，针对所有logger有效，控制打印到文件中</a></p>\n<p id=\"%E5%9B%9B%E3%80%81logging%E6%A8%A1%E5%9D%97%E7%9A%84Formatter%EF%BC%8CHandler%EF%BC%8CLogger%EF%BC%8CFilter%E5%AF%B9%E8%B1%A1-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%9B%9B%E3%80%81logging%E6%A8%A1%E5%9D%97%E7%9A%84Formatter%EF%BC%8CHandler%EF%BC%8CLogger%EF%BC%8CFilter%E5%AF%B9%E8%B1%A1\">四、logging模块的Formatter，Handler，Logger，Filter对象</a></p>\n<p id=\"%E4%BA%94%E3%80%81Logger%E4%B8%8EHandler%E7%9A%84%E7%BA%A7%E5%88%AB-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BA%94%E3%80%81Logger%E4%B8%8EHandler%E7%9A%84%E7%BA%A7%E5%88%AB\">五、Logger与Handler的级别</a></p>\n<p id=\"%E5%85%AD%E3%80%81%E5%BA%94%E7%94%A8-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%85%AD%E3%80%81%E5%BA%94%E7%94%A8\">六、应用</a></p>\n<p id=\"1.%E5%BA%94%E7%94%A81-toc\" style=\"margin-left:80px;\"><a href=\"#1.%E5%BA%94%E7%94%A81\">1.应用1</a></p>\n<p id=\"%C2%A0%202.%E5%BA%94%E7%94%A82%EF%BC%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%A1%88%E4%BE%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%202.%E5%BA%94%E7%94%A82%EF%BC%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%A1%88%E4%BE%8B\">  2.应用2：一个简单的案例</a></p>\n<p id=\"%E5%8D%81%E5%9B%9B%E3%80%81re%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E5%9B%9B%E3%80%81re%E6%A8%A1%E5%9D%97\">十四、re模块</a></p>\n<p id=\"1.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E4%BB%8B-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E4%BB%8B\">1.正则表达式简介</a></p>\n<p id=\"2.%E5%B8%B8%E7%94%A8%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E5%B8%B8%E7%94%A8%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">2.常用匹配模式     </a></p>\n<p id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">                             </a></p>\n<p idtoc\" style=\"margin-left:40px;\"><a hrefa></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<p></p>\n<h1 id=\"%E4%B8%80%E3%80%81Time%E6%A8%A1%E5%9D%97\">一、Time模块</h1>\n<h2 id=\"1.%E6%97%B6%E9%97%B4%E6%88%B3\">1.时间戳</h2>\n<pre><code class=\"language-python\">time_stamp = time.time()\nprint(time_stamp, type(time_stamp))</code></pre>\n<h2 id=\"2.%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%B6%E9%97%B4\">2.格式化时间</h2>\n<pre><code class=\"language-python\">format_time = time.strftime(\"%Y-%m-%d %X\")\nprint(format_time, type(format_time))\n\n2022-08-31 &lt;class 'str'&gt;</code></pre>\n<h2 id=\"3.%E7%BB%93%E6%9E%84%E5%8C%96%E6%97%B6%E9%97%B4\">3.结构化时间</h2>\n<pre><code class=\"language-python\">print('本地时区的struct_time:\\n{}'.format(time.localtime()))\nprint('UTC时区的struct_time:\\n{}'.format(time.gmtime()))\n\n\n\n本地时区的struct_time:\ntime.struct_time(tm_year=2022, tm_mon=8, tm_mday=31, tm_hour=16, tm_min=14, tm_sec=41, tm_wday=2, tm_yday=243, tm_isdst=0)\nUTC时区的struct_time:\ntime.struct_time(tm_year=2022, tm_mon=8, tm_mday=31, tm_hour=8, tm_min=14, tm_sec=41, tm_wday=2, tm_yday=243, tm_isdst=0)</code></pre>\n<h2 id=\"%C2%A04.%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%EF%BC%9A%E8%AE%A1%E7%AE%97%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E7%9A%84%E6%97%B6%E9%97%B4\">4.常见用法：计算程序执行的时间</h2>\n<pre><code class=\"language-python\"># 推迟指定的时间运行，单位为秒\nstart = time.time()\ntime.sleep(3)\nend = time.time()\n \nprint(end-start)</code></pre>\n<p></p>\n<h1 id=\"%E4%BA%8C%E3%80%81datetime%E6%A8%A1%E5%9D%97\">二、datetime模块</h1>\n<p>该模块可以看成时间的加减模块</p>\n<pre><code class=\"language-python\"># 返回当前时间\nprint(datetime.datetime.now())\n\n# 当前时间+3天\nprint(datetime.datetime.now() + datetime.timedelta(3))\n# 当前时间-3天\nprint(datetime.datetime.now() + datetime.timedelta(-3))\n# 当前时间+30分钟\nprint(datetime.datetime.now() + datetime.timedelta(minutes=30))\n# 时间替换\nc_time = datetime.datetime.now()\nprint(c_time.replace(minute=20, hour=5, second=13))\n\nprint(datetime.date.fromtimestamp(time.time()))  #换算成年月日\n2019-03-07</code></pre>\n<h1 id=\"%E4%B8%89%E3%80%81random%E6%A8%A1%E5%9D%97\">三、random模块</h1>\n<pre><code class=\"language-python\"># 大于0且小于1之间的小数\nprint(random.random())\n# 大于等于1且小于等于3之间的整数\nprint(random.randint(1, 3))\n# 大于1小于3的小数，如1.927109612082716\nprint(random.uniform(1, 3))\n# 列表内的任意一个元素，即1或者‘23’或者[4,5]\nprint(random.choice([1, '23', [4, 5]]))\n1\n\n------------smaple-------比较常用在数据导入的时候像随机选择数据\n# random.sample([], n)，列表元素任意n个元素的组合，示例n=2\nprint(random.sample([1, '23', [4, 5]], 2))\n[[4, 5], '23']\n\nlis = [1, 3, 5, 7, 9]\n# 打乱l的顺序,相当于\"洗牌\"\nrandom.shuffle(lis)\nprint(lis)\n[1, 3, 9, 7, 5]</code></pre>\n<h1 id=\"%E5%9B%9B%E3%80%81os%E6%A8%A1%E5%9D%97\">四、os模块</h1>\n<h2 id=\"1.os%E6%A8%A1%E5%9D%97%E8%B4%9F%E8%B4%A3%E7%A8%8B%E5%BA%8F%E4%B8%8E%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%A4%E4%BA%92\">1.os模块负责程序与操作系统交互</h2>\n<p class=\"img-center\"><img alt=\"\" height=\"740\" src=\"image\\f541d27c920145cebbacefd4de49e87d.png\" width=\"1063\"/></p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"739\" src=\"image\\b5c7e44b1bf94fbca39e5a1bfec6c3f1.png\" width=\"1062\"/></p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"414\" src=\"image\\a888d1986536435aac1251b0454e1b1c.png\" width=\"1067\"/></p>\n<h2 id=\"os%E7%9A%84%E9%87%8D%E7%82%B9%E6%A8%A1%E5%9D%97%EF%BC%9A\">2.os的重点模块：</h2>\n<p><strong>os.getcwd()</strong></p>\n<p><strong>os.path.abspath('D:\\python_base')\\</strong></p>\n<p><strong>os.path.split('C:\\\\WINDOWS\\\\system32\\\\cmd.exe')</strong></p>\n<p><strong>os.path.join('C:\\\\WINDOWS\\\\system32\\\\cmd.exe','hello')</strong></p>\n<p><strong>os.path.getsize('C:\\\\WINDOWS\\\\system32\\\\cmd.exe')</strong></p>\n<h2 id=\"3.os%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%EF%BC%9A%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%B7%AF%E5%8A%B2%E7%9A%84%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%8A%B2%EF%BC%8C%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%B7%AF%E5%8A%B2%E7%9A%84%E7%88%B6%E8%B7%AF%E5%BE%84%E3%80%81%E7%88%B6%E7%88%B6%E8%B7%AF%E5%8A%B2%E7%AD%89\"><strong>3.os常见操作：获取当前路劲的绝对路劲，获取当前路劲的父路径、父父路劲等</strong></h2>\n<pre><code class=\"language-python\"># -*- coding: utf-8 -*-\n\n'''\n@Time    : 2022/09/01 10:25\n@Author  : Rice\n@CSDN : C_小米同学\n@FileName: test.py\n'''\nimport os\nprint(os.path.abspath(__file__)) #返回当前文件的绝对路劲（路径+文件名）\nprint(os.path.dirname(os.path.abspath(__file__))) #返回当前文件的父路径\nprint(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))#返回当前文件的父路径的父路径\nprint(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))</code></pre>\n<p></p>\n<h1 id=\"%E4%BA%94%E3%80%81sys%E6%A8%A1%E5%9D%97\">五、sys模块</h1>\n<h2 id=\"1.sys%E6%A8%A1%E5%9D%97%E8%B4%9F%E8%B4%A3%E7%A8%8B%E5%BA%8F%E4%B8%8Epython%E8%A7%A3%E9%87%8A%E5%99%A8%E8%BF%9B%E8%A1%8C%E4%BA%A4%E4%BA%92\">1.sys模块负责程序与python解释器进行交互</h2>\n<p class=\"img-center\"><img alt=\"\" height=\"414\" src=\"image\\92ad824f361c40289bbe537ce85d30e3.png\" width=\"1067\"/></p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"485\" src=\"image\\f1495df49e954a2192522b59552441dd.png\" width=\"850\"/></p>\n<h2 id=\"%C2%A02.sys%E9%87%8D%E7%82%B9%E6%A8%A1%E5%9D%97\"><strong>2.sys重点模块</strong></h2>\n<p><strong>sys.path：返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值</strong></p>\n<p><strong>sys.version:获取Python解释程序的版本信息</strong></p>\n<p><strong>sys.exit(n):退出程序，正常退出时exit(0)</strong></p>\n<h2 id=\"3.%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%A1%88%E4%BE%8B%EF%BC%9A%E5%AE%9E%E7%8E%B0%E8%BF%9B%E5%BA%A6%E6%9D%A1%E7%9A%84%E6%89%93%E5%8D%B0\"><strong>3.一个小案例：实现进度条的打印</strong></h2>\n<pre><code class=\"language-python\">#=========知识储备==========\n#进度条的效果\n[#             ]\n[##            ]\n[###           ]\n[####          ]\n\n#指定宽度\nprint('[%-15s]' %'#')\nprint('[%-15s]' %'##')\nprint('[%-15s]' %'###')\nprint('[%-15s]' %'####')\n\n#打印%\nprint('%s%%' %(100)) #第二个%号代表取消第一个%的特殊意义\n\n#可传参来控制宽度\nprint('[%%-%ds]' %50) #[%-50s]\nprint(('[%%-%ds]' %50) %'#')\nprint(('[%%-%ds]' %50) %'##')\nprint(('[%%-%ds]' %50) %'###')\n\n\n#=========实现打印进度条函数==========\nimport sys\nimport time\n\ndef progress(percent,width=50):\n    if percent &gt;= 1:\n        percent=1\n    show_str=('[%%-%ds]' %width) %(int(width*percent)*'#')\n    print('\\r%s %d%%' %(show_str,int(100*percent)),file=sys.stdout,flush=True,end='')\n\n\n#=========应用==========\ndata_size=1025\nrecv_size=0\nwhile recv_size &lt; data_size:\n    time.sleep(0.1) #模拟数据的传输延迟\n    recv_size+=1024 #每次收1024\n\n    percent=recv_size/data_size #接收的比例\n    progress(percent,width=70) #进度条的宽度70</code></pre>\n<h1 id=\"%E5%85%ADjson%E5%92%8Cpickle%E6%A8%A1%E5%9D%97\">六、json和pickle模块</h1>\n<h2 id=\"%E5%BA%8F%E5%88%97%E5%8C%96\">1.序列化</h2>\n<p>把对象(变量)从内存中变成可存储或传输的过程称之为序列化,在Python中叫pickling,在其他语言中也被称之为serialization, marshalling, flattening.</p>\n<h2 id=\"%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%BC%98%E7%82%B9%3A\">2.序列化的优点:</h2>\n<p>1.<span style=\"color:#fe2c24;\"><strong>持久保存状态</strong></span>:内存是无法永久保存数据的,当程序运行了一段时间,我们断电或者重启程序,内存中关于这个程序的之前一段时间的数据(有结构)都被清空了。但是在断电或重启程序之前将程序当前内存中所有的数据都保存下来(保存到文件中),以便于下次程序执行能够从文件中载入之前的数据，然后继续执行,这就是序列化。</p>\n<p>2.<span style=\"color:#fe2c24;\"><strong>跨平台数据交互</strong></span>:序列化时不仅可以把序列化后的内容写入磁盘,还可以通过网络传输到别的机器上,如果收发的双方约定好实用一种序列化的格式,那么便打破了平台/语言差异化带来的限制,实现了跨平台数据交互。</p>\n<h2 id=\"json%E6%A0%BC%E5%BC%8F\">3.json格式</h2>\n<p>Json序列化并不是python独有的,json序列化在java等语言中也会涉及到,因此使用json序列化能够达到跨平台传输数据的目的。ison数据举型和python数据举型对应关系表</p>\n<p class=\"img-center\"><img alt=\"\" height=\"426\" src=\"image\\09246bfa9710423c8d7a693f90000cbc.png\" width=\"219\"/></p>\n<p></p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"684\" src=\"image\\659aa4bdb908421c83faccd98f075791.png\" width=\"1110\"/></p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"616\" src=\"image\\3e9aa13c4d434033978382e563ec855d.png\" width=\"1200\"/></p>\n<p class=\"img-center\"><img alt=\"\" height=\"591\" src=\"image\\97beede591044f9cbecfa2ec3d8f07c5.png\" width=\"1200\"/></p>\n<h1 id=\"%E4%B8%83%E3%80%81pickle%E6%A0%BC%E5%BC%8F\">七、pickle格式</h1>\n<h2 id=\"1.pickle%E7%AE%80%E4%BB%8B\">1.pickle简介</h2>\n<p>Pickle序列化和所有其他编程语言特有的序列化问题 样,它只能用于Python,并且可能不同版本的Python彼此都不兼容,因此,只能用Pickle保存那些不重要的数据,即不能成功地反序列化也没关系。<span style=\"color:#fe2c24;\"><strong>但是pickle的好处是可以存储Python中的所有的数据类型,包括对象,而json不可以</strong></span>。pickle模块序列化和反序列化的过程如下图所示</p>\n<p class=\"img-center\"><img alt=\"\" height=\"590\" src=\"image\\c4c7ee343cff43aab3b0fc973b1ea267.png\" width=\"1110\"/></p>\n<h2 id=\"2.pickle%E6%93%8D%E4%BD%9C\">2.pickle操作</h2>\n<p class=\"img-center\"><img alt=\"\" height=\"562\" src=\"image\\f2d59240fd384eefadac73ca037c2228.png\" width=\"1200\"/></p>\n<p class=\"img-center\"><img alt=\"\" height=\"338\" src=\"image\\d46afb432fc847259b0998f48b3016dd.png\" width=\"935\"/></p>\n<p></p>\n<h1 id=\"%E5%85%AB%E3%80%81hashlib%E6%A8%A1%E5%9D%97\">八、hashlib模块</h1>\n<h2 id=\"hashlib%E7%AE%80%E4%BB%8B\">1.hashlib简介</h2>\n<p>hash是种算法(Python3.版本里使用hashlib模块代替了md5模块和sha模块,主要提供SHA1, SHA224, SHA256, SHA384, SHA512, MD5算法),<span style=\"color:#fe2c24;\"><strong>该算法接受传入的内容,经过运算得到一串hash值。</strong></span></p>\n<h2 id=\"hash%E5%80%BC%E7%9A%84%E7%89%B9%E7%82%B9%3A\"><strong>2.hash值的特点:</strong></h2>\n<p>1.只要传入的内容一样,得到的hash值一样,可用于非明文密码传输时密码校验</p>\n<p>2.不能由hash值返解成内容,即可以保证非明文密码的安全性</p>\n<p>3.只要使用的hash算法不变,无论校验的内容有多大,得到的hash值长度是固定的，可以用于对文本的哈希处理hash算法其实可以看成如下图所示的一座工厂,工厂接收你送来的原材料,经过加工返回的产品就是hash值</p>\n<p class=\"img-center\"><img alt=\"\" height=\"466\" src=\"image\\a28ecfc091354f78b9fe1d473d6a44fa.png\" width=\"828\"/></p>\n<h2 id=\"3.hash%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BB%A5md5%E4%B8%BA%E4%BE%8B%EF%BC%89\">3.hash基本操作（以md5为例）</h2>\n<p class=\"img-center\"><img alt=\"\" height=\"793\" src=\"image\\1558b7866d384443aa30b65344b7818c.png\" width=\"932\"/></p>\n<h2 id=\"%E6%92%9E%E5%BA%93%E7%A0%B4%E8%A7%A3hash%E7%AE%97%E6%B3%95%E5%8A%A0%E5%AF%86\">4.撞库破解hash算法加密</h2>\n<p>hash加密算法虽然看起来很厉害,但是他是存在一定缺陷的,即可以通过撞库可以反解,如下代码所示。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"783\" src=\"image\\c7925f7784a842eb99488be671f2a7dc.png\" width=\"829\"/></p>\n<h1 id=\"%E4%B9%9D%E3%80%81shutil%E6%A8%A1%E5%9D%97\">九、shutil模块</h1>\n<h2 id=\"1.shutil%E7%AE%80%E4%BB%8B\">1.shutil简介</h2>\n<p>相比<code>os</code>模块，<code>shutil</code>模块用于文件和目录的高级处理，提供了支持文件赋值、移动、删除、压缩和解压等功能。 </p>\n<h2 id=\"%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6\">2.复制文件</h2>\n<p><strong>shutil模块的主要作用是复制文件，七种实现方式：</strong></p>\n<p>1.shutil.copyfileobj(file1,file2)覆盖复制<br/>     将file1的内容覆盖file2，file1、file2表示打开的文件对象。</p>\n<p>2.shutil.copyfile(file1,file2)覆盖复制<br/>     也是覆盖，但是无须打开文件，直接用文件名进行覆盖（其源码还是调用的copyfileobj）。</p>\n<p>3.  shutil.copymode(file1,file2)权限复制<br/>     仅复制文件权限，不更改文件内容、组和用户，无返回对象。</p>\n<p>4.shutil.copystart(file1,file2)状态复制<br/>     复制文件的所有状态信息，包括权限、组、用户和时间等，无返回对象。</p>\n<p>5.shutil.copy(file1,file2)内容和权限复制<br/>     复制文件的内容和权限，相当于先执行了copyfile再执行了copysmode。</p>\n<p>6. shutil.copy2(file1,file2)内容和权限复制<br/>     复制文件的内容及所有状态信息，相当于先执行了copyfile再执行了copystart。</p>\n<p>7. shutil.copytree()递归复制<br/>     递归地复制文件内容及状态信息</p>\n<h2 id=\"%E7%A7%BB%E5%8A%A8%E6%96%87%E4%BB%B6\">3.移动文件</h2>\n<p><strong>使用函数<code>shutil.move()</code>函数可以递归地移动文件或重命名，并返回目标，若目标是现有目录则src再当前目录移动；若目标已经存在且不是目录，则可能会被覆盖。</strong></p>\n<h2 id=\"%E8%AF%BB%E5%8F%96%E5%8E%8B%E7%BC%A9%E5%8F%8A%E5%BD%92%E6%A1%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6\">4.读取压缩及归档压缩文件</h2>\n<p><strong>使用函数shutil.make_archive()创建归档文件，并返回归档后的名称。</strong><br/> 语法如下：<br/> shutil.make_archive(base_name,format[,root_dir[,base_dir[,verbose[,dry_run[,owner[,group[,logger]]]]]]])</p>\n<p>1.base_name为需要创建的文件名，包括路径<br/> 2.format表示压缩格式，可选zip、tar或bztar等<br/> 3.root_dir为归档的目录</p>\n<h2 id=\"%E8%A7%A3%E5%8E%8B%E6%96%87%E4%BB%B6\">5.解压文件</h2>\n<p><strong>使用函数<code>shutil.unpack_archive(filename[,extract_dir[,format]])</code>分析拆档。</strong></p>\n<p>1.filename是归档的完整路径</p>\n<p>2.extract_dir是解压归档的目标目录名称</p>\n<p>3.format是解压文件的格式</p>\n<h1 id=\"%E5%8D%81%E3%80%81subsprocess%E6%A8%A1%E5%9D%97\">十、subsprocess模块</h1>\n<h2 id=\"subsprocess%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B\">1.subsprocess模块简介</h2>\n<p>subprocess是python内置的模块，<span style=\"color:#fe2c24;\"><strong>这个模块中的Popen可以查看用户输入的命令行是否存在</strong></span></p>\n<p>1.如果存在，把内容写入到stdout管道中</p>\n<p>2.如果不存在，把信息写入到stderr管道</p>\n<p>需要注意的是，这个模块的返回结果只能让开发者看一次，如果想多次查看，需要在第一次输出的时候，把所有信息写入到变量中。</p>\n<h2 id=\"2.subsprocess%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\">2.subsprocess基本操作</h2>\n<p><strong>Popen基本格式：subprocess.Popen(‘命令’, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</strong></p>\n<blockquote>\n<p>shell=True 表示要在终端中运行的命令</p>\n<p>stdout=sbuprocess.PIPE 表示当命令存在的时候，把结果写入到stdout管道</p>\n<p>stderr=sbuprocess.PIPE 表示当命令不存在的时候，把结果吸入到stderr管道</p>\n</blockquote>\n<pre><code class=\"language-python\">import subprocess\n\nr = subprocess.Popen('wget -q -o xxx', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\nprint(r.stdout.read().decode('utf8'))\nprint(r.stderr.read().decode('utf8'))\n</code></pre>\n<h1 id=\"%E5%8D%81%E4%B8%80%E3%80%81xml%E4%B8%8Eshelve%E6%A8%A1%E5%9D%97\">十一、xml与shelve模块</h1>\n<h2 id=\"1.shelve%E6%A8%A1%E5%9D%97\">1.shelve模块简介</h2>\n<p>shelve类似于一个key-value数据库，可以很方便的用来保存Python的内存对象，其内部使用pickle来序列化数据，</p>\n<p>简单来说，使用者可以将一个列表、字典、或者用户自定义的类实例保存到shelve中，下次需要用的时候直接取出来，</p>\n<p>就是一个Python内存对象，不需要像传统数据库一样，先取出数据，然后用这些数据重新构造一遍所需要的对象。</p>\n<h2 id=\"2.shelve%E6%A8%A1%E5%9D%97%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\">2.shelve模块基本操作</h2>\n<pre><code class=\"language-python\">\nimport shelve\nimport datetime\n\nd = shelve.open('test1')  # 打开一个文件\ninfo = {\n    \"age\":23,\n    \"color\":\"red\"\n}\n\nname = [\"tom\", \"bob\", \"lili\"]\n\nd[\"name\"] = name  # 持久化列表\nd[\"info\"] = info  # 持久化字典\nd[\"data\"] = datetime.datetime.now()\n\nd.close()</code></pre>\n<pre><code class=\"language-python\">d = shelve.open('test1')  # 打开一个文件\nprint(d.get(\"name\"))\nprint(d.get(\"info\"))\nprint(d.get(\"data\"))</code></pre>\n<h2 id=\"2.xml%E6%A8%A1%E5%9D%97\">3.xml模块</h2>\n<h2 id=\"1.xml%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B\">1.xml模块简介</h2>\n<p><strong>xml协议在各种语言里的都是支持的，在python中可以用以下模块操作xml </strong></p>\n<h2 id=\"2.xml%E6%A8%A1%E5%9D%97%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><strong>4.xml模块基本操作</strong></h2>\n<p>我们举一个例子：我们先新建一个xml文件（命名为xmltest.xml），内容如下 ：</p>\n<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;data&gt;\n    &lt;country name=\"Liechtenstein\"&gt;\n        &lt;rank updated=\"yes\"&gt;2&lt;/rank&gt;\n        &lt;year&gt;2008&lt;/year&gt;\n        &lt;gdppc&gt;141100&lt;/gdppc&gt;\n        &lt;neighbor name=\"Austria\" direction=\"E\"/&gt;\n        &lt;neighbor name=\"Switzerland\" direction=\"W\"/&gt;\n    &lt;/country&gt;\n    &lt;country name=\"Singapore\"&gt;\n        &lt;rank updated=\"yes\"&gt;5&lt;/rank&gt;\n        &lt;year&gt;2011&lt;/year&gt;\n        &lt;gdppc&gt;59900&lt;/gdppc&gt;\n        &lt;neighbor name=\"Malaysia\" direction=\"N\"/&gt;\n    &lt;/country&gt;\n    &lt;country name=\"Panama\"&gt;\n        &lt;rank updated=\"yes\"&gt;69&lt;/rank&gt;\n        &lt;year&gt;2011&lt;/year&gt;\n        &lt;gdppc&gt;13600&lt;/gdppc&gt;\n        &lt;neighbor name=\"Costa Rica\" direction=\"W\"/&gt;\n        &lt;neighbor name=\"Colombia\" direction=\"E\"/&gt;\n    &lt;/country&gt;\n&lt;/data&gt;</code></pre>\n<p><strong>我们先看三个最基本的操作：</strong></p>\n<pre><code class=\"language-python\">\n\n# print(root.iter('year')) #全文搜索\n# print(root.find('country')) #在root的子节点找，只找一个\n# print(root.findall('country')) #在root的子节点找，找所有\n\n</code></pre>\n<p></p>\n<pre><code class=\"language-python\">import xml.etree.ElementTree as ET\n \ntree = ET.parse(\"xmltest.xml\")\nroot = tree.getroot()\nprint(root.tag)\n \n#遍历xml文档\nfor child in root:\n    print('========&gt;',child.tag,child.attrib,child.attrib['name'])\n    for i in child:\n        print(i.tag,i.attrib,i.text)\n \n#只遍历year 节点\nfor node in root.iter('year'):\n    print(node.tag,node.text)\n#---------------------------------------\n\nimport xml.etree.ElementTree as ET\n \ntree = ET.parse(\"xmltest.xml\")\nroot = tree.getroot()\n \n#修改\nfor node in root.iter('year'):\n    new_year=int(node.text)+1\n    node.text=str(new_year)\n    node.set('updated','yes')\n    node.set('version','1.0')\ntree.write('test.xml')\n \n \n#删除node\nfor country in root.findall('country'):\n   rank = int(country.find('rank').text)\n   if rank &gt; 50:\n     root.remove(country)\n \ntree.write('output.xml')</code></pre>\n<pre><code class=\"language-python\">#在country内添加（append）节点year2\nimport xml.etree.ElementTree as ET\ntree = ET.parse(\"a.xml\")\nroot=tree.getroot()\nfor country in root.findall('country'):\n    for year in country.findall('year'):\n        if int(year.text) &gt; 2000:\n            year2=ET.Element('year2')\n            year2.text='新年'\n            year2.attrib={'update':'yes'}\n            country.append(year2) #往country节点下添加子节点\n\ntree.write('a.xml.swap')</code></pre>\n<h2 id=\"3.%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%B7%B1%E5%88%9B%E5%BB%BAxml%E6%96%87%E6%A1%A3\">5.可以自己创建xml文档</h2>\n<pre><code class=\"language-python\">import xml.etree.ElementTree as ET\n \n \nnew_xml = ET.Element(\"namelist\")\nname = ET.SubElement(new_xml,\"name\",attrib={\"enrolled\":\"yes\"})\nage = ET.SubElement(name,\"age\",attrib={\"checked\":\"no\"})\nsex = ET.SubElement(name,\"sex\")\nsex.text = '33'\nname2 = ET.SubElement(new_xml,\"name\",attrib={\"enrolled\":\"no\"})\nage = ET.SubElement(name2,\"age\")\nage.text = '19'\n \net = ET.ElementTree(new_xml) #生成文档对象\net.write(\"test.xml\", encoding=\"utf-8\",xml_declaration=True)\n \nET.dump(new_xml) #打印生成的格式</code></pre>\n<p></p>\n<h1 id=\"%E5%8D%81%E4%BA%8C%E3%80%81configparser%E6%A8%A1%E5%9D%97\">十二、configparser模块</h1>\n<h2 id=\"1.configparser%E6%A8%A1%E5%9D%97%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\">1.configparser模块基本操作</h2>\n<p>我们先创建一个配置文件（一后缀是.ini/.confg）</p>\n<p>配置文件如下</p>\n<p class=\"img-center\"><img alt=\"\" height=\"438\" src=\"image\\2e8b4dd78ff949809a54213689542b41.png\" width=\"669\"/></p>\n<p>读取操作：</p>\n<pre><code class=\"language-python\">import configparser\n\nconfig=configparser.ConfigParser()\nconfig.read('a.cfg')\n\n#查看所有的标题\nres=config.sections() #['section1', 'section2']\nprint(res)\n\n#查看标题section1下所有key=value的key\noptions=config.options('section1')\nprint(options) #['k1', 'k2', 'user', 'age', 'is_admin', 'salary']\n\n#查看标题section1下所有key=value的(key,value)格式\nitem_list=config.items('section1')\nprint(item_list) #[('k1', 'v1'), ('k2', 'v2'), ('user', 'egon'), ('age', '18'), ('is_admin', 'true'), ('salary', '31')]\n\n#查看标题section1下user的值=&gt;字符串格式\nval=config.get('section1','user')\nprint(val) #egon\n\n#查看标题section1下age的值=&gt;整数格式\nval1=config.getint('section1','age')\nprint(val1) #18\n\n#查看标题section1下is_admin的值=&gt;布尔值格式\nval2=config.getboolean('section1','is_admin')\nprint(val2) #True\n\n#查看标题section1下salary的值=&gt;浮点型格式\nval3=config.getfloat('section1','salary')\nprint(val3) #31.0</code></pre>\n<p><strong>我们也有一些修改操作：</strong></p>\n<pre><code class=\"language-python\">import configparser\n\nconfig=configparser.ConfigParser()\nconfig.read('a.cfg',encoding='utf-8')\n\n\n#删除整个标题section2\nconfig.remove_section('section2')\n\n#删除标题section1下的某个k1和k2\nconfig.remove_option('section1','k1')\nconfig.remove_option('section1','k2')\n\n#判断是否存在某个标题\nprint(config.has_section('section1'))\n\n#判断标题section1下是否有user\nprint(config.has_option('section1',''))\n\n\n#添加一个标题\nconfig.add_section('egon')\n\n#在标题egon下添加name=egon,age=18的配置\nconfig.set('egon','name','egon')\nconfig.set('egon','age',18) #报错,必须是字符串\n\n\n#最后将修改的内容写入文件,完成最终的修改\nconfig.write(open('a.cfg','w'))</code></pre>\n<p><strong>基于上述方法，添加一个ini文档：</strong></p>\n<pre><code class=\"language-python\">import configparser\n  \nconfig = configparser.ConfigParser()\nconfig[\"DEFAULT\"] = {'ServerAliveInterval': '45',\n                      'Compression': 'yes',\n                     'CompressionLevel': '9'}\n  \nconfig['bitbucket.org'] = {}\nconfig['bitbucket.org']['User'] = 'hg'\nconfig['topsecret.server.com'] = {}\ntopsecret = config['topsecret.server.com']\ntopsecret['Host Port'] = '50022'     # mutates the parser\ntopsecret['ForwardX11'] = 'no'  # same here\nconfig['DEFAULT']['ForwardX11'] = 'yes'\nwith open('example.ini', 'w') as configfile:\n   config.write(configfile)</code></pre>\n<p></p>\n<h1 id=\"logging%E6%A8%A1%E5%9D%97\">十三、logging模块</h1>\n<h2 id=\"%E4%B8%80%E3%80%81%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB\">一、日志级别</h2>\n<pre><code class=\"language-python\">CRITICAL = 50 #FATAL = CRITICAL\nERROR = 40\nWARNING = 30 #WARN = WARNING\nINFO = 20\nDEBUG = 10\nNOTSET = 0 #不设置</code></pre>\n<h2 id=\"%E4%BA%8C%E3%80%81%E9%BB%98%E8%AE%A4%E7%BA%A7%E5%88%AB%E4%B8%BAwarning%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%89%93%E5%8D%B0%E5%88%B0%E7%BB%88%E7%AB%AF\">二、<strong>默认级别为warning，默认打印到终端</strong></h2>\n<p></p>\n<pre><code class=\"language-python\">import logging\n\nlogging.debug('调试debug')\nlogging.info('消息info')\nlogging.warning('警告warn')\nlogging.error('错误error')\nlogging.critical('严重critical')\n\n'''\nWARNING:root:警告warn\nERROR:root:错误error\nCRITICAL:root:严重critical\n'''</code></pre>\n<h2 id=\"%E4%B8%89%20%E3%80%81%E4%B8%BAlogging%E6%A8%A1%E5%9D%97%E6%8C%87%E5%AE%9A%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%EF%BC%8C%E9%92%88%E5%AF%B9%E6%89%80%E6%9C%89logger%E6%9C%89%E6%95%88%EF%BC%8C%E6%8E%A7%E5%88%B6%E6%89%93%E5%8D%B0%E5%88%B0%E6%96%87%E4%BB%B6%E4%B8%AD\"><strong>三 、为logging模块指定全局配置，针对所有logger有效，控制打印到文件中</strong></h2>\n<blockquote>\n<p></p>\n<pre>可在<span style=\"color:#fe2c24;\"><strong>logging.basicConfig()</strong></span>函数中可通过具体参数来更改logging模块默认行为，可用参数有\nfilename：用指定的文件名创建FiledHandler（后边会具体讲解handler的概念），这样日志会被存储在指定的文件中。\nfilemode：文件打开方式，在指定了filename时使用这个参数，默认值为“a”还可指定为“w”。\nformat：指定handler使用的日志显示格式。\ndatefmt：指定日期时间格式。\nlevel：设置rootlogger（后边会讲解具体概念）的日志级别\nstream：用指定的stream创建StreamHandler。可以指定输出到sys.stderr,sys.stdout或者文件，默认为sys.stderr。若同时列出了filename和stream两个参数，则stream参数会被忽略。\n\n\nformat参数中可能用到的格式化串：\n%(name)s Logger的名字\n%(levelno)s 数字形式的日志级别\n%(levelname)s 文本形式的日志级别\n%(pathname)s 调用日志输出函数的模块的完整路径名，可能没有\n%(filename)s 调用日志输出函数的模块的文件名\n%(module)s 调用日志输出函数的模块名\n%(funcName)s 调用日志输出函数的函数名\n%(lineno)d 调用日志输出函数的语句所在的代码行\n%(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示\n%(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数\n%(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒\n%(thread)d 线程ID。可能没有\n%(threadName)s 线程名。可能没有\n%(process)d 进程ID。可能没有\n%(message)s用户输出的消息\n</pre>\n</blockquote>\n<pre><code class=\"language-python\">#========使用\nimport logging\nlogging.basicConfig(filename='access.log',\n                    format='%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s',\n                    datefmt='%Y-%m-%d %H:%M:%S %p',\n                    level=10)\n\nlogging.debug('调试debug')\nlogging.info('消息info')\nlogging.warning('警告warn')\nlogging.error('错误error')\nlogging.critical('严重critical')\n</code></pre>\n<pre><code class=\"language-python\">#========结果\naccess.log内容:\n2017-07-28 20:32:17 PM - root - DEBUG -test:  调试debug\n2017-07-28 20:32:17 PM - root - INFO -test:  消息info\n2017-07-28 20:32:17 PM - root - WARNING -test:  警告warn\n2017-07-28 20:32:17 PM - root - ERROR -test:  错误error\n2017-07-28 20:32:17 PM - root - CRITICAL -test:  严重critical\n</code></pre>\n<h2 id=\"%E5%9B%9B%E3%80%81logging%E6%A8%A1%E5%9D%97%E7%9A%84Formatter%EF%BC%8CHandler%EF%BC%8CLogger%EF%BC%8CFilter%E5%AF%B9%E8%B1%A1\"><strong>四、logging模块的Formatter，Handler，Logger，Filter对象</strong></h2>\n<p> 我们需要记住的几个参数：</p>\n<blockquote>\n<pre>1.logger：产生日志的对象\n\n2.Filter：过滤日志的对象\n\n3.Handler：接收日志然后控制打印到不同的地方，FileHandler用来打印到文件中，StreamHandler用来打印到终端\n\n4.Formatter对象：可以定制不同的日志格式对象，然后绑定给不同的Handler对象使用，以此来控制不同的Handler的日志格式</pre>\n</blockquote>\n<p></p>\n<pre><code class=\"language-python\">'''\ncritical=50\nerror =40\nwarning =30\ninfo = 20\ndebug =10\n'''\n\n\nimport logging\n\n#1、logger对象：负责产生日志，然后交给Filter过滤，然后交给不同的Handler输出\nlogger=logging.getLogger(__file__)\n\n#2、Filter对象：不常用，略\n\n#3、Handler对象：接收logger传来的日志，然后控制输出\nh1=logging.FileHandler('t1.log') #打印到文件\nh2=logging.FileHandler('t2.log') #打印到文件\nh3=logging.StreamHandler() #打印到终端\n\n#4、Formatter对象：日志格式\nformmater1=logging.Formatter('%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s',  #打印到文件\n                    datefmt='%Y-%m-%d %H:%M:%S %p',) \n\nformmater2=logging.Formatter('%(asctime)s :  %(message)s',  #打印到文件\n                    datefmt='%Y-%m-%d %H:%M:%S %p',)\n\nformmater3=logging.Formatter('%(name)s %(message)s',)  #打印到终端\n\n\n#5、为Handler对象绑定格式\nh1.setFormatter(formmater1)\nh2.setFormatter(formmater2)\nh3.setFormatter(formmater3)\n\n#6、将Handler添加给logger并设置日志级别\nlogger.addHandler(h1)\nlogger.addHandler(h2)\nlogger.addHandler(h3)\nlogger.setLevel(10)\n\n#7、测试\nlogger.debug('debug')\nlogger.info('info')\nlogger.warning('warning')\nlogger.error('error')\nlogger.critical('critical')</code></pre>\n<h2 id=\"%E4%BA%94%E3%80%81Logger%E4%B8%8EHandler%E7%9A%84%E7%BA%A7%E5%88%AB\"><strong>五、Logger与Handler的级别</strong></h2>\n<p>logger是第一级过滤，然后才能到handler，我们可以给logger和handler同时设置level，但是需要 是               <strong>                              </strong>                                                                                                            </p>\n<pre><code class=\"hljs\">import logging\n\n\nform=logging.Formatter('%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s',\n                    datefmt='%Y-%m-%d %H:%M:%S %p',)\n\nch=logging.StreamHandler()\n\nch.setFormatter(form)\n# ch.setLevel(10)\nch.setLevel(0)\n\nl1=logging.getLogger('root')\n# l1.setLevel(20)\nl1.setLevel(10)\nl1.addHandler(ch)  #发送的权限要在接收的权限里面，也就是发送的权限要比接收的权限要小\n\nl1.debug('l1 debug')</code></pre>\n<h2 id=\"%E5%85%AD%E3%80%81%E5%BA%94%E7%94%A8\">六、应用</h2>\n<h3 id=\"1.%E5%BA%94%E7%94%A81\">1.应用1</h3>\n<p> ·我们先写一个setting.py文件，来配置loger</p>\n<pre><code class=\"language-python\"># -*- coding: utf-8 -*-\n\n'''\n@Time    : 2022/09/01 14:45\n@Author  : Rice\n@CSDN : C_小米同学\n@FileName: setting.py\n'''\n\"\"\"\nlogging配置\n\"\"\"\n\nimport os\n\n# 1、定义三种日志输出格式，日志中可能用到的格式化串如下\n# %(name)s Logger的名字\n# %(levelno)s 数字形式的日志级别\n# %(levelname)s 文本形式的日志级别\n# %(pathname)s 调用日志输出函数的模块的完整路径名，可能没有\n# %(filename)s 调用日志输出函数的模块的文件名\n# %(module)s 调用日志输出函数的模块名\n# %(funcName)s 调用日志输出函数的函数名\n# %(lineno)d 调用日志输出函数的语句所在的代码行\n# %(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示\n# %(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数\n# %(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒\n# %(thread)d 线程ID。可能没有\n# %(threadName)s 线程名。可能没有\n# %(process)d 进程ID。可能没有\n# %(message)s用户输出的消息\n\n# 2、强调：其中的%(name)s为getlogger时指定的名字\nstandard_format = '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]' \\\n                  '[%(levelname)s][%(message)s]'\n\nsimple_format = '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'\n\ntest_format = '%(asctime)s] %(message)s'\n\n# 3、日志配置字典\nLOGGING_DIC = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'standard': {\n            'format': standard_format\n        },\n        'simple': {\n            'format': simple_format\n        },\n        'test': {\n            'format': test_format\n        },\n    },\n    'filters': {},\n    'handlers': {\n        #打印到终端的日志\n        'console': {\n            'level': 'DEBUG',\n            'class': 'logging.StreamHandler',  # 打印到屏幕\n            'formatter': 'simple'\n        },\n        #打印到文件的日志,收集info及以上的日志\n        'default': {\n            'level': 'DEBUG',\n            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件,日志轮转\n            'formatter': 'standard',\n            # 可以定制日志文件路径\n            # BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # log文件的目录\n            # LOG_PATH = os.path.join(BASE_DIR,'a1.log')\n            'filename': 'a1.log',  # 日志文件\n            'maxBytes': 1024*1024*5,  # 日志大小 5M\n            'backupCount': 5,\n            'encoding': 'utf-8',  # 日志文件的编码，再也不用担心中文log乱码了\n        },\n        'other': {\n            'level': 'DEBUG',\n            'class': 'logging.FileHandler',  # 保存到文件\n            'formatter': 'test',\n            'filename': 'a2.log',\n            'encoding': 'utf-8',\n        },\n    },\n    'loggers': {\n        #logging.getLogger(__name__)拿到的logger配置\n        '''\n        如果都没找到，则用空的'',key是用户提供的\n        '''\n        '': {\n            'handlers': ['default', 'console'],  # 这里把上面定义的两个handler都加上，即log数据既写入文件又打印到屏幕\n            'level': 'DEBUG', # loggers(第一层日志级别关限制)---&gt;handlers(第二层日志级别关卡限制)\n            'propagate': False,  # 默认为True，向上（更高level的logger）传递，通常设置为False即可，否则会一份日志向上层层传递\n        },\n        'kkk': {\n            'handlers': ['default', 'console'],  # 这里把上面定义的两个handler都加上，即log数据既写入文件又打印到屏幕\n            'level': 'DEBUG',  # loggers(第一层日志级别关限制)---&gt;handlers(第二层日志级别关卡限制)\n            'propagate': False,  # 默认为True，向上（更高level的logger）传递，通常设置为False即可，否则会一份日志向上层层传递\n        },\n        'bbb': {\n            'handlers': ['default',],  # 这里把上面定义的两个handler都加上，即log数据既写入文件又打印到屏幕\n            'level': 'DEBUG',  # loggers(第一层日志级别关限制)---&gt;handlers(第二层日志级别关卡限制)\n            'propagate': False,  # 默认为True，向上（更高level的logger）传递，通常设置为False即可，否则会一份日志向上层层传递\n        },\n\n        '专门的采集': {\n            'handlers': ['other',],\n            'level': 'DEBUG',\n            'propagate': False,\n        },\n    },\n}</code></pre>\n<p><strong>然后，我们新建一个src.py来初始化并调用日志</strong></p>\n<pre><code class=\"language-python\"># -*- coding: utf-8 -*-\n\n'''\n@Time    : 2022/09/01 15:00\n@Author  : Rice\n@CSDN : C_小米同学\n@FileName: src.py\n'''\n\n\n#拿到日志的产生者loggers-kkk/bbb\n#先导入日志配置字典LOGGING_DIC\nimport setting\n#import logging.config #注意，直接导入logging，然后在调config是不行的，这不是包，是文件，没有配置__init__文件\n\nfrom logging import config,getLogger\n#导入\nconfig.dictConfig(setting.LOGGING_DIC)\n\n# logger1 = getLogger('kkk')\n#\n# logger1.info('hello')  #info权限\n\nlogger2 = getLogger('bbb')\nlogger2.info('nihao')\n</code></pre>\n<h3 id=\"%C2%A0%202.%E5%BA%94%E7%94%A82%EF%BC%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%A1%88%E4%BE%8B\">  2.应用2：一个简单的案例</h3>\n<pre><code class=\"hljs\">\"\"\"\nMyLogging Test\n\"\"\"\n\nimport time\nimport logging\nimport my_logging  # 导入自定义的logging配置\n\nlogger = logging.getLogger(__name__)  # 生成logger实例\n\n\ndef demo():\n    logger.debug(\"start range... time:{}\".format(time.time()))\n    logger.info(\"中文测试开始。。。\")\n    for i in range(10):\n        logger.debug(\"i:{}\".format(i))\n        time.sleep(0.2)\n    else:\n        logger.debug(\"over range... time:{}\".format(time.time()))\n    logger.info(\"中文测试结束。。。\")\n\nif __name__ == \"__main__\":\n    my_logging.load_my_logging_cfg()  # 在你程序文件的入口加载自定义logging配置\n    demo()</code></pre>\n<h1 id=\"%E5%8D%81%E5%9B%9B%E3%80%81re%E6%A8%A1%E5%9D%97\">十四、re模块</h1>\n<h2 id=\"1.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E4%BB%8B\">1.正则表达式简介</h2>\n<p>正则就是用一些具有特殊含义的符号组合到一起（称为正则表达式）来描述字符或者字符串的方法。或者说：正则就是用来描述一类事物的规则。（在Python中）它内嵌在Python中，并通过 re 模块实现。正则表达式模式被编译成一系列的字节码，然后由用 C 编写的匹配引擎执行。</p>\n<h2 id=\"2.%E5%B8%B8%E7%94%A8%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">2.常用匹配模式     </h2>\n<h2 id=\"%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">                             </h2>\n<p class=\"img-center\"><img alt=\"\" height=\"751\" src=\"image\\1cab49bd0d364cc9b1699af0a71311d1.png\" width=\"684\"/></p>\n<pre><code class=\"language-python\"># =================================匹配模式=================================\n#一对一的匹配\n# 'hello'.replace(old,new)\n# 'hello'.find('pattern')\n\n#正则匹配\nimport re\n#\\w与\\W\nprint(re.findall('\\w','hello egon 123')) #['h', 'e', 'l', 'l', 'o', 'e', 'g', 'o', 'n', '1', '2', '3']\nprint(re.findall('\\W','hello egon 123')) #[' ', ' ']\n\n#\\s与\\S\nprint(re.findall('\\s','hello  egon  123')) #[' ', ' ', ' ', ' ']\nprint(re.findall('\\S','hello  egon  123')) #['h', 'e', 'l', 'l', 'o', 'e', 'g', 'o', 'n', '1', '2', '3']\n\n#\\n \\t都是空,都可以被\\s匹配\nprint(re.findall('\\s','hello \\n egon \\t 123')) #[' ', '\\n', ' ', ' ', '\\t', ' ']\n\n#\\n与\\t\nprint(re.findall(r'\\n','hello egon \\n123')) #['\\n']\nprint(re.findall(r'\\t','hello egon\\t123')) #['\\n']\n\n#\\d与\\D\nprint(re.findall('\\d','hello egon 123')) #['1', '2', '3']\nprint(re.findall('\\D','hello egon 123')) #['h', 'e', 'l', 'l', 'o', ' ', 'e', 'g', 'o', 'n', ' ']\n\n#\\A与\\Z\nprint(re.findall('\\Ahe','hello egon 123')) #['he'],\\A==&gt;^\nprint(re.findall('123\\Z','hello egon 123')) #['he'],\\Z==&gt;$</code></pre>\n<p> </p>\n<pre><code class=\"language-python\">指定匹配必须出现在字符串的开头或行的开头。\n\n\\A \n指定匹配必须出现在字符串的开头（忽略 Multiline 选项）。\n\n$ \n指定匹配必须出现在以下位置：字符串结尾、字符串结尾的 \\n 之前或行的结尾。\n\n\\Z \n指定匹配必须出现在字符串的结尾或字符串结尾的 \\n 之前（忽略 Multiline 选项）。\n\n#^与$\nprint(re.findall('^h','hello egon 123')) #['h']\nprint(re.findall('3$','hello egon 123')) #['3']\n\n# 重复匹配：| . | * | ? | .* | .*? | + | {n,m} |\n#.\nprint(re.findall('a.b','a1b')) #['a1b']\nprint(re.findall('a.b','a1b a*b a b aaab')) #['a1b', 'a*b', 'a b', 'aab']\nprint(re.findall('a.b','a\\nb')) #[]\nprint(re.findall('a.b','a\\nb',re.S)) #['a\\nb']\nprint(re.findall('a.b','a\\nb',re.DOTALL)) #['a\\nb']同上一条意思一样\n\n#*\nprint(re.findall('ab*','bbbbbbb')) #[]\nprint(re.findall('ab*','a')) #['a']\nprint(re.findall('ab*','abbbb')) #['abbbb']\n\n#?\nprint(re.findall('ab?','a')) #['a']\nprint(re.findall('ab?','abbb')) #['ab']\n#匹配所有包含小数在内的数字\nprint(re.findall('\\d+\\.?\\d*',\"asdfasdf123as1.13dfa12adsf1asdf3\")) #['123', '1.13', '12', '1', '3']\n\n#.*默认为贪婪匹配\nprint(re.findall('a.*b','a1b22222222b')) #['a1b22222222b']\n\n#.*?为非贪婪匹配：推荐使用\nprint(re.findall('a.*?b','a1b22222222b')) #['a1b']\n\n#+\nprint(re.findall('ab+','a')) #[]\nprint(re.findall('ab+','abbb')) #['abbb']\n\n#{n,m}\nprint(re.findall('ab{2}','abbb')) #['abb']\nprint(re.findall('ab{2,4}','abbb')) #['abb']\nprint(re.findall('ab{1,}','abbb')) #'ab{1,}' ===&gt; 'ab+'\nprint(re.findall('ab{0,}','abbb')) #'ab{0,}' ===&gt; 'ab*'\n\n#[]\nprint(re.findall('a[1*-]b','a1b a*b a-b')) #[]内的都为普通字符了，且如果-没有被转意的话，应该放到[]的开头或结尾\nprint(re.findall('a[^1*-]b','a1b a*b a-b a=b')) #[]内的^代表的意思是取反，所以结果为['a=b']\nprint(re.findall('a[0-9]b','a1b a*b a-b a=b')) #[]内的^代表的意思是取反，所以结果为['a=b']\nprint(re.findall('a[a-z]b','a1b a*b a-b a=b aeb')) #[]内的^代表的意思是取反，所以结果为['a=b']\nprint(re.findall('a[a-zA-Z]b','a1b a*b a-b a=b aeb aEb')) #[]内的^代表的意思是取反，所以结果为['a=b']\n\n#\\# print(re.findall('a\\\\c','a\\c')) #对于正则来说a\\\\c确实可以匹配到a\\c,但是在python解释器读取a\\\\c时，会发生转义，然后交给re去执行，所以抛出异常\nprint(re.findall(r'a\\\\c','a\\c')) #r代表告诉解释器使用rawstring，即原生字符串，把我们正则内的所有符号都当普通字符处理，不要转义\nprint(re.findall('a\\\\\\\\c','a\\c')) #同上面的意思一样，和上面的结果一样都是['a\\\\c']\n\n#():分组\nprint(re.findall('ab+','ababab123')) #['ab', 'ab', 'ab']\nprint(re.findall('(ab)+123','ababab123')) #['ab']，匹配到末尾的ab123中的ab\nprint(re.findall('(?:ab)+123','ababab123')) #findall的结果不是匹配的全部内容，而是组内的内容,?:可以让结果为匹配的全部内容\nprint(re.findall('href=\"(.*?)\"','&lt;a href=\"http://www.baidu.com\"&gt;点击&lt;/a&gt;'))#['http://www.baidu.com']\nprint(re.findall('href=\"(?:.*?)\"','&lt;a href=\"http://www.baidu.com\"&gt;点击&lt;/a&gt;'))#['href=\"http://www.baidu.com\"']\n\n#|\nprint(re.findall('compan(?:y|ies)','Too many companies have gone bankrupt, and the next one is my company'))</code></pre>\n<pre><code class=\"language-python\"># ===========================re模块提供的方法介绍===========================\nimport re\n#1\nprint(re.findall('e','alex make love') )   #['e', 'e', 'e'],返回所有满足匹配条件的结果,放在列表里\n#2\nprint(re.search('e','alex make love').group()) #e,只到找到第一个匹配然后返回一个包含匹配信息的对象,该对象可以通过调用group()方法得到匹配的字符串,如果字符串没有匹配，则返回None。\n\n#3\nprint(re.match('e','alex make love'))    #None,同search,不过在字符串开始处进行匹配,完全可以用search+^代替match\n\n#4\nprint(re.split('[ab]','abcd'))     #['', '', 'cd']，先按'a'分割得到''和'bcd',再对''和'bcd'分别按'b'分割\n\n#5\nprint('===&gt;',re.sub('a','A','alex make love')) #===&gt; Alex mAke love，不指定n，默认替换所有\nprint('===&gt;',re.sub('a','A','alex make love',1)) #===&gt; Alex make love\nprint('===&gt;',re.sub('a','A','alex make love',2)) #===&gt; Alex mAke love\nprint('===&gt;',re.sub('^(\\w+)(.*?\\s)(\\w+)(.*?\\s)(\\w+)(.*?)$',r'\\5\\2\\3\\4\\1','alex make love')) #===&gt; love make alex\n\nprint('===&gt;',re.subn('a','A','alex make love')) #===&gt; ('Alex mAke love', 2),结果带有总共替换的个数\n\n\n#6\nobj=re.compile('\\d{2}')\n\nprint(obj.search('abc123eeee').group()) #12\nprint(obj.findall('abc123eeee')) #['12'],重用了obj</code></pre>\n<p> </p>\n<h2 idh2>\n<p> </p>\n</div>\n</div>"}