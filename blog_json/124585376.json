{"blogid": "124585376", "writerAge": "码龄3年", "writerBlogNum": "102", "writerCollect": "111", "writerComment": "5", "writerFan": "93", "writerGrade": "4级", "writerIntegral": "1078", "writerName": "@seven@", "writerProfileAdress": "writer_image\\profile_124585376.jpg", "writerRankTotal": "17804", "writerRankWeekly": "34393", "writerThumb": "33", "writerVisitNum": "50735", "blog_read_count": "3078", "blog_time": "已于 2022-06-20 16:02:26 修改", "blog_title": "c++操作redis数据库（详解）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>1.安装<strong>hiredis.h接口</strong></h1>\n<p>C++来操作redis数据库，是通过<strong>hiredis.h接口</strong>来实现，目前只能在Linux环境使用。</p>\n<pre><code>git clone https://github.com/redis/hiredis\n\ntar -zxvf hiredis.tar.gz\nls\nmake \n #接下来把libhiredis.so放到/usr/local/lib/中，把hiredis.h放到/usr/local/inlcude/hiredis/中或者直接用命令make install配置 两个都可以\nmake install\n</code></pre>\n<p>到此已经安装成功，接下来在程序中就可以直接用了，在程序中包含<strong>#include &lt;hiredis/hiredis.h&gt;</strong>即可</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<h1>2.redis接口</h1>\n<h2>2.1.连接数据库</h2>\n<p>redisContext* redisConnect(const char *ip, int port);</p>\n<p>  该函数用来连接redis数据库， 两个参数分别是redis数据库的ip和端口，端口号一般为6379,返回值是操作数据库的句柄。类似的还提供了一个函数，<span style=\"color:#fe2c24;\">供连接超时限定</span>，即</p>\n<p>redisContext* redisConnectWithTimeout(const char *ip, int port, timeval tv)。</p>\n<h2>2.2释放数据库连接</h2>\n<p><strong>void redisFree(redisContext *c)</strong></p>\n<p>释放redisConnect()所产生的连接。</p>\n<h2>2.3.操作数据库</h2>\n<p>void *redisCommand(redisContext *c, const char *format...)</p>\n<p>  该函数用于执行redis数据库中的命令，第一个参数为连接数据库返回的redisContext，剩下的参数为变参，如同C语言中的prinf()函数。此函数的返回值为void*，是返回命令的结果，但是一般会强制转换为redisReply类型，以便做进一步的处理。</p>\n<p><span style=\"color:#fe2c24;\"><strong>void freeReplyObject(void *reply);</strong></span></p>\n<p> <span style=\"color:#fe2c24;\">释放redisCommand执行后返回的的redisReply所占用的内存</span></p>\n<h1><span style=\"color:#0d0016;\">3.案例</span></h1>\n<p>redis.h头文件</p>\n<pre><code>#ifndef _REDIS_H_\n#define _REDIS_H_\n \n#include &lt;iostream&gt;\n#include &lt;string.h&gt;\n#include &lt;string&gt;\n#include &lt;stdio.h&gt;\n \n#include &lt;hiredis/hiredis.h&gt;\n \nclass Redis\n{\npublic:\n \n    Redis(){}\n //释放资源\n    ~Redis()\n\t{\n        this-&gt;_connect = NULL;\n\t\tthis-&gt;_reply = NULL;\t    \t    \n\t}\n //创建连接\n\tbool connect(std::string host, int port)\n\t{\n\t    this-&gt;_connect = redisConnect(host.c_str(), port);\n\t\tif(this-&gt;_connect != NULL &amp;&amp; this-&gt;_connect-&gt;err)\n\t\t{\n\t\t    printf(\"connect error: %s\\n\", this-&gt;_connect-&gt;errstr);\n\t\t\treturn 0;\n\t\t}\n\t\treturn 1;\n\t}\n //get请求\n    std::string get(std::string key)\n\t{\n\t\tthis-&gt;_reply = (redisReply*)redisCommand(this-&gt;_connect, \"GET %s\", key.c_str());\n\t\tstd::string str = this-&gt;_reply-&gt;str;\n\t\tfreeReplyObject(this-&gt;_reply);\n\t\treturn str;\n\t}\n//set请求\n\tvoid set(std::string key, std::string value)\n\t{\n        redisCommand(this-&gt;_connect, \"SET %s %s\", key.c_str(), value.c_str());\n\t}\n \nprivate:\n \n    redisContext* _connect;\n\tredisReply* _reply;\n\t\t\t\t\n};\n \n#endif  //_REDIS_H_</code></pre>\n<p><strong>redis.cppt源文件</strong></p>\n<pre><code>#include \"redis.h\"\n \nint main()\n{\n\tRedis *r = new Redis();\n\tif(!r-&gt;connect(\"192.168.13.128\", 6379))\n\t{\n\t\tprintf(\"connect error!\\n\");\n\t\treturn 0;\n\t}\n\tr-&gt;set(\"name\", \"Mayuyu\");\n\tprintf(\"Get the name is %s\\n\", r-&gt;get(\"name\").c_str());\n\tdelete r;\n\treturn 0;\n}</code></pre>\n<p></p>\n</div>\n</div>"}