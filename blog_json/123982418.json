{"blogid": "123982418", "writerAge": "码龄4年", "writerBlogNum": "139", "writerCollect": "38", "writerComment": "2", "writerFan": "3", "writerGrade": "4级", "writerIntegral": "1508", "writerName": "Mr.ZKH", "writerProfileAdress": "writer_image\\profile_123982418.jpg", "writerRankTotal": "49608", "writerRankWeekly": "288007", "writerThumb": "9", "writerVisitNum": "27552", "blog_read_count": "1208", "blog_time": "于 2022-04-06 10:22:36 发布", "blog_title": "C#数组详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"C_0\"></a>C#一维数组</h2>\n<p><strong>定义数组</strong></p>\n<pre><code class=\"prism language-csharp\">数据类型<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  数组名；\n</code></pre>\n<p><strong>初始化数组中的元素</strong><br/> 数据类型[] 数组名 = new 数据类型[长度];<br/> 数据类型[] 数组名 = {值 1, 值 2, …}<br/> 数据类型[] 数组名 = new 数据类型[长度]{值 1，值 2,…}</p>\n<pre><code class=\"prism language-csharp\">    <span class=\"token comment\">//有一个 int 类型的数组，输出数组中的第一个元素和最后一个元素</span>\n   <span class=\"token comment\">//定义int类型的数组</span>\n   <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">//输出数组中的一个元素</span>\n   Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">//输出数组中的最后一个元素</span>\n   Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   Console<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>C#多维数组</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//定义多维数组</span>\n数据类型<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>  数组名<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//创建多维数组并初始化</span>\n数据类型<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>   数组名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>  数据类型<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>  <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>从上面定义的语法可以看出，它与一维数组的定义非常类似，每多一个维度则在定义时的[]中增加一个“,”。</li><li>存取数组中的值也是将下标用“,”隔开。</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//定义一个存放学生成绩的二维数组，并将该数组中每个学生的成绩输出。</span>\n<span class=\"token class-name\"><span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> points <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">88.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">86</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> points<span class=\"token punctuation\">.</span><span class=\"token function\">GetLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"个学生成绩：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> points<span class=\"token punctuation\">.</span><span class=\"token function\">GetLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>C# foreach循环用法详解</strong></p>\n<ul><li>foreach 循环用于列举出集合中所有的元素，foreach 语句中的表达式由关键字 in 隔开的两个项组成。</li><li>in 右边的项是集合名，in 左边的项是变量名，用来存放该集合中的每个元素。</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span>数据类型  变量名  <span class=\"token keyword\">in</span>  数组名<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//语句块；</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//创建一个 double 类型的数组，并在该数组中存入 5 名学生的考试成绩，计算总成绩和平均成绩。</span>\n<span class=\"token class-name\"><span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> points <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">,</span> <span class=\"token number\">86</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75.5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">double</span></span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">double</span></span> avg <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> point <span class=\"token keyword\">in</span> points<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\navg <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> points<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总成绩为：\"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"平均成绩为：\"</span> <span class=\"token operator\">+</span> avg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>C# Split：将字符串拆分为数组</strong></p>\n<ul><li>Split 方法用于按照指定的字符串来拆分原有字符串，并返回拆分后得到的字符串数组。</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//从控制台输入一个字符串，然后计算该字符串中包含的逗号的个数。</span>\n<span class=\"token comment\">//如果要查询逗号的个数，通过拆分方法 Split 将拆分结果存放到字符串数组中，数组的长度减 1 即为字符串中含有逗号的个数</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入一个字符串：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str <span class=\"token operator\">=</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> condition <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\",\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> result <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">,</span> StringSplitOptions<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字符串中含有逗号的个数为：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>在使用 Split 方法时，需要注意该方法中传递的参数(condition, StringSplitOptions.None)。</li><li>第一个参数是拆分的条件数组，可以在该数组中存放多个字符串作为拆分的条件。</li><li>参数 StringSplitOptions.None 是拆分的选项，表示如果在拆分时遇到空字符也拆分出一个元素。</li></ul>\n<p><strong>C#冒泡排序（Sort方法）</strong></p>\n<ul><li>冒泡排序的原理是将数组元素中相邻两个元素的值进行比较，将较小的数放到前面，每一次交换都将最大的数放到最后，依次交换后最终将数组中的元素从小到大排序。</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//创建一个整型数组，并在该数组中存放 5 个元素，使用冒泡排序算法将数组中的元素从小到大排序。</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            a<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"升序排序后的结果为：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> b <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>如果要对数组中的元素从大到小排序，只需要将 if(a[j]&gt;a[j+1]) 语句更改成 if(a[j]&lt;a[j+1]) 即可。</li></ul>\n<p><strong>数组中常用的方法如下所示：</strong></p>\n<ul><li>Clear() 清空数组中的元素</li><li>Sort() 冒泡排序，从小到大排序数组中的元素</li><li>Reverse() 将数组中的元素逆序排列</li><li>IndexOf() 查找数组中是否含有某个元素，返回该元素第一次出现的位置，如果没有与之匹配的元素，则返回 -1</li><li>LastIndexOf() 查找数组中是否含有某个元素，返回该元素最后一次出现的位置</li></ul>\n<p><strong>C# enum：枚举类型</strong></p>\n<pre><code class=\"prism language-csharp\"> 访问修饰符  <span class=\"token keyword\">enum</span>  变量名 <span class=\"token punctuation\">:</span> 数据类型\n<span class=\"token punctuation\">{<!-- --></span>\n    值l<span class=\"token punctuation\">,</span>\n    值<span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//创建类 EnumTest, 在该类中定义一个枚举类型存放教师职称（助教、讲师、副教授、教授）。</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumTest</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Title</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">int</span></span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        助教<span class=\"token punctuation\">,</span>\n        讲师<span class=\"token punctuation\">,</span>\n        副教授<span class=\"token punctuation\">,</span>\n        教授\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//在 Main 方法中分别打印出每个枚举值对应的整数值。</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>EnumTest<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">.</span>助教 <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>EnumTest<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">.</span>助教<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>EnumTest<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">.</span>讲师 <span class=\"token operator\">+</span> <span class=\"token string\">\"：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>EnumTest<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">.</span>讲师<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>EnumTest<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">.</span>副教授 <span class=\"token operator\">+</span> <span class=\"token string\">\"：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>EnumTest<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">.</span>副教授<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>EnumTest<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">.</span>教授 <span class=\"token operator\">+</span> <span class=\"token string\">\"：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>EnumTest<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">.</span>教授<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>C# struct：结构体类型</strong></p>\n<ul><li>结构体与类比较相似，由于它是值类型，在使用时会比使用类存取的速度更快，但灵活性方面没有类好。</li></ul>\n<pre><code class=\"prism language-csharp\">访问修饰符  <span class=\"token keyword\">struct</span>  结构体名称\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//结构体成员</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StudentClass</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">student</span> stu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stu<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span>\n        stu<span class=\"token punctuation\">.</span>Age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生的信息为：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">+</span> <span class=\"token string\">\"：\"</span> <span class=\"token operator\">+</span> stu<span class=\"token punctuation\">.</span>Age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//结构体</span>\n   <span class=\"token keyword\">struct</span> <span class=\"token class-name\">student</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> age<span class=\"token punctuation\">;</span>\n\n       <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name\n       <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">get</span>\n           <span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n           <span class=\"token keyword\">set</span>\n           <span class=\"token punctuation\">{<!-- --></span>\n               name <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n\n       <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Age\n       <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">get</span>\n           <span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n           <span class=\"token keyword\">set</span>\n           <span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">{<!-- --></span>\n                   <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span>\n               <span class=\"token keyword\">else</span>\n               <span class=\"token punctuation\">{<!-- --></span>\n                   age <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}