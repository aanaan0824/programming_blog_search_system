{"blogid": "119381916", "writerAge": "码龄3年", "writerBlogNum": "91", "writerCollect": "226", "writerComment": "198", "writerFan": "2281", "writerGrade": "4级", "writerIntegral": "1502", "writerName": "形影相吊.", "writerProfileAdress": "writer_image\\profile_119381916.jpg", "writerRankTotal": "12745", "writerRankWeekly": "4273", "writerThumb": "239", "writerVisitNum": "48608", "blog_read_count": "5205", "blog_time": "于 2021-08-04 13:31:36 发布", "blog_title": "Thinkphp自带的队列think-queue使用分析", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><strong><code>think-queue</code></strong>是ThinkPHP官方提供的一个消息队列服务，是专门支持队列服务的扩展包。<code>think-queue</code>消息队列适用于大并发或返回结果时间比较长且需要批量操作的第三方接口，可用于短信发送、邮件发送、APP推送。<code>think-queue</code>消息队列可进行发布、获取、执行、删除、重发、失败处理、延迟执行、超时控制等操作。</p>\n<p><strong><code>think-queue</code></strong>支持消息队列的基本特性</p>\n<ul><li>消息的发布、获取、执行、删除、重发、失败处理、延迟执行、超时控制等</li><li>队列的多队列、内存限制、启动、停止、守护等</li><li>消息队列可降级位同步执行</li></ul>\n<p></p>\n<p></p>\n<p><strong>1、安装 thinkphp-queue</strong></p>\n<p>        推荐使用Composer进行安装，切换到项目的根目录，执行： composer require topthink/think-queue  注意tp5版本需要带版本号</p>\n<p><strong>2、配置消息队列的存储环境</strong></p>\n<p>        配置文件正常位于 application\\extra\\queue.php，如图：</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"121\" src=\"image\\65b70d395c433e7e0c6dbd0e7a5cc59b.png\" width=\"341\"/></p>\n<p>使用Redis驱动，如果Redis环境还没有安装，请自行安装哦，很简单的，或者也可以使用其他类型驱动，如图：</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"331\" src=\"image\\56e9883f671ce8cc6c7a99405c6c1375.png\" width=\"568\"/></p>\n<p><strong>3、任务的创建</strong></p>\n<p>我们在index模块下，Index.php文件，建立一个名为 queue 的方法（一定要这样么？当然不是，本教程，只是例子，你可以新建模块，方法名也可以是其他），如图：</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"225\" src=\"image\\57c17cb9a20b34e4aa294b1f6116ff6f.png\" width=\"1009\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"511\" src=\"image\\7b40eab5edc1fba2568e754b15f5dfe5.png\" width=\"1200\"/></p>\n<p style=\"text-align:center;\">\\think\\Queue::push(队列类,参数,队列名);</p>\n<p><strong>4、任务消息的消费以及删除处理</strong></p>\n<p>我们在index模块下创建一个 job 文件，该文件用来处理消费模式，如图：</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"192\" src=\"image\\b846ac199f24974c696b4eabe354ac4a.png\" width=\"230\"/></p>\n<p>在 Demo 这个类下，创建一个 fire 方法，该方法是消息队列默认调用的方法。如图：</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"559\" src=\"image\\14e3eae9290f0727b3c4d01a43178ff6.png\" width=\"853\"/></p>\n<p>以上就是完成任务的创建—》推送—》消费了。<br/>  </p>\n<p><strong>5、监听任务并执行</strong></p>\n<p>php think queue:listen --queue 任务名<br/> php think queue:work --queue 任务名</p>\n<p>两种，具体的可选参数可以输入命令加 –help 查看</p>\n<p>Linux启动守护进程，以tp5为例子<br/> nohup php think queue:work --daemon --queue 任务名称 &amp;</p>\n<p>查看任务进程编号 jobs -l</p>\n</div>\n</div>"}