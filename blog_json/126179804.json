{"blogid": "126179804", "writerAge": "码龄2年", "writerBlogNum": "88", "writerCollect": "1713", "writerComment": "2075", "writerFan": "5457", "writerGrade": "6级", "writerIntegral": "4888", "writerName": "卖寂寞的小男孩", "writerProfileAdress": "writer_image\\profile_126179804.jpg", "writerRankTotal": "3322", "writerRankWeekly": "465", "writerThumb": "1774", "writerVisitNum": "76427", "blog_read_count": "212", "blog_time": "于 2022-08-07 09:30:41 发布", "blog_title": "C++手撕红黑树", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_1\">一、什么是红黑树</a></li><li><a href=\"#_4\">二、红黑树的约定</a></li><li><a href=\"#vsAVL_11\">三、红黑树vsAVL</a></li><li><ul><li><a href=\"#1_12\">1、调整平衡的实现机制不同</a></li><li><a href=\"#2_15\">2、红黑树的插入效率更高</a></li><li><a href=\"#3AVL_18\">3、AVL查找效率高</a></li></ul>\n</li><li><a href=\"#_20\">四、红黑树的实现</a></li><li><ul><li><a href=\"#1_22\">1.找到插入的位置</a></li><li><a href=\"#2_65\">2.控制平衡</a></li><li><ul><li><a href=\"#1_66\">(1)当父节点为黑</a></li><li><a href=\"#2_68\">(2)判断父节点在祖父节点的位置</a></li><li><a href=\"#3_87\">(3)叔叔节点存在且为红</a></li><li><a href=\"#4_104\">(4)父节点为红，叔叔不存在或存在且为黑，新插入的节点在父节点左侧</a></li><li><a href=\"#5_119\">(5)父节点为红，叔叔不存在或存在且为黑，新插入的节点在父节点右侧</a></li><li><a href=\"#6_133\">(6)最后置黑</a></li></ul>\n</li><li><a href=\"#3_135\">3.测试代码</a></li></ul>\n</li><li><a href=\"#_186\">五、完整代码</a></li><li><ul><li><a href=\"#1testc_187\">1.test.c</a></li><li><a href=\"#2RBTreeh_222\">2.RBTree.h</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>一、什么是红黑树</h1>\n<p>红黑树在表意上就是一棵每个节点带有颜色的二叉搜索树，并通过<strong>对节点颜色的控制</strong>，使该二叉搜索树达到尽量平衡的状态。所谓尽量平衡的状态就是：<strong>红黑树确保没有一条路径比其他路径长两倍</strong>。<br/> <font color=\"red\">和AVL树不同的是，AVL树是一棵平衡树，而红黑树可能平衡也可能不平衡(因为是尽量平衡的状态)</font></p>\n<h1><a id=\"_4\"></a>二、红黑树的约定</h1>\n<p>要实现一棵红黑树，即要红黑树确保没有一条路径比其他路径长两倍。通过对<strong>节点颜色</strong>的约定来实现这一目标。</p>\n<blockquote>\n<p>1.根节点是黑色的。<br/> 2.如果一个节点是红色的，则它的两个孩子都是黑色的。<br/> 3.对于每个节点，从该节点到其所有后代节点的简单路径上，均包含相同数量的黑色节点。</p>\n</blockquote>\n<p><font color=\"red\">实现了这三条颜色规则的二叉搜索树，即也实现了没有一条路径比其他路径长两倍，即实现了一棵红黑树。</font></p>\n<h1><a id=\"vsAVL_11\"></a>三、红黑树vsAVL</h1>\n<h2><a id=\"1_12\"></a>1、调整平衡的实现机制不同</h2>\n<p>红黑树根据节点颜色(同一父节点出发到叶子节点，所有路径上的黑色节点数目一样)，一些约定和旋转实现。<br/> AVL根据树的平衡因子(所有节点的左右子树高度差的绝对值不超过1)和旋转决定。</p>\n<h2><a id=\"2_15\"></a>2、红黑树的插入效率更高</h2>\n<p>红黑树是用非严格的平衡来换取增删节点时候旋转次数的降低，任何不平衡都会在三次旋转之内解决，红黑树并不追求“完全平衡”，它只要求部分地达到平衡要求，降低了对旋转的要求，从而提高了性能<br/> 而AVL是严格平衡树(高度平衡的二叉搜索树)，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多。所以红黑树的插入效率更高</p>\n<h2><a id=\"3AVL_18\"></a>3、AVL查找效率高</h2>\n<p>如果你的应用中，查询的次数远远大于插入和删除，那么选择AVL树，如果查询和插入删除次数几乎差不多，应选择红黑树。即，有时仅为了排序（建立-遍历-删除），不查找或查找次数很少，R-B树合算一些。</p>\n<h1><a id=\"_20\"></a>四、红黑树的实现</h1>\n<p>实现一棵红黑树，本质是实现它的插入函数，使插入函数可以实现红黑树的颜色约定，它的实现分为两步，即先找到插入的位置，再控制平衡。插入函数返回值设计为bool，插入成功返回true，失败返回false。控制平衡时，需要关注四个节点，即新插入的节点，它的父节点，它的叔叔节点，它的祖父节点。</p>\n<h2><a id=\"1_22\"></a>1.找到插入的位置</h2>\n<blockquote>\n<p>当为第一个节点的时候，颜色设为黑，直接插入。<br/> 当插入的不是第一个节点时，<strong>颜色设为红</strong>，需要根据二叉搜索树的性质找到插入位置。并实现三叉链。</p>\n</blockquote>\n<pre><code class=\"prism language-cpp\">\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Black<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tNode<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&gt;</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcur <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcur<span class=\"token operator\">-&gt;</span>_col<span class=\"token operator\">=</span> Red<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tparent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\tcur<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tparent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\tcur<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2_65\"></a>2.控制平衡</h2>\n<h3><a id=\"1_66\"></a>(1)当父节点为黑</h3>\n<p>当父节点为黑的时候，由于插入的子节点的颜色为红，对三个约定没有任何影响，因此不需要调整平衡。</p>\n<h3><a id=\"2_68\"></a>(2)判断父节点在祖父节点的位置</h3>\n<p>通过判断父节点在祖父节点的位置，来定义叔叔节点的位置，以及之后的旋转方向的判断。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> Red<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\nNode<span class=\"token operator\">*</span> grandfather <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> grandfather<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   Node<span class=\"token operator\">*</span> uncle <span class=\"token operator\">=</span> grandfather<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">//三种情况的处理</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   Node<span class=\"token operator\">*</span> uncle <span class=\"token operator\">=</span> grandfather<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">//三种情况的处理</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>首先需要使用大循环，这个循环是为情况1而准备的，情况2和3直接跳出循环即可，因为只有情况1对上层循环有影响。<br/> <font color=\"red\">下面我们以父节点在祖父节点的左侧为例，右侧同理。</font></p>\n<h3><a id=\"3_87\"></a>(3)叔叔节点存在且为红</h3>\n<blockquote>\n<p>解决方案：将父节点和叔叔节点设为黑，将祖父节点设为红。然后将祖父节点作为新节点继续向上平衡。如果祖父节点是根节点，那么需要再将其置为黑。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fbbb7755e88343e7a974e38c6c98dd87.png\"/><br/> 注意，这种情况和其他情况不同的是，需要将祖父节点作为新插入的节点继续向上遍历，这说明需要一个循环。而其他类型的情况直接break跳出这个循环即可。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//第一种情况</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> Red<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Black<span class=\"token punctuation\">;</span>\n\tgrandfather<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Red<span class=\"token punctuation\">;</span>\n\tcur <span class=\"token operator\">=</span> grandfather<span class=\"token punctuation\">;</span>\n\tparent <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这种情况只需要控制颜色即可，但是要继续向上循环。</p>\n<h3><a id=\"4_104\"></a>(4)父节点为红，叔叔不存在或存在且为黑，新插入的节点在父节点左侧</h3>\n<blockquote>\n<p>解决方案：对祖父节点右旋操作，并将祖父节点置为红，父节点置为黑。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f90abe39d1b84806b53b183d91d28b51.png\"/><br/> 关于旋转的细节，我在AVL树中有详细的解释：<a href=\"https://lonely-little-boy.blog.csdn.net/article/details/125067930?spm=1001.2014.3001.5502\">C++手撕AVL树</a></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//第二种情况，右单旋</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> parent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>grandfather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Black<span class=\"token punctuation\">;</span>\ngrandfather<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"5_119\"></a>(5)父节点为红，叔叔不存在或存在且为黑，新插入的节点在父节点右侧</h3>\n<blockquote>\n<p>解决方案：进行双旋，即对父节点进行左单旋，祖父节点进行右单旋。将子节点置为黑，将祖父节点置为红。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\dd4c856ac5e2498695a39aad39ab9997.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">else</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>grandfather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncur<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Black<span class=\"token punctuation\">;</span>\ngrandfather<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"6_133\"></a>(6)最后置黑</h3>\n<p>每一次插入都对根节点置为黑操作，因为第一种情况可能导致根节点不是黑。同时对根节点置黑也并不违反三条规定。</p>\n<h2><a id=\"3_135\"></a>3.测试代码</h2>\n<p>当我们处理完父节点在祖父节点的左侧后，处理父节点在祖父节点的右侧。<br/> 全部处理之后，我们的插入代码就完成了，接下来要对整个树进行测试，即对三个约定来进行测试：</p>\n<blockquote>\n<p>1.当根节点为红时，返回false。<br/> 2.判断一个节点和其父节点的颜色是否都为红，若都为红返回false。<br/> 3.以最左的一条路径上的根节点数量为基准，通过递归遍历每一条路径上的根节点的数量，当每条路径遍历节点到空时，将两者进行比较，如果最终结果不相等则返回false。</p>\n</blockquote>\n<pre><code class=\"prism language-cpp\">\t<span class=\"token keyword\">bool</span> <span class=\"token function\">IsBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root <span class=\"token operator\">&amp;&amp;</span> _root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> Red<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"根节点不是黑色的\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">int</span> banchmark <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//以最右边一条路径为基准</span>\n\t\tNode<span class=\"token operator\">*</span> left <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> Black<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token operator\">++</span>banchmark<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tleft <span class=\"token operator\">=</span> left<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">int</span> blackNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">_IsBalance</span><span class=\"token punctuation\">(</span>_root<span class=\"token punctuation\">,</span> banchmark<span class=\"token punctuation\">,</span> blackNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">_IsBalance</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> banchmark<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> blackNum<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>banchmark <span class=\"token operator\">!=</span> blackNum<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"黑色根节点数目不相等\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> Red <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token operator\">-&gt;</span>_parent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> Red<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"出现连续的红色节点\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> Black<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token operator\">++</span>blackNum<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">_IsBalance</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">,</span> banchmark<span class=\"token punctuation\">,</span> blackNum<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">_IsBalance</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">,</span> banchmark<span class=\"token punctuation\">,</span> blackNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_186\"></a>五、完整代码</h1>\n<h2><a id=\"1testc_187\"></a>1.test.c</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"RBtree.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tRBTree<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> t<span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> v<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tpair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">kv</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tt<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">IsBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"insert\"</span> <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"插入失败\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"不是平衡的\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2RBTreeh_222\"></a>2.RBTree.h</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;assert.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Color</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tRed<span class=\"token punctuation\">,</span>\n\tBlack\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">RBTreeNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _left<span class=\"token punctuation\">;</span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _right<span class=\"token punctuation\">;</span>\n\tRBTreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> _parent<span class=\"token punctuation\">;</span>\n\tpair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span> _kv<span class=\"token punctuation\">;</span>\n\tColor _col<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">RBTreeNode</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_parent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_col</span><span class=\"token punctuation\">(</span>Red<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span> <span class=\"token function\">_kv</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">RBTree</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">typedef</span> RBTreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span> Node<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tNode<span class=\"token operator\">*</span> _root<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">RBTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_root</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">IsBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root <span class=\"token operator\">&amp;&amp;</span> _root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> Red<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"根节点不是黑色的\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">int</span> banchmark <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//以最右边一条路径为基准</span>\n\t\tNode<span class=\"token operator\">*</span> left <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> Black<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token operator\">++</span>banchmark<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tleft <span class=\"token operator\">=</span> left<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">int</span> blackNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">_IsBalance</span><span class=\"token punctuation\">(</span>_root<span class=\"token punctuation\">,</span> banchmark<span class=\"token punctuation\">,</span> blackNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">_IsBalance</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> banchmark<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> blackNum<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>banchmark <span class=\"token operator\">!=</span> blackNum<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"黑色根节点数目不相等\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> Red <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token operator\">-&gt;</span>_parent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> Red<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"出现连续的红色节点\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> Black<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token operator\">++</span>blackNum<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">_IsBalance</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">,</span> banchmark<span class=\"token punctuation\">,</span> blackNum<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">_IsBalance</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">,</span> banchmark<span class=\"token punctuation\">,</span> blackNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//右单旋</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> curL <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> curR <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> parentParent <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\tparent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> curR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curR<span class=\"token punctuation\">)</span>\n\t\t\tcurR<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\tcur<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\tparent<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> _root<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_root <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t_root<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentParent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparentParent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parentParent<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentParent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparentParent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parentParent<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//左单旋</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> curL <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> parentParent <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\tparent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> curL<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curL<span class=\"token punctuation\">)</span>\n\t\t\tcurL<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\tcur<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\tparent<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> _root<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_root <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t_root<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentParent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparentParent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parentParent<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentParent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparentParent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parentParent<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> kv<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Black<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tNode<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\tNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _root<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&gt;</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcur <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcur<span class=\"token operator\">-&gt;</span>_col<span class=\"token operator\">=</span> Red<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-&gt;</span>_kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tparent<span class=\"token operator\">-&gt;</span>_right <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\tcur<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tparent<span class=\"token operator\">-&gt;</span>_left <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\tcur<span class=\"token operator\">-&gt;</span>_parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> Red<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tNode<span class=\"token operator\">*</span> grandfather <span class=\"token operator\">=</span> parent<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> grandfather<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tNode<span class=\"token operator\">*</span> uncle <span class=\"token operator\">=</span> grandfather<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">//第一种情况</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> Red<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Black<span class=\"token punctuation\">;</span>\n\t\t\t\t\tgrandfather<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Red<span class=\"token punctuation\">;</span>\n\t\t\t\t\tcur <span class=\"token operator\">=</span> grandfather<span class=\"token punctuation\">;</span>\n\t\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">//第二种情况，右单旋</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> parent<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>grandfather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Black<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tgrandfather<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Red<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token comment\">//第三种情况，左右双旋</span>\n\t\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>grandfather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tcur<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Black<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tgrandfather<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Red<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t_root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Black<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tNode<span class=\"token operator\">*</span> uncle <span class=\"token operator\">=</span> grandfather<span class=\"token operator\">-&gt;</span>_left<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">//第一种情况</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">==</span> Red<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> uncle<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Black<span class=\"token punctuation\">;</span>\n\t\t\t\t\tgrandfather<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Red<span class=\"token punctuation\">;</span>\n\t\t\t\t\tcur <span class=\"token operator\">=</span> grandfather<span class=\"token punctuation\">;</span>\n\t\t\t\t\tparent <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>_parent<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">//第二种情况，左单旋</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> parent<span class=\"token operator\">-&gt;</span>_right<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>grandfather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tparent<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Black<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tgrandfather<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Red<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token comment\">//第三种情况，右左双旋</span>\n\t\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token function\">RotateR</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token function\">RotateL</span><span class=\"token punctuation\">(</span>grandfather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tcur<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Black<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tgrandfather<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Red<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t_root<span class=\"token operator\">-&gt;</span>_col <span class=\"token operator\">=</span> Black<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}