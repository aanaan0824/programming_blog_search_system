{"blogid": "124677896", "writerAge": "码龄5年", "writerBlogNum": "46", "writerCollect": "549", "writerComment": "483", "writerFan": "1503", "writerGrade": "5级", "writerIntegral": "1614", "writerName": "机智兵", "writerProfileAdress": "writer_image\\profile_124677896.jpg", "writerRankTotal": "18513", "writerRankWeekly": "25452", "writerThumb": "449", "writerVisitNum": "36555", "blog_read_count": "7392", "blog_time": "于 2022-05-10 00:13:41 发布", "blog_title": "【微服务】（十六）—— 分布式事务Seata", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1 id=\"%E2%80%8B\" style=\"text-align:center;\"><img alt=\"\" src=\"image\\28182cc9c3754ac48c7a8e136c445988.jpeg\"/></h1>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%BA%8B%E5%8A%A1ACID%E5%8E%9F%E5%88%99-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8B%E5%8A%A1ACID%E5%8E%9F%E5%88%99\">事务ACID原则</a></p>\n<p id=\"%E4%B8%80%E3%80%81%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80\">一、理论基础</a></p>\n<p id=\"1%EF%BC%89CAP%E7%90%86%E8%AE%BA-toc\" style=\"margin-left:40px;\"><a href=\"#1%EF%BC%89CAP%E7%90%86%E8%AE%BA\">1）CAP理论</a></p>\n<p id=\"CAP%E5%AE%9A%E7%90%86-%20Consistency%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#CAP%E5%AE%9A%E7%90%86-%20Consistency%C2%A0\">CAP定理- Consistency </a></p>\n<p id=\"CAP%E5%AE%9A%E7%90%86-%20Availability-toc\" style=\"margin-left:80px;\"><a href=\"#CAP%E5%AE%9A%E7%90%86-%20Availability\">CAP定理- Availability</a></p>\n<p id=\"CAP%E5%AE%9A%E7%90%86-Partition%20tolerance-toc\" style=\"margin-left:80px;\"><a href=\"#CAP%E5%AE%9A%E7%90%86-Partition%20tolerance\">CAP定理-Partition tolerance</a></p>\n<p id=\"2%EF%BC%89BASE%E7%90%86%E8%AE%BA%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#2%EF%BC%89BASE%E7%90%86%E8%AE%BA%C2%A0\">2）BASE理论 </a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1Seata-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1Seata\">二、分布式事务Seata</a></p>\n<p id=\"1%EF%BC%89%E5%88%9D%E8%AF%86seata-toc\" style=\"margin-left:40px;\"><a href=\"#1%EF%BC%89%E5%88%9D%E8%AF%86seata\">1）初识seata</a></p>\n<p id=\"2%EF%BC%89Seata%E6%9E%B6%E6%9E%84-toc\" style=\"margin-left:40px;\"><a href=\"#2%EF%BC%89Seata%E6%9E%B6%E6%9E%84\">2）Seata架构</a></p>\n<p id=\"%C2%A03%EF%BC%89%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%9B%86%E6%88%90seata-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A03%EF%BC%89%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%9B%86%E6%88%90seata\"> 3）微服务集成seata</a></p>\n<p id=\"1%E3%80%81%E9%A6%96%E5%85%88%EF%BC%8C%E5%BC%95%E5%85%A5seata%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#1%E3%80%81%E9%A6%96%E5%85%88%EF%BC%8C%E5%BC%95%E5%85%A5seata%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96%EF%BC%9A\">1、首先，引入seata相关依赖：</a></p>\n<p id=\"2%E3%80%81%E7%84%B6%E5%90%8E%EF%BC%8C%E9%85%8D%E7%BD%AEapplication.yml%EF%BC%8C%E8%AE%A9%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%80%9A%E8%BF%87%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%89%BE%E5%88%B0seata-tc-server%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#2%E3%80%81%E7%84%B6%E5%90%8E%EF%BC%8C%E9%85%8D%E7%BD%AEapplication.yml%EF%BC%8C%E8%AE%A9%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%80%9A%E8%BF%87%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%89%BE%E5%88%B0seata-tc-server%EF%BC%9A\">2、然后，配置application.yml，让微服务通过注册中心找到seata-tc-server：</a></p>\n<p id=\"%C2%A0%E4%B8%89%E3%80%81XA%E6%A8%A1%E5%BC%8F-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E4%B8%89%E3%80%81XA%E6%A8%A1%E5%BC%8F\"> 三、XA模式</a></p>\n<p id=\"1%EF%BC%89XA%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86-toc\" style=\"margin-left:40px;\"><a href=\"#1%EF%BC%89XA%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86\">1）XA模式原理</a></p>\n<p id=\"2%EF%BC%89seata%E7%9A%84XA%E6%A8%A1%E5%BC%8F%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#2%EF%BC%89seata%E7%9A%84XA%E6%A8%A1%E5%BC%8F%C2%A0\">2）seata的XA模式 </a></p>\n<p id=\"3%EF%BC%89%E5%AE%9E%E7%8E%B0XA%E6%A8%A1%E5%BC%8F-toc\" style=\"margin-left:40px;\"><a href=\"#3%EF%BC%89%E5%AE%9E%E7%8E%B0XA%E6%A8%A1%E5%BC%8F\">3）实现XA模式</a></p>\n<p id=\"1%E3%80%81%E4%BF%AE%E6%94%B9application.yml%E6%96%87%E4%BB%B6%EF%BC%88%E6%AF%8F%E4%B8%AA%E5%8F%82%E4%B8%8E%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%EF%BC%89%EF%BC%8C%E5%BC%80%E5%90%AFXA%E6%A8%A1%E5%BC%8F%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#1%E3%80%81%E4%BF%AE%E6%94%B9application.yml%E6%96%87%E4%BB%B6%EF%BC%88%E6%AF%8F%E4%B8%AA%E5%8F%82%E4%B8%8E%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%EF%BC%89%EF%BC%8C%E5%BC%80%E5%90%AFXA%E6%A8%A1%E5%BC%8F%EF%BC%9A\">1、修改application.yml文件（每个参与事务的微服务），开启XA模式：</a></p>\n<p id=\"2%E3%80%81%E7%BB%99%E5%8F%91%E8%B5%B7%E5%85%A8%E5%B1%80%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%85%A5%E5%8F%A3%E6%96%B9%E6%B3%95%E6%B7%BB%E5%8A%A0%40GlobalTransactional%E6%B3%A8%E8%A7%A3%EF%BC%8C-toc\" style=\"margin-left:80px;\"><a href=\"#2%E3%80%81%E7%BB%99%E5%8F%91%E8%B5%B7%E5%85%A8%E5%B1%80%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%85%A5%E5%8F%A3%E6%96%B9%E6%B3%95%E6%B7%BB%E5%8A%A0%40GlobalTransactional%E6%B3%A8%E8%A7%A3%EF%BC%8C\">2、给发起全局事务的入口方法添加@GlobalTransactional注解，</a></p>\n<p id=\"3%E3%80%81%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1%E5%B9%B6%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:80px;\"><a href=\"#3%E3%80%81%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1%E5%B9%B6%E6%B5%8B%E8%AF%95\">3、重启服务并测试</a></p>\n<p id=\"%E5%9B%9B%E3%80%81AT%E6%A8%A1%E5%BC%8F-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81AT%E6%A8%A1%E5%BC%8F\">四、AT模式</a></p>\n<p id=\"1%EF%BC%89AT%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86-toc\" style=\"margin-left:40px;\"><a href=\"#1%EF%BC%89AT%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86\">1）AT模式原理</a></p>\n<p id=\"%E4%BA%94%E3%80%81TCC%E6%A8%A1%E5%BC%8F-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81TCC%E6%A8%A1%E5%BC%8F\">五、TCC模式</a></p>\n<p id=\"1%EF%BC%89TCC%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#1%EF%BC%89TCC%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86%C2%A0\">1）TCC模式原理 </a></p>\n<p id=\"2%EF%BC%89TCC%E7%9A%84%E7%A9%BA%E5%9B%9E%E6%BB%9A%E5%92%8C%E4%B8%9A%E5%8A%A1%E6%82%AC%E6%8C%82-toc\" style=\"margin-left:40px;\"><a href=\"#2%EF%BC%89TCC%E7%9A%84%E7%A9%BA%E5%9B%9E%E6%BB%9A%E5%92%8C%E4%B8%9A%E5%8A%A1%E6%82%AC%E6%8C%82\">2）TCC的空回滚和业务悬挂</a></p>\n<p id=\"%E5%85%AD%E3%80%81Saga%E6%A8%A1%E5%BC%8F-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%AD%E3%80%81Saga%E6%A8%A1%E5%BC%8F\">六、Saga模式</a></p>\n<p id=\"%C2%A0%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94\"> 四种模式对比</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<p> </p>\n<h1 id=\"%E4%BA%8B%E5%8A%A1ACID%E5%8E%9F%E5%88%99\">事务ACID原则</h1>\n<blockquote>\n<ul><li><strong>原子性：</strong>事务中的所有操作，要么全部成功，要么全部失败</li><li><span style=\"color:#fe2c24;\"><strong>一致性：</strong></span>要保证数据库内部完整性约束、声明性约束</li><li><strong>隔离性：</strong>对同一资源操作的事务不能同时发生</li><li><span style=\"color:#fe2c24;\"><strong>持久性：</strong></span>对数据库做的一切修改将永久保存，不管是否出现故障</li></ul>\n<p class=\"img-center\"><img alt=\"\" height=\"274\" src=\"image\\39037ed7411f4cd78a7f19295e376baa.png\" width=\"400\"/></p>\n</blockquote>\n<h1 id=\"%E4%B8%80%E3%80%81%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80\">一、理论基础</h1>\n<h2 id=\"1%EF%BC%89CAP%E7%90%86%E8%AE%BA\">1）CAP理论</h2>\n<blockquote>\n<p>1998年，加州大学的计算机科学家 Eric Brewer 提出，分布式系统有三个指标：</p>\n<ul><li>Consistency（一致性）</li><li>Availability（可用性）</li><li>Partition tolerance （分区容错性）</li></ul>\n<p>Eric Brewer 说，分布式系统无法同时满足这三个指标。 这个结论就叫做 CAP 定理。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"440\" src=\"image\\7514a4ea6c0242c88a3620549feac201.png\" width=\"500\"/></p>\n</blockquote>\n<p></p>\n<h3 id=\"CAP%E5%AE%9A%E7%90%86-%20Consistency%C2%A0\">CAP定理- Consistency </h3>\n<blockquote>\n<p><strong>Consistency（一致性）</strong>：用户访问分布式系统中的任意节点，得到的数据必须一致</p>\n<p><img alt=\"\" height=\"748\" src=\"image\\8eb02ac56da5438a9fc33a108ba32aca.png\" width=\"1200\"/></p>\n</blockquote>\n<h3 id=\"CAP%E5%AE%9A%E7%90%86-%20Availability\">CAP定理- Availability</h3>\n<blockquote>\n<p><strong> Availability （可用性）</strong>：用户访问集群中的任意健康节点，必须能得到响应，而不是超时或拒绝</p>\n<p><img alt=\"\" height=\"760\" src=\"image\\e7414f501b9b4e6a8f7508d25e375efc.png\" width=\"1200\"/></p>\n</blockquote>\n<h3 id=\"CAP%E5%AE%9A%E7%90%86-Partition%20tolerance\">CAP定理-Partition tolerance</h3>\n<blockquote>\n<p><strong>Partition（分区）</strong>：因为网络故障或其它原因导致分布式系统中的部分节点与其它节点失去连接，形成独立分区。</p>\n<p><strong>Tolerance（容错）</strong>：在集群出现分区时，整个系统也要持续对外提供服务 </p>\n<p><img alt=\"\" height=\"762\" src=\"image\\61595ab14a8c4cb38a518d5f01249c2d.png\" width=\"1200\"/></p>\n</blockquote>\n<h2 id=\"2%EF%BC%89BASE%E7%90%86%E8%AE%BA%C2%A0\">2）BASE理论 </h2>\n<blockquote>\n<p>BASE理论是对CAP的一种解决思路，包含三个思想：</p>\n<ul><li><strong>Basically Available （基本可用）</strong>：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li><li><strong>Soft State（软状态）</strong>：在一定时间内，允许出现中间状态，比如临时的不一致状态。</li><li><strong>Eventually Consistent（最终一致性）</strong>：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致。</li></ul>\n<p><strong>        而分布式事务最大的问题是各个子事务的一致性问题，因此可以借鉴CAP定理和BASE理论：</strong></p>\n<ul><li><strong>AP模式：各子事务分别执行和提交，允许出现结果不一致，然后采用弥补措施恢复数据即可，实现最终一致。 </strong></li><li><strong>CP模式：各个子事务执行后互相等待，同时提交，同时回滚，达成强一致。但事务等待过程中，处于弱可用状态</strong></li></ul>\n</blockquote>\n<h1 id=\"%E4%BA%8C%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1Seata\">二、分布式事务Seata</h1>\n<h2 id=\"1%EF%BC%89%E5%88%9D%E8%AF%86seata\">1）初识seata</h2>\n<blockquote>\n<p>Seata是 2019 年 1 月份蚂蚁金服和阿里巴巴共同开源的分布式事务解决方案。</p>\n<p>致力于提供高性能和简单易用的分布式事务服务，为用户打造一站式的分布式解决方案。</p>\n<p>官网地址：<span style=\"color:#fe2c24;\"><strong>http://seata.io/</strong></span>，其中的文档、播客中提供了大量的使用说明、源码分析。</p>\n<p><img alt=\"\" height=\"1200\" src=\"image\\2d35a025c0c743589e4df2e859684093.png\" width=\"1200\"/></p>\n</blockquote>\n<h2 id=\"2%EF%BC%89Seata%E6%9E%B6%E6%9E%84\">2）Seata架构</h2>\n<blockquote>\n<p>Seata事务管理中有三个重要的角色：</p>\n<ul><li><strong>TC (Transaction Coordinator) - 事务协调者</strong>：维护全局和分支事务的状态，协调全局事务提交或回滚。</li><li><strong>TM (Transaction Manager) - 事务管理器</strong>：定义全局事务的范围、开始全局事务、提交或回滚全局事务。</li><li><strong>RM (Resource Manager) - 资源管理器</strong>：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li></ul>\n<p><img alt=\"\" height=\"942\" src=\"image\\4014ff9798df4ce2a24eb0c1db0157c7.png\" width=\"1200\"/></p>\n<p>Seata提供了四种不同的分布式事务解决方案：</p>\n<ul><li><strong>XA模式：</strong>强一致性分阶段事务模式，牺牲了一定的可用性，无业务侵入</li><li><strong>TCC模式</strong>：最终一致的分阶段事务模式，有业务侵入</li><li><strong>AT模式</strong>：最终一致的分阶段事务模式，无业务侵入，也是Seata的默认模式</li><li><strong>SAGA模式</strong>：长事务模式，有业务侵入</li></ul>\n</blockquote>\n<h3 id=\"%C2%A03%EF%BC%89%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%9B%86%E6%88%90seata\"> 3）微服务集成seata</h3>\n<blockquote>\n<h3 id=\"1%E3%80%81%E9%A6%96%E5%85%88%EF%BC%8C%E5%BC%95%E5%85%A5seata%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96%EF%BC%9A\">1、首先，引入seata相关依赖：</h3>\n<pre><code>&lt;dependency&gt;    \n&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;    \n&lt;artifactId&gt;spring-cloud-starter-alibaba-seata&lt;/artifactId&gt;    \n&lt;exclusions&gt;        \n&lt;!--版本较低，1.3.0，因此排除--&gt;         \n&lt;exclusion&gt;            \n&lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt;          \n&lt;groupId&gt;io.seata&lt;/groupId&gt;        \n&lt;/exclusion&gt;    \n&lt;/exclusions&gt;\n&lt;/dependency&gt;\n&lt;!--seata starter 采用1.4.2版本--&gt;\n&lt;dependency&gt;    \n&lt;groupId&gt;io.seata&lt;/groupId&gt;    \n&lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt;    \n&lt;version&gt;${seata.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3 id=\"2%E3%80%81%E7%84%B6%E5%90%8E%EF%BC%8C%E9%85%8D%E7%BD%AEapplication.yml%EF%BC%8C%E8%AE%A9%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%80%9A%E8%BF%87%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%89%BE%E5%88%B0seata-tc-server%EF%BC%9A\">2、然后，配置application.yml，让微服务通过注册中心找到seata-tc-server：</h3>\n<p><img alt=\"\" height=\"964\" src=\"image\\2745ee0a1d1c493cbe73e1ef26f2c183.png\" width=\"1200\"/></p>\n</blockquote>\n<h1 id=\"%C2%A0%E4%B8%89%E3%80%81XA%E6%A8%A1%E5%BC%8F\"> 三、XA模式</h1>\n<h2 id=\"1%EF%BC%89XA%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86\">1）XA模式原理</h2>\n<blockquote>\n<p>XA 规范 是 X/Open 组织定义的分布式事务处理（DTP，Distributed Transaction Processing）标准，</p>\n<p>XA 规范 描述了全局的TM与局部的RM之间的接口，几乎所有主流的数据库都对 XA 规范 提供了支持。</p>\n<p><img alt=\"\" height=\"744\" src=\"image\\99b7d5ac58cf4f84adfda3d470f244ad.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"716\" src=\"image\\4d25fbc8cf284ce5b4607c06e054b77e.png\" width=\"1200\"/></p>\n</blockquote>\n<h2 id=\"2%EF%BC%89seata%E7%9A%84XA%E6%A8%A1%E5%BC%8F%C2%A0\">2）seata的XA模式 </h2>\n<blockquote>\n<p>seata的XA模式做了一些调整，但大体相似：</p>\n<p>RM一阶段的工作：</p>\n<ul><li>注册分支事务到TC</li><li>执行分支业务sql但不提交</li><li>报告执行状态到TC</li></ul>\n<p>TC二阶段的工作：</p>\n<p>TC检测各分支事务执行状态</p>\n<ul><li>如果都成功，通知所有RM提交事务</li><li>如果有失败，通知所有RM回滚事务</li></ul>\n<p>RM二阶段的工作：</p>\n<ul><li>接收TC指令，提交或回滚事务</li></ul>\n<p class=\"img-center\"><img alt=\"\" height=\"964\" src=\"image\\373417c5b0df4f5396db0b85b69ddce0.png\" width=\"1200\"/></p>\n</blockquote>\n<h2 id=\"3%EF%BC%89%E5%AE%9E%E7%8E%B0XA%E6%A8%A1%E5%BC%8F\">3）实现XA模式</h2>\n<blockquote>\n<p>Seata的starter已经完成了XA模式的自动装配，实现非常简单，步骤如下： </p>\n<h3 id=\"1%E3%80%81%E4%BF%AE%E6%94%B9application.yml%E6%96%87%E4%BB%B6%EF%BC%88%E6%AF%8F%E4%B8%AA%E5%8F%82%E4%B8%8E%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%EF%BC%89%EF%BC%8C%E5%BC%80%E5%90%AFXA%E6%A8%A1%E5%BC%8F%EF%BC%9A\">1、修改application.yml文件（每个参与事务的微服务），开启XA模式：</h3>\n<pre><code>seata:  \n  data-source-proxy-mode: XA # 开启数据源代理的XA模式\n</code></pre>\n<h3 id=\"2%E3%80%81%E7%BB%99%E5%8F%91%E8%B5%B7%E5%85%A8%E5%B1%80%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%85%A5%E5%8F%A3%E6%96%B9%E6%B3%95%E6%B7%BB%E5%8A%A0%40GlobalTransactional%E6%B3%A8%E8%A7%A3%EF%BC%8C\">2、给发起全局事务的入口方法添加@GlobalTransactional注解，</h3>\n<p>本例中是OrderServiceImpl中的create方法：</p>\n<pre><code>@Override@GlobalTransactional\npublic Long create(Order order) {    \n    // 创建订单    \n    orderMapper.insert(order);    \n    // 扣余额 ...略 \n    // 扣减库存 ...略    \n    return order.getId();\n}\n</code></pre>\n<h3 id=\"3%E3%80%81%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1%E5%B9%B6%E6%B5%8B%E8%AF%95\">3、重启服务并测试</h3>\n</blockquote>\n<h1 id=\"%E5%9B%9B%E3%80%81AT%E6%A8%A1%E5%BC%8F\">四、AT模式</h1>\n<h2 id=\"1%EF%BC%89AT%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86\">1）AT模式原理</h2>\n<blockquote>\n<p>AT模式同样是分阶段提交的事务模型，不过缺弥补了XA模型中资源锁定周期过长的缺陷。</p>\n<p>阶段一RM的工作：</p>\n<ul><li>注册分支事务</li><li>记录undo-log（数据快照）</li><li>执行业务sql并提交</li><li>报告事务状态</li></ul>\n<p>阶段二提交时RM的工作：</p>\n<ul><li>删除undo-log即可</li></ul>\n<p>阶段二回滚时RM的工作：</p>\n<ul><li>根据undo-log恢复数据到更新前</li></ul>\n<p><img alt=\"\" height=\"966\" src=\"image\\48f8128a6f4840fea8972982d0d9d7a6.png\" width=\"1200\"/></p>\n<p>流程如下：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"669\" src=\"image\\294196bcf2e345a78c9f5c1e33a83c6e.png\" width=\"500\"/></p>\n<p> </p>\n</blockquote>\n<h1 id=\"%E4%BA%94%E3%80%81TCC%E6%A8%A1%E5%BC%8F\">五、TCC模式</h1>\n<h2 id=\"1%EF%BC%89TCC%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86%C2%A0\">1）TCC模式原理 </h2>\n<blockquote>\n<p>TCC模式与AT模式非常相似，每阶段都是独立事务，不同的是TCC通过人工编码来实现数据恢复。需要实现三个方法：</p>\n<ul><li><strong>Try：</strong>资源的检测和预留；</li><li><strong>Confirm</strong>：完成资源操作业务；要求 Try 成功 Confirm 一定要能成功。</li><li><strong>Cancel：</strong>预留资源释放，可以理解为try的反向操作。</li></ul>\n<p>TCC的工作模型图：</p>\n<p><img alt=\"\" height=\"954\" src=\"image\\7418911ccc9340eda27fbc79fea02b0b.png\" width=\"1200\"/></p>\n</blockquote>\n<h2 id=\"2%EF%BC%89TCC%E7%9A%84%E7%A9%BA%E5%9B%9E%E6%BB%9A%E5%92%8C%E4%B8%9A%E5%8A%A1%E6%82%AC%E6%8C%82\">2）TCC的空回滚和业务悬挂</h2>\n<blockquote>\n<p>        当某分支事务的try阶段阻塞时，可能导致全局事务超时而触发二阶段的cancel操作。在未执行try操作时先执行了cancel操作，这时cancel不能做回滚，就是<span style=\"color:#fe2c24;\"><strong>空回滚</strong>。 </span></p>\n<p><span style=\"color:#0d0016;\">        对于已经空回滚的业务，如果以后继续执行try，就永远不可能confirm或cancel，这就是</span><span style=\"color:#fe2c24;\"><strong>业务悬挂</strong></span><span style=\"color:#0d0016;\">。应当阻止执行空回滚后的try操作，避免悬挂</span></p>\n<p><img alt=\"\" height=\"974\" src=\"image\\12b18e1e23a9440eae8b15b75093387f.png\" width=\"1200\"/></p>\n</blockquote>\n<h1 id=\"%E5%85%AD%E3%80%81Saga%E6%A8%A1%E5%BC%8F\">六、Saga模式</h1>\n<blockquote>\n<p>Saga模式是SEATA提供的长事务解决方案。也分为两个阶段：</p>\n<ul><li>一阶段：直接提交本地事务</li><li>二阶段：成功则什么都不做；失败则通过编写补偿业务来回滚</li></ul>\n<p>Saga模式优点：</p>\n<ul><li>事务参与者可以基于事件驱动实现异步调用，吞吐高</li><li>一阶段直接提交事务，无锁，性能好</li><li>不用编写TCC中的三个阶段，实现简单</li></ul>\n<p>缺点：</p>\n<ul><li>软状态持续时间不确定，时效性差</li><li>没有锁，没有事务隔离，会有脏写</li></ul>\n<p class=\"img-center\"><img alt=\"\" height=\"556\" src=\"image\\ae6e1e408640418fbf2633f22070ed39.png\" width=\"500\"/></p>\n<p> </p>\n</blockquote>\n<h1 id=\"%C2%A0%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94\"> 四种模式对比</h1>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td> <p></p> </td><td> <p>XA</p> </td><td> <p>AT</p> </td><td> <p>TCC</p> </td><td> <p>SAGA</p> </td></tr><tr><td> <p>一致性</p> </td><td> <p>强一致</p> </td><td> <p>弱一致</p> </td><td> <p>弱一致</p> </td><td> <p>最终一致</p> </td></tr><tr><td> <p>隔离性</p> </td><td> <p>完全隔离</p> </td><td> <p>基于全局锁隔离</p> </td><td> <p>基于资源预留隔离</p> </td><td> <p>无隔离</p> </td></tr><tr><td> <p>代码侵入</p> </td><td> <p>无</p> </td><td> <p>无</p> </td><td> <p>有，要编写三个接口</p> </td><td> <p>有，要编写状态机和补偿业务</p> </td></tr><tr><td> <p>性能</p> </td><td> <p>差</p> </td><td> <p>好</p> </td><td> <p>非常好</p> </td><td> <p>非常好</p> </td></tr><tr><td> <p>场景</p> </td><td> <p>对一致性、隔离性有高要求的业务</p> </td><td> <p>基于关系型数据库的大多数分布式事务场景都可以</p> </td><td> <p>对性能要求较高的事务。</p> <p>有非关系型数据库要参与的事务。</p> </td><td> <p>业务流程长、业务流程多</p> <p>参与者包含其它公司或遗留系统服务，无法提供 TCC 模式要求的三个接口</p> </td></tr></tbody></table>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\04ae7ad118cb4be49fc49d5941be7e5d.jpeg\"/></p>\n<p> </p>\n</div>\n</div>"}