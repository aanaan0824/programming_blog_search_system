{"blogid": "126743861", "writerAge": "码龄1年", "writerBlogNum": "388", "writerCollect": "371", "writerComment": "25", "writerFan": "14529", "writerGrade": "5级", "writerIntegral": "4097", "writerName": "小芬熊", "writerProfileAdress": "writer_image\\profile_126743861.jpg", "writerRankTotal": "4566", "writerRankWeekly": "390", "writerThumb": "82", "writerVisitNum": "248767", "blog_read_count": "19", "blog_time": "于 2022-09-07 13:31:27 发布", "blog_title": "JVM内存设置与查看", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>一、设置JVM内存设置</p>\n<p>1. 设置JVM内存的参数有四个：</p>\n<p>-Xmx Java Heap最大值，默认值为物理内存的1/4，最佳设值应该视物理内存大小及计算机内其他内存开销而定；</p>\n<p>-Xms Java Heap初始值，Server端JVM最好将-Xms和-Xmx设为相同值，开发测试机JVM可以保留默认值；</p>\n<p>-Xmn Java Heap Young区大小，不熟悉最好保留默认值；</p>\n<p>-Xss 每个线程的Stack大小，不熟悉最好保留默认值；</p>\n<p>2. 如何设置JVM内存分配：</p>\n<p>（1）当在命令提示符下启动并使用JVM时（只对当前运行的类Test生效）：</p>\n<p>java -Xmx128m -Xms64m -Xmn32m -Xss16m Test</p>\n<p>（2）当在集成开发环境下（如eclipse）启动并使用JVM时：</p>\n<p>a. 在eclipse根目录下打开eclipse.ini，默认内容为（这里设置的是运行当前开发工具的JVM内存分配）：</p>\n<ol><li>-vmargs</li><li>-Xms40m</li><li>-Xmx256m</li></ol>\n<p>-vmargs表示以下为虚拟机设置参数，可修改其中的参数值，也可添加-Xmn，-Xss，另外，eclipse.ini内还可以设置非堆内存，如：-XX:PermSize=56m，-XX:MaxPermSize=128m。</p>\n<p>此处设置的参数值可以通过以下配置在开发工具的状态栏显示：</p>\n<p>在eclipse根目录下创建文件options，文件内容为：org.eclipse.ui/perf/showHeapStatus=true</p>\n<p>修改eclipse根目录下的eclipse.ini文件，在开头处添加如下内容：</p>\n<ol><li>-debug</li><li>options</li><li>-vm</li><li>javaw.exe</li></ol>\n<p>重新启动eclipse，就可以看到下方状态条多了JVM信息。</p>\n<p>b. 打开eclipse－窗口－首选项－Java－已安装的JRE（对在当前开发环境中运行的java程序皆生效）</p>\n<p>编辑当前使用的JRE，在缺省VM参数中输入：-Xmx128m -Xms64m -Xmn32m -Xss16m</p>\n<p>c. 打开eclipse－运行－运行－Java应用程序（只对所设置的java类生效）</p>\n<p>选定需设置内存分配的类－自变量，在VM自变量中输入：-Xmx128m -Xms64m -Xmn32m -Xss16m</p>\n<p>注：如果在同一开发环境中同时进行了b和c设置，则b设置生效，c设置无效，如：</p>\n<p>开发环境的设置为：-Xmx256m，而类Test的设置为：-Xmx128m -Xms64m，则运行Test时生效的设置为：</p>\n<p>-Xmx256m -Xms64m</p>\n<p>（3）当在服务器环境下（如Tomcat）启动并使用JVM时（对当前服务器环境下所以Java程序生效）：</p>\n<p>a. 设置环境变量：</p>\n<p>变量名：CATALINA_OPTS</p>\n<p>变量值：-Xmx128m -Xms64m -Xmn32m -Xss16m</p>\n<p>b. 打开Tomcat根目录下的bin文件夹，编辑catalina.bat，将其中的%CATALINA_OPTS%（共有四处）替换为：-Xmx128m -Xms64m -Xmn32m -Xss16m</p>\n<p>二、查看设置JVM内存信息</p>\n<p>Runtime.getRuntime().maxMemory(); //最大可用内存，对应-Xmx</p>\n<p>Runtime.getRuntime().freeMemory(); //当前JVM空闲内存</p>\n<p>Runtime.getRuntime().totalMemory(); //当前JVM占用的内存总数，其值相当于当前JVM已使用的内存及freeMemory()的总和</p>\n<p>关于maxMemory()，freeMemory()和totalMemory()：</p>\n<p>maxMemory()为JVM的最大可用内存，可通过-Xmx设置，默认值为物理内存的1/4，设值不能高于计算机物理内存；</p>\n<p>totalMemory()为当前JVM占用的内存总数，其值相当于当前JVM已使用的内存及freeMemory()的总和，会随着JVM使用内存的增加而增加；</p>\n<p>freeMemory()为当前JVM空闲内存，因为JVM只有在需要内存时才占用物理内存使用，所以freeMemory()的值一般情况下都很小，而JVM实际可用内存并不等于freeMemory()，而应该等于maxMemory()-totalMemory()+freeMemory()。及其设置JVM内存分配。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}