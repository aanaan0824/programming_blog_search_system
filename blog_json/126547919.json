{"blogid": "126547919", "writerAge": "码龄1年", "writerBlogNum": "21", "writerCollect": "309", "writerComment": "381", "writerFan": "506", "writerGrade": "4级", "writerIntegral": "945", "writerName": "夜猫徐", "writerProfileAdress": "writer_image\\profile_126547919.jpg", "writerRankTotal": "19744", "writerRankWeekly": "171", "writerThumb": "278", "writerVisitNum": "7288", "blog_read_count": "396", "blog_time": "于 2022-08-29 19:05:18 发布", "blog_title": "猿创征文 |【C++】C++中的引用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#CC_1\">一、C++中的引用与C的联系</a></li><li><a href=\"#_4\">二、引用的概念</a></li><li><a href=\"#_12\">三、定义引用</a></li><li><a href=\"#_35\">四、引用存在的意义</a></li><li><a href=\"#_72\">五、引用的相关用法</a></li><li><ul><li><a href=\"#51__73\">5.1 基本用法</a></li><li><a href=\"#52__110\">5.2 引用做形参</a></li><li><a href=\"#53__140\">5.3 常引用</a></li><li><a href=\"#54__211\">5.4 引用指针</a></li><li><a href=\"#55__243\">5.5 引用做返回值</a></li><li><a href=\"#56__280\">5.6 结构体中存在引用成员</a></li></ul>\n</li><li><a href=\"#_302\">六、引用和指针的特点及区别总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"CC_1\"></a>一、C++中的引用与C的联系</h1>\n<p>一句话概括：<br/> <mark>C++中的引用，是C中指针的升级版。</mark></p>\n<h1><a id=\"_4\"></a>二、引用的概念</h1>\n<p>引用是C++对C的一个重要扩充。<br/> <mark>作用是给变量起个别名。</mark><br/> 对引用的操作与对变量直接操作完全一样。 (类似于linux中的硬链接文件)</p>\n<p>引用不是定义一个新变量，而是给已存在的变量取了一个外号，编译器不会为引用变量开辟内存空间，它和它引用的变量<strong>共用同一块内存空间</strong>。</p>\n<p><em>举个形象的例子，鲁智深又被叫做\"花和尚\"，这里的花和尚和鲁智深都是同一个人，花和尚就是鲁智深的引用，说白了引用其实就是取外号。</em></p>\n<h1><a id=\"_12\"></a>三、定义引用</h1>\n<p><code>&amp;</code> 在定义引用时，作用是<strong>引用标识符</strong>，标识定义的是一个引用；</p>\n<p>在C++中 &amp; 有三个作用：</p>\n<ol><li>定义引用时，表示引用标识符，标识定义的是一个引用；</li><li>有两个操作数时，a&amp;b，位运算的 按位与；</li><li>其他场景都表示取变量地址的意思；</li></ol>\n<p>定义引用格式:<br/> <strong>类型名 &amp;引用名 = 引用的目标;</strong><br/> 如：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//定义一个引用b 引用的目标是a</span>\n<span class=\"token comment\">//定义成功后，使用b 和使用 a就是一样的了</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>要求：</p>\n<ol><li>定义引用时必须要有引用的目标来初始化；</li><li>引用和引用的目标类型要保持一致；(继承和多态除外)</li><li>引用的目标一旦确定了，后面就不能再修改引用的目标了；</li></ol>\n<h1><a id=\"_35\"></a>四、引用存在的意义</h1>\n<p><em>C++的面向程序较大型化，所以使用引用，可以避免指针指向错误的空间，而出现程序的崩溃或严重BUG。</em></p>\n<p>以下面代码为例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//a++;如果偏移会出现越界访问错误</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>a <span class=\"token operator\">+</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span><span class=\"token comment\">//野指针，p中指向的地址是随机的</span>\n    <span class=\"token comment\">//*p=100;出错</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> p1<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//p1++;报错</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//p1=&amp;c;报错</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>总结：</p>\n<ol><li>在C++中const修饰的变量，一定要进行初始化；</li><li>在程序中不小心对指针进行偏移操会出现访问越界错误；单纯使用指针的方式无法保证代码的稳定性。</li><li>可能出现野指针问题；</li><li>应当用<code>const</code>修饰指针变量避免以上出现的问题；</li></ol>\n<p>所以引用就来了。</p>\n<h1><a id=\"_72\"></a>五、引用的相关用法</h1>\n<h2><a id=\"51__73\"></a>5.1 基本用法</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> c<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>c <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"------------------\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    a<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"------------------\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    c<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"------------------\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    c<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>c <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>c <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\24b82dde260544aea22f7bebf94e8fbd.png\"/><br/> 从结果我们可以发现：</p>\n<p>这个引用b变量，并没有开辟新的空间。</p>\n<pre><code class=\"prism language-cpp\">c <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这种用法不是改变 c 引用的目标，而是将 b 的值赋给 r 一份儿。</p>\n<h2><a id=\"52__110\"></a>5.2 引用做形参</h2>\n<p><mark><strong>好处：不用再考虑值传递和地址传递的问题了</strong></mark></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">myfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> aa<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"myfun():\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>aa <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    aa<span class=\"token operator\">=</span>aa<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"main():\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>a <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">myfun</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8d29da0f8ea94eaba50194d7e70fe8f4.png\"/><br/> 分析结果可知：<br/> a 的地址和 aa 的地址是一样的，所以使用 aa 就是使用 a；<br/> <mark>总结：</mark><br/> 使用引用并没有开辟空间，在函数传参是最为常用的一种方式。</p>\n<p>自此学了引用之后，函数传参，如果是结构体的话，推荐大家使用引用的方式进行传参。</p>\n<p>同时，为了代码稳定与健状性，<strong>推存使用const修饰的引用</strong>做为函数的形参。</p>\n<h2><a id=\"53__140\"></a>5.3 常引用</h2>\n<p><strong>const修饰的引用被称为常引用。</strong><br/> const修饰的引用，不仅可以引用左值，也可以引用右值。</p>\n<p><strong>什么是左值？什么是右值？</strong></p>\n<p><strong>左值</strong>：有地址的量即左值，比如变量就是一个左值，因为变量是有地址的。一个左值，既可以放在 = 号左边，也可以放在 = 号的右边。</p>\n<p><strong>右值</strong>：没有地址的量即一个右值，立即数就是一个右值，常量字符串也是一个右值。只能放在 = 号的右边。</p>\n<p>C++中有这种常引用，主要是用来保护数据的。同时，这种引用即可以引用左值，也可以引用右值。<br/> (C++中的常引用，即为一种语法糖)<br/> 常引用举例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">myfun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token operator\">+</span>b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//a=600;错误，不能通过常引用修改引用目标的值。</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//name=\"xiaoming\";使用常引用就可以避免这种问题的出现。</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">myfun</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> c1 <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//c1=500;报错，</span>\n    c<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//不影响c,因为c的类型在定义时就已经确定了 是没有const的</span>\n\n    <span class=\"token comment\">//const int&amp; c2 = 100;//常引用可以引用常量,C++的语法糖。</span>\n    <span class=\"token comment\">//语法糖的底层实现。</span>\n    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> c2 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//const修饰的这种常引用或者说叫左值引用，比单纯使用引用对C++程序代码来讲更具有意义。</span>\n    <span class=\"token comment\">//因为他就是一种安全性的标识。</span>\n    <span class=\"token comment\">//int &amp;c3 = 100;//普通的引用不能</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> c4 <span class=\"token operator\">=</span> c<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//常引用可以引用临时值</span>\n    <span class=\"token comment\">//int &amp;r5 = c+100;//普通的引用不能</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//int&amp; r6 = m; //引用const变量时也需要常引用</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> r6 <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n\n    string name<span class=\"token operator\">=</span><span class=\"token string\">\"yemaoxu\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><mark>总结：</mark></p>\n<ol><li>不能通过常引用修改引用目标的值；</li><li>常引用可以引用常量，普通的引用不能；</li><li>常引用可以引用临时值，普通的引用不能；</li><li>引用const变量时也需要常引用；</li><li>语法糖的底层实现</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> c2 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"54__211\"></a>5.4 引用指针</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>node_t<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//引用指针的用法</span>\n<span class=\"token comment\">//node_t * &amp;r = phead;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">create_node</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span> <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>node_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    r<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    r<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    node_t <span class=\"token operator\">*</span>phead <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">create_node</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    phead<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>phead<span class=\"token operator\">-&gt;</span>data<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    phead <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a5ad88f24be548bd80b255ad6367f494.png\"/></p>\n<h2><a id=\"55__243\"></a>5.5 引用做返回值</h2>\n<p>我们平时使用的函数，返回值都是一个右值；<br/> 但是引用作为返回值，<strong>返回的是一个左值；</strong></p>\n<p>引用做返回值时，不能返回局部变量的引用，因为局部变量占用的空间<br/> 在函数结束时，就被操作系统回收了；<br/> 可以返回全局变量的引用，或者<code>static</code>修饰的局部变量的引用。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//int temp=a+b;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ret<span class=\"token operator\">=</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ret <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4a7d560f27ac4b2083cc27a54a897948.png\"/><br/> <mark>总结：</mark></p>\n<ol><li>引用做返回值，返回的是一个左值；</li><li>不能返回局部变量的引用；</li></ol>\n<h2><a id=\"56__280\"></a>5.6 结构体中存在引用成员</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Work</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//struct Work work1;错误的</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Work</span> work2<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//必须初始化引用成员才可以</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><mark>总结：</mark><br/> 结构体中存在引用成员，必须初始化引用成员。</p>\n<h1><a id=\"_302\"></a>六、引用和指针的特点及区别总结</h1>\n<p><strong>从编译器角度来讲:</strong></p>\n<p>引用就是一种升级版的指针。</p>\n<p><strong>从语法形式来讲：</strong></p>\n<ol><li>引用是引用的是已经存在一块合法的空间。</li><li>引用变量即是引用空间的变量的别名。</li><li>指针可以是一个野指针，他可以指向任何的地方。</li><li>指针可以进行无限次的赋值，引用只可以被引用一次。</li><li>引用必须初始化，指针可以不初始化；</li><li>引用不可以改变指向，指针可以；</li><li>不存在指向NULL的引用，指针可以指向NULL ；</li><li>指针在使用前需要检查合法性，引用不需要；</li><li>可以定义指针数组、不可以定义引用数组；</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">}</span> \t<span class=\"token comment\">//正确</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">}</span>\t<span class=\"token comment\">//错误</span>\n</code></pre>\n<ol start=\"10\"><li>可以定义数组指针，也可以定义数组引用</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>arr_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span><span class=\"token comment\">//错误的数组引用</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span><span class=\"token comment\">//正确的数组引用</span>\n</code></pre>\n<ol start=\"11\"><li>可以定义指针函数，也可以定义引用函数</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token function\">func_p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">func_p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"12\"><li>可以定义函数指针，也可以定义函数引用</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfunc_p <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>func_r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"13\"><li>可以定义指针的指针(二级指针) 不可以定义引用的引用(二级引用)</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>pp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>r <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>rr <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//错误</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}