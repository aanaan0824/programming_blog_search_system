{"blogid": "126666114", "writerAge": "码龄5年", "writerBlogNum": "114", "writerCollect": "674", "writerComment": "1074", "writerFan": "1080", "writerGrade": "5级", "writerIntegral": "3225", "writerName": "一二三o-0-O", "writerProfileAdress": "writer_image\\profile_126666114.jpg", "writerRankTotal": "6514", "writerRankWeekly": "84", "writerThumb": "804", "writerVisitNum": "77836", "blog_read_count": "94", "blog_time": "已于 2022-09-07 20:12:33 修改", "blog_title": "猿创征文 |【算法面试入门必刷】动态规划-线性dp（三）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>【算法面试入门必刷】动态规划-线性dp（三）</h3>\n<ul><li><a href=\"#_21\">前言</a></li><li><a href=\"#_25\">算法入门刷题训练</a></li><li><ul><li><a href=\"#AB36_26\">题目AB36：连续子数组最大和</a></li><li><ul><li><a href=\"#_27\">题目分析</a></li><li><a href=\"#_33\">理论准备</a></li><li><a href=\"#_44\">题解</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_110\">小结</a></li></ul>\n</div>\n<p></p>\n<blockquote>\n<p>📦个人主页：一二三o-0-O的博客<br/> 🏆技术方向：C/C++客户端资深工程师（直播+音视频剪辑）<br/> 👨‍💻作者简介：数据结构算法与音视频领域创作者<br/> 📒 系列专栏：牛客网面试必刷<br/> 📣专栏目标：帮助伙伴们通过系统训练，掌握数据结构与算法，收获心仪Offer<br/> 📝推荐一个找工作神器：<a href=\"https://www.nowcoder.com/link/pc_csdncpt_123_sf\">牛客刷题网</a> 【面试经验|实习招聘内推，求职就业一战解决】<br/> 🧡如果对您有帮助的话，欢迎点赞👍收藏📂，关注不迷路</p>\n</blockquote>\n<blockquote>\n<p>【算法入门必刷】数据结构-栈篇系列文章：<br/> <a href=\"https://blog.csdn.net/MichaelKongChina/article/details/126607946?spm=1001.2014.3001.5502\">【算法入门必刷】数据结构-栈（一）</a><br/> <a href=\"https://blog.csdn.net/MichaelKongChina/article/details/126627827?spm=1001.2014.3001.5502\">【算法入门必刷】数据结构-栈（二）</a><br/> <a href=\"https://blog.csdn.net/MichaelKongChina/article/details/126639789?spm=1001.2014.3001.5502\">【算法入门必刷】数据结构-栈（三）</a><br/> <a href=\"http://t.csdn.cn/eNDhk\">【算法入门必刷】数据结构-栈（四）</a><br/> <a href=\"http://t.csdn.cn/smbnz\">【算法入门必刷】数据结构-栈（五）</a></p>\n</blockquote>\n<blockquote>\n<p>【算法入门必刷】动态规划-线性dp篇系列文章：<br/> <a href=\"http://t.csdn.cn/lidjp\">【算法面试入门必刷】动态规划-线性dp（一）</a><br/> <a href=\"http://t.csdn.cn/E2Hni\">【算法面试入门必刷】动态规划-线性dp（二）</a><br/> <a href=\"http://t.csdn.cn/IuInn\">【算法面试入门必刷】动态规划-线性dp（三）</a></p>\n</blockquote>\n<h1><a id=\"_21\"></a>前言</h1>\n<p><strong>开启刷题，请点击右边链接进行跳转</strong><a href=\"https://www.nowcoder.com/link/pc_csdncpt_123_sf\">点击这里</a></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\112b5712e89946cdaf0a35cf141d5e8e.png\"/></p>\n<h1><a id=\"_25\"></a>算法入门刷题训练</h1>\n<h2><a id=\"AB36_26\"></a>题目AB36：连续子数组最大和</h2>\n<h3><a id=\"_27\"></a>题目分析</h3>\n<blockquote>\n<p>描述<br/> 给定一个长度为 n 的数组，数组中的数为整数。<br/> 请你选择一个非空连续子数组，使该子数组所有数之和尽可能大，子数组最小长度为1。求这个最大值。</p>\n</blockquote>\n<p>题目要求求出连续子数组的最大和。首先有两个关键点，连续以及最大和。因此我们可以定义dp[i]为<strong>以第i-1个数字为结尾的数组的最大和</strong>，根据这样的状态定义我们可以得出递推公式：<strong>dp[i] = max(dp[i-1] + nums[i],nums[]i)</strong>。</p>\n<h3><a id=\"_33\"></a>理论准备</h3>\n<p>任何算法都有相对应的算法模板或者有规律的解题步骤。对于动态规划来讲，做DP相关的算法题要<strong>熟练掌握下面DP解题步骤</strong>，这样有助于在面对到各种各样的题目时能够提高解题效率：</p>\n<blockquote>\n<p>DP解题步骤:</p>\n<ol><li>首先要确定dp数组：是一维，二维还是三维；以及下标的含义是什么？</li><li>根据确定好的dp数组，给出递推公式，也叫状态转移方程。</li><li>确定dp数组是否需要初始化，初始化为多少。</li><li>确定遍历的顺序；这一步在背包相关的DP题目中非常重要。</li><li>根据测试用例进行验证</li></ol>\n</blockquote>\n<h3><a id=\"_44\"></a>题解</h3>\n<p>具体的解决方案如下：</p>\n<ol><li>首先确定dp数组：是一维，二维还是三维；以及下标的含义是什么？</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 这里使用一维dp</span>\n<span class=\"token comment\">// dp[i]为以第i-1个数字为结尾的数组的最大和</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"2\"><li>根据确定好的dp数组，给出递推公式。</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 根据题目分析得出了以下递推公式：</span>\n<span class=\"token comment\">// 以第i-1个数字为结尾的数组的最大和等于（以第i-2个数字为结尾的数组的最大和加上第i-1个数字）与（第i-1个数字）中的较大值</span>\ndp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"3\"><li>确定dp数组是否需要初始化，初始化为多少。</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 根据本题的边界条件，只需要将dp[0]赋值为数组的第一个元素即可</span>\ndp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"4\"><li>确定遍历的顺序；这一步在背包相关的DP题目中非常重要。</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 本题从小到大遍历</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"5\"><li> <p>根据测试用例进行验证：选择所有的测试用例带入验证即可。</p> </li><li> <p>完整代码如下：</p> </li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;limits.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">&gt;&gt;</span> n<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cin <span class=\"token operator\">&gt;&gt;</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>INT_MIN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> result<span class=\"token punctuation\">)</span> result <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    cout <span class=\"token operator\">&lt;&lt;</span> result<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 64 位输出请用 printf(\"%lld\")</span>\n</code></pre>\n<p>当提交成功后，会展示如下界面，那么恭喜这道题目就通过了！<br/> <img alt=\"在这里插入图片描述\" src=\"image\\fea7b9ac73c34532809113f6df924a05.png\"/></p>\n<h1><a id=\"_110\"></a>小结</h1>\n<p>祝愿所有的伙伴都能拿到自己心仪的Offer！📣伙伴们点击<strong>右边链接</strong>立刻开启刷题吧：<a href=\"https://www.nowcoder.com/link/pc_csdncpt_123_sf\">牛客——刷题网</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}