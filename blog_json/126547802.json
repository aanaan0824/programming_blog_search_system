{"blogid": "126547802", "writerAge": "码龄1年", "writerBlogNum": "31", "writerCollect": "424", "writerComment": "679", "writerFan": "1014", "writerGrade": "5级", "writerIntegral": "1798", "writerName": "whispar", "writerProfileAdress": "writer_image\\profile_126547802.jpg", "writerRankTotal": "10501", "writerRankWeekly": "233", "writerThumb": "545", "writerVisitNum": "31095", "blog_read_count": "718", "blog_time": "于 2022-08-26 17:39:38 发布", "blog_title": "【Java初阶】面向对象三大特性之封装", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p></p>\n<p class=\"img-center\"><img alt=\"ced485cbb11e458d81a746890b32cf3f.gif\" height=\"84\" src=\"https://img-blog.csdnimg.cn/ced485cbb11e458d81a746890b32cf3f.gif\" width=\"672\"/></p>\n<p style=\"text-align:center;\"><strong>  🎈🎈 作者 <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><a href=\"https://blog.csdn.net/m0_56361048?spm=1011.2415.3001.5343\" title=\"whispar\">whispar</a></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br/> 🎈🎈专栏 ：<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><a href=\"https://blog.csdn.net/m0_56361048/category_11939682.html\" title=\"Java由浅入深\">Java由浅入深</a></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>\n<p style=\"text-align:center;\">✨矢志不渝✨ </p>\n<p class=\"img-center\"><img alt=\"7abc9c8906564477a6679bb15d368e37.gif\" src=\"https://img-blog.csdnimg.cn/7abc9c8906564477a6679bb15d368e37.gif\"/></p>\n<hr/>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"JavaSE%20%E5%B0%81%E8%A3%85-toc\"><a href=\"#JavaSE%20%E5%B0%81%E8%A3%85\">JavaSE 封装</a></p>\n<p id=\"%E4%B8%80.%20%E5%8C%85%E7%9A%84%E6%A6%82%E5%BF%B5-toc\"><a href=\"#%E4%B8%80.%20%E5%8C%85%E7%9A%84%E6%A6%82%E5%BF%B5\">一. 包的概念</a></p>\n<p id=\"%E4%BA%8C.%20%E5%AF%BC%E5%85%A5%E5%8C%85%E4%B8%AD%E7%9A%84%E7%B1%BB-toc\"><a href=\"#%E4%BA%8C.%20%E5%AF%BC%E5%85%A5%E5%8C%85%E4%B8%AD%E7%9A%84%E7%B1%BB\">二. 导入包中的类</a></p>\n<p id=\"%E4%B8%89.%20%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85-toc\"><a href=\"#%E4%B8%89.%20%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85\">三. 自定义包</a></p>\n<p id=\"%E5%9B%9B.%20%E8%AE%BF%E9%97%AE%E9%99%90%E5%AE%9A%E7%AC%A6-toc\"><a href=\"#%E5%9B%9B.%20%E8%AE%BF%E9%97%AE%E9%99%90%E5%AE%9A%E7%AC%A6\">四. 访问限定符</a></p>\n<hr/>\n<h3 id=\"%E4%B8%80.%20%E5%8C%85%E7%9A%84%E6%A6%82%E5%BF%B5\">一. 包的概念</h3>\n<ul><li> <p>在开发过程中，会定义很多类，随着类越写越多，难免会出现类重名而发生覆盖的情况，为了在使用它们的时候不让编译器混淆，我们给类加上一个限定 (前缀)，把所有java程序保存在各自的目录里面，而该目录就是包，<strong>包的本质实际上就是一个文件夹</strong></p>\n<ul><li> <p>即：把它们放在不同的包里面，调用时再加上前缀即可；这样好处是对同名的类进行了区分；能精确指出我们需要的哪一个；让同名的类在一个程序中可以共存 <strong>包是对类、接口等的封装机制的体现，是一种对类或者接口等的很好的组织方式</strong></p> </li></ul></li></ul>\n<blockquote>\n<p>在同一个工程中允许存在相同名称的类，只要处在不同的包中即可</p>\n</blockquote>\n<h3 id=\"%E4%BA%8C.%20%E5%AF%BC%E5%85%A5%E5%8C%85%E4%B8%AD%E7%9A%84%E7%B1%BB\">二. 导入包中的类</h3>\n<ul><li> <p>使用类的全路径</p>\n<ul><li> <p>Java 中已经提供了很多现成的类供我们使用, 例如Date类：可以使用 java.util.Date 导入 java.util 这个包中的 Date类.</p> </li></ul><pre><code class=\"language-java\">public class TestDemo {\n    public static void main(String[] args) {\n        java.util.Date date = new java.util.Date();\n        System.out.println(date.getTime());\n        \n        java.util.Date date2 = new java.util.Date();\n        System.out.println(date2.getTime());\n        \n    }\n}</code></pre> <p class=\"img-center\"><img alt=\"\" src=\"image\\d151e6eef4245be0da460fcee1dcd381.png\"/></p>\n<ul><li> <p>优点：一定不会发生冲突 缺点：使用麻烦，每 new 一个对象都需要.</p> </li></ul></li><li> <p>使用 import语句导入包</p> <pre><code class=\"language-java\">import java.util.Date;\n​\npublic class TestDemo {\n    public static void main(String[] args) {\n        Date date = new Date();\n        System.out.println(date.getTime());\n    }\n}</code></pre> <p class=\"img-center\"><img alt=\"\" src=\"image\\66503fb44654eca35918af5a1cabe9c1.png\"/></p>\n<ul><li> <p>若使用import.java.util.*导包时，应注意避免<strong>引用不明确</strong>的问题</p>\n<blockquote>\n<p>Error:(5, 9) java: 对Date的引用不明确</p>\n<p>java.sql 中的类 java.sql.Date 和 java.util 中的类 java.util.Date 都匹配</p>\n</blockquote> <p class=\"img-center\"><img alt=\"\" src=\"image\\e11604a4c09d8d2688b23d2c457d53fb.png\"/></p> </li></ul></li><li> <p>import static导入包中静态的方法和字段</p> <pre><code class=\"language-java\">import static java.lang.Math.*;\n//可以直接使用Math类中的所有静态成员\npublic class Test {\n    public static void main(String[] args) {\n        double x = 30;\n        double y = 40;\n// 静态导入的方式写起来更方便一些.\n// double result = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n        double result = sqrt(pow(x, 2) + pow(y, 2));\n        System.out.println(result);\n    }\n}</code></pre>\n<blockquote>\n<p>一个完整类名是包名+类名，在没有 import 导入的情况下，使用一个类需要给出完整的类名</p>\n</blockquote> </li></ul>\n<h3 id=\"%E4%B8%89.%20%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85\">三. 自定义包</h3>\n<blockquote>\n<ol><li> <p>在文件的最上方加上一个 package 语句指定该代码在哪个包中.</p> </li><li> <p>包名需要尽量指定成唯一的名字, 通常会用公司的域名的颠倒形式(例如 com.snut.demo1 ).</p> </li><li> <p>包名要和代码路径相匹配. 例如创建 com.snut.demo1 的包, 那么会存在一个对应的路径com/snut/demo1 来存储代码.</p> </li><li> <p>如果一个类没有 package 语句, 则该类被放到一个默认包中.</p> </li></ol>\n</blockquote>\n<ul><li> <p>建包</p> </li></ul>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\c8c838339d744ee24095cb438b57ee97.png\"/></p>\n<ul><li> <p>建类</p> </li></ul>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\eaeac6d76bc48b694c7fe9496d49a4a5.png\"/></p>\n<ul><li> <p>创建的 Test.java 文件的最上方, 就出现了一个 package 语句</p> </li></ul>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\bab951e94023e681ee3bce6f7c2fa533.png\"/></p>\n<h3 id=\"%E5%9B%9B.%20%E8%AE%BF%E9%97%AE%E9%99%90%E5%AE%9A%E7%AC%A6\">四. 访问限定符</h3>\n<p>Java中提供了四种访问限定符 public&gt;protected&gt;default&gt;private</p>\n<table><thead><tr><th>范围</th><th>private</th><th>default</th><th>protected</th><th>public</th></tr></thead><tbody><tr><td>同一包中的同一类</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>同一包中的不同类</td><td></td><td>√</td><td>√</td><td>√</td></tr><tr><td>不同包中的子类</td><td></td><td></td><td>√</td><td>√</td></tr><tr><td>不同包中的非子类</td><td></td><td></td><td></td><td>√</td></tr></tbody></table>\n<ul><li> <p>private（私有）</p> </li><li> <p><strong>封装：对类内部的细节进行了隐藏/封装，对类外部提供一些公开的接口，供其他的用户进行访问</strong></p> </li></ul>\n<pre><code class=\"language-java\">//封装\n\npublic class TestDemo{\n    public static void main(String[] args) {\n        Person p = new Person();\n        p.setName(\"bit\");\n        System.out.println(p.getName());\n    }\n}\n//对类内部的细节进行了隐藏/封装，对类外部提供一些公开的接口，供其他的用户进行访问\nclass Person{\n    private String name;//此时的name只能在类内部进行访问\n    public int age;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public int getAge() {\n        return age;\n    }\n    public void setAge(int age) {\n        this.age = age;\n    }\n    public void show(){\n        System.out.println(\"姓名: \"+name+\"年龄: \"+age);\n    }\n}\n// private属性：只能在Person类中访问，不能被其他类访问</code></pre>\n<ul><li> <p>default(默认)</p> </li></ul>\n<pre><code class=\"language-java\">class Person{\n    private String name;\n    int age;          //默认\n}\n// default属性：只能被本包中类访问</code></pre>\n<ul><li> <p>public(公开的)</p> </li></ul>\n<blockquote>\n<p>被public所修饰的成员可以在任何类中都能被访问到。可以修饰类，构造方法，数据成员，方法成员</p>\n</blockquote>\n<blockquote>\n<p><strong>         💖如果文章对你有帮助，请多多点赞、收藏、评论、关注支持！！💖  </strong></p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"ced485cbb11e458d81a746890b32cf3f.gif\" height=\"84\" src=\"https://img-blog.csdnimg.cn/ced485cbb11e458d81a746890b32cf3f.gif\" width=\"672\"/></p>\n</div>\n</div>"}