{"blogid": "121244430", "writerAge": "码龄11年", "writerBlogNum": "749", "writerCollect": "26687", "writerComment": "3538", "writerFan": "128365", "writerGrade": "8级", "writerIntegral": "43057", "writerName": "林新发", "writerProfileAdress": "writer_image\\profile_121244430.jpg", "writerRankTotal": "273", "writerRankWeekly": "438", "writerThumb": "9268", "writerVisitNum": "3590191", "blog_read_count": "27254", "blog_time": "于 2021-11-12 14:36:49 发布", "blog_title": "【游戏开发框架】自制Unity通用游戏框架UnityXFramework，详细教程（Unity3D技能树 | tolua | 框架 | 热更新）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night-eighties\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><ul><li><a href=\"#_2\">一、前言</a></li><li><a href=\"#Unity3D_5\">二、Unity3D技能树</a></li><li><a href=\"#UnityXFramework_8\">三、UnityXFramework框架，开源</a></li><li><a href=\"#Mainunity_30\">四、入口场景：Main.unity</a></li><li><a href=\"#_37\">五、目录说明</a></li><li><a href=\"#_86\">六、框架启动流程</a></li><li><a href=\"#_89\">七、框架使用说明</a></li><li><ul><li><a href=\"#1_90\">1、配置表</a></li><li><ul><li><a href=\"#11Excelxmlluajson_92\">1.1、Excel转xml、lua、json</a></li><li><a href=\"#12Cxml_106\">1.2、C#加载xml配置</a></li><li><a href=\"#13lualua_151\">1.3、lua加载lua配置</a></li></ul>\n</li><li><a href=\"#2_164\">2、资源加载</a></li><li><ul><li><a href=\"#21_165\">2.1、资源存放目录</a></li><li><a href=\"#22_170\">2.2、资源路径配置</a></li><li><a href=\"#23_183\">2.3、资源加载与实例化</a></li></ul>\n</li><li><a href=\"#3_196\">3、网络连接与通信</a></li><li><ul><li><a href=\"#31_198\">3.1、网络连接</a></li><li><a href=\"#32_247\">3.2、网络通信</a></li><li><ul><li><a href=\"#321_248\">3.2.1、协议文件</a></li><li><a href=\"#322C_265\">3.2.2、客户端发送协议给服务端：C#层</a></li><li><a href=\"#323Lua_284\">3.2.3、客户端发送协议给服务端：Lua层</a></li><li><a href=\"#323C_298\">3.2.3、服务端下发协议给客户端：C#层</a></li><li><a href=\"#324Lua_318\">3.2.4、服务端下发协议给客户端：Lua层</a></li></ul>\n</li></ul>\n</li><li><a href=\"#4_335\">4、版本号管理</a></li><li><ul><li><a href=\"#41versionbytes_336\">4.1、版本号文件：version.bytes</a></li><li><a href=\"#42VersionMgrcs_345\">4.2、版本号管理器：VersionMgr.cs</a></li></ul>\n</li><li><a href=\"#5_354\">5、日志管理</a></li><li><ul><li><a href=\"#51_355\">5.1、日志打印</a></li><li><a href=\"#52_366\">5.2、输出日志文件</a></li><li><a href=\"#53_370\">5.3、运行时日志预览</a></li><li><a href=\"#54_373\">5.4、更多日志玩法</a></li></ul>\n</li><li><a href=\"#6_375\">6、声音管理</a></li><li><ul><li><a href=\"#61_376\">6.1、声音配置</a></li><li><a href=\"#62_381\">6.2、背景音乐播放</a></li><li><a href=\"#63_399\">6.3、音效播放</a></li><li><a href=\"#64_424\">6.4、音量调节</a></li></ul>\n</li><li><a href=\"#7_448\">7、事件管理</a></li><li><ul><li><a href=\"#71_453\">7.1、定义事件名</a></li><li><a href=\"#72_456\">7.2、事件订阅</a></li><li><a href=\"#73_488\">7.3、抛出事件</a></li></ul>\n</li><li><a href=\"#8_504\">8、界面管理</a></li><li><ul><li><a href=\"#81C_507\">8.1、界面模板：C#</a></li><li><a href=\"#82Lua_556\">8.2、界面模板：Lua</a></li><li><a href=\"#81_608\">8.1、显示界面</a></li><li><a href=\"#82_643\">8.2、关闭界面</a></li></ul>\n</li><li><a href=\"#9_659\">9、图集管理</a></li><li><ul><li><a href=\"#91_661\">9.1、精灵散图存放位置</a></li><li><a href=\"#92_665\">9.2、开启图集功能</a></li><li><a href=\"#932D_Sprite_668\">9.3、安装2D Sprite插件</a></li><li><a href=\"#94_671\">9.4、创建图集文件</a></li><li><a href=\"#95_676\">9.5、执行打图集</a></li><li><a href=\"#96_679\">9.6、图集资源配置</a></li><li><a href=\"#97_686\">9.7、生成精灵图集映射表</a></li><li><a href=\"#98_693\">9.8、代码动态设置精灵图</a></li></ul>\n</li><li><a href=\"#10_709\">10、特效管理</a></li><li><ul><li><a href=\"#101_710\">10.1、利用对象池</a></li><li><a href=\"#102ParticleManager_712\">10.2、ParticleManager</a></li></ul>\n</li><li><a href=\"#11_730\">11、多语言支持</a></li><li><ul><li><a href=\"#111I18N_732\">11.1、国际化语言配置：I18N</a></li><li><a href=\"#112I18NID_737\">11.2、根据I18N的ID设置文本</a></li><li><a href=\"#113I18NText_749\">11.3、预设上使用I18NText组件</a></li><li><a href=\"#114_757\">11.4、切换语言</a></li><li><a href=\"#115_789\">11.5、配置表的多语言支持</a></li></ul>\n</li><li><a href=\"#12_791\">12、预设绑定器</a></li><li><ul><li><a href=\"#121PrefabBinder_793\">12.1、给预设挂PrefabBinder</a></li><li><a href=\"#122_796\">12.2、添加对象绑定</a></li><li><a href=\"#123PrefabBinder_805\">12.3、通过PrefabBinder获取对象</a></li></ul>\n</li><li><a href=\"#13UGUI_823\">13、UGUI拓展</a></li><li><ul><li><a href=\"#131_826\">13.1、新手引导遮罩</a></li><li><a href=\"#132_842\">13.2、国际化多语言文本</a></li><li><a href=\"#133_845\">13.3、精灵图轴对称</a></li><li><a href=\"#134_858\">13.4、循环复用列表</a></li><li><a href=\"#135_862\">13.5、拓展补充</a></li></ul>\n</li><li><a href=\"#14_864\">14、热更新</a></li><li><ul><li><a href=\"#141_866\">14.1、热更新相关的代码</a></li><li><a href=\"#142_869\">14.2、热更新的界面预设</a></li><li><a href=\"#143_875\">14.3、热更新流程</a></li></ul>\n</li><li><a href=\"#15_878\">15、常用工具类</a></li><li><ul><li><a href=\"#151C_880\">15.1、C#层工具类</a></li><li><a href=\"#152Lua_883\">15.2、Lua层工具类</a></li></ul>\n</li><li><a href=\"#16_887\">16、打包工具</a></li><li><ul><li><a href=\"#161AssetBundle_891\">16.1、打AssetBundle</a></li><li><a href=\"#162APP_900\">16.2、打APP整包</a></li><li><a href=\"#163_915\">16.3、打热更包</a></li></ul>\n</li><li><a href=\"#17LuaFramework_927\">17、LuaFramework框架</a></li><li><a href=\"#18_930\">18、红点系统</a></li></ul>\n</li><li><a href=\"#QA_932\">八、Q&amp;A</a></li><li><a href=\"#_935\">九、完毕</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h3><a id=\"_2\"></a>一、前言</h3>\n<p>嗨，大家好，我是新发。<br/> 很多同学评论和私信我，催我出一个<code>Unity3D通用游戏框架</code>，其实一周前我已经写得差不多了，然后我又去搞虚幻引擎了，今天收尾了一下，给大家一个交代，为了表示对广大粉丝的谢意，我做了一份<code>Unity</code>技能树，感谢大家~</p>\n<h3><a id=\"Unity3D_5\"></a>二、Unity3D技能树</h3>\n<p>如下，长图，可放大查看，如果你是<code>Unity3D</code>初学者，不知道从哪着手，希望我下面的技能树可以给你一些帮助，共勉！<br/> <img alt=\"请添加图片描述\" src=\"image\\99fd2bb987754c4693623fa0679fe9e5.png\"/></p>\n<h3><a id=\"UnityXFramework_8\"></a>三、UnityXFramework框架，开源</h3>\n<p>回归正题，<code>Unity3D通用游戏框架</code>来了，框架<code>1.0</code>版本我已经上传到<code>CODE CHINA</code>，框架名字我起为<code>UnityXFramework</code>。</p>\n<p>项目地址：<a href=\"https://codechina.csdn.net/linxinfa/UnityXFramework\">https://codechina.csdn.net/linxinfa/UnityXFramework</a><br/> 注：我使用的<code>Unity</code>版本为<code>2021.1.7f1c1</code>，如果你使用低版本的<code>Unity</code>打开可能会有兼容问题。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0ce70e40122442968d42aa3cf371f5b8.png\"/></p>\n<p><strong>目前版本包含的内容：</strong><br/> 1、集成了<code>tolua Framework</code>框架，集成了<code>sproto</code>协议通信（包括<code>C#</code>和<code>lua</code>）；<br/> 2、封装了各类管理器：配置加载、资源管理器、网络管理器、版本管理器、声音管理器、日志管理器、界面管理器、特效管理器、图集管理器、事件管理器、常用工具类等；<br/> 3、拓展了<code>UGUI</code>，包括精灵图轴对称、新手引导镂空遮罩、国际化多语言<code>Text</code>、循环复用列表等；<br/> 4、多语言支持，中文简体、中文繁体、英语，可自行添加更多语言；<br/> 5、热更新，支持资源热更新和<code>Lua</code>代码热更新，包括热更包版本检测、下载、校验、解压；<br/> 6、打包工具封装，包括打整包<code>APP</code>、<code>AssetBundle</code>和增量包<code>ZIP</code>；<br/> 7、…</p>\n<p>画个图，方便大家理解，<br/> <img alt=\"请添加图片描述\" src=\"image\\1ce72256db7d4726883fb6ed9ba2cac4.png\"/></p>\n<p>下面，我就介绍一下<code>UnityXFramework</code>框架的使用方法，时间有限，可能有一些地方封装得不是很好，希望各位大佬提出改进意见，不过为了考虑通用性，也不宜加太多东西~</p>\n<h3><a id=\"Mainunity_30\"></a>四、入口场景：Main.unity</h3>\n<p>在介绍细节之前，我们先打开入口场景<code>Main.unity</code>，看能否正常运行，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\49f17e4a9e6744caa9cbfff64dfb64d3.png\"/><br/> 运行效果如下，<br/> <img alt=\"请添加图片描述\" src=\"https://img-blog.csdnimg.cn/660600feb2314090982c82b4f7226beb.gif\"/><br/> 如果你运行也能正常进入，恭喜你，你已经成功运行框架了~</p>\n<h3><a id=\"_37\"></a>五、目录说明</h3>\n<p>现在，我们来看看项目目录结构，如下，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\aea14b7ddff84e02a93865d2d84f3da0.png\"/><br/> 目录说明：</p>\n<table><thead><tr><th align=\"left\">目录</th><th align=\"left\">说明</th></tr></thead><tbody><tr><td align=\"left\">Editor</td><td align=\"left\">存放一些编辑器脚本，比如打包工具</td></tr><tr><td align=\"left\">GameRes</td><td align=\"left\">存放熟肉资源，比如界面预设、模型预设、特效预设等，该目录下的文件会打包成<code>AssetBundle</code>并放在<code>StreamingAssets</code>目录中</td></tr><tr><td align=\"left\">LuaFramework</td><td align=\"left\"><code>tolua</code>框架</td></tr><tr><td align=\"left\">Plugins</td><td align=\"left\">存放<code>SDK</code>和库文件</td></tr><tr><td align=\"left\">RawAssets</td><td align=\"left\">存放生肉资源，比如预设依赖的图片、字体等，模型依赖的网格、材质、贴图等</td></tr><tr><td align=\"left\">Resources</td><td align=\"left\">存放<code>APP</code>启动时必要的一些基础资源，非必要的建议存放到<code>GameRes</code>中，方便资源热更</td></tr><tr><td align=\"left\">Scenes</td><td align=\"left\">存放场景文件</td></tr><tr><td align=\"left\">Scripts</td><td align=\"left\">存放<code>C#</code>脚本，子目录见下面的表格说明</td></tr><tr><td align=\"left\">StreamingAssets</td><td align=\"left\">存放<code>AssetBundle</code>文件和一些<code>Raw</code>资源（打包时<code>Unity</code>不会帮我们做加密）</td></tr></tbody></table>\n<p>其中，展开<code>Scripts</code>文件夹，可以看到子目录结构如下，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2f5be86836304a9690b9c6f0787aba7b.png\"/><br/> <code>Scripts</code>目录说明：</p>\n<table><thead><tr><th align=\"left\">目录</th><th align=\"left\">说明</th></tr></thead><tbody><tr><td align=\"left\">3rd</td><td align=\"left\">第上方库源码，比如<code>LitJson</code></td></tr><tr><td align=\"left\">Framework</td><td align=\"left\">存放框架代码</td></tr><tr><td align=\"left\">Animation</td><td align=\"left\">动画相关的代码，动画帧事件</td></tr><tr><td align=\"left\">Audio</td><td align=\"left\">声音相关的代码，声音管理器</td></tr><tr><td align=\"left\">Common</td><td align=\"left\">一些共用模块的代码，比如全局变量、<code>Util</code>工具类脚本等</td></tr><tr><td align=\"left\">Debug</td><td align=\"left\">调试相关的代码，日志输出、写日志文件和运行时预览</td></tr><tr><td align=\"left\">Encrypt</td><td align=\"left\">加密相关的代码，对资源和<code>Lua</code>代码进行解密和解密</td></tr><tr><td align=\"left\">Event</td><td align=\"left\">事件相关的代码，事件触发器，事件定义</td></tr><tr><td align=\"left\">I18N</td><td align=\"left\">国际化语言相关的代码，支持多语言切换</td></tr><tr><td align=\"left\">Network</td><td align=\"left\">网络相关的代码，网络连接、消息通信</td></tr><tr><td align=\"left\">Panel</td><td align=\"left\">界面管理器相关的代码，界面管理器</td></tr><tr><td align=\"left\">Particle</td><td align=\"left\">粒子管理器相关代码，粒子管理器</td></tr><tr><td align=\"left\">Resource</td><td align=\"left\">资源加载相关的代码，资源管理器</td></tr><tr><td align=\"left\">Sprite</td><td align=\"left\">图集精灵管理相关的代码，图集精灵管理器</td></tr><tr><td align=\"left\">sproto</td><td align=\"left\"><code>sproto</code>的<code>C#</code>封装</td></tr><tr><td align=\"left\">SprotoDef</td><td align=\"left\"><code>sproto</code>的<code>C#</code>协议定义</td></tr><tr><td align=\"left\">Timer</td><td align=\"left\">定时器相关的代码</td></tr><tr><td align=\"left\">UGUIExpand</td><td align=\"left\"><code>UGUI</code>拓展，比如精灵图轴对称、新手引导镂空遮罩、国际化多语言<code>Text</code>、循环复用列表等</td></tr><tr><td align=\"left\">Version</td><td align=\"left\">版本号相关的代码，版本号管理器</td></tr><tr><td align=\"left\">Logic</td><td align=\"left\">游戏逻辑相关的代码</td></tr><tr><td align=\"left\">View</td><td align=\"left\"><code>UI</code>界面交互相关的代码</td></tr><tr><td align=\"left\">StartUp.cs</td><td align=\"left\">启动脚本</td></tr></tbody></table>\n<p>后续游戏业务相关的<code>C#</code>代码，添加到<code>Logic</code>和<code>View</code>目录即可，不过，建议游戏业务使用<code>Lua</code>来开发，方便热更迭代和<code>Bug</code>修复。<br/> <code>Lua</code>游戏业务代码放在<code>Luaframework</code>目录下的<code>Logic</code>和<code>View</code>目录中。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a12a92f32a8d4027966845515994004a.png\"/><br/> 其他目录在下文讲解具体模块时我再展开说~</p>\n<h3><a id=\"_86\"></a>六、框架启动流程</h3>\n<p>框架启动流程如下，入口场景是<code>Main.unity</code>，入口脚本是<code>StartUp.cs</code>，在<code>Awake</code>函数中执行初始化，调用热更新逻辑，回调后再初始化一些模块，然后启动<code>LuaFramework</code>框架，会载入<code>Lua</code>脚本，启动完毕后，执行<code>Main.lua</code>脚本，接下来就是<code>Lua</code>的业务代码了，比如登录界面和登录逻辑都使用<code>Lua</code>来实现，在<code>Main.lua</code>中打开登录界面，我写的演示代码就是这个流程。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5356f0bb9c1d40ff8685c804c64a4075.png\"/></p>\n<h3><a id=\"_89\"></a>七、框架使用说明</h3>\n<h4><a id=\"1_90\"></a>1、配置表</h4>\n<p>配置表可以是<code>xml</code>、<code>lua</code>或<code>json</code>，你可以手动创建这些配置表，也可以通过<code>Excel</code>来生成。</p>\n<h5><a id=\"11Excelxmlluajson_92\"></a>1.1、Excel转xml、lua、json</h5>\n<p>我也写了一个<code>Excel</code>转<code>xml</code>、<code>lua</code>、<code>json</code>的<code>python</code>工具，放在<code>UnityXFramework\\Tools\\ExcelCfg</code>目录中，</p>\n<blockquote>\n<p>注：你可以继续在<code>Tools</code>目录中添加一些<code>python</code>工具。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\40976924091e48979d189ac24aef6358.png\"/><br/> 你需要安装<code>python3</code>和<code>openpyxl</code>库，我之前写过一篇教程，可以参见我这篇文章：<a href=\"https://blog.csdn.net/linxinfa/article/details/116309278\">《教你使用python读写Excel表格（增删改查操作），使用openpyxl库》</a><br/> <code>Excel</code>文件放在<code>Excels</code>文件夹中，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5f389e37749541118dfdf3d5ee3f9f70.png\"/><br/> 在<code>gen.py</code>中指定你要转换的<code>Excel</code>，如下，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\aec5fd900f3d43f59b41223aec1de63e.png\"/><br/> 执行<code>python</code>脚本即可，你也可以直接双击<code>gen.bat</code>，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\306c09c5df3b45a6abc56d8ea5339a79.png\"/><br/> 生成的配置表在<code>output</code>文件夹中，你可以自行修改生成的路径，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dd99cedf553146329415609e9d84c053.png\"/></p>\n<h5><a id=\"12Cxml_106\"></a>1.2、C#加载xml配置</h5>\n<p><code>C#</code>加载的配置表放在<code>Assets/GameRes/Config</code>目录中，以声音配置<code>audioConfig.bytes</code>为例，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0436db800c6144ed8c93311ffbbc1ba7.png\"/><br/> 因为打包<code>AssetBundle</code>无法识别<code>xml</code>，所以使用<code>bytes</code>作为文件后缀名，内容其实是<code>xml</code>格式的，如下</p>\n<blockquote>\n<p>注：其中的<code>id 6</code>是资源<code>id</code>，所有动态加载的资源都会有一个唯一的资源<code>id</code>，资源在<code>resources.bytes</code>中配置。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\927a35feb34a4cb2879c32b9d9cbb4b9.png\"/><br/> 要加载<code>audioConfig.bytes</code>配置表，我们需要定义一个字段名与<code>xml</code>字段名一致的<code>item</code>类，继承<code>ConfigItem</code>类，如下</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AudioCfgItem</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ConfigItem</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> volume<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> channel<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后就可以通过<code>ConfigFile</code>对象来直接加载配置表了，如下</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// 声明一个ConfigFile变量</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">ConfigFile<span class=\"token punctuation\">&lt;</span>AudioCfgItem<span class=\"token punctuation\">&gt;</span></span> m_audioCfg<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// 加载配置表</span>\nm_audioCfg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConfigFile<span class=\"token punctuation\">&lt;</span>AudioCfgItem<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"audioConfig\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>接着我们就可以封装一些方法来查询配置了，如下</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">AudioCfgItem</span> <span class=\"token function\">GetAudioCfg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> audioName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> m_audioCfg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cfgItem <span class=\"token operator\">=</span> m_audioCfg<span class=\"token punctuation\">.</span><span class=\"token function\">GetItem</span><span class=\"token punctuation\">(</span>audioName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> cfgItem<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        GameLogger<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null == audioCfg, name: \"</span> <span class=\"token operator\">+</span> audioName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> cfgItem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"13lualua_151\"></a>1.3、lua加载lua配置</h5>\n<p><code>lua</code>加载配置更简单，首先把<code>lua</code>配置表放在<code>Assets/LuaFramework/Lua/Config</code>目录中，比如<code>TestLuaCfg.lua</code>，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\88f85bee3bc54e69a94554684245be68.png\"/><br/> 配置内容如下，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d3b3bbcbe3234b33a29c6c90f8ce4037.png\"/><br/> 要加载配置表，只需要<code>require</code>即可，例：</p>\n<pre><code class=\"prism language-lua\"><span class=\"token comment\">-- 测试lua配置加载</span>\n<span class=\"token keyword\">local</span> TestLuaCfg <span class=\"token operator\">=</span> require <span class=\"token string\">\"Config/TestLuaCfg\"</span>\n\n<span class=\"token comment\">-- 打印配置表</span>\nLuaUtil<span class=\"token punctuation\">.</span><span class=\"token function\">PrintTable</span><span class=\"token punctuation\">(</span>TestLuaCfg<span class=\"token punctuation\">)</span>\n</code></pre>\n<h4><a id=\"2_164\"></a>2、资源加载</h4>\n<h5><a id=\"21_165\"></a>2.1、资源存放目录</h5>\n<p>资源分为生肉资源和熟肉资源，生肉资源就是未加工包装的资源，熟肉资源就是加工包装后的资源。<br/> 比如，我们制作一个界面预设，这个界面预设依赖的精灵图就是生肉资源，界面预设本身就是熟肉资源。<br/> 生肉资源放在<code>RawAssets</code>目录中，生肉资源放在<code>GameRes</code>目录中。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f7d2356250df49c78158f7f8fb427688.png\"/></p>\n<h5><a id=\"22_170\"></a>2.2、资源路径配置</h5>\n<p>动态加载的熟肉资源，需要配置在<code>resources.bytes</code>中，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b8ffc22ea5ac4978b7ead0355165848f.png\"/><br/> 如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8f5ff25b45cd47caaeac877626240b62.png\"/></p>\n<p>上面的配置你可以手动配置，也可以点击菜单<code>Tools/Aux/资源添加编辑器</code>（或者按快捷键<code>Alt + G</code>），<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e99cba7a1fee498e8a4b45559a55200e.png\"/><br/> 此时会打开一个窗口，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\25cfe8bdd54444f2ae5c66b344cf0ef0.png\"/><br/> 把资源拖到<code>资源对象</code>栏中，然后输入<code>资源描述</code>，最后点击<code>Add</code>按钮即可，它会自动在<code>resources.bytes</code>中添加一行配置；如果是已添加过渡，则会显示<code>Update</code>按钮，如下，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0359bdcb824b400b8a0661bec73fc7ba.png\"/></p>\n<h5><a id=\"23_183\"></a>2.3、资源加载与实例化</h5>\n<p>加载资源的时候，可以通过资源<code>id</code>加载，也可以通过<code>uri</code>加载（即配置中的<code>editorPath</code>字段的值），例：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// 通过uri加载并实例化</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> panelObj <span class=\"token operator\">=</span> ResourceManager<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Instantiate</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>GameObject<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BaseRes/HotUpdatePanel.prefab\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 通过id加载并实例化</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cubeObj <span class=\"token operator\">=</span> ResourceManager<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Instantiate</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>GameObject<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>框架底层我封装的资源加载流程是这样的，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b33d462404e4448f920aefec677cd0dd.png\"/></p>\n<blockquote>\n<p>注：非<code>Editor</code>环境，资源会以<code>AssetBundle</code>的方式加载，打<code>AssetBundle</code>的逻辑我已经在打包工具中实现了，具体见下文中打包工具的介绍。</p>\n</blockquote>\n<h4><a id=\"3_196\"></a>3、网络连接与通信</h4>\n<p>网络连接使用的是<code>System.Net.Sockets</code>命名空间下的<code>Socket</code>封装的。</p>\n<h5><a id=\"31_198\"></a>3.1、网络连接</h5>\n<p><code>C#</code>层示例：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">INetStateListener</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Awake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">// 设置网络状态监听</span>\n\t\tClientNet<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">AddNetStateListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 测试网络连接</span>\n        ClientNet<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnNetStateChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NetState</span> state<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> param <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">case</span> NetState<span class=\"token punctuation\">.</span>ConnectSuccess<span class=\"token punctuation\">:</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    GameLogger<span class=\"token punctuation\">.</span><span class=\"token function\">LogGreen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接服务端成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">case</span> NetState<span class=\"token punctuation\">.</span>ConnectFail<span class=\"token punctuation\">:</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    GameLogger<span class=\"token punctuation\">.</span><span class=\"token function\">LogYellow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接服务端失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    GameLogger<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"网络状态更新: \"</span> <span class=\"token operator\">+</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>lua</code>层示例：</p>\n<pre><code class=\"prism language-lua\">Network<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8888</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>ok<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">-- 连接回调</span>\n  \n    <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h5><a id=\"32_247\"></a>3.2、网络通信</h5>\n<h6><a id=\"321_248\"></a>3.2.1、协议文件</h6>\n<p>网络通信，框架中封装的通信协议是<code>sproto</code>，你也可以改成<code>protobuf</code>协议之类的。我这里以<code>sproto</code>协议的通信为例。<br/> 我们需要定义协议，包括协议名，协议字段和数据类型等，协议又分为<code>c2s</code>和<code>s2c</code>，其中<code>c2s</code>表示<code>client to server</code>，即客户端发送给服务端的消息，同理，<code>s2c</code>就是<code>server to client</code>，即服务端下发给客户端的消息。<br/> 比如有一个<code>sayhello</code>的<code>c2s</code>的协议，<code>sayhello</code>是协议名，<code>what</code>是字段名，它的数据类型是<code>string</code>，<code>response</code>表示服务端返回，返回了<code>error_code</code>和<code>msg</code>两个字段，如下，</p>\n<pre><code class=\"prism language-json\">sayhello <span class=\"token number\">1</span> <span class=\"token punctuation\">{<!-- --></span>\n\trequest <span class=\"token punctuation\">{<!-- --></span>\n\t  what <span class=\"token number\">0</span> <span class=\"token operator\">:</span> string\n\t<span class=\"token punctuation\">}</span>\n\tresponse <span class=\"token punctuation\">{<!-- --></span>\n\t  error_code <span class=\"token number\">0</span> <span class=\"token operator\">:</span> integer\n\t  msg <span class=\"token number\">1</span> <span class=\"token operator\">:</span> string\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>因为需求上需要兼顾<code>C#</code>和<code>lua</code>，所以分别定义<code>C#</code>协议文件和<code>lua</code>协议文件，画个图方便理解，如下，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f71c991facaf4b36866f7889d9a2d83f.png\"/></p>\n<h6><a id=\"322C_265\"></a>3.2.2、客户端发送协议给服务端：C#层</h6>\n<p><code>C#</code>层协议发送通过<code>ClientNet</code>的<code>Send</code>方法来发送，</p>\n<blockquote>\n<p>注意：发送协议时需要先正常连接服务端之后再发</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\28cc10b912fb40678bbaa636a5901455.png\"/><br/> 示例：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// 构造SpObject对象</span>\n<span class=\"token class-name\">SpObject</span> spObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SpObject</span><span class=\"token punctuation\">(</span>SpObject<span class=\"token punctuation\">.</span>ArgType<span class=\"token punctuation\">.</span>Table<span class=\"token punctuation\">,</span> <span class=\"token string\">\"what\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hi, i am c#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 通过ClientNet发送协议消息</span>\nClientNet<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sayhello\"</span><span class=\"token punctuation\">,</span> spObj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>protoname<span class=\"token punctuation\">,</span> spobject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 服务端response返回</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> error_code <span class=\"token operator\">=</span> SpObject<span class=\"token punctuation\">.</span><span class=\"token function\">AsInt</span><span class=\"token punctuation\">(</span>spobject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"error_code\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> msg <span class=\"token operator\">=</span> SpObject<span class=\"token punctuation\">.</span><span class=\"token function\">AsString</span><span class=\"token punctuation\">(</span>spobject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    GameLogger<span class=\"token punctuation\">.</span><span class=\"token function\">LogFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}: {1}\"</span><span class=\"token punctuation\">,</span> error_code<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h6><a id=\"323Lua_284\"></a>3.2.3、客户端发送协议给服务端：Lua层</h6>\n<p><code>lua</code>层协议发送通过<code>Network.SendData</code>方法，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4bef882cd968488aa72c7f2338125c6a.png\"/><br/> 示例：</p>\n<pre><code class=\"prism language-lua\"><span class=\"token comment\">-- 构造数据</span>\n<span class=\"token keyword\">local</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> what <span class=\"token operator\">=</span> <span class=\"token string\">\"hi, i am unity from lua\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">-- 发送协议数据</span>\nNetwork<span class=\"token punctuation\">.</span><span class=\"token function\">SendData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sayhello\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">-- 回到</span>\n    \t<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"on response: \"</span> <span class=\"token operator\">..</span> data<span class=\"token punctuation\">.</span>error_code <span class=\"token operator\">..</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">..</span> data<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">)</span>\n</code></pre>\n<h6><a id=\"323C_298\"></a>3.2.3、服务端下发协议给客户端：C#层</h6>\n<p>服务端下发协议给客户端，如果要在<code>C#</code>层处理，需要提前注册协议的响应函数，示例：</p>\n<pre><code class=\"prism language-csharp\">ProtocolProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">AddCallback</span><span class=\"token punctuation\">(</span>SpRpcOp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"协议名\"</span><span class=\"token punctuation\">,</span> 响应函数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>建议统一放在<code>NetworkMsgEventRegister</code>脚本中进行注册，例：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NetworkMsgEventRegister</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegistNetworkMsgEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        ProtocolProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">AddCallback</span><span class=\"token punctuation\">(</span>SpRpcOp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"heartbeat\"</span><span class=\"token punctuation\">,</span> OnHeartBeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnHeartBeat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> protoName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SpObject</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// TODO</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h6><a id=\"324Lua_318\"></a>3.2.4、服务端下发协议给客户端：Lua层</h6>\n<p>服务端下发协议给客户端，如果要在<code>Lua</code>层处理，也需要提前注册协议的响应函数，建议统一在<code>s2cProcessTab.lua</code>脚本中，注册，例：</p>\n<pre><code class=\"prism language-lua\">s2cProcessTab <span class=\"token operator\">=</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">-- 数字1表示C#层和lua层都进行响应</span>\n\t<span class=\"token comment\">-- 如果是2，则表示只在lua中进行响应，即使你在C#层注册了响应也不会在C#层触发</span>\n    heartbeat <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> HeartMgr<span class=\"token punctuation\">.</span>OnHeartBeat <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>其中响应函数如下</p>\n<pre><code class=\"prism language-lua\"><span class=\"token comment\">-- 响应函数</span>\n<span class=\"token keyword\">function</span> HeartMgr<span class=\"token punctuation\">.</span><span class=\"token function\">OnHeartBeat</span><span class=\"token punctuation\">(</span>protoName<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">-- TODO</span>\n<span class=\"token keyword\">end</span>\n</code></pre>\n<h4><a id=\"4_335\"></a>4、版本号管理</h4>\n<h5><a id=\"41versionbytes_336\"></a>4.1、版本号文件：version.bytes</h5>\n<p>游戏的版本号包括<code>app_version</code>和<code>res_version</code>，保存在<code>Assets/Resources</code>目录的<code>version.bytes</code>文件中，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4aa58d39bedd47058ed31afa17c82489.png\"/><br/> 如下：</p>\n<pre><code class=\"prism language-json\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"app_version\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"1.0.0.0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"res_version\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"1.0.0.0\"</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>app_version</code>是打整包时的整包版本号；<code>res_version</code>是资源版本号，打整包时默认与<code>app_version</code>相等，打增量包时，需要对<code>res_version</code>加一。因为<code>version.bytes</code>是放在<code>Resources</code>目录中的，出包后它不能动态修改，所以我们需要另外缓存一个当前最新的版本号，增量更新时，缓存一个<code>version.bytes</code>到<code>Application.persistentDataPath + \"/update/\"</code>目录中，如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7dcc35e37a514eccb4bde19cad14079d.png\"/></p>\n<h5><a id=\"42VersionMgrcs_345\"></a>4.2、版本号管理器：VersionMgr.cs</h5>\n<p>版本号管理器逻辑封装在<code>VersionMgr.cs</code>脚本中，</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// 获取app版本号</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> appVer <span class=\"token operator\">=</span> VersionMgr<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>appVersion<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取res版本号</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> resVer <span class=\"token operator\">=</span> VersionMgr<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>resVersion<span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"5_354\"></a>5、日志管理</h4>\n<h5><a id=\"51_355\"></a>5.1、日志打印</h5>\n<p>打印日志封装了一个<code>GameLogger</code>类，可以根据需要答应带颜色的日志，例：</p>\n<pre><code class=\"prism language-csharp\">GameLogger<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"普通日志\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nGameLogger<span class=\"token punctuation\">.</span><span class=\"token function\">LogGreen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"绿色文本日志\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nGameLogger<span class=\"token punctuation\">.</span><span class=\"token function\">LogYellow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"黄色文本日志\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nGameLogger<span class=\"token punctuation\">.</span><span class=\"token function\">LogCyan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"蓝绿色文本日志\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nGameLogger<span class=\"token punctuation\">.</span><span class=\"token function\">LogRed</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红色文本日志\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>效果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2a61559d326741d697a3f70e4cf3f573.png\"/></p>\n<h5><a id=\"52_366\"></a>5.2、输出日志文件</h5>\n<p>另外，会自动保存日志文件，<code>Editor</code>环境保存在<code>Assets</code>统计目录的<code>gamelog</code>文件夹中，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e0e0e1c470f44c6581295a7f745f3458.png\"/><br/> 非<code>Editor</code>环境，则保存到<code>Application.persistentDataPath + \"/gamelog/\"</code>文件夹中。</p>\n<h5><a id=\"53_370\"></a>5.3、运行时日志预览</h5>\n<p>封装了一个<code>LogCat.cs</code>脚本，支持运行时对日志进行预览，在<code>PC</code>环境下按<code>F4</code>，在移动端使用四根手指头同时点击屏幕即可打开日志预览窗口，如下：<br/> <img alt=\"请添加图片描述\" src=\"https://img-blog.csdnimg.cn/06eb1c1ff415472385d9430b9b2d2fcb.gif\"/></p>\n<h5><a id=\"54_373\"></a>5.4、更多日志玩法</h5>\n<p>我之前写过一篇文章，推荐大家看下：<a href=\"https://linxinfa.blog.csdn.net/article/details/119280053\">《【游戏开发进阶】新发带你玩转Unity日志打印技巧（彩色日志 | 日志存储与上传 | 日志开关 | 日志双击溯源）》</a></p>\n<h4><a id=\"6_375\"></a>6、声音管理</h4>\n<h5><a id=\"61_376\"></a>6.1、声音配置</h5>\n<p>声音作为资源，也需要进行资源配置，见上面第<code>2.2</code>节的资源路径配置的操作，同时会自动添加一个声音名字到资源<code>id</code>的映射到<code>audioConfig.bytes</code>中，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4637eb518da541a291b8d0fe77fba61a.png\"/><br/> 如下，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4e67184288a544a4987da371cfa08218.png\"/></p>\n<h5><a id=\"62_381\"></a>6.2、背景音乐播放</h5>\n<p>封装了一个声音管理器<code>AudioMgr.cs</code>，播放背景音乐的接口如下</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// AudioMgr.cs</span>\n\n<span class=\"token comment\">/// &lt;summary&gt;</span>\n<span class=\"token comment\">/// 播放音乐，比如背景音乐</span>\n<span class=\"token comment\">/// &lt;/summary&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"audioName\"&gt;声音名字，需要带后缀&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"loop\"&gt;是否循环&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"fadeIn\"&gt;是否键入&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"pauseOther\"&gt;是否停止其他背景音乐&lt;/param&gt;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PlayMusic</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> audioName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> loop<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> fadeIn<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> pauseOther<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>例：</p>\n<pre><code class=\"prism language-csharp\">AudioMgr<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">PlayMusic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bg.wav\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h5><a id=\"63_399\"></a>6.3、音效播放</h5>\n<p>播放音效的接口如下</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// AudioMgr.cs</span>\n\n<span class=\"token comment\">/// &lt;summary&gt;</span>\n<span class=\"token comment\">/// 播放音效</span>\n<span class=\"token comment\">/// &lt;/summary&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"audioName\"&gt;声音名字，需要带后缀&lt;/param&gt;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> audioName<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/// &lt;summary&gt;</span>\n<span class=\"token comment\">/// 播放音效</span>\n<span class=\"token comment\">/// &lt;/summary&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"audioName\"&gt;声音名字，需要带后缀&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"loop\"&gt;是否循环&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"fadeIn\"&gt;是否渐入&lt;/param&gt;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PlaySoundEx</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> audioName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> loop<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> fadeIn<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>例：</p>\n<pre><code class=\"prism language-csharp\">AudioMgr<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"coin.ogg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nAudioMgr<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">PlaySoundEx</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"award.ogg\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h5><a id=\"64_424\"></a>6.4、音量调节</h5>\n<p>我提供了音乐音量和音效音量两个接口，接口</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// AudioMgr.cs</span>\n\n<span class=\"token comment\">/// &lt;summary&gt;</span>\n<span class=\"token comment\">/// 调节音效音量</span>\n<span class=\"token comment\">/// &lt;/summary&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"factor\"&gt;0到1&lt;/param&gt;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">UpdateSoundVolume</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">float</span></span> factor<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/// &lt;summary&gt;</span>\n<span class=\"token comment\">/// 调节音乐音量</span>\n<span class=\"token comment\">/// &lt;/summary&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"factor\"&gt;0到1&lt;/param&gt;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">UpdateMusicVolume</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">float</span></span> factor<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>示例</p>\n<pre><code class=\"prism language-csharp\">AudioMgr<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">UpdateSoundVolume</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.8f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nAudioMgr<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">UpdateMusicVolume</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"7_448\"></a>7、事件管理</h4>\n<p>根据观察者模式封装了一个事件管理器：<code>EventDispatcher.cs</code>，可以订阅事件，然后通过抛事件的方式来触发一些响应逻辑。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\828dea0aef6b4a0eadbb54bec077a91d.png\"/></p>\n<h5><a id=\"71_453\"></a>7.1、定义事件名</h5>\n<p>建议在<code>EventNameDef.cs</code>中定义事件名，例：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\22cda18fc66e4f6a8415590158298d52.png\"/></p>\n<h5><a id=\"72_456\"></a>7.2、事件订阅</h5>\n<p>接口</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// EventDispatcher.cs</span>\n\n<span class=\"token comment\">/// &lt;summary&gt;</span>\n<span class=\"token comment\">/// 注册事件</span>\n<span class=\"token comment\">/// &lt;/summary&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"evt\"&gt;事件名&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"handler\"&gt;响应函数&lt;/param&gt;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Regist</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> evt<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MyEventHandler</span> handler<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/// &lt;summary&gt;</span>\n<span class=\"token comment\">/// 注销事件</span>\n<span class=\"token comment\">/// &lt;/summary&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"evt\"&gt;事件名&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"handler\"&gt;响应函数&lt;/param&gt;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">UnRegist</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> evt<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MyEventHandler</span> handler<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>示例：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// 注册事件</span>\nEventDispatcher<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">Regist</span><span class=\"token punctuation\">(</span>EventNameDef<span class=\"token punctuation\">.</span>LANGUAGE_TYPE_CHANGED<span class=\"token punctuation\">,</span> OnLanguageChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 注销事件</span>\nEventDispatcher<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">UnRegist</span><span class=\"token punctuation\">(</span>EventNameDef<span class=\"token punctuation\">.</span>LANGUAGE_TYPE_CHANGED<span class=\"token punctuation\">,</span> OnLanguageChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 响应函数</span>\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnLanguageChange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">params</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"73_488\"></a>7.3、抛出事件</h5>\n<p>接口</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// EventDispatcher.cs</span>\n\n<span class=\"token comment\">/// &lt;summary&gt;</span>\n<span class=\"token comment\">/// 抛出事件</span>\n<span class=\"token comment\">/// &lt;/summary&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"evt\"&gt;事件名&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"objs\"&gt;参数&lt;/param&gt;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> evt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">params</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> objs<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>示例：</p>\n<pre><code class=\"prism language-csharp\">EventDispatcher<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">DispatchEvent</span><span class=\"token punctuation\">(</span>EventNameDef<span class=\"token punctuation\">.</span>LANGUAGE_TYPE_CHANGED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"8_504\"></a>8、界面管理</h4>\n<p>界面具备生命周期，为了方便管理，封装了界面类和界面管理器，画个图方便大家理解，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\02166f178be643759e1919254053742f.png\"/></p>\n<h5><a id=\"81C_507\"></a>8.1、界面模板：C#</h5>\n<p>界面基类是<code>BasePanel</code>，我们去写具体的界面代码时要继承<code>BasePanel</code>，按照固定的模板来写即可，如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>UI</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">XXXPanel</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BasePanel</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">// GlobalObjs.s_gamePanel：根据具体的界面所在的层来定</span>\n\t\tPanelMgr<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ShowPanel</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>HotUpdatePanel<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>界面ID<span class=\"token punctuation\">,</span> GlobalObjs<span class=\"token punctuation\">.</span>s_gamePanel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnShow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Transform</span> parent<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnShow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> panelObj <span class=\"token operator\">=</span> ResourceManager<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Instantiate</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>GameObject<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>界面预设资源ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        panelObj<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">SetParent</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> binder <span class=\"token operator\">=</span> panelObj<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>PrefabBinder<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SetUi</span><span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetUi</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrefabBinder</span> binder<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">// TODO: UI交互</span>\n\t\t<span class=\"token comment\">/* 示例\n\t\tUGUITool.SetButton(binder, \"closeBtn\", (btn) =&gt; {\n            this.Hide();\n        });\n        */</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 注册事件</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegistEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">RegistEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// EventDispatcher.instance.Regist(EventNameDef.事件名, 响应函数);</span>\n    <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 注销事件</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">UnRegistEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnRegistEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// EventDispatcher.instance.UnRegist(EventNameDef.事件名, 响应函数);</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"82Lua_556\"></a>8.2、界面模板：Lua</h5>\n<p>同理，用<code>Lua</code>写界面时也按照模板来写，如下</p>\n<pre><code class=\"prism language-lua\"><span class=\"token comment\">-- XXX界面</span>\n\nXXXPanel <span class=\"token operator\">=</span> XXXPanel <span class=\"token keyword\">or</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\nXXXPanel<span class=\"token punctuation\">.</span>__index <span class=\"token operator\">=</span> XXXPanel \n\n<span class=\"token keyword\">local</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n\n<span class=\"token keyword\">function</span> XXXPanel<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    instance <span class=\"token operator\">=</span> UITool<span class=\"token punctuation\">.</span><span class=\"token function\">CreatePanelObj</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> XXXPanel <span class=\"token punctuation\">,</span> <span class=\"token string\">'XXXPanel '</span><span class=\"token punctuation\">,</span> \n    \tPANEL_ID<span class=\"token punctuation\">.</span>界面ID<span class=\"token punctuation\">,</span> GlobalObjs<span class=\"token punctuation\">.</span>s_gamePanel<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> XXXPanel<span class=\"token punctuation\">.</span><span class=\"token function\">Hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    UITool<span class=\"token punctuation\">.</span><span class=\"token function\">HidePanel</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> XXXPanel<span class=\"token punctuation\">:</span><span class=\"token function\">OnShow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> panelObj <span class=\"token operator\">=</span> UITool<span class=\"token punctuation\">.</span><span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> 界面预设资源ID<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>panelObj <span class=\"token operator\">=</span> panelObj\n    <span class=\"token keyword\">local</span> binder <span class=\"token operator\">=</span> panelObj<span class=\"token punctuation\">:</span><span class=\"token function\">GetComponent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PrefabBinder\"</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">:</span><span class=\"token function\">SetUi</span><span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- UI交互</span>\n<span class=\"token keyword\">function</span> XXXPanel<span class=\"token punctuation\">:</span><span class=\"token function\">SetUi</span><span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">--[[\n\t示例:\n\tUGUITool.SetButton(binder, \"closeBtn\", function (btn)\n        self.Hide()\n    end)\n\t]]</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> LoginPanel<span class=\"token punctuation\">:</span><span class=\"token function\">OnHide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    LuaUtil<span class=\"token punctuation\">.</span><span class=\"token function\">SafeDestroyObj</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>panelObj<span class=\"token punctuation\">)</span>\n    instance <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- 注册事件</span>\n<span class=\"token keyword\">function</span> XXXPanel<span class=\"token punctuation\">:</span><span class=\"token function\">RegistEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">-- EventDispatcher.instance:Regist(事件名, 响应函数)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- 注销事件</span>\n<span class=\"token keyword\">function</span> XXXPanel<span class=\"token punctuation\">:</span><span class=\"token function\">UnRegistEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">-- EventDispatcher.instance:UnRegist(事件名, 响应函数)</span>\n<span class=\"token keyword\">end</span>\n</code></pre>\n<h5><a id=\"81_608\"></a>8.1、显示界面</h5>\n<p>接口</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// PanelMgr.cs</span>\n\n<span class=\"token comment\">/// &lt;summary&gt;</span>\n<span class=\"token comment\">/// 显示界面（供C#层调用）</span>\n<span class=\"token comment\">/// &lt;/summary&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"panelId\"&gt;界面ID&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"parent\"&gt;父节点&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;typeparam name=\"T\"&gt;界面类&lt;/typeparam&gt;</span>\n<span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">T</span> <span class=\"token generic-method\"><span class=\"token function\">ShowPanel</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> panelId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transform</span> parent<span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BasePanel</span></span>\n\n<span class=\"token comment\">/// &lt;summary&gt;</span>\n<span class=\"token comment\">/// 显示界面（供lua层调用）</span>\n<span class=\"token comment\">/// &lt;/summary&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"panelId\"&gt;界面ID&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"luaObj\"&gt;lua界面脚本对象，是一个lua table&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"parent\"&gt;父节点&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">BasePanel</span> <span class=\"token function\">ShowPanel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> panelId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LuaInterface<span class=\"token punctuation\">.</span>LuaTable</span> luaObj<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transform</span> parent<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>比如在<code>C#</code>层显示热更新界面，</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> panel <span class=\"token operator\">=</span> PanelMgr<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ShowPanel</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>HotUpdatePanel<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> GlobalObjs<span class=\"token punctuation\">.</span>s_topPanel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>其中<code>HotUpdatePanel</code>是继承<code>BasePanel</code>的，效果如下，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\fa1bbb9e075d4c899448c341e7ac2b97.png\"/><br/> 在<code>lua</code>层显示界面我封装了一个<code>UITool.CreatePanelObj</code>方法，如下</p>\n<pre><code class=\"prism language-lua\"><span class=\"token keyword\">function</span> UITool<span class=\"token punctuation\">.</span><span class=\"token function\">CreatePanelObj</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">,</span> panelName<span class=\"token punctuation\">,</span> panelId<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>具体可以参见登录界面<code>LoginPanel.lua</code>和大厅界面<code>GameHallPanel.lua</code>的写法。</p>\n<h5><a id=\"82_643\"></a>8.2、关闭界面</h5>\n<p>可以通过<code>PanelMgr</code>的<code>HidePanel</code>方法，也可以直接通过<code>BasePanel</code>对象的<code>Hide</code>方法。<br/> 例：</p>\n<pre><code class=\"prism language-csharp\">PanelMgr<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">HidePanel</span><span class=\"token punctuation\">(</span>界面ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// this是界面自身对象，只能在界面类内部使用该方法</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在<code>lua</code>层封装了一个<code>UITool.HidePanel</code>接口，参数<code>instance</code>就是<code>lua</code>界面自身对象，如下</p>\n<pre><code class=\"prism language-lua\"><span class=\"token comment\">-- instance是界面对象实例</span>\nUITool<span class=\"token punctuation\">.</span><span class=\"token function\">HidePanel</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span>\n</code></pre>\n<h4><a id=\"9_659\"></a>9、图集管理</h4>\n<p>框架中使用的<code>UI</code>系统是<code>UGUI</code>，精灵图建议进行归类打成图集，这样可以合并<code>DrawCall</code>，提高性能。</p>\n<h5><a id=\"91_661\"></a>9.1、精灵散图存放位置</h5>\n<p>精灵散图存放在<code>Assets/RawAssets/UI</code>目录中，可自行创建子目录进行分类，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3f34824c9f2f41a1a06472bd100932e5.png\"/><br/> 说明：精灵散图是还没有组合加工的资源，属于生肉资源，所以是放在<code>RawAssets</code>中。</p>\n<h5><a id=\"92_665\"></a>9.2、开启图集功能</h5>\n<p>首先打开<code>Project Settings</code>，进入<code>Editor</code>标签页，把<code>Sprite Packer</code>的<code>Mode</code>设置为<code>Sprite Atlas V1 - Always Enabled</code>，这样方便我们在编辑器环境下测试图集打包，如下，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5b0a409f762b44b4b56d03f3cf378732.png\"/></p>\n<h5><a id=\"932D_Sprite_668\"></a>9.3、安装2D Sprite插件</h5>\n<p>确保你安装了<code>2D Sprite</code>插件，没有安装的话无法创建图集，可以打开<code>Package Manager</code>进行安装，如下，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ececb5f21bb64054a93e55bef22f5d56.png\"/></p>\n<h5><a id=\"94_671\"></a>9.4、创建图集文件</h5>\n<p>接着在<code>Project</code>视图中鼠标右键，点击菜单<code>Create / 2D / Sprite Atlas</code>，即可创建图集文件，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\66932637e5fe48ccbb5b4406db21051d.png\"/><br/> 图集文件存放在<code>Assets/GameRes/Atlas</code>目录中，建议图集文件的命名与精灵散图所在的文件夹同名，这样方便对应，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2fe9ff1c5c6e4b90822d8b9721c9fca0.png\"/></p>\n<h5><a id=\"95_676\"></a>9.5、执行打图集</h5>\n<p>选中图集文件，把精灵散图文件夹拖到图集文件的<code>Objects for Packing</code>槽中，点击<code>Pack Preview</code>按钮即可，如下，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d0ebdfc3c5824de6b9466d3120c6d86f.png\"/></p>\n<h5><a id=\"96_679\"></a>9.6、图集资源配置</h5>\n<p>假设我们现在做一个背包模块，打开背包界面，有很多道具，每个道具有对应的图标，这些图标一般会配置在道具配置表中，我们的背包模块的代码就可以根据配置的图标来设置精灵图啦。<br/> 问题来了，要在代码中设置某个精灵图，我们需要先找到对应的图集，然后再从图集中找到对应的精灵图，假设策划配置的是精灵图名称，但是我们有好多个图集，代码中如何通过精灵图映射到图集呢？<br/> 答案就是我们生成一份映射表，从精灵名映射到图集，框架中要加载资源，是通过资源<code>id</code>来加载的，所以图集需要配置的资源配置<code>resources.bytes</code>中，可以参见我们上面<code>2.2</code>节中的操作进行资源配置，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\706e28e4bfa64ee8ab227459abd183ff.png\"/><br/> 最终可以在<code>resources.bytes</code>中看到添加的配置，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\62648206df6842d6a9ce9e20881f5ac0.png\"/></p>\n<h5><a id=\"97_686\"></a>9.7、生成精灵图集映射表</h5>\n<p>上面我们说过，要有一个精灵到图集的映射表，我写了配套的生成工具，点击菜单<code>Tools/命令/生成精灵映射配置</code>，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3da81f9f506f49f2ba28e116ce1f3310.png\"/><br/> 即可在<code>Assets/GameRes/Config</code>中生成<code>sprite2atlas.bytes</code>，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\970b9e13d0fc40f489185447980975fb.png\"/><br/> 内容如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9864aa77a48440148c5a32814c50795e.png\"/></p>\n<h5><a id=\"98_693\"></a>9.8、代码动态设置精灵图</h5>\n<p>接口</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// SpriteManager.cs</span>\n\n<span class=\"token comment\">/// &lt;summary&gt;</span>\n<span class=\"token comment\">/// 给Image设置精灵图</span>\n<span class=\"token comment\">/// &lt;/summary&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"image\"&gt;Image对象&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"spriteName\"&gt;精灵图名称&lt;/param&gt;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetSprite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Image</span> image<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> spriteName<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>假设我们现在界面上有一个<code>Image</code>对象，我们要根据配置表来设置它的图片<code>diamond.png</code>，示例：</p>\n<pre><code class=\"prism language-csharp\">SpriteManager<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">SetSprite</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token string\">\"diamond\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"10_709\"></a>10、特效管理</h4>\n<h5><a id=\"101_710\"></a>10.1、利用对象池</h5>\n<p>战斗场景中可能会有些特效需要重复播放，如果我们一直创建销毁创建销毁的话，很浪费<code>CPU</code>，所以我利用对象池管理封装了一个特效管理器：<code>ParticleManager.cs</code>。</p>\n<h5><a id=\"102ParticleManager_712\"></a>10.2、ParticleManager</h5>\n<p>接口</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// ParticleManager.cs</span>\n\n<span class=\"token comment\">/// &lt;summary&gt;</span>\n<span class=\"token comment\">/// 播放粒子特效</span>\n<span class=\"token comment\">/// &lt;/summary&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"resId\"&gt;资源ID&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"duration\"&gt;持续事件&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"cache\"&gt;是否缓存到对象池中&lt;/param&gt;</span>\n<span class=\"token comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">GameObject</span> <span class=\"token function\">PlayParticle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> resId<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> duration<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> cache<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>示例</p>\n<pre><code class=\"prism language-csharp\">ParticleManager<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">PlayParticle</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.5f</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"11_730\"></a>11、多语言支持</h4>\n<p>项目如果出海的话，多语言支持是基本的要求，如果到了项目后期才做多语言支持，那将会是一个很恶心的事情，所以在最早期的框架阶段就要做好多语言支持。</p>\n<h5><a id=\"111I18N_732\"></a>11.1、国际化语言配置：I18N</h5>\n<p>在<code>Assets/GameRes/Config</code>目录中放了一份<code>i18nAppStrings.bytes</code>配置，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ea70dd41ed7443d29d4ea837c0d51f84.png\"/><br/> 内如如下，目前配置的语言是中文简体、中文繁体和英文，可自行根据需求进行拓展，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c0fdefb9eac941cf8726b473bc69cf33.png\"/></p>\n<h5><a id=\"112I18NID_737\"></a>11.2、根据I18N的ID设置文本</h5>\n<p>游戏运行时，我们不能直接给<code>Text</code>设置死的文本文字，否则就无法动态根据语言设置显示对应的语言了。设置<code>Text</code>文本的时候，要通过<code>I18N</code>的<code>id</code>，<br/> 示例</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// Text myText;</span>\n\n<span class=\"token comment\">// 错误做法</span>\n<span class=\"token comment\">// myText.text = \"这是一个Unity通用游戏框架\";</span>\n\n<span class=\"token comment\">// 正确做法</span>\nmyText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> I18N<span class=\"token punctuation\">.</span><span class=\"token function\">GetStr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h5><a id=\"113I18NText_749\"></a>11.3、预设上使用I18NText组件</h5>\n<p>为了方便在预设上使用多语言文本，我封装了一个<code>I18NText</code>组件（继承<code>Text</code>），<br/> 比如登录界面的这个文本，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3c989b1a7d26460b8dd97908289e3705.png\"/><br/> 创建<code>I18NText</code>的方法和创建<code>Text</code>一样，右键菜单点击<code>UI/I18NText</code>，如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1d02912465c64fc589e27096ca01131f.png\"/><br/> 我们给<code>I18NText</code>设置好<code>I18N id</code>即可，它会自动查找对应的文本文字，如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\66d024f31708479fbc0efe799a306333.png\"/></p>\n<h5><a id=\"114_757\"></a>11.4、切换语言</h5>\n<p>目前定义的语言类型如下</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// LanguageMgr.cs</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">LanguageType</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 中文简体</span>\n    ZH_CN <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 中文繁体</span>\n    ZH_TW<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 英语</span>\n    English<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>切换语言的接口</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// LanguageMgr.cs</span>\n\n<span class=\"token comment\">/// &lt;summary&gt;</span>\n<span class=\"token comment\">/// 切换语言</span>\n<span class=\"token comment\">/// &lt;/summary&gt;</span>\n<span class=\"token comment\">/// &lt;param name=\"index\"&gt;语言索引，参见LanguageType枚举&lt;/param&gt;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ChangeLanguageType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>示例</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// 切换为英语</span>\nLanguageMgr<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">ChangeLanguageType</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>效果<br/> <img alt=\"请添加图片描述\" src=\"https://img-blog.csdnimg.cn/32ab09f278ef474cbe9ea0cb2143fc18.gif\"/></p>\n<h5><a id=\"115_789\"></a>11.5、配置表的多语言支持</h5>\n<p>在配置表中，也不要直接配置具体的文本，而是配置为<code>I18N</code>的<code>id</code>。</p>\n<h4><a id=\"12_791\"></a>12、预设绑定器</h4>\n<p>我们做的预设，会有很多具体的节点或者节点内部的组件对象需要引用，如果我们通过代码<code>transform.Find</code>之类的接口去查找节点，如果美术把节点换个名字，运行时就会导致对象查找不到，还有如果我们想要引用的是节点上的某个组件，我们还需要通过<code>GetComponent</code>方法，这样的方式写起来也是很烦，所以，封装了一个预设绑定器：<code>PrefabBinder.cs</code>，由它来进行节点或组件对象的绑定，我们运行时通过<code>PrefabBinder</code>来找到对应的节点或组件对象。</p>\n<h5><a id=\"121PrefabBinder_793\"></a>12.1、给预设挂PrefabBinder</h5>\n<p>我们在预设上挂<code>PrefabBinder</code>组件（一般挂在根节点上，特殊情况也可以在子节点中继续挂<code>PrefabBinder</code>组件），如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ff1cc64cf47e477384cfbeaf54fbc243.png\"/></p>\n<h5><a id=\"122_796\"></a>12.2、添加对象绑定</h5>\n<p>点击<code>PrefabBinder</code>组件的<code>打开PrefabBinder编辑器</code>按钮，如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\54e8566a17124d4e8c54d34337dfab5c.png\"/><br/> 此时会打开一个<code>PrefabBinder</code>窗口，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dd4e5115dfa540d7bf66397cc727b018.png\"/><br/> 我以绑定登录按钮的<code>Button</code>组件对象为例，如下，选中<code>LoginButton</code>节点，然后选择<code>Button</code>组件，输入绑定的名称，最后点击<code>Add Item</code>按钮即可，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\57e002578e734198b045c39fc2064480.png\"/><br/> 最终以这种<code>key - value</code>键值对的方式实现名称与对象的绑定，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\142870b5b4ef443687763e9ffbc737ee.png\"/></p>\n<h5><a id=\"123PrefabBinder_805\"></a>12.3、通过PrefabBinder获取对象</h5>\n<p>运行时，我们首先通过<code>GetComponent</code>获取到<code>PrefabBinder</code>组件，然后通过它来获取我们事先绑定号的节点或组件对象。<br/> 示例</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bindeer <span class=\"token operator\">=</span> panelObj<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>PrefabBinder<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 写法一</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> loginBtn <span class=\"token operator\">=</span> binder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetObj</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loginBtn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nloginBtn<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// TODO 响应逻辑</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 写法二</span>\nUGUITool<span class=\"token punctuation\">.</span><span class=\"token function\">SetButton</span><span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">,</span> <span class=\"token string\">\"loginBtn\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>btn<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// TODO 响应逻辑</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"13UGUI_823\"></a>13、UGUI拓展</h4>\n<p><code>UGUI</code>拓展相关的代码放在<code>Assets/Scripts/Framework/UGUIExpand</code>目录中，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f168ef07ba864fce95f7b3fc4e330310.png\"/></p>\n<h5><a id=\"131_826\"></a>13.1、新手引导遮罩</h5>\n<p>游戏开发避免不了新手引导，而新手引导中经常需要一个目标镂空的遮罩，实现的代码放在<code>GuideMask</code>文件夹中，如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\26bd335f12684456ab16b06971fa4a49.png\"/><br/> 为了方便使用，包装成了一个预设，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\451a34e4381244b9819e96910365595a.png\"/><br/> 通过<code>GuideMask.Create(target)</code>这个接口来创建一个目标镂空遮罩引导，<br/> 示例</p>\n<pre><code class=\"prism language-lua\"><span class=\"token keyword\">local</span> loginBtn <span class=\"token operator\">=</span> binder<span class=\"token punctuation\">:</span><span class=\"token function\">GetObj</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loginBtn\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> mask <span class=\"token operator\">=</span> GuideMask<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>loginBtn<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 销毁遮罩</span>\n<span class=\"token comment\">-- mask:Destroy()</span>\n</code></pre>\n<p>效果如下<br/> <img alt=\"请添加图片描述\" src=\"https://img-blog.csdnimg.cn/2b28b9b74ac64c0e9cdcf9f1124f4e41.gif\"/></p>\n<h5><a id=\"132_842\"></a>13.2、国际化多语言文本</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7ac7cb5db9ed4c478445c564fb6f9444.png\"/><br/> 用法见在上面的<code>11.3</code>小节。</p>\n<h5><a id=\"133_845\"></a>13.3、精灵图轴对称</h5>\n<p>有一些精灵图是轴对称的，比如左右对称，上下对称，或者上下左右对称，这个时候出图时可以只出一部分，另外的对称部分由程序自动生成，封装了一个<code>MirrorImage</code>组件（继承<code>Image</code>），<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2158ef5883f74727abcfb56bd93e4e42.png\"/><br/> 创建<code>MirrorImage</code>和创建<code>Image</code>一样，鼠标右键点击菜单<code>UI/MirrorImage</code>，如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\126591f4cf884ca2ba71d86e12f9a9b9.png\"/><br/> 然后设置<code>Mirror Type</code>即可，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\053c12be1e694a4b9c27507dcc5f02b0.png\"/><br/> 比如左右对称<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9401dffb4a44479ca921b8a8a20bbff5.png\"/><br/> 上下对称<br/> <img alt=\"在这里插入图片描述\" src=\"image\\bfda397df8684d8382bf1859f5366a2d.png\"/><br/> 上下左右对称<br/> <img alt=\"在这里插入图片描述\" src=\"image\\89d8f49f27c1444e9e413adb3836eeec.png\"/></p>\n<h5><a id=\"134_858\"></a>13.4、循环复用列表</h5>\n<p>游戏中经常需要做一些排行榜，基本都要求显示前<code>50</code>或前<code>100</code>名，如果使用普通的列表，创建<code>50</code>到<code>100</code>个<code>UI</code>对象，实在是浪费性能，我们一般会采用循环复用列表的方式，我封装在<code>RecycllingScrollView</code>文件夹中，如下，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9093684e7ae543d397faefc42b3c83bd.png\"/><br/> 关于循环复用列表的详细教程，我之前单独写过一篇教程，可以看我之前写的这篇文章：<a href=\"https://linxinfa.blog.csdn.net/article/details/115396546\">《【游戏开发实战】Unity UGUI实现循环复用列表，显示巨量列表信息，含Demo工程源码》</a></p>\n<h5><a id=\"135_862\"></a>13.5、拓展补充</h5>\n<p>还有很多<code>UGUI</code>拓展的内容，可以继续放在<code>UGUIExpand</code>文件夹中，事件优先，先做这么多，后续有空再继续添加。</p>\n<h4><a id=\"14_864\"></a>14、热更新</h4>\n<p>热更新可以说是游戏必备的功能了。本框架集成了<code>LuaFramework</code>，并编写了热更新逻辑。</p>\n<h5><a id=\"141_866\"></a>14.1、热更新相关的代码</h5>\n<p>热更新相关的代码放在<code>Scripts/Logic/HotUpdate</code>和<code>Scripts/View/HotUpdate</code>文件夹中，如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\557011496ac042ed94fd5ad7dad53722.png\"/></p>\n<h5><a id=\"142_869\"></a>14.2、热更新的界面预设</h5>\n<p>热更新界面预设是<code>HotUpdatePanel.prefab</code>，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\bd5751cb2ccc49bcb5f6750f3c2246a1.png\"/></p>\n<p>如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4ab68097ebe44b61aa2dbf9c49620ba3.png\"/></p>\n<h5><a id=\"143_875\"></a>14.3、热更新流程</h5>\n<p>关于热更新的流程，我之前写过一篇详细教程，可以看我这篇文章：<a href=\"https://linxinfa.blog.csdn.net/article/details/119493890\">《【游戏开发高阶】从零到一教你Unity使用ToLua实现热更新（含Demo工程 | LuaFramework | 增量 | HotUpdate）》</a><br/> <img alt=\"在这里插入图片描述\" src=\"image\\b5bea50701be4291997ae8e8770b44ba.png\"/></p>\n<h4><a id=\"15_878\"></a>15、常用工具类</h4>\n<p>开发中经常要到的一些公用的方法可以封装到工具类中。</p>\n<h5><a id=\"151C_880\"></a>15.1、C#层工具类</h5>\n<p><code>C#</code>层封装了一个<code>UnityUtil.cs</code>脚本，可以继续在里面补充方法；另外还有一些比较针对的工具类，比如<code>JsonUtil</code>、<code>XMLUtil</code>等，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0589574e547549909606d22ec4ab6bd7.png\"/></p>\n<h5><a id=\"152Lua_883\"></a>15.2、Lua层工具类</h5>\n<p>同理<code>Lua</code>层封装了一个<code>LuaUtil.lua</code>，也可继续补充，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\782825171f8c43d1b197b35b23eed538.png\"/></p>\n<h4><a id=\"16_887\"></a>16、打包工具</h4>\n<p>实际项目中，一般都会独立写一套打包工具，包括打<code>AssetBundle</code>、打<code>APP</code>整包、打热更包，有一些可能还要打拓展包。<br/> 打包工具相关的代码放在<code>Editor/Build</code>目录中，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d44bfe4d467d4012b9d99b257b73bbb0.png\"/></p>\n<h5><a id=\"161AssetBundle_891\"></a>16.1、打AssetBundle</h5>\n<p>点击菜单<code>Tools/打包APP</code>，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d3fa5db9cfc44b0eb2c8db9177802942.png\"/><br/> 此时会弹出一个窗口，点击<code>Build AssetBundle</code>按钮即可开始打<code>AssetBundle</code>，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c77a76e7a25445fd967e38e010843b46.png\"/><br/> 生成的<code>AssetBundle</code>会放在<code>StreamingAssets/res</code>目录中，如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5234ab54ea4741aeb002ddf8bb779253.png\"/><br/> 哪些目录会打成什么<code>AssetBundle</code>是在<code>BuildUtils.cs</code>中指定的，如下，可自行添加或修改，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8a01ca5d2ffb4affb1b3ddc4ddfdaf1d.png\"/></p>\n<h5><a id=\"162APP_900\"></a>16.2、打APP整包</h5>\n<p>在打包工具中点击<code>Build APP</code>按钮即可开始打包，可以先设置好<code>version</code>版本号，点击<code>Save</code>后再进行打包，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\98812fcc10614bc78784dfe9a5b71d06.png\"/></p>\n<p>生成的包放在<code>Bin</code>目录中，如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e38d631028b342efae2424af7eaeab5f.png\"/></p>\n<p>如果要打<code>Android</code>平台，需要在<code>Build Settings</code>中先切换到<code>Android</code>平台，</p>\n<blockquote>\n<p>注：需要安装JDK和配置Android SDK、Gradle等。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\76d1490b924443e3ba90794b745925bd.png\"/><br/> 如果要打<code>iOS</code>包，则需要在<code>MacOS</code>操作系统中，并切换到<code>iOS</code>平台，另外需要安装<code>XCode</code>，集成<code>XCodeAPI</code>，安装打包证书（<code>.p12</code>文件和<code>.mobileprovision</code>文件），最后通过<code>xcodebuild</code>命令导出<code>ipa</code>，我之前写过一些相关教程：<br/> <a href=\"https://linxinfa.blog.csdn.net/article/details/87618408\">《Unity打iOS包之xcodeapi的使用》</a><br/> <a href=\"https://linxinfa.blog.csdn.net/article/details/88540213\">《iOS企业版app部署到自己服务器（不通过AppStore，在iOS设备上直接安装ipa）》</a></p>\n<h5><a id=\"163_915\"></a>16.3、打热更包</h5>\n<p>打整包时会生成一份<code>Lua</code>代码的<code>md5</code>列表，用于打增量包时进行文件对比，只有发生变化的<code>lua</code>文件才会打入增量包中，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3fa4309660584eda8d2b8cb50263b412.png\"/><br/> 我们点击菜单<code>Build/打热更包</code>，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b9b9ce2ec1c74667bf91b8f526c5e257.png\"/><br/> 设置一下热更包的版本号，一般是最后一位<code>+1</code>，比如整包版本号是<code>1.0.0.0</code>，那么此时热更包版本号为<code>1.0.0.1</code>，如果继续打下一个热更包，则版本号为<code>1.0.0.2</code>；<br/> 接着设置一下<code>LuaFrameworkFiles.json</code>的版本，即整包时的版本号；<br/> 如果有代码以外的资源要热更，比如界面预设，则点击<code>+</code>按钮，然后把界面拖到资源槽中，比如我们要热更<code>LoginPanel</code>这个界面预设，如下，最后点击<code>打热更包</code>按钮即可，<br/> <img alt=\"在这里插入图片描述\" src=\"image\\ceef10dec491407f9d6ce0901bb8b55b.png\"/><br/> 生成的热更包如下，将其部署到服务端上（包括服务端生成最新的版本信息，将<code>zip</code>文件上传到云盘上）<br/> <img alt=\"在这里插入图片描述\" src=\"image\\58f7d13bbcb643748e5460da263aba56.png\"/><br/> 之后我们启动客户端即可检测到版本更新并下载到最新的热更包了。</p>\n<h4><a id=\"17LuaFramework_927\"></a>17、LuaFramework框架</h4>\n<p>本框架集成了<code>LuaFramework</code>框架，关于<code>LuaFramework</code>框架的详细使用教程，我之前写过一篇文章，推荐大家看下：<a href=\"https://linxinfa.blog.csdn.net/article/details/88246345\">《Unity使用tolua框架教程: LuaFramewrk》</a>，本文就不再赘述啦。<br/> 另外，如果你要对重新编译<code>tolua runtime</code>库，我也有写过一篇详细教程，<a href=\"https://linxinfa.blog.csdn.net/article/details/118353526\">《【游戏开发进阶】教你在Windows平台编译tolua runtime的各个平台库（Unity | 热更新 | tolua | 交叉编译）》</a></p>\n<h4><a id=\"18_930\"></a>18、红点系统</h4>\n<p>红点系统的实现可以看我这篇博客，<a href=\"https://linxinfa.blog.csdn.net/article/details/121899276\">《【游戏开发实战】手把手教你在Unity中使用lua实现红点系统（前缀树 | 数据结构 | 设计模式 | 算法 | 含工程源码）》</a></p>\n<h3><a id=\"QA_932\"></a>八、Q&amp;A</h3>\n<p>大家有什么疑问可以在评论区里提，也可以私信，我会把常见问题补充到<code>Q&amp;A</code>中。</p>\n<h3><a id=\"_935\"></a>九、完毕</h3>\n<p>好啦，就先到这里吧~<br/> 我是林新发：<a href=\"https://blog.csdn.net/linxinfa\">https://blog.csdn.net/linxinfa</a><br/> 原创不易，若转载请注明出处，感谢大家~<br/> 喜欢我的可以点赞、关注、收藏，如果有什么技术上的疑问，欢迎留言或私信~</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}