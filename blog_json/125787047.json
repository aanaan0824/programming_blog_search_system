{"blogid": "125787047", "writerAge": "码龄1年", "writerBlogNum": "25", "writerCollect": "2049", "writerComment": "1518", "writerFan": "2633", "writerGrade": "6级", "writerIntegral": "4561", "writerName": "猿力猪", "writerProfileAdress": "writer_image\\profile_125787047.jpg", "writerRankTotal": "4640", "writerRankWeekly": "15864", "writerThumb": "1555", "writerVisitNum": "113010", "blog_read_count": "1249", "blog_time": "于 2022-07-15 00:06:06 发布", "blog_title": "【OpenCV】广告屏换图 文稿矫正 透视变换 C++ 案例实现", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1 id=\"%E7%9B%AE%E5%BD%95\">目录</h1>\n<p id=\"%E5%89%8D%E8%A8%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n<p id=\"%E4%B8%80%E3%80%81%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2%E7%9A%84%E6%A6%82%E5%BF%B5-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2%E7%9A%84%E6%A6%82%E5%BF%B5\">一、透视变换的概念</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\">二、透视变换工作原理</a></p>\n<p id=\"%E4%B8%89%E3%80%81%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0\">三、相关函数</a></p>\n<p id=\"1%EF%B8%8F%E2%83%A3findHomography%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:40px;\"><a href=\"#1%EF%B8%8F%E2%83%A3findHomography%E5%87%BD%E6%95%B0\">1.findHomography函数</a></p>\n<p id=\"2%EF%B8%8F%E2%83%A3warpPerspective%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:40px;\"><a href=\"#2%EF%B8%8F%E2%83%A3warpPerspective%E5%87%BD%E6%95%B0\">2.warpPerspective函数</a></p>\n<p id=\"3%EF%B8%8F%E2%83%A3getPerspectiveTransform%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:40px;\"><a href=\"#3%EF%B8%8F%E2%83%A3getPerspectiveTransform%E5%87%BD%E6%95%B0\">3.getPerspectiveTransform函数</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2%E6%A1%88%E4%BE%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2%E6%A1%88%E4%BE%8B\">四、透视变换案例</a></p>\n<p id=\"%F0%9F%9A%80%E6%A1%88%E4%BE%8B1%EF%BC%9A%E6%96%87%E7%A8%BF%E7%9F%AB%E6%AD%A3-toc\" style=\"margin-left:40px;\"><a href=\"#%F0%9F%9A%80%E6%A1%88%E4%BE%8B1%EF%BC%9A%E6%96%87%E7%A8%BF%E7%9F%AB%E6%AD%A3\">案例1：文稿矫正</a></p>\n<p id=\"%F0%9F%9A%80%E6%A1%88%E4%BE%8B2%EF%BC%9A%E5%B9%BF%E5%91%8A%E5%B1%8F%E6%8D%A2%E5%9B%BE-toc\" style=\"margin-left:40px;\"><a href=\"#%F0%9F%9A%80%E6%A1%88%E4%BE%8B2%EF%BC%9A%E5%B9%BF%E5%91%8A%E5%B1%8F%E6%8D%A2%E5%9B%BE\">案例2：广告屏换图</a></p>\n<p id=\"%E4%BA%94%E3%80%81%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81%E6%80%BB%E7%BB%93\">五、总结</a></p>\n<hr/>\n<h1 id=\"%E5%89%8D%E8%A8%80\">前言</h1>\n<p>本文以实现<span style=\"color:#be191c;\"><strong>广告屏换图</strong></span>为目标，学习<span style=\"color:#be191c;\"><strong>OpenCV透视变化相关知识</strong></span>，核心的内容包括：<span style=\"color:#be191c;\"><strong>OpenCV透视变化概念</strong></span>、<span style=\"color:#be191c;\"><strong>透视变化工作原理</strong></span>，以及<strong><span style=\"color:#be191c;\">广告屏换图</span></strong><span style=\"color:#0d0016;\">、</span><strong><span style=\"color:#be191c;\">文稿矫正</span></strong><span style=\"color:#333333;\">的</span>实现 </p>\n<h1 id=\"%E4%B8%80%E3%80%81%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2%E7%9A%84%E6%A6%82%E5%BF%B5\">一、透视变换的概念</h1>\n<blockquote>\n<ul><li><strong>仿射变换</strong>与<strong>透视变换</strong>在图像还原、图像局部变化处理方面有重要意义</li><li>通常情况下，在2D平面中，仿射变换的应用较多，在3D平面中，透视变换又有了自己的一席之地，两种变换原理相似，结果也类似，可针对不同的场合使用适当的变换</li><li><strong>仿射变换</strong>和<strong>透视变换</strong>的数学原理不需深究，在应用层面，仿射变换是图像基于3个固定顶点的变换，如下图所示：</li></ul>\n</blockquote>\n<p><img alt=\"\" height=\"247\" src=\"image\\57706cf18773498d8d2cd8fd27a8a316.png\" width=\"737\"/></p>\n<h1 id=\"%E4%BA%8C%E3%80%81%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\">二、透视变换工作原理</h1>\n<ul><li><strong>透视变换：</strong>本质是将图像投影到一个新的视平面</li><li>其通用变换公式，如下图所示：</li></ul>\n<p><img alt=\"\" height=\"156\" src=\"image\\0cceba8cc9b54b2b89439d9037fc7960.png\" width=\"798\"/></p>\n<ul><li><strong>（u，v）</strong>为原始图像像素坐标，<strong>（x=x’/w’，y=y’/w’）</strong>为变换之后的图像像素坐标</li><li>相关公式，本文不做过多阐述，图解如下：</li></ul>\n<p><img alt=\"\" height=\"451\" src=\"image\\019542404aa74e46b6ec3976da9f27d9.png\" width=\"660\"/></p>\n<ul><li><strong>仿射变换：</strong>可以理解为透视变换的特殊形式</li><li>数学表达式，如下图所示：</li></ul>\n<p> <img alt=\"\" height=\"238\" src=\"image\\3b058fd3829f41ce80333a2f44fa9f34.png\" width=\"541\"/></p>\n<ul><li>所以，给定透视变换对应的四对像素点坐标，即可求得透视变换矩阵</li><li>反之，给定透视变换矩阵，即可对图像或像素点坐标完成透视变换</li><li>如下图所示：</li></ul>\n<p><img alt=\"\" height=\"340\" src=\"image\\087dca3c97774da5ac24bd89a356a5fa.png\" width=\"657\"/></p>\n<p> <img alt=\"\" height=\"431\" src=\"image\\749a260395d14e20ac903c9a1c45e258.png\" width=\"639\"/></p>\n<h1 id=\"%E4%B8%89%E3%80%81%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0\">三、相关函数</h1>\n<h2 id=\"1%EF%B8%8F%E2%83%A3findHomography%E5%87%BD%E6%95%B0\">1.findHomography函数</h2>\n<blockquote>\n<p><strong>📌函数功能：</strong>找到两个平面之间的变换矩阵</p>\n<p></p>\n<p><strong>📌参数：</strong>如下表所示</p>\n</blockquote>\n<p><img alt=\"\" height=\"638\" src=\"image\\7b8a039f60ce4fdf907a5f373f451f55.png\" width=\"1200\"/></p>\n<h2 id=\"2%EF%B8%8F%E2%83%A3warpPerspective%E5%87%BD%E6%95%B0\">2.warpPerspective函数</h2>\n<blockquote>\n<p><strong>📌函数功能：</strong>对图像进行透视变换，变形</p>\n<p></p>\n<p><strong>📌参数：</strong></p>\n<ul><li>src – 输入图像</li><li>dst – 大小为dsize且类型与src相同的输出图像</li><li>M – 3×3变换矩阵</li><li>dsize – 输出图像的大小</li></ul>\n</blockquote>\n<ul><li>下图中红点即为固定顶点，在变换先后固定顶点的像素值不变</li><li>图像整体则根据变换规则进行变换同理，透视变换是图像基于4个固定顶点的变换</li></ul>\n<p><img alt=\"\" height=\"489\" src=\"image\\08354b88c9124cd28f33734dd53caf1c.png\" width=\"1200\"/></p>\n<h2 id=\"3%EF%B8%8F%E2%83%A3getPerspectiveTransform%E5%87%BD%E6%95%B0\">3.getPerspectiveTransform函数</h2>\n<ul><li><strong>C++方式1：</strong>Mat getPerspectiveTransform(InputArray src, InputArray dst)  </li><li><strong>C++方式2</strong>：Mat getPerspectiveTransform(const Point2f src[], const Point2f dst[]) </li></ul>\n<blockquote>\n<p><strong>📌函数功能：</strong>根据源图像和目标图像上的四对点坐标来计算从原图像透视变换到目标头像的透视变换矩阵</p>\n<p></p>\n<p><strong>📌参数：</strong></p>\n<ul><li>src – 源图像中四边形顶点的坐标    </li><li>dst – 目标图像中相应四边形顶点的坐标</li></ul>\n</blockquote>\n<ul><li>该函数计算透视变换的3乘3矩阵，以便实现以下计算：</li></ul>\n<p><img alt=\"\" height=\"343\" src=\"image\\5e95ee82adfb4a858f9a35d1e4e7fe6b.png\" width=\"957\"/></p>\n<h1 id=\"%E5%9B%9B%E3%80%81%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2%E6%A1%88%E4%BE%8B\">四、透视变换案例</h1>\n<ul><li>首先，先试想一下，我们要将下图单独取一张平面出来（例如:A）该如何实现呢？ </li></ul>\n<p><img alt=\"\" height=\"732\" src=\"image\\997f6477eac241e88a7e2cabc6073fe6.png\" width=\"891\"/></p>\n<h2 id=\"%F0%9F%9A%80%E6%A1%88%E4%BE%8B1%EF%BC%9A%E6%96%87%E7%A8%BF%E7%9F%AB%E6%AD%A3\">案例1：文稿矫正</h2>\n<ul><li>这是本案例所用到的图片素材</li></ul>\n<p><img alt=\"\" height=\"935\" src=\"image\\17f7317c30a145dd8aa10fdb7cbde5a8.jpeg\" width=\"1200\"/></p>\n<ul><li>实现效果</li></ul>\n<p><img alt=\"\" height=\"1036\" src=\"https://img-blog.csdnimg.cn/88ceb55f7f5d4612b0600a239cb32550.gif\" width=\"1200\"/></p>\n<ul><li>其他奇奇怪怪的东西的效果</li></ul>\n<p><img alt=\"\" height=\"994\" src=\"image\\2978f721e3784dcda772f118377cb154.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"803\" src=\"image\\48464dec2d944476a3a8bcca585655e1.png\" width=\"1200\"/></p>\n<p id=\"%E6%A1%88%E4%BE%8B1%20%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\"><strong>案例1 完整代码</strong></p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;opencv2/opencv.hpp&gt;\nusing namespace cv;\nusing namespace std;\n\nstruct imagedata\n{\n    Mat img;//目标图像\n    vector &lt;Point2f&gt; points;//3D点\n};\n\n//鼠标操作函数:用于选择四个角的点（使用方法有顺序的，从左上角顺时针选择，选完之后回车）\nvoid mouseHundle(int event,int x,int y,int flag,void *per)\n{\n    struct imagedata * d=(struct imagedata*)per;\n    if(event==EVENT_LBUTTONDOWN)\n    {\n        //确定按下的是鼠标左键\n        //用圆形标记一下鼠标按下左键标记的位置\n        circle(d-&gt;img,Point(x,y),3,Scalar(0,255,0),3,CV_AA);//在图上标记,圆心为点击的位置\n        imshow(\"image\",d-&gt;img);//原窗口上显示\n        if(d-&gt;points.size()&lt;4)\n        {\n            d-&gt;points.push_back(Point2f(x,y));//把点击的点存起来\n        }\n    }\n}\n\nvoid example_1()\n{\n    Mat image=imread(\"C:/Users/86177/Desktop/image/777.jpg\");\n    Mat result=Mat::zeros(400,500,CV_8UC1);//400*500的大小,但是里面没有东西\n\n    //存放四个转换以后的坐标\n    vector &lt;Point2f&gt;obj;\n    obj.push_back(Point2f(0,0));\n    obj.push_back(Point2f(500,0));\n    obj.push_back(Point2f(500,400));\n    obj.push_back(Point2f(0,400));//转换后的坐标\n\n    imshow(\"image\",image);\n    struct imagedata data;\n    data.img=image;\n\n    setMouseCallback(\"image\",mouseHundle,&amp;data);//鼠标处理的回调函数\n\n    waitKey(0);//按任意键关闭当前显示的窗口,显示下一个窗口\n\n    Mat res=findHomography(data.points,obj,CV_RANSAC);//利用RANSAC算法计算出来一个小矩阵\n\n    warpPerspective(image,result,res,result.size());  //结果转换\n\n    imshow(\"result\",result);\n\n    waitKey(0);\n}\n\nint main(int argc, char *argv[])\n{\n    example_1();\n    return 0;\n}\n\n</code></pre>\n<h2 id=\"%F0%9F%9A%80%E6%A1%88%E4%BE%8B2%EF%BC%9A%E5%B9%BF%E5%91%8A%E5%B1%8F%E6%8D%A2%E5%9B%BE\">案例2：广告屏换图</h2>\n<ul><li>这是本案例所用到的图片素材 </li></ul>\n<p><img alt=\"\" height=\"820\" src=\"image\\c3f1698d1d9843218919f4e98e646fe7.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"1080\" src=\"image\\92038e33fcb14189b943cd11c3cc5ac1.jpeg\" width=\"1200\"/></p>\n<ul><li>实现效果</li></ul>\n<p><img alt=\"\" height=\"1200\" src=\"https://img-blog.csdnimg.cn/6f45a434d25744efbe0dd9a6a8044f2c.gif\" width=\"1200\"/></p>\n<ul><li>变换过程，如下图所示： </li></ul>\n<p><img alt=\"\" height=\"948\" src=\"image\\3f5f62ce3e664be1995cfaaa00bf3afc.png\" width=\"1200\"/></p>\n<p id=\"%E6%A1%88%E4%BE%8B2%20%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\"><strong>案例2 完整代码</strong></p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;opencv2/opencv.hpp&gt;\nusing namespace cv;\nusing namespace std;\n\nstruct imagedata\n{\n    Mat img;//目标图像\n    vector &lt;Point2f&gt; points;//3D点\n};\n\n//鼠标操作函数:用于选择四个角的点（使用方法有顺序的，从左上角顺时针选择，选完之后回车）\nvoid mouseHundle(int event,int x,int y,int flag,void *ptr)\n{\n    struct imagedata * d=(struct imagedata*)ptr;\n    if(event==EVENT_LBUTTONDOWN)\n    {\n        //确定按下的是鼠标左键\n        //用圆形标记一下鼠标按下左键标记的位置\n        circle(d-&gt;img,Point(x,y),3,Scalar(0,255,0),3,CV_AA);//在图上标记,圆心为点击的位置\n        //imshow(\"image\",d-&gt;img);//原窗口上显示\n        imshow(\"dst\",d-&gt;img);//原窗口上显示\n\n        if(d-&gt;points.size()&lt;4)//只存下来，最先点的前四个点\n        {\n            d-&gt;points.push_back(Point2f(x,y));//把鼠标操作点击的点存起来\n        }\n    }\n}\n\nvoid example_2()\n{\n    Mat image1=imread(\"C:/Users/86177/Desktop/image/2222.jpg\");//广告屏替换图片路径\n    Mat image2=imread(\"C:/Users/86177/Desktop/image/city.jpg\");//背景图片路径\n\n    Mat dst=image2.clone();//克隆\n\n    vector &lt;Point2f&gt;obj;\n    obj.push_back(Point2f(0,0));\n    obj.push_back(Point2f(image1.cols,0));\n    obj.push_back(Point2f(image1.cols,image1.rows));\n    obj.push_back(Point2f(0,image1.rows));//转换后的坐标\n\n    imshow(\"dst\",dst);\n    struct imagedata data;\n    data.img =dst;\n\n    setMouseCallback(\"dst\",mouseHundle,&amp;data);//鼠标处理的回调函数\n\n    waitKey(0);//按任意键关闭当前显示的窗口,显示下一个窗口\n\n    Mat res=findHomography(obj,data.points,CV_RANSAC);//利用RANSAC算法，3*3变换矩阵\n\n    warpPerspective(image1,dst,res,dst.size());//透视转换\n\n    imshow(\"warpPerspective\",dst);\n\n    Point pts[4];\n    for(int i=0;i&lt;4;i++)\n    {\n        pts[i]=data.points[i];\n    }\n    fillConvexPoly(image2,pts,4,Scalar(0),CV_AA);\n\n    image2+=dst;\n\n    imshow(\"final\",image2);\n\n    waitKey(0);\n}\n\nint main(int argc, char *argv[])\n{\n    example_2();\n    return 0;\n}\n\n</code></pre>\n<p> </p>\n<blockquote>\n<p><strong>PS：</strong> 案例代码使用说明，需要选择四个点，且必须顺时针选择，因为代码中只设置存储4个点，超出选择无效，选择完毕后按 <strong>Enter </strong>即可显示效果</p>\n</blockquote>\n<p> </p>\n<h1 id=\"%E4%BA%94%E3%80%81%E6%80%BB%E7%BB%93\">五、总结</h1>\n<blockquote>\n<ul><li>本文核心内容包括：<span style=\"color:#be191c;\"><strong>OpenCV透视变化概念</strong></span>、<span style=\"color:#be191c;\"><strong>透视变化工作原理</strong></span></li><li>以<strong><span style=\"color:#0d0016;\">广告屏换图</span></strong><span style=\"color:#0d0016;\">、<strong>文稿矫正</strong></span><span style=\"color:#333333;\">的</span>实现为例子，讲解了OpenCV透视变化的实战案例，案例完成的效果还是挺有意思的！</li><li>在我们的日常生活中，已经有很多软件用到了我们的透视变换的知识，例如，我们办公扫描文件时用的扫描软件，很大程度上，节省了我们的时间，提高了工作效率！</li></ul>\n</blockquote>\n<p> </p>\n<p><span style=\"color:#38d8f0;\"><strong><em>以上就是本文的全部内容啦！如果对您有帮助，麻烦点赞啦！收藏啦！欢迎各位评论区留言</em>！！ !</strong></span></p>\n<p class=\"img-center\"><img alt=\"\" height=\"379\" src=\"https://img-blog.csdnimg.cn/82db194f85a945a08420abeec2bd9f38.gif\" width=\"414\"/></p>\n<p> </p>\n<p></p>\n</div>\n</div>"}