{"blogid": "123759516", "writerAge": "码龄2年", "writerBlogNum": "34", "writerCollect": "124", "writerComment": "11", "writerFan": "5", "writerGrade": "2级", "writerIntegral": "397", "writerName": "Balaaam", "writerProfileAdress": "writer_image\\profile_123759516.jpg", "writerRankTotal": "57084", "writerRankWeekly": "143896", "writerThumb": "35", "writerVisitNum": "36719", "blog_read_count": "2101", "blog_time": "于 2022-03-26 17:18:23 发布", "blog_title": "gcc的基本使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night-eighties\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#gcc_2\">gcc的基本使用方法</a></li><li><ul><li><a href=\"#1_gcc_4\">1. 什么是gcc</a></li><li><a href=\"#2_gcc_17\">2. gcc编译程序的过程</a></li><li><a href=\"#3gcc_27\">3.gcc常用选项</a></li><li><a href=\"#4_gcc_47\">4. gcc编译多文件</a></li><li><a href=\"#5__65\">5. 头文件与库文件</a></li><li><a href=\"#6__72\">6. 头文件与库文件的位置</a></li><li><a href=\"#7_l_81\">7. 使用外部库（-l选项）</a></li><li><a href=\"#8__101\">8. 静态库与共享库</a></li><li><a href=\"#9__112\">9. 生成静态库</a></li><li><a href=\"#10__128\">10. 库搜索路径</a></li><li><a href=\"#11__137\">11. 生成共享库</a></li><li><a href=\"#12__153\">12. 运行共享库</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"gcc_2\"></a>gcc的基本使用方法</h1>\n<h2><a id=\"1_gcc_4\"></a>1. 什么是gcc</h2>\n<ul><li>gcc（GNU C Complier)编译器的作者是Richard Stallman，也是GNU项目的奠基者。</li><li>什么是gcc：gcc是<strong>GNU Complier Collection</strong>的缩写。最初是作为C语言的编译器（GNU C Compiler），现在已经支持多种语言了，如C、C++、Java、Ada、COBOL语言等。</li><li>gcc支持多种硬件平台，甚至对Don Knuth设计的MMIX这类不常见的计算机都提供了完善的支持。</li><li>gcc是一个可移植的编译器，支持多种硬件平台。</li><li>gcc不仅仅是个本地编译器，它还能跨平台交叉编译。</li><li>gcc有多种语言前前端，用于解析不同的语言。</li><li>gcc是按模块化设计的，可以加入新语言和新CPU架构的支持。</li><li>gcc是自由软件。</li></ul>\n<h2><a id=\"2_gcc_17\"></a>2. gcc编译程序的过程</h2>\n<ul><li>预处理（Pre-Processing）</li><li>编译（Compiling）</li><li>汇编（Assembling）</li><li>链接（Linking）<br/> <img alt=\"请添加图片描述\" src=\"image\\f019f4b4c9d441d5991a4acabd1a916d.png\"/></li></ul>\n<p>hello程序是一个高级C语言程序，这种形式容易被人读懂。为了在系统上运行hello.c程序，每条C语句都必须转化为低级机器指令。然后将这些指令打包成可执行目标文件格式，并以二进制形式存储于磁盘中。</p>\n<h2><a id=\"3gcc_27\"></a>3.gcc常用选项</h2>\n<p><img alt=\"请添加图片描述\" src=\"image\\88ffe2d9e54847fa9c876a093a77adea.png\"/></p>\n<p>gcc应用示例：</p>\n<pre><code class=\"prism language-shell\">gcc -E hello.c -o hello.i <span class=\"token comment\">#预处理</span>\ngcc -S hello.i -o hello.s <span class=\"token comment\">#编译</span>\ngcc -c hello.s -o hello.o <span class=\"token comment\">#汇编</span>\ngcc hello.o -o hello <span class=\"token comment\">#链接</span>\ngcc hello.c -o hello <span class=\"token comment\">#直接编译链接成可执行目标文件</span>\ngcc -c hello.c 或 gcc -c hello.c -o hello.o <span class=\"token comment\">#编译生成可重定位目标文件</span>\n</code></pre>\n<h2><a id=\"4_gcc_47\"></a>4. gcc编译多文件</h2>\n<pre><code class=\"prism language-shell\">hello_fn.h\nhello_fn.c\nmain.c\n\n<span class=\"token comment\">#一次性编译</span>\ngcc hello_fn.c main.c -o newhello\n\n<span class=\"token comment\">#独立编译</span>\ngcc -Wall -c main.c -o main.o\ngcc -Wall -c hello_fn.c -o hello_fn.o\ngcc -Wall main.o hello_fn.o -o newhello\n</code></pre>\n<h2><a id=\"5__65\"></a>5. 头文件与库文件</h2>\n<ul><li>在使用C语言 和其他语言进行程序设计的时候，我们需要头文件来提供对常数的定义和对系统及库函数调用的声明。</li><li>库文件是一些预先编译好的函数集合，那些函数都是按照可重用规则编写的。它们通常是由一组互相关联的用来完成某项常见工作的函数构成。比如用来处理屏幕显示情况的函数（ncurses库）和数据库访问例程（dbm库）等。</li></ul>\n<h2><a id=\"6__72\"></a>6. 头文件与库文件的位置</h2>\n<ul><li>/usr/include及其子目录底下的include文件夹</li><li>/usr/local/include及其子目录底下的include文件夹</li><li>/usr/lib</li><li>/usr/local/lib</li></ul>\n<h2><a id=\"7_l_81\"></a>7. 使用外部库（-l选项）</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//calc.c</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The cubed if %f\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-shell\">gcc -Wall calc.c -o calc -lm\n<span class=\"token comment\"># -lm 表示要链接libm.so或者libm.a库文件</span>\n</code></pre>\n<h2><a id=\"8__101\"></a>8. 静态库与共享库</h2>\n<ul><li> <p>静态库（.a）：程序在编译链接的时候把库的代码链接到可执行文件中。程序运行的时候将不再需要静态库。</p> </li><li> <p>共享库（.so或者.sa）：程序在运行的时候才去链接共享库的代码，多个程序共享使用库的代码。</p> </li><li> <p>一个与共享库链接的可执行文件仅仅包含它用到的函数入口地址的一个表。而不是外部函数所在目标文件的整个机器码。</p> </li><li> <p>在可执行文件开始运行之前，外部函数的机器码由操作系统从磁盘上的该共享库中复制到内存中，这个过程成为<strong>动态链接（dynamic linking）</strong>。</p> </li><li> <p>共享库可以在多个程序间共享，所以动态链接使得可执行文件更小，节省了磁盘空间。操作系统采用虚拟内存机制允许物理内存中的一份共享库被要用到该库的所有进程共用，节省了内存和磁盘空间。</p> </li></ul>\n<h2><a id=\"9__112\"></a>9. 生成静态库</h2>\n<pre><code class=\"prism language-shell\">hello_fn.h\nhello_fn.c\nmain.c\n\ngcc -Wall hello_fn.c -o hello_fn.o\n\nar rcs libhello.a hello_fn.o\n<span class=\"token comment\"># ar是gnu的归档工具，rcs表示(replace and create)</span>\n\ngcc -Wall main.c libhello.a -o main\ngcc -Wall -L main.c -o main -lhello\n</code></pre>\n<h2><a id=\"10__128\"></a>10. 库搜索路径</h2>\n<ul><li>C_INCLUDE_PATH、LIBRARY_PATH</li><li>从左到右搜索 -I -L 指定的目录</li><li>由环境变量指定的目录</li><li>由系统指定的目录</li></ul>\n<h2><a id=\"11__137\"></a>11. 生成共享库</h2>\n<ul><li>shared：表示生成共享库格式</li><li>fPIC：产生位置无关码（position independent code）</li><li>库名规则：libXXX.so</li><li>示例：<code>gcc -shared -fPIC hello.o -o libhello.so</code></li><li>使用共享库</li><li>编译选项</li><li>I：链接共享库，只要库名即可（去掉lib以及版本号）</li><li>L：链接库所在的路径</li><li>示例：</li><li><code>gcc main.o -o main -L -lhello</code></li></ul>\n<h2><a id=\"12__153\"></a>12. 运行共享库</h2>\n<ul><li>1、 拷贝.so文件到系统共享库路径下，一般指/usr/lib</li><li>2、更改LD_LIBRARY_PATH</li><li>3、ldconfig 配置 ld.so.conf，ldconfig更新ld.so.cache</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}