{"blogid": "126682065", "writerAge": "码龄6年", "writerBlogNum": "151", "writerCollect": "1985", "writerComment": "120", "writerFan": "151", "writerGrade": "6级", "writerIntegral": "4820", "writerName": "real_metrix", "writerProfileAdress": "writer_image\\profile_126682065.jpg", "writerRankTotal": "3609", "writerRankWeekly": "16911", "writerThumb": "611", "writerVisitNum": "468655", "blog_read_count": "408", "blog_time": "已于 2022-09-06 09:44:44 修改", "blog_title": "【教程】visual studio debug 技巧总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night-eighties\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>更新中 …</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_3\">环境</a></li><li><a href=\"#_7\">调试器的基本使用</a></li><li><ul><li><a href=\"#_8\">断点</a></li><li><ul><li><a href=\"#_10\">基本的断点操作</a></li><li><a href=\"#_43\">跟踪点</a></li><li><a href=\"#_59\">条件断点</a></li><li><ul><li><a href=\"#_64\">条件表达式</a></li><li><a href=\"#_71\">命中次数</a></li><li><a href=\"#_74\">过滤器</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_76\">各种窗口</a></li><li><ul><li><a href=\"#Autos__Local__78\">Autos 和 Local 窗口</a></li><li><a href=\"#_82\">监视窗口</a></li><li><a href=\"#_86\">函数调用堆栈</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_90\">其它技巧</a></li><li><ul><li><a href=\"#_debug_91\">快速重启 debug</a></li><li><a href=\"#_94\">固定，值的位置</a></li></ul>\n</li><li><a href=\"#_101\">参考</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_3\"></a>环境</h1>\n<ol><li>操作系统：Windows 10</li><li>IDE：Visual studio 2017<br/> 【注】不同版本的 Visual studio 可能会有细微的差别</li></ol>\n<h1><a id=\"_7\"></a>调试器的基本使用</h1>\n<h2><a id=\"_8\"></a>断点</h2>\n<p>当我们需要在代码执行的过程中，从某条语句开始，停下来一步一步，一条一条地过每一条代码的时候，这是我们就需要用到断点。</p>\n<h3><a id=\"_10\"></a>基本的断点操作</h3>\n<ol><li>设置基本断点<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1fb96012939c4fc996e4a629749f3fdb.png\"/></li></ol>\n<p>如上图，在你需要停下来的语句中，在其左侧的那条竖栏处左击，就会出现一个红色圆点，这表示当你运行代码的时候（不是运行 .exe 程序）会在这里停下来。</p>\n<p>【注】程序只会从断点开始的地方停下来，而之前的语句将会快速执行过去。</p>\n<ol start=\"2\"><li>进入调试<br/> <img alt=\"在这里插入图片描述\" src=\"image\\798e2dc2fe764c958a10793f8b95c207.png\"/></li></ol>\n<p>按上图红框所示，进入调试状态。</p>\n<ol start=\"3\"><li>调试界面简述<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d7ba872132e14ca5a77e8988e107fb1b.png\"/></li></ol>\n<p>在调试程序启动后，程序快速运行至 ① 处停下等候你的下一步操作，可以看见，红色的 ① 上面多了一个黄色的向右箭头，这表示当前程序运行到了这条语句。</p>\n<p>② 处有三个操作符：<br/> 向下的箭头表示，进入更深层次的代码中。比如，当黄色箭头运行到一个调用的函数时，我想进入看看这个函数内部究竟是怎么运行的，就可以用这个箭头。</p>\n<p>弯曲向下的箭头表示在当前程序中一条一条执行。那上一个箭头中的例子举例，我并不想进入这个调用的函数，仅仅想在当前页面执行函数，就用这个箭头。</p>\n<p>向上的箭头，表示跳出更深层次的代码。还是那最开始的例子举例，如果你进入了更深层次的函数中，但这个函数太冗长了，你想跳出来，回到本来执行的页面，就应该用这个箭头。</p>\n<p>③ 处有一个红色的方框，这表示停止调试，退出调试。</p>\n<p>④ 处，可以看到下面有两个输出数据的框。如果你仔细观察，这些框的底部还有一排隐藏的框，比如 Autos 的右边还有 Locals，Watch1 这些隐藏起来的框。这些输出框可以帮助你进行调试。</p>\n<ol start=\"4\"><li>【补】快速执行到某行代码<br/> 我们对上面的代码进行了微调，新增了几条语句用于演示这个功能。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f9a5ebd8b8c54644b5b1a21f8febda56.png\"/><br/> 在上图中，我们调试代码，程序运行到断点处停止，但是我觉得循环太久了，想跳到下面的第三条 <code>i++</code> 语句处，那么我们可以直接把光标移动到 <code>i++</code> 上，然后它的左边会出现一个绿色的向右箭头（如图中所示），当我们点击这个箭头，就可以快速执行到这个语句，并且它之前的代码也会执行到。</li></ol>\n<h3><a id=\"_43\"></a>跟踪点</h3>\n<p>跟踪点的作用是可以在 Output 窗口中打印出你设置的一些信息。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\cfc0b3cf8b604245a2cb2adcd4d60e65.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\c3a22026373e4e58928f52f7689f654a.png\"/><br/> 我们来举一个例子，还是之前的代码，我们将断点打在 <code>cout &lt;&lt; \"当前的 i 值: \" &lt;&lt; i &lt;&lt; endl;</code> 上，我想在 Output 窗口输出一些打印的信息。</p>\n<p>将鼠标放在断点处，弹出的小框中选择齿轮<img alt=\"在这里插入图片描述\" src=\"image\\43276c16948c4942a5ab92f856dfdf3f.png\"/>样式。点击后就可以进行设置。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\e9435c8232304e74a89a3c113eac8bfa.png\"/><br/> 在上图中，通过 Actions 中的输入框，可以输入你想打印的信息。这里我想输出变量 <code>i</code> 的数据，于是用 <code>{}</code> 包裹住 <code>i</code>。</p>\n<p>勾选 Continue execution 表示不将跟踪点视为断点，也就是程序在调试时不会在此停顿。</p>\n<p>下面我来看看效果，Output 输入框中打印出了我们想要的信息。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\13fd7e16fb8041dc8c4d658346b31b75.png\"/><br/> 这里有更多的特定信息<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2075d2100f4c4c4eaa413123093e1fc4.png\"/></p>\n<h3><a id=\"_59\"></a>条件断点</h3>\n<p>所谓条件断点，是断点处，当满足了你设置的条件时才会触发。一般可以和跟踪点搭配使用。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\4a365c47775b47a7ab80d99aac383d4b.png\"/><br/> 继续沿用之前的代码，在上图中，我们可以看到大的红色框包含了条件断点的三种类型，分别是条件表达式，命中次数和过滤器，下面我们一个一个来讲。</p>\n<h4><a id=\"_64\"></a>条件表达式</h4>\n<p>条件表达式是指满足了给定的条件表达式，跟踪断点才会被触发。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\99cb3c092823483494e74a71bc6aeaff.png\"/><br/> 如上图，设置 i%2 == 0，表示当该断点处，该条件为真（is true）时，跟踪断点才会被触发，记录相应的输出信息。</p>\n<p>效果如下，Output 框中确实只输出了偶数次的记录。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b59576fc23e5494796183de5c644d42e.png\"/></p>\n<h4><a id=\"_71\"></a>命中次数</h4>\n<p>如图，当命中次数 &gt;= 5 时，跟踪断点被触发执行。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6040f8a0cff546be8496a9561f68539e.png\"/></p>\n<h4><a id=\"_74\"></a>过滤器</h4>\n<p>过滤器用于显示指定的输出信息，在这里不详述，因为我也没用过这个功能，大家有兴趣的，可以通过参考部分的链接进行学习。</p>\n<h2><a id=\"_76\"></a>各种窗口</h2>\n<p>最开始我们讲到了，在代码区域的下方，有各种各样的窗口，这些窗口具有不同的功能，用来辅助我们进行 debug，输出响应的信息。</p>\n<h3><a id=\"Autos__Local__78\"></a>Autos 和 Local 窗口</h3>\n<p>在 C++ 中，Autos 窗口显示前三个代码行中的变量<br/> <img alt=\"在这里插入图片描述\" src=\"image\\9bb40856c01c4ba58e828c404a9bc077.png\"/><br/> Locals 窗口显示当前范围中的变量。</p>\n<h3><a id=\"_82\"></a>监视窗口</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8160f73eadce44e38396cc0d7e08f2a4.png\"/><br/> 将变量加入到监视窗口，你可以通过该窗口持续关注变量的变化。当超出该变量的范围时，监视窗口的变量变灰。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\c991c483db1d4239a8492e4838e2a2e5.png\"/></p>\n<h3><a id=\"_86\"></a>函数调用堆栈</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\51f8799262b84228960e3a662b8cb976.png\"/><br/> 如图所示的代码中，main，FuncA，FuncB 是以此嵌套的关系，在 main 中调用 FuncA 处设置断点，以此进入调用函数，可以看到函数的调用关系。</p>\n<h1><a id=\"_90\"></a>其它技巧</h1>\n<h2><a id=\"_debug_91\"></a>快速重启 debug</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5503b00c35eb440fbf83cdf30f28ae65.png\"/><br/> 红色框圈起的是重启调试按钮，如果你在调试的时候修改了代码，或者想要重新执行调试，那么这个按钮比停止调试再启动调试更快。</p>\n<h2><a id=\"_94\"></a>固定，值的位置</h2>\n<p>有时候我们希望直接观察变量的值，而不是移动鼠标到变量上时才能观察，就可以将它固定下来。</p>\n<p>下图中，将鼠标移动到变量上，弹出的小框右侧有一个图书钉样式的符号，点击它即可实现效果。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\db0b315808d84c26bf4152e8a3d05ae9.png\"/></p>\n<h1><a id=\"_101\"></a>参考</h1>\n<ol><li><a href=\"https://docs.microsoft.com/zh-cn/visualstudio/debugger/debugging-absolute-beginners?view=vs-2022\">零基础调试的方法</a></li><li><a href=\"https://docs.microsoft.com/zh-cn/visualstudio/debugger/debugger-feature-tour?view=vs-2022\">初步了解 Visual Studio 调试器</a></li><li><a href=\"https://docs.microsoft.com/zh-cn/visualstudio/debugger/using-tracepoints?view=vs-2022\">在 Visual Studio 中使用跟踪点将信息记录到“输出”窗口中</a></li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}