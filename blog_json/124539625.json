{"blogid": "124539625", "writerAge": "码龄8年", "writerBlogNum": "20", "writerCollect": "28", "writerComment": "5", "writerFan": "3", "writerGrade": "3级", "writerIntegral": "400", "writerName": "KevinZhaocg", "writerProfileAdress": "writer_image\\profile_124539625.jpg", "writerRankTotal": "80820", "writerRankWeekly": "195699", "writerThumb": "16", "writerVisitNum": "28811", "blog_read_count": "3272", "blog_time": "于 2022-05-02 14:00:05 发布", "blog_title": "C# 之 String.Format详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p>有兴趣的同学可以去看官方文档 <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string.format?view=net-6.0\" title=\"String.Format Method (System) | Microsoft Docs\">String.Format Method (System) | Microsoft Docs</a></p>\n<p>本文仅对官方文档中的内容进行提炼和总结</p>\n</blockquote>\n<p><strong>功能描述</strong>：把一些对象（Object）的值转化为字符串，并按照formats里的格式塞到另外一个字符串里</p>\n<p><strong>函数重载</strong>：</p>\n<pre><code class=\"language-cs\">public static string Format(IFormatProvider provider, string format, object arg0)\n\npublic static string Format(IFormatProvider provider, string format, object arg0, object arg1)\n\npublic static string Format(IFormatProvider provider, string format, object arg0, object arg1, object arg2)\n\npublic static string Format(IFormatProvider provider, string format, params object[] args)\n\npublic static string Format(string format, object arg0)\n\npublic static string Format(string format, object arg0, object arg1)\n\npublic static string Format(string format, object arg0, object arg1, object arg2)\n\npublic static string Format(string format, params object[] args)\n</code></pre>\n<blockquote>\n<p>因为Format方法接收的参数是Object类型，所以对于值类型会涉及到装箱的操作</p>\n</blockquote>\n<p>下面通过一些例子来详细介绍string.Format的用法：</p>\n<p>如果你想要往另外一个字符串中插入某个object、variable、或者expression的值，那么就可以尝试使用String.Format，例如下面的例子：</p>\n<pre><code class=\"language-cs\">Decimal pricePerOunce = 17.36m\nString s = String.Format(\"The current price is {0} per ounce\", pricePerOunce);\nConsole.WriteLine(s);\n// Result: The current price is 17.36 per ounce.</code></pre>\n<p>你也可以去控制 大括号里的值 的 <strong>格式</strong>：</p>\n<pre><code class=\"language-cs\">Decimal pricePerOunce = 17.36m;\nString s = String.Format(\"The current price is {0:C2} per ounce.\", pricePerOunce);\nConsole.WriteLine(s);\n// Result if current culture is en-US:\n//      The current price is $17.36 per ounce.</code></pre>\n<p>除了控制格式之外，你还可以控制 <strong>对齐</strong>（alignment） 和 <strong>间隔</strong> (spacing)</p>\n<p>String.Format的参数列表中，先是一个格式化的字符串，后面跟要往该字符串指定位置（即 <strong>{ }</strong> 的位置）中插入的对象或者表达式（数量可以是任意多个，虽然String.Format提供了好几种重载方式，其实你并不用去关心究竟在用哪一个）。</p>\n<p>大括号里可以写数字，对应了这些待插入项的序号（即第几个），例如：</p>\n<pre><code class=\"language-cs\">string s = String.Format(\"At {0}, the temperature is {1}°C.\", DateTime.Now, 20.4);\nConsole.WriteLine(s);\n// Output similar to: 'At 4/10/2015 9:29:41 AM, the temperature is 20.4°C.'</code></pre>\n<p></p>\n<p><strong>控制格式（Control Formating）</strong></p>\n<p>如上文所说，我们可以在大括号 <strong>{ } </strong>里通过添加数字来指定插入参数列表中的第几个数（例如 <strong>{0} </strong>，表示格式化字符串后面的第一个参数），同时我们也可以在数字后面使用冒号‘:’再后缀一些符号来控制更具体一些的格式。</p>\n<p>例如：:d 提取了时间里的年月日  :t 提取了小时和分钟</p>\n<pre><code class=\"language-cs\">string s = String.Format(\"It is now {0:d} at {0:t}\", DateTime.Now);\nConsole.WriteLine(s);\n// Output similar to: 'It is now 4/10/2015 at 10:04 AM'</code></pre>\n<p>这里读者可能会疑问：我咋知道有哪些字符串格式呢？确实这些格式化的种类还是比较多的，光靠记忆肯定是不行的，这里给出官方链接，按需要去查即可：</p>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings\" title=\"Standard numeric format strings​​​​​​\">Standard numeric format strings​​​​​​</a></p>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings\" title=\"Standard date and time format strings | Microsoft Docs\">Standard date and time format strings | Microsoft Docs</a></p>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings\" title=\"Standard TimeSpan format strings | Microsoft Docs\">Standard TimeSpan format strings | Microsoft Docs</a></p>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/enumeration-format-strings\" title=\"Enumeration format strings | Microsoft Docs\">Enumeration format strings | Microsoft Docs</a></p>\n<p>你也可以使用一些格式的标识符（Format Specifier）来定制自己需要的格式类型</p>\n<p></p>\n<p><strong>控制间距（Control Spacing)</strong></p>\n<p>你可以定义插入到目标字符串的字符串片段的宽度，例如，可以使用 <strong>{0,12} </strong>表示插入的字符串的宽度为12</p>\n<p>可以用于文本对齐，例如：</p>\n<pre><code class=\"language-cs\">int[] years = { 2013, 2014, 2015 };\nint[] population = { 1025632, 1105967, 1148203 };\nvar sb = new System.Text.StringBuilder();\nsb.Append(String.Format(\"{0,6} {1,15}\\n\\n\", \"Year\", \"Population\"));\nfor (int index = 0; index &lt; years.Length; index++)\n    sb.Append(String.Format(\"{0,6} {1,15:N0}\\n\", years[index], population[index]));\n\nConsole.WriteLine(sb);\n\n// Result:\n//      Year      Population\n//\n//      2013       1,025,632\n//      2014       1,105,967\n//      2015       1,148,203</code></pre>\n<p><strong>控制左右对齐 (Control Alignment)</strong></p>\n<p>默认是右对齐，可以使用 如 <strong>{0, -12}</strong> 来设置为左对齐：</p>\n<pre><code class=\"language-cs\">int[] years = { 2013, 2014, 2015 };\nint[] population = { 1025632, 1105967, 1148203 };\nString s = String.Format(\"{0,-10} {1,-10}\\n\\n\", \"Year\", \"Population\");\nfor(int index = 0; index &lt; years.Length; index++)\n   s += String.Format(\"{0,-10} {1,-10:N0}\\n\",\n                      years[index], population[index]);\nConsole.WriteLine($\"\\n{s}\");\n// Result:\n//    Year       Population\n//\n//    2013       1,025,632\n//    2014       1,105,967\n//    2015       1,148,203</code></pre>\n<p></p>\n</div>\n</div>"}