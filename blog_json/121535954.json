{"blogid": "121535954", "writerAge": "码龄4年", "writerBlogNum": "1", "writerCollect": "1", "writerComment": "0", "writerFan": "0", "writerGrade": "1级", "writerIntegral": "10", "writerName": "BroSheng", "writerProfileAdress": "writer_image\\profile_121535954.jpg", "writerRankTotal": "286683", "writerRankWeekly": "621696", "writerThumb": "0", "writerVisitNum": "1391", "blog_read_count": "1363", "blog_time": "于 2021-11-25 14:05:32 发布", "blog_title": "android_rust分析", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>一、android_rust 简介</p>\n<p>项目地址<a href=\"https://android.googlesource.com/toolchain/android_rust\" title=\"https://android.googlesource.com/toolchain/android_rust\">https://android.googlesource.com/toolchain/android_rust</a></p>\n<p>android_rust是一个为安卓环境编译rust的项目，这个项目本身使用python写成，通过执行build.py，使用自带的工具去完成rust的编译，最终还是调用了rust本身的x.py。在我们为RISC-V架构的安卓移植rust前，我们首先对这个项目进行分析。</p>\n<p>二、项目文件分析</p>\n<p>首先查看该项目的结构 </p>\n<ul><li>patches存放了最新的补丁</li><li>templates 存放了需要的工具的wrapper</li></ul>\n<p><img alt=\"\" height=\"1022\" src=\"image\\cb0583b6e9f047e781b0856b2a4066be.png\" width=\"1144\"/></p>\n<p> </p>\n<p>1. build.py</p>\n<p>build.py是该项目的入口，有一个函数get_host_tag()。该函数将获得host的系统平台，使用sys.platform.startwitch()检测系统版本。如果sys.platform以linux开头，则默认host为linux-x86。否则如果以darwin开头，则默认host为darwin-x86。如果都不是，则抛出错误’Unsupported host’。将python_bin赋值为对应平台的python路径，创建一个新的子进程，用其中包含的python执行do_build.py.</p>\n<p>2. do_build.py</p>\n<p></p>\n<p>STDLIB_SOURCES定义了需要的标准库</p>\n<p style=\"margin-left:0;\"><img alt=\"\" height=\"928\" src=\"image\\304e2efe2529430ab97a47f0aca7e368.png\" width=\"1200\"/></p>\n<p></p>\n<p>LLVM_BUILD_PATHS_OF_INTEREST </p>\n<p><img alt=\"\" height=\"632\" src=\"image\\0b37663f920c49d5bd2fad97e9eda9c0.png\" width=\"1200\"/></p>\n<p>parse_args() 如注释所示，这个函数用来解析输入的参数</p>\n<p></p>\n<p><img alt=\"\" height=\"660\" src=\"image\\8c4852edf93845d2a12164872c8c2994.png\" width=\"1200\"/></p>\n<p></p>\n<p>main() 函数的主程序</p>\n<p>首先创建三个文件夹: OUT_PATH, OUT_PATH_PACKAGE和OUT_PATH_WRAPPERS</p>\n<p></p>\n<p><img alt=\"\" height=\"664\" src=\"image\\8b6af2b4aaa94e8197891907ce80243a.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\"></p>\n<p>这三个常量的定义在paths.py</p>\n<p><img alt=\"\" height=\"568\" src=\"image\\a28f9e1144004038b4b43920b1d500e1.png\" width=\"1200\"/></p>\n<p>实际上，</p>\n<p>OUT_PATH 在工作目录下创建一个新的文件夹out</p>\n<p>OUT_PATH_PACKAGE 在out文件夹里创建一个新的文件夹package</p>\n<p>OUT_PATH_WRAPPERS在out文件夹里创建一个新的文件夹wrappers</p>\n<p></p>\n<p>dist_dir = os.environ.get(‘DIST_DIR’) 获取系统中的$DIST_DIR环境变量</p>\n<p><img alt=\"\" height=\"464\" src=\"image\\9777868923cd44e58b2fc045857e5e3c.png\" width=\"1200\"/></p>\n<p>如果$DIST_DIR存在，则解析这个目录，否则在工作目录创建一个dist文件夹</p>\n<p></p>\n<p>执行source_manger.setup_files函数</p>\n<p><img alt=\"\" height=\"396\" src=\"image\\0196958d569f4b49b0445520192ac013.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\">此函数位于source_manager.py中，函数setup_files仅在此处被调用</p>\n<p style=\"margin-left:0;\"></p>\n<p style=\"margin-left:0;\">函数 setup_files的声明部分如下<img alt=\"\" height=\"370\" src=\"image\\dea3bde04d7e49d1b5983bd1925365de.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\">有四个参数，input_dir, output_dir和patches_dir为Path类型，no_patch_abort默认为False。根据注释，此函数用来应用补丁文件，如果补丁应用成功，则重命名输出目录。</p>\n<p style=\"margin-left:0;\"></p>\n<p style=\"margin-left:0;\">清理无用的临时目录</p>\n<p style=\"margin-left:0;\"><img alt=\"\" height=\"282\" src=\"image\\350452e584bd48649da2f68339234219.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\">如果目录存在，则清理该目录</p>\n<p style=\"margin-left:0;\"></p>\n<p style=\"margin-left:0;\">如果目录不存在，则建立目录</p>\n<p style=\"margin-left:0;\"><img alt=\"\" height=\"198\" src=\"image\\819807273ee341fea8b397e529f5b489.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\">根据系统类型调用不同的命令，创建一份rust源码的拷贝</p>\n<p style=\"margin-left:0;\"><img alt=\"\" height=\"742\" src=\"image\\416f450a7d5f490892d560263431be08.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\"></p>\n<p style=\"margin-left:0;\">调用函数apple_patches给源码打补丁</p>\n<p style=\"margin-left:0;\"><img alt=\"\" height=\"174\" src=\"image\\055826a30c934c258094e10039b30621.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\">应用补丁的过程如下，在此不过多叙述</p>\n<p style=\"margin-left:0;\"><img alt=\"\" height=\"1200\" src=\"image\\0209dc3cd5c741aa9cb67802c0ee4a4e.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\"></p>\n<p style=\"margin-left:0;\"><img alt=\"\" height=\"902\" src=\"image\\649d37f0b8fd42da8dc8fc9cf7353659.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\"></p>\n<p style=\"margin-left:0;\">回到do_build.py</p>\n<p style=\"margin-left:0;\">设置rust环境</p>\n<p style=\"margin-left:0;\"><img alt=\"\" height=\"342\" src=\"image\\2e5f15fd28bd41c8a0a3db9e1a416907.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\">子线程调用x.py –help，用来生成cargo config</p>\n<p style=\"margin-left:0;\"><img alt=\"\" height=\"388\" src=\"image\\af7c15206e0c427c9f3ad1bdfe7a9140.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\"></p>\n<p style=\"margin-left:0;\">调用cargo去获取离线包，重新生成lockfile</p>\n<p style=\"margin-left:0;\"><img alt=\"\" height=\"388\" src=\"image\\a7ca86facb7f41a08c0f15aa1663f6d0.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\">执行编译动作，如果遇到错误，报错并退出</p>\n<p style=\"margin-left:0;\"><img alt=\"\" height=\"528\" src=\"image\\1fb25ee4c08b4a6584f3b8f45fc644ca.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\">如果在linux环境下，移除已存在的OUT_PATH_STDLIB_SRCS并重新拷贝</p>\n<p style=\"margin-left:0;\"><img alt=\"\" height=\"298\" src=\"image\\fe13422d69124dad9a57745e3d7d56a6.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\">对二进制文件进行strip操作，这个操作可以为库文件瘦身，减小占用的容量</p>\n<p style=\"margin-left:0;\"><img alt=\"\" height=\"572\" src=\"image\\c1366582fb694eb7a4f6dd1865445c23.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\">安装libc++库到out/package/lib64/</p>\n<p style=\"margin-left:0;\"><img alt=\"\" height=\"500\" src=\"image\\38753e226a954befbc0f21a0b07eb930.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\">过滤Android.mk和Android.bp文件</p>\n<p style=\"margin-left:0;\"><img alt=\"\" height=\"268\" src=\"image\\51d762f314444fdb9cbdd23085a6dd8b.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\"></p>\n<p style=\"margin-left:0;\"><img alt=\"\" height=\"268\" src=\"image\\e308acf056f642528b9697511fd4269e.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\"></p>\n<p>3. config.py</p>\n<p>在do_build.py中调用了config.configure(args, env)，这个函数存在于config.py中，因此在这里单独解析</p>\n<p>首先是函数声明部分，然后设置编译器/连接器的参数</p>\n<p><img alt=\"\" height=\"642\" src=\"image\\e1d71498fb554b96b497738938a77bdc.png\" width=\"1200\"/></p>\n<p>如果在darwin平台下，寻找系统目录</p>\n<p><img alt=\"\" height=\"464\" src=\"image\\58fff13d71484149912233ca81e52bcc.png\" width=\"1200\"/></p>\n<p>把linker的设置连接起来</p>\n<p><img alt=\"\" height=\"370\" src=\"image\\b069ec3d3c114b6f9959ea9bfc591533.png\" width=\"1200\"/></p>\n<p>处理$，设置device_linker_flags</p>\n<p><img alt=\"\" height=\"334\" src=\"image\\42dd0dd5582c46afb103fa83325efe7b.png\" width=\"1200\"/></p>\n<p>更新环境变量</p>\n<p><img alt=\"\" height=\"502\" src=\"image\\e47f985a5331480c99a40dbc2884280a.png\" width=\"1200\"/></p>\n<p>在linux系统中，调整目录</p>\n<p><img alt=\"\" height=\"360\" src=\"image\\0cf5b299a8fd41b5bfdfc31af8536df8.png\" width=\"1200\"/></p>\n<p>设置一些其他路径和arguments</p>\n<p><img alt=\"\" height=\"576\" src=\"image\\1fe411e4671841bc9a11d67b9b516479.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;\">设置环境和其他目录</p>\n<p><img alt=\"\" height=\"1200\" src=\"image\\c62e82589a9547a0921a94ef32160843.png\" width=\"1200\"/></p>\n<p>此处的host_configs()</p>\n<p><img alt=\"\" height=\"1200\" src=\"image\\cda722c679ae4b7ca7aab55398d3ef56.png\" width=\"1200\"/></p>\n<p>实际上生成了host的cc,cxx,linker的wrapper</p>\n<p>device_config()</p>\n<p><img alt=\"\" height=\"1200\" src=\"image\\5cf0eacbf93542cea03860aa52186186.png\" width=\"1200\"/></p>\n<p>实际上生成了device的cc，cxx和linker的wrapper</p>\n<p></p>\n</div>\n</div>"}