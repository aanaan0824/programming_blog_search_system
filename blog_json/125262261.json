{"blogid": "125262261", "writerAge": "码龄8年", "writerBlogNum": "9", "writerCollect": "4", "writerComment": "1", "writerFan": "0", "writerGrade": "1级", "writerIntegral": "93", "writerName": "KingSunSky_我是小小王", "writerProfileAdress": "writer_image\\profile_125262261.jpg", "writerRankTotal": "124479", "writerRankWeekly": "272388", "writerThumb": "2", "writerVisitNum": "1905", "blog_read_count": "1183", "blog_time": "于 2022-06-13 16:14:31 发布", "blog_title": "C++中的枚举(enum)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"Cenum_0\"></a>C++中的枚举(enum)</h1>\n<blockquote>\n<p>枚举类型(enumeration)是 C++ 中的一种派生数据类型，它是由用户定义的若干枚举常量的集合。</p>\n<p>枚举是一个数值集合，是给一个值命名的一种方法。</p>\n<p>如果想要使用整数来表示某些状态或者某些数值时，它非常有用。</p>\n<p>不管怎么说，枚举其实就是一个整数，<strong>它的存在本质上是为了让代码更加干净</strong>，更加具有可读性。</p>\n</blockquote>\n<p>看一个例子：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">example</span> <span class=\"token punctuation\">{<!-- --></span>\n    Aa<span class=\"token punctuation\">,</span> Bb<span class=\"token punctuation\">,</span> Cc\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>数据类型本身的名字是以<strong>大写字母</strong>开头的，虽然这并非必须，但是<strong>绝大多数程序员都会釆用首字母大写的形式</strong>。</p>\n<p>默认情况下，编译器设置第一个枚举量为 0，下一个为 1，以此类推。在上述示例中，<code>Aa</code>的值将是 0，<code>Bb</code>的值为 1，<code>Cc</code>的值为2，也可以手动给每个枚举量赋值：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">example</span> <span class=\"token punctuation\">{<!-- --></span>\n    Aa<span class=\"token punctuation\">,</span> Bb <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> Cc\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>给Bb赋值为10后，Cc的值会变成11，这个需要注意。</p>\n<p>还可以指定给枚举类型赋值的整数类型，枚举默认为32位整形，在某些情况下，甚至没必要用到32位，为了节省开销，甚至可以用8位整形：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">example</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Aa<span class=\"token punctuation\">,</span> Bb <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> Cc\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>将类型指定成unsigned char后，枚举变量变成了8位整型，减少了内存使用。</p>\n<p>需要注意的是，不能指定为float或者double等类型，因为枚举量必须是一个整数，float和double都不是整数。</p>\n<p>要意识到，<code>enum</code>语句示例<strong>实际上并没有创建任何变量，只是定义数据类型</strong>。当以后创建这个数据类型的变量时，它们看起来就是整数，并且<strong>这些整数的值被限制在与枚举集合中的符号名称相关联的整数上。</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">example</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Aa <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Bb<span class=\"token punctuation\">,</span> Cc\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nexample ex<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>此语句的形式与其他任何变量定义一样，首先是数据类型名称，然后是变量名称。请注意，数据类型名称是<code>example</code> ，而不是<code>enum example</code>。创建的变量<code>ex</code>会被限定在0,1,2中，我们也可以避开编译器的限制，因为这种不属于物理上无法设定的东西，它本质上就是4个字节的整数，它只有四个字节的内存，我们可以把任何想要的东西放到那块内存中。</p>\n<p>即使枚举数据类型中的值实际存储为整数，也<strong>不能总是将整数值替换为符号名称</strong>。例如，不能使用下面的语句将 <code>Aa</code> 赋值给 <code>ex</code>：</p>\n<pre><code class=\"prism language-cpp\">ex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//这种写法是不对的</span>\n</code></pre>\n<p>但是，可以使用整数值而不是符号名称来测试枚举变量。例如，以下两个 <code>if</code> 语句是等效的：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ex <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ex <span class=\"token operator\">==</span> Aa<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>还可以使用关系运算符来比较两个枚举变量。</p>\n<pre><code class=\"prism language-cpp\">example ex1 <span class=\"token operator\">=</span> Aa<span class=\"token punctuation\">,</span> ex2 <span class=\"token operator\">=</span> Bb<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ex1 <span class=\"token operator\">&gt;</span> ex2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    ……\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>例子：</p>\n<p>日志类，不使用枚举：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Log</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> LogLevelError <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> LogLevelWarning <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> LogLevelInfo <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_LogLevel <span class=\"token operator\">=</span> LogLevelInfo<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">SetLevel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> level<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tm_LogLevel <span class=\"token operator\">=</span> level<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Warn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> message<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_LogLevel <span class=\"token operator\">&gt;=</span> LogLevelWarning<span class=\"token punctuation\">)</span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[WARNING]:\"</span> <span class=\"token operator\">&lt;&lt;</span> message <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> message<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_LogLevel <span class=\"token operator\">&gt;=</span> LogLevelInfo<span class=\"token punctuation\">)</span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[INFO]:\"</span> <span class=\"token operator\">&lt;&lt;</span> message <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> message<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_LogLevel <span class=\"token operator\">&gt;=</span> LogLevelError<span class=\"token punctuation\">)</span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[ERROR]:\"</span> <span class=\"token operator\">&lt;&lt;</span> message <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n\tLog log<span class=\"token punctuation\">;</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">SetLevel</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">.</span>LogLevelWarning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a warning!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>使用后，代码看起来干净很多：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Log</span> \n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Level</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        LevelError <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> LevelWarning<span class=\"token punctuation\">,</span> LevelInfo\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    Level m_LogLevel <span class=\"token operator\">=</span> LevelInfo<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">SetLevel</span><span class=\"token punctuation\">(</span>Level level<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        m_LogLevel <span class=\"token operator\">=</span> level<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Warn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_LogLevel <span class=\"token operator\">&gt;=</span> LevelWarning<span class=\"token punctuation\">)</span>\n            std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[WARNING]:\"</span> <span class=\"token operator\">&lt;&lt;</span> message <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_LogLevel <span class=\"token operator\">&gt;=</span> LevelInfo<span class=\"token punctuation\">)</span>\n            std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[INFO]:\"</span> <span class=\"token operator\">&lt;&lt;</span> message <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_LogLevel <span class=\"token operator\">&gt;=</span> LevelError<span class=\"token punctuation\">)</span>\n            std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[ERROR]:\"</span> <span class=\"token operator\">&lt;&lt;</span> message <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> s_Variable<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Log log<span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">SetLevel</span><span class=\"token punctuation\">(</span>Log<span class=\"token double-colon punctuation\">::</span>LevelInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a warning!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}