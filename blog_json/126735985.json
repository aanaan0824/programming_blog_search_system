{"blogid": "126735985", "writerAge": "码龄2年", "writerBlogNum": "76", "writerCollect": "22", "writerComment": "12", "writerFan": "8", "writerGrade": "3级", "writerIntegral": "791", "writerName": "王大队长", "writerProfileAdress": "writer_image\\profile_126735985.jpg", "writerRankTotal": "25995", "writerRankWeekly": "4066", "writerThumb": "21", "writerVisitNum": "17106", "blog_read_count": "62", "blog_time": "于 2022-09-07 00:03:51 发布", "blog_title": "查找的三种常用算法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>查找的定义：</h1>\n<p>给定一个值k，在含有n个元素的表中找出关键字等于k的元素。若找到，则查找成功，返回该元素的信息或该元素在表中的位置；否则查找失败，返回相关的指示信息。</p>\n<p>我们最常见的查找莫过于对数组进行查找，比如：</p>\n<p><img alt=\"\" height=\"503\" src=\"image\\09a2ee80036e4db3b77c93e9d3c66163.png\" width=\"856\"/></p>\n<p>但是接下来我们知道其实还有很多别的数据结构比如二叉树能够有效的进行查找。</p>\n<p>若在查找的时候同时对表进行操作(如插入和删除)，则称为动态查找表，我们知道对数组进行动态查找效率是比较低的。</p>\n<p>一些定义：</p>\n<p>若在查找的时候不涉及对表进行操作(如插入和删除)，则称为静态查找表。</p>\n<p>一个对查找效率的评价指标ASL(Average Search Length, 平均查找长度)：</p>\n<p><img alt=\"\" height=\"144\" src=\"image\\5970a24c05964f569643dfd950358cbf.png\" width=\"975\"/></p>\n<h1>线性表的查找 </h1>\n<p> 我们将介绍三种在线性表(可以将线性表理解为数组)上查找的方法：顺序查找、折半查找、分块查找。其中三种算法的效率：顺序查找O(n)&lt;分块查找&lt;折半查找O(logn)</p>\n<h2>顺序查找</h2>\n<p>不过多介绍，就是我们最熟悉的遍历，从头搜到尾。其ASL：</p>\n<p><img alt=\"\" height=\"182\" src=\"image\\7b98a8325c5c436d9bcd2f741d472294.png\" width=\"864\"/></p>\n<p>优点：简单，且对表的结构无特别要求，无论是用顺序表还是链表，也无论表是否有序，它都适用。缺点是效率低。</p>\n<p></p>\n<h2>折半查找</h2>\n<p>又称为二分查找，其效率比较高。<strong>但是往往要求为有序表。</strong></p>\n<p><img alt=\"\" height=\"334\" src=\"image\\8c69667607c045619269fb28129f2672.png\" width=\"957\"/></p>\n<p>折半查找和顺序查找寻找元素37：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/9048dc3fd99b9ee1b0ad661c23f809a6.gif\"/></p>\n<p>代码实现：</p>\n<pre><code class=\"language-cpp\">int BinSearch(int arr[], int arr_length, int k)\n{\n    int low = 0, high = arr_length - 1, mid;\n    while(low &lt;= high)\n    {\n        mid = (low + high) / 2;\n        if(k == arr[mid])\n            return mid + 1; //返回逻辑序号(arr[0]对应第一个元素)\n        if(k &lt; arr[mid])\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return(0); //未找到返回0\n}</code></pre>\n<p> </p>\n<h2>分块查找</h2>\n<p>在介绍分块查找前先介绍一下索引存储结构：</p>\n<p><img alt=\"\" height=\"494\" src=\"image\\57cf92300eea48cdac729f446b2f834c.png\" width=\"951\"/></p>\n<p>换句话说，索引存储结构相当于字典的目录索引功能，坐标的索引表就是目录，我们根据关键字在\"目录\"中查找对应的页码(地址)，得到了页码(地址)来寻找到对应的数据(主数据表中的区号、城市名、说明)。</p>\n<p>在索引存储结构中进行关键字查找时先在索引表中快速查找(因为索引表中按关键字有序排列，可以<strong>采用折半查找</strong>)到相应关键字，然后通过对应地址找到主数据表中的元素。</p>\n<p>索引存储结构可以提高按关键字查找元素的效率，其缺点是需要建立索引表而增加时间和空间的开销。</p>\n<p></p>\n<p>下面讲讲分块查找：</p>\n<p><img alt=\"\" height=\"171\" src=\"image\\e494cff3a00147898b3d59c25b471209.png\" width=\"967\"/></p>\n<p>比如像下面这样将数据表分成5块，第一块最大元素为14，第二块最大元素为34，第三块为66，第四块为85，第五块为100。</p>\n<p><img alt=\"\" height=\"359\" src=\"image\\7b49b9e9d5cc465f8a0bc0efa5d2fa09.png\" width=\"911\"/> 对于某个数k，我们先用折半查找(因为索引表是有序的)比较k和索引表中存储了每个块中的最大数据的表来确定k在哪块，比如我们要找78，66&lt;78&lt;85，因此在85这一块。然后再在块中用顺序查找等方式进一步查找得到k。代码就不放了。</p>\n<p>ASL：</p>\n<p><img alt=\"\" height=\"201\" src=\"image\\551481feefb24f70bb422b096e29799b.png\" width=\"827\"/></p>\n<p></p>\n<blockquote>\n<p>参考资料：</p>\n<p>数据结构教程(第5版)</p>\n</blockquote>\n</div>\n</div>"}