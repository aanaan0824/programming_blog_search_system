{"blogid": "126599928", "writerAge": "码龄9年", "writerBlogNum": "225", "writerCollect": "33", "writerComment": "2", "writerFan": "44", "writerGrade": "5级", "writerIntegral": "2216", "writerName": "Ares-Wang", "writerProfileAdress": "writer_image\\profile_126599928.jpg", "writerRankTotal": "10418", "writerRankWeekly": "3523", "writerThumb": "73", "writerVisitNum": "13711", "blog_read_count": "167", "blog_time": "已于 2022-08-31 16:11:24 修改", "blog_title": ".NET delegate 委托 、 Event 事件,接口回调", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// 定义委托</span>\n<span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">WorkDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">Do</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Do</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">// 首先给callback委托赋值</span>\n\t\t<span class=\"token class-name\">WorkDone</span> callback <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WorkDone</span><span class=\"token punctuation\">(</span>WorkDoneHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 将callback作为参数</span>\n\t\t<span class=\"token function\">Working</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Working</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WorkDone</span> callBack<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">// 当工作完成的时候执行这个委托</span>\n\t\t<span class=\"token function\">callBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">WorkDoneHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*上面的代码中，将方法WorkDoneHandler()作为参数，传递给了另一个方法Working(WorkDone callBack)，这样做的好处在于，可以动态的指定执行哪个方法。比如在Do()方法中，我们指定的callback 是WorkDoneHandler 当然也可以是其它匹配的方法。而Working()方法根本不需要知道自己最后执行的是哪个Handler。*/</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\">二、\t接口回调\n通常情况下，我们创建一个对象，并马上直接去使用它的方法。然而，在有些情况下，希望能在某个场景出现后或条件满足时才调用此对象的方法。回调就可以解决这个“延迟调用对象方法”的问题。这个被调用方法的对象称为回调对象。\n实现回调的原理简介如下<span class=\"token punctuation\">:</span> \n首先创建一个回调对象，然后再创建一个控制器对象，将回调对象需要被调用的方法告诉控制器对象。控制器对象负责检查某个场景是否出现或某个条件是否满足。当此场景出现或此条件满足时，自动调用回调对象的方法。\n\n以下为C#实现回调的一个小例子：\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ConsoleApplication1</span> \n<span class=\"token punctuation\">{<!-- --></span> \n     <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span> \n     <span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> \n         <span class=\"token punctuation\">{<!-- --></span> \n             <span class=\"token comment\">//创建一个控制器对象，将提供给它的回调对象传入 </span>\n             <span class=\"token class-name\">Controller</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CallBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n             <span class=\"token comment\">//启动 </span>\n             obj<span class=\"token punctuation\">.</span><span class=\"token function\">Star</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span> \n     <span class=\"token punctuation\">}</span> \n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IBack</span> \n     <span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n     <span class=\"token punctuation\">}</span> \n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CallBack</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IBack</span></span> \n     <span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n         <span class=\"token punctuation\">{<!-- --></span> \n             <span class=\"token comment\">//为了简洁这里只是显示下时间 </span>\n             System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span> \n     <span class=\"token punctuation\">}</span> \n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller</span> \n     <span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token keyword\">public</span> <span class=\"token class-name\">IBack</span> CallBackObj <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//这里引用回调对象 </span>\n         <span class=\"token keyword\">public</span> <span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IBack</span> obj<span class=\"token punctuation\">)</span> \n         <span class=\"token punctuation\">{<!-- --></span> \n             <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>CallBackObj <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span> \n         <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Star</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n         <span class=\"token punctuation\">{<!-- --></span> \n             Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"敲键盘任意键就显示当前的时间，直到按ESC退出....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n             <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Key <span class=\"token operator\">!=</span> ConsoleKey<span class=\"token punctuation\">.</span>Escape<span class=\"token punctuation\">)</span> \n             <span class=\"token punctuation\">{<!-- --></span> \n                 CallBackObj<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n             <span class=\"token punctuation\">}</span> \n         <span class=\"token punctuation\">}</span> \n     <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span> \n     可以看到，当示例程序运行时，何时调用CallBack对象的<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法是由用户决定的，用户每敲一个键，控制器对象就调用一次CallBack的<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法。这个示例中实现回凋的关键在于IBack接口的引入。 \n\n     如果不用IBack接口，而直接使用 CallBack对象，一样可以实现同样的效果，如下： \n       <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller</span> \n     <span class=\"token punctuation\">{<!-- --></span> \n         <span class=\"token keyword\">public</span> <span class=\"token class-name\">CallBack</span> CallBackObj <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//回调对象方法的引用 </span>\n         <span class=\"token keyword\">public</span> <span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CallBack</span> obj<span class=\"token punctuation\">)</span> \n         <span class=\"token punctuation\">{<!-- --></span> \n             <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>CallBackObj <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span> \n         <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Star</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n         <span class=\"token punctuation\">{<!-- --></span> \n             Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"敲键盘任意键就显示当前的时间，直到按ESC退出....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n             <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Key <span class=\"token operator\">!=</span> ConsoleKey<span class=\"token punctuation\">.</span>Escape<span class=\"token punctuation\">)</span> \n             <span class=\"token punctuation\">{<!-- --></span> \n                 CallBackObj<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n             <span class=\"token punctuation\">}</span> \n         <span class=\"token punctuation\">}</span> \n     <span class=\"token punctuation\">}</span> \n   \n   但仔细思考，这样做的结果就使Controller类与CallBack对象绑定在一起，万一如果需要调用其他类型的对象，则必须修改Controller类的代码。 \n   如果Controller类接收的是一个抽象的接口变量Iback，则任何实现了该接口的对象都可以被Controller类对象所回调，Controller类的代码就再不用被修改，保证了代码对环境的适应性，无疑是一个很好的解决方案。\n\n</code></pre>\n<p>通过加入event关键字，在编译的时候编译器会自动针对事件生成一个私有的字段（与此事件相关的委托），以及add_xxx和remove_xxx两个访问器方法。其它类只能+=、-= 操作，不能直接 xx.eventName；<br/> 1.委托允许直接通过委托去访问相应的处理函数，而<strong>事件只能通过公布的回调函数去调用</strong><br/> 2.事件只能通过“+=”，“-=”方式注册和取消订户处理函数，而委托除此之外还可以使用“=”直接赋值处理函数。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ae1c43ed93b34ab680e75aacbea15b8e.png\"/></p>\n<p>.NET 编译成<br/> private event delegate evntname；<br/> public event delegate EventName{<!-- --><br/> add__xxx 用+= 调用<br/> remove_xxx 用-=调用<br/> }</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token comment\">//定义委托，它定义了可以代表的方法的类型 </span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">GreetingDelegate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EnglishGreeting</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Morning, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ChineseGreeting</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"早上好, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//注意此方法，它接受一个GreetingDelegate类型的方法作为参数 </span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">GreetPeople</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GreetingDelegate</span> MakeGreeting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">MakeGreeting</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">GreetPeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XXXXXX\"</span><span class=\"token punctuation\">,</span> EnglishGreeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">GreetPeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YYYYY\"</span><span class=\"token punctuation\">,</span> ChineseGreeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token class-name\">GreetingDelegate</span> delegate1<span class=\"token punctuation\">;</span> \n\t\t\t<span class=\"token comment\">// 先给委托类型的变量赋值 </span>\n\t\t\tdelegate1 <span class=\"token operator\">=</span> EnglishGreeting<span class=\"token punctuation\">;</span> <span class=\"token comment\">//等价于delegate1=new GreetingDelegate(EnglishGreeting)\t\t\t</span>\n\t\t\t<span class=\"token comment\">// 给此委托变量再绑定一个方法</span>\n\t\t\tdelegate1 <span class=\"token operator\">+=</span> ChineseGreeting<span class=\"token punctuation\">;</span> \t\t\n\t\t\t<span class=\"token comment\">//等价于------------------------</span>\n\t\t\t<span class=\"token comment\">//GreetingDelegate delegate1 = new GreetingDelegate (EnglishGreeting); </span>\n\t\t\t<span class=\"token comment\">//delegate1 += ChineseGreeting; // 给此委托变量再绑定一个方法</span>\n\t\t\t<span class=\"token comment\">//--------------------------------------\t</span>\n\t\t\t<span class=\"token comment\">// 将先后调用 EnglishGreeting 与 ChineseGreeting 方法</span>\n\t\t\t<span class=\"token function\">GreetPeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XXXX\"</span><span class=\"token punctuation\">,</span> delegate1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t注意这里，第一次用的“<span class=\"token operator\">=</span>”，是赋值的语法；\n\t\t\t第二次，用的是“<span class=\"token operator\">+=</span>”，是绑定的语 法。\n\t\t\t如果第一次就使用“<span class=\"token operator\">+=</span>”，将出现“使用了未赋值的局部变量”的编译错误。\n\t\t\t<span class=\"token comment\">//-------------------------------------------</span>\n\t\t\t<span class=\"token class-name\">GreetingDelegate</span> delegate1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GreetingDelegate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t\tdelegate1 <span class=\"token operator\">+=</span> EnglishGreeting<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这次用的是 “+=”，绑定语法。</span>\n\t\t\tdelegate1 <span class=\"token operator\">+=</span> ChineseGreeting<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 给此委托变量再绑定一个方法\t\t</span>\n\t\t\t但实际上，这样会出现编译错误： “GreetingDelegate”方法没有采用“<span class=\"token number\">0</span>”个参数 的重载。\n\t\t\t尽管这样的结果让我们觉得有点沮丧，但是编译的提示：“没有<span class=\"token number\">0</span>个参数的重 载”再次让我们联想到了类的构造函数。\n\t\t\t但事件就可以了。\n\t\t\t<span class=\"token comment\">//------------------------------------------------------------------\t</span>\n\t\t\t\n        <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>委托是一个类，它定义了方法的类型，使得可以将方法当作另一个方法的参数 来进行传递，这种将方法动态地赋给参数的做法，可以避免在程序中大量使用If-Else (Switch)语句，同时使得程序具有更好的可扩展性。<br/> 使用委托可以将多个方法绑定到同一个委托变量，当调用此变量时(这里用“调<br/> 用”这个词，是因为此变量代表一个方法)，可以依次调用所有绑定的方法。</p>\n<p>事件 其实没什么不好理解的，声明一个事件不过类似于声明一个进行了封装的委托类型 的变量而已。<br/> 在类的内部，不管你声明它是public还是protected，<strong>它总是private的。</strong><br/> 在类的外部，注册“+=”和注 销“-=”的访问限定符与你在声明事件时使用的访问符相同。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GreetingManager</span><span class=\"token punctuation\">{<!-- --></span> \n\t\t<span class=\"token comment\">//这一次我们在这里声明一个事件 </span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">GreetingDelegate</span> MakeGreet<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">GreetPeople</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n\t\t\t<span class=\"token function\">MakeGreet</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n\t<span class=\"token class-name\">GreetingManager</span> gm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GreetingManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//实际上尽管我们在GreetingManager里将 MakeGreet 声明为public，但是，实际上MakeGreet会被编译成私有字段，</span>\n\tgm<span class=\"token punctuation\">.</span>MakeGreet <span class=\"token operator\">=</span> EnglishGreeting<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 编译错误1     +=，-=  编译成功</span>\n\tgm<span class=\"token punctuation\">.</span>MakeGreet <span class=\"token operator\">+=</span> ChineseGreeting<span class=\"token punctuation\">;</span>\n\tgm<span class=\"token punctuation\">.</span><span class=\"token function\">GreetPeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jimmy Zhang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\af4ae7a3c7f54ca69d71d70e15d04e83.png\"/></p>\n<p>现在已经很明确了：MakeGreet事件确实是一个GreetingDelegate类型的委 托，只不过不管是不是声明为public，它总是被声明为private。另外，它还有两个 方法，分别是add_MakeGreet和remove_MakeGreet，这两个方法分别用于注册委 托类型的方法和取消注册。实际上也就是： “+= ”对应 add_MakeGreet，“-=”对应 remove_MakeGreet。而这两个方法的访问限制取决于声明事件时的访问限制符。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Delegate</span> <span class=\"token punctuation\">{<!-- --></span> \n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Heater</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n \t\t\t<span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> temperature<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 水温 </span>\n \t\t\t<span class=\"token comment\">// 烧水 </span>\n\t \t\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BoilWater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t \t\t <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t \t\t\t <span class=\"token punctuation\">{<!-- --></span>  \n\t\t \t\t\t \t\ttemperature <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temperature <span class=\"token operator\">&gt;</span> <span class=\"token number\">95</span><span class=\"token punctuation\">)</span> \n\t\t\t\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t\t <span class=\"token function\">MakeAlert</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t  <span class=\"token function\">ShowMsg</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t    <span class=\"token punctuation\">}</span>\n\t\t\t\t\t <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// 发出语音警报 </span>\n\t\t\t<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MakeAlert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alarm：嘀嘀嘀，水已经 {0} 度了：\"</span> <span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t\t <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// 显示水温 </span>\n\t\t\t<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ShowMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Display：水快开了，当前温度：{0}度。\"</span> <span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t\t <span class=\"token punctuation\">}</span>\n \t <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span> <span class=\"token punctuation\">{<!-- --></span> \n\t\t<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">{<!-- --></span> \n\t\t\t<span class=\"token class-name\">Heater</span> ht <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Heater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t\tht<span class=\"token punctuation\">.</span><span class=\"token function\">BoilWater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> \n\t<span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6c7c4b3e7b3b4f268c9133fbac6f287c.png\"/></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Delegate</span> <span class=\"token punctuation\">{<!-- --></span>\n\t <span class=\"token comment\">// 热水器</span>\n\t <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Heater</span> <span class=\"token punctuation\">{<!-- --></span> \n\t\t  <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> temperature<span class=\"token punctuation\">;</span> \n\t\t  <span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BoilHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//声明委托</span>\n\t\t  <span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">BoilHandler</span> BoilEvent<span class=\"token punctuation\">;</span><span class=\"token comment\">//声明事件</span>\n\t     <span class=\"token comment\">// 烧水</span>\n\t\t <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BoilWater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t \t <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t \t    temperature <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temperature <span class=\"token operator\">&gt;</span> <span class=\"token number\">95</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>BoilEvent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>         <span class=\"token comment\">//如果有对象注册 </span>\n\t\t\t\t\t    <span class=\"token function\">BoilEvent</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t <span class=\"token comment\">//调用所有注册对象的方法 </span>\n\t\t\t\t\t <span class=\"token punctuation\">}</span> \n\t\t\t\t <span class=\"token punctuation\">}</span> \n\t\t\t<span class=\"token punctuation\">}</span> \n\t  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 警报器 </span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Alarm</span> <span class=\"token punctuation\">{<!-- --></span> \n\t  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MakeAlert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t  \t Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alarm：嘀嘀嘀，水已经 {0} 度了：\"</span><span class=\"token punctuation\">,</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t   <span class=\"token punctuation\">}</span> \n   <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 显示器</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Display</span> <span class=\"token punctuation\">{<!-- --></span>\n\t  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ShowMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t   <span class=\"token comment\">//静态方法</span>\n\t\t    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Display：水快烧开了，当前温度：{0}度。\"</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span> <span class=\"token punctuation\">{<!-- --></span> \n\t<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t <span class=\"token class-name\">Heater</span> heater <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Heater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t <span class=\"token class-name\">Alarm</span> alarm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Alarm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t heater<span class=\"token punctuation\">.</span>BoilEvent <span class=\"token operator\">+=</span> alarm<span class=\"token punctuation\">.</span>MakeAlert<span class=\"token punctuation\">;</span> <span class=\"token comment\">//注册方法 </span>\n\t\t heater<span class=\"token punctuation\">.</span>BoilEvent <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Alarm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>MakeAlert<span class=\"token punctuation\">;</span> <span class=\"token comment\">//给匿名对象注册方法 </span>\n\t\t heater<span class=\"token punctuation\">.</span>BoilEvent <span class=\"token operator\">+=</span> Display<span class=\"token punctuation\">.</span>ShowMsg<span class=\"token punctuation\">;</span> <span class=\"token comment\">//注册静态方法</span>\n\t\t heater<span class=\"token punctuation\">.</span><span class=\"token function\">BoilWater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t <span class=\"token comment\">//烧水，会自动调用注册过对象的方 法 </span>\n\t <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c7eb465e85c64f6c86a0fb6ac8e7d740.png\"/></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Delegate</span> <span class=\"token punctuation\">{<!-- --></span> \n\t<span class=\"token comment\">// 热水器 </span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Heater</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> temperature<span class=\"token punctuation\">;</span> \n\t \t <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> type <span class=\"token operator\">=</span> <span class=\"token string\">\"RealFire 001\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加型号作为演示 </span>\n\t\t <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> area <span class=\"token operator\">=</span> <span class=\"token string\">\"China Xian\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加产地作为演示</span>\n\t    <span class=\"token comment\">//声明委托 </span>\n\t\t <span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BoiledEventHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> sender<span class=\"token punctuation\">,</span><span class=\"token class-name\">BoiledEventArgs</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t <span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">BoiledEventHandler</span> Boiled<span class=\"token punctuation\">;</span> <span class=\"token comment\">//声明事件</span>\n\t\t <span class=\"token comment\">// 定义BoiledEventArgs类，传递给Observer所感兴趣的信息    //事件参数</span>\n\t\t <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BoiledEventArgs</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">EventArgs</span></span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t  <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> temperature<span class=\"token punctuation\">;</span>\n\t\t\t  <span class=\"token keyword\">public</span> <span class=\"token function\">BoiledEventArgs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> temperature<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>temperature <span class=\"token operator\">=</span> temperature<span class=\"token punctuation\">;</span>\n\t\t\t  <span class=\"token punctuation\">}</span>\n\t\t <span class=\"token punctuation\">}</span> \n\t<span class=\"token comment\">// 可以供继承自 Heater 的类重写，以便继承类拒绝其他对象对它的监视</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnBoiled</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BoiledEventArgs</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Boiled <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 如果有对象注册 </span>\n\t\t  <span class=\"token function\">Boiled</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用所有注册对象的方法</span>\n\t\t<span class=\"token punctuation\">}</span> \n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// 烧水。</span>\n\t <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BoilWater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n\t\t <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n\t\t\t\t   temperature <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t\t\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temperature <span class=\"token operator\">&gt;</span> <span class=\"token number\">95</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n\t\t\t\t\t  <span class=\"token comment\">//建立BoiledEventArgs 对象。</span>\n\t\t\t\t\t   <span class=\"token class-name\">BoiledEventArgs</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">BoiledEventArgs</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t\t\t\t   <span class=\"token function\">OnBoiled</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用 OnBolied方法 </span>\n\t\t\t\t  <span class=\"token punctuation\">}</span> \n\t\t<span class=\"token punctuation\">}</span> \n\t<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//---------</span>\n<span class=\"token comment\">// 警报器 </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Alarm</span> <span class=\"token punctuation\">{<!-- --></span> \n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MakeAlert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> sender<span class=\"token punctuation\">,</span><span class=\"token class-name\">Heater<span class=\"token punctuation\">.</span>BoiledEventArgs</span> e<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span> \n\t\t<span class=\"token class-name\">Heater</span> heater <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Heater<span class=\"token punctuation\">)</span>sender<span class=\"token punctuation\">;</span> <span class=\"token comment\">//这里是不是很熟悉呢？</span>\n\t\t<span class=\"token comment\">//访问 sender 中的公共字段 </span>\n\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alarm：{0} - {1}: \"</span><span class=\"token punctuation\">,</span> heater<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">,</span>heater<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alarm: 嘀嘀嘀，水已经 {0} 度了：\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 显示器 </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Display</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ShowMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> sender<span class=\"token punctuation\">,</span><span class=\"token class-name\">Heater<span class=\"token punctuation\">.</span>BoiledEventArgs</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t  <span class=\"token comment\">//静态方法 </span>\n\t  <span class=\"token class-name\">Heater</span> heater <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Heater<span class=\"token punctuation\">)</span>sender<span class=\"token punctuation\">;</span> \n\t  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Display：{0} - {1}: \"</span><span class=\"token punctuation\">,</span>heater<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">,</span> heater<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Display：水快烧开了，当前温度：{0}度。\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span> <span class=\"token punctuation\">{<!-- --></span> \n\t\t<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n\t\t\t\t<span class=\"token class-name\">Heater</span> heater <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Heater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">Alarm</span> alarm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Alarm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\theater<span class=\"token punctuation\">.</span>Boiled <span class=\"token operator\">+=</span> alarm<span class=\"token punctuation\">.</span>MakeAlert<span class=\"token punctuation\">;</span> <span class=\"token comment\">//注册方法 </span>\n\t\t\t\theater<span class=\"token punctuation\">.</span>Boiled <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Alarm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>MakeAlert<span class=\"token punctuation\">;</span><span class=\"token comment\">//给匿名对象注册方法 </span>\n\t\t\t\theater<span class=\"token punctuation\">.</span>Boiled <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Heater<span class=\"token punctuation\">.</span>BoiledEventHandler</span><span class=\"token punctuation\">(</span>alarm<span class=\"token punctuation\">.</span>MakeAlert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//也可以这么注册</span>\n\t\t\t\theater<span class=\"token punctuation\">.</span>Boiled <span class=\"token operator\">+=</span> Display<span class=\"token punctuation\">.</span>ShowMsg<span class=\"token punctuation\">;</span> <span class=\"token comment\">//注册静态方法 </span>\n\t\t\t\theater<span class=\"token punctuation\">.</span><span class=\"token function\">BoilWater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//烧水，会自动调用注册过对象的方 法 </span>\n\t\t <span class=\"token punctuation\">}</span> \n\t <span class=\"token punctuation\">}</span> \n <span class=\"token punctuation\">}</span>\n输出为：\n  Alarm：China Xian <span class=\"token operator\">-</span> RealFire <span class=\"token number\">001</span><span class=\"token punctuation\">:</span> \n  Alarm<span class=\"token punctuation\">:</span> 嘀嘀嘀，水已经 <span class=\"token number\">96</span> 度了：\n  Alarm：China Xian <span class=\"token operator\">-</span> RealFire <span class=\"token number\">001</span><span class=\"token punctuation\">:</span>\n  Alarm<span class=\"token punctuation\">:</span> 嘀嘀嘀，水已经 <span class=\"token number\">96</span> 度了： \n  Alarm：China Xian <span class=\"token operator\">-</span> RealFire <span class=\"token number\">001</span><span class=\"token punctuation\">:</span> \n  Alarm<span class=\"token punctuation\">:</span> 嘀嘀嘀，水已经 <span class=\"token number\">96</span> 度了： \n  Display：China Xian <span class=\"token operator\">-</span> RealFire <span class=\"token number\">001</span><span class=\"token punctuation\">:</span> \n  Display：水快烧开了，当前温度：<span class=\"token number\">96</span>度。\n   <span class=\"token comment\">// 省略 ...</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}