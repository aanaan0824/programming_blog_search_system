{"blogid": "123683005", "writerAge": "码龄1年", "writerBlogNum": "112", "writerCollect": "2666", "writerComment": "3494", "writerFan": "14959", "writerGrade": "7级", "writerIntegral": "9325", "writerName": "原来45", "writerProfileAdress": "writer_image\\profile_123683005.jpg", "writerRankTotal": "1471", "writerRankWeekly": "1231", "writerThumb": "3622", "writerVisitNum": "118173", "blog_read_count": "1620", "blog_time": "已于 2022-03-28 14:53:24 修改", "blog_title": "第三章 格式化输入/输出《C语言程序设计现代方法（第2版）》读书笔记", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E5%BA%8F%E8%A8%80%F0%9F%9A%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%BA%8F%E8%A8%80%F0%9F%9A%80\">序言🚀</a></p>\n<p id=\"%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%85%A5%2F%E8%BE%93%E5%87%BA%C2%A0%F0%9F%9A%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%85%A5%2F%E8%BE%93%E5%87%BA%C2%A0%F0%9F%9A%80\">第三章 格式化输入/输出 🚀</a></p>\n<p id=\"3.1%20printf%20%E5%87%BD%E6%95%B0%F0%9F%9A%80-toc\" style=\"margin-left:40px;\"><a href=\"#3.1%20printf%20%E5%87%BD%E6%95%B0%F0%9F%9A%80\">3.1 printf 函数🚀</a></p>\n<p id=\"3.1.1%20%E8%BD%AC%E6%8D%A2%E8%AF%B4%E6%98%8E%F0%9F%9A%80-toc\" style=\"margin-left:80px;\"><a href=\"#3.1.1%20%E8%BD%AC%E6%8D%A2%E8%AF%B4%E6%98%8E%F0%9F%9A%80\">3.1.1 转换说明🚀</a></p>\n<p id=\"3.1.2%20%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97%F0%9F%9A%80-toc\" style=\"margin-left:80px;\"><a href=\"#3.1.2%20%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97%F0%9F%9A%80\">3.1.2 转义序列🚀</a></p>\n<p id=\"3.2%20scanf%20%E5%87%BD%E6%95%B0%F0%9F%9A%80-toc\" style=\"margin-left:40px;\"><a href=\"#3.2%20scanf%20%E5%87%BD%E6%95%B0%F0%9F%9A%80\">3.2 scanf 函数🚀</a></p>\n<p id=\"3.2.1%20scanf%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E6%B3%95%F0%9F%9A%80-toc\" style=\"margin-left:80px;\"><a href=\"#3.2.1%20scanf%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E6%B3%95%F0%9F%9A%80\">3.2.1 scanf 函数的工作方法🚀</a></p>\n<p id=\"3.2.2%20%E6%A0%BC%E5%BC%8F%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%99%AE%E9%80%9A%E5%AD%97%E7%AC%A6%F0%9F%9A%80-toc\" style=\"margin-left:80px;\"><a href=\"#3.2.2%20%E6%A0%BC%E5%BC%8F%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%99%AE%E9%80%9A%E5%AD%97%E7%AC%A6%F0%9F%9A%80\">3.2.2 格式串中的普通字符🚀</a></p>\n<p id=\"3.2.3%20%E6%98%93%E6%B7%B7%E6%B7%86%E7%9A%84%20printf%20%E5%87%BD%E6%95%B0%E5%92%8C%20scanf%20%E5%87%BD%E6%95%B0%F0%9F%9A%80-toc\" style=\"margin-left:80px;\"><a href=\"#3.2.3%20%E6%98%93%E6%B7%B7%E6%B7%86%E7%9A%84%20printf%20%E5%87%BD%E6%95%B0%E5%92%8C%20scanf%20%E5%87%BD%E6%95%B0%F0%9F%9A%80\">3.2.3 易混淆的 printf 函数和 scanf 函数🚀</a></p>\n<p id=\"%E9%97%AE%E4%B8%8E%E7%AD%94%EF%BC%88%E5%BE%88%E9%87%8D%E8%A6%81%EF%BC%89%F0%9F%9A%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E9%97%AE%E4%B8%8E%E7%AD%94%EF%BC%88%E5%BE%88%E9%87%8D%E8%A6%81%EF%BC%89%F0%9F%9A%80\">问与答（很重要）🚀</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%E5%BA%8F%E8%A8%80%F0%9F%9A%80\">序言<span style=\"color:#4da8ee;\">🚀</span></h1>\n<blockquote>\n<p>从今天开始，<strong>各书</strong>的<strong>读书笔记</strong>就陆陆续续开展了哈（本书为《C语言程序设计现代方法（第二版）》）（一本书一个专栏，订阅会第一时间推荐更新哈），主要会把<strong>作者认为比较重要</strong>或者<strong>比较新奇</strong>的知识点<strong>记录</strong>下来。但是要想真的了解一本书，自己去看可能才会有更深的体会哈。</p>\n<hr/>\n<p></p>\n<p><strong>C语言</strong>的<strong>入门篇进阶篇</strong>和<strong>深剖篇</strong>都整理在<a class=\"link-info\" href=\"https://blog.csdn.net/weixin_62700590/article/details/122200337\" title=\"这里\">这里</a>了哈。然后<a class=\"link-info\" href=\"https://blog.csdn.net/weixin_62700590?spm=1011.2124.3001.5343\" title=\"这里\">这里</a>是<strong>个人主页</strong>，比点头像更好找文章哈。</p>\n<p><span style=\"color:#fe2c24;\">作者新建立的社区：</span><a class=\"link-info\" href=\"https://bbs.csdn.net/forums/FKBZM?typeId=22226\" title=\"https://bbs.csdn.net/forums/FKBZM?typeId=22226\">https://bbs.csdn.net/forums/FKBZM?typeId=22226</a>💖💛💙</p>\n<p><span style=\"color:#956fe7;\">期待hxd的支持哈</span>🎉 🎉 🎉</p>\n<hr/>\n<p><strong>最后是打鸡血环节：</strong><span style=\"color:#4da8ee;\">改变的确很难，但结果值得冒险，拿出点勇气来。路还很长，现在才刚开始而已。过去无可挽回，未来可以改变。🚀 🚀 🚀</span></p>\n</blockquote>\n<p></p>\n<hr/>\n<h1 id=\"%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%85%A5%2F%E8%BE%93%E5%87%BA%C2%A0%F0%9F%9A%80\">第三章 格式化输入/输出 <span style=\"color:#4da8ee;\">🚀</span></h1>\n<blockquote>\n<div>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数和</span>\n<span style=\"color:#000000;\">printf</span>\n<span style=\"color:#000000;\">函数是</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">语言编程中使用最频繁的两个函数，它们用来格式化输入和输 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">出。</span>\n</div>\n</blockquote>\n<h2 id=\"3.1%20printf%20%E5%87%BD%E6%95%B0%F0%9F%9A%80\"><span style=\"color:#000000;\">3.1 </span><span style=\"color:#000000;\"><strong>printf </strong>函数</span><span style=\"color:#4da8ee;\">🚀</span></h2>\n<blockquote>\n<p></p>\n<div>\n<span style=\"color:#000000;\">        printf函数被设计用来显示</span>\n<span style=\"color:#000000;\">格式串</span>\n<span style=\"color:#000000;\">（</span>\n<span style=\"color:#000000;\">format string</span>\n<span style=\"color:#000000;\">）的内容，并且在该串中的指定位置插 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">入可能的值。调用</span>\n<span style=\"color:#000000;\">printf</span>\n<span style=\"color:#000000;\">函数时必须提供格式串，格式串后面的参数是需要在显示时插入到 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">该串中的值： </span>\n</div>\n<div>\n<span style=\"color:#000000;\">        printf(格式串</span>\n<span style=\"color:#000000;\">, </span>\n<span style=\"color:#000000;\">表达式</span>\n<span style=\"color:#000000;\">1, </span>\n<span style=\"color:#000000;\">表达式</span>\n<span style=\"color:#000000;\">2, ...); </span>\n</div>\n<div>\n<span style=\"color:#000000;\">显示的值可以是常量、变量或者更加复杂的表达式。调用</span>\n<span style=\"color:#000000;\">printf</span>\n<span style=\"color:#000000;\">函数一次可以打印的值的个数 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">没有限制。 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">        格式串包含普通字符和转换说明</span>\n<span style=\"color:#000000;\">（</span>\n<span style=\"color:#000000;\">conversion specification</span>\n<span style=\"color:#000000;\">），其中转换说明以字符</span>\n<span style=\"color:#000000;\">%</span>\n<span style=\"color:#000000;\">开头。转换说明是用来表示打印过程中待填充的值的占位符。跟随在字符%</span>\n<span style=\"color:#000000;\">后边的信息指定了把数值从内部形式（二进制）转换</span>\n<span style=\"color:#000000;\">成打印形式（字符）的方法，这也就是“转换说明”这一术语的由来。例如，转换说明%d</span>\n<span style=\"color:#000000;\">指定</span>\n<span style=\"color:#000000;\">printf</span>\n<span style=\"color:#000000;\">函数把</span>\n<span style=\"color:#000000;\">int</span>\n<span style=\"color:#000000;\">型值从二进制形式转换成十进制数字组成的字符串，转换说明%f</span>\n<span style=\"color:#000000;\">对</span>\n<span style=\"color:#000000;\">float</span>\n<span style=\"color:#000000;\">型值也进行类似的转换。</span>\n</div>\n</blockquote>\n<blockquote>\n<div>\n<span style=\"color:#000000;\"><strong>注意：</strong></span>\n</div>\n<div>\n<span style=\"color:#956fe7;\"><strong>C语言编译器不会检测格式串中转换说明的数量是否和输出项的数量相匹配。</strong></span>\n<span style=\"color:#000000;\">下 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">面这个</span>\n<span style=\"color:#000000;\">printf</span>\n<span style=\"color:#000000;\">函数调用所拥有的转换说明的数量就多于要显示的值的数量： </span>\n</div>\n<div>\n<span style=\"color:#000000;\">        printf(\"%d %d\\</span>\n<span style=\"color:#000000;\">n\", i);</span>\n<span style=\"color:#000000;\">/*** WRONG ***/ </span>\n</div>\n<div>\n<div>\n<span style=\"color:#1c7331;\"><strong>printf函数将正确显示变量i的值，接着显示另一个（无意义的）整数值。</strong></span>\n<span style=\"color:#000000;\">函数调用 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">带有太少的转换说明也会出现类似的问题： </span>\n</div>\n<div>\n<span style=\"color:#000000;\">        printf(\"%d\\n\", i, j); /*** WRONG ***/ </span>\n</div>\n<div>\n<span style=\"color:#ed7976;\"><strong>在这种情况下，printf函数会显示变量i的值，但是不显示变量j的值。 </strong></span>\n</div>\n<div>\n<span style=\"color:#000000;\">此外，</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">语言编译器也不检测转换说明是否适合要显示项的数据类型。如果程序 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">员使用不正确的转换说明，程序将会简单地产生无意义的输出。思考下面的</span>\n<span style=\"color:#000000;\">printf </span>\n</div>\n<div>\n<span style=\"color:#000000;\">函数调用，</span>\n<span style=\"color:#4da8ee;\"><strong>其中int型变量i和float型变量x的顺序放置错误： </strong></span>\n</div>\n<div>\n<span style=\"color:#000000;\">        printf(\"%f %d\\n\", i, x); /*** WRONG ***/ </span>\n</div>\n<div>\n<span style=\"color:#000000;\">因为</span>\n<span style=\"color:#000000;\">printf</span>\n<span style=\"color:#000000;\">函数必须服从于格式串，所以它将如实地显示出一个</span>\n<span style=\"color:#000000;\">float</span>\n<span style=\"color:#000000;\">型值，接着是 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">一个</span>\n<span style=\"color:#000000;\">int</span>\n<span style=\"color:#000000;\">型值。可惜这两个值都将是无意义的。</span>\n</div>\n</div>\n</blockquote>\n<h3 id=\"3.1.1%20%E8%BD%AC%E6%8D%A2%E8%AF%B4%E6%98%8E%F0%9F%9A%80\"><span style=\"color:#000000;\">3.1.1 转换说明</span><span style=\"color:#4da8ee;\">🚀</span></h3>\n<blockquote>\n<p><span style=\"color:#000000;\">转换说明可以用</span><span style=\"color:#000000;\">%</span><span style=\"color:#000000;\"><em>m</em></span><span style=\"color:#000000;\">.</span><span style=\"color:#000000;\"><em>pX</em></span><span style=\"color:#000000;\">格式或</span><span style=\"color:#000000;\">%-</span><span style=\"color:#000000;\"><em>m</em></span><span style=\"color:#000000;\">.</span><span style=\"color:#000000;\"><em>pX</em></span><span style=\"color:#000000;\">格式</span> </p>\n</blockquote>\n<blockquote>\n<div>\n<strong><span style=\"color:#000000;\">最小栏宽</span></strong>\n<span style=\"color:#000000;\">（</span>\n<span style=\"color:#000000;\">minimum field width</span>\n<span style=\"color:#000000;\">）</span>\n<span style=\"color:#000000;\"><em>m</em></span>\n<span style=\"color:#000000;\">指定了要显示的最少字符数量。如果要显示的数值所 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">需的字符数少于</span>\n<span style=\"color:#000000;\"><em>m</em></span>\n<span style=\"color:#000000;\">，那么值在字段内是右对齐的。（换句话说，在值前面放置额外的空格。）例如，转换说明%4d</span>\n<span style=\"color:#000000;\">将以</span>\n<span style=\"color:#000000;\">·</span>\n<span style=\"color:#000000;\">123</span>\n<span style=\"color:#000000;\">的形式显示数</span>\n<span style=\"color:#000000;\">123</span>\n<span style=\"color:#000000;\">（本章用符号</span>\n<span style=\"color:#000000;\">·</span>\n<span style=\"color:#000000;\">表示空格字符）。如果要显示的值所需的字符数多于<em>m</em></span>\n<span style=\"color:#000000;\">，那么字段宽度会自动扩展为所需的尺寸。因此，转换说明</span>\n<span style=\"color:#000000;\">%4d</span>\n<span style=\"color:#000000;\">将以</span>\n<span style=\"color:#000000;\">12345的形式显示数12345</span>\n<span style=\"color:#000000;\">，而不会丢失数字。在</span>\n<span style=\"color:#000000;\"><em>m</em></span>\n<span style=\"color:#000000;\">前放上一个负号会导致左对齐；转换说明</span>\n<span style=\"color:#000000;\">%-4d</span>\n<span style=\"color:#000000;\">将以123·</span>\n<span style=\"color:#000000;\">的形式显示</span>\n<span style=\"color:#000000;\">123</span>\n<span style=\"color:#000000;\">。</span>\n</div>\n<div>\n<div>\n<strong><span style=\"color:#000000;\">精度</span></strong>\n<span style=\"color:#000000;\">（</span>\n<span style=\"color:#000000;\">precision</span>\n<span style=\"color:#000000;\">）</span>\n<span style=\"color:#000000;\"><em>p</em></span>\n<span style=\"color:#000000;\">的含义很难描述，因为它依赖于</span>\n<span style=\"color:#000000;\">转换说明符</span>\n<span style=\"color:#000000;\">（</span>\n<span style=\"color:#000000;\">conversion specifier</span>\n<span style=\"color:#000000;\">）</span>\n<span style=\"color:#000000;\"><em>X</em></span>\n<span style=\"color:#000000;\">的选择。<em>X</em></span>\n<span style=\"color:#000000;\">表明在显示数值前需要对其进行哪种转换。对数值来说最常用的转换说明符有以下几个。</span>\n</div>\n<div></div>\n<div>\n<img alt=\"\" height=\"372\" src=\"image\\182b0350af224fbaa5ac39869e0238d8.png\" width=\"1200\"/>\n</div>\n<div>\n<span style=\"color:#000000;\">编写程序时无法预知数的大小或者数值变化范围很大的情况下，说明符</span>\n<span style=\"color:#000000;\">g</span>\n<span style=\"color:#000000;\">对于数的显示是特 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">别有用的。在用于显示大小适中的数时，说明符</span>\n<span style=\"color:#000000;\">g</span>\n<span style=\"color:#000000;\">采用定点十进制形式。但是，在显示非常大或非常小的数时，说明符g</span>\n<span style=\"color:#000000;\">会转换成指数形式以便减少所需的字符数。 </span>\n</div>\n</div>\n</blockquote>\n<h3 id=\"3.1.2%20%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97%F0%9F%9A%80\"><span style=\"color:#000000;\">3.1.2 转义序列</span><span style=\"color:#4da8ee;\">🚀</span></h3>\n<blockquote>\n<p></p>\n<div>\n<span style=\"color:#000000;\">格式串中常用的代码</span>\n<span style=\"color:#fe2c24;\"><strong>\\n被称为转义序列</strong></span>\n<span style=\"color:#000000;\">（</span>\n<span style=\"color:#000000;\">escape sequence</span>\n<span style=\"color:#000000;\">）。转义序列（ </span>\n<span style=\"color:#000000;\">7.3节）使字符串包含一些特殊字符而不会使编译器引发问题，这些字符包括非打印的（控制）字符和对编译器有</span>\n<span style=\"color:#000000;\">特殊含义的字符（如</span>\n<span style=\"color:#000000;\">\"</span>\n<span style=\"color:#000000;\">）</span>\n</div>\n<div>\n<img alt=\"\" height=\"162\" src=\"image\\ee073103c4e84179ae9420ae8090a39a.png\" width=\"856\"/>\n</div>\n<div>\n<span style=\"color:#000000;\">当这些转义序列出现在</span>\n<span style=\"color:#000000;\">printf</span>\n<span style=\"color:#000000;\">函数的格式串中时，它们表示在显示中执行的操作。在大多 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">数机器上，输出</span>\n<span style=\"color:#fe2c24;\"><strong>\\a</strong></span>\n<span style=\"color:#000000;\">会产生一声鸣响，输出</span>\n<span style=\"color:#fe2c24;\"><strong>\\b</strong></span>\n<span style=\"color:#000000;\">会使光标从当前位置回退一个位置，输出</span>\n<span style=\"color:#fe2c24;\"><strong>\\n</strong></span>\n<span style=\"color:#000000;\">会使光 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">标跳到下一行的起始位置，输出</span>\n<span style=\"color:#fe2c24;\"><strong>\\t</strong></span>\n<span style=\"color:#000000;\">会把光标移动到下一个制表符的位置。</span>\n</div>\n<div></div>\n<div>\n<div>\n<span style=\"color:#000000;\">附带提一下，不能在字符串中只放置单独一个字符</span>\n<span style=\"color:#000000;\">\\</span>\n<span style=\"color:#000000;\">，编译器将认为它是一个转义序列的开 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">始。为了显示单独一个字符</span>\n<span style=\"color:#000000;\">\\</span>\n<span style=\"color:#000000;\">，需要在字符串中放置两个</span>\n<span style=\"color:#000000;\">\\</span>\n<span style=\"color:#000000;\">字符：</span>\n</div>\n<div>\n<span style=\"color:#000000;\">printf(\"\\\\\"); /* prints one \\ character */ </span>\n</div>\n</div>\n</blockquote>\n<h2 id=\"3.2%20scanf%20%E5%87%BD%E6%95%B0%F0%9F%9A%80\"><span style=\"color:#000000;\">3.2 </span><span style=\"color:#000000;\"><strong>scanf </strong>函数</span><span style=\"color:#4da8ee;\">🚀</span></h2>\n<blockquote>\n<p><span style=\"color:#000000;\">scanf</span><span style=\"color:#000000;\">函数转换说明的用法和</span><span style=\"color:#000000;\">printf</span><span style=\"color:#000000;\">函数转换说明的用法本质上是一样的。</span> </p>\n<div>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数调用中像</span>\n<span style=\"color:#000000;\">\"%d%d%f%f\"</span>\n<span style=\"color:#000000;\">这样“紧密压缩”的格式串是很普遍的，而printf</span>\n<span style=\"color:#000000;\">函数的格式串很少有这样紧挨着的转换说明。</span>\n</div>\n<div>\n<img alt=\"\" height=\"273\" src=\"image\\a2258e1540874c9182d0262da7253b50.png\" width=\"1193\"/>\n</div>\n<div>\n<span style=\"color:#000000;\">调用</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数是读数据的一种有效但不理想的方法。许多专业</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">程序员会避免用</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">数，而是采用字符格式读取所有数据，然后再把它们转换成数值形式。（</span>在本书中，特别是前面的几章将相当多地用到scanf函数，因为它提供了一种读入数的简单方法。\n  <span style=\"color:#000000;\">）</span>\n</div>\n</blockquote>\n<h3 id=\"3.2.1%20scanf%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E6%B3%95%F0%9F%9A%80\"><span style=\"color:#000000;\">3.2.1 </span><span style=\"color:#000000;\"><strong>scanf </strong>函数的工作方法</span><span style=\"color:#4da8ee;\">🚀</span></h3>\n<blockquote>\n<p></p>\n<div>\n<span style=\"color:#000000;\">实际上</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数可以做的事情远远多于目前为止已经提到的这些。</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数本质上是一 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">种“模式匹配”函数，试图把输入的字符组与转换说明相匹配。</span>\n</div>\n<div>\n<strong><span style=\"color:#000000;\">像</span><span style=\"color:#000000;\">printf</span><span style=\"color:#000000;\">函数一样，</span><span style=\"color:#000000;\">scanf</span><span style=\"color:#000000;\">函数是由格式串控制的。</span></strong>\n<span style=\"color:#ed7976;\">调用时，scanf函数从左边开始处理字符串中的信息。对于格式串中的每一个转换说明，scanf函数从输入的数据中定位适当类型的项，并在必要时跳过空格。然后，scanf函数读入数据项，并且在遇到不可能属于此项的字符时停止。如果读入数据项成功，那么scanf函数会继续处理格式串的剩余部分；如果某一项不能成功读入，那么scanf函数将不再查看格式串的剩余部分（或者余下的输入数据）而立即返回。</span>\n</div>\n<div>\n<div>\n<strong><span style=\"color:#000000;\">在寻找数的起始位置时，</span><span style=\"color:#000000;\">scanf</span><span style=\"color:#000000;\">函数会忽略</span><span style=\"color:#000000;\">空白字符</span></strong>\n<span style=\"color:#000000;\">（</span>\n<span style=\"color:#000000;\">white-space character</span>\n<span style=\"color:#000000;\">，包括空格符、 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">水平和垂直制表符、换页符和换行符）。因此，我们可以把数字放在同一行或者分散在几行内输入。考虑下面的scanf</span>\n<span style=\"color:#000000;\">函数调用：</span>\n</div>\n<div>\n<div>\n<span style=\"color:#000000;\">scanf(\"%d%d%f%f\", &amp;i, &amp;j, &amp;x, &amp;y); </span>\n</div>\n<div>\n<div>\n<span style=\"color:#000000;\">假设用户录入</span>\n<span style=\"color:#000000;\">3</span>\n<span style=\"color:#000000;\">行输入：</span>\n</div>\n<div>\n<div>\n<span style=\"color:#000000;\">  1 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">-20      .3 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">     -4.0e3 </span>\n</div>\n<div>\n<div>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数会把它们看成是一个连续的字符流：</span>\n</div>\n<div>\n<div>\n<span style=\"color:#000000;\">··</span>\n<span style=\"color:#000000;\">1¤-20</span>\n<span style=\"color:#000000;\">···</span>\n<span style=\"color:#000000;\">.3¤</span>\n<span style=\"color:#000000;\">···</span>\n<span style=\"color:#000000;\">-4.0e3¤ </span>\n</div>\n<div>\n<div>\n<span style=\"color:#000000;\">（这里使用符号</span>\n<span style=\"color:#000000;\">·</span>\n<span style=\"color:#000000;\">表示空格符，用符号</span>\n<span style=\"color:#000000;\">¤</span>\n<span style=\"color:#000000;\">表示换行符。）因为</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数在寻找每个数的起始位置时会跳过空白字符，所以它可以成功读取这些数。在接下来的图中，字符下方的<em>s</em></span>\n<span style=\"color:#000000;\">表示此项被跳过，而字符下面的<em>r</em></span>\n<span style=\"color:#000000;\">表示此项被读取为输入项的一部分：</span>\n</div>\n<div>\n<div>\n<img alt=\"\" height=\"67\" src=\"image\\e53355a851cb48b29c2cdc700e966295.png\" width=\"541\"/>\n</div>\n<div>\n<span style=\"color:#ff9900;\"><strong>scanf函数“忽略”了最后的换行符，实际上没有读取它。这个换行符将是下一次scanf函数调 </strong></span>\n</div>\n<div>\n<span style=\"color:#ff9900;\"><strong>用的第一个字符。</strong></span>\n</div>\n<div>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数遵循什么规则来识别整数或浮点数呢？在要求读入整数时，</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数首先寻找正号或负号，然后读取数字直到读到一个非数字时才停止。当要求读入浮点数时，scanf函数</span>\n<div>\n<span style=\"color:#000000;\">会寻找一个正号或负号（可选），随后是一串数字（可能含有小数点），再后是一个指数（可选）。指数由字母e</span>\n<span style=\"color:#000000;\">（或者字母</span>\n<span style=\"color:#000000;\">E</span>\n<span style=\"color:#000000;\">）、可选的符号和一个或多个数字构成。在用于</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数时，转换说明%e</span>\n<span style=\"color:#000000;\">、</span>\n<span style=\"color:#000000;\">%f</span>\n<span style=\"color:#000000;\">和</span>\n<span style=\"color:#000000;\">%g</span>\n<span style=\"color:#000000;\">是可以互换的，这</span>\n<span style=\"color:#000000;\">3</span>\n<span style=\"color:#000000;\">种转换说明在识别浮点数方面都遵循相同的规则。</span>\n</div>\n<div>\n<div>\n<span style=\"color:#ff9900;\"><strong>当scanf函数遇到一个不可能属于当前项的字符时，它会把此字符“放回原处”，以便在扫描下一个输入项或者下一次调用scanf函数时再次读入。</strong></span>\n<span style=\"color:#000000;\">思考下面（公认有问题的）</span>\n<span style=\"color:#000000;\">4</span>\n<span style=\"color:#000000;\">个数的排列：</span>\n</div>\n<div>\n<img alt=\"\" height=\"650\" src=\"image\\6a5121dc8b474a51b4d04a796dc6c77b.png\" width=\"1200\"/>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</blockquote>\n<h3 id=\"3.2.2%20%E6%A0%BC%E5%BC%8F%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%99%AE%E9%80%9A%E5%AD%97%E7%AC%A6%F0%9F%9A%80\"><span style=\"color:#000000;\">3.2.2 格式串中的普通字符</span><span style=\"color:#4da8ee;\">🚀</span></h3>\n<blockquote>\n<div>\n<span style=\"color:#000000;\">通过编写含有普通字符和转换说明的格式串能更进一步地理解模式匹配的概念。处理格式 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">串中的普通字符时，</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数采取的动作依赖于这个字符是否为空白字符。</span>\n</div>\n<div></div>\n<div>\n<div>\n<span style=\"color:#000000;\">       <strong> 空白字符</strong>。</span>\n<span style=\"color:#956fe7;\">当在格式串中遇到一个或多个连续的空白字符时，scanf函数从输入中重复 </span>\n</div>\n<div>\n<span style=\"color:#956fe7;\">读空白字符直到遇到一个非空白字符（把该字符“放回原处”）为止。</span>\n<span style=\"color:#000000;\">格式串中空白字 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">符的数量无关紧要，格式串中的一个空白字符可以与输入中任意数量的空白字符相匹 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">配。（附带提一下，在格式串中包含空白字符并不意味着输入中必须包含空白字符。格 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">式串中的一个空白字符可以与输入中</span>\n<span style=\"color:#000000;\">任意</span>\n<span style=\"color:#000000;\">数量的空白字符相匹配，包括零个。） </span>\n</div>\n<div>\n<span style=\"color:#000000;\">        <strong>其他字符</strong>。</span>\n<span style=\"color:#956fe7;\">当在格式串中遇到非空白字符时，scanf函数将把它与下一个输入字符进行 </span>\n</div>\n<div>\n<span style=\"color:#956fe7;\">比较。</span>\n<span style=\"color:#000000;\">如果两个字符相匹配，那么</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数会放弃输入字符而继续处理格式串。如果 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">两个字符不匹配，那么</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数会把不匹配的字符放回输入中，然后异常退出，而不 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">进一步处理格式串或者从输入中读取字符。</span>\n</div>\n<div></div>\n<div>\n<p> <span style=\"color:#000000;\">例如，假设格式串是</span><span style=\"color:#000000;\">\"%d/%d\"</span><span style=\"color:#000000;\">。如果输入是：</span></p>\n<div>\n<span style=\"color:#000000;\">·</span>\n<span style=\"color:#000000;\">5/</span>\n<span style=\"color:#000000;\">·</span>\n<span style=\"color:#000000;\">96 </span>\n</div>\n<div>\n<div>\n<span style=\"color:#000000;\">在寻找整数时，</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数会跳过第一个空格，把</span>\n<span style=\"color:#000000;\">%d</span>\n<span style=\"color:#000000;\">与</span>\n<span style=\"color:#000000;\">5</span>\n<span style=\"color:#000000;\">相匹配，把</span>\n<span style=\"color:#000000;\">/</span>\n<span style=\"color:#000000;\">与</span>\n<span style=\"color:#000000;\">/</span>\n<span style=\"color:#000000;\">相匹配，在寻找下一个整数时跳过一个空格，并且把%d</span>\n<span style=\"color:#000000;\">与</span>\n<span style=\"color:#000000;\">96</span>\n<span style=\"color:#000000;\">相匹配。另一方面，如果输入是：</span>\n</div>\n<div>\n<div>\n<span style=\"color:#000000;\">·</span>\n<span style=\"color:#000000;\">5</span>\n<span style=\"color:#000000;\">·</span>\n<span style=\"color:#000000;\">/</span>\n<span style=\"color:#000000;\">·</span>\n<span style=\"color:#000000;\">96 </span>\n</div>\n<div>\n<div>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数会跳过一个空格，把</span>\n<span style=\"color:#000000;\">%d</span>\n<span style=\"color:#000000;\">与</span>\n<span style=\"color:#000000;\">5</span>\n<span style=\"color:#000000;\">相匹配，然后试图把格式串中的</span>\n<span style=\"color:#000000;\">/</span>\n<span style=\"color:#000000;\">与输入中的空格相匹配。但是二者不匹配，所以scanf</span>\n<span style=\"color:#000000;\">函数把空格放回原处，把字符·</span>\n<span style=\"color:#000000;\">/</span>\n<span style=\"color:#000000;\">·</span>\n<span style=\"color:#000000;\">96</span>\n<span style=\"color:#000000;\">留给下一次</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数调用来读取。为了允许第一个数后边有空格，应使用格式串\"%d /%d\"</span>\n<span style=\"color:#000000;\">。</span>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</blockquote>\n<h3 id=\"3.2.3%20%E6%98%93%E6%B7%B7%E6%B7%86%E7%9A%84%20printf%20%E5%87%BD%E6%95%B0%E5%92%8C%20scanf%20%E5%87%BD%E6%95%B0%F0%9F%9A%80\"><span style=\"color:#000000;\">3.2.3</span><span style=\"color:#000000;\"> 易混淆的 </span><span style=\"color:#000000;\"><strong>printf </strong></span><span style=\"color:#000000;\">函数和 </span><span style=\"color:#000000;\"><strong>scanf </strong>函数</span><span style=\"color:#4da8ee;\">🚀</span></h3>\n<blockquote>\n<p><img alt=\"\" height=\"201\" src=\"image\\9fa3cca707ad473f966326e8cef4e0c3.png\" width=\"1191\"/></p>\n<div>\n<div>\n<div></div>\n</div>\n</div>\n</blockquote>\n<h1 id=\"%E9%97%AE%E4%B8%8E%E7%AD%94%EF%BC%88%E5%BE%88%E9%87%8D%E8%A6%81%EF%BC%89%F0%9F%9A%80\"><span style=\"color:#000000;\">问与答（很重要）</span><span style=\"color:#4da8ee;\">🚀</span></h1>\n<blockquote>\n<p><span style=\"color:#000000;\"><strong>*</strong></span><span style=\"color:#000000;\">问：转换说明</span><span style=\"color:#000000;\"><strong>%i</strong></span><span style=\"color:#000000;\"><strong>也可以</strong></span><span style=\"color:#000000;\">用于读写整数。</span><span style=\"color:#000000;\"><strong>%i</strong></span><span style=\"color:#000000;\">和</span><span style=\"color:#000000;\"><strong>%d</strong></span><span style=\"color:#000000;\">之间有什么区别？</span><span style=\"color:#000000;\">（</span><span style=\"color:#000000;\">p.27</span><span style=\"color:#000000;\">）</span> </p>\n<div>\n<span style=\"color:#ffffff;\">*</span>\n<span style=\"color:#000000;\">答：在</span>\n<span style=\"color:#000000;\">printf</span>\n<span style=\"color:#000000;\">格式串中使用时，二者没有区别。但是，在</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">格式串中</span>\n<span style=\"color:#000000;\">%d</span>\n<span style=\"color:#000000;\">只能与十进制（基数为</span>\n<span style=\"color:#000000;\">10</span>\n<span style=\"color:#000000;\">）形式的整数相匹配，而%i</span>\n<span style=\"color:#000000;\">则可以匹配用八进制（基数为</span>\n<span style=\"color:#000000;\">8</span>\n<span style=\"color:#000000;\">）、十进制或十六进制（基数为</span>\n<span style=\"color:#000000;\">16</span>\n<span style=\"color:#000000;\">）表示的整数。如果输入的数有前缀0</span>\n<span style=\"color:#000000;\">（如</span>\n<span style=\"color:#000000;\">056</span>\n<span style=\"color:#000000;\">），那么</span>\n<span style=\"color:#000000;\">%i</span>\n<span style=\"color:#000000;\">会把它作为八进制数（ </span>\n<span style=\"color:#000000;\">7.1</span>\n<span style=\"color:#000000;\">节）来处理；如果输入的数有前缀0x</span>\n<span style=\"color:#000000;\">或</span>\n<span style=\"color:#000000;\">0X</span>\n<span style=\"color:#000000;\">（如</span>\n<span style=\"color:#000000;\">0x56</span>\n<span style=\"color:#000000;\">），那么</span>\n<span style=\"color:#000000;\">%i</span>\n<span style=\"color:#000000;\">会把它作为十六进制数（ </span>\n<span style=\"color:#000000;\">7.1</span>\n<span style=\"color:#000000;\">节）来处理。如果用户意外地将0</span>\n<span style=\"color:#000000;\">放在数的开始处，那么用</span>\n<span style=\"color:#000000;\">%i</span>\n<span style=\"color:#000000;\">代替</span>\n<span style=\"color:#000000;\">%d</span>\n<span style=\"color:#000000;\">读取数可能有意想不到的结果。由于这是一个陷阱，所以建议坚持采用%d</span>\n<span style=\"color:#000000;\">。</span>\n</div>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#ffffff;\">*</span><span style=\"color:#000000;\">问：如果</span><span style=\"color:#000000;\"><strong>printf</strong></span><span style=\"color:#000000;\">函数将</span><span style=\"color:#000000;\"><strong>%</strong></span><span style=\"color:#000000;\">作为转换说明的开始，那么如何显示字符</span><span style=\"color:#000000;\"><strong>%</strong></span><span style=\"color:#000000;\">呢？（选读）</span></p>\n<div>\n<span style=\"color:#ffffff;\">*</span>\n<span style=\"color:#000000;\">答：如果</span>\n<span style=\"color:#000000;\">printf</span>\n<span style=\"color:#000000;\">函数在格式串中遇到两个连续的字符</span>\n<span style=\"color:#000000;\">%</span>\n<span style=\"color:#000000;\">，那么它将显示出一个字符</span>\n<span style=\"color:#000000;\">%</span>\n<span style=\"color:#000000;\">。例如，语句 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">printf(\"Net profit: %d%%\\n\", profit); </span>\n</div>\n<div>\n<span style=\"color:#000000;\">可以显示出 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">Net profit: 10% </span>\n</div>\n</blockquote>\n<blockquote>\n<div>\n<span style=\"color:#ffffff;\">*</span>\n<span style=\"color:#000000;\">问：转义序列</span>\n<span style=\"color:#000000;\"><strong>\\t</strong></span>\n<span style=\"color:#000000;\">会使</span>\n<span style=\"color:#000000;\"><strong>printf</strong></span>\n<span style=\"color:#000000;\">函数跳到下一个水平制表符处。如何知道水平制表符到底跳多远呢？</span>\n<span style=\"color:#000000;\">（</span>\n<span style=\"color:#000000;\">p.29</span>\n<span style=\"color:#000000;\">） </span>\n</div>\n<div>\n<span style=\"color:#ffffff;\">*</span>\n<span style=\"color:#000000;\">答：不可能知道。打印</span>\n<span style=\"color:#000000;\">\\t</span>\n<span style=\"color:#000000;\">的效果不是由</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">语言定义的，而是依赖于所使用的操作系统。水平制表符之间的距离通常是8</span>\n<span style=\"color:#000000;\">个字符宽度，但</span>\n<span style=\"color:#000000;\">C</span>\n<span style=\"color:#000000;\">语言本身无法保证这一点。</span>\n</div>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#000000;\">问：如果要求读入一个数，而用户却录入了非数值的输入，那么</span><span style=\"color:#000000;\"><strong>scanf</strong></span><span style=\"color:#000000;\">函数会如何处理？</span></p>\n<div>\n<span style=\"color:#ffffff;\">*</span>\n<span style=\"color:#000000;\">答：请看下面的例子： </span>\n</div>\n<div>\n<span style=\"color:#000000;\">printf(\"Enter a number: \"); </span>\n</div>\n<div>\n<span style=\"color:#000000;\">scanf(\"%d\", &amp;i); </span>\n</div>\n<div>\n<span style=\"color:#000000;\">假设用户录入了一个有效数，后边跟着一些非数值的字符： </span>\n</div>\n<div>\n<span style=\"color:#000000;\">Enter a number: 23foo </span>\n</div>\n<div>\n<span style=\"color:#fe2c24;\"><strong>这种情况下，scanf函数读取2和3，并且将23存储在变量i中，而剩下的字符（foo）则留给下一次scanf函数调用（或者某些其他的输入函数）来读取。</strong></span>\n<span style=\"color:#000000;\">另一方面，假设输入从开始就是无效的： </span>\n</div>\n<div>\n<span style=\"color:#000000;\">Enter a number: foo</span>\n</div>\n<div>\n<div>\n<span style=\"color:#fe2c24;\"><strong>这种情况下，没有值会被存储到变量i中，字符foo会留给下一次scanf函数调用。</strong></span>\n</div>\n<div>\n<span style=\"color:#000000;\">如何处理这种糟糕的情况呢？后面将看到检测</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数调用是否成功（ </span>\n<span style=\"color:#000000;\">22.3</span>\n<span style=\"color:#000000;\">节）的方法。如 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">果调用失败，可以终止或者尝试恢复程序，可能的方法是丢掉有问题的输入并要求用户重新输入。（在第22</span>\n<span style=\"color:#000000;\">章结尾的“问与答”部分会讨论有关丢弃错误输入的方法。）</span>\n</div>\n</div>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#000000;\">问：我不能理解</span><span style=\"color:#000000;\"><strong>scanf</strong></span><span style=\"color:#000000;\">函数如何把字符“放回原处”并在以后再次读取。</span><span style=\"color:#000000;\">（</span><span style=\"color:#000000;\">p.31</span><span style=\"color:#000000;\">）</span></p>\n<div>\n<span style=\"color:#000000;\">答：我们知道，用户从键盘输入时，程序并没有读取输入，而是把用户的输入放在一个隐藏的缓冲区中，由scanf</span>\n<span style=\"color:#000000;\">函数来读取。</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数把字符放回到缓冲区中供后续读取是非常容易的。第</span>\n<span style=\"color:#000000;\">22</span>\n<span style=\"color:#000000;\">章将会更详细地讨论输入缓冲。</span>\n</div>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#000000;\">问：如果用户在两个数之间加入了标点符号</span><span style=\"color:#000000;\">（</span><span style=\"color:#000000;\">如逗号</span><span style=\"color:#000000;\">）</span><span style=\"color:#000000;\">，</span><span style=\"color:#000000;\"><strong>scanf</strong></span><span style=\"color:#000000;\">函数将如何处理？</span></p>\n<div>\n<span style=\"color:#000000;\">答：先来看一个简单的例子。假设我们想用</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数读取一对整数： </span>\n</div>\n<div>\n<span style=\"color:#000000;\">printf(\"Enter two numbers: \"); </span>\n</div>\n<div>\n<span style=\"color:#000000;\">scanf(\"%d%d\", &amp;i, &amp;j); </span>\n</div>\n<div>\n<span style=\"color:#000000;\">如果用户录入 </span>\n</div>\n<div>\n<span style=\"color:#000000;\">4,28</span>\n</div>\n<div>\n<div>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数将读取</span>\n<span style=\"color:#000000;\">4</span>\n<span style=\"color:#000000;\">并且把它存储在变量</span>\n<span style=\"color:#000000;\">i</span>\n<span style=\"color:#000000;\">中。在寻找第二个数的起始位置时，</span>\n<span style=\"color:#000000;\">scanf</span>\n<span style=\"color:#000000;\">函数遇到了逗号。因为数不能以逗号开头，<strong>所以scanf</strong></span>\n<strong><span style=\"color:#000000;\">函数立刻返回，而把逗号和第二个数留给下一次</span><span style=\"color:#000000;\">scanf</span></strong>\n<span style=\"color:#000000;\"><strong>函数调用。</strong></span>\n</div>\n<div>\n<strong><span style=\"color:#000000;\">当然，如果能确定数与数之间始终</span><span style=\"color:#000000;\">用逗号进行分割，我们可以很容易地解决这个问题，只要在格式串中添加逗号即可： </span></strong>\n</div>\n<div>\n<span style=\"color:#000000;\">printf(\"Enter two numbers, separated by a comma: \"); </span>\n</div>\n<div>\n<span style=\"color:#000000;\">scanf(\"%d,%d\", &amp;i, &amp;j); </span>\n</div>\n</div>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#956fe7;\">最后的最后，创作不易，希望读者三连支持💖</span></p>\n<p><span style=\"color:#956fe7;\">赠人玫瑰，手有余香💖</span></p>\n</blockquote>\n</div>\n</div>"}