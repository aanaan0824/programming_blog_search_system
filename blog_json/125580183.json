{"blogid": "125580183", "writerAge": "码龄1年", "writerBlogNum": "63", "writerCollect": "853", "writerComment": "1085", "writerFan": "4738", "writerGrade": "5级", "writerIntegral": "2568", "writerName": "国服第二切图仔", "writerProfileAdress": "writer_image\\profile_125580183.jpg", "writerRankTotal": "7127", "writerRankWeekly": "266", "writerThumb": "707", "writerVisitNum": "40628", "blog_read_count": "4226", "blog_time": "已于 2022-07-08 13:51:28 修改", "blog_title": "一文带你吃透js处理树状结构数据的增删改查", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1><a id=\"_0\"></a></h1>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E9%A1%B9%E7%9B%AE%E5%9C%BA%E6%99%AF%EF%BC%9A-toc\" style=\"margin-left:0px;\"><a href=\"#%E9%A1%B9%E7%9B%AE%E5%9C%BA%E6%99%AF%EF%BC%9A\">问题描述：JS处理树状结构的增删改查</a></p>\n<p id=\"%E6%96%B0%E5%A2%9E%E8%8A%82%E7%82%B9-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%96%B0%E5%A2%9E%E8%8A%82%E7%82%B9\">解决方案：</a></p>\n<p id=\"1%E3%80%81%E6%96%B0%E5%A2%9E%E8%8A%82%E7%82%B9-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E6%96%B0%E5%A2%9E%E8%8A%82%E7%82%B9\">1、新增节点</a></p>\n<p id=\"%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9\">2、删除节点</a></p>\n<p id=\"%E4%BF%AE%E6%94%B9%E8%8A%82%E7%82%B9-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BF%AE%E6%94%B9%E8%8A%82%E7%82%B9\">3、修改节点</a></p>\n<p id=\"%E6%9F%A5%E6%89%BE%E8%8A%82%E7%82%B9-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%9F%A5%E6%89%BE%E8%8A%82%E7%82%B9\">4、查找节点</a></p>\n<hr/>\n<h1 id=\"%E9%A1%B9%E7%9B%AE%E5%9C%BA%E6%99%AF%EF%BC%9A\">问题描述：JS处理树状结构的增删改查</h1>\n<blockquote>\n<p>        最近在开发一个后台管理系统的权限管理模块，涉及到各种树状结构的数据处理逻辑，例如：增，删，改，查等；相比普通的数组结构数据，树状结构的处理就没有数组那么的直观，但是也没那么复杂，需要多一步——<span style=\"color:#956fe7;\">递归查找</span>来对数据进行深度遍历操作，那么这里呢，博主也将开发过程中总结出来的方法分享给大家，一文带你吃透JS树装结构数据处理：</p>\n</blockquote>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\1fd8cd49da544cdb85ffd0a6b1c5e214.jpeg\"/></p>\n<p><span style=\"color:#956fe7;\"><strong>数据结构示例</strong></span></p>\n<pre><code class=\"language-javascript\">  let data = [{\n        id: 1,\n        label: '一级 1',\n        children: [{\n          id: 4,\n          label: '二级 1-1',\n          children: [{\n            id: 9,\n            label: '三级 1-1-1'\n          }, {\n            id: 10,\n            label: '三级 1-1-2'\n          }]\n        }]\n      }, {\n        id: 2,\n        label: '一级 2',\n        children: [{\n          id: 5,\n          label: '二级 2-1'\n        }, {\n          id: 6,\n          label: '二级 2-2'\n        }]\n      }, {\n        id: 3,\n        label: '一级 3',\n        children: [{\n          id: 7,\n          label: '二级 3-1'\n        }, {\n          id: 8,\n          label: '二级 3-2'\n        }]\n      }];</code></pre>\n<h1 id=\"%E6%96%B0%E5%A2%9E%E8%8A%82%E7%82%B9\"><a id=\"_30\"></a>解决方案：</h1>\n<h2 id=\"1%E3%80%81%E6%96%B0%E5%A2%9E%E8%8A%82%E7%82%B9\">1、新增节点</h2>\n<p>查找树装结构的指定节点，新增子节点，代码如下：</p>\n<pre><code class=\"language-javascript\">const appendNodeInTree = (id, tree, obj) =&gt; {\n  tree.forEach(ele=&gt; {\n    if (ele.id === id) {\n      ele.children ? ele.children.push(obj) : ele.children = [obj]\n    } else {\n      if (ele.children) {\n        appendNodeInTree(id, ele.children, obj)\n      }\n    }\n  })\n  return tree\n}\n</code></pre>\n<h2 id=\"%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9\">2、删除节点</h2>\n<p>查找树装结构的指定节点，删除节点，代码如下</p>\n<pre><code class=\"language-javascript\">\nconst removeNodeInTree=(treeList, id)=&gt; { // 通过id从数组（树结构）中移除元素\n  if (!treeList || !treeList.length) {\n    return\n  }\n  for (let i = 0; i &lt; treeList.length; i++) {\n    if (treeList[i].id === id) {\n      treeList.splice(i, 1);\n      break;\n    }\n    removeNodeInTree(treeList[i].children, id)\n  }\n}\n</code></pre>\n<h2 id=\"%E4%BF%AE%E6%94%B9%E8%8A%82%E7%82%B9\">3、修改节点</h2>\n<p>递归查找并修改某个节点的状态，代码如下：</p>\n<pre><code class=\"language-javascript\">  const updateNodeInTree=(treeList,id, obj)=&gt; {\n      if (!treeList || !treeList.length) {\n        return;\n      }\n      for (let i = 0; i &lt; treeList.length; i++) {\n        if (treeList[i].id == id) {\n          treeList[i]= obj;\n          break;\n        }\n        updateNodeInTree(treeList[i].children,id,obj);\n      }\n    }</code></pre>\n<h2 id=\"%E6%9F%A5%E6%89%BE%E8%8A%82%E7%82%B9\">4、查找节点</h2>\n<p>递归查找树形节点的某个节点，代码：</p>\n<pre><code class=\"language-javascript\">const findNodeInTree = (data, key, callback) =&gt; {\n      for (let i = 0; i &lt; data.length; i++) {\n        if (data[i].key == key) {\n          return callback(data[i], i, data)\n        }\n        if (data[i].children) {\n          findNodeInTree (data[i].children, key, callback)\n        }\n      }\n    }\n\n    // 所查找到的节点要存储的方法\n    let Obj={}\n    findNodeInTree(data, key, (item, index, arr) =&gt; {\n      Obj = item\n    })\n\n    // 此时就是Obj对应的要查找的节点\n    console.log(Obj)</code></pre>\n<hr/>\n<h1>总结</h1>\n<p>        本文介绍了js如何处理树装数据结构的增删改查，掌握以上函数，基本可以应对同样业务类型的数据处理，更多js处理数据问题方面的疑难杂症，推荐查看博主之前总结的文章，喜欢博主的朋友可以给博主点个关注，点关注，不迷路，博主带你上高速~~</p>\n<p><a class=\"has-card\" href=\"https://blog.csdn.net/m0_61243965/article/details/125084028?spm=1001.2014.3001.5502\" title=\"直面JavaScript数据处理的5个常见疑难杂症_国服第二切图仔的博客-CSDN博客\"><span class=\"link-card-box\"><span class=\"link-title\">直面JavaScript数据处理的5个常见疑难杂症_国服第二切图仔的博客-CSDN博客</span><span class=\"link-desc\">本文介绍了JavaScript开发过程中常见的5种数据处理问题——数组的增删改查、数组去重、数组排序，平级结构转树装结构，数组对象去重合并等等并提供了对应的解决思路，基本覆盖了日常开发过程中的使用需求， 阅读本片文章可以大大提升你的javaScript基本功，在收到开发需求时，能快速响应，并给出解决方案。......</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\"/>https://blog.csdn.net/m0_61243965/article/details/125084028?spm=1001.2014.3001.5502</span></span></a></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/44fa39c4adb9462d8a599404365a74b8.gif\"/></p>\n<p></p>\n</div>\n</div>"}