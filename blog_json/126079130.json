{"blogid": "126079130", "writerAge": "码龄1年", "writerBlogNum": "72", "writerCollect": "2610", "writerComment": "4589", "writerFan": "8313", "writerGrade": "6级", "writerIntegral": "8327", "writerName": "codeMak1r.小新", "writerProfileAdress": "writer_image\\profile_126079130.jpg", "writerRankTotal": "1737", "writerRankWeekly": "13", "writerThumb": "2774", "writerVisitNum": "208397", "blog_read_count": "247", "blog_time": "已于 2022-08-07 15:34:20 修改", "blog_title": "【React扩展】1、setState的两种写法、lazyLoad懒加载、Fragment标签和createContext()", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/e6438d0c37044ec2a519568034532d4c.gif#pic_center\"/></p>\n<blockquote>\n<p><strong><font color=\"#FF7F50\"> 欢迎来到我的博客</font></strong><br/> <strong>📔博主是一名大学在读本科生，主要学习方向是前端。<br/> 🍭目前已经更新了<font color=\"#FF7F50\">【Vue】、【React–从基础到实战】、【TypeScript】等等系列专栏</font><br/> 🛠目前正在学习的是🔥<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          R\n         \n         \n          e\n         \n         \n          a\n         \n         \n          c\n         \n         \n          t\n         \n         \n          框架\n         \n        \n        \n         React框架\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0077em;\">R</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">t</span><span class=\"mord cjk_fallback\">框架</span></span></span></span></span>🔥，中间穿插了一些基础知识的回顾<br/> 🌈博客主页👉<a href=\"https://blog.csdn.net/Svik_zy?type=blog\">codeMak1r.小新的博客</a></strong></p>\n<p></p>\n<div class=\"toc\">\n<h3>😇本文目录😇</h3>\n<ul><li><a href=\"#1_setState_15\">1. setState</a></li><li><ul><li><a href=\"#setState2_16\">setState更新状态的2种写法</a></li><li><a href=\"#_18\"></a></li></ul>\n</li><li><a href=\"#2lazyLoad_65\">2.lazyLoad</a></li><li><ul><li><a href=\"#lazyLoad_66\">路由组件的lazyLoad</a></li></ul>\n</li><li><a href=\"#3_Fragment_88\">3. Fragment</a></li><li><ul><li><a href=\"#_89\">使用</a></li><li><a href=\"#_90\"></a></li><li><a href=\"#_132\">作用</a></li></ul>\n</li><li><a href=\"#4createContext_137\">4.createContext()</a></li><li><ul><li><a href=\"#_138\">理解</a></li><li><a href=\"#_145\">使用</a></li><li><a href=\"#_178\">示例</a></li><li><a href=\"#_258\">注意</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<p><strong><font color=\"#FF7F50\">本文被专栏<a href=\"https://blog.csdn.net/svik_zy/category_11671445.html?spm=1001.2014.3001.5482\">【React–从基础到实战】</a>收录</font></strong></p>\n</blockquote>\n<blockquote>\n<p><strong><font color=\"#FF7F50\">🕹坚持创作✏️，一起学习📖，码出未来👨🏻‍💻！</font></strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\8a39a1a1a6914ffab36622d0d76ecd74.jpeg\"/></p>\n</blockquote>\n<h1><a id=\"1_setState_15\"></a>1. setState</h1>\n<h2><a id=\"setState2_16\"></a>setState更新状态的2种写法</h2>\n<h2><a id=\"_18\"></a></h2>\n<blockquote>\n<p>(1). setState(stateChange, [callback]) -----<strong>对象式的setState</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// render调用后</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol><li>stateChange为状态改变对象，该对象可以体现出状态的更改；</li><li>callback是可选的回调函数，它在状态更新完毕，页面也更新后（<strong>render调用后</strong>）才被调用</li></ol>\n<hr/>\n<p>(2). setState(updater, [callback]) ----- <strong>函数式的setState</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol><li>updater为返回stateChange对象的函数；</li><li>updater可以接收到state和props；</li><li>callback是可选的回调函数，它在状态更新、页面也更新后（<strong>render调用后</strong>）才被调用</li></ol>\n<hr/>\n<p>总结：</p>\n<ol><li> <p>对象式的setState是函数式的setState的简写方式（语法糖）</p> </li><li> <p>使用原则：</p> <p>（1）如果新状态不依赖于原状态 ==== 使用对象方式</p> <p>（2）如果新状态依赖于原状态 ==== 使用函数方式</p> <p>（3）如果需要在setState()执行后获取最新的状态数据，要在第二个callback函数中读取</p> </li><li> <p><strong>React状态的更新是异步的！！</strong></p> </li></ol>\n</blockquote>\n<h1><a id=\"2lazyLoad_65\"></a>2.lazyLoad</h1>\n<h2><a id=\"lazyLoad_66\"></a>路由组件的lazyLoad</h2>\n<p>引入lazy函数和Suspense组件</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> Component<span class=\"token punctuation\">,</span> lazy<span class=\"token punctuation\">,</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n</code></pre>\n<p>实现路由懒加载</p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 1.通过React的lazy函数配合import（）函数动态加载路由组件 ===&gt; 路由组件代码会被分开打包</span>\n<span class=\"token keyword\">const</span> Login <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/pages/Login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 2. 通过&lt;Suspense&gt;指定在加载得到路由打包文件前显示一个自定义loading界面</span>\n<span class=\"token operator\">&lt;</span>Suspense fallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>loading<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/xxx\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>xxx<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  \t<span class=\"token operator\">&lt;</span>Redirect to<span class=\"token operator\">=</span><span class=\"token string\">\"/login\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Suspense<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h1><a id=\"3_Fragment_88\"></a>3. Fragment</h1>\n<h2><a id=\"_89\"></a>使用</h2>\n<h2><a id=\"_90\"></a></h2>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// Componment</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> Component<span class=\"token punctuation\">,</span> Fragment <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> Demo <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/4_fragment'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Fragment<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Demo <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Fragment<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// FC</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> Fragment <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Fragment<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Fragment<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n其实还可以<span class=\"token operator\">...</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"_132\"></a>作用</h2>\n<blockquote>\n<p>可以不用必须有一个真实的DOM根标签了</p>\n</blockquote>\n<h1><a id=\"4createContext_137\"></a>4.createContext()</h1>\n<h2><a id=\"_138\"></a>理解</h2>\n<blockquote>\n<p>一种组件间通信方式，常用于【祖组件】与【后代组件】间通信</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6744418a9d454e2ab16249dd4fe40f7a.png\"/></p>\n<h2><a id=\"_145\"></a>使用</h2>\n<blockquote>\n<ol><li> <p>创建Context容器对象：</p> <pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> Xxxcontext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre> </li><li> <p>渲染子组件时，外面包裹xxxContext.Provider，通过value属性给后代组件传递数据：</p> <pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>XxxContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>数据<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n\t子组件\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>XxxContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">&gt;</span>\n</code></pre> </li><li> <p>后代组件读取数据：</p> <pre><code class=\"prism language-js\"><span class=\"token comment\">// 第一种方式：仅适用于类组件</span>\n<span class=\"token keyword\">static</span> contextType <span class=\"token operator\">=</span> xxxContext <span class=\"token comment\">// 声明接收context</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context <span class=\"token comment\">// 读取context中的value数据</span>\n\n<span class=\"token comment\">// 第二种方式：函数组件与类组件都可以</span>\n<span class=\"token operator\">&lt;</span>xxxContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">&gt;</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token parameter\">value</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span> <span class=\"token comment\">//value就是context中的value数据</span>\n\t\t\t要显示内容\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>xxxContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">&gt;</span>\n</code></pre> </li></ol>\n</blockquote>\n<h2><a id=\"_178\"></a>示例</h2>\n<p>A组件是父组件；B组件是子组件；C组件是孙组件</p>\n<p>A组件中初始化了state，里面有一个username属性值为tom；</p>\n<p>孙组件C要使用A组件传递过来的username属性。</p>\n<p><img alt=\"在这里插入图片描述\" height=\"60%\" src=\"image\\9c581dbbad05486b8bd440d415a53206.png\" width=\"60%\"/></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./index.css'</span>\n\n<span class=\"token comment\">// 创建一个用于保存数据的上下文</span>\n<span class=\"token keyword\">const</span> MyContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{<!-- --></span>\n\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'tom'</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'parent'</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>我是<span class=\"token constant\">A</span>组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h4<span class=\"token operator\">&gt;</span>我的用户名是：<span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h4<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>MyContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MyContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'child'</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>我是<span class=\"token constant\">B</span>组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 声明接收context</span>\n  <span class=\"token keyword\">static</span> contextType <span class=\"token operator\">=</span> MyContext\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'grand'</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>我是<span class=\"token constant\">C</span>组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h4<span class=\"token operator\">&gt;</span>我从<span class=\"token constant\">A</span>组件接收到的用户名：<span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h4<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>若孙组件C为函数式组件FC：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'grand'</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">&gt;</span>我是<span class=\"token constant\">C</span>组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>h4<span class=\"token operator\">&gt;</span>我从<span class=\"token constant\">A</span>组件接收到的用户名：\n        <span class=\"token operator\">&lt;</span>MyContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">&gt;</span>\n          <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token parameter\">value</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n              <span class=\"token keyword\">return</span> value\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MyContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h4<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_258\"></a>注意</h2>\n<blockquote>\n<p>在应用开发中一般不用context，一般都用它来封装react插件；</p>\n<p>比如：react-redux库底层就使用到了context…</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}