{"blogid": "126151346", "writerAge": "码龄1年", "writerBlogNum": "103", "writerCollect": "4574", "writerComment": "4379", "writerFan": "6332", "writerGrade": "7级", "writerIntegral": "13374", "writerName": "@每天都要敲代码", "writerProfileAdress": "writer_image\\profile_126151346.jpg", "writerRankTotal": "799", "writerRankWeekly": "90", "writerThumb": "4854", "writerVisitNum": "80950", "blog_read_count": "206", "blog_time": "于 2022-08-08 15:54:45 发布", "blog_title": "深入理解Java IO流（第三篇）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p>✅作者简介：大家好我是@每天都要敲代码，一位材料转码农的选手，希望一起努力，一起进步！<br/> 📃个人主页：<a href=\"https://blog.csdn.net/m0_61933976?spm=1010.2135.3001.5421\" title=\"@每天都要敲代码的个人主页\">@每天都要敲代码的个人主页</a></p>\n<p>🔥系列专栏：<a href=\"https://blog.csdn.net/m0_61933976/category_11820121.html?spm=1001.2014.3001.5482\" title=\"JavaSE从入门到精通\">JavaSE从入门到精通</a><br/> 💬推荐一款模拟面试、刷题神器，从基础到大厂面试题👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_mtdyqdm_c\" title=\"点击跳转刷题网站进行注册学习\">点击跳转刷题网站进行注册学习</a></p>\n</blockquote>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%F0%9F%A5%85%E7%9B%AE%E5%BD%95%E6%8B%B7%E8%B4%9D-toc\" style=\"margin-left:0px;\"><a href=\"#%F0%9F%A5%85%E7%9B%AE%E5%BD%95%E6%8B%B7%E8%B4%9D\">🥅目录拷贝</a></p>\n<p id=\"%F0%9F%A5%85ObjectInputStream%20%26%26%C2%A0ObjectOutputStream-toc\" style=\"margin-left:0px;\"><a href=\"#%F0%9F%A5%85ObjectInputStream%20%26%26%C2%A0ObjectOutputStream\">🥅ObjectInputStream &amp;&amp; ObjectOutputStream</a></p>\n<p id=\"1.%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%AE%9E%E7%8E%B0-toc\" style=\"margin-left:80px;\"><a href=\"#1.%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%AE%9E%E7%8E%B0\">1.序列化的实现</a></p>\n<p id=\"2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%AE%9E%E7%8E%B0-toc\" style=\"margin-left:80px;\"><a href=\"#2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%AE%9E%E7%8E%B0\">2.反序列化的实现</a></p>\n<p id=\"3.%E5%BA%8F%E5%88%97%E5%8C%96%20%26%26%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1-toc\" style=\"margin-left:80px;\"><a href=\"#3.%E5%BA%8F%E5%88%97%E5%8C%96%20%26%26%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1\">3.序列化 &amp;&amp; 反序列化多个对象</a></p>\n<p id=\"4.%E5%BA%8F%E5%88%97%E5%8C%96%E7%89%88%E6%9C%AC%E5%8F%B7-toc\" style=\"margin-left:80px;\"><a href=\"#4.%E5%BA%8F%E5%88%97%E5%8C%96%E7%89%88%E6%9C%AC%E5%8F%B7\">4.序列化版本号</a></p>\n<p id=\"%F0%9F%A5%85IO%E5%92%8CProperties%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%F0%9F%A5%85IO%E5%92%8CProperties%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8\">🥅IO和Properties联合使用</a></p>\n<p id=\"%E7%BB%93%E6%9D%9F%E8%AF%AD-toc\" style=\"margin-left:0px;\"><a href=\"#%E7%BB%93%E6%9D%9F%E8%AF%AD\">结束语</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%F0%9F%A5%85%E7%9B%AE%E5%BD%95%E6%8B%B7%E8%B4%9D\">🥅目录拷贝</h1>\n<blockquote>\n<p>把一个目录拷贝到另一个目录<br/> 需要用到：FileInputStream+FileOutputStream+File+递归的思想</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.bjpowernode.java.io;\n\nimport java.io.*;\n\npublic class CopyAll {\n    public static void main(String[] args) {\n        // 拷贝源\n        File srcFile = new File(\"C:\\\\Java学习\\\\javaSE学习\");\n        // 拷贝目标\n        File destFile = new File(\"D:\\\\a\\\\b\\\\c\");\n        // 调用方法进行拷贝\n        copyDir(srcFile,destFile);\n    }\n\n    /**\n     * 拷贝目录\n     * @param srcFile 拷贝源\n     * @param destFile 拷贝目标\n     */\n    private static void copyDir(File srcFile, File destFile) {\n        //4、递归结束的条件，如果是文件就结束（就开始拷贝）\n        if(srcFile.isFile()){\n            // 是文件的是要要拷贝文件，一边读一遍写\n            FileInputStream in = null;\n            FileOutputStream out = null;\n            try {\n                // 读文件\n                in = new FileInputStream(srcFile);\n                // 写文件\n                String path =  (destFile.getAbsolutePath().endsWith(\"\\\\\")?destFile.getAbsolutePath() :\n                        destFile.getAbsolutePath()+\"\\\\\")+srcFile.getAbsolutePath().substring(3);\n                System.out.println(path);\n               out = new FileOutputStream(path);\n                // 一边读一边写\n                byte[] bytes = new byte[1024*1024];// 1M\n                int readCount = 0;\n                while((readCount = in.read(bytes)) != -1){\n                    out.write(bytes,0,readCount);\n                }\n                // 刷新\n                out.flush();\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                if (out != null) {\n                    try {\n                        out.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n            return; // srcFile如果是一个文件，递归结束\n        }\n\n        //1、 获取拷贝源下面的子目录\n        File[] files = srcFile.listFiles(); //列出源文件下的子目录（目录和文件）\n        // 这个file有可能是目录，也有可能是文件；但都是一个File对象\n        for(File file:files){\n            // 获取所有文件的（目录和文件）绝对路径；进行打印测试\n            //System.out.println(file.getAbsolutePath());\n\n            // 3、创建对应的目录（目标文件对应的目录，要提前创建好）\n            if(srcFile.isDirectory()){ // 如果是一个目录\n                // 新建对应的目录\n                String srcDir = file.getAbsolutePath(); // 拿出所有的源目录\n                // 这里如果只是一个盘符的话，写上\"//\"会被识别出来；如果后面有其它目录，就识别不了\"//\"\n                // srcDir.substring(3)表示从下标为3的地方开始截取\n                String destDir = (destFile.getAbsolutePath().endsWith(\"\\\\\")? destFile.getAbsolutePath() :\n                        destFile.getAbsolutePath()+\"\\\\\")+srcDir.substring(3); // 目标目录\n                // 获取路径后，开始创建\n                File newFile = new File(destDir);\n                if(!newFile.exists()){ // 如果不存在，就递归创建目录\n                    newFile.mkdirs();\n                }\n            }\n\n            //2、 递归调用（是目录的话一直往下拿，直到是一个文件就开始拷贝）\n            copyDir(file,destFile);\n\n        }\n    }\n}\n</code></pre>\n<p></p>\n<h1>🥅ObjectInputStream &amp;&amp; ObjectOutputStream</h1>\n<blockquote>\n<p>1、首先我们先明白两个概念：<strong>序列化（Serialize）</strong>和<strong>反序列化（DeSerialize）</strong></p>\n<p>        <strong>序列化：</strong><span style=\"color:#fe2c24;\">将java对象存储到文件中</span>，将java对象的状态保存下来的过程</p>\n<p>       <strong> 反序列化：</strong><span style=\"color:#fe2c24;\">将硬盘上的数据重新恢复到内存当中</span>，恢复成java对象</p>\n<p>2、<strong>ObjectInputStream 和 ObjectOutputStream的作用</strong></p>\n<p>        <span style=\"color:#fe2c24;\">ObjectOutputStream是用来序列化的---》拆分对象</span></p>\n<p><span style=\"color:#fe2c24;\">        ObjectInputStream是用来反序列化的---》组装对象</span></p>\n<p>3、通过图，来理清楚它们之间的关系</p>\n<p><img alt=\"\" height=\"546\" src=\"image\\59bf2aa97a8d48b6aff5c398da274963.png\" width=\"1200\"/><strong> </strong></p>\n</blockquote>\n<h3 id=\"1.%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%AE%9E%E7%8E%B0\"><strong>1.序列化的实现</strong></h3>\n<blockquote>\n<p>（1）参与<strong>序列化和反序列化的对象</strong>，<span style=\"color:#fe2c24;\"><strong>必须实现Serializable接口</strong></span>。如果下面的Student类<span style=\"color:#fe2c24;\">没有实现Serializable接口，会报java.io.NotSerializableException</span>，译为：Student对象不支持序列化！</p>\n<p>（2）注意：通过源代码发现，Serializable接口只是一个标志接口：</p>\n<pre><code class=\"language-java\"> public interface Serializable {\n    }</code></pre>\n<p>（3）这个接口当中什么代码都没有；那么它起到一个什么作用呢？<br/>        起到<strong>标识的作用</strong>，标志的作用，java虚拟机看到这个类实现了这个接口，可能会对这个类进行特殊待遇。Serializable这个标志接口是给java虚拟机参考的，<strong>java虚拟机看到Serializable这个接口之后</strong>，会为该类自动<strong>生成一个序列化版本号</strong>。</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.bjpowernode.java.io;\n\nimport java.io.FileOutputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\n\n\npublic class ObjectOutputStreamTest01 {\n    public static void main(String[] args) throws Exception {\n        // 创建Java对象\n        Student stu = new Student(111,\"zhangsan\");\n        // 序列化\n        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"s文件\"));\n        // 序列化对象\n        oos.writeObject(stu);\n        // 刷新\n        oos.flush();\n        // 关闭\n        oos.close();\n\n\n    }\n}\n\n// 学生类\nclass Student&lt;toString&gt; implements Serializable {\n    private int no;\n    private String name;\n    // 构造方法\n    public Student() {\n    }\n    public Student(int no, String name) {\n        this.no = no;\n        this.name = name;\n    }\n    // setter and getter\n    public int getNo() {\n        return no;\n    }\n    public void setNo(int no) {\n        this.no = no;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    // 重写toString\n    public String toString() {\n        return \"Student{\" +\n                \"no=\" + no +\n                \", name='\" + name + '\\'' +\n                '}';\n    }\n}</code></pre>\n<h3 id=\"2.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%AE%9E%E7%8E%B0\"><strong>2.反序列化的实现</strong></h3>\n<pre><code class=\"language-java\">package com.bjpowernode.java.io;\n// 反序列化\nimport java.io.FileInputStream;\nimport java.io.ObjectInputStream;\n\npublic class ObjectInputStreamTest01 {\n    public static void main(String[] args) throws Exception{\n        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"s文件\"));\n        // 开始反序列化，读\n        Object obj = ois.readObject();\n        // 反序列化回来是一个学生对象，所以会调用学生对象的toString方法。\n        System.out.println(obj);\n        // 关闭\n        ois.close();\n    }\n}\n</code></pre>\n<h3 id=\"3.%E5%BA%8F%E5%88%97%E5%8C%96%20%26%26%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1\"><strong>3.序列化 &amp;&amp; 反序列化多个对象</strong></h3>\n<blockquote>\n<p>1、可以一次序列化多个对象呢？<br/>      <span style=\"color:#fe2c24;\">可以将对象放到集合当中，序列化集合！</span><br/> 2、<span style=\"color:#fe2c24;\">参与序列化的ArrayList集合以及集合中的元素User都需要实现 java.io.Serializable接口</span>。</p>\n<p>3、补充一个关键字：<strong>transient；这个关键字表示游离的，不参与序列化。</strong><strong>     </strong></p>\n</blockquote>\n<p><strong>序列化 </strong></p>\n<pre><code class=\"language-java\">package com.bjpowernode.java.io;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ObjectOutputStreamTest02 {\n    public static void main(String[] args) throws Exception {\n        // 创建集合\n        List&lt;User&gt; userList = new ArrayList&lt;&gt;();\n        // 增加元素\n        userList.add(new User(1,\"zhangsan\"));\n        userList.add(new User(2,\"lisi\"));\n        userList.add(new User(3,\"wangwu\"));\n        // 序列化\n        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"Users\"));\n        // 序列化集合---&gt;一次性序列化多个对象\n        oos.writeObject(userList);\n\n        // 刷新\n        oos.flush();\n        // 关闭\n        oos.close();\n\n\n    }\n}\n\n// USer类\nclass User implements Serializable {\n    private int num;\n    private transient String name; // name不参与序列化操作;name打印出来的结果就是null\n    // 构造方法\n    public User() {\n    }\n    public User(int num, String name) {\n        this.num = num;\n        this.name = name;\n    }\n    // setter and getter\n    public int getNum() {\n        return num;\n    }\n    public void setNum(int num) {\n        this.num = num;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    // 重写toStringF方法\n    public String toString() {\n        return \"User{\" +\n                \"num=\" + num +\n                \", name='\" + name + '\\'' +\n                '}';\n    }\n}</code></pre>\n<p><strong>反序列化 </strong></p>\n<pre><code class=\"language-java\">package com.bjpowernode.java.io;\n\nimport java.util.List;\nimport java.io.FileInputStream;\nimport java.io.ObjectInputStream;\n\n// 反序列化\npublic class ObjectInputStreamTest02 {\n    public static void main(String[] args) throws Exception {\n        // 开始反序列化，读\n        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"Users\"));\n        // 反序列化回来一个List集合\n        //Object obj = ois.readObject();\n        //System.out.println(obj instanceof List); // true,得到返回的是List集合\n\n       List&lt;User&gt; userList = (List&lt;User&gt;)ois.readObject();\n       for(User u:userList){\n           System.out.println(u);\n       }\n        // 关闭\n        ois.close();\n    }\n}\n</code></pre>\n<h3 id=\"4.%E5%BA%8F%E5%88%97%E5%8C%96%E7%89%88%E6%9C%AC%E5%8F%B7\"><strong>4.序列化版本号</strong></h3>\n<blockquote>\n<p><strong>（1）java语言中是采用什么机制来区分类的？</strong><br/>       第一：首先通过<span style=\"color:#fe2c24;\">类名</span>进行比对，如果类名不一样，肯定不是同一个类。<br/>       第二：如果类名一样，再怎么进行类的区别？靠<span style=\"color:#fe2c24;\">序列化版本号</span>进行区分。</p>\n<p><strong>（2）序列化版本号有什么用呢？</strong></p>\n<p>    小鹏编写了一个类：com.bjpowernode.java.bean.Student implements Serializable<br/>     胡浪编写了一个类：com.bjpowernode.java.bean.Student implements Serializable</p>\n<p>所以<strong><span style=\"color:#fe2c24;\">序列化版本号是用来区分类的</span></strong>！例如：类名相同，我们可以通过不通的序列化版本号来区分它；对于但也有缺点，对于同一个代码，我们更改了，必须重新编译才可以！</p>\n<p>例如：对于上述的Student类，我们采用默认的序列化版本号，一年前我们实现了这个功能，有一个序列化版本号；一年后我们优化更改了代码，此时JVM就会认为这已经不是同一个类，必须重新进行编译，才能<strong>反序列化</strong><br/><strong>（3）自动生成序列化版本号的好处和缺陷</strong>    </p>\n<p><strong>好处：</strong>不同的人编写了同一个类，但“这两个类确实不是同一个类”。这个时候序列化版本就起上作用了。对于java虚拟机来说，java虚拟机是可以区分开这两个类的，因为这两个类都实现了Serializable接口，都有默认的序列化版本号，他们的序列化版本号不一样。所以区分开了。）<br/><strong>缺陷：</strong>这种自动生成的序列化版本号缺点是一旦代码确定之后，不能进行后续的修改，因为只要修改，必然会重新编译，此时会生成全新的序列化版本号，这个时候java虚拟机会认为这是一个全新的类。</p>\n<p><strong>（4）总结：从需求来看</strong></p>\n<p>凡是一个类实现了Serializable接口，<span style=\"color:#fe2c24;\"><strong>建议给该类提供一个固定不变的序列化版本号</strong></span>。这样，以后这个类即使代码修改了，但是版本号不变，java虚拟机会认为是同一个类。</p>\n<p>Java虚拟机看到Serializable接口之后，会自动生成一个序列化版本号。<br/> 这里没有手动写出来，java虚拟机会默认提供这个序列化版本号。<br/> 建议将序列化版本号手动的写出来。不建议自动生成<br/>    </p>\n<pre><code class=\"language-java\"> private static final long serialVersionUID = 1L;</code></pre>\n<p>   java虚拟机识别一个类的时候先通过类名，如果类名一致，再通过序列化版本号。</p>\n<p><strong>（5）设置IDEA自动生成序列版本号</strong></p>\n<p>File---&gt;Settings---&gt;Code Style---&gt;Inspections---&gt;把下面这个打上对勾---&gt;Apply---&gt;OK</p>\n<p> <img alt=\"\" height=\"56\" src=\"image\\40bd4604984a486687f9368649c1b6ad.png\" width=\"775\"/></p>\n<p> 最终回到我们继承Serializable接口的类名上，alt+Enter即可自动生成序列版本号</p>\n</blockquote>\n<h1></h1>\n<h1>🥅IO和Properties联合使用</h1>\n<blockquote>\n<p>（1）设计理念：把以后经常改变的数据，可以单独写到一个文件中，使用程序动态读取。<br/>     将来只需要修改这个文件的内容，java代码不需要改动，不需要重新编译，服务器也不需要重启；就可以拿到动态的信息。</p>\n<p>（2）类似于以上机制的这种文件被称为<strong>配置文件</strong>；并且当配置文件中的内容格式是：<br/>         key1=value<br/>         key2=value<br/> 的时候，我们把这种<strong>配置文件叫做属性配置文件</strong>，在属性配置文件当中#注释，<strong>如果key重复的话，value会自动覆盖。</strong></p>\n<p>（3）java规范中有要求：<span style=\"color:#fe2c24;\">属性配置文件建议以.properties结尾，但这不是必须的</span>。<br/>     这种以.properties结尾的文件在java中被称为：属性配置文件；其中Properties是专门存放属性配置文件内容的一个类</p>\n<p>（4）<strong>Properties是一个Map集合，key和value都是String类型</strong>。</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.bjpowernode.java.io;\n\nimport java.io.FileReader;\nimport java.util.Properties;\n\npublic class IoProperiesTest02 {\n    public static void main(String[] args) throws Exception {\n        // 新建一个输入流对象\n        FileReader reader = new FileReader(\"temp.txt\");\n        // 新建一个Map集合\n        Properties pro = new Properties();\n        // 调用Properties对象的load方法将文件中的数据加载到Map集合中。\n        pro.load(reader);// 文件中的数据顺着管道加载到Map集合中，其中等号=左边做key，右边做value\n        // 通过key获取value\n        String username = pro.getProperty(\"username\");\n        System.out.println(username); //admin\n        // 如果我们把admin改成root，不需要重新进行编译，就能直接运行得到root\n        System.out.println(pro.getProperty(\"password\")); // 123\n    }\n\n}\n\n/*temp.txt文件里的内容\nusername=admin\npassword=123\n        */\n</code></pre>\n<p></p>\n<h1 id=\"%E7%BB%93%E6%9D%9F%E8%AF%AD\">结束语</h1>\n<blockquote>\n<p>今天的分享就到这里啦！快快通过下方链接注册加入刷题大军吧！各种大厂面试真题在等你哦！</p>\n<p> 💬刷题神器，从基础到大厂面试题👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_mtdyqdm_c\" title=\"点击跳转刷题网站\">点击跳转刷题网站</a></p>\n</blockquote>\n<p><img alt=\"\" height=\"511\" src=\"image\\184068dc41e94efbb14e555f972eaa17.png\" width=\"1200\"/></p>\n</div>\n</div>"}