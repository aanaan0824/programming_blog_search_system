{"blogid": "126695964", "writerAge": "码龄1年", "writerBlogNum": "68", "writerCollect": "1828", "writerComment": "2033", "writerFan": "2255", "writerGrade": "6级", "writerIntegral": "4793", "writerName": "兴趣使然黄小黄", "writerProfileAdress": "writer_image\\profile_126695964.jpg", "writerRankTotal": "3563", "writerRankWeekly": "1555", "writerThumb": "1893", "writerVisitNum": "52346", "blog_read_count": "116", "blog_time": "已于 2022-09-07 00:01:41 修改", "blog_title": "【JavaSE】多线程篇（四）线程的同步机制、互斥锁、线程死锁与释放锁", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>💁 <strong>个人主页：</strong><a href=\"https://blog.csdn.net/m0_60353039?spm=1000.2115.3001.5343\">黄小黄的博客主页</a><br/> ❤️ <strong>支持我</strong>：👍 点赞 🌷 收藏 🤘关注<br/> 🎏 <strong>格言</strong>：All miracles start from sometime somewhere, make it right now.<br/> <strong>本文来自专栏：</strong><a href=\"https://blog.csdn.net/m0_60353039/category_11757127.html?spm=1001.2014.3001.5482\">JavaSE从入门到精通</a><br/> <img alt=\"在这里插入图片描述\" src=\"image\\3e9cfd21ccdc40edb3e31b167198c96f.jpeg\"/></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1_Synchronized_12\">1 走进Synchronized</a></li><li><ul><li><a href=\"#11__13\">1.1 线程同步机制</a></li><li><a href=\"#12_synchronized_21\">1.2 同步的具体方法--synchronized</a></li><li><a href=\"#13__38\">1.3 使用线程同步解决售票问题</a></li></ul>\n</li><li><a href=\"#2__105\">2 互斥锁</a></li><li><ul><li><a href=\"#21__106\">2.1 基本介绍</a></li><li><a href=\"#22__114\">2.2 使用互斥锁解决售票问题</a></li></ul>\n</li><li><a href=\"#3__196\">3 线程死锁</a></li><li><ul><li><a href=\"#31__197\">3.1 基本介绍</a></li><li><a href=\"#32__213\">3.2 案例演示</a></li></ul>\n</li><li><a href=\"#4__272\">4 释放锁</a></li><li><ul><li><a href=\"#41__273\">4.1 释放锁的情况</a></li><li><a href=\"#42__280\">4.2 不会释放锁的情况</a></li></ul>\n</li><li><a href=\"#_287\">写在最后</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"1_Synchronized_12\"></a>1 走进Synchronized</h1>\n<h2><a id=\"11__13\"></a>1.1 线程同步机制</h2>\n<p>  在前面的多线程篇的学习中，我们可以尝试对售票活动进行模拟，将每个售票窗口看成一个进程。但是，前面由于没有学习过线程的同步，有可能会出现超卖的问题。比如只剩最后一张票，但是，两个窗口此时都在同时卖，就会由于数据更新不及时，导致多卖出票。</p>\n<p>🐱<strong><font color=\"red\">何为线程同步机制？</font></strong></p>\n<ol><li>在多线程编程中，<strong><font color=\"orange\">一些敏感数据不允许被多个线程同时访问，</font></strong> 此时就需要使用同步访问技术，<strong><font color=\"orange\">保证数据在任何时刻，最多有一个线程被访问，以保证数据的完整性。</font></strong></li><li>线程同步，<strong><font color=\"orange\">即当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成操作，</font></strong> 其他线程才能对该内存地址进行操作。</li></ol>\n<h2><a id=\"12_synchronized_21\"></a>1.2 同步的具体方法–synchronized</h2>\n<p>1️⃣ <strong><font color=\"red\">同步代码块：</font></strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>对象<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//得到对象的锁，才能操作同步代码</span>\n\t<span class=\"token comment\">//需要被同步的代码</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>2️⃣ <strong><font color=\"red\">同步方法：</font></strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>参数列表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//需要被同步的代码</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"13__38\"></a>1.3 使用线程同步解决售票问题</h2>\n<p> 在下面的案例中，我们模拟售票问题，通过synchronized解决超卖问题。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">syn</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author 兴趣使然黄小黄\n * @version 1.0\n * 售票问题\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SellTicket</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SellTicketToCustomer</span> sellTicketToCustomer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SellTicketToCustomer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//模拟三个售票窗口</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicketToCustomer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicketToCustomer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicketToCustomer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SellTicketToCustomer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/**\n     * 票数\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> ticketNum <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 控制run中的while,用于以通知的形式终止线程\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> loop <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">sellTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 售票的方法\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sellTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//同步方法, 在统一时刻, 只能有一个线程来执行sellTicket方法</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ticketNum <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"售票结束...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            loop <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">getStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"窗口 \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 售出一张票, \"</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"剩余票数 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>ticketNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>🐰 <strong>说明：</strong></p>\n<p>在上述例子中，sellTicket方法被设置为同步方法，在同一时刻，只允许一个线程进入，解决了超卖的情况。运行结果如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8ed1a63cfce74d72bb256275fbd7c574.png\"/></p>\n<hr/>\n<h1><a id=\"2__105\"></a>2 互斥锁</h1>\n<h2><a id=\"21__106\"></a>2.1 基本介绍</h2>\n<ul><li>Java语言引入了对象互斥锁的概念，来保证共享数据操作的完整性；</li><li>每个对象都对应于一个可称为“互斥锁”的标记，这个标记 <strong><font color=\"red\">用来保证在任一时刻，只能有一个线程访问该对象；</font></strong></li><li>关键字<code>synchronized</code>用来与对象的互斥锁联系。当某个对象用<code>synchronized</code>修饰时，表示该对象在任一时刻只能由一个线程访问；</li><li>同步具有局限性，会导致程序的执行效率降低；</li><li><strong><font color=\"red\">非静态同步方法的锁可以是this，也可以是其他对象（要求为同一对象）；</font></strong></li><li><strong><font color=\"red\">静态的同步方法的锁为当前类本身，类名.class。</font></strong></li></ul>\n<h2><a id=\"22__114\"></a>2.2 使用互斥锁解决售票问题</h2>\n<p> 售票问题我们既可以使用同步方法，也可以使用对象锁，给代码块上锁。在之前的案例中，我们演示的就是使用了同步方法：</p>\n<ul><li>public synchronized void sellTicket()就是一个同步方法，这时锁在 this 对象上。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0889c3e0c34146f595f4ca2cbdf1039e.png\"/></li></ul>\n<p> 这里，我们尝试 <strong><font color=\"red\">使用对象锁解决，</font></strong> 解决代码如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\26a175c0108242728ea29e12afc8c10f.png\"/></p>\n<p>  其实也不一定必须使用this，只要对象为同一个就行，比如下面的代码中，在该线程类中，初始化了一个对象，加锁代码块用的也是同一对象，因此，结果一致：</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * @author 兴趣使然黄小黄\n * @version 1.0\n * 售票问题\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SellTicket</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SellTicketToCustomer</span> sellTicketToCustomer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SellTicketToCustomer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//模拟三个售票窗口</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicketToCustomer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicketToCustomer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicketToCustomer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SellTicketToCustomer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/**\n     * 票数\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> ticketNum <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 控制run中的while,用于以通知的形式终止线程\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> loop <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 用于加锁\n     */</span>\n    <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">sellTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 售票的方法\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sellTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ticketNum <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"售票结束...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                loop <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">getStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"窗口 \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 售出一张票, \"</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\"剩余票数 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>ticketNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><mark><strong>互斥锁小结一下：</strong></mark></p>\n<ol><li>同步方法如果没有static修饰，默认锁对象为this；</li><li>如果同步方法有static修饰，默认锁对象为 当前类.class;</li><li>注意多个线程的锁对象为同一个即可。</li></ol>\n<hr/>\n<h1><a id=\"3__196\"></a>3 线程死锁</h1>\n<h2><a id=\"31__197\"></a>3.1 基本介绍</h2>\n<p> <strong><font color=\"red\">多个线程都占用了对方的锁资源，但是不肯相让，就导致了死锁。</font></strong> 在实际编程开发中，一定要避免死锁的发生。</p>\n<p>🐦 <strong>举个例子：</strong></p>\n<blockquote>\n<p>话说，在某一药店门口… …<br/> 👮 你好，请您佩戴口罩！<br/> 👦我没有口罩！<br/> 👮 你好，没有口罩是不能入内的哦~<br/> 👦我就是没有口罩才来买口罩啊！<br/> 👮 没有佩戴口罩是不能进入的呢…<br/> 👦… …<br/> 👮 … …</p>\n</blockquote>\n<p> 在上述例子中，我们可以简单的把口罩看作锁，把保安放人与客户通过分别看成一个线程。此时，保安和客户都占用口罩这一锁资源，互不相让，就导致了死锁的情况。</p>\n<h2><a id=\"32__213\"></a>3.2 案例演示</h2>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * @author 兴趣使然黄小黄\n * @version 1.0\n * 模拟线程死锁\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeadLockTest</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">DeadDemo</span> deadDemo1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeadDemo</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">DeadDemo</span> deadDemo2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeadDemo</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> thread1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>deadDemo1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> thread2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>deadDemo2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 线程\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DeadDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> o1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> o2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> flag<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DeadDemo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flag <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"进入1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"进入2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"进入3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"进入4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a1e21f5b90e54c82957d8400751cf265.png\"/></p>\n<p>🐰 <mark><strong>说明：</strong></mark><br/> <img alt=\"在这里插入图片描述\" src=\"image\\b9f7bfa4b120436997103c7e0667e91f.png\"/><br/>  thread0与thread1两个线程运行时，<strong><font color=\"red\">thread0首先拿到o1锁，而后请求o2锁，这时，thread1已经拿到了o2锁，请求o1锁，由于各自请求的锁都被其他线程占用，就导致了死锁的情况，</font></strong> 运行结果就像卡住了一样，不再动弹。</p>\n<hr/>\n<h1><a id=\"4__272\"></a>4 释放锁</h1>\n<h2><a id=\"41__273\"></a>4.1 释放锁的情况</h2>\n<ol><li>当前线程的同步方法、同步代码块执行结束；</li><li>当前线程在同步代码块、同步方法中遇到break、return；</li><li>当前线程在同步代码块、同步方法中出现了未处理的Error或者Exception，导致异常结束；</li><li>当前线程在同步代码块、同步方法中执行了线程对象的wait()方法，当前线程暂停，并释放锁。</li></ol>\n<h2><a id=\"42__280\"></a>4.2 不会释放锁的情况</h2>\n<ol><li>线程执行同步代码块或者同步方法时，<strong><font color=\"red\">程序调用了Thread.sleep()、Thread.yield()方法，暂停了当前线程的执行，不会释放锁；</font></strong></li><li>线程执行同步代码块时，其他线程调用了该线程的suspend()方法将线程挂起，该线程不会释放锁。</li></ol>\n<hr/>\n<h1><a id=\"_287\"></a>写在最后</h1>\n<p>🌟以上便是本文的全部内容啦，后续内容将会持续<strong>免费更新</strong>，如果文章对你有所帮助，麻烦动动小手<strong>点个赞 + 关注</strong>，非常感谢 ❤️ ❤️ ❤️ !<br/> 如果有问题，欢迎私信或者评论区！<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2beccec66613407f9096be5b3630c1e5.jpeg\"/><br/> 共勉：“你间歇性的努力和蒙混过日子，都是对之前努力的清零。”<br/> 以上图片出自一位重要的朋友，嘿嘿，祝愿一起学习的码友们：“前程似锦，万事胜意！”<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/a1397a96b231496891ed9550209c5de9.gif#pic_center\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}