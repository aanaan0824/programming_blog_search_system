{"blogid": "124748773", "writerAge": "码龄6年", "writerBlogNum": "14", "writerCollect": "10", "writerComment": "1", "writerFan": "4", "writerGrade": "2级", "writerIntegral": "157", "writerName": "鬼月行", "writerProfileAdress": "writer_image\\profile_124748773.jpg", "writerRankTotal": "111711", "writerRankWeekly": "696472", "writerThumb": "4", "writerVisitNum": "6884", "blog_read_count": "1310", "blog_time": "于 2022-05-13 14:31:27 发布", "blog_title": "C++中的友元函数", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>什么是友元函数？</h2>\n<p>友元函数（与成员函数相对）是定义在类外部，可以访问<strong>该类中</strong>的所有私有（private）成员和保护（protected）成员。指定函数为某个类的友元函数的方法是使用关键字friend。</p>\n<blockquote>\n<p>friend &lt;返回类型&gt; &lt;函数名&gt; (&lt;参数列表&gt;);</p>\n</blockquote>\n<p>友元可以是一个函数，该函数被称为友元函数；友元也可以是一个类，该类被称为友元类，在这种情况下，整个类及其所有成员都是友元。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getall</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Critter<span class=\"token operator\">&amp;</span> aCritter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//注意，访问对象必须是引用</span>\n</code></pre>\n<h2><a id=\"_11\"></a>为什么需要友元函数？</h2>\n<p>1、C++中引入友元函数，是为在该类中提供一个对外（除了他自己以外）访问的窗口；<br/> 2、两个类要共享数据的时候，友元函数可以减少系统开销，调高效率；<br/> 3、运算符重载的某些场合需要使用友元函数；<br/> 4、通过友元函数，虚继承和私有构造函数可以让一个类不被继承；</p>\n<h2><a id=\"_16\"></a>友元函数注意事项</h2>\n<p>1、类中通过使用关键字friend 来修饰友元函数，但该函数并不是类的成员函数，其声明可以放在类的私有部分，也可放在共有部分。友元函数的定义在类体外实现，不需要加类限定。<br/> 2、一个类中的成员函数可以是另外一个类的友元函数，而且一个函数可以是多个类友元函数。<br/> 3、友元函数可以访问类中的私有成员和其他数据，但是访问不可直接使用数据成员，需要通过对对象进行引用。<br/> 4、友元函数在调用上同一般函数一样，不必通过对对象进行引用。<br/> 5、注意：<strong>使用友元函数破坏类的封装（尽量使用成员函数，除非不得已才使用友元函数）。</strong></p>\n<h2><a id=\"_23\"></a>实例代码</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//已知两点的坐标，求两点间距离</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> xx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> yy<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        x <span class=\"token operator\">=</span> xx<span class=\"token punctuation\">;</span>\n        y <span class=\"token operator\">=</span> yy<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">GetXY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">double</span> <span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>Point <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> Point <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetXY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>Point <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> Point <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">double</span> length<span class=\"token punctuation\">;</span>\n    length <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//它可以引用类中的私有成员</span>\n    <span class=\"token keyword\">return</span> length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Point <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p1<span class=\"token punctuation\">.</span><span class=\"token function\">GetXY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//成员函数的调用方法，通过使用对象来调用</span>\n    p2<span class=\"token punctuation\">.</span><span class=\"token function\">GetXY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//友元函数的调用方法，同普通函数的调用一样，不要像成员函数那样调用</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"distance=\"</span> <span class=\"token operator\">&lt;&lt;</span> d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}