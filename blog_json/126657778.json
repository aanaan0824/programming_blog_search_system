{"blogid": "126657778", "writerAge": "码龄56天", "writerBlogNum": "119", "writerCollect": "206", "writerComment": "20", "writerFan": "103", "writerGrade": "4级", "writerIntegral": "1276", "writerName": "Mr_DC_IT", "writerProfileAdress": "writer_image\\profile_126657778.jpg", "writerRankTotal": "15794", "writerRankWeekly": "1121", "writerThumb": "37", "writerVisitNum": "23336", "blog_read_count": "491", "blog_time": "于 2022-09-02 11:01:12 发布", "blog_title": "【毕业设计】试卷自动批改系统 - opencv python 机器视觉", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#0__2\">0 简介</a></li><li><a href=\"#1__26\">1 项目背景</a></li><li><a href=\"#2__34\">2 项目目的</a></li><li><a href=\"#3__40\">3 系统设计</a></li><li><ul><li><a href=\"#31__42\">3.1 目标对象</a></li><li><a href=\"#32__49\">3.2 系统架构</a></li><li><a href=\"#33__59\">3.3 软件设计方案</a></li></ul>\n</li><li><a href=\"#4__68\">4 图像预处理</a></li><li><ul><li><a href=\"#41__73\">4.1 灰度二值化</a></li><li><a href=\"#42__120\">4.2 形态学处理</a></li><li><a href=\"#43__156\">4.3 算式提取</a></li><li><a href=\"#44__173\">4.4 倾斜校正</a></li><li><a href=\"#45__180\">4.5 字符分割</a></li></ul>\n</li><li><a href=\"#5__187\">5 字符识别</a></li><li><ul><li><a href=\"#51__192\">5.1 支持向量机原理</a></li><li><a href=\"#52_SVM_203\">5.2 基于SVM的字符识别</a></li><li><a href=\"#53_SVM_218\">5.3 SVM算法实现</a></li></ul>\n</li><li><a href=\"#6__549\">6 算法测试</a></li><li><a href=\"#7__565\">7 系统实现</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"0__2\"></a>0 简介</h1>\n<p>🔥 Hi，大家好，这里是丹成学长的毕设系列文章！</p>\n<p>🔥 对毕设有任何疑问都可以问学长哦!</p>\n<p>这两年开始，各个学校对毕设的要求越来越高，难度也越来越大… 毕业设计耗费时间，耗费精力，甚至有些题目即使是专业的老师或者硕士生也需要很长时间，所以一旦发现问题，一定要提前准备，避免到后面措手不及，草草了事。</p>\n<p>为了大家能够顺利以及最少的精力通过毕设，学长分享优质毕业设计项目，今天要分享的新项目是</p>\n<p>🚩 <strong>基于机器视觉的试卷批改系统</strong></p>\n<p>🥇学长这里给一个题目综合评分(每项满分5分)</p>\n<ul><li>难度系数：4分</li><li>工作量：4分</li><li>创新点：3分</li></ul>\n<p>🧿 <strong>选题指导, 项目分享：</strong></p>\n<p><a href=\"https://blog.csdn.net/Mr_DC_IT/article/details/126460477\">https://blog.csdn.net/Mr_DC_IT/article/details/126460477</a></p>\n<h1><a id=\"1__26\"></a>1 项目背景</h1>\n<p>机器视觉的发展对存在的作业批改问题， 提供了有效的解决方案。 通过基于机器视觉的作业批改系统可以对老师的教学工作进行辅助，改变传统的批改作业方式， 帮助老师减轻教学压力和工作负担， 老师可以快速完成批改过程，及时反馈给学生。 家长同样需要从繁重的重复性检查作业工作中解脱出来， 将更多的精力放在关注学生的学习情况和发现学习问题上。 学生可以通过自我批改作业中发现问题、加深理解， 培养自主学习意识， 提高分析问题和解决问题的能力。 因此， 自动批改作业系统在教育领域的应用表现出了无可比拟的教育价值和发展前景。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5bba9257203148bc8b780c1f8560ef16.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\caf1e4546c1f46f89fbe916f4545871d.png\"/></p>\n<h1><a id=\"2__34\"></a>2 项目目的</h1>\n<p>在教育领域中人工智能应用愈加广泛， 作业在教学过程中起到重要的作用，当前作业批改存在着重复劳动、 效率低下等诸多问题， 这种传统的批改作业方式占据了老师宝贵的时间。 本文设计一种作业批改视觉系统， 将人工智能应用到教育领域中， 改变老师传统的批改作业方式， 实现自动批改数学算式作业的任务。</p>\n<p>学长设计了一个系统系统，可以协助老师和家长完成繁重和重复的作业批改和检查工作， 提高工作效率。</p>\n<h1><a id=\"3__40\"></a>3 系统设计</h1>\n<h2><a id=\"31__42\"></a>3.1 目标对象</h2>\n<p>学长这里以数学作业试卷识别为目标。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\542d22544e714843abe4b8e95e6e1c9b.png\"/></p>\n<p>数学作业图像中一列包含多个算式， 字符主要包括印刷体的算式题目和手写体答案组成， 如上图 所示为一张数学算式作业图像。 本课题的难点在于如何有效的去除光线等外部干扰因素， 准确的提取到作业图像中的单个算式信息；选取有效的字符识别算法， 针对印刷体字符和手写体字符设计混合字符分类器，进行有效、 快速的识别； 选取适合的嵌入式设备， 进行软件与硬件的系统集成，实现视觉系统的基本功能， 完成稳定性的批改过程。</p>\n<h2><a id=\"32__49\"></a>3.2 系统架构</h2>\n<p>通过对视觉系统的研究以及完成作业批改解决方案的设计目标， 采取 PC 平台与嵌入式平台相结合的设计方案。 针对 PC 平台进行软件设计与算法优化， 完成系统的功能要求后， 将程序移植到嵌入式系统中， 在嵌入式设备实现系统的便捷化应用。 对于设计的系统采取多平台测试分析， 保证系统在 PC 平台准确高效的运行， 同时保证嵌入式系统中表现出稳定的性能。 系统的总体结构框图如下。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\aba4795a9b9c4a3381c69f514d36e184.png\"/></p>\n<p>首先按照系统功能需求进行分析， 确定要完成的设计任务和目标， 并对系统的功能和性能分析做出设计要求。 其次根据系统的功能划分， 选取基于 PC 平台的软件设计方案完成软件编程， 对系统实现的功能进行验证， 测试其功能和性能是否符合设计要求。 选取视觉系统的嵌入式开发平台， 进行硬件模块设计和开发环境及软件平台的搭建， 将系统软硬件集成在一起进行调试进行， 对系统存在的问题做出改进和优化。</p>\n<p>最后通过系统测试， 分别对系统的功能和性能进行测试验证， 是否满足设计的要求。 最终构建一款多平台应用， 基于机器视觉的自动作业批改视觉系统。</p>\n<h2><a id=\"33__59\"></a>3.3 软件设计方案</h2>\n<p>该系统基于机器视觉的图像处理和字符识别技术， 整个系统的核心是软件设计部分。 能否对作业有效和快速的批改， 很大程度上取决于软件设计部分图像处理的效果和字符识别的准确率。 软件设计主要完成系统相关的功能操作，设计流程可分为图 中的模块组成。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4645ac6393894abfb08dae0f482edf73.png\"/></p>\n<p>图像获取是将摄像头等设备获取的作业图像信息转化为数字图像信息； 预处理是对图像进行二值化转换， 去除多余噪声， 进行每一组算式提取， 分割获得单个清晰字符轮廓的过程； 特征提取是对预处理后的字符图像， 进行字符特征提取， 将提取好的特征量输入到分类器， 为字符识别做准备； 字符识别是系统的核心， 对字符分类器进行设计， 通过分析训练样本的特征， 将待预测的样本进行分类， 对字符完成准确识别； 结果输出是通过公式计算器计算印刷体算式结果与手写结果进行对比， 判断算式作业是否作答正确完成反馈的程。</p>\n<h1><a id=\"4__68\"></a>4 图像预处理</h1>\n<p>试卷字符识别过程中， 通过摄像头采集到的纸张作业图像信息由于受到光线产生的噪声、 书写的污点等干扰因素， 影响字符图像的提取效果。 为了得到完整的字符区域特征， 同时去除无关信息的干扰， 需要对图像进行预处理操作。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ea239f8621b74971ac9a8f7b27100120.png\"/></p>\n<h2><a id=\"41__73\"></a>4.1 灰度二值化</h2>\n<p>灰度二值化是将图像先进行灰度处理， 再进行二值化处理。 经过灰度二值化处理的图像降低了像素的运算量， 同时突出图像中算式的特征。 灰度化是将采取到的彩色图像进行灰度值转换， 灰度化后的图像去除了彩色信息， 只保留了算式字符与背景之间的亮度信息， 图像中每个像素点都是介于 0 至 255 灰度值中的一种。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\bf86cf0efe1a44c38dec24cdf671cd28.png\"/></p>\n<p><strong>关键代码</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#3、将 RGB 转为灰度图</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">rgb2gray</span><span class=\"token punctuation\">(</span>rgb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>rgb<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.299</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.587</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.114</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\ngray <span class=\"token operator\">=</span> rgb2gray<span class=\"token punctuation\">(</span>lena<span class=\"token punctuation\">)</span>    \n<span class=\"token comment\"># 也可以用 plt.imshow(gray, cmap = plt.get_cmap('gray'))</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>gray<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span><span class=\"token string\">'Greys_r'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">from</span> scipy <span class=\"token keyword\">import</span> misc\nlena_new_sz <span class=\"token operator\">=</span> misc<span class=\"token punctuation\">.</span>imresize<span class=\"token punctuation\">(</span>lena<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 第二个参数如果是整数，则为百分比，如果是tuple，则为输出图像的尺寸</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>lena_new_sz<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n附上imresize的用法\n功能：改变图像的大小。\n用法：\nB <span class=\"token operator\">=</span> imresize<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span>\nB <span class=\"token operator\">=</span> imresize<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">)</span>\nB <span class=\"token operator\">=</span> imresize<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>mrows ncols<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">)</span>\nB <span class=\"token operator\">=</span> imresize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span>\nB <span class=\"token operator\">=</span> imresize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">)</span>\n\nimrersize函数使用由参数method指定的插值运算来改变图像的大小。\nmethod的几种可选值：\n<span class=\"token string\">'nearest'</span>（默认值）最近邻插值\n<span class=\"token string\">'bilinear'</span>双线性插值\n<span class=\"token string\">'bicubic'</span>双三次插值\nB <span class=\"token operator\">=</span> imresize<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span>表示把图像A放大m倍\nB <span class=\"token operator\">=</span> imresize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">)</span>中的h可以是任意一个FIR滤波器（h通常由函数ftrans2、fwind1、fwind2、或fsamp2等生成的二维FIR滤波器）。\n\n</code></pre>\n<h2><a id=\"42__120\"></a>4.2 形态学处理</h2>\n<p>形态学处理是通过一定形态的结构元素， 对图像产生基于形状的操作 。它可以在保持图像基本形状的基础上简化数据， 去除多余结构。 形态学运算主要包括开运算和闭运算， 这两个操作包含了膨胀和腐蚀。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7559512e28e94497a46b0f22be85998c.png\"/></p>\n<p>算式图像经过形态学处理后， 实验效果如上图所示。 在图中可以看出左侧的算式图像经过形态学处理之后， 其断裂的乘号字符在右侧的算式图像中形成了连通区域。 形态处理后字符整体趋于完整， 边界变的平滑。</p>\n<p>在手写字符识别的过程中， 由于手写字符的字迹大小、 粗细程度存在的随意性很大， 在特征提取的过程中， 相同字符的冗余度导致特征向量差异很大 。</p>\n<p>因此对获取字符图像要进行适当的细化处理， 有利于特征提取的准确性。 图像细化指将二值图像进行骨架化操作的运算， 细化操作过程就是剥离字符图像上边缘轮廓的点， 细化操作要求字符骨架保持原有的笔画特征， 不能造成笔划断开， 同时具有连续性， 字符图像应尽量保留原始的结构特征。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d1939142413e484d9057cd1014ade835.png\"/></p>\n<p><strong>关键代码</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> cv2 <span class=\"token keyword\">as</span> cv\n\nimg <span class=\"token operator\">=</span> cv<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">r\"C:\\Users\\Administrator\\Desktop\\chinese.png\"</span><span class=\"token punctuation\">)</span>\nimg_cvt <span class=\"token operator\">=</span> cv<span class=\"token punctuation\">.</span>cvtColor<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>cv<span class=\"token punctuation\">.</span>COLOR_BGR2GRAY<span class=\"token punctuation\">)</span>\nret<span class=\"token punctuation\">,</span>img_thr <span class=\"token operator\">=</span> cv<span class=\"token punctuation\">.</span>threshold<span class=\"token punctuation\">(</span>img_cvt<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span>cv<span class=\"token punctuation\">.</span>THRESH_BINARY<span class=\"token punctuation\">)</span>\nkernel <span class=\"token operator\">=</span> cv<span class=\"token punctuation\">.</span>getStructuringElement<span class=\"token punctuation\">(</span>cv<span class=\"token punctuation\">.</span>MORPH_RECT<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#由于是1*30的矩阵，字体会被横向空隙的白色腐蚀掉，而下划线横向都是黑色，不会腐蚀</span>\ndst <span class=\"token operator\">=</span> cv<span class=\"token punctuation\">.</span>dilate<span class=\"token punctuation\">(</span>img_thr<span class=\"token punctuation\">,</span>kernel<span class=\"token punctuation\">,</span>iterations<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#由于是白底黑字，所有进行膨胀操作来去除黑色字体</span>\ncv<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">\"img_thr\"</span><span class=\"token punctuation\">,</span>img_thr<span class=\"token punctuation\">)</span>\ncv<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">\"dst\"</span><span class=\"token punctuation\">,</span>dst<span class=\"token punctuation\">)</span>\ncv<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\ncv<span class=\"token punctuation\">.</span>destroyAllWindows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"43__156\"></a>4.3 算式提取</h2>\n<p>算式提取的主要任务是从纸张中找到其中一组算式的字符区域， 并将算式从所在的区域中提取出来。 经过算式提取操作， 可以针对每一组算式进行批改，同时也便于下一步的字符分割， 算式提取准确性对作业批改效果有直接的影响。二值化处理后的算式图像中算式的灰度值为 255， 背景的灰度值为 0。</p>\n<p>采取基于投影的方法， 进行水平和垂直方向的投影对算式进行提取 ， 由于字符图像和背景图像对比度较大， 背景几乎不存在噪音干扰， 因此投影分割可以取得较好的效果。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\60545170d64b4a9094f82d1abb86684c.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\491497ea59b44b858f1ea8eb7c54b034.png\"/></p>\n<p>对图像进行列扫描， 得到垂直方向投影图， 投影后字符间隔的白色像素点的个数为 0， 在字符区域处形成波峰。 此时根据多个连续的波峰图像， 记录开始和结束的位置， 就可求得算式的左右边界， 进行分割得到仅包含一组算式区域的图像。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\44a9e83b8b2a4fa38166684829202843.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\d05e622df9e84d3f89e2ebd4059b0596.png\"/></p>\n<h2><a id=\"44__173\"></a>4.4 倾斜校正</h2>\n<p>在图像获取的过程中， 由于摄像头拍摄角度和作业图像有时会产生一个倾斜角度， 此时图像会发生垂直倾斜， 如果不对算式图像进行倾斜校正处理， 可能会无法正确识别出字符。 因此算式提取后要对算式图像进行倾斜校正， 采用基于 Hough 变换的方法， 其原理为图像中的直线和曲线经过变换映射到参数空间上的一个点， 通过累加的峰值检验图像中的直线和曲线。 Hough 变换的实质是将图像中一定形状元素的点进行聚类， 通过解析式将参数空间对应的点联系起来。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\dd4b0eb6816b42449a2503a2c48af7f3.png\"/></p>\n<h2><a id=\"45__180\"></a>4.5 字符分割</h2>\n<p>字符分割指是将一组算式中的多个字符图像根据字符之间的空隙， 分割成多张只包含单个字符的图像， 字符分割需要保证对每个字符进行完整的提取。作业字符图像是一连串的数字算式字符， 由于算式中包含除号和等号不连通的字符图像， 因此不便采取投影法对字符进行分割。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\15738a82330c487f97c321bf2b842100.png\"/></p>\n<h1><a id=\"5__187\"></a>5 字符识别</h1>\n<p>支持向量机是一种新的解决分类问题的机器学习方法， 基于统计学习理论，采用结构风险最小原则。 其原理是在训练样本集通过少量支持向量， 自动构造分类函数建立一个最大间隔分类平面， 以此解决分类问题。 支持向量机不需要构建网络结构设计， 通过非线性变换解决高维空间中样本识别问题。 支持向量机越来越多的应用到了字符识别中， 表现出较好的字符识别效果。</p>\n<h2><a id=\"51__192\"></a>5.1 支持向量机原理</h2>\n<p>支持向量机(Support Vector Machine, SVM)， 是 Vapnik [35] 研究小组在统计学习理论基础上， 于 1995 年针对分类问题提出的最佳分类准则。 SVM 是一种基于统计学习理论的模式识别方法， 主要应用于解决分类和回归问题。 传统的统计学理论基于样本无穷大的统计性质， SVM 专门针对有限样本， 算法转化成一个二次型寻优问题， 得到的是全局最优解。 它具有解的唯一性， 经过非线性变化转化到高维特征空间， 其算法与样本的复杂度无关， 不依赖输入空间的维数，得到的最优解优于传统的学习方法 。 因此迅速的发展起来， 在手写字符识别领域取得了巨大的成功。</p>\n<p>对于最优间隔平面分类问题， 根据样本分布的情况分为线性可分与非线性可分进行讨论。 在线性可分的情况下， 其目标就是寻找最优间隔超平面， 将样本准确的分开。 根据少量支持向量确定平面， 保证样本数据与超平面距离最大，如图所示。</p>\n<p><strong>最优分类面示意图</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\557c19ba3aca4aba95c5e0c2fda57aa2.png\"/></p>\n<h2><a id=\"52_SVM_203\"></a>5.2 基于SVM的字符识别</h2>\n<p>数学算式作业中包含印刷体字符和手写体字符， 将这些字符全部放在一个分类器中会导致分类过于复杂， 类别过多会使识别速率降低。 因此按照字符的分布位置将分类器分为两种类型： 印刷体字符分类器和手写字符分类器。 采取一对一分类的方法对印刷体字符和手写体字符分别设计了二分类器， 对于算式中同时包含印刷体和手写体数字字符， 选用相应的分类器， 会提高识别的准确性和速率。 如图所示， 根据字符在算式中的位置， 选用对应的分类器。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\2120bd61ee3d411ba5ca5b185bb0ed74.png\"/></p>\n<p>每个分类器只能将一个字符与其他字符分开， 对于手写字符而言， 其中一类字符样本的特征向量作为正集（标签对应的值为+1）， 其余 9 个样本的特征向量做负集（标签对应的值为-1）。 按照这种形式依次划分， 将训练集依次进行训练， 可得到 10 个二分类器， 测试阶段将未知样本输入到这 10 个分类器进行分类判断， 决策结果取相应结果的最大值。 若输出的值为+1， 则对应相应类的字符。</p>\n<p>网格特征是字符识别中常用的特征提取方法之一， 体现了字符形状的整体分布。 其中粗网格特征提取的方法是将字符图像等分成多个网格区域， 进行特征提取。 首先将归一化的字符样本图像， 其中大小为 128<em>128， 等分成 16</em>16 个网格， 如下图所示。 统计每个网格中黑色像素点占整个网格图像的有效像素比例， 最后将特征值按照网格排列转换为向量形式。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\bff3e52637b8485e832ba5a893d1ff4b.png\"/></p>\n<h2><a id=\"53_SVM_218\"></a>5.3 SVM算法实现</h2>\n<pre><code class=\"prism language-python\">\n\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n \n\n<span class=\"token triple-quoted-string string\">'''\n类名称：dataStruct\n功能：用于存储一些需要保存或者初始化的数据\n作者：丹成学长，Q746876041\n'''</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">dataStruct</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>dataMatIn<span class=\"token punctuation\">,</span>labelMatIn<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>toler<span class=\"token punctuation\">,</span>eps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>dataMat <span class=\"token operator\">=</span> dataMatIn                        <span class=\"token comment\">#样本数据</span>\n        self<span class=\"token punctuation\">.</span>labelMat <span class=\"token operator\">=</span> labelMatIn                      <span class=\"token comment\">#样本标签</span>\n        self<span class=\"token punctuation\">.</span>C <span class=\"token operator\">=</span> C                                      <span class=\"token comment\">#参数C</span>\n        self<span class=\"token punctuation\">.</span>toler <span class=\"token operator\">=</span> toler                              <span class=\"token comment\">#容错率</span>\n        self<span class=\"token punctuation\">.</span>eps <span class=\"token operator\">=</span> eps                                  <span class=\"token comment\">#乘子更新最小比率</span>\n        self<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>dataMatIn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>                 <span class=\"token comment\">#样本数</span>\n        self<span class=\"token punctuation\">.</span>alphas <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>mat<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">#拉格朗日乘子alphas，shape(m,1),初始化全为0</span>\n        self<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span>                                      <span class=\"token comment\">#参数b，初始化为0</span>\n        self<span class=\"token punctuation\">.</span>eCache <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>mat<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">#误差缓存，</span>\n\n        \n<span class=\"token triple-quoted-string string\">'''\n函数名称：loadData\n函数功能：读取文本文件中的数据，以样本数据和标签的形式返回\n输入参数：filename       文本文件名\n返回参数：dataMat        样本数据\n         labelMat       样本标签\n'''</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    dataMat <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>labelMat <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    fr <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> fr<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                 <span class=\"token comment\">#逐行读取</span>\n        lineArr <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">#滤除行首行尾空格，以\\t作为分隔符，对这行进行分解</span>\n        num <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>lineArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>     \n        dataMat<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span>lineArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#这一行的除最后一个被添加为数据</span>\n        labelMat<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>lineArr<span class=\"token punctuation\">[</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#这一行的最后一个数据被添加为标签</span>\n    dataMat <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>mat<span class=\"token punctuation\">(</span>dataMat<span class=\"token punctuation\">)</span>\n    labelMat <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>mat<span class=\"token punctuation\">(</span>labelMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>T\n    <span class=\"token keyword\">return</span> dataMat<span class=\"token punctuation\">,</span>labelMat\n\n    \n\n\n<span class=\"token triple-quoted-string string\">'''\n函数名称：takeStep\n函数功能：给定alpha1和alpha2，执行alpha1和alpha2的更新,执行b的更新\n输入参数：i1            alpha1的标号\n          i2            alpha2的标号\n          dataMat       样本数据\n          labelMat      样本标签\n返回参数：如果i1==i2 or L==H or eta&lt;=0 or alpha更新前后相差太小，返回0\n         正常执行，返回1\n'''</span>   \n<span class=\"token keyword\">def</span> <span class=\"token function\">takeStep</span><span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">,</span>i2<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#如果选择了两个相同的乘子，不满足线性等式约束条件，因此不做更新</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i1 <span class=\"token operator\">==</span> i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i1 == i2\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token comment\">#从数据结构中取得需要用到的数据</span>\n    alpha1 <span class=\"token operator\">=</span> dS<span class=\"token punctuation\">.</span>alphas<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    alpha2 <span class=\"token operator\">=</span> dS<span class=\"token punctuation\">.</span>alphas<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    y1 <span class=\"token operator\">=</span> dS<span class=\"token punctuation\">.</span>labelMat<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">]</span>\n    y2 <span class=\"token operator\">=</span> dS<span class=\"token punctuation\">.</span>labelMat<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">]</span>\n    \n    <span class=\"token comment\">#如果E1以前被计算过，就直接从数据结构的cache中读取它，这样节省计算量,#如果没有历史记录，就计算E1</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>eCache<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        E1 <span class=\"token operator\">=</span> dS<span class=\"token punctuation\">.</span>eCache<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        u1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>alphas<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>labelMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>T <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> dS<span class=\"token punctuation\">.</span>b     <span class=\"token comment\">#计算SVM的输出值u1</span>\n        E1 <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>u1 <span class=\"token operator\">-</span> y1<span class=\"token punctuation\">)</span>    <span class=\"token comment\">#误差E1</span>\n        <span class=\"token comment\">#dS.eCache[i1] = [1,E1] #存到cache中</span>\n\n    <span class=\"token comment\">#如果E2以前被计算过，就直接从数据结构的cache中读取它，这样节省计算量,#如果没有历史记录，就计算E2</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>eCache<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        E2 <span class=\"token operator\">=</span> dS<span class=\"token punctuation\">.</span>eCache<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        u2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>alphas<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>labelMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>T <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> dS<span class=\"token punctuation\">.</span>b     <span class=\"token comment\">#计算SVM的输出值u2</span>\n        E2 <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>u2 <span class=\"token operator\">-</span> y2<span class=\"token punctuation\">)</span>    <span class=\"token comment\">#误差E2</span>\n        <span class=\"token comment\">#dS.eCache[i2] = [1,E2] #存到cache中        </span>\n\n    s <span class=\"token operator\">=</span> y1<span class=\"token operator\">*</span>y2\n    \n    <span class=\"token comment\">#计算alpha2的上界H和下界L</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>       <span class=\"token comment\">#如果y1==y2</span>\n        L <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>alpha1<span class=\"token operator\">+</span>alpha2<span class=\"token operator\">-</span>dS<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">)</span>\n        H <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">,</span>alpha1<span class=\"token operator\">+</span>alpha2<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\">#如果y1!=y2</span>\n        L <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>alpha2<span class=\"token operator\">-</span>alpha1<span class=\"token punctuation\">)</span>\n        H <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>C<span class=\"token operator\">+</span>alpha2<span class=\"token operator\">-</span>alpha1<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">==</span>H<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"L==H\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        \n    <span class=\"token comment\">#计算学习率eta</span>\n    k11 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>\n    k12 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>\n    k22 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>\n    eta <span class=\"token operator\">=</span> k11 <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>k12 <span class=\"token operator\">+</span>k22\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>eta <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#正常情况下eta是大于0的，此时计算新的alpha2,新的alpha2标记为a2</span>\n        a2 <span class=\"token operator\">=</span> alpha2 <span class=\"token operator\">+</span> y2<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>E1<span class=\"token operator\">-</span>E2<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>eta<span class=\"token comment\">#这个公式的推导，曾经花费了我很多精力，现在写出来却是如此简洁，数学真是个好东西</span>\n        <span class=\"token comment\">#对a2进行上下界裁剪</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a2 <span class=\"token operator\">&lt;</span> L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            a2 <span class=\"token operator\">=</span> L\n        <span class=\"token keyword\">elif</span><span class=\"token punctuation\">(</span>a2 <span class=\"token operator\">&gt;</span> H<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            a2 <span class=\"token operator\">=</span> H\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#非正常情况下，也有可能出现eta《=0的情况</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eta&lt;=0\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        <span class=\"token triple-quoted-string string\">'''\n        Lobj = \n        Hobj = \n        if(Lobj &lt; Hobj-eps):\n            a2 = L\n        elif(Lobj &gt; Hobj+eps):\n            a2 = H\n        else:\n            a2 = alpha2\n        '''</span>\n        \n    <span class=\"token comment\">#如果更新量太小，就不值浪费算力继续算a1和b，不值得对这三者进行更新</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>a2<span class=\"token operator\">-</span>alpha2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> dS<span class=\"token punctuation\">.</span>eps<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a2<span class=\"token operator\">+</span>alpha2<span class=\"token operator\">+</span>dS<span class=\"token punctuation\">.</span>eps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"so small update on alpha2!\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        \n    <span class=\"token comment\">#计算新的alpha1，标记为a1</span>\n    a1 <span class=\"token operator\">=</span> alpha1 <span class=\"token operator\">+</span> s<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>alpha2 <span class=\"token operator\">-</span> a2<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">#计算b1和b2,并且更新b</span>\n    b1 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E1 <span class=\"token operator\">+</span> y1<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>alpha1 <span class=\"token operator\">-</span> a1<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> y2<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>alpha2 <span class=\"token operator\">-</span> a2<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> dS<span class=\"token punctuation\">.</span>b\n    b2 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E2 <span class=\"token operator\">+</span> y1<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>alpha1 <span class=\"token operator\">-</span> a1<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> y2<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>alpha2 <span class=\"token operator\">-</span> a2<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> dS<span class=\"token punctuation\">.</span>b\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a1<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span> <span class=\"token keyword\">and</span> a1<span class=\"token operator\">&lt;</span>dS<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        dS<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b1\n    <span class=\"token keyword\">elif</span><span class=\"token punctuation\">(</span>a2<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span> <span class=\"token keyword\">and</span> a2<span class=\"token operator\">&lt;</span>dS<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        dS<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b2\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        dS<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b1 <span class=\"token operator\">+</span> b2<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n\n    <span class=\"token comment\">#用a1和a2更新alpha1和alpha2</span>\n    dS<span class=\"token punctuation\">.</span>alphas<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a1\n    dS<span class=\"token punctuation\">.</span>alphas<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a2\n    \n    <span class=\"token comment\">#由于本次alpha1、alpha2和b的更新，需要重新计算Ecache，注意Ecache只存储那些非零的alpha对应的误差</span>\n    validAlphasList <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>nonzero<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>alphas<span class=\"token punctuation\">.</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>   <span class=\"token comment\">#所有的非零的alpha标号列表</span>\n    dS<span class=\"token punctuation\">.</span>eCache <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>mat<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#要把Ecache先清空</span>\n    <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> validAlphasList<span class=\"token punctuation\">:</span><span class=\"token comment\">#遍历所有的非零alpha</span>\n        uk <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>alphas<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>labelMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> dS<span class=\"token punctuation\">.</span>b\n        yk <span class=\"token operator\">=</span> dS<span class=\"token punctuation\">.</span>labelMat<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        Ek <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>uk<span class=\"token operator\">-</span>yk<span class=\"token punctuation\">)</span>\n        dS<span class=\"token punctuation\">.</span>eCache<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>Ek<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"updated\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n\n    \n<span class=\"token triple-quoted-string string\">'''\n函数名称：examineExample\n函数功能：给定alpha2，如果alpha2不满足KKT条件，则再找一个alpha1,对这两个乘子进行一次takeStep\n输入参数：i2            alpha的标号\n          dataMat       样本数据\n          labelMat      样本标签\n返回参数：如果成功对一对乘子alpha1和alpha2执行了一次takeStep，返回1;否则，返回0\n'''</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">examineExample</span><span class=\"token punctuation\">(</span>i2<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#从数据结构中取得需要用到的数据</span>\n    y2 <span class=\"token operator\">=</span> dS<span class=\"token punctuation\">.</span>labelMat<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    alpha2 <span class=\"token operator\">=</span> dS<span class=\"token punctuation\">.</span>alphas<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\">#如果E2以前被计算过，就直接从数据结构的cache中读取它，这样节省计算量,#如果没有历史记录，就计算E2</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>eCache<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        E2 <span class=\"token operator\">=</span> dS<span class=\"token punctuation\">.</span>eCache<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        u2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>alphas<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>labelMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>T <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> dS<span class=\"token punctuation\">.</span>b<span class=\"token comment\">#计算SVM的输出值u2</span>\n        E2 <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>u2 <span class=\"token operator\">-</span> y2<span class=\"token punctuation\">)</span><span class=\"token comment\">#误差E2</span>\n        <span class=\"token comment\">#dS.eCache[i2] = [1,E2]</span>\n\n    r2 <span class=\"token operator\">=</span> E2<span class=\"token operator\">*</span>y2\n    <span class=\"token comment\">#如果当前的alpha2在一定容忍误差内不满足KKT条件，则需要对其进行更新</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r2<span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span>dS<span class=\"token punctuation\">.</span>toler <span class=\"token keyword\">and</span> alpha2<span class=\"token operator\">&lt;</span>dS<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>r2<span class=\"token operator\">&gt;</span>dS<span class=\"token punctuation\">.</span>toler <span class=\"token keyword\">and</span> alpha2<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''\n        #随机选择的方法确定另一个乘子alpha1，多执行几次可可以收敛到很好的结果，就是效率比较低\n        i1 = random.randint(0, dS.m-1)\n        if(takeStep(i1,i2,dS)):\n            return 1\n        '''</span>\n        <span class=\"token comment\">#启发式的方法确定另一个乘子alpha1</span>\n        nonZeroAlphasList <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>nonzero<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>alphas<span class=\"token punctuation\">.</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#找到所有的非0的alpha</span>\n        nonCAlphasList <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>nonzero<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>alphas<span class=\"token operator\">-</span>dS<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#找到所有的非C的alpha</span>\n        nonBoundAlphasList <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>nonZeroAlphasList<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>nonCAlphasList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#所有非边界（既不=0,也不=C）的alpha</span>\n        \n        <span class=\"token comment\">#如果非边界的alpha数量至少两个，则在所有的非边界alpha上找到能够使\\E1-E2\\最大的那个E1,对这一对乘子进行更新</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nonBoundAlphasList<span class=\"token punctuation\">)</span>  <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            maxE <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            maxEindex <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> nonBoundAlphasList<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>eCache<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>E2<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span>maxE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    maxE <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>eCache<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>E2<span class=\"token punctuation\">)</span>\n                    maxEindex <span class=\"token operator\">=</span> k\n            i1 <span class=\"token operator\">=</span> maxEindex\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>takeStep<span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">,</span>i2<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n                \n            <span class=\"token comment\">#如果上面找到的那个i1没能使alpha和b得到有效更新，则从随机开始处遍历整个非边界alpha作为i1,逐个对每一对乘子尝试进行更新</span>\n            randomStart <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nonBoundAlphasList<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> i1 <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>randomStart<span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nonBoundAlphasList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i1 <span class=\"token operator\">==</span> i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">continue</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>takeStep<span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">,</span>i2<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">for</span> i1 <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>randomStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i1 <span class=\"token operator\">==</span> i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">continue</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>takeStep<span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">,</span>i2<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n\n                    \n        <span class=\"token comment\">#如果上面的更新仍然没有return 1跳出去或者非边界alpha数量少于两个，这种情况只好从随机开始的位置开始遍历整个可能的i1,对每一对尝试更新 </span>\n        randomStart <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i1 <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>randomStart<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i1 <span class=\"token operator\">==</span> i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">continue</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>takeStep<span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">,</span>i2<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">for</span> i1 <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>randomStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i1 <span class=\"token operator\">==</span> i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">continue</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>takeStep<span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">,</span>i2<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>   \n        <span class=\"token triple-quoted-string string\">'''\n        i1 = random.randint(0,dS.m-1)\n        if(takeStep(i1,i2,dS)):\n            return 1 \n        '''</span>\n    <span class=\"token comment\">#如果实在还更新不了，就回去重新选择一个alpha2吧，当前的alpha2肯定是有毒    </span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    \n\n<span class=\"token triple-quoted-string string\">'''\n函数名称：SVM_with_SMO\n函数功能：用SMO写的SVM的入口函数，里面采用了第一个启发式确定alpha2,即在全局遍历和非边界遍历之间来回repeat，直到不再有任何更新\n输入参数：dS            dataStruct类的数据\n返回参数：None\n'''</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">SVM_with_SMO</span><span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#初始化控制变量，确保第一次要全局遍历</span>\n    numChanged <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    examineAll <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\">#显然，如果全局遍历了一次，并且没有任何更新，此时examineAll和numChanged都会被置零，算法终止</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>numChanged <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> examineAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        numChanged <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>examineAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                numChanged <span class=\"token operator\">+=</span> examineExample<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>alphas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> dS<span class=\"token punctuation\">.</span>alphas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> dS<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">continue</span>\n                numChanged <span class=\"token operator\">+=</span> examineExample<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>examineAll <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            examineAll <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">elif</span><span class=\"token punctuation\">(</span>numChanged <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            examineAll <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token triple-quoted-string string\">'''\n函数名称：cal_W\n函数功能：根据alpha和y来计算W\n输入参数：dS         dataStruct类的数据\n返回参数：W          超平名的法向量W            \n作者：丹成学长，Q746876041\n'''</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">cal_W</span><span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    W <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">,</span>np<span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>labelMat<span class=\"token punctuation\">,</span>dS<span class=\"token punctuation\">.</span>alphas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> W\n\n<span class=\"token triple-quoted-string string\">'''\n函数名称：showClassifer\n函数功能：画出原始数据点、超平面，并标出支持向量\n输入参数：dS         dataStruct类的数据\n          W          超平名的法向量W    \n返回参数：None\n作者：机器学习实践SVM chapter 6\n'''</span>    \n<span class=\"token keyword\">def</span> <span class=\"token function\">showClassifer</span><span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\">#绘制样本点</span>\n    dataMat <span class=\"token operator\">=</span> dS<span class=\"token punctuation\">.</span>dataMat<span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    data_plus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>                                  <span class=\"token comment\">#正样本</span>\n    data_minus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>                                 <span class=\"token comment\">#负样本</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>dataMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> dS<span class=\"token punctuation\">.</span>labelMat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            data_plus<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>dataMat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            data_minus<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>dataMat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    data_plus_np <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>data_plus<span class=\"token punctuation\">)</span>              <span class=\"token comment\">#转换为numpy矩阵</span>\n    data_minus_np <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>data_minus<span class=\"token punctuation\">)</span>            <span class=\"token comment\">#转换为numpy矩阵</span>\n    plt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>data_plus_np<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>data_plus_np<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">#正样本散点图</span>\n    plt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>data_minus_np<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>data_minus_np<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#负样本散点图</span>\n    <span class=\"token comment\">#绘制直线</span>\n    x1 <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dataMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    x2 <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>dataMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    a1<span class=\"token punctuation\">,</span> a2 <span class=\"token operator\">=</span> w\n    b <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span>\n    a1 <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    a2 <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    y1<span class=\"token punctuation\">,</span> y2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>b<span class=\"token operator\">-</span> a1<span class=\"token operator\">*</span>x1<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>a2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>b <span class=\"token operator\">-</span> a1<span class=\"token operator\">*</span>x2<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>a2\n    plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>y1<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#找出支持向量点</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> alpha <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">.</span>alphas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>alpha<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0.000000001</span><span class=\"token punctuation\">:</span>\n            x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> dataMat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            plt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">=</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span> linewidth<span class=\"token operator\">=</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> edgecolor<span class=\"token operator\">=</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"happy 520 day, 2018.06.13\"</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">\"svm.png\"</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          \n    \n    \n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    dataMat<span class=\"token punctuation\">,</span>labelMat <span class=\"token operator\">=</span> loadData<span class=\"token punctuation\">(</span><span class=\"token string\">\"testSet.txt\"</span><span class=\"token punctuation\">)</span>\n    dS <span class=\"token operator\">=</span> dataStruct<span class=\"token punctuation\">(</span>dataMat<span class=\"token punctuation\">,</span> labelMat<span class=\"token punctuation\">,</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#初始化数据结构 dataMatIn, labelMatIn,C,toler,eps</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#只需要执行一次，效果就非常不错</span>\n        SVM_with_SMO<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">)</span>\n    W <span class=\"token operator\">=</span> cal_W<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">)</span>\n    showClassifer<span class=\"token punctuation\">(</span>dS<span class=\"token punctuation\">,</span>W<span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h1><a id=\"6__549\"></a>6 算法测试</h1>\n<p><strong>输入图像</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\98f95b20152e42da893531106ef835a8.png\"/></p>\n<p><strong>预处理结果</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b58674c8b89c4fd3aa971b075d30b787.png\"/></p>\n<p><strong>识别结果</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4694946e73c14d338e523902257f97e7.png\"/></p>\n<h1><a id=\"7__565\"></a>7 系统实现</h1>\n<p>系统主要流程如下</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b003ea14f422464792a405698b78a18e.png\"/></p>\n<p>对在 PC 软件平台通过 MFC 界面中实现各模块操作， 系统界面如图所示。</p>\n<p>系统界面采用模块化设计， 按照界面分布分为图像显示模块、 按键功能模块、 图像预处理模块、 批改结果输出四个模块组成。</p>\n<p><strong>主要内容包括：</strong></p>\n<ul><li>显示获取作业图像的基本信息；</li><li>通过按键控制相应功能；</li><li>显示预处理后图像的效果；输出识别的字符信息和批改的结果。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\5dd120b5c59149ebb613bca17859741d.png\"/><br/> 图像显示模块， 通过打开摄像头按键， 将摄像头获取到的纸张作业图像实时信息传送到计算机中， 获取的图像显示在界面左侧窗口， 界面运行结果如图所示。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\595efc2f130241588047c3aecca6e733.png\"/></p>\n<p>按键功能模块， 通过算式提取按键， 对纸张中单个算式整体区域进行选框提取， 运行结果如图所示， 此时算式检测的结果在原图像上用矩形框标记，在界面右侧显示提取到的算式效果。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\287638954f5e4d9e804787d7b4d7df0a.png\"/></p>\n<p>图像处理模块， 通过检测识别按键完成字符分割和识别， 在界面右侧窗口显示预处理后的图像效果。 批改结果输出模块， 在界面下框中显示字符的识别结果以及手写的计算结果， 同时在右下角窗口显示解答正误， 输出得到的批改信息。 同时对整个过程运行的时间进行统计， 最后保存按键将错误的批改结果保存， 便于后期修改。 此时系统运行界面如图所示。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d9de72b34d454910a859e35ae6b63e2e.png\"/><br/> <br/></p>\n<p>🧿 <strong>选题指导, 项目分享：</strong></p>\n<p><a href=\"https://blog.csdn.net/Mr_DC_IT/article/details/126460477\">https://blog.csdn.net/Mr_DC_IT/article/details/126460477</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}