{"blogid": "126642730", "writerAge": "码龄2年", "writerBlogNum": "588", "writerCollect": "3089", "writerComment": "4278", "writerFan": "15675", "writerGrade": "7级", "writerIntegral": "14095", "writerName": "KJ.JK", "writerProfileAdress": "writer_image\\profile_126642730.jpg", "writerRankTotal": "743", "writerRankWeekly": "10", "writerThumb": "2831", "writerVisitNum": "493659", "blog_read_count": "470", "blog_time": "于 2022-09-06 22:18:44 发布", "blog_title": "LinkHashSet、Treeset的Comparable接口自然排序和Comparator比较器排序使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_2\">💨更多相关知识👇</a></li><li><ul><li><a href=\"#_LinkHashSet_42\">一、 LinkHashSet概述</a></li><li><ul><li><a href=\"#_55\">🌟代码演示</a></li></ul>\n</li><li><a href=\"#Treeset_100\">二、Treeset</a></li><li><ul><li><a href=\"#TreeSet_106\">🍂TreeSet的集合特点</a></li><li><ul><li><a href=\"#_132\">🌟代码演示</a></li></ul>\n</li><li><a href=\"#TreeSetComparable_173\">🍂TreeSet中的Comparable接口实现自然排序</a></li><li><ul><li><a href=\"#compareTo_213\">⚡compareTo方法排序原理</a></li><li><ul><li><a href=\"#_231\">🌟代码演示</a></li></ul>\n</li></ul>\n</li><li><a href=\"#TreeSetComparator_346\">🍂TreeSet中的Comparator比较器排序</a></li><li><ul><li><a href=\"#_385\">🌟代码演示</a></li></ul>\n</li><li><a href=\"#_473\">🍂综合案例</a></li><li><a href=\"#_593\">🍂两种比较方式总结</a></li></ul>\n</li><li><a href=\"#Set_651\">三、Set集合总结</a></li></ul>\n</li><li><a href=\"#KJJK_673\">作者：KJ.JK</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>💨更多相关知识👇</h1>\n<p><strong>💖<a href=\"https://sars2025.blog.csdn.net/article/details/126197853?spm=1001.2014.3001.5502\">Spring中的创建对象的三种方式、第三方资源配置管理详细描述及使用（XML版完结篇）</a></strong></p>\n<p><strong>💖<a href=\"https://sars2025.blog.csdn.net/article/details/126074954\">Spring中的bean的配置、作用范围、生命周期详细描述及使用（XML版上篇）</a></strong></p>\n<p><strong>💖<a href=\"https://sars2025.blog.csdn.net/article/details/126111088?spm=1001.2014.3001.5502\">Spring中的依赖注入、setter与构造器注入、自动装配与集合注入详细描述及使用（XML版中篇）</a></strong></p>\n<p><strong>💖<a href=\"https://sars2025.blog.csdn.net/article/details/125882818\">异常处理与解决方案详解上篇</a></strong></p>\n<p><strong>💖<a href=\"https://sars2025.blog.csdn.net/article/details/125882855\">异常处理与解决方案详解下篇</a></strong></p>\n<p><strong>💖<a href=\"https://sars2025.blog.csdn.net/article/details/125919963\">Math类与System类的常用方法使用</a></strong></p>\n<p><strong>💖<a href=\"https://sars2025.blog.csdn.net/article/details/125376882\">JavaEE中的静态方法定义、方法重载要求、return作用详解</a></strong></p>\n<p><strong>💖<a href=\"https://sars2025.blog.csdn.net/article/details/125833781\">List接口的常用方法，精华总结</a></strong></p>\n<p><strong>💖<a href=\"https://sars2025.blog.csdn.net/article/details/125375899\">JavaEE中的Stream流的常用方法</a></strong></p>\n<p><strong>💖<a href=\"https://sars2025.blog.csdn.net/article/details/125374965\">JavaEE中的Stream流知识点使用，精华总结，一文直接上手</a></strong></p>\n<hr/>\n<blockquote>\n<p>🌈 🌈 🌈 🌈 🌈 🌈 🌈 🌈 🌈 🌈 🌈 🌈 🌈<br/>  <br/> <strong>🍂个人博客首页：</strong> <a href=\"https://blog.csdn.net/m0_47384542?type=blog\">KJ.JK</a><br/>  <br/> <strong>欢迎大家点赞👍收藏💖评论💬关注🔒</strong><br/>  <br/> <strong>💖源码获取 | 💻学习交流 | 🤝商务合作 | 💨私信作者</strong><br/>  <br/> <strong>💨推荐一款实用的模拟面试、刷题练习算法的神器、适用于所有的程序猿👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_kjjk_java\">点击开始免费刷题，跟着博主走上巅峰💪</a></strong></p>\n</blockquote>\n<hr/>\n<h2><a id=\"_LinkHashSet_42\"></a>一、 LinkHashSet概述</h2>\n<hr/>\n<pre><code class=\"prism language-java\">     <span class=\"token operator\">*</span> <span class=\"token string\">\"LinkedHashSet\"</span> <span class=\"token string\">\"继承了HashSet\"</span>，底层在<span class=\"token string\">\"哈希表\"</span>的基础上，又维护了一个<span class=\"token string\">\"双向链表\"</span>\n     \n     <span class=\"token operator\">*</span> <span class=\"token class-name\">LinkedHashSet</span>通过双向链表实现了元素的存取有序性     <span class=\"token punctuation\">(</span>既可以去重<span class=\"token punctuation\">,</span>也可以保留原来的顺序<span class=\"token punctuation\">)</span>\n         \n<span class=\"token comment\">//底层是哈希表和双向链表                  </span>\n</code></pre>\n<hr/>\n<h3><a id=\"_55\"></a>🌟代码演示</h3>\n<pre><code class=\"prism language-java\">        <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> set<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token comment\">//既可以去重,也可以保留原来的位置</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//[张三, 李四, 王五, 赵六]</span>\n\n\n\n        <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> set2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        set2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//[11, 15, 22, 33]</span>\n\n</code></pre>\n<hr/>\n<p><img alt=\"请添加图片描述\" src=\"image\\1e8c8d2a3eb14a8f84831e6c6928b8e5.png\"/></p>\n<hr/>\n<h2><a id=\"Treeset_100\"></a>二、Treeset</h2>\n<hr/>\n<h3><a id=\"TreeSet_106\"></a>🍂TreeSet的集合特点</h3>\n<hr/>\n<pre><code class=\"prism language-java\">             <span class=\"token operator\">*</span> <span class=\"token class-name\">TreeSet</span>是<span class=\"token class-name\">Set</span>接口下的集合\n  \n             <span class=\"token operator\">*</span> 元素无索引，不重复\n  \n             <span class=\"token operator\">*</span> <span class=\"token class-name\">TreeSet</span>集合会自动对元素进行排序               <span class=\"token punctuation\">(</span>底层是红黑树<span class=\"token punctuation\">)</span>\n                 \n                   <span class=\"token operator\">*</span> <span class=\"token string\">\"数字和字符串\"</span>的时候会自动排序\n                 \n  \n          排序规则<span class=\"token operator\">:</span>\n                   <span class=\"token number\">1.</span>元素为<span class=\"token string\">\"数字\"</span>时，默认按照<span class=\"token string\">\"升序\"</span>排序。（从小到大）\n                       \n                   <span class=\"token number\">2.</span>元素为<span class=\"token string\">\"字符串\"</span>时，按照<span class=\"token string\">\"字符的编码值升序\"</span>排序\n                       \n                   <span class=\"token number\">3.</span>如果元素为<span class=\"token string\">\"自定义类型\"</span>，需要指定排序规则\n\n</code></pre>\n<hr/>\n<h4><a id=\"_132\"></a>🌟代码演示</h4>\n<pre><code class=\"prism language-java\">        <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> tree<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        tree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">55</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> a <span class=\"token operator\">:</span> tree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> tree2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Javase\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"python\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> tree2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<p><img alt=\"请添加图片描述\" src=\"image\\e922cd92339240beba87d83d19273c82.png\"/></p>\n<hr/>\n<h3><a id=\"TreeSetComparable_173\"></a>🍂TreeSet中的Comparable接口实现自然排序</h3>\n<hr/>\n<pre><code class=\"prism language-java\">                <span class=\"token class-name\">TreeSet</span>集合可以对实现<span class=\"token class-name\">Comparable</span>接口的元素 <span class=\"token string\">\"自动排序\"</span>\n                    \n<span class=\"token comment\">//已经存在的类里面的数字和字符串,会自动实现排序                    </span>\n<span class=\"token comment\">//如果是自定义类的需要自己实现接口                    </span>\n</code></pre>\n<hr/>\n<pre><code class=\"prism language-java\">  使用<span class=\"token class-name\">Comparable</span>进行自然排序的顺序<span class=\"token operator\">:</span>\n      \n                   <span class=\"token number\">1.</span>先<span class=\"token string\">\"实现Comparable接口\"</span>\n          \n                   <span class=\"token number\">2.</span>给对应的类型\n                       \n                   <span class=\"token number\">3.</span>重写抽象方法compareTO  \n</code></pre>\n<hr/>\n<p><img alt=\"请添加图片描述\" src=\"image\\f9c8a4a841fe49aea60f75267e986485.png\"/></p>\n<hr/>\n<h4><a id=\"compareTo_213\"></a>⚡compareTo方法排序原理</h4>\n<hr/>\n<pre><code class=\"prism language-java\">      <span class=\"token operator\">*</span> 如果返回值为负数，认为当前存入的元素是较小值，存左边\n      \n      <span class=\"token operator\">*</span> 如果返回值为正数，认为当前存入的元素是较大值，存右边\n      \n      <span class=\"token operator\">*</span> 如果返回值为<span class=\"token number\">0</span>，认为两个元素一样，不存入集合     <span class=\"token punctuation\">(</span>可以把它返回值<span class=\"token punctuation\">,</span>如果当有相等数据的时候也可以存<span class=\"token punctuation\">)</span>\n          \n          \n<span class=\"token comment\">// 参数o 是代表集合中已经存在的元素</span>\n<span class=\"token comment\">// this 是代表要存入的元素     </span>\n</code></pre>\n<hr/>\n<h5><a id=\"_231\"></a>🌟代码演示</h5>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//Comparable   形容词 可比较的,具有比较能力的</span>\n\n<span class=\"token comment\">//Comparator  名词 比较器</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span>  <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span>  <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">//重写规则</span>\n\n\n      <span class=\"token comment\">/*\n      compareTo方法排序原理:\n\n     如果返回值为负数，认为当前存入的元素是较小值，存左边。\n     如果返回值为正数，认为当前存入的元素是较大值，存右边。\n     如果返回值为0，认为两个元素一样，不存入集合\n\n       参数o 是代表集合中已经存在的元素\n       this 是代表要存入的元素\n\n     */</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token comment\">//        return this.age-o.age;   //升序</span>\n<span class=\"token comment\">//        return o.age-this.age;   //降序</span>\n        <span class=\"token comment\">//上面这两个会造成当年龄一样的时候就不会放进去集合</span>\n\n        <span class=\"token comment\">//优化</span>\n        <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span>o<span class=\"token punctuation\">.</span>age<span class=\"token operator\">-</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>   <span class=\"token comment\">//这样子实现了当年龄一样的时候,把return的0换为其他值</span>\n            a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//就可以实现年龄一样也可以存在</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span>  a<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Student{name = \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\", age = \"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span> <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<hr/>\n<pre><code class=\"prism language-java\">        <span class=\"token class-name\">Student</span> s1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Student</span> s2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Student</span> s3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Student</span> s4<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//如果不改变规则,就不能存相同的数据</span>\n\n\n        <span class=\"token comment\">//按照年龄从小到大排序</span>\n        <span class=\"token class-name\">TreeSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> tree<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\n        tree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> s <span class=\"token operator\">:</span> tree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<hr/>\n<p><img alt=\"请添加图片描述\" src=\"image\\775c309ac2934f999fff375c1c57662d.png\"/></p>\n<hr/>\n<h3><a id=\"TreeSetComparator_346\"></a>🍂TreeSet中的Comparator比较器排序</h3>\n<hr/>\n<pre><code class=\"prism language-java\">         <span class=\"token operator\">*</span> <span class=\"token string\">\"没有实现Comparable接口的元素，无法实现自动排序\"</span>\n         \n           此时可以在<span class=\"token class-name\">TreeSet</span>的构造方法中传入<span class=\"token string\">\"Comparator比较器\"</span>，实现排序     <span class=\"token punctuation\">(</span>直接使用匿名内部类实现就行<span class=\"token punctuation\">,</span>然后改规则<span class=\"token punctuation\">)</span>\n</code></pre>\n<hr/>\n<pre><code class=\"prism language-java\">使用<span class=\"token class-name\">Comparator</span>比较器的顺序<span class=\"token operator\">:</span>\n\n                   <span class=\"token number\">1.</span>使用<span class=\"token class-name\">TreeSet</span>的带参构造方法创建集合对象\n                   \n                   <span class=\"token number\">2.</span>TreeSet的构造方法必须接收<span class=\"token class-name\">Comparator</span>的实现类对象，并重写<span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> o2<span class=\"token punctuation\">)</span>方法\n          \n          \n          \n<span class=\"token comment\">//compare方法的参数 o1表示要添加的元素，o2表示集合中的元素，返回值规则如下</span>\n\n           <span class=\"token operator\">*</span> 如果返回值为负数，认为当前存入的元素是较小值，存左边\n           \n           <span class=\"token operator\">*</span> 如果返回值为正数，认为当前存入的元素是较大值，存右边\n           \n           <span class=\"token operator\">*</span> 如果返回值为<span class=\"token number\">0</span>，认为两个元素一样，不存入集合\n                       \n    <span class=\"token comment\">// o1-o2   升序</span>\n    <span class=\"token comment\">// o2-o1   降序                   </span>\n</code></pre>\n<hr/>\n<h4><a id=\"_385\"></a>🌟代码演示</h4>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span>  <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span>  <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n  \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n   \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Student{name = \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\", age = \"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span> <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<hr/>\n<pre><code class=\"prism language-java\">        <span class=\"token class-name\">Student</span> s1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Student</span> s2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Student</span> s3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token comment\">//按照年龄从小到大排序</span>\n        <span class=\"token class-name\">TreeSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> tree<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>o2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// o1-o2 升序  (小到大)</span>\n                <span class=\"token comment\">// o2-o1 降序  (大到小)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        tree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> s <span class=\"token operator\">:</span> tree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<p><img alt=\"请添加图片描述\" src=\"image\\387cd6019d95423a92d5c5594b75ae73.png\"/></p>\n<hr/>\n<h3><a id=\"_473\"></a>🍂综合案例</h3>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fc8fa2ac1c514901a2c67289f72610e3.png\"/></p>\n<hr/>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span>  <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span>  <span class=\"token keyword\">double</span> score<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> score<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> score<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Student{name = \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\", score = \"</span> <span class=\"token operator\">+</span> score <span class=\"token operator\">+</span> <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<hr/>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TreeSet</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\n\n        <span class=\"token class-name\">Student</span> s1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">60.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Student</span> s2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">95.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Student</span> s3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">45.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> set<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//强转时,造成精度丢失,差值小于1,都会变成0</span>\n<span class=\"token comment\">//                return (int)(o2.getScore()-o1.getScore());</span>\n\n\n\n                <span class=\"token comment\">//改良</span>\n<span class=\"token comment\">//                如果返回值为负数，认为当前存入的元素是较小值，存左边。</span>\n<span class=\"token comment\">//                如果返回值为正数，认为当前存入的元素是较大值，存右边。</span>\n<span class=\"token comment\">//                如果返回值为0，认为两个元素一样，不存入集合</span>\n\n                <span class=\"token keyword\">double</span> result<span class=\"token operator\">=</span>o2<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>o1<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">return</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//正数</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//负数</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//不要它返回0</span>\n                <span class=\"token punctuation\">}</span>\n\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<hr/>\n<p><img alt=\"请添加图片描述\" src=\"image\\7f8103774eb74bc2999a93ab6ff7bcfa.png\"/></p>\n<hr/>\n<h3><a id=\"_593\"></a>🍂两种比较方式总结</h3>\n<hr/>\n<pre><code class=\"prism language-java\">         <span class=\"token number\">1.</span>自然排序<span class=\"token punctuation\">(</span>元素实现<span class=\"token class-name\">Comparable</span>接口<span class=\"token punctuation\">)</span>\n\n                      <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> 元素类名 <span class=\"token keyword\">implements</span>   <span class=\"token class-name\">Comparable</span><span class=\"token operator\">&lt;</span>对应的类型<span class=\"token operator\">&gt;</span>\n\n               范例<span class=\"token operator\">:</span>\n                      <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{<!-- --></span>\n\n                            <span class=\"token punctuation\">}</span>\n\n               优点<span class=\"token operator\">:</span>   可以复用<span class=\"token punctuation\">,</span>简化代码        \n\n\n         <span class=\"token number\">2.</span>比较器排序<span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeSet</span>集合接收一个<span class=\"token class-name\">Comparator</span>排序器<span class=\"token punctuation\">,</span>匿名内部类实现<span class=\"token punctuation\">)</span>\n         \n                  范例<span class=\"token operator\">:</span>   \n                        <span class=\"token class-name\">TreeSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> tree<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                   \n                             <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                  优点<span class=\"token operator\">:</span>\n                         少了一个<span class=\"token keyword\">implements</span>   <span class=\"token class-name\">Comparable</span><span class=\"token operator\">&lt;</span>对应的类型<span class=\"token operator\">&gt;</span> 关系\n                             \n                         使用一次的时候简化代码\n\n                  缺点<span class=\"token operator\">:</span>\n                         不可以复用\n\n\n <span class=\"token comment\">/*    注意:   两者可以同时出现,同时存在的时候,\n              Comparator比较器排序 会覆盖 Comparable接口的排序\n              \"优先选择Comparator\"\n\n              如果比较时,返回0,认为当前元素是重复的\n\n              hashset才和hashcode有关,其他没有关系\n              即使重写了相关的hashcode方法,也还是不能改变(如果比较时,返回0,认为当前元素是重复的)\n */</span>\n                             \n                             \n<span class=\"token comment\">/*\n\n  如果是排序数字,字符串想要用默认顺序,就什么都不用做,会进行自然升序排序                             \n    \n  如果是自定义的类,想自己实现规则就用Comparator比较器,或者实现Comparable接口\n  \n  */</span>\n</code></pre>\n<hr/>\n<h2><a id=\"Set_651\"></a>三、Set集合总结</h2>\n<hr/>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">Set</span>接口下的元素都是无索引，不重复的\n\n           <span class=\"token operator\">*</span> <span class=\"token class-name\">HashSet</span>：底层数据结构是哈希表，查询快，增删快。   <span class=\"token punctuation\">(</span>可去重<span class=\"token punctuation\">,</span><span class=\"token string\">\"不能实现排序\"</span><span class=\"token punctuation\">)</span>\n         \n           <span class=\"token operator\">*</span> <span class=\"token class-name\">LinkedHashSet</span>：继承了<span class=\"token class-name\">HashSet</span>集合，元素存取顺序一致   <span class=\"token punctuation\">(</span>可去重<span class=\"token punctuation\">,</span>保留原来顺序<span class=\"token punctuation\">)</span>\n\n           <span class=\"token operator\">*</span> <span class=\"token class-name\">TreeSet</span>：底层结构是红黑树，可以对元素进行排序     <span class=\"token punctuation\">(</span>自动排序<span class=\"token punctuation\">,</span>根据<span class=\"token class-name\">Comparable</span>接口、<span class=\"token class-name\">Comparator</span>比较器排序<span class=\"token punctuation\">)</span>\n \n</code></pre>\n<hr/>\n<h1><a id=\"KJJK_673\"></a>作者：KJ.JK</h1>\n<p>文章对你有所帮助的话，欢迎给个赞或者 star，你的支持是对作者最大的鼓励，不足之处可以在评论区多多指正，交流学习</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}