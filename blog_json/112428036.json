{"blogid": "112428036", "writerAge": "码龄3年", "writerBlogNum": "366", "writerCollect": "3203", "writerComment": "167", "writerFan": "339", "writerGrade": "6级", "writerIntegral": "7036", "writerName": "邓嘉文Jarvan", "writerProfileAdress": "writer_image\\profile_112428036.jpg", "writerRankTotal": "2736", "writerRankWeekly": "22969", "writerThumb": "873", "writerVisitNum": "516844", "blog_read_count": "54880", "blog_time": "已于 2022-01-28 10:39:56 修改", "blog_title": "平衡二叉树详解 通俗易懂", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"AVL_1\"></a>平衡二叉树（AVL）</h2>\n<blockquote>\n<p>阅读之前请先了解 <a href=\"https://blog.csdn.net/jarvan5/article/details/109717694\">二叉搜索树</a></p>\n</blockquote>\n<blockquote>\n<p><strong>Golang 交流群关注公众号 邓嘉文Jarvan</strong></p>\n</blockquote>\n<p>平衡二叉树定义：<strong>任意节点的子树的高度差都小于等于 1</strong></p>\n<br/>\n<h3><a id=\"1__11\"></a>1. 为什么使用「平衡二叉树」</h3>\n<p>二叉树能提高查询的效率 O(logn)，但是当你插入 <code>{1,2,3,4,5,6}</code> 这种数据的时候，你的二叉树就像一个「链表」一样，搜索效率变为 O(n)</p>\n<p><img alt=\"image-20210110143451761\" src=\"image\\6de7639a0351d13c95aa1ccbf7da1583.png\"/></p>\n<p>于是在 1962 年，一个姓 <strong>AV</strong> 的大佬（G. M. Adelson-Velsky） 和一个姓 L 的大佬（ Evgenii Landis）提出「平衡二叉树」（AVL） 。</p>\n<p>于是插入 <code>{1,2,3,4,5,6}</code> 这种数据结果如下图所示：</p>\n<p><img alt=\"image-20210110143538936\" src=\"image\\929a5a699bb8eee2abad5e7be80fae03.png\"/></p>\n<br/>\n<h3><a id=\"2__25\"></a>2. 判断「平衡二叉树」</h3>\n<p>判断「平衡二叉树」的 2 个条件：</p>\n<ul><li><strong>1. 是「二叉排序树」</strong></li><li><strong>2. 任何一个节点的左子树或者右子树都是「平衡二叉树」（左右高度差小于等于 1）</strong></li></ul>\n<br/>\n<p>（1）下图不是「平衡二叉树」因为它不是「二叉排序树」违反第 1 条件</p>\n<p><img alt=\"image-20210110143603854\" src=\"image\\c4fedc2291774a04207fe41cf1fad9eb.png\"/></p>\n<br/>\n<p>（2）下图不是「平衡二叉树」因为有节点子树高度差大于 1 违法第 2 条件</p>\n<p><img alt=\"image-20210105164337734\" src=\"image\\ab728b83925f3671e677c3db8bc6563a.png\"/></p>\n<p>（3）下图是「平衡二叉树」因为符合 1、2 条件</p>\n<p><img alt=\"image-20210110143622791\" src=\"image\\02bde9cd11e162ebdc4a9e8d090f5f2f.png\"/></p>\n<br/>\n<h3><a id=\"3__52\"></a>3. 相关概念</h3>\n<h4><a id=\"31__BF_54\"></a>3.1 平衡因子 BF</h4>\n<p>定义：左子树和右子树高度差</p>\n<p>计算：左子树高度 - 右子树高度的值</p>\n<p>别名：简称 BF（Balance Factor 而不是 Boy Friend）</p>\n<blockquote>\n<p><strong>一般来说 BF 的绝对值大于 1，,平衡树二叉树就失衡，需要「旋转」纠正</strong></p>\n</blockquote>\n<br/>\n<h4><a id=\"32__66\"></a>3.2 最小不平衡子树</h4>\n<p>距离插入节点最近的，并且 BF 的绝对值大于 1 的节点为根节点的子树。</p>\n<blockquote>\n<p><strong>「旋转」纠正只需要纠正「最小不平衡子树」即可</strong></p>\n</blockquote>\n<p>例子如下图所示：</p>\n<p><img alt=\"image-20210106115452795\" src=\"image\\2329c4a757c294497b58995a5436ca20.png\"/></p>\n<br/>\n<h3><a id=\"4__78\"></a>4. 二种旋转方式</h3>\n<p><strong>2 种「旋转」方式：</strong></p>\n<ol><li>左旋 \n  <ul><li>旧根节点为新根节点的左子树</li><li>新根节点的左子树（如果存在）为旧根节点的右子树</li></ul> </li><li>右旋： \n  <ul><li>旧根节点为新根节点的右子树</li><li>新根节点的右子树（如果存在）为旧根节点的左子树</li></ul> </li></ol>\n<br/>\n<p><strong>4 种「旋转」纠正类型：</strong></p>\n<ol><li>LL 型：插入左孩子的左子树，右旋</li><li>RR 型：插入右孩子的右子树，左旋</li><li>LR 型：插入左孩子的右子树，先左旋，再右旋</li><li>RL 型：插入右孩子的左子树，先右旋，再左旋</li></ol>\n<p><img alt=\"image-20210106115826823\" src=\"image\\2e5e4517694d59e4a243a1b032d3298f.png\"/></p>\n<br/>\n<h4><a id=\"41_LL__102\"></a>4.1 LL 型失衡「右旋」</h4>\n<p>第三个节点「1」插入的 时候，<code>BF(3) = 2，BF(2) = 1</code> <strong>LL 型失衡</strong>，右旋，根节点顺时针旋转</p>\n<p>（1）最小不平衡子树「右旋」</p>\n<blockquote>\n<p>右旋</p>\n</blockquote>\n<ul><li>旧根节点（节点 3）为新根节点（节点 2）的右子树</li><li>新根节点的 <strong>右子树</strong>（如果存在）为旧根节点的左子树</li></ul>\n<p><img alt=\"LL右旋转 (2)\" src=\"https://img-blog.csdnimg.cn/img_convert/9c8fd48b40b2902e6f5d713d073cdf86.gif\"/></p>\n<h4><a id=\"42_RR__117\"></a>4.2 RR 型失衡「左旋」</h4>\n<p>第三个节点「3」插入的 时候，<code>BF(1)=-2 BF(2)=-1</code>，<strong>RR 型失衡</strong>，左旋，根节点逆时针旋转</p>\n<p>（1）最小不平衡子树左旋</p>\n<blockquote>\n<p>左旋</p>\n<ul><li>旧根节点（节点 1）为新根节点（节点 2）的左子树</li><li>新根节点的左子树（如果存在）为旧根节点的右子树</li></ul>\n</blockquote>\n<p><img alt=\"LL右旋转 (2)\" src=\"https://img-blog.csdnimg.cn/img_convert/bc202c8af7a2fe17150674ebf9d2c80a.gif\"/></p>\n<h4><a id=\"43_LR__130\"></a>4.3 LR 型</h4>\n<p>第三个节点「3」插入的 时候，<code>BF(3)=2 BF(1)=-1</code> <strong>LR 型失衡</strong>，先「左旋」再「右旋」</p>\n<p>（1）最小不平衡子树左子树 <code>{2,1}</code> 先左旋</p>\n<blockquote>\n<p>左旋</p>\n</blockquote>\n<ul><li>旧根节点（节点 1）为新根节点（节点 2）的左子树</li><li>新根节点的左子树（如果存在）为旧根节点的右子树</li></ul>\n<p><img alt=\"LR_L\" src=\"https://img-blog.csdnimg.cn/img_convert/b9aa779dd28c8b668ab623cabd43cd52.gif\"/></p>\n<p>（2）最小不平衡子树 <code>{3,2,1}</code> 再右旋</p>\n<blockquote>\n<p>右旋</p>\n</blockquote>\n<ul><li>旧根节点（节点 3）为新根节点（节点 2）的右子树</li><li>新根节点的 <strong>右子树</strong>（如果存在）为旧根节点的左子树</li></ul>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/9ff53c6867737534c4abcb4b37c13ce2.gif\"/></p>\n<h4><a id=\"44_RL__154\"></a>4.4 RL 型</h4>\n<p>第三个节点「1」插入的 时候，<code>BF(1)=-2 BF(3)=1</code> <strong>RL 型失衡</strong>，先「右旋」再「左旋」</p>\n<p>（1）最小不平衡子树根节点右子树<code>{3,2}</code>先右旋</p>\n<blockquote>\n<p>右旋</p>\n<ul><li>旧根节点（节点 3）为新根节点（节点 2）的右子树</li><li>新根节点的 <strong>右子树</strong>（如果存在）为旧根节点的左子树</li></ul>\n</blockquote>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/edb1c2bb245ff799ac3db84d1dcf56c1.gif\"/></p>\n<p>（2）最小不平衡子树 <code>{1,2,3}</code> 再左旋（L）</p>\n<blockquote>\n<p>左旋</p>\n</blockquote>\n<ul><li>旧根节点（节点 1）为新根节点（节点 2）的左子树</li><li>新根节点的左子树（如果存在）为旧根节点的右子树</li></ul>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/8df7ce95862e8e3cdc9d5d6f1c31ab12.gif\"/></p>\n<h3><a id=\"5__176\"></a>5. 实例</h3>\n<p>接下来我们以 <code>{3,2,1,4,5,6,7,10,9,8}</code> 为实例练习刚刚的 4 种插入方式</p>\n<p>（1）依次插入 3、2、1 插入第三个点 1 的时候 <code>BF(3)=2 BF(2)=1</code>，<strong>LL 型失衡</strong>。</p>\n<p>对最小不平衡树 <code>{3,2,1}</code>进行「右旋」</p>\n<blockquote>\n<p>右旋：</p>\n</blockquote>\n<ul><li>旧根节点（节点 3）为新根节点（节点 2）的右子树</li><li>新根节点（节点 2）的右子树（这里没有右子树）为旧根节点的左子树</li></ul>\n<p><img alt=\"image-20210106154026867\" src=\"image\\275cf85c73ce272359c7a58a6b88cb35.png\"/></p>\n<p>（2）依次插入 4 ，5 插入 5 点的时候 <strong><code>BF(3) = -2 BF(4)=-1</code></strong>，<strong>RR 型失衡</strong></p>\n<p>对最小不平衡树 <code>{3,4,5}</code> 进行「左旋」</p>\n<blockquote>\n<p>左旋：</p>\n</blockquote>\n<ul><li>旧根节点（节点 3）为新根节点（节点 4）的左子树</li><li>新根节点（节点 4）的左子树（这里没有左子树）为旧根节点的右子树</li></ul>\n<p><img alt=\"image-20210106154346764\" src=\"image\\e54fd3ae07e6e1260bf08d7c911b2e1f.png\"/></p>\n<p>（3）插入 4 ，5 插入 5 点的时候 <strong>BF(2)=-2 BF(4)=-1</strong> ，<strong>RR 型失衡</strong> 对最小不平衡树进行「左旋」</p>\n<blockquote>\n<p>左旋：</p>\n</blockquote>\n<ul><li>旧根节点（节点 2）为新根节点（节点 4）的左子树</li><li>新根节点（节点 4）的 <strong>左子树</strong>（节点 3）为旧根节点的右子树</li></ul>\n<p><img alt=\"image-20210110104051075\" src=\"image\\7c0e4d1324bff100fc73a9b35e32f95b.png\"/></p>\n<blockquote>\n<p>新根节点（节点 4）的左子树（节点 3）为旧根节点的右子树</p>\n</blockquote>\n<p><img alt=\"image-20210106155455451\" src=\"image\\e8e09a0e399d75d7eec505d93a7402ea.png\"/></p>\n<p>（4）插入 7 节点的时候 <strong>BF(5)=-2, BF(6)=-1</strong> ，<strong>RR 型失衡</strong>，对最小不平衡树 进行「左旋」</p>\n<blockquote>\n<p>左旋：</p>\n</blockquote>\n<ul><li>旧根节点（节点 5）为新根节点（节点 6）的左子树</li><li>新根节点的左子树（这里没有）为旧根节点的右子树</li></ul>\n<p><img alt=\"\" src=\"image\\31b2b7cbff8a05157aaaaf620d343bb4.png\"/></p>\n<p>（5）依次插入 10 ，9 。插入 9 点的时候 <strong>BF(10) = 1，BF(7) = -2</strong> ，<strong>RL 型失衡</strong>，对先「右旋」再「左旋」</p>\n<p>右子树先「右旋」</p>\n<blockquote>\n<p>最小不平衡子树的右子树 <code>{10,9}</code> 先右旋：</p>\n</blockquote>\n<ul><li>旧根节点（节点 10）为新根节点（节点 9）的右子树</li><li>新根节点（节点 9）的右子树（这里没有右子树）为旧根节点的左子树</li></ul>\n<p><img alt=\"image-20210106162728914\" src=\"image\\f03ee3564106c6368eb2bef2ea475bd0.png\"/></p>\n<blockquote>\n<p>最小不平衡子树再左旋：</p>\n</blockquote>\n<ul><li>旧根节点（节点 7）为新根节点（节点 9）的左子树</li><li>新根节点（节点 9）的左子树（这里没有左子树）为旧根节点的右子树</li></ul>\n<p><img alt=\"image-20210106163215499\" src=\"image\\28ddfbc64e4061a4a9bd996d8898bfe0.png\"/></p>\n<p>（6）最后插入节点 8 ，<strong><code>BF(6)=-2 BF(9)=1</code></strong>，<strong>RL 型失衡</strong>，先「右旋」再「左旋」</p>\n<p>最小不平衡子树的右子树 <code>{9,7,10,8}</code> 先「右旋」</p>\n<blockquote>\n<p>右旋：</p>\n</blockquote>\n<ul><li>旧根节点（节点 9 <code>{9,10}</code>）为新根节点（节点 7）的右子树</li><li>新根节点（节点 7）的右子树（这里是 <strong>节点 8</strong>）为旧根节点（节点 9）的左子树</li></ul>\n<p><img alt=\"image-20210123100524618\" src=\"image\\2c2cb2daed1e71484d5bcc04899f0f23.png\"/></p>\n<p>最小不平衡子树 <code>{6,5,7,9,8,10}</code> 再「左旋」</p>\n<blockquote>\n<p>左旋：</p>\n</blockquote>\n<ul><li>旧根节点（节点 6 <code>{6,5}</code> ）为新根节点（节点 7）的左子树</li><li>新根节点的左子树（这里没有）为旧根节点的右子树</li></ul>\n<p><img alt=\"image-20210123101050122\" src=\"image\\e8cb5922a84eb683cb1e14f206a63a8b.png\"/></p>\n<p>左旋结束</p>\n<p><img alt=\"image-20210123101158215\" src=\"image\\5150780b0f1e6831ca08e3cd83fd175c.png\"/></p>\n<p>程序结束</p>\n<br/>\n<h3><a id=\"6_274\"></a>6.代码实现</h3>\n<h4><a id=\"61__276\"></a>6.1 定义节点</h4>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AVLNode</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/** 数据 **/</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/** 相对高度 **/</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/** 父节点 **/</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AVLNode</span> parent<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/** 左子树 **/</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AVLNode</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/** 右子树 **/</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AVLNode</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AVLNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h4><a id=\"62__299\"></a>6.2 计算高度</h4>\n<p>节点高度等于左子树和右子树最大高度 + 1</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/** 通过子树高度 计算高度 **/</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calcHeight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AVLNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>height <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>height <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>height <span class=\"token operator\">&gt;</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>height <span class=\"token operator\">?</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>height <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>height <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h4><a id=\"63__BF_321\"></a>6.3 计算 BF</h4>\n<p>BF（平衡因子）的值为：左子树高度 - 右子树高度</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calcBF</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AVLNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>height <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>height <span class=\"token operator\">-</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"64__343\"></a>6.4 旋转</h4>\n<p><strong>2 种「旋转」方式：</strong></p>\n<ol><li>左旋 \n  <ul><li>旧根节点为新根节点的左子树</li><li>新根节点的左子树（如果存在）为旧根节点的右子树</li></ul> </li><li>右旋： \n  <ul><li>旧根节点为新根节点的右子树</li><li>新根节点的右子树（如果存在）为旧根节点的左子树</li></ul> </li></ol>\n<p><strong>重点理解：旋转之后通过需要刷新高度</strong></p>\n<p>高度变化只有： oldRoot 和 newRoot</p>\n<p><strong>但是它们子树的高度是不变的（这很关键）</strong></p>\n<p>我们可以通过它们 <strong>子树的高度计算他们的高度</strong></p>\n<p>使用不变的因数计算变化的因素是一个很好的思维</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">AVLNode</span> <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AVLNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">AVLNode</span> oldRoot <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">AVLNode</span> newRoot <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">AVLNode</span> parent <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//1.newRoot 替换 oldRoot 位置</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> parent <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldRoot<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>data <span class=\"token operator\">&gt;</span> oldRoot<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> newRoot<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span>  <span class=\"token punctuation\">{<!-- --></span>\n            parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> newRoot<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    newRoot<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//2.重新组装 oldRoot (将 newRoot 的左子树 给 oldRoot 的右子树)</span>\n    oldRoot<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> newRoot<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newRoot<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        newRoot<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> oldRoot<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//3. oldRoot 为 newRoot 的左子树</span>\n    newRoot<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> oldRoot<span class=\"token punctuation\">;</span>\n    oldRoot<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> newRoot<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//刷新高度</span>\n    oldRoot<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token function\">calcHeight</span><span class=\"token punctuation\">(</span>oldRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    newRoot<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token function\">calcHeight</span><span class=\"token punctuation\">(</span>newRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> newRoot<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">AVLNode</span> <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AVLNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">AVLNode</span> oldRoot <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">AVLNode</span> newRoot <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">AVLNode</span> parent <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//1.newRoot 替换 oldRoot 位置</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> parent <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldRoot<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>data <span class=\"token operator\">&gt;</span> oldRoot<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> newRoot<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> newRoot<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    newRoot<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//2.重新组装 oldRoot (将 newRoot 的右子树 给 oldRoot 的左子树)</span>\n    oldRoot<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> newRoot<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newRoot<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        newRoot<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> oldRoot<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//3. oldRoot 为 newRoot 的左子树</span>\n    newRoot<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> oldRoot<span class=\"token punctuation\">;</span>\n    oldRoot<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> newRoot<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//刷新高度</span>\n    oldRoot<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token function\">calcHeight</span><span class=\"token punctuation\">(</span>oldRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    newRoot<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token function\">calcHeight</span><span class=\"token punctuation\">(</span>newRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> newRoot<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"65__427\"></a>6.5 插入（总代码）</h4>\n<p>插入操作</p>\n<ul><li>递归插入新节点</li><li>刷新高度</li><li>旋转并再次刷新高度</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ALVTree</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">AVLNode</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AVLNode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AVLNode</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AVLNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//插入左子树</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">&lt;</span> root<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AVLNode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//插入右子树</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">&gt;</span> root<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AVLNode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//刷新高度</span>\n        root<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token function\">calcHeight</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//旋转</span>\n        <span class=\"token comment\">//1. LL 型 右旋转</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">calcBF</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//2. LR 型 先左旋转</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">calcBF</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            root <span class=\"token operator\">=</span> <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//3. RR型 左旋转</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">calcBF</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//4. RL 型 先右旋转</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">calcBF</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            root <span class=\"token operator\">=</span> <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AVLNode</span> <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AVLNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">AVLNode</span> oldRoot <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">AVLNode</span> newRoot <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">AVLNode</span> parent <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//1.newRoot 替换 oldRoot 位置</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> parent <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldRoot<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>data <span class=\"token operator\">&gt;</span> oldRoot<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> newRoot<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span>  <span class=\"token punctuation\">{<!-- --></span>\n                parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> newRoot<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        newRoot<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2.重新组装 oldRoot (将 newRoot 的左子树 给 oldRoot 的右子树)</span>\n        oldRoot<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> newRoot<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newRoot<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            newRoot<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> oldRoot<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//3. oldRoot 为 newRoot 的左子树</span>\n        newRoot<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> oldRoot<span class=\"token punctuation\">;</span>\n        oldRoot<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> newRoot<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//刷新高度</span>\n        oldRoot<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token function\">calcHeight</span><span class=\"token punctuation\">(</span>oldRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        newRoot<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token function\">calcHeight</span><span class=\"token punctuation\">(</span>newRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> newRoot<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AVLNode</span> <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AVLNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">AVLNode</span> oldRoot <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">AVLNode</span> newRoot <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">AVLNode</span> parent <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//1.newRoot 替换 oldRoot 位置</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> parent <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldRoot<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>data <span class=\"token operator\">&gt;</span> oldRoot<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> newRoot<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> newRoot<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        newRoot<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2.重新组装 oldRoot (将 newRoot 的右子树 给 oldRoot 的左子树)</span>\n        oldRoot<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> newRoot<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newRoot<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            newRoot<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> oldRoot<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//3. oldRoot 为 newRoot 的左子树</span>\n        newRoot<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> oldRoot<span class=\"token punctuation\">;</span>\n        oldRoot<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> newRoot<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//刷新高度</span>\n        oldRoot<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token function\">calcHeight</span><span class=\"token punctuation\">(</span>oldRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        newRoot<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token function\">calcHeight</span><span class=\"token punctuation\">(</span>newRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> newRoot<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/** 通过子树高度 计算高度 **/</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calcHeight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AVLNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>height <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>height <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>height <span class=\"token operator\">&gt;</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>height <span class=\"token operator\">?</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>height <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>height <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calcBF</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AVLNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>height <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>height <span class=\"token operator\">-</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<p>测试</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">ALVTree</span> tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ALVTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//遍历输出</span>\n    <span class=\"token function\">innerTraverse</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">innerTraverse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AVLNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">innerTraverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>data <span class=\"token operator\">+</span> <span class=\"token string\">\" height:\"</span><span class=\"token operator\">+</span>root<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">innerTraverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出</p>\n<pre><code class=\"prism language-java\"><span class=\"token number\">1</span> height<span class=\"token operator\">:</span><span class=\"token number\">1</span>\n<span class=\"token number\">2</span> height<span class=\"token operator\">:</span><span class=\"token number\">2</span>\n<span class=\"token number\">3</span> height<span class=\"token operator\">:</span><span class=\"token number\">1</span>\n<span class=\"token number\">4</span> height<span class=\"token operator\">:</span><span class=\"token number\">4</span>\n<span class=\"token number\">5</span> height<span class=\"token operator\">:</span><span class=\"token number\">1</span>\n<span class=\"token number\">6</span> height<span class=\"token operator\">:</span><span class=\"token number\">2</span>\n<span class=\"token number\">7</span> height<span class=\"token operator\">:</span><span class=\"token number\">3</span>\n<span class=\"token number\">8</span> height<span class=\"token operator\">:</span><span class=\"token number\">1</span>\n<span class=\"token number\">9</span> height<span class=\"token operator\">:</span><span class=\"token number\">2</span>\n<span class=\"token number\">10</span> height<span class=\"token operator\">:</span><span class=\"token number\">1</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}