{"blogid": "126684850", "writerAge": "码龄7年", "writerBlogNum": "182", "writerCollect": "473", "writerComment": "54", "writerFan": "159", "writerGrade": "4级", "writerIntegral": "1471", "writerName": "懒编程-二两", "writerProfileAdress": "writer_image\\profile_126684850.jpg", "writerRankTotal": "12602", "writerRankWeekly": "30617", "writerThumb": "112", "writerVisitNum": "130055", "blog_read_count": "66", "blog_time": "于 2022-09-03 23:11:12 发布", "blog_title": "快速构建你的Web项目", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<div id=\"js_content\">\n<h2>简介</h2>\n<p>项目早期，不希望引入Vue、React等来增加复杂度，更不希望将大量时间花在CSS、JS实现页面布局和交互上，那如何快速构建一个Demo级用例呢？</p>\n<p>你可以试试streamlit，经过我一段时间的使用，感觉是个不错的工具，嗯，开源的：https://github.com/streamlit/streamlit</p>\n<p>而且，商业化感觉做的不错，社区比较活跃，可用组件比较丰富。</p>\n<img alt=\"8c08e241ebdcf2051a53a344bbc497e0.png\" src=\"image\\8c08e241ebdcf2051a53a344bbc497e0.png\"/>\n<p>本文先会介绍Streamlit的基础用法，然后会讨论如何实现登录、注册，并在最后提一下我眼中它的缺点。</p>\n<h2>run streamlit</h2>\n<p>streamlit自己的定位是给数据科学家使用的web原型开发工具，通过streamlit，你可以快速上线你的模型或各种数据分析报告。</p>\n<p>这里，基于streamlit教程文档，了解streamlit的基础用法，其实这块，不是本文的重点，但为了文章完整性，还是补一下。</p>\n<p>首先，你需要安装一下streamlit。</p>\n<pre class=\"has\"><code class=\"language-go\">pip install streamlit</code></pre>\n<p>因为streamlit依赖比较多，建议你在虚拟环境中搞。</p>\n<p>安装完后，可以先来个hello world，创建hello.py文件，代码如下：</p>\n<pre class=\"has\"><code class=\"language-go\">import streamlit as st\n\nst.title('Hello World!')</code></pre>\n<p>run起来：</p>\n<pre class=\"has\"><code class=\"language-go\">streamlit run hello.py</code></pre>\n<p>效果如下：</p>\n<img alt=\"09786d0bc5f710729a4114046acffabd.png\" src=\"image\\09786d0bc5f710729a4114046acffabd.png\"/>\n<p>streamlit提供了很多组件，供你开发美观的页面，关于如何使用，streamlit的文档写的已经很好了，这里不费过多笔墨去讨论这个，大家看见文档就好了：https://docs.streamlit.io/library/get-started/create-an-app。</p>\n<p>本文主要聊点文档中没有的。</p>\n<h2>streamlit如何启动的？</h2>\n<p>streamlit运行方式是使用streamlit run xxx.py的形式，阅读文档，发现，它也支持python -m streamlit run xxx.py 的形式。</p>\n<p>感觉控制感不强，streamlit run命令是怎么运行的？</p>\n<p>拉下streamlit源码，看其setup.py文件中的entry_points配置。</p>\n<img alt=\"538f11d1e83a3b1ac9f698b10419b3d7.png\" src=\"image\\538f11d1e83a3b1ac9f698b10419b3d7.png\"/>\n<p>由上图可知，streamlit命令的功能来自streamlit/web/cli.py的main()方法。</p>\n<img alt=\"71b5f0470bb79e2b6b6e98a27d975201.png\" src=\"image\\71b5f0470bb79e2b6b6e98a27d975201.png\"/>\n<p>嗯，使用click库来接收命令参数，提一嘴，我感觉click库接收命令行参数的方式比Python原生的argparse优雅多了。</p>\n<p>简单阅读cli.py的代码，可以发现streamlit基于tornado开发，使用了tornado.httpserve作为Web后端。</p>\n<img alt=\"2cd45ca9372bdfff85f166150c80a45e.png\" src=\"image\\2cd45ca9372bdfff85f166150c80a45e.png\"/>\n<p>Tornado是Python中比较老的Web框架了，当时python的asyncio还不成熟，为了获得高性能的web框架，tornado基于Linux的epoll和BSD的kqueue实现了其高性能的异步io，其源码比较复杂难懂。</p>\n<p>经过代码阅读，可以发现，streamlit会先载入index.html，然后再在index.html中嵌入你的页面逻辑（即使用streamlit提供组件创建的页面），具体的嵌入位置是id为root的div元素。</p>\n<img alt=\"6999cf8130fe089957f62ca5bd331dfb.png\" src=\"image\\6999cf8130fe089957f62ca5bd331dfb.png\"/>\n<p>这便是streamlit的基本流程。</p>\n<h2>消除streamlit标识</h2>\n<p>在我们实现hello.py并运行起来时，会发现多处都有streamlit的特征，如下图所示：</p>\n<img alt=\"b60866e0a851aeee16a08607b8aa077e.png\" src=\"image\\b60866e0a851aeee16a08607b8aa077e.png\"/>\n<p>从上图可知，streamlit提供了设置、重新加载、访问streamlit官网的操作，此外streamlit在title、footer上，都加上了自己的streamlit的标识。</p>\n<p>当我们需要上线自己的web app时，当然不希望用户可以有那么多操作，也不希望竞争对手一眼看出我使用了streamlit。</p>\n<p>解决方法便是隐藏掉这些内容，我们搜索【streamlit hiddle xxx】时，会搜到如下解决方案：https://discuss.streamlit.io/t/remove-made-with-streamlit-from-bottom-of-app/1370/2，相关代码如下：</p>\n<pre class=\"has\"><code class=\"language-go\">hide_streamlit_style = \"\"\"\n            &lt;style&gt;\n            #MainMenu {visibility: hidden;}\n            footer {visibility: hidden;}\n            &lt;/style&gt;\n            \"\"\"\nst.markdown(hide_streamlit_style, unsafe_allow_html=True)</code></pre>\n<p>原理很简单，通过st的markdown方法执行html代码，利用css来隐藏这些东西。</p>\n<p>很遗憾，这效果并不好，streamlit在加载时，会优先加载自己的html和js，然后再载入你的逻辑，当网络比较差时，menu和footer会显示一段时间，再被你的css隐藏。</p>\n<p>此外，streamlit在用户每次操作时，比如点击页面中的按钮，都会重新加载一次页面，依旧是老流程，优先加载自己的html、css、js，再加载你的，当比较卡时，用户每次操作，页面中都会出现menu和footer，这就很掩耳盗铃。</p>\n<p>最好的方式，当然是直接修改streamlit源码，将不需要的部分，全部删除。</p>\n<p>阅读streamlit源码，可知，streamlit的前端是React实现的，发布成python库时，React实现的代码都被webpack打包了，如果要修改源码，就需要修改React代码，然后自己搞一遍打包发布流程。</p>\n<p>嗯，成本有点高，且自己改后，后面streamlit新功能，就很难兼容了，简单思索后，采用硬替换的方式来搞。</p>\n<p>创建init_streamlit.py，写入如下代码：</p>\n<pre class=\"has\"><code class=\"language-go\">import pathlib\nimport os\nfrom bs4 import BeautifulSoup\nfrom shutil import copyfile\n\nfrom configs import ROOT_PATH\n\n\ndef modify_title_str(soup, title):\n    \"\"\"\n    修改 index.html 的 title\n    \"\"\"\n    soup.title.string = title\n    return soup\n\n\ndef add_js_code(soup, js_code):\n    \"\"\"\n    添加 js code 到 index.html 中\n    \"\"\"\n    script_tag = soup.find(id='custom-js')\n    if not script_tag:\n        script_tag = soup.new_tag(\"script\", id='custom-js')\n    # custom-js script 中的 js code\n    script_tag.string = js_code\n    # 向 body 节点中添加内容\n    soup.body.append(script_tag)\n    return soup\n\n\ndef replace_favicon(streamlit_model_path):\n    \"\"\"替换streamlit的icon\"\"\"\n    logo_path = os.path.join(streamlit_model_path, 'static', 'favicon.png')\n    # 删除 logo\n    pathlib.Path(logo_path).unlink()\n    copyfile(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'favicon.png'), logo_path)\n\n\ndef init_streamlit(streamlit_model_path, title, footer):\n    index_path = pathlib.Path(streamlit_model_path) / \"static\" / \"index.html\"\n\n    soup = BeautifulSoup(index_path.read_text(encoding='utf-8'), features=\"lxml\")\n\n    soup = modify_title_str(soup, title)\n    js_code = f'''\n    document.querySelector(\"#MainMenu\").style.visibility = 'hidden'\n    document.querySelector('footer').innerHTML = '{footer}'\n    '''\n    soup = add_js_code(soup, js_code)\n    index_path.write_text(str(soup), encoding='utf-8')\n\n\nstreamlit_model_path = os.path.join(ROOT_PATH, 'venv\\\\lib\\\\site-packages\\\\streamlit')\ninit_streamlit(streamlit_model_path=streamlit_model_path, title='懒编程', footer='Copyright © 2022, ayuliao Inc.')</code></pre>\n<p>上述代码主要就是替换streamlit中index.html的相关元素，比如title、footer之类的，通过直接修改index.html的方式，达到隐藏streamlit相关信息的效果，这样就不会因为streamlit先加载自身html、js而出现无法很好隐藏这些元素的问题了。</p>\n<p>此外，单纯的修改index.html的title没有效果，原因是，index.html中的title后续也会被streamlit自身的js方法修改，要解决这个问题，可以修改一下hello.py文件，代码如下：</p>\n<pre class=\"has\"><code class=\"language-go\">import init_streamlit\nimport streamlit as st\n\nst.set_page_config(page_title='懒编程',\n                   page_icon='logo.jpg')\n\nst.title('hello world')</code></pre>\n<p>运行hello.py，效果如下图所示：</p>\n<img alt=\"72ac2957d5ad087a61145384a5d28f10.png\" src=\"image\\72ac2957d5ad087a61145384a5d28f10.png\"/>\n<h2>实现登录、注册</h2>\n<p>如何实现登录、注册，也是文档里看不到的内容。</p>\n<p>streamlit本身没有提供登录注册等功能，这可能跟streamlit自身定位有关，要实现登录与注册，我们需要自己写，通过streamlit插件的形式来实现。</p>\n<p>streamlit有个插件页面，里面给出了比较优秀的streamlit插件，多数streamlit插件的前端都是自己利用React去实现，只是React中使用了streamlit提供的方法，从而达到实现streamlit插件的目的。</p>\n<p>当然，一些简单的插件并不一定需要通过React开发页面交互，登录、注册类的插件便是如此。</p>\n<p>经过查找，发现了Streamlit-Authenticator插件（https://github.com/mkhorasani/Streamlit-Authenticator），通过pip便可以安装使用：</p>\n<pre class=\"has\"><code class=\"language-go\">pip install streamlit-authenticator</code></pre>\n<p>因为streamlit-authenticator提供的功能过于简单，它没有通过数据库来记录用户信息，在多数情况下，都不能满足我们，所以我们需要对它进行魔改。</p>\n<p>要正常运行起streamlit-authenticator的源码，需要安装相关的依赖，但streamlit-authenticator并没有提供requirements.txt文件，其setup.py中却给出了依赖关系，你可以基于setup.py中的信息自己安装或者跟我一样使用偷懒方法，先安装streamlit-authenticator，然后再单独删除它，这样相关的依赖就安装好了。</p>\n<p>我将streamlit-authenticator相关的代码放在libs文件夹中。</p>\n<p>streamlit-authenticator原本是通过yaml配置文件来实现登录、注册的，我将其改成使用sqllite的形式，当然，你可以将其改成MySQL等等。此外，我添加了邀请码的逻辑，这里我写死了一些邀请码，只有拥有这些邀请码的用户才能注册，而注册后的用户，才能登陆。</p>\n<p>为了配合修改后的streamlit-authenticator使用，我创建了models目录，在其中写相关的sql逻辑。</p>\n<p>嗯，这块不复杂，但改动的逻辑比较多，就不通过文字描述了，翻到文末，看项目代码则可。</p>\n<p>因streamlit的刷新机制（每操作页面中的一个按钮便会刷新页面），如何合理的组织登陆、注册和登陆后的页面也有坑。</p>\n<p>如果你看streamlit官方文档中多页面app的内容，会发现布局很刻板，比较丑，经过简单实验与研究，我使用了tabs组件来实现最终布局，相关代码如下：</p>\n<pre class=\"has\"><code class=\"language-go\">import os\nimport yaml\nimport init_streamlit\nimport streamlit as st\nimport libs.streamlit_authenticator as stauth\n\nst.set_page_config(page_title='懒编程',\n                   page_icon='logo.jpg')\n\nst.title('hello world')\n\n\ndef init_authenticator():\n    filepath = os.path.abspath(os.path.dirname(__file__))\n    with open(os.path.join(filepath, 'auth.yaml')) as file:\n        config = yaml.load(file, Loader=stauth.SafeLoader)\n\n    authenticator = stauth.Authenticate(\n        config['credentials'],\n        config['cookie']['name'],\n        config['cookie']['key'],\n        config['cookie']['expiry_days'],\n    )\n    return authenticator\n\n\ndef register_user(authenticator):\n    try:\n        if authenticator.register_user('Register user', preauthorization=False):\n            st.success('User registered successfully')\n    except Exception as e:\n        st.error(e)\n\n\ndef my_logics():\n    st.markdown('login success')\n\n\ndef start_web():\n    authenticator = init_authenticator()\n    # check cookie not login again\n    authenticator._check_cookie()\n    if st.session_state[\"authentication_status\"]:\n        authenticator.logout('Logout', 'sidebar')\n        my_logics()\n    else:\n\n        tab1, tab2 = st.tabs([\"Login\", \"Register\"])\n        with tab1:\n            name, authentication_status, username = authenticator.login(\n                'Login', 'main')\n            if st.session_state[\"authentication_status\"] == False:\n                st.error('Username/password is incorrect')\n            elif st.session_state[\"authentication_status\"] == None:\n                st.warning('Please enter your username and password')\n        with tab2:\n            register_user(authenticator)\n\nstart_web()</code></pre>\n<p>登录页：</p>\n<img alt=\"6b767f9a3b0f78cb1f1138677b2d11fd.png\" src=\"image\\6b767f9a3b0f78cb1f1138677b2d11fd.png\"/>\n<p>注册页：</p>\n<img alt=\"0d6120f9951bb9e8f3f3e684922977b9.png\" src=\"image\\0d6120f9951bb9e8f3f3e684922977b9.png\"/>\n<p>登录成功后的主页：</p>\n<img alt=\"13cc8c9a2c3ee49c250062db6c3113a9.png\" src=\"image\\13cc8c9a2c3ee49c250062db6c3113a9.png\"/>\n<h2>结尾</h2>\n<p>使用streamlit我们可以快速构建出可以拿出去给别人看的web demo，但streamlit在我眼中也有个比较大的缺陷，那便是没有区分请求的功能，比如Flask、Fastapi等框架，你可以区分出不同的请求，而streamlit不行，在多人使用时，就会出现，他人在操作页面时，你当前的页面也可能会被影响的情况。</p>\n<p>嗯，这便是streamlit相关的实践了，本文相关代码github：https://github.com/ayuLiao/learn-streamlit</p>\n<p>我是二两，下篇文章见。</p>\n</div>\n</div>\n</div>"}