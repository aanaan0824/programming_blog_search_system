{"blogid": "120587716", "writerAge": "码龄4年", "writerBlogNum": "200", "writerCollect": "4121", "writerComment": "186", "writerFan": "1557", "writerGrade": "5级", "writerIntegral": "3602", "writerName": "一个快乐的野指针~", "writerProfileAdress": "writer_image\\profile_120587716.jpg", "writerRankTotal": "1888786", "writerRankWeekly": "16877", "writerThumb": "946", "writerVisitNum": "310019", "blog_read_count": "67076", "blog_time": "于 2021-10-02 22:32:26 发布", "blog_title": "Java反射（超详细！）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-kimbie-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"1_0\"></a>1、反射机制有什么用？</h1>\n<p>通过java语言中的反射机制可以<font color=\"red\">操作字节码文件</font>（可以读和修改字节码文件。）<br/> 通过反射机制可以操作代码片段。（class文件。）</p>\n<h1><a id=\"2_4\"></a>2、反射机制的相关类在哪个包下？</h1>\n<pre><code class=\"prism language-java\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"3_10\"></a>3、反射机制相关的重要的类有哪些？</h1>\n<table><thead><tr><th>类</th><th>含义</th></tr></thead><tbody><tr><td>java.lang.Class</td><td>代表整个字节码。代表一个类型，代表整个类。</td></tr><tr><td>java.lang.reflect.Method</td><td>代表字节码中的方法字节码。代表类中的方法。</td></tr><tr><td>java.lang.reflect.Constructor</td><td>代表字节码中的构造方法字节码。代表类中的构造方法。</td></tr><tr><td>java.lang.reflect.Field</td><td>代表字节码中的属性字节码。代表类中的成员变量（静态变量+实例变量）。</td></tr></tbody></table>\n<p><strong>注</strong>：<font color=\"red\"><strong>必须先获得Class才能获取Method、Constructor、Field</strong></font>。</p>\n<p><strong>eg.</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>Class</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// Field</span>\n\t<span class=\"token keyword\">int</span> no<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// Constructor</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\">// Method</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setNo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> no<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"4Class_47\"></a>4、获取Class的三方式</h1>\n<p>要操作一个类的字节码，需要首先获取到这个类的字节码，怎么获取java.lang.Class实例？</p>\n<table><thead><tr><th>方式</th><th>备注</th></tr></thead><tbody><tr><td>Class.forName(“完整类名带包名”)</td><td>静态方法</td></tr><tr><td>对象.getClass()</td><td></td></tr><tr><td>任何类型.class</td><td></td></tr></tbody></table>\n<p>注：以上三种方式返回值都是<strong>Class类型</strong>。</p>\n<h1><a id=\"5_59\"></a>5、通过反射实例化对象</h1>\n<pre><code class=\"prism language-java\">对象<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>注</strong>：newInstance()方法内部实际上调用了<strong>无参数构造方法</strong>，必须保证无参构造存在才可以。<br/> 否则会抛出<code>java.lang.InstantiationException</code>异常。</p>\n<p><strong>eg.</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest02</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 下面这段代码是以反射机制的方式创建对象。</span>\n\n        <span class=\"token comment\">// 通过反射机制，获取Class，通过Class来实例化对象</span>\n        <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javase.reflectBean.User\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// newInstance() 这个方法会调用User这个类的无参数构造方法，完成对象的创建。</span>\n        <span class=\"token comment\">// 重点是：newInstance()调用的是无参构造，必须保证无参构造是存在的！</span>\n        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"6JDBCClassforName_84\"></a>6、JDBC重点(Class.forName导致类加载)</h1>\n<p>如果你只是希望一个类的<strong>静态代码块</strong>执行，其它代码一律不执行，可以使用：</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"完整类名\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这个方法的执行会导致<font color=\"red\"><strong>类加载</strong></font>，类加载时，静态代码块执行。</p>\n<h1><a id=\"7Filed_93\"></a>7、反射Filed【反射/反编译一个类的属性】</h1>\n<h2><a id=\"71Class_94\"></a>7.1、Class类方法</h2>\n<table><thead><tr><th>方法名</th><th>备注</th></tr></thead><tbody><tr><td>public T <strong>newInstance</strong>()</td><td>创建对象</td></tr><tr><td>public String <strong>getName</strong>()</td><td>返回完整类名带包名</td></tr><tr><td>public String <strong>getSimpleName</strong>()</td><td>返回类名</td></tr><tr><td>public Field[] <strong>getFields</strong>()</td><td>返回类中public修饰的属性</td></tr><tr><td>public Field[] <strong>getDeclaredFields</strong>()</td><td>返回类中所有的属性</td></tr><tr><td>public Field <strong>getDeclaredField</strong>(String name)</td><td>根据属性名name获取指定的属性</td></tr><tr><td>public native int <strong>getModifiers</strong>()</td><td>获取属性的修饰符列表,返回的修饰符是一个数字，每个数字是修饰符的代号【一般配合Modifier类的toString(int x)方法使用】</td></tr><tr><td>public Method[] <strong>getDeclaredMethods</strong>()</td><td>返回类中所有的实例方法</td></tr><tr><td>public Method <strong>getDeclaredMethod</strong>(String name, Class&lt;?&gt;… parameterTypes)</td><td>根据方法名name和方法形参获取指定方法</td></tr><tr><td>public Constructor&lt;?&gt;[] <strong>getDeclaredConstructors</strong>()</td><td>返回类中所有的构造方法</td></tr><tr><td>public Constructor <strong>getDeclaredConstructor</strong>(Class&lt;?&gt;… parameterTypes)</td><td>根据方法形参获取指定的构造方法</td></tr><tr><td>----</td><td>----</td></tr><tr><td>public native Class&lt;? super T&gt; <strong>getSuperclass</strong>()</td><td>返回调用类的父类</td></tr><tr><td>public Class&lt;?&gt;[] <strong>getInterfaces</strong>()</td><td>返回调用类实现的接口集合</td></tr></tbody></table>\n<h2><a id=\"72Field_112\"></a>7.2、Field类方法</h2>\n<table><thead><tr><th>方法名</th><th>备注</th></tr></thead><tbody><tr><td>public String <strong>getName</strong>()</td><td>返回属性名</td></tr><tr><td>public int <strong>getModifiers</strong>()</td><td>获取属性的修饰符列表,返回的修饰符是一个数字，每个数字是修饰符的代号【一般配合Modifier类的toString(int x)方法使用】</td></tr><tr><td>public Class&lt;?&gt; <strong>getType</strong>()</td><td>以Class类型，返回属性类型【一般配合Class类的getSimpleName()方法使用】</td></tr><tr><td>public void <strong>set</strong>(Object obj, Object value)</td><td>设置属性值</td></tr><tr><td>public Object <strong>get</strong>(Object obj)</td><td>读取属性值</td></tr></tbody></table>\n<h3><a id=\"egField_121\"></a>eg.反编译一个类的属性Field</h3>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//通过反射机制，反编译一个类的属性Field（了解一下）</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest06</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">StringBuilder</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Class</span> studentClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javase.reflectBean.Student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>studentClass<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" class \"</span> <span class=\"token operator\">+</span> studentClass<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" {\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Class类的getName方法</span>\n        <span class=\"token comment\">//获取所有的属性</span>\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> studentClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> f <span class=\"token operator\">:</span> fields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 获取属性的修饰符列表,返回的修饰符是一个数字，每个数字是修饰符的代号</span>\n            <span class=\"token comment\">// 用Modifier类的toString转换成字符串</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取属性的类型</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取属性的名字</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\";\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"721_150\"></a>7.2.1、给属性赋值三要素</h3>\n<p><strong>eg.</strong> 给s对象的no属性赋值1111</p>\n<ul><li>要素1：<strong>对象</strong> s</li><li>要素2：no <strong>属性</strong></li><li>要素3：1111 <strong>值</strong></li></ul>\n<h3><a id=\"722_157\"></a>7.2.2、读属性值两个要素</h3>\n<p><strong>eg.</strong> 获取s对象的no属性的值</p>\n<ul><li>要素1：<strong>对象</strong> s</li><li>要素2：no<strong>属性</strong></li></ul>\n<hr/>\n<p><strong>注：</strong> Field类中set()、get()使用注意事项：</p>\n<pre><code class=\"prism language-java\">属性<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>对象<span class=\"token punctuation\">,</span> 值<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n属性<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>对象<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h3><a id=\"egjava_175\"></a>eg.★通过反射机制访问一个java对象的属性</h3>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/*\n必须掌握：\n    怎么通过反射机制访问一个java对象的属性？\n        给属性赋值set\n        获取属性的值get\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest07</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchFieldException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//不使用反射机制给属性赋值</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/**给属性赋值三要素：给s对象的no属性赋值1111\n         * 要素1：对象s\n         * 要素2：no属性\n         * 要素3：1111\n         */</span>\n        student<span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> <span class=\"token number\">1111</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/**读属性值两个要素：获取s对象的no属性的值。\n         * 要素1：对象s\n         * 要素2：no属性\n         */</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//使用反射机制给属性赋值</span>\n        <span class=\"token class-name\">Class</span> studentClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javase.reflectBean.Student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> studentClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// obj就是Student对象。（底层调用无参数构造方法）</span>\n\n        <span class=\"token comment\">// 获取no属性（根据属性的名称来获取Field）</span>\n        <span class=\"token class-name\">Field</span> noField <span class=\"token operator\">=</span> studentClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 给obj对象(Student对象)的no属性赋值</span>\n        <span class=\"token comment\">/*\n            虽然使用了反射机制，但是三要素还是缺一不可：\n                要素1：obj对象\n                要素2：no属性\n                要素3：22222值\n            注意：反射机制让代码复杂了，但是为了一个“灵活”，这也是值得的。\n         */</span>\n        noField<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">22222</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 读取属性的值</span>\n        <span class=\"token comment\">// 两个要素：获取obj对象的no属性的值。</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>noField<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"723set_222\"></a>7.2.3、set()可以访问私有属性嘛？</h3>\n<p>不可以，需要打破封装，才可以。</p>\n<p><strong>Fidle方法：</strong></p>\n<table><thead><tr><th>方法</th><th>备注</th></tr></thead><tbody><tr><td>public void <strong>setAccessible</strong>(boolean flag)</td><td>默认false，设置为true为打破封装</td></tr></tbody></table>\n<p><strong>eg.</strong></p>\n<pre><code class=\"prism language-java\">        <span class=\"token comment\">// 可以访问私有的属性吗？</span>\n        <span class=\"token class-name\">Field</span> nameField <span class=\"token operator\">=</span> studentClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 打破封装（反射机制的缺点：打破封装，可能会给不法分子留下机会！！！）</span>\n        <span class=\"token comment\">// 这样设置完之后，在外部也是可以访问private的。</span>\n        nameField<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 给name属性赋值</span>\n        nameField<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaowu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取name属性的值</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nameField<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"8Method_244\"></a>8、反射Method【反射/反编译一个类的方法】</h1>\n<h2><a id=\"81Method_245\"></a>8.1、Method类方法</h2>\n<table><thead><tr><th>方法名</th><th>备注</th></tr></thead><tbody><tr><td>public String <strong>getName</strong>()</td><td>返回方法名</td></tr><tr><td>public int <strong>getModifiers</strong>()</td><td>获取方法的修饰符列表,返回的修饰符是一个数字，每个数字是修饰符的代号【一般配合Modifier类的toString(int x)方法使用】</td></tr><tr><td>public Class&lt;?&gt; <strong>getReturnType</strong>()</td><td>以Class类型，返回方法类型【一般配合Class类的getSimpleName()方法使用】</td></tr><tr><td>public Class&lt;?&gt;[] <strong>getParameterTypes</strong>()</td><td>返回方法的修饰符列表（一个方法的参数可能会有多个。）【结果集一般配合Class类的getSimpleName()方法使用】</td></tr><tr><td>public Object <strong>invoke</strong>(Object obj, Object… args)</td><td>调用方法</td></tr></tbody></table>\n<h3><a id=\"egMethod_254\"></a>eg.反编译一个类的方法Method</h3>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/*\n了解一下，不需要掌握（反编译一个类的方法。）\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest09</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">StringBuilder</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Class</span> userServiceClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>userServiceClass<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" class \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>userServiceClass<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" {\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 获取所有的Method（包括私有的！）</span>\n        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> userServiceClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> m <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 获取修饰符列表</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 获取方法的返回值类型</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">getReturnType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 获取方法名</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 方法的修饰符列表（一个方法的参数可能会有多个。）</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parameterTypes <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> parameterTypes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>parameterTypes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> parameterTypes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\") {}\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"811_298\"></a>8.1.1、调用方法四要素</h3>\n<p><strong>eg.</strong> 调用对象userService的login方法</p>\n<ul><li>要素1：<strong>对象</strong> userService</li><li>要素2：login <strong>方法名</strong></li><li>要素3：<strong>实参列表</strong></li><li>要素4：<strong>返回值</strong></li></ul>\n<hr/>\n<p><strong>注：</strong> Method类中invoke()使用注意事项：</p>\n<pre><code class=\"prism language-java\">方法<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>对象<span class=\"token punctuation\">,</span> 实参<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h3><a id=\"eg_314\"></a>eg.★通过反射机制调用一个对象的方法</h3>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/*\n重点：必须掌握，通过反射机制怎么调用一个对象的方法？\n    五颗星*****\n\n    反射机制，让代码很具有通用性，可变化的内容都是写到配置文件当中，\n    将来修改配置文件之后，创建的对象不一样了，调用的方法也不同了，\n    但是java代码不需要做任何改动。这就是反射机制的魅力。\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest10</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 不使用反射机制，怎么调用方法</span>\n        <span class=\"token comment\">// 创建对象</span>\n        <span class=\"token class-name\">UserService</span> userService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 调用方法</span>\n        <span class=\"token comment\">/*\n            要素分析：\n                要素1：对象userService\n                要素2：login方法名\n                要素3：实参列表\n                要素4：返回值\n         */</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userService<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"登入成功！\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"登入失败！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//使用反射机制调用方法</span>\n        <span class=\"token class-name\">Class</span> userServiceClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javase.reflectBean.UserService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建对象</span>\n        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> userServiceClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取Method</span>\n        <span class=\"token class-name\">Method</span> loginMethod <span class=\"token operator\">=</span> userServiceClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        Method loginMethod = userServiceClass.getDeclaredMethod(\"login\");//注：没有形参就不传</span>\n        <span class=\"token comment\">// 调用方法</span>\n        <span class=\"token comment\">// 调用方法有几个要素？ 也需要4要素。</span>\n        <span class=\"token comment\">// 反射机制中最最最最最重要的一个方法，必须记住。</span>\n        <span class=\"token comment\">/*\n            四要素：\n            loginMethod方法\n            obj对象\n            \"admin\",\"123\" 实参\n            retValue 返回值\n         */</span>\n        <span class=\"token class-name\">Object</span> resValues <span class=\"token operator\">=</span> loginMethod<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//注：方法返回值是void 结果是null</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>resValues<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"9Constructor_363\"></a>9、反射Constructor【反射/反编译一个类的构造方法】</h1>\n<h2><a id=\"91Constructor_365\"></a>9.1Constructor类方法</h2>\n<table><thead><tr><th>方法名</th><th>备注</th></tr></thead><tbody><tr><td>public String <strong>getName</strong>()</td><td>返回构造方法名</td></tr><tr><td>public int <strong>getModifiers</strong>()</td><td>获取构造方法的修饰符列表,返回的修饰符是一个数字，每个数字是修饰符的代号【一般配合Modifier类的toString(int x)方法使用】</td></tr><tr><td>public Class&lt;?&gt;[] <strong>getParameterTypes</strong>()</td><td>返回构造方法的修饰符列表（一个方法的参数可能会有多个。）【结果集一般配合Class类的getSimpleName()方法使用】</td></tr><tr><td>public T <strong>newInstance</strong>(Object … initargs)</td><td>创建对象【参数为创建对象的数据】</td></tr></tbody></table>\n<h3><a id=\"egConstructor_373\"></a>eg.反编译一个类的构造方法Constructor</h3>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/*\n反编译一个类的Constructor构造方法。\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest11</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">StringBuilder</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Class</span> vipClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javase.reflectBean.Vip\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//public class UserService {<!-- --></span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" class \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> constructors <span class=\"token operator\">=</span> vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span> c <span class=\"token operator\">:</span> constructors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//public Vip(int no, String name, String birth, boolean sex) {<!-- --></span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            s.append(c.getName());//包名+类名</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//类名</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parameterTypes <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> parameterTypes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>parameterTypes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> parameterTypes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"){}\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"911_414\"></a>9.1.1、反射机制创建对象两步骤</h3>\n<ol><li>先获取到这个有参数的构造方法【用ClassgetDeclaredConstructor()方法获取】</li><li>调用构造方法new对象【用Constructor类的newInstance()方法new对象】</li></ol>\n<h3><a id=\"egjava_419\"></a>eg.通过反射机制调用构造方法实例化java对象</h3>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/*\n比上一个例子(ReflectTest11)重要一些！！！\n\n通过反射机制调用构造方法实例化java对象。（这个不是重点）\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest12</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//不适用反射创建对象</span>\n        <span class=\"token class-name\">Vip</span> vip1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Vip</span> vip2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vip</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2001-10-19\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//使用反射机制创建对象（以前）</span>\n        <span class=\"token class-name\">Class</span> vipClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javase.reflectBean.Vip\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 调用无参数构造方法</span>\n        <span class=\"token class-name\">Object</span> obj1 <span class=\"token operator\">=</span> vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Class类的newInstance方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//使用反射机制创建对象（现在）</span>\n        <span class=\"token comment\">// 调用有参数的构造方法怎么办？</span>\n        <span class=\"token comment\">// 第一步：先获取到这个有参数的构造方法</span>\n        <span class=\"token class-name\">Constructor</span> c1 <span class=\"token operator\">=</span> vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 第二步：调用构造方法new对象</span>\n        <span class=\"token class-name\">Object</span> obj2 <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">321</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lsi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1999-10-11\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Constructor类的newInstance方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 获取无参数构造方法</span>\n        <span class=\"token class-name\">Constructor</span> c2 <span class=\"token operator\">=</span> vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> obj3 <span class=\"token operator\">=</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>注：</strong> 如果需要调用无参构造方法，getDeclaredConstructor()方法形参为空即可【和Class类的newInstance()方法一样的效果】！</p>\n<h1><a id=\"10_457\"></a>10、★获取一个类的父类以及实现的接口</h1>\n<p>两个方法【Class类中的】</p>\n<ol><li>public native Class&lt;? super T&gt; <strong>getSuperclass</strong>()</li><li>public Class&lt;?&gt;[] <strong>getInterfaces</strong>()</li></ol>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/*\n重点：给你一个类，怎么获取这个类的父类，已经实现了哪些接口？\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest13</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// String举例</span>\n        <span class=\"token class-name\">Class</span> vipClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取String的父类</span>\n        <span class=\"token class-name\">Class</span> superclass <span class=\"token operator\">=</span> vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取String类实现的所有接口（一个类可以实现多个接口。）</span>\n        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interfaces <span class=\"token operator\">=</span> vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>superclass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span> i <span class=\"token operator\">:</span> interfaces<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"11_483\"></a>11、注意</h1>\n<ol><li>属性最重要的是<strong>名字</strong></li><li>实例方法最重要的是<strong>名字</strong>和<strong>形参列表</strong></li><li>构造方法最重要的是<strong>形参列表</strong></li></ol>\n<h1><a id=\"_489\"></a>附：测试代码</h1>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">javase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javase<span class=\"token punctuation\">.</span>reflectBean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javase<span class=\"token punctuation\">.</span>reflectBean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserService</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javase<span class=\"token punctuation\">.</span>reflectBean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Vip</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResourceBundle</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n要操作一个类的字节码，需要首先获取到这个类的字节码，怎么获取java.lang.Class实例？\n    三种方式\n        第一种：Class c = Class.forName(\"完整类名带包名\");\n        第二种：Class c = 对象.getClass();\n        第三种：Class c = 任何类型.class;\n\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest01</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/*\n        第一种方式：Class.forName()\n            1、静态方法\n            2、方法的参数是一个字符串。\n            3、字符串需要的是一个完整类名。\n            4、完整类名必须带有包名。java.lang包也不能省略。\n         */</span>\n        <span class=\"token class-name\">Class</span> c1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c1代表String.class文件，或者说c1代表String类型。</span>\n        <span class=\"token class-name\">Class</span> c2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Integer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c2代表Integer类型</span>\n        <span class=\"token class-name\">Class</span> c3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.util.Date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c3代表Date类型</span>\n\n\n        <span class=\"token comment\">// 第二种方式：java中任何一个对象都有一个方法：getClass()</span>\n        <span class=\"token class-name\">String</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> c4 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c4代表String.class字节码文件；c4代表String类型。</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c4 <span class=\"token operator\">==</span> c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true（==判断的是对象的内存地址。）</span>\n\n        <span class=\"token class-name\">Date</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> c5 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c5 <span class=\"token operator\">==</span> c3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true(c5和c3两个变量中保存的内存地址都是一样的，都指向方法区中的字节码文件。)</span>\n\n        <span class=\"token comment\">// 第三种方式：java语言中任何一种类型，包括基本数据类型，它都有.class属性。</span>\n        <span class=\"token class-name\">Class</span> i <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//i代表Integer类型</span>\n        <span class=\"token class-name\">Class</span> d <span class=\"token operator\">=</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// d代表Date类型</span>\n        <span class=\"token class-name\">Class</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//f代表float类型</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n获取到Class，能干什么？\n    通过Class的newInstance()方法来实例化对象。\n    注意：newInstance()方法内部实际上调用了无参数构造方法，必须保证无参构造存在才可以。\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest02</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 下面这段代码是以反射机制的方式创建对象。</span>\n\n        <span class=\"token comment\">// 通过反射机制，获取Class，通过Class来实例化对象</span>\n        <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javase.reflectBean.User\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// newInstance() 这个方法会调用User这个类的无参数构造方法，完成对象的创建。</span>\n        <span class=\"token comment\">// 重点是：newInstance()调用的是无参构造，必须保证无参构造是存在的！</span>\n        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n验证反射机制的灵活性。\n    java代码写一遍，再不改变java源代码的基础之上，可以做到不同对象的实例化。\n    非常之灵活。（符合OCP开闭原则：对扩展开放，对修改关闭。）\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest03</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 以下代码是灵活的，代码不需要改动，可以修改配置文件，配置文件修改之后，可以创建出不同的实例对象。</span>\n        <span class=\"token comment\">// 通过IO流读取reflectClassInfo.properties文件</span>\n        <span class=\"token class-name\">FileReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Practice/reflectClassInfo1.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建属性类对象Map</span>\n        <span class=\"token class-name\">Properties</span> pro <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// key value都是String</span>\n        <span class=\"token comment\">//加载</span>\n        pro<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        reader<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 通过key获取value</span>\n        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> pro<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"className\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 通过反射机制实例化对象</span>\n        <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n研究一下：Class.forName()发生了什么？\n    记住，重点：\n        如果你只是希望一个类的静态代码块执行，其它代码一律不执行，\n        你可以使用：\n            Class.forName(\"完整类名\");\n        这个方法的执行会导致类加载，类加载时，静态代码块执行。\n\n提示：\n    后面JDBC技术的时候我们还需要。\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest04</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// Class.forName()这个方法的执行会导致：类加载。</span>\n        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javase.MyClass\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyClass中的静态代码块执行了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n研究一下文件路径的问题。\n怎么获取一个文件的绝对路径。以下讲解的这种方式是通用的。但前提是：文件需要在类路径下。才能用这种方式。\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AboutPath</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">FileNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 这种方式的路径缺点是：移植性差，在IDEA中默认的当前路径是project的根。</span>\n        <span class=\"token comment\">// 这个代码假设离开了IDEA，换到了其它位置，可能当前路径就不是project的根了，这时这个路径就无效了。</span>\n        <span class=\"token class-name\">File</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Practice/src/reflectClassInfo2.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 接下来说一种比较通用的一种路径。即使代码换位置了，这样编写仍然是通用的。</span>\n        <span class=\"token comment\">// 注意：使用以下通用方式的前提是：这个文件必须在类路径下。</span>\n        <span class=\"token comment\">// 什么类路径下？方式在src下的都是类路径下。【记住它】</span>\n        <span class=\"token comment\">// src是类的根路径。</span>\n        <span class=\"token comment\">/*\n        解释：\n            Thread.currentThread() 当前线程对象\n            getContextClassLoader() 是线程对象的方法，可以获取到当前线程的类加载器对象。\n            getResource() 【获取资源】这是类加载器对象的方法，当前线程的类加载器默认从类的根路径下加载资源。\n         */</span>\n        <span class=\"token class-name\">String</span> path <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContextClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reflectClassInfo2.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 采用以上的代码可以拿到一个文件的绝对路径。</span>\n        <span class=\"token comment\">// /D:/996-CodeSection/001-IDEA/0.JavaSE/TestProject/out/production/practice/reflectClassInfo2.properties</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> path2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContextClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javase/reflectBean/db.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// /D:/996-CodeSection/001-IDEA/0.JavaSE/TestProject/out/production/practice/javase/reflectBean/db.properties</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>path2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IoPropertiesTest</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//以前</span>\n        <span class=\"token comment\">/*String path = Thread.currentThread().getContextClassLoader().getResource(\"reflectClassInfo2.properties\").getPath();\n        FileReader reader = new FileReader(path);*/</span>\n\n        <span class=\"token comment\">//现在</span>\n        <span class=\"token comment\">// 直接以流的形式返回。</span>\n        <span class=\"token class-name\">InputStream</span> reader <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContextClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reflectClassInfo2.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Properties</span> pro <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pro<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        reader<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 通过key获取value</span>\n        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> pro<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"className\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// java.util.Date</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\njava.util包下提供了一个资源绑定器，便于获取属性配置文件中的内容。\n使用以下这种方式的时候，属性配置文件xxx.properties必须放到类路径下。\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ResourceBundleTest</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 资源绑定器，只能绑定xxx.properties文件。并且这个文件必须在类路径下。文件扩展名也必须是properties</span>\n        <span class=\"token comment\">// 并且在写路径的时候，路径后面的扩展名不能写。</span>\n<span class=\"token comment\">//        ResourceBundle bundle = ResourceBundle.getBundle(\"reflectClassInfo2\");</span>\n        <span class=\"token class-name\">ResourceBundle</span> bundle <span class=\"token operator\">=</span> <span class=\"token class-name\">ResourceBundle</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBundle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javase/reflectBean/db\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> bundle<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"className\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n反射Student类当中所有的Field（了解一下）\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest05</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Class</span> studentClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javase.reflectBean.Student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> studentClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Class类的getName方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"完整类名： \"</span> <span class=\"token operator\">+</span> className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> simpleName <span class=\"token operator\">=</span> studentClass<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Class类的getName方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"简类名： \"</span> <span class=\"token operator\">+</span> simpleName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//获取public修饰的属性</span>\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields1 <span class=\"token operator\">=</span> studentClass<span class=\"token punctuation\">.</span><span class=\"token function\">getFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fields1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 2</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fields1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> fields1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Field类中的getName犯法</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//获取所有的属性</span>\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields2 <span class=\"token operator\">=</span> studentClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fields2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> f <span class=\"token operator\">:</span> fields2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//获取属性的修饰符列表</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> f <span class=\"token operator\">:</span> fields2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 获取属性的修饰符列表,返回的修饰符是一个数字，每个数字是修饰符的代号</span>\n            <span class=\"token comment\">// 用Modifier类的toString转换成字符串</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取属性的类型</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取属性的名字</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//通过反射机制，反编译一个类的属性Field（了解一下）</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest06</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">StringBuilder</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Class</span> studentClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javase.reflectBean.Student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>studentClass<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" class \"</span> <span class=\"token operator\">+</span> studentClass<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" {\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Class类的getName方法</span>\n        <span class=\"token comment\">//获取所有的属性</span>\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> studentClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> f <span class=\"token operator\">:</span> fields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 获取属性的修饰符列表,返回的修饰符是一个数字，每个数字是修饰符的代号</span>\n            <span class=\"token comment\">// 用Modifier类的toString转换成字符串</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取属性的类型</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取属性的名字</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\";\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n必须掌握：\n    怎么通过反射机制访问一个java对象的属性？\n        给属性赋值set\n        获取属性的值get\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest07</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//不使用反射机制给属性赋值</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/**给属性赋值三要素：给s对象的no属性赋值1111\n         * 要素1：对象s\n         * 要素2：no属性\n         * 要素3：1111\n         */</span>\n        student<span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> <span class=\"token number\">1111</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/**读属性值两个要素：获取s对象的no属性的值。\n         * 要素1：对象s\n         * 要素2：no属性\n         */</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//使用反射机制给属性赋值</span>\n        <span class=\"token class-name\">Class</span> studentClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javase.reflectBean.Student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> studentClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// obj就是Student对象。（底层调用无参数构造方法）</span>\n\n        <span class=\"token comment\">// 获取no属性（根据属性的名称来获取Field）</span>\n        <span class=\"token class-name\">Field</span> noField <span class=\"token operator\">=</span> studentClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 给obj对象(Student对象)的no属性赋值</span>\n        <span class=\"token comment\">/*\n            虽然使用了反射机制，但是三要素还是缺一不可：\n                要素1：obj对象\n                要素2：no属性\n                要素3：22222值\n            注意：反射机制让代码复杂了，但是为了一个“灵活”，这也是值得的。\n         */</span>\n        noField<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">22222</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 读取属性的值</span>\n        <span class=\"token comment\">// 两个要素：获取obj对象的no属性的值。</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>noField<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token comment\">// 可以访问私有的属性吗？</span>\n        <span class=\"token class-name\">Field</span> nameField <span class=\"token operator\">=</span> studentClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 打破封装（反射机制的缺点：打破封装，可能会给不法分子留下机会！！！）</span>\n        <span class=\"token comment\">// 这样设置完之后，在外部也是可以访问private的。</span>\n        nameField<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 给name属性赋值</span>\n        nameField<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaowu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取name属性的值</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nameField<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n作为了解内容（不需要掌握）：\n    反射Method\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest08</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Class</span> userServiceClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javase.reflectBean.UserService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取所有的Method（包括私有的！）</span>\n        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> userServiceClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> m <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 获取修饰符列表</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 获取方法的返回值类型</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">getReturnType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 获取方法名</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 方法的修饰符列表（一个方法的参数可能会有多个。）</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parameterTypes <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span> pts <span class=\"token operator\">:</span> parameterTypes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>pts<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n了解一下，不需要掌握（反编译一个类的方法。）\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest09</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">StringBuilder</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Class</span> userServiceClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>userServiceClass<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" class \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>userServiceClass<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" {\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 获取所有的Method（包括私有的！）</span>\n        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> userServiceClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> m <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 获取修饰符列表</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 获取方法的返回值类型</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">getReturnType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 获取方法名</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 方法的修饰符列表（一个方法的参数可能会有多个。）</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parameterTypes <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> parameterTypes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>parameterTypes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> parameterTypes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\") {}\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n重点：必须掌握，通过反射机制怎么调用一个对象的方法？\n    五颗星*****\n\n    反射机制，让代码很具有通用性，可变化的内容都是写到配置文件当中，\n    将来修改配置文件之后，创建的对象不一样了，调用的方法也不同了，\n    但是java代码不需要做任何改动。这就是反射机制的魅力。\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest10</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 不使用反射机制，怎么调用方法</span>\n        <span class=\"token comment\">// 创建对象</span>\n        <span class=\"token class-name\">UserService</span> userService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 调用方法</span>\n        <span class=\"token comment\">/*\n            要素分析：\n                要素1：对象userService\n                要素2：login方法名\n                要素3：实参列表\n                要素4：返回值\n         */</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userService<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"登入成功！\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"登入失败！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//使用反射机制调用方法</span>\n        <span class=\"token class-name\">Class</span> userServiceClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javase.reflectBean.UserService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建对象</span>\n        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> userServiceClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取Method</span>\n        <span class=\"token class-name\">Method</span> loginMethod <span class=\"token operator\">=</span> userServiceClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        Method loginMethod = userServiceClass.getDeclaredMethod(\"login\");//注：没有形参就不传</span>\n        <span class=\"token comment\">// 调用方法</span>\n        <span class=\"token comment\">// 调用方法有几个要素？ 也需要4要素。</span>\n        <span class=\"token comment\">// 反射机制中最最最最最重要的一个方法，必须记住。</span>\n        <span class=\"token comment\">/*\n            四要素：\n            loginMethod方法\n            obj对象\n            \"admin\",\"123\" 实参\n            retValue 返回值\n         */</span>\n        <span class=\"token class-name\">Object</span> resValues <span class=\"token operator\">=</span> loginMethod<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//注：方法返回值是void 结果是null</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>resValues<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n反编译一个类的Constructor构造方法。\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest11</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">StringBuilder</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Class</span> vipClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javase.reflectBean.Vip\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//public class UserService {<!-- --></span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" class \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> constructors <span class=\"token operator\">=</span> vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span> c <span class=\"token operator\">:</span> constructors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//public Vip(int no, String name, String birth, boolean sex) {<!-- --></span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            s.append(c.getName());//包名+类名</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//类名</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parameterTypes <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> parameterTypes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>parameterTypes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> parameterTypes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"){}\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n比上一个例子(ReflectTest11)重要一些！！！\n\n通过反射机制调用构造方法实例化java对象。（这个不是重点）\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest12</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//不适用反射创建对象</span>\n        <span class=\"token class-name\">Vip</span> vip1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Vip</span> vip2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vip</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2001-10-19\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//使用反射机制创建对象（以前）</span>\n        <span class=\"token class-name\">Class</span> vipClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javase.reflectBean.Vip\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 调用无参数构造方法</span>\n        <span class=\"token class-name\">Object</span> obj1 <span class=\"token operator\">=</span> vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Class类的newInstance方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//使用反射机制创建对象（现在）</span>\n        <span class=\"token comment\">// 调用有参数的构造方法怎么办？</span>\n        <span class=\"token comment\">// 第一步：先获取到这个有参数的构造方法</span>\n        <span class=\"token class-name\">Constructor</span> c1 <span class=\"token operator\">=</span> vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 第二步：调用构造方法new对象</span>\n        <span class=\"token class-name\">Object</span> obj2 <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">321</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lsi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1999-10-11\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Constructor类的newInstance方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 获取无参数构造方法</span>\n        <span class=\"token class-name\">Constructor</span> c2 <span class=\"token operator\">=</span> vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> obj3 <span class=\"token operator\">=</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n重点：给你一个类，怎么获取这个类的父类，已经实现了哪些接口？\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest13</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// String举例</span>\n        <span class=\"token class-name\">Class</span> vipClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取String的父类</span>\n        <span class=\"token class-name\">Class</span> superclass <span class=\"token operator\">=</span> vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取String类实现的所有接口（一个类可以实现多个接口。）</span>\n        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interfaces <span class=\"token operator\">=</span> vipClass<span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>superclass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span> i <span class=\"token operator\">:</span> interfaces<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}