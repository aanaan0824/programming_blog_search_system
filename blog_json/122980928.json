{"blogid": "122980928", "writerAge": "码龄1年", "writerBlogNum": "8", "writerCollect": "15", "writerComment": "1", "writerFan": "1", "writerGrade": "1级", "writerIntegral": "81", "writerName": "Violet Skies", "writerProfileAdress": "writer_image\\profile_122980928.jpg", "writerRankTotal": "196134", "writerRankWeekly": "1042701", "writerThumb": "0", "writerVisitNum": "2006", "blog_read_count": "898", "blog_time": "已于 2022-02-17 15:12:27 修改", "blog_title": "三维空间的三角剖分（ 3D Delaunay Triangulated graph）第二部分：剖分三维空间", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>对三维空间进行三角剖分的大体逻辑思路和流程同二维空间的三角剖分是一样的，二维的代码实践过程可以前往本专栏的第一篇文章：<a class=\"link-info\" href=\"https://blog.csdn.net/weixin_56534387/article/details/122367957?spm=1001.2014.3001.5502\" title=\"二维 二维空间的三角剖分\">二维 二维空间的三角剖分</a>。</p>\n<p>在理清楚二维平面下三角剖分的思路之后，我们尝试将其中的一些概念升级一个维度。</p>\n<p>我们先来分析Delaunay三角剖分从二维空间到三维空间过程中的一些变化：</p>\n<p>1.剖分成若干个<strong>三角形单元</strong>——剖分成若干个<strong>四面体单元</strong></p>\n<p>2.根据<strong>x、y</strong>排序点集——根据<strong>x、y、z</strong>排序点集</p>\n<p>3.根据排序好的点集构建<strong>超级三角形</strong>——根据排序好的点集构建<strong>超级四面体</strong></p>\n<p>4.构造用于缓存<strong>边数据</strong>的列表——构造用于缓存<strong>面数据</strong>的列表</p>\n<p>5.计算每个<strong>三角形的外接圆，</strong>判断该<strong>三角形</strong>与点之间的空间关系——计算每个<strong>四面体的外接球，</strong>判断该<strong>四面体</strong>与点之间的空间关系</p>\n<p>6.最终得到一个<strong>三角形</strong>列表——最终得到一个<strong>四面体</strong>列表</p>\n<p>先上效果图（图为Unity中用Gizmos将每个四面体单元顶点连线画出来的预览图）：</p>\n<p><img alt=\"\" height=\"1014\" src=\"image\\3deb8e9e0a1042839d962afa28cc84d7.png\" width=\"1200\"/>​</p>\n<p>尝试加入障碍物AABB包围盒后进行剖分，并用Mesh网格渲染显现：</p>\n<p><img alt=\"\" height=\"451\" src=\"image\\3890de010f58443fbd7b00bac0e57314.png\" width=\"750\"/>​</p>\n<p></p>\n<p><img alt=\"\" height=\"484\" src=\"image\\d9bd9e91ad0e4c3da0a804cf7fed53ee.png\" width=\"750\"/>​</p>\n<p></p>\n<p></p>\n<h1 id=\"%E4%B8%80%E3%80%81%E8%A6%81%E6%B1%82\">一、输入与输出</h1>\n<p>输入：</p>\n<div>\n<pre><code class=\"language-cs\">    /// &lt;summary&gt;\n    /// 点集\n    /// &lt;/summary&gt;\n    public List&lt;Vector3&gt; _vertices = new List&lt;Vector3&gt;();</code></pre>\n</div>\n<p>输出：</p>\n<pre><code class=\"language-cs\">    /// &lt;summary&gt;\n    /// 四面体列表\n    /// &lt;/summary&gt;\n    List&lt;Tetrahedron&gt; _tetrahedron = new List&lt;Tetrahedron&gt;();</code></pre>\n<h1 id=\"%E4%BA%8C%E3%80%81%E6%89%80%E9%9C%80%E8%A6%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%B1%BB%EF%BC%9A\">二、所需要自定义的类：</h1>\n<p></p>\n<h3 id=\"1.Edge%E7%B1%BB%EF%BC%9A%E5%AD%98%E6%94%BE%E4%B8%89%E8%A7%92%E5%BD%A2%E6%AF%8F%E6%9D%A1%E8%BE%B9%E7%9A%84%E6%95%B0%E6%8D%AE\"><a name=\"t3\"></a>1.Surface类：存放四面体每一个面的数据</h3>\n<p>用三个Vector3来定义一个三角形面：</p>\n<div>\n<pre><code class=\"language-cs\">public class Surface\n    {\n        public Vector3 P1;\n        public Vector3 P2;\n        public Vector3 P3;\n        public Surface(Vector3 P1,Vector3 P2,Vector3 P3)\n        {\n            this.P1 = P1;\n            this.P2 = P2;\n            this.P3 = P3;\n        }\n    }</code></pre>\n</div>\n<h3 id=\"2.Triangle%E7%B1%BB%EF%BC%9A%E5%AD%98%E6%94%BE%E6%AF%8F%E4%B8%AA%E4%B8%89%E8%A7%92%E5%BD%A2%E5%8D%95%E5%85%83%E7%9A%84%E6%95%B0%E6%8D%AE\">2.Tetrahedron类：存放每个四面体单元的数据</h3>\n<p>首先是参数和构造函数：</p>\n<p>参数包括四面体的四个顶点和四个三角形面、外接球球心、外接球半径以及一个判断是否为可用四面体的bool值；</p>\n<p>构造函数传入的参数为一个顶点和一个三角形面，即以一个顶点和一个已存在的三角形面生成一个新的四面体；</p>\n<div>\n<pre><code class=\"language-cs\">public class Tetrahedron\n    {\n        public Vector3 P1;\n        public Vector3 P2;\n        public Vector3 P3;\n        public Vector3 P4;\n        public Vector3 Center;\n        public double R;\n        public Surface E1;\n        public Surface E2;\n        public Surface E3;\n        public Surface E4;\n        public bool isBad;\n        public Tetrahedron(Vector3 V, Surface P)\n        {\n            P1 = V;\n            P2 = P.P1;\n            P3 = P.P2;\n            P4 = P.P3;\n            GetTetrahedronExcenterRadius();\n            SurfaceValue();\n        }\n}</code></pre>\n</div>\n<p>其次是四面体类中的一些计算函数：</p>\n<p>（1）.计算该四面体的外接球：</p>\n<pre><code class=\"language-cs\">        /// &lt;summary&gt;\n        /// 计算四面体的外接球\n        /// &lt;/summary&gt;\n        public void GetTetrahedronExcenterRadius()\n        {\n            float x1 = P1.x; float x2 = P2.x; float x3 = P3.x; float x4 = P4.x;\n            float y1 = P1.y; float y2 = P2.y; float y3 = P3.y; float y4 = P4.y;\n            float z1 = P1.z; float z2 = P2.z; float z3 = P3.z; float z4 = P4.z;\n\n          \n            float a11 = x2 - x1;\n            float a12 = y2 - y1;\n            float a13 = z2 - z1;\n            float b1 = (float)0.5 * ((x2 - x1) * (x2 + x1) + (y2 - y1) * (y2 + y1) + (z2 - z1) * (z2 + z1));\n\n            float a21 = x3 - x1;\n            float a22 = y3 - y1;\n            float a23 = z3 - z1;\n            float b2 = (float)0.5 * ((x3 - x1) * (x3 + x1) + (y3 - y1) * (y3 + y1) + (z3 - z1) * (z3 + z1));\n            \n            float a31 = x4 - x1;\n            float a32 = y4 - y1;\n            float a33 = z4 - z1;\n            float b3 = (float)0.5 * ((x4 - x1) * (x4 + x1) + (y4 - y1) * (y4 + y1) + (z4 - z1) * (z4 + z1));\n\n            float temp = a11 * (a22 * a33 - a23 * a32) + a12 * (a23 * a31 - a21 * a33) + a13 * (a21 * a32 - a22 * a31);\n            float x0 = ((a12 * a23 - a13 * a22) * b3 + (a13 * a32 - a12 * a33) * b2 + (a22 * a33 - a23 * a32) * b1) / temp;\n            float y0 = -((a11 * a23 - a13 * a21) * b3 + (a13 * a31 - a11 * a33) * b2 + (a21 * a33 - a23 * a31) * b1) / temp;\n            float z0 = ((a11 * a22 - a12 * a21) * b3 + (a12 * a31 - a11 * a32) * b2 + (a21 * a32 - a22 * a31) * b1) / temp;\n            float radius = (float)Math.Sqrt((x0 - x1) *2 + (y0 - y1) * 2 + (z0 - z1) * 2);\n            Center = new Vector3(x0,y0,z0);\n            R = GetDistance(P1, Center);\n\n        }\n        private double GetDistance(Vector3 A, Vector3 B)\n        {\n            return Math.Sqrt(Math.Pow((A.x - B.x), 2) + Math.Pow((A.y - B.y), 2) + Math.Pow((A.z - B.z), 2));\n        }</code></pre>\n<p>（2）.判断该四面体与一个点之间的空间关系：</p>\n<pre><code class=\"language-cs\">public bool isComtain(Vector3 node)\n        {\n            GetTetrahedronExcenterRadius();\n            if ((node - Center).sqrMagnitude &lt;= R * R)\n                return true;\n            else\n                return false;\n        }</code></pre>\n<p>（3）.通过一个点与一个面构造出四面体后，对该四面体中的面参数进行赋值：</p>\n<pre><code class=\"language-cs\">public void SurfaceValue()\n        {\n            E1 = new Surface(P1, P2,P3);\n            E2 = new Surface(P1,P2, P4);\n            E3 = new Surface(P1, P3,P4);\n            E4 = new Surface(P2, P3,P4);\n        }</code></pre>\n<p>（4）.检查该四面体是否包含超级四面体中的顶点（若包含的话最后要从四面体列表中删去）</p>\n<pre><code class=\"language-cs\">public void Check(Tetrahedron s)\n        {\n            Vector3[] su = new Vector3[4];\n            su[0] = s.P1;\n            su[1] = s.P2;\n            su[2] = s.P3;\n            su[3] = s.P4;\n            if (su.Contains(P1) || su.Contains(P2) || su.Contains(P3)|| su.Contains(P4))\n                isBad = true;\n\n            int i;\n            float ans;\n            Vector3 s1, s2, s3;\n            for (i = 0; i &lt; 4; i++)\n            {\n                s1.x = su[1].x - su[0].x; s1.y = su[1].y - su[0].y; s1.z = su[1].z - su[0].z;\n                s2.x = su[2].x - su[0].x; s2.y = su[2].y - su[0].y; s2.z = su[2].z - su[0].z;\n                s3.x = su[3].x - su[0].x; s3.y = su[3].y - su[0].y; s3.z = su[3].z - su[0].z;\n                ans = s1.x * s2.y * s3.z + s1.y * s2.z * s3.x + s1.z * s2.x * s3.y - s1.z * s2.y * s3.x - s1.x * s2.z * s3.y - s1.y * s2.x * s3.z;\n                if (ans == 0)\n                    isBad = true;\n            }\n\n        }</code></pre>\n<h1 id=\"%E4%B8%89%E3%80%81Delaunay%20%E4%BA%8C%E7%BB%B4%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86%E8%BF%87%E7%A8%8B\">三、Delaunay 二维三角剖分过程</h1>\n<h3 id=\"1.%E5%8F%98%E9%87%8F\"><a name=\"t6\"></a>1.变量</h3>\n<pre><code class=\"language-cs\">    #region 3D三角剖分参数\n\n    /// &lt;summary&gt;\n    /// 点集\n    /// &lt;/summary&gt;\n    public List&lt;Vector3&gt; _vertices = new List&lt;Vector3&gt;();\n\n    /// &lt;summary&gt;\n    /// 超级四面体\n    /// &lt;/summary&gt;\n    Tetrahedron SuperTetrahedron;\n\n    /// &lt;summary&gt;\n    /// 面列表\n    /// &lt;/summary&gt;\n    List&lt;Surface&gt; _surface = new List&lt;Surface&gt;();\n\n    /// &lt;summary&gt;\n    /// 三角形列表\n    /// &lt;/summary&gt;\n    List&lt;Tetrahedron&gt; _tetrahedron = new List&lt;Tetrahedron&gt;();\n    \n\n    #endregion</code></pre>\n<h3 id=\"2.%E5%89%96%E5%88%86%E8%BF%87%E7%A8%8B%EF%BC%9A\">2.剖分过程：</h3>\n<p>（1）第一步：对输入的点集进行<strong>排序</strong>（根据x，y，z依次进行排序）：</p>\n<pre><code class=\"language-cs\"> _vertices = _vertices.OrderBy(o =&gt; o.x).ThenBy(o =&gt; o.y).ThenBy(o =&gt; o.z).ToList();</code></pre>\n<p>（2）第二步：根据排序好的点集构建<strong>超级四面体</strong>（即找到并构造出包含点集中所有节点的四面体）：</p>\n<pre><code class=\"language-cs\">    SuperTetrahedron = FindSuper_Tetrahedron(_vertices);\n\n    /// &lt;summary&gt;\n    /// 找到超级四面体\n    /// &lt;/summary&gt;\n    /// &lt;returns&gt;&lt;/returns&gt;\n    public Tetrahedron FindSuper_Tetrahedron(List&lt;Vector3&gt; _vertices)\n    {\n        Vector3 Circle;\n        float Radius;\n        float xmin = _vertices[0].x;\n        float xmax = _vertices[_vertices.Count - 1].x;\n        float ymin = _vertices[0].y;\n        float ymax = _vertices[_vertices.Count - 1].y;\n        float zmin = _vertices[0].z;\n        float zmax = _vertices[_vertices.Count - 1].z;\n\n        foreach (var dot in _vertices)\n        {\n            if (ymin &gt; dot.y)\n                ymin = dot.y;\n            if (ymax &lt;= dot.y)\n                ymax = dot.y;\n\n            if (zmin &gt; dot.z)\n                zmin = dot.z;\n            if (zmax &lt;= dot.z)\n                zmax = dot.z;\n\n        }\n        Vector3 P1 = new Vector3(xmin, ymin, zmin);\n        Vector3 P3 = new Vector3(xmax, ymax, zmax);\n\n        Circle = (P1 + P3) / 2;\n        Radius = Mathf.Sqrt((P1 - P3).sqrMagnitude);\n\n        Vector3 sP1 = Circle + new Vector3(0, Radius * 3, 0);\n        Vector3 sP2 = Circle + new Vector3(0, -Radius, Radius * 2 * Mathf.Sqrt(2));\n        Vector3 sP3 = Circle + new Vector3(Radius * Mathf.Sqrt(6), -Radius, -Radius * Mathf.Sqrt(2));\n        Vector3 sP4 = Circle + new Vector3(-Radius * Mathf.Sqrt(6), -Radius, -Radius * Mathf.Sqrt(2));\n\n        Tetrahedron super_Tetrahedron = new Tetrahedron(sP1, new Surface(sP2,sP3,sP4));\n        //Debug.LogError((sP1+sP2+sP3+sP4)/4);\n\n        return super_Tetrahedron;\n    }</code></pre>\n<p>同样是用笨笨的方法（逻辑类似于构造AABB包围盒的思路），这一步有待改进；</p>\n<p>（3）第三步：剖分三维空间！</p>\n<p>剖分的过程和二维的思路一样，从超级四面体开始，找到存在与四面体外接球内的点对该四面体进行分解重构：</p>\n<p>首先将刚刚构造好的超级四面体的四个顶点加入点集列表：</p>\n<pre><code class=\"language-cs\">        _vertices.Add(SuperTetrahedron.P1);\n        _vertices.Add(SuperTetrahedron.P2);\n        _vertices.Add(SuperTetrahedron.P3);\n        _vertices.Add(SuperTetrahedron.P4);</code></pre>\n<p>先别着急剖分！记得先初始化四面体列表和面缓存列表，然后将超级四面体加入四面体列表：</p>\n<pre><code class=\"language-cs\">        _tetrahedron.Clear();\n        _surface.Clear();\n        _tetrahedron.Add(SuperTetrahedron);</code></pre>\n<p>然后就可以大刀阔斧的进行剖分啦！循环走起！</p>\n<pre><code class=\"language-cs\"> for (int i = 0; i &lt; _vertices.Count; i++)\n        {\n            _surface.Clear();\n            int index = 0;\n            while (index &lt; _tetrahedron.Count)\n            {\n                if (_tetrahedron[index].isComtain(_vertices[i]))\n                {\n                    AddSurface(_surface, _tetrahedron[index].E1);\n                    AddSurface(_surface, _tetrahedron[index].E2);\n                    AddSurface(_surface, _tetrahedron[index].E3);\n                    AddSurface(_surface, _tetrahedron[index].E4);\n                    _tetrahedron.Remove(_tetrahedron[index]);\n                }\n                else\n                {\n                    index++;\n                }\n            }\n            foreach (var e in _surface)\n            {\n                Tetrahedron Ttemp = new Tetrahedron(_vertices[i], e);\n                _tetrahedron.Add(Ttemp);\n            }\n        }</code></pre>\n<p>还记得二维剖分中的AddEdge()函数吗？三维剖分中的AddSurface()函数也是一样的：</p>\n<pre><code class=\"language-cs\">public void AddSurface(List&lt;Surface&gt; _surface, Surface E)\n    {\n        bool isAdd = true;\n        int index = 0;\n        while (index &lt; _surface.Count)\n        {\n            if (_surface[index].P1 == E.P1 &amp;&amp; _surface[index].P2 == E.P2 &amp;&amp; _surface[index].P3 == E.P3\n                || _surface[index].P1 == E.P1 &amp;&amp; _surface[index].P2 == E.P3 &amp;&amp; _surface[index].P3 == E.P2\n                || _surface[index].P1 == E.P3 &amp;&amp; _surface[index].P2 == E.P2 &amp;&amp; _surface[index].P3 == E.P1\n                || _surface[index].P1 == E.P2 &amp;&amp; _surface[index].P2 == E.P1 &amp;&amp; _surface[index].P3 == E.P3\n                || _surface[index].P1 == E.P2 &amp;&amp; _surface[index].P2 == E.P3 &amp;&amp; _surface[index].P3 == E.P1\n                || _surface[index].P1 == E.P3 &amp;&amp; _surface[index].P2 == E.P1 &amp;&amp; _surface[index].P3 == E.P2)\n            {\n                _surface.Remove(_surface[index]);\n                isAdd = false;\n            }\n            else\n            {\n                index++;\n            }\n        }\n        if (isAdd)\n        {\n            _surface.Add(E);\n        }\n    }</code></pre>\n<p>剖分完成后，我们开始筛查哪些四面体用了超级四面体的四个顶点，因为这四个顶点是我们构造出来的本来是不存在的，所以我们要将这些四面体删去：</p>\n<pre><code class=\"language-cs\">        int Tindex = 0;\n        while (Tindex &lt; _tetrahedron.Count)\n        {\n            _tetrahedron[Tindex].Check(SuperTetrahedron);\n            if (_tetrahedron[Tindex].isBad)\n                _tetrahedron.Remove(_tetrahedron[Tindex]);\n            else\n                Tindex++;\n        }</code></pre>\n<p>最后，记得移去超级四面体的四个顶点和超级四面体本身：</p>\n<pre><code class=\"language-cs\">        _tetrahedron.Remove(SuperTetrahedron);\n        _vertices.Remove(SuperTetrahedron.P1);\n        _vertices.Remove(SuperTetrahedron.P2);\n        _vertices.Remove(SuperTetrahedron.P3);\n        _vertices.Remove(SuperTetrahedron.P4);</code></pre>\n<p>三维空间的三角初步剖分就完成了：</p>\n<p><img alt=\"\" height=\"1200\" src=\"image\\84b7d6bf001c436093d67bfd9f6a2e3b.png\" width=\"1200\"/></p>\n<p></p>\n<p>不过目前的三维空间剖分是不完美的，因为在这样的剖分情况下会在很多情况下产生细而长的四面体，这是我们不希望得到的四面体，所以目前方案还需进行优化。</p>\n</div>\n</div>"}