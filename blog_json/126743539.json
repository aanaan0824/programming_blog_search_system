{"blogid": "126743539", "writerAge": "码龄12年", "writerBlogNum": "455", "writerCollect": "335", "writerComment": "36", "writerFan": "6615", "writerGrade": "6级", "writerIntegral": "4979", "writerName": "技术布道师", "writerProfileAdress": "writer_image\\profile_126743539.jpg", "writerRankTotal": "3672", "writerRankWeekly": "1013", "writerThumb": "74", "writerVisitNum": "181510", "blog_read_count": "17", "blog_time": "于 2022-09-07 13:06:56 发布", "blog_title": "JVM中的-Xms -Xmx -XXnewSize -XXMaxnewSize -Xmn -XXPermSize -XXMaxPermSize区别介绍", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h3><a id=\"_2\"></a><strong>一、配置参数使用条件</strong></h3>\n<p><strong>在不断重构代码的情况下，仍然不能解决内存溢出的问题(OutOfMemoryError等)，这种情况下就需要使用JVM的配置参数对JVM运行时各个区域的内存情况进行相应的分配。</strong></p>\n<h3><a id=\"JVM_6\"></a><strong>二、JVM存储数据的内容的内存分为</strong></h3>\n<p><strong>①堆区（Java堆：所有的线程共享该区域）：通过new的方式创建的对象(一个类的实例)、数组所占的空间。</strong></p>\n<p><strong>注意：1）堆区还细分为新生代（Eden空间、From Survivor空间、To Survivor空间）、老年代（Tenured Generation空间）。</strong></p>\n<p><strong>2）Java垃圾回收机制只作用于堆区，对非堆区没有作用。</strong></p>\n<p><strong>②非堆区：代码、常量、外部访问(比如流在传输数据时所占用的资源)等。</strong></p>\n<h3><a id=\"_16\"></a><strong>三、常见的参数种类(配置内存)</strong></h3>\n<p><strong>（1）配置堆区的参数：-Xms、-Xmx、-XX:newSize、-XX:MaxnewSize、-Xmn</strong></p>\n<p><strong>（2）配置非堆区的参数：-XX:PermSize、-XX:MaxPermSize</strong></p>\n<h3><a id=\"_22\"></a><strong>四、堆区参数配置</strong></h3>\n<p><strong>（1）-Xms：Java虚拟机堆区内存初始内存分配的大小，按照实际情况进行分配（一般为操作系统可用内存的1/64大小）。</strong></p>\n<p><strong>（2）-Xmx：Java虚拟机堆区内存可被分配的最大上限（一般为操作系统可用内存的1/4大小）。</strong></p>\n<p><strong>注意：①一般-Xms、-Xmx两个参数会配置相同的值（优点：能够在Java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源）。</strong></p>\n<p><strong>（3）-XX:newSize:新生代初始化内存的大小(注意：该值需要小于-Xms的值)。</strong></p>\n<p><strong>（4）-XX:MaxnewSize:新生代可被分配的内存的最大上限(注意：该值需要小于-Xmx的值)。</strong></p>\n<p><strong>（5）-Xmn:对-XX:newSize、-XX:MaxnewSize两个参数同时进行配置（注意：JDK1.4之后才有该参数）。</strong></p>\n<h3><a id=\"_36\"></a><strong>五、非堆区参数配置</strong></h3>\n<p><strong>（1）-XX:PermSize:非堆区初始化内存分配大小。</strong></p>\n<p><strong>（2）-XX:MaxPermSize:非堆区分配的内存的最大上限。</strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}