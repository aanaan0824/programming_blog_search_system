{"blogid": "126643709", "writerAge": "码龄6年", "writerBlogNum": "42", "writerCollect": "18", "writerComment": "11", "writerFan": "142", "writerGrade": "3级", "writerIntegral": "461", "writerName": "msspansion", "writerProfileAdress": "writer_image\\profile_126643709.jpg", "writerRankTotal": "35202", "writerRankWeekly": "17211", "writerThumb": "9", "writerVisitNum": "12844", "blog_read_count": "226", "blog_time": "于 2022-09-02 08:41:19 发布", "blog_title": "正点原子STM32F103 DMA代码例程魔改", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>摘要：学习了正点原子MINI板子（STM32F103）的DMA教程之后，感觉没怎么学会，就得自己改改还能跑起来才算会了。魔改1：改为串口回显，串口发送什么，用DMA传回来什么。魔改2为立马回显，不需要按键按下去。</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1_3\">魔改1：串口回显</a></li><li><ul><li><a href=\"#1_7\">步骤1</a></li><li><a href=\"#2_21\">步骤2</a></li><li><a href=\"#3_33\">步骤3</a></li><li><a href=\"#4_38\">步骤4</a></li><li><a href=\"#_46\">结果展示</a></li></ul>\n</li><li><a href=\"#2_52\">魔改2</a></li><li><ul><li><a href=\"#_54\">步骤</a></li><li><a href=\"#_63\">结果</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"1_3\"></a>魔改1：串口回显</h1>\n<p>原先的程序是，固定的字符串，发送100遍，没什么意思</p>\n<ol><li>本来的思路是打算一个串口1，继续这样按键发送，自己再搞个串口做回显，后来突然意识到一个问题，在串口调试助手发送的数据，到底是给哪个串口的呢？后来意识到只有串口1可用，别的串口没有CH340，当然也能跳线，我的意思是只有一个CH340，一次只能一个串口，反正这个已经掌握了，就不用固定的字符发送了。</li><li>在1中本来打算重新使能一个通道的，以为发送是(u32)&amp;USART1-&gt;DR，接收是(u32)&amp;USART1-&gt;SR，但是总感觉怪怪的（英文好像对不上），后来查手册知道这个是一个名字两个寄存器，根据读写操作进行区分</li></ol>\n<h2><a id=\"1_7\"></a>步骤1</h2>\n<p>注释掉部分不用的代码</p>\n<pre><code class=\"prism language-c\">\t<span class=\"token comment\">//注释掉的部分</span>\n<span class=\"token comment\">//\tfor(i=0;i&lt;SendBuff_LENTH;i++)//Ìî³äASCII×Ö·û¼¯Êý¾Ý</span>\n<span class=\"token comment\">//    {<!-- --></span>\n<span class=\"token comment\">//\t\tif(t&gt;=TEXT_LENTH)//¼ÓÈë»»ÐÐ·û</span>\n<span class=\"token comment\">//\t\t{ </span>\n<span class=\"token comment\">//\t\t\tSendBuff[i++]=0x0d; </span>\n<span class=\"token comment\">//\t\t\tSendBuff[i]=0x0a; </span>\n<span class=\"token comment\">//\t\t\tt=0;</span>\n<span class=\"token comment\">//\t\t}else SendBuff[i]=TEXT_TO_SEND[t++];//¸´ÖÆTEXT_TO_SENDÓï¾ä    </span>\n<span class=\"token comment\">//    }</span>\n</code></pre>\n<h2><a id=\"2_21\"></a>步骤2</h2>\n<p>MYDMA_Config函数改为下图，并搬进while里面</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tt<span class=\"token operator\">=</span><span class=\"token function\">KEY_Scan</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">==</span>KEY0_PRES<span class=\"token punctuation\">)</span><span class=\"token comment\">//KEY0°´ÏÂ</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">MYDMA_Config</span><span class=\"token punctuation\">(</span>DMA1_Channel4<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>USART1<span class=\"token operator\">-&gt;</span>DR<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">)</span>USART_RX_BUF<span class=\"token punctuation\">,</span>USART_RX_STA <span class=\"token operator\">&amp;</span><span class=\"token number\">0x3F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"3_33\"></a>步骤3</h2>\n<ol><li>修改显示百分比</li></ol>\n<pre><code class=\"prism language-c\">pro<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>pro<span class=\"token operator\">/</span>USART_RX_STA<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"4_38\"></a>步骤4</h2>\n<ol><li>将串口接收字符缓存位置归0，串口缓存是不断往后缓存的，而我们DMA发送是从起始位置发送n个字节，这样如果不断往后缓存，而发送的字节不变的话，很可能我们第二次发送给单片机的东西，在缓存数组的靠后位置，而我们发送前n个字节的时候，就很可能还是上一次发送的字符，所以我们让新缓存的字符，覆盖掉原先的字符</li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token function\">LCD_ShowNum</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token number\">170</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\n<span class=\"token function\">LCD_ShowString</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Transimit Finished!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\nUSART_RX_STA<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_46\"></a>结果展示</h2>\n<p>操作步骤:</p>\n<ol><li>发送第一句话，按下KEY0</li><li>发送第二句话，按下KEY0</li><li>发送第n句话，按下KEY0<br/> <img alt=\"在这里插入图片描述\" src=\"image\\11b4a4271daf4efdad591614621d9ae2.png\"/></li></ol>\n<h1><a id=\"2_52\"></a>魔改2</h1>\n<p>老是要按下按键才能回显，太麻烦了，想要发送之后立马回显的，不需要按下按键的。</p>\n<h2><a id=\"_54\"></a>步骤</h2>\n<p>在uasart.c文件中定义一个RX_state,用来表明串口接收完成</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\aba885d2dc7d4065b5a44454a6af6913.png\"/></p>\n<p>再在主函数里面注释掉按键的，改为根据RX_state来判断，回显完成，最后把RX_state=0；<br/> <img alt=\"在这里插入图片描述\" src=\"image\\bbebe3f0910d428e849f72d2e7e31d04.png\"/><img alt=\"在这里插入图片描述\" src=\"image\\1a4b19e3fb1c4a1385e13b953263eb4f.png\"/></p>\n<h2><a id=\"_63\"></a>结果</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\fc32a230e12943409333ba92c6a33ad4.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}