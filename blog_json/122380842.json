{"blogid": "122380842", "writerAge": "码龄3年", "writerBlogNum": "82", "writerCollect": "240", "writerComment": "20", "writerFan": "358", "writerGrade": "4级", "writerIntegral": "959", "writerName": "hello_JeremyWang", "writerProfileAdress": "writer_image\\profile_122380842.jpg", "writerRankTotal": "106847", "writerRankWeekly": "279118", "writerThumb": "104", "writerVisitNum": "46975", "blog_read_count": "11598", "blog_time": "于 2022-01-08 16:02:37 发布", "blog_title": "Python中类的继承", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"1__0\"></a>1. 单继承</h1>\n<p>继承的主要作用是实现代码的重用。继承使得子类拥有父类的<strong>方法</strong>和<strong>属性</strong>。<br/> 直接来看一个例子吧。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">animal</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吃\"</span><span class=\"token punctuation\">)</span>\n\t\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">drink</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"喝\"</span><span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">dog</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">dark</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"汪汪叫\"</span><span class=\"token punctuation\">)</span>\n\t\n\ngoudan <span class=\"token operator\">=</span> dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ngoudan<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ngoudan<span class=\"token punctuation\">.</span>drink<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>从上面的代码可以看出，在编写<strong>dog</strong>类的时候，我们并没有重写<strong>eat</strong>和<strong>drink</strong>两个方法。我们只需要在<strong>dog</strong>后面的括号中加上父类的名字即可。当子类继承了父类，子类就可以直接使用父类中的方法了。在本例中，<strong>goudan</strong>可以直接使用animal类中的<strong>eat</strong>和<strong>drink</strong>两个方法。<br/> 而且一个神奇的事情是，继承是具有传递性的。子类拥有父类的方法和属性，同时也具有父类的父类所具有的属性。</p>\n<h1><a id=\"2__24\"></a>2. 继承中的方法重写</h1>\n<p>有时候，父类中的方法并不能完成满足子类的需求。这时候我们就需要方法重写了。子类方法重写一般有两种情况：</p>\n<ul><li>覆盖父类的方法</li><li>对父类的方法进行扩展</li></ul>\n<p>一种简单的方法是直接重写相应的方法。下面这个例子就是重写了<strong>drink</strong>这个方法。当使用<strong>goudan</strong>调用<strong>drink</strong>这个方法方法时，结果并不是<strong>喝</strong>而是<strong>拿舌头喝水</strong>。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">animal</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吃\"</span><span class=\"token punctuation\">)</span>\n\t\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">drink</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"喝\"</span><span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">dog</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">drink</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"拿舌头喝水\"</span><span class=\"token punctuation\">)</span>\n\t\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">dark</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"汪汪叫\"</span><span class=\"token punctuation\">)</span>\n\t\n\ngoudan <span class=\"token operator\">=</span> dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ngoudan<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ngoudan<span class=\"token punctuation\">.</span>drink<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>当我们的需求不是简单的覆盖父类中的方法，而是在父类方法的基础上对方法进行扩展。具体的做法是：</p>\n<ol><li>在需要的位置使用<code>super().父类方法</code> 来调用父类方法的执行</li><li>代码的其他位置针对子类的需求，编写子类持有的代码实现</li></ol>\n<p>我们来看一个例子，此时<strong>goudan</strong>在调用<strong>drink</strong>方法的时候，会输出<strong>喝</strong>和<strong>拿舌头喝水</strong>两个输出。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">animal</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吃\"</span><span class=\"token punctuation\">)</span>\n\t\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">drink</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"喝\"</span><span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">dog</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">drink</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\"># 1. 根据子类的需求编写特定的代码</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"拿舌头喝水\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\"># 2. 使用super继承父类中的fangfa</span>\n\t\t<span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>drink\n\t\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">dark</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"汪汪叫\"</span><span class=\"token punctuation\">)</span>\n\t\n\ngoudan <span class=\"token operator\">=</span> dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ngoudan<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ngoudan<span class=\"token punctuation\">.</span>drink<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"3__80\"></a>3. 多继承</h1>\n<p>对于Python而言，一个子类可以有多个父类。多继承的基本语法是比较简单的。话不多说，直接看一个例子</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>：\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n\t\t\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">pass</span>\n\nc <span class=\"token operator\">=</span> C<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}