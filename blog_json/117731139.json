{"blogid": "117731139", "writerAge": "码龄2年", "writerBlogNum": "22", "writerCollect": "703", "writerComment": "28", "writerFan": "73", "writerGrade": "3级", "writerIntegral": "542", "writerName": "图灵。", "writerProfileAdress": "writer_image\\profile_117731139.jpg", "writerRankTotal": "37410", "writerRankWeekly": "87525", "writerThumb": "77", "writerVisitNum": "51270", "blog_read_count": "33141", "blog_time": "已于 2022-05-26 17:08:40 修改", "blog_title": "黑马程序员c++讲义课件笔记", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>黑马程序员c++讲义课件笔记</strong><br/> 基础<a href=\"https://blog.csdn.net/ClaireSy/article/details/120155878\">https://blog.csdn.net/ClaireSy/article/details/108422945</a><br/> （或<a href=\"https://blog.csdn.net/m0_37882192/article/details/109103335\">https://blog.csdn.net/m0_37882192/article/details/109103335</a>)<br/> 核心<a href=\"https://blog.csdn.net/ClaireSy/article/details/108423047\">https://blog.csdn.net/ClaireSy/article/details/108423047</a><br/> 提高<a href=\"https://blog.csdn.net/ClaireSy/article/details/108423061\">https://blog.csdn.net/ClaireSy/article/details/108423061</a></p>\n<p>配套视频：<br/> <a href=\"https://www.bilibili.com/video/BV1et411b73Z\">https://www.bilibili.com/video/BV1et411b73Z</a></p>\n<p>讲义笔记下载<a href=\"https://download.csdn.net/download/weixin_48953899/50276154\">https://download.csdn.net/download/weixin_48953899/50276154</a><br/> <strong>笔记为基础、核心、提高三和一。</strong><br/> <strong>------------------------------------分割线--------------------------------------</strong><br/> 下面为连接内容的部分展示，可直接查看连接，无需看下文。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8dacd690f075484c96a288737a827b49.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f538d8a52b934bd7aeb009dd4357b32b.png\"/><br/> <strong>C++基础入门</strong><br/> 1 C++初识<br/> 1.1 第一个C++程序<br/> 编写一个C++程序总共分为4个步骤</p>\n<p>创建项目<br/> 创建文件<br/> 编写代码<br/> 运行程序<br/> 1.1.1 创建项目<br/> ​ Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</p>\n<p>1.1.2 创建文件<br/> 右键源文件，选择添加-&gt;新建项<br/> 给C++文件起个名称，然后点击添加即可。</p>\n<p>1.1.3 编写代码<br/> #include<br/> using namespace std;</p>\n<p>int main() {<!-- --></p>\n<pre><code>cout &lt;&lt; \"Hello world\" &lt;&lt; endl;\n\nsystem(\"pause\");\n\nreturn 0;\n</code></pre>\n<p>}</p>\n<p><strong>C++核心编程</strong><br/> 本阶段主要针对C++面向对象编程技术做详细讲解，探讨C++中的核心和精髓。</p>\n<p>配套视频：<br/> https://www.bilibili.com/video/BV1et411b73Z<br/> 只是为方便学习，不做其他用途，在此发布C++基础入门部分配套讲义，原作者为黑马程序</p>\n<p>1 内存分区模型<br/> C++程序在执行时，将内存大方向划分为4个区域</p>\n<p>代码区：存放函数体的二进制代码，由操作系统进行管理的<br/> 全局区：存放全局变量和静态变量以及常量<br/> 栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等<br/> 堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收<br/> 内存四区意义：</p>\n<p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p>\n<p>1.1 程序运行前<br/> ​ 在程序编译后，生成了exe可执行程序，未执行该程序前分为两个区域</p>\n<p>​ 代码区：</p>\n<p>​ 存放 CPU 执行的机器指令</p>\n<p>​ 代码区是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p>\n<p>​ 代码区是只读的，使其只读的原因是防止程序意外地修改了它的指令</p>\n<p>​ 全局区：</p>\n<p>​ 全局变量和静态变量存放在此.</p>\n<p>​ 全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p>\n<p>​ 该区域的数据在程序结束后由操作系统释放.</p>\n<p>示例：</p>\n<p>//全局变量<br/> int g_a = 10;<br/> int g_b = 10;</p>\n<p>//全局常量<br/> const int c_g_a = 10;<br/> const int c_g_b = 10;</p>\n<p>int main() {<!-- --></p>\n<pre><code>//局部变量\nint a = 10;\nint b = 10;\n\n//打印地址\ncout &lt;&lt; \"局部变量a地址为： \" &lt;&lt; (int)&amp;a &lt;&lt; endl;\ncout &lt;&lt; \"局部变量b地址为： \" &lt;&lt; (int)&amp;b &lt;&lt; endl;\n\ncout &lt;&lt; \"全局变量g_a地址为： \" &lt;&lt;  (int)&amp;g_a &lt;&lt; endl;\ncout &lt;&lt; \"全局变量g_b地址为： \" &lt;&lt;  (int)&amp;g_b &lt;&lt; endl;\n\n//静态变量\nstatic int s_a = 10;\nstatic int s_b = 10;\n\ncout &lt;&lt; \"静态变量s_a地址为： \" &lt;&lt; (int)&amp;s_a &lt;&lt; endl;\ncout &lt;&lt; \"静态变量s_b地址为： \" &lt;&lt; (int)&amp;s_b &lt;&lt; endl;\n\ncout &lt;&lt; \"字符串常量地址为： \" &lt;&lt; (int)&amp;\"hello world\" &lt;&lt; endl;\ncout &lt;&lt; \"字符串常量地址为： \" &lt;&lt; (int)&amp;\"hello world1\" &lt;&lt; endl;\n\ncout &lt;&lt; \"全局常量c_g_a地址为： \" &lt;&lt; (int)&amp;c_g_a &lt;&lt; endl;\ncout &lt;&lt; \"全局常量c_g_b地址为： \" &lt;&lt; (int)&amp;c_g_b &lt;&lt; endl;\n\nconst int c_l_a = 10;\nconst int c_l_b = 10;\ncout &lt;&lt; \"局部常量c_l_a地址为： \" &lt;&lt; (int)&amp;c_l_a &lt;&lt; endl;\ncout &lt;&lt; \"局部常量c_l_b地址为： \" &lt;&lt; (int)&amp;c_l_b &lt;&lt; endl;\n\nsystem(\"pause\");\n\nreturn 0;\n</code></pre>\n<p>}</p>\n<p>打印结果：</p>\n<p>总结：</p>\n<p>C++中在程序运行前分为全局区和代码区<br/> 代码区特点是共享和只读<br/> 全局区中存放全局变量、静态变量、常量<br/> 常量区中存放 const修饰的全局常量 和 字符串常量<br/> 1.2 程序运行后<br/> ​ 栈区：</p>\n<p>​ 由编译器自动分配释放, 存放函数的参数值,局部变量等</p>\n<p>​ 注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p>\n<p>示例：</p>\n<p>int * func()<br/> {<!-- --><br/> int a = 10;<br/> return &amp;a;<br/> }</p>\n<p>int main() {<!-- --></p>\n<pre><code>int *p = func();\n\ncout &lt;&lt; *p &lt;&lt; endl;\ncout &lt;&lt; *p &lt;&lt; endl;\n\nsystem(\"pause\");\n\nreturn 0;\n</code></pre>\n<p>}</p>\n<p>​ 堆区：</p>\n<p>​ 由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p>\n<p>​ 在C++中主要利用new在堆区开辟内存</p>\n<p>示例：</p>\n<p>int* func()<br/> {<!-- --><br/> int* a = new int(10);<br/> return a;<br/> }</p>\n<p>int main() {<!-- --></p>\n<pre><code>int *p = func();\n\ncout &lt;&lt; *p &lt;&lt; endl;\ncout &lt;&lt; *p &lt;&lt; endl;\n\nsystem(\"pause\");\n\nreturn 0;\n</code></pre>\n<p>}<br/> 总结：</p>\n<p>堆区数据由程序员管理开辟和释放</p>\n<p>堆区数据利用new关键字</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}