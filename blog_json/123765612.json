{"blogid": "123765612", "writerAge": "码龄2年", "writerBlogNum": "14", "writerCollect": "6", "writerComment": "0", "writerFan": "219", "writerGrade": "2级", "writerIntegral": "149", "writerName": "Caitlin要学习", "writerProfileAdress": "writer_image\\profile_123765612.jpg", "writerRankTotal": "125667", "writerRankWeekly": "277602", "writerThumb": "5", "writerVisitNum": "6109", "blog_read_count": "975", "blog_time": "于 2022-03-26 22:47:42 发布", "blog_title": "C#类（一）：类和对象---private、protected、public", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>private、protected、public</h3>\n<ul><li><a href=\"#_2\">任务描述</a></li><li><a href=\"#_9\">相关知识</a></li><li><a href=\"#_164\">编程要求</a></li><li><a href=\"#_193\">我的代码</a></li><li><a href=\"#_261\">题目链接</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>任务描述</h1>\n<p>随着我国国力逐渐强盛，在多个城市中已经搭建了更为方便的公共交通：地铁。</p>\n<p>搭乘地铁的之前，工作人员会对所有乘客进行安检，除了乘客的提包，而且还要确保乘客没有随身携带危险物品。</p>\n<p>本关任务：编写一个乘客类，乘客成员属性包括提包和衣物，其中提包对工作人员是可见的，而衣物需要手动安检。</p>\n<h1><a id=\"_9\"></a>相关知识</h1>\n<p><strong>public</strong><br/> 关键字public是一个成员访问修饰符，表示所修饰的内容是公共的，访问不受限制。例如，我们使用public修饰一个类和该类的成员函数：</p>\n<pre><code class=\"prism language-bash\">public class Person<span class=\"token punctuation\">{<!-- --></span>\n    string name<span class=\"token punctuation\">;</span>\n    int age<span class=\"token punctuation\">;</span>\n    public <span class=\"token function-name function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        name <span class=\"token operator\">=</span> <span class=\"token string\">\"Jackie\"</span><span class=\"token punctuation\">;</span>\n        age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    public void <span class=\"token function-name function\">saying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        Console.Writeline<span class=\"token punctuation\">(</span><span class=\"token string\">\"my name is\"</span>+name+<span class=\"token string\">\", my age is\"</span>+age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>那么我们可在别处访问此类，并使用该函数：</p>\n<pre><code class=\"prism language-bash\">public class myCaller<span class=\"token punctuation\">{<!-- --></span>\n    public static void Main<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        Person p <span class=\"token operator\">=</span> new Person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//公共类Person实例化一个对象，调用Person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>构造函数初始化\n        p.saying<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//对象直接调用saying<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们在myCaller类中调用Person类，并实例化一个对象，使用该对象的公共方法saying()。需要注意的是，myCaller类和Person类可处在不同的项目中。</p>\n<p><strong>internal</strong><br/> 关键字internal所修饰的类，将限制为内部类，即只有当前项目中的代码才能访问它。internal用法如下所示：</p>\n<pre><code class=\"prism language-bash\">internal class Person<span class=\"token punctuation\">{<!-- --></span>\n    //类成员\n<span class=\"token punctuation\">}</span>\n具体实例：\n\nnamespace J3\n<span class=\"token punctuation\">{<!-- --></span>\n    //使用internal修饰为内部类\n    internal class Person\n    <span class=\"token punctuation\">{<!-- --></span>\n        string name<span class=\"token punctuation\">;</span>\n        int age<span class=\"token punctuation\">;</span>\n        public <span class=\"token function-name function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            name <span class=\"token operator\">=</span> <span class=\"token string\">\"Jackie\"</span><span class=\"token punctuation\">;</span>\n            age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        public void <span class=\"token function-name function\">saying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            Console.WriteLine<span class=\"token punctuation\">(</span><span class=\"token string\">\"my name is \"</span>+name+<span class=\"token string\">\", my age is \"</span>+age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    public class myCaller <span class=\"token punctuation\">{<!-- --></span>\n        public static void Main<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            Person p <span class=\"token operator\">=</span> new Person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            p.saying<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>此段代码中，两个类在同一个namespace中，所以可在第二个类myCaller中调用并实例化类Person。注意，由于internal修饰为内部类，可访问性低于public所修饰的类，之后接触到继承的时候，内部类是无法被公共类所继承的</p>\n<p><strong>private</strong><br/> 关键字private将修饰的内容访问限制为私有的。使用方法如下：<br/> private &lt;修饰内容&gt;<br/> 例如我们可用private修饰类成员变量：</p>\n<pre><code class=\"prism language-bash\">public class Person<span class=\"token punctuation\">{<!-- --></span>\n    private string name<span class=\"token punctuation\">;</span>\n    private int age<span class=\"token punctuation\">;</span>\n    //<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当使用private修饰之后，在其他地方便不能直接访问Person类的属性。例如下面的做法编译器将会报错：</p>\n<pre><code class=\"prism language-bash\">public class Person<span class=\"token punctuation\">{<!-- --></span>\n    private string name<span class=\"token punctuation\">;</span>\n    private int age<span class=\"token punctuation\">;</span>\n    //<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">}</span>\npublic class myCaller<span class=\"token punctuation\">{<!-- --></span>\n    public static void Main<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        Person p <span class=\"token operator\">=</span> new Person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        p.name <span class=\"token operator\">=</span> <span class=\"token string\">\"Jackie\"</span><span class=\"token punctuation\">;</span>  //报错，受保护级别限制\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>相对于private，public修饰限定的成员则可以任意调用，可自行尝试。默认情况下，类成员前的private可省去，例如：</p>\n<p>public class Person{<!-- --><br/> string name;<br/> int age;<br/> //…<br/> }<br/> 此时，若没有指定修饰符，默认为private。</p>\n<p><strong>protected</strong><br/> 关键字protected所修饰的内容为半公开化，与private基本相似。但当两个类存在继承关系的时候，例如类A继承于类B，那么对于类B则可访问protected修饰的类成员，而不可访问private修饰的类成员。继承将在之后实训学习，此处仅给出一个实例。</p>\n<p>具体实例如下：</p>\n<pre><code class=\"prism language-bash\">namespace J3\n<span class=\"token punctuation\">{<!-- --></span>\n    class Person\n    <span class=\"token punctuation\">{<!-- --></span>\n        //使用protected修饰\n        protected string skinColor<span class=\"token punctuation\">;</span>\n        public void <span class=\"token function-name function\">saying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            Console.WriteLine<span class=\"token punctuation\">(</span><span class=\"token string\">\"my skin color is \"</span> + skinColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    //WhitePerson类继承Person类\n    class WhitePerson <span class=\"token builtin class-name\">:</span> Person <span class=\"token punctuation\">{<!-- --></span>\n        static void Main<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            WhitePerson wp <span class=\"token operator\">=</span> new WhitePerson<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            wp.skinColor <span class=\"token operator\">=</span> <span class=\"token string\">\"White\"</span><span class=\"token punctuation\">;</span>\n            wp.saying<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果如下：</p>\n<p>my skin color is White</p>\n<p>继承可理解为将普遍性向特殊性的一种拓展。代码中WhitePerson表示白色人种，具有“人”的所有特性，但从肤色上又与其他人种有所区别。继承用法简单介绍如下：</p>\n<pre><code class=\"prism language-bash\">class A <span class=\"token builtin class-name\">:</span> B<span class=\"token punctuation\">{<!-- --></span>\n    //类成员代码\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在类A和类B之间添加符号：表示类A继承类B。</p>\n<p>所以在类B中可直接访问类A中protected修饰的成员。注：两个类可在不同的项目文件中。</p>\n<h1><a id=\"_164\"></a>编程要求</h1>\n<p>本关的编程任务是补全右侧代码片段中Begin至End中间的代码，具体要求如下：</p>\n<p>编写一个乘客类Passenger，该类包括两个bool属性：包裹package和衣物clothing。</p>\n<p>其中包裹对Worker类可见，衣物对Worker类不可见，需通过函数getClothing()获取。</p>\n<p>在Worker类中，通过Passenger类构造函数实例化两个对象p1、p2，使用函数testing()检测p1、p2属性值</p>\n<p>程序运行正常，输出与测试预期输出相符</p>\n<p>测试说明<br/> 测试过程：</p>\n<p>平台将编译用户补全后的代码，并根据程序的输出判断程序是否正确。<br/> 以下是测试样例：</p>\n<p>测试输入：</p>\n<p>预期输出：</p>\n<p>Pass</p>\n<p>Pass</p>\n<p>Pass</p>\n<p>Dangerous</p>\n<h1><a id=\"_193\"></a>我的代码</h1>\n<pre><code class=\"prism language-bash\">using System<span class=\"token punctuation\">;</span>\nusing System.Collections.Generic<span class=\"token punctuation\">;</span>\nusing System.Linq<span class=\"token punctuation\">;</span>\nusing System.Text<span class=\"token punctuation\">;</span>\nusing System.Threading.Tasks<span class=\"token punctuation\">;</span>\n\nnamespace J3\n<span class=\"token punctuation\">{<!-- --></span>\n    /********** Begin *********/\n    //Passenger类\n      class Passenger\n    <span class=\"token punctuation\">{<!-- --></span>\n        public bool package<span class=\"token punctuation\">;</span>\n        private  bool clothing<span class=\"token punctuation\">;</span>\n        // private bool clothing<span class=\"token punctuation\">;</span>\n        public Passenger<span class=\"token punctuation\">(</span>bool package, bool clothing<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            this.package <span class=\"token operator\">=</span> package<span class=\"token punctuation\">;</span>\n            this.clothing <span class=\"token operator\">=</span> clothing<span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n     public bool <span class=\"token function-name function\">getClothing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token builtin class-name\">return</span> this.clothing<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    /********** End *********/\n\n    class Worker\n    <span class=\"token punctuation\">{<!-- --></span>\n        public static void Main<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Passenger p1 <span class=\"token operator\">=</span> new Passenger<span class=\"token punctuation\">(</span>true, <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Passenger p2 <span class=\"token operator\">=</span> new Passenger<span class=\"token punctuation\">(</span>true, <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            /********** Begin *********/\n            //使用函数testing查看p1、p2属性值\n            testing<span class=\"token punctuation\">(</span>p1.package<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            testing<span class=\"token punctuation\">(</span>p1.getClothing<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n            testing<span class=\"token punctuation\">(</span>p2.package<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            testing<span class=\"token punctuation\">(</span>p2.getClothing<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n\n\n\n            /********** End *********/\n\n        <span class=\"token punctuation\">}</span>\n        //手动检测函数\n        public static void testing<span class=\"token punctuation\">(</span>bool thing<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thing <span class=\"token operator\">!=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console.WriteLine<span class=\"token punctuation\">(</span><span class=\"token string\">\"Dangerous\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console.WriteLine<span class=\"token punctuation\">(</span><span class=\"token string\">\"Pass\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1><a id=\"_261\"></a>题目链接</h1>\n<p>链接: <a href=\"https://www.educoder.net/tasks/ua3w792jbvze?coursesId=yf7lswqf\">link</a>.</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}