{"blogid": "120819917", "writerAge": "码龄7年", "writerBlogNum": "60", "writerCollect": "231", "writerComment": "20", "writerFan": "96", "writerGrade": "3级", "writerIntegral": "664", "writerName": "Csharp 小记", "writerProfileAdress": "writer_image\\profile_120819917.jpg", "writerRankTotal": "49525", "writerRankWeekly": "30117", "writerThumb": "22", "writerVisitNum": "93902", "blog_read_count": "6784", "blog_time": "于 2021-10-18 09:11:44 发布", "blog_title": "C# 操作JSON的几种方式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"uedede8c3\">关于Json数据在开发中的重要性，自然不言而喻；</p>\n<p id=\"uc2c8672d\">本篇通过两种在c#中常用的方式来实现对Json数据的序列化和反序列化，为了实现大多数的需求，我们采用稍微复杂一点的数据模型。</p>\n<p style=\"text-align:center;\"><img alt=\"\" id=\"uce23a5d9\" src=\"image\\e54d790b95cfa8bfb5e6c946be5471d9.png\" width=\"480\"/></p>\n<p id=\"u2d7c2753\"></p>\n<p id=\"ud8a5e6b5\">首先我们有以下json数据</p>\n<pre><code class=\"language-XML\">{\n  \"name\": \"张三\",\n  \"age\": 20,\n  \"idCard\": \"123456789\",\n  \"birthday\": \"2021-01-01 00:00:00\",\n  \"hobbys\": [\n    {\n      \"sort\": 1,\n      \"desc\": \"写字\"\n    },\n    {\n      \"sort\": 2,\n      \"desc\": \"游泳\"\n    }\n  ]\n}</code></pre>\n<p id=\"u6f7afec2\">然后我们根据json的结构创建一个实体类</p>\n<pre><code class=\"language-cs\"> private class Studet\n{\n    public string name { get; set; }\n    public int age { get; set; }\n    public string idCard { get; set; }\n    public DateTime birthday { get; set; }\n    public List&lt;hobby&gt; hobbys { get; set; }\n}\nprivate class hobby\n{\n    public int sort { get; set; }\n    public string desc { get; set; }\n}</code></pre>\n<p id=\"u681ef3a3\"><strong><em>第一种方式：JavaScriptSerializer</em></strong></p>\n<pre><code class=\"language-cs\">//需添加引用：System.Web.Extensions\n//需导入命名空间：using System.Web.Script.Serialization;\n\n//json.txt中的数据为上面的json数据\nstring json = File.ReadAllText(\"d:\\\\json.txt\");\n\nJavaScriptSerializer jss = new JavaScriptSerializer();\n//反序列化成Studet对象\nStudet student = jss.Deserialize&lt;Studet&gt;(json);\n//然后就可以直接用操作对象的方法直接点出来就行\n//输出:张三\nConsole.WriteLine(student.name);\n\n//同样的，我们可以将上面的对象序列化成一个json数据\n//序列化成json\nstring resultJson = jss.Serialize(student);\nConsole.WriteLine(resultJson);</code></pre>\n<p id=\"u5eec8c7d\"><strong><em>第二种方式：JSON.NET</em></strong></p>\n<pre><code class=\"language-cs\">//需添加引用：Newtonsoft.Json\n//需导入命名空间：using Newtonsoft.Json; using Newtonsoft.Json.Linq;\n\n //反序列化成对象\nStudet student = JsonConvert.DeserializeObject&lt;Studet&gt;(json);\n//输出:张三\nConsole.WriteLine(student.name);\n\n//序列化成json\nstring resultJson = JsonConvert.SerializeObject(student);\nConsole.WriteLine(resultJson);</code></pre>\n<p id=\"ucff044e8\">以上是我们通过json结构映射实体类的方式去实现的解析json数据，很多时候我们可能并不需要，或者并不想创建太多的类，这时候我们可以通过以下方式去实现解析</p>\n<pre><code class=\"language-cs\">//使用JObject（JSON.NET）\n//反序列化成JObject\nJObject jobj = JObject.Parse(json);\n//输出:张三\nConsole.WriteLine(jobj[\"name\"].ToString());\n//解析hobbys\n JArray jarr = JArray.Parse(jobj[\"hobbys\"].ToString());\n//迭代jarr即可\n\n//同样的，假如我们有一个JObject对象\n JObject obj = new JObject();\n obj[\"name\"] = \"张三\";\n obj[\"age\"] = 20;\n //输出json数据，直接ToString()就可以\n Console.WriteLine(obj.ToString());</code></pre>\n<p id=\"uc02b6980\">如果说你的Json结构是一个数组形式的话，即[{},{},{}]，我们可以通过以下方式去解析</p>\n<pre><code class=\"language-cs\">//第一种：DataTable\nDataTable dt = JsonConvert.DeserializeObject&lt;DataTable&gt;(json);\n//或者使用JavaScriptSerializer\ndt =jss.Deserialize&lt;DataTable&gt;(json);\n//解析DataTable即可\n\n\n//第二种：JArray\nJArray jarr = JArray.Parse(json);\n//然后去迭代jarr即可\nforeach (var j in jarr)\n{\n    Console.WriteLine(j[\"key\"]);\n}\n\n//第三种，也就是我们上面提到了有实体类的情况下\nList&lt;Studet&gt; list = JsonConvert.DeserializeObject&lt;List&lt;Studet&gt;&gt;(json);</code></pre>\n<p id=\"u6a698fa0\">以上基本可以解决我们的日常开发需求，个人推荐使用<strong><em>JSON.NET，</em></strong>下一篇会再介绍下JSON.NET的部分高级用法，用来满足我们的一些特殊需求。</p>\n<p id=\"u992af324\"><strong>由简入繁，拿来即用</strong></p>\n<p id=\"u15ae69af\"><strong>更多精彩，请关注微信公众号:</strong></p>\n<p><strong><strong><strong><strong><img alt=\"\" src=\"image\\e88e56c1bff74b7fbd8dc7c33f1abc46.jpg\"/></strong></strong></strong></strong></p>\n</div>\n</div>"}