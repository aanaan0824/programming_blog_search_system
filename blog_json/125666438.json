{"blogid": "125666438", "writerAge": "码龄2年", "writerBlogNum": "95", "writerCollect": "941", "writerComment": "45", "writerFan": "150", "writerGrade": "4级", "writerIntegral": "1228", "writerName": "Fighting_XH", "writerProfileAdress": "writer_image\\profile_125666438.jpg", "writerRankTotal": "14821", "writerRankWeekly": "10130", "writerThumb": "114", "writerVisitNum": "100526", "blog_read_count": "399", "blog_time": "已于 2022-09-04 13:32:38 修改", "blog_title": "Verilog实现SPI通信协议驱动设计", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"SPI_0\"></a>SPI通信协议原理</h1>\n<p>串行外围设备接口（SPI）是微控制器和外围IC（移位寄存器、SRAM等）之间广泛使用的接口。<code>SPI是一种同步、全双工、主从式接口</code>。来自主机或者从机的数据在<strong>clk上升沿或下降沿同步</strong>，主机和从机可以<code>通过MOSI、MISO线路同时传输数据</code>。SPI接口可以是3线式（SCLK、CS、DIO）或者4线式（SCLK、CS、MOSI、MISO）。</p>\n<hr/>\n<p>全双工：接口可以同时接收和发送数据（双倍速率），与iic相比，支持更高的时钟频率，SCLK范围在0.8-3.2Mhz之间。<br/> 半双工：接口任意时刻只能接收或者发送数据。</p>\n<hr/>\n<p>四根线的解释：</p>\n<blockquote>\n<p>SCLK：由主机产生的时钟信号线，<br/> .<br/> CS：片选信号（低有效），该信号用来选择从机；<br/> .<br/> 数据线：DIO表示主从机之间传输的数据线；MOSI表示数据从主机到从机，MISO反之。<br/> .</p>\n</blockquote>\n<hr/>\n<p>如下为主从机间的四线式SPI接口，一机一从。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\da5d83ecc2bd49918c6a84317f4ce79c.png\"/></p>\n<p>当主机提供多个单独片选CS信号时，即可达到<strong>一主多从</strong>的效果，如下所示：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\36bf1b9bc3034615bd571d615d4995df.png\"/></p>\n<h1><a id=\"SPI_24\"></a>SPI的四种通信方式</h1>\n<p>CPOL（时钟极性）和CPHA（时钟相位）来共同控制SPI的通信方式。其中：</p>\n<blockquote>\n<p><strong>CPOL决定SPI总线空闲时SCLK的电平</strong>；（0：空闲状态时SCLK低电平，1：空闲状态时SCLK高电平）<br/> .<br/> <strong>CPHA决定数据是上升沿还是下降沿采样</strong>；【0：上升沿采样，1：下降沿采样】</p>\n</blockquote>\n<p><strong>因此四种通信方式如下，常用0和3：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\074a5ded2c114cb38ca5ac3279acf627.png\"/><br/> <strong>四种通信模式的详解：</strong></p>\n<blockquote>\n<p>mode0：CPOL= 0，CPHA=0。SCLK串行时钟线空闲时为低电平，数据在SCK时钟的上升沿被采样，数据在SCK时钟的下降沿切换<br/> mode1：CPOL= 0，CPHA=1。SCLK串行时钟线空闲时为低电平，数据在SCK时钟的下降沿被采样，数据在SCK时钟的上升沿切换<br/> mode2：CPOL= 1，CPHA=0。SCLK串行时钟线空闲时为高电平，数据在SCK时钟的下降沿被采样，数据在SCK时钟的上升沿切换<br/> mode3：CPOL= 1，CPHA=1。SCLK串行时钟线空闲时为高电平，数据在SCK时钟的上升沿被采样，数据在SCK时钟的下降沿切换</p>\n</blockquote>\n<h1><a id=\"SPI_40\"></a>SPI时序图</h1>\n<p>以Mode0为例：</p>\n<p>当CS信号低电平时MOSI、MISO信号线有效，于是在SCK的每个时钟周期传输一位的数据。<br/> 1时刻：CS由高变低，为SPI通信的起始标志，对应从机被选中；<br/> 6时刻：CS由低变高，通信结束标志，对应从机选中取消；<br/> 2时刻（偶数时刻）：数据在上升沿采样，此时位于数据中间位置，最稳定。<br/> 3时刻（奇数时刻）：数据在下降沿切换，便于在下一上升沿的时候数据能正确被采集。<br/> 总的来说，这种方式能保证数据被正常采集到，也符合触发器建立和保持时间的要求，数据在上升沿之前提前到达以及在上升沿之后继续保持一段时间。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\207fb0497873475fb4b3f1ebfc5625bd.png\"/></p>\n<blockquote>\n<p>SPI每次输出传输以8或者16位为单位，每次传输的单位数不受限制。（UART为8位）<br/> .<br/> 注意：数据传输的时候，MSB和LSB先行均可，但要保证两个SPI通信设备之间一致，一般采用MSB先行的方式。</p>\n</blockquote>\n<h1><a id=\"SPI_55\"></a>SPI通讯协议的应用</h1>\n<p>现进行SPI与ADC进行通信，主要的接口如下：<br/> 其中Channel用来表示ADC的8个通道，这里无需过多关注，重点完成SPI驱动控制的时序设计。根据控制模块来生成对应的SPI信号，从而实现SPI与ADC的通信。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1da0eedd8a024ee4828ac847f9b76300.png\"/><br/> 根据下面的时序图，来完成SPI控制器设计。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\912637fbc3374b02851e5483115924e3.png\"/></p>\n<p><strong>重点：如果理解计数器的产生？</strong><br/> 由于数据的采样和切换是在上升沿、下降沿进行的，因此我们来产生SCLK_cnt计数器，用来计数SCLK的边沿，此外每一个边沿产生一个cnt_flag信号，简单理解就是每半个周期产生一个脉冲cnt_flag。SCLK的范围是0.8-3.2Mhz，因此我们取该范围内，若为2.5MHZ，因此一个SCLK周期是400ns，那么半个周期是200ns，由于系统时钟50Mhz，因此200ns / 20ns =10，每计数10次，表示一个cnt_flag脉冲信号。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8a37f5b9a4e1474493c7dc0559250b6b.png\"/></p>\n<hr/>\n<h1><a id=\"_69\"></a>代码编写</h1>\n<p>在进行具体协议代码编写的时候，一般有状态机和线性序列机两种方式，分情况来使用。<br/> 比如IIC，有着多种开始、器件地址传输以及应答等状态，那么需要用状态机来设计，而SPI、UART即可用线性序列机，状态少且能用计数器来完成，下面代码就是用线性序列机完成SPI的方法。</p>\n<h2><a id=\"verilog_72\"></a>verilog代码</h2>\n<pre><code class=\"prism language-bash\">module  spi_drive<span class=\"token punctuation\">(</span>\n    input clk,\n\t input rst_n,\n\t input start,\n\t input <span class=\"token punctuation\">[</span><span class=\"token number\">2</span>:0<span class=\"token punctuation\">]</span> Channel,\n\t input DOUT,\n\t \n\t output reg DIN,\n\t output reg CS_N,\n    output reg SCLK,\n\t output reg <span class=\"token punctuation\">[</span><span class=\"token number\">11</span>:0<span class=\"token punctuation\">]</span> data,\n    output reg <span class=\"token keyword\">done</span>\t \n\t \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reg en<span class=\"token punctuation\">;</span>\n\t reg <span class=\"token punctuation\">[</span><span class=\"token number\">2</span>:0<span class=\"token punctuation\">]</span> r_channel<span class=\"token punctuation\">;</span>\n\t reg <span class=\"token punctuation\">[</span><span class=\"token number\">3</span>:0<span class=\"token punctuation\">]</span> cnt<span class=\"token punctuation\">;</span>\n\t reg cnt_flag<span class=\"token punctuation\">;</span>\n\t reg <span class=\"token punctuation\">[</span><span class=\"token number\">5</span>:0<span class=\"token punctuation\">]</span> SCLK_CNT<span class=\"token punctuation\">;</span> //假设共有33个SCLK\n    reg <span class=\"token punctuation\">[</span><span class=\"token number\">11</span>:0<span class=\"token punctuation\">]</span> r_data<span class=\"token punctuation\">;</span>\n//转换使能信号（计数器的累计使能等）\nalways @ <span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span>\n    if<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span>\n\t     en <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token string\">'b0;\n\t else if(start)\n\t     en &lt;= 1'</span>b1<span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">else</span> if<span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span>\n\t     en <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token string\">'b0;\n\t else\n\t     en &lt;= en; \n\t     \n // r_channel\n always @ (posedge clk or negedge rst_n)\n    if(!rst_n)\n\t     r_channel &lt;= 1'</span>d0<span class=\"token punctuation\">;</span>\n\t  <span class=\"token keyword\">else</span> if<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span>\n\t     r_channel <span class=\"token operator\">&lt;=</span> Channel<span class=\"token punctuation\">;</span> \n\t  <span class=\"token keyword\">else</span>\n\t     r_channel <span class=\"token operator\">&lt;=</span> r_channel<span class=\"token punctuation\">;</span>\n\n//产生时序图，SCLK <span class=\"token number\">0.8</span> - <span class=\"token number\">3</span>.2Mhz，取SCLK<span class=\"token operator\">=</span><span class=\"token number\">2</span>.5Mhz\n\n//cnt\n always @ <span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span>\n    if<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span>\n\t     cnt <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token string\">'d0;\n\t  else if(en) begin\n\t      if(cnt == 4'</span>d9<span class=\"token punctuation\">)</span>\n\t\t\t    cnt <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token string\">'d0;\n\t      else\n\t\t\t    cnt &lt;= cnt + 1'</span>b1<span class=\"token punctuation\">;</span> \n\t\t  end\n\t  <span class=\"token keyword\">else</span>\n\t     cnt <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token string\">'d0;\n\t\t  \n//产生cnt_flag\n always @ (posedge clk or negedge rst_n)\n    if(!rst_n)\n\t     cnt_flag &lt;= 0;\n\t  else if(cnt == 4'</span>d9<span class=\"token punctuation\">)</span>\n\t     cnt_flag <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n\t  <span class=\"token keyword\">else</span>\n\t     cnt_flag <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t  \n//产生SCLK_CNT\n always @ <span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span>\n    if<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span>\n\t     SCLK_CNT <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token string\">'d0;\n\t  else if(en) begin\n\t      if(SCLK_CNT == 6'</span>d33<span class=\"token punctuation\">)</span>\n\t\t\t    SCLK_CNT <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token string\">'d0;\n\t      else if(cnt_flag)\n\t\t\t    SCLK_CNT &lt;= SCLK_CNT + 1'</span>b1<span class=\"token punctuation\">;</span> \n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t    SCLK_CNT <span class=\"token operator\">&lt;=</span> SCLK_CNT <span class=\"token punctuation\">;</span> \n\t\t  end\n\t  <span class=\"token keyword\">else</span>\n\t     SCLK_CNT <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token string\">'d0;\n\t\t  \n//线性序列机\n always @ (posedge clk or negedge rst_n)\n    if(!rst_n)begin\n\t     DIN  &lt;= 1'</span>b1<span class=\"token punctuation\">;</span>\n\t     CS_N <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token string\">'b1; //低电平有效\n\t     SCLK &lt;= 1'</span>b1<span class=\"token punctuation\">;</span>\n\t\tend\n\t  <span class=\"token keyword\">else</span> if<span class=\"token punctuation\">(</span>en<span class=\"token punctuation\">)</span>begin\n\t      case<span class=\"token punctuation\">(</span>SCLK_CNT<span class=\"token punctuation\">)</span>\n\t\t\t    <span class=\"token number\">6</span><span class=\"token string\">'d0:begin CS_N &lt;= 1'</span>b0<span class=\"token punctuation\">;</span> end\n\t\t\t\t <span class=\"token number\">6</span><span class=\"token string\">'d1:begin SCLK &lt;= 1'</span>b0<span class=\"token punctuation\">;</span> DIN  <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token string\">'b0;end\n\t\t\t\t 6'</span>d2:begin SCLK <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token string\">'b1; end\n\t\t\t\t 6'</span>d3:begin SCLK <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token string\">'b0; end\n\t\t\t\t 6'</span>d4:begin SCLK <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token string\">'b1; end\n\t\t\t\t 6'</span>d5:begin SCLK <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token string\">'b0; DIN  &lt;= r_channel[2];end\n\t\t\t\t 6'</span>d6:begin SCLK <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token string\">'b1; end\n\t\t\t\t 6'</span>d7:begin SCLK <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token string\">'b0; DIN  &lt;= r_channel[1];end\n\t\t\t\t 6'</span>d8:begin SCLK <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token string\">'b1; end\n\t\t\t\t 6'</span>d9:begin SCLK <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token string\">'b0; DIN  &lt;= r_channel[0];end\n\t\t\t\t 6'</span>d10,6<span class=\"token string\">'d12,6'</span>d14,6<span class=\"token string\">'d16,6'</span>d18,6<span class=\"token string\">'d20,6'</span>d22,6<span class=\"token string\">'d24,6'</span>d26,6<span class=\"token string\">'d28,6'</span>d30,6<span class=\"token string\">'d32:\n\t\t\t\t begin SCLK &lt;= 1'</span>b1<span class=\"token punctuation\">;</span> r_data  <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">{<!-- --></span>r_data<span class=\"token punctuation\">[</span><span class=\"token number\">10</span>:0<span class=\"token punctuation\">]</span>,DOUT<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>end  //上升沿采样，高电平移位操作\n\t\t\t\t <span class=\"token number\">6</span><span class=\"token string\">'d11,6'</span>d13,6<span class=\"token string\">'d15,6'</span>d17,6<span class=\"token string\">'d19,6'</span>d21,6<span class=\"token string\">'d23,6'</span>d25,6<span class=\"token string\">'d27,6'</span>d29,6<span class=\"token string\">'d31:\n\t\t\t\t begin SCLK &lt;= 1'</span>b0<span class=\"token punctuation\">;</span>end //低电平期间数据保持\n\t\t\t\t <span class=\"token number\">6</span><span class=\"token string\">'d33:begin CS_N &lt;= 1'</span>b1<span class=\"token punctuation\">;</span> end\n\t\t\t\t default:begin CS_N <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token string\">'b1; end\n\t\t\tendcase\n\t  end\n\t  else begin\n\t     DIN  &lt;= 1'</span>b1<span class=\"token punctuation\">;</span>\n\t     CS_N <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token string\">'b1; //低电平有效\n\t     SCLK &lt;= 1'</span>b1<span class=\"token punctuation\">;</span>\n\t\tend\n\t     \n//done信号\n\nalways @ <span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span>\n    if<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span>\n\t     <span class=\"token keyword\">done</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token string\">'b0;\n\t else if(SCLK_CNT == 6'</span>d33<span class=\"token punctuation\">)</span>\n\t     <span class=\"token keyword\">done</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token string\">'b1;\n\t else\n\t     done &lt;= 1'</span>b0<span class=\"token punctuation\">;</span>\n\n//data信号\n\nalways @ <span class=\"token punctuation\">(</span>posedge clk or negedge rst_n<span class=\"token punctuation\">)</span>\n    if<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rst_n<span class=\"token punctuation\">)</span>\n\t     data <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token string\">'b0;\n\t else if(SCLK_CNT == 6'</span>d33<span class=\"token punctuation\">)</span>\n\t     data <span class=\"token operator\">&lt;=</span> r_data<span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">else</span>\n\t     data <span class=\"token operator\">&lt;=</span> data<span class=\"token punctuation\">;</span>\n\nendmodule\n</code></pre>\n<h2><a id=\"tb_210\"></a>tb测试文件</h2>\n<p>不是很会写tb测试文件，但也能分析分析，凑合看下吧~或者也可以用其他人写的tb文件来测试</p>\n<pre><code class=\"prism language-bash\">`timescale 1ns/1ns\n\nmodule spi_drive_tb<span class=\"token punctuation\">;</span>\n\n    reg clk<span class=\"token punctuation\">;</span>\n\t reg rst_n<span class=\"token punctuation\">;</span>\n\t reg start<span class=\"token punctuation\">;</span>\n\t reg <span class=\"token punctuation\">[</span><span class=\"token number\">2</span>:0<span class=\"token punctuation\">]</span> Channel<span class=\"token punctuation\">;</span>\n\t reg DOUT<span class=\"token punctuation\">;</span>\n\t \n\t wire DIN<span class=\"token punctuation\">;</span>\n\t wire CS_N<span class=\"token punctuation\">;</span>\n    wire SCLK<span class=\"token punctuation\">;</span>\n\t wire <span class=\"token punctuation\">[</span><span class=\"token number\">11</span>:0<span class=\"token punctuation\">]</span> data<span class=\"token punctuation\">;</span>\n    wire <span class=\"token keyword\">done</span><span class=\"token punctuation\">;</span>\t\n\nspi_drive spi_drive<span class=\"token punctuation\">(</span>\n    .clk<span class=\"token punctuation\">(</span>clk<span class=\"token punctuation\">)</span>,\n\t .rst_n<span class=\"token punctuation\">(</span>rst_n<span class=\"token punctuation\">)</span>,\n\t .start<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span>,\n\t .Channel<span class=\"token punctuation\">(</span>Channel<span class=\"token punctuation\">)</span>,\n\t .DOUT<span class=\"token punctuation\">(</span>DOUT<span class=\"token punctuation\">)</span>,\n\n\t .DIN<span class=\"token punctuation\">(</span>DIN<span class=\"token punctuation\">)</span>,\n\t .CS_N<span class=\"token punctuation\">(</span>CS_N<span class=\"token punctuation\">)</span>,\n    .SCLK<span class=\"token punctuation\">(</span>SCLK<span class=\"token punctuation\">)</span>,\n\t .data<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>,\n    .done<span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span>\t \n\t \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n//产生50Mhz的时钟频率\ninitial clk <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token string\">'b1;\nalways #10 clk = ~clk;  \n\ninitial begin\n    rst_n = 1'</span>b0<span class=\"token punctuation\">;</span>\n\t Channel <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t DOUT <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token comment\">#100;</span>\n\t rst_n <span class=\"token operator\">=</span> <span class=\"token number\">1</span>'b1<span class=\"token punctuation\">;</span>\n\t <span class=\"token comment\">#10;</span>\n\t start <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token comment\">#100;</span>\n\t Channel <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> \n\t <span class=\"token comment\">#100;</span>\n\t DOUT <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token comment\">#10;</span>\n\t DOUT <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t \n\t <span class=\"token comment\">#50;</span>\n\t DOUT <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token comment\">#40;</span>\n\t DOUT <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token comment\">#50;</span>\n\t DOUT <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t \n\t <span class=\"token comment\">#10;</span>\n\t DOUT <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token comment\">#50000;</span>\n\t<span class=\"token variable\">$stop</span><span class=\"token punctuation\">;</span>\nend\n\nendmodule \n</code></pre>\n<h2><a id=\"_279\"></a>波形仿真</h2>\n<p>重点观察所设计的几个信号是否正确。<br/> <strong>en</strong>：当start信号为高电平的时候，en信号拉高，直到done信号出现，en才变成低电平。</p>\n<p><strong>cnt_flag</strong>：每cnt_flag出现一个高脉冲，则SCLK_CNT计数器加1。</p>\n<p><strong>SCLK</strong>：从仿真中可看到，SCLK的一个时钟周期刚好为400ns。同时其高低变化和verilog代码中描述的一致，计数为奇数的时候为低电平，计数为偶数的时候为高电平。</p>\n<p><strong>DIN，CS_N</strong>信号跟SCLK_CNT的计数值相关。复位的时候二者都是高电平。然后<br/> 当SCLK_CNT=0的时候，CS_N低电平，DIN高电平；<br/> 当SCLK_CNT=1的时候，CS_N低电平，DIN低电平……都是根据SPI时序或者说verilog处的描述来的。</p>\n<p><strong>done</strong>：由于这里提前设定传输33个数据拉高，因此计数到33的时候，done拉高.</p>\n<p><strong>data</strong>：计数到33，将数据开始输出，否则数据保持。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\aca8aeef6b554ef0a17f59edb90e7f55.png\"/></p>\n<p><a href=\"https://blog.csdn.net/wuzhikaidetb/article/details/120984325\">学习博文</a><br/> <a href=\"https://www.bilibili.com/video/BV19y4y1J7WG?spm_id_from=333.999.0.0&amp;vd_source=133937914813ae5fddc7d6e97a7\">学习视频，讲真的很好理解</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}