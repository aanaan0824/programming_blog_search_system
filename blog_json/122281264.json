{"blogid": "122281264", "writerAge": "码龄12年", "writerBlogNum": "93", "writerCollect": "294", "writerComment": "39", "writerFan": "168", "writerGrade": "4级", "writerIntegral": "1096", "writerName": "小六公子", "writerProfileAdress": "writer_image\\profile_122281264.jpg", "writerRankTotal": "16974", "writerRankWeekly": "16068", "writerThumb": "79", "writerVisitNum": "43942", "blog_read_count": "2215", "blog_time": "于 2022-01-02 21:55:09 发布", "blog_title": "C# Abp框架入门系列文章（一）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>随着技术的进步，各式各样的框架层出不穷，轮子越来越多，那么有没有哪些优秀的开发框架供我们使用呢？如果我们能够将各方面优秀的框架集合起来，应用到项目开发中，我们的工作是不是能事半功倍呢？而且各个框架的使用方向不同，很多配置也不同，如果能够将繁杂的基础工作集成起来，由统一的框架来完成，那么我们就可以专注于业务逻辑，提高工作效率。现在Abp就是这么一个框架，使用流行技术开发现代web应用程序的最佳实践。本文作为Abp框架的入门文章，仅供学习分享使用，如有不足之处，还请指正。</p>\n<h2><strong><span style=\"color:#1c7331;\">什么是Abp?</span></strong></h2>\n<p>ABP是“ASP.NET Boilerplate Project (ASP.NET样板项目)”的简称。<br/> ASP.NET Boilerplate是一个用最佳实践和流行技术开发现代WEB应用程序的新起点，它旨在成为一个通用的WEB应用程序框架和项目模板。ABP是基于最新的ASP.NET CORE，ASP.NET MVC和Web API技术的应用程序框架。并使用流行的框架和库，它提供了便于使用的授权，依赖注入，验证，异常处理，本地化，日志记录，缓存等常用功能。</p>\n<p><img alt=\"\" src=\"image\\abf96362aafabc59a8dcc015a9d47800.png\"/></p>\n<h2><span style=\"color:#1c7331;\"><strong>Abp架构</strong></span></h2>\n<p>ABP实现了多层架构（领域层，应用层，基础设施层和表示层），以及领域驱动设计（实体，存储库，领域服务，应用程序服务，DTO等）。还实现和提供了良好的基础设施来实现最佳实践，如依赖注入。</p>\n<p><img alt=\"\" src=\"image\\a174e18b2196a6aec0d88ba62c063f84.png\"/></p>\n<p></p>\n<p> 了解了Abp框架的基础知识之后，让我们一步一步的搭建Abp框架，并实现一个简单的小例子。</p>\n<h2><span style=\"color:#1c7331;\"><strong>安装CLI</strong></span></h2>\n<p>输入cmd打开命令行窗口，然后输入以下命令，安装Abp.Cli，如下所示：</p>\n<pre><code class=\"language-bash\">dotnet tool install -g Volo.Abp.Cli</code></pre>\n<p>安装过程，如下图所示：</p>\n<p><img alt=\"\" src=\"image\\ee825b271c2f7a323990748a20aef9b8.png\"/></p>\n<p></p>\n<h2><strong><span style=\"color:#1c7331;\">创建第一个Abp项目</span></strong></h2>\n<p>在命令行，切换到程序所在目录【最好是空目录】，然后通过命令进行创建，如下所示：</p>\n<pre><code class=\"language-bash\">abp new Acme.BookStore</code></pre>\n<p>安装过程，如下图所示：</p>\n<p><img alt=\"\" src=\"image\\ab3886cf1bdd33f0ce1668f36f93e953.png\"/></p>\n<p>关于Abp的Cli相关命令，可参考<a href=\"https://docs.abp.io/zh-Hans/abp/latest/CLI\" title=\"官方文档\">官方文档</a> 。</p>\n<p>项目创建成功后，如下所示：</p>\n<p><img alt=\"\" src=\"image\\4e771868b479db0c4b95a727f7cd34a1.png\"/></p>\n<p> 通过Visual Studio打开解决方案，如下所示：</p>\n<p></p>\n<p><img alt=\"\" src=\"image\\1e1ff644d433861d4632b082ef6f8469.png\"/></p>\n<h2><strong><span style=\"color:#1c7331;\">还原数据库</span></strong></h2>\n<p>在Abp解决方案中，通过运行【Acme.BookStore.DbMigrator】进行初始化数据库。该项目是控制台程序，采用Entity Framework的Code First方式迁移数据库。</p>\n<p>打开项目【Acme.BookStore.DbMigrator】中 appsettings.json文件，修改数据库连接字符串，为本机连接字符串，如下所示：</p>\n<p><img alt=\"\" src=\"image\\253bea830c18663630d7a18f7669e2c8.png\"/></p>\n<p>将项目设置为启动项目，然后F5(或Ctrl + F5)运行即可。当出现以下页面时，表示数据库迁移成功。如下所示：</p>\n<p><img alt=\"\" src=\"image\\ea3d94f416de363e4332ff02c4a91f6f.png\"/></p>\n<p></p>\n<p>数据库还原成功后，打开SQL Server数据库，会多出一个数据库【BookStore】，如下所示：</p>\n<p><img alt=\"\" src=\"image\\ff5278da6e38424ea29a9912b2a787c2.png\"/></p>\n<p>注意：最新版本的Abp版本为5.0.0，支持的Entity Framework Core版本为6.0，目前已不再支持SQL Server 2008 R2。所以需要升级数据库版本到2012。</p>\n<h2><strong><span style=\"color:#1c7331;\">运行Abp程序</span></strong></h2>\n<p>打开项目【Acme.BookStore.Web】中的appsettings.json文件，修改数据库连接字符串，如下所示：</p>\n<p><img alt=\"\" src=\"image\\432797516eee004b2bff2a2867ee9c64.png\"/></p>\n<p></p>\n<p>将项目【Acme.BookStore.Web】设置为启动项目，然后按F5(或Ctrl+F5)运行项目。Visual Studio会自动打开首页【https://localhost:44327/】，如下所示：</p>\n<p><img alt=\"\" src=\"image\\b17f8c208a6c0d705441b98c7a3897d9.png\"/></p>\n<p></p>\n<p> 在首页上，点击登录【默认用户名 admin,密码 1q2w3E* 】，如下所示：</p>\n<p><img alt=\"\" src=\"image\\ee1d5ec54c5d9dbf9b612653bbdb70ee.png\"/></p>\n<p></p>\n<p> 登录成功后，如下所示：</p>\n<p><img alt=\"\" src=\"image\\03dab56523fd668f7a1b9749cb25a796.png\"/></p>\n<p> 以上就是Abp最新默认框架示例。接下来让我们一起开发一个图书管理的小功能。</p>\n<h2><strong><span style=\"color:#1c7331;\">Abp入门示例</span></strong></h2>\n<h3><strong><span style=\"color:#511b78;\">1. 创建Book实体类</span></strong></h3>\n<p>启动模板中的领域层分为两个项目:</p>\n<ul><li><code>Acme.BookStore.Domain</code>包含你的实体, 领域服务和其他核心域对象.</li><li><code>Acme.BookStore.Domain.Shared</code>包含可与客户共享的常量,枚举或其他域相关对象.</li></ul>\n<p>在解决方案的领域层(<code>Acme.BookStore.Domain</code>项目)中定义实体，如下所示：</p>\n<p>在Acme.BookStore.Domain项目中，右键创建文件夹Books，然后新增Book类，如下所示：</p>\n<pre><code class=\"language-cs\">namespace Acme.BookStore.Books\n{\n    public class Book : AuditedAggregateRoot&lt;Guid&gt;\n    {\n        public string Name { get; set; }\n\n        public BookType Type { get; set; }\n\n        public DateTime PublishDate { get; set; }\n\n        public float Price { get; set; }\n    }\n}</code></pre>\n<p>其中Book继承自AuditedAggregateRoot&lt;Guid&gt;。在Abp中，默认提供了两个实体基类<code>AggregateRoot</code>和<code>Entity，而AuditedAggregateRoot&lt;Guid&gt;是AggregateRoot的派生类。其中Guid是主键类型。</code></p>\n<p>上述类中用到的BookType为创建的 枚举类型，在Acme.BookStore.Domain.Shared项目中，如下所示：</p>\n<pre><code class=\"language-cs\">namespace Acme.BookStore.Books\n{\n    public enum BookType\n    {\n        Undefined,\n        Adventure,\n        Biography,\n        Dystopia,\n        Fantastic,\n        Horror,\n        Science,\n        ScienceFiction,\n        Poetry\n    }\n}</code></pre>\n<p>Book和BookType，如下所示：</p>\n<p><img alt=\"\" src=\"image\\56323d8e9a434cea4ae154b1cbbb96a8.png\"/></p>\n<p></p>\n<h3><strong><span style=\"color:#511b78;\">2. 将Book实体添加到DbContext中</span></strong></h3>\n<p> EF Core需要你将实体和 <code>DbContext</code> 建立关联.最简单的做法是在<code>Acme.BookStore.EntityFrameworkCore</code>项目的<code>BookStoreDbContext</code>类中添加<code>DbSet</code>属性.如下所示:</p>\n<pre><code class=\"language-cs\">namespace Acme.BookStore.EntityFrameworkCore\n{\n    [ReplaceDbContext(typeof(IIdentityDbContext))]\n    [ReplaceDbContext(typeof(ITenantManagementDbContext))]\n    [ConnectionStringName(\"Default\")]\n    public class BookStoreDbContext :\n        AbpDbContext&lt;BookStoreDbContext&gt;,\n        IIdentityDbContext,\n        ITenantManagementDbContext\n    {\n        /* Add DbSet properties for your Aggregate Roots / Entities here. */\n\n        #region Entities from the modules\n        //其他自带的已略去\n        /// &lt;summary&gt;\n        /// Book示例数据库操作\n        /// &lt;/summary&gt;\n        public DbSet&lt;Book&gt; Books { get; set; }\n\n        #endregion\n\n\n\n    }\n}</code></pre>\n<h3><strong><span style=\"color:#511b78;\">3. 将Book实体映射到数据库表</span></strong></h3>\n<p>在本示例中采用Code First方式自动生成数据库，所以需要将实体和数据库表进行映射。在 <code>Acme.BookStore.EntityFrameworkCore</code> 项目中打开 <code>BookStoreDbContextModelCreatingExtensions.cs</code> 文件,添加 <code>Book</code> 实体的映射代码. 最终类应为:</p>\n<pre><code class=\"language-cs\">namespace Acme.BookStore.EntityFrameworkCore\n{\n    public static class BookStoreDbContextModelCreatingExtensions\n    {\n        public static void ConfigureBookStore(this ModelBuilder builder)\n        {\n            Check.NotNull(builder, nameof(builder));\n\n            /* Configure your own tables/entities inside here */\n\n            builder.Entity&lt;Book&gt;(b =&gt;\n            {\n                b.ToTable(BookStoreConsts.DbTablePrefix + \"Books\",\n                          BookStoreConsts.DbSchema);\n                b.ConfigureByConvention(); //auto configure for the base class props\n                b.Property(x =&gt; x.Name).IsRequired().HasMaxLength(128);\n            });\n        }\n    }\n}</code></pre>\n<ul><li><code>BookStoreConsts</code> 含有用于表的架构和表前缀的常量值. 你不必使用它,但建议在单点控制表前缀.</li><li><code>ConfigureByConvention()</code> 方法优雅的配置/映射继承的属性,应始终对你所有的实体使用它.</li></ul>\n<h3 id=\"添加数据迁移\"><strong><span style=\"color:#511b78;\">3. 添加数据迁移</span></strong></h3>\n<p>启动模板使用EF Core Code First Migrations创建和维护数据库架构. 我们应该创建一个新的迁移并且应用到数据库.</p>\n<p>在 <code>Acme.BookStore.EntityFrameworkCore</code> 目录打开命令行终端输入以下命令：</p>\n<pre><code class=\"language-cs\">dotnet ef migrations add Created_Book_Entity</code></pre>\n<p>具体示例如下所示：</p>\n<p><img alt=\"\" src=\"image\\c2ff365161b7249d5b7cf408af022bc3.png\"/></p>\n<p> 上述命令，会添加新的迁移类到项目中，如下所示：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"image\\e8a93a1de4af0803807dbc807569b86a.png\"/></p>\n<p></p>\n<h3><strong><span style=\"color:#511b78;\">4. 添加种子数据</span></strong></h3>\n<p>如果不需要通过代码添加种子数据，可以跳过，建议遵循步骤操作，以熟悉Abp框架。在 Acme.BookStore.Domain 项目下创建派生 <code>IDataSeedContributor</code> 的类,并且拷贝以下代码:</p>\n<pre><code class=\"language-cs\">namespace Acme.BookStore.Books\n{\n    public class BookStoreDataSeederContributor\n        : IDataSeedContributor, ITransientDependency\n    {\n        private readonly IRepository&lt;Book, Guid&gt; _bookRepository;\n\n        public BookStoreDataSeederContributor(IRepository&lt;Book, Guid&gt; bookRepository)\n        {\n            _bookRepository = bookRepository;\n        }\n\n        public async Task SeedAsync(DataSeedContext context)\n        {\n            if (await _bookRepository.GetCountAsync() &lt;= 0)\n            {\n                await _bookRepository.InsertAsync(\n                    new Book\n                    {\n                        Name = \"1984\",\n                        Type = BookType.Dystopia,\n                        PublishDate = new DateTime(1949, 6, 8),\n                        Price = 19.84f\n                    },\n                    autoSave: true\n                );\n\n                await _bookRepository.InsertAsync(\n                    new Book\n                    {\n                        Name = \"The Hitchhiker's Guide to the Galaxy\",\n                        Type = BookType.ScienceFiction,\n                        PublishDate = new DateTime(1995, 9, 27),\n                        Price = 42.0f\n                    },\n                    autoSave: true\n                );\n            }\n        }\n    }\n}</code></pre>\n<ul><li>如果数据库中当前没有图书,则此代码使用 <code>IRepository&lt;Book, Guid&gt;</code>(默认为repository)将两本书插入数据库.</li></ul>\n<h3 id=\"更新数据库\"><strong><span style=\"color:#511b78;\">5. 更新数据库</span></strong></h3>\n<p>运行 <code>Acme.BookStore.DbMigrator</code> 应用程序来更新数据库，将Acme.BookStore.DbMigrator设置为启动程序，然后运行即可，如下所示：</p>\n<p><img alt=\"\" src=\"image\\cdb9513826c56c383c376f3aab04c455.png\"/></p>\n<p></p>\n<p> 执行成功后，打开数据库管理工具，即可看到新生成的数据表，如下所示：</p>\n<p><img alt=\"\" src=\"image\\94a0aa835b0b18b239d8716191408747.png\"/></p>\n<p></p>\n<p> 以上则表示数据库创建成功。</p>\n<h3 id=\"创建应用程序\"><strong><span style=\"color:#511b78;\">6. 创建应用程序</span></strong></h3>\n<p>应用程序层由两个分离的项目组成:</p>\n<ul><li><code>Acme.BookStore.Application.Contracts</code> 包含你的DTO和应用服务接口.</li><li><code>Acme.BookStore.Application</code> 包含你的应用服务实现.</li></ul>\n<p>在本部分中,创建一个应用程序服务,使用ABP Framework的 <code>CrudAppService</code> 基类来获取,创建,更新和删除书籍.</p>\n<h3><strong><span style=\"color:#511b78;\">6. 1 创建BookDto类</span></strong></h3>\n<p>在Abp中，需要创建Book实体的Dto类，在Acme.BookStore.Application.Contracts项目中，添加BootDto类，如下所示：</p>\n<pre><code class=\"language-cs\">namespace Acme.BookStore\n{\n    public class BookDto : AuditedEntityDto&lt;Guid&gt;\n    {\n        public string Name { get; set; }\n\n        public BookType Type { get; set; }\n\n        public DateTime PublishDate { get; set; }\n\n        public float Price { get; set; }\n    }\n}</code></pre>\n<ul><li>DTO类被用来在 表示层 和 应用层 传递数据.</li><li>为了在页面上展示书籍信息,<code>BookDto</code>被用来将书籍数据传递到表示层.</li><li><code>BookDto</code>继承自 <code>AuditedEntityDto&lt;Guid&gt;</code>.跟上面定义的 <code>Book</code> 实体一样具有一些审计属性.</li></ul>\n<p>在将书籍返回到表示层时,需要将<code>Book</code>实体转换为<code>BookDto</code>对象. AutoMapper库可以在定义了正确的映射时自动执行此转换. 启动模板配置了AutoMapper,因此你只需在<code>Acme.BookStore.Application</code>项目的<code>BookStoreApplicationAutoMapperProfile</code>类中定义映射:</p>\n<pre><code class=\"language-cs\">namespace Acme.BookStore\n{\n    public class BookStoreApplicationAutoMapperProfile : Profile\n    {\n        public BookStoreApplicationAutoMapperProfile()\n        {\n            /* You can configure your AutoMapper mapping configuration here.\n             * Alternatively, you can split your mapping configurations\n             * into multiple profile classes for a better organization. */\n            CreateMap&lt;Book, BookDto&gt;();\n        }\n    }\n}</code></pre>\n<h3 id=\"createupdatebookdto\"><span style=\"color:#511b78;\"><strong>6.2 CreateUpdateBookDto</strong></span></h3>\n<p>在<code>Acme.BookStore.Application.Contracts</code>项目中创建一个名为 <code>CreateUpdateBookDto</code> 的DTO类:</p>\n<pre><code class=\"language-cs\">namespace Acme.BookStore.Books\n{\n    public class CreateUpdateBookDto\n    {\n        [Required]\n        [StringLength(128)]\n        public string Name { get; set; }\n\n        [Required]\n        public BookType Type { get; set; } = BookType.Undefined;\n\n        [Required]\n        [DataType(DataType.Date)]\n        public DateTime PublishDate { get; set; } = DateTime.Now;\n\n        [Required]\n        public float Price { get; set; }\n    }\n}</code></pre>\n<ul><li>这个DTO类被用于在创建或更新书籍的时候从用户界面获取图书信息.</li><li>它定义了数据注释属性(如<code>[Required]</code>)来定义属性的验证. DTO由ABP框架自动验证.</li></ul>\n<p>就像上面的<code>BookDto</code>一样,创建一个从<code>CreateUpdateBookDto</code>对象到<code>Book</code>实体的映射,最终映射配置类如下:</p>\n<pre><code class=\"language-cs\">namespace Acme.BookStore\n{\n    public class BookStoreApplicationAutoMapperProfile : Profile\n    {\n        public BookStoreApplicationAutoMapperProfile()\n        {\n            /* You can configure your AutoMapper mapping configuration here.\n             * Alternatively, you can split your mapping configurations\n             * into multiple profile classes for a better organization. */\n            CreateMap&lt;Book, BookDto&gt;();\n            CreateMap&lt;CreateUpdateBookDto, Book&gt;();\n        }\n    }\n}</code></pre>\n<h3><strong><span style=\"color:#511b78;\">7. 创建应用程序服务 </span></strong></h3>\n<h3 id=\"ibookappservice\"><strong><span style=\"color:#511b78;\">7.1 创建IBookAppService</span></strong></h3>\n<p>下一步是为应用程序定义接口,在<code>Acme.BookStore.Application.Contracts</code>项目中定义一个名为<code>IBookAppService</code>的接口:</p>\n<ul><li>框架定义应用程序服务的接口不是必需的. 但是,它被建议作为最佳实践.</li><li><code>ICrudAppService</code>定义了常见的CRUD方法:<code>GetAsync</code>,<code>GetListAsync</code>,<code>CreateAsync</code>,<code>UpdateAsync</code>和<code>DeleteAsync</code>. 你可以从空的<code>IApplicationService</code>接口继承并手动定义自己的方法(将在下一部分中完成).</li><li><code>ICrudAppService</code>有一些变体, 你可以在每个方法中使用单独的DTO,也可以分别单独指定(例如使用不同的DTO进行创建和更新).</li></ul>\n<h3 id=\"bookappservice\"><span style=\"color:#511b78;\"><strong>7.2 创建 BookAppService</strong></span></h3>\n<p>在<code>Acme.BookStore.Application</code>项目中创建名为 <code>BookAppService</code> 的 <code>IBookAppService</code> 实现:</p>\n<pre><code class=\"language-cs\">namespace Acme.BookStore.Books\n{\n    public class BookAppService :\n        CrudAppService&lt;\n            Book, //The Book entity\n            BookDto, //Used to show books\n            Guid, //Primary key of the book entity\n            PagedAndSortedResultRequestDto, //Used for paging/sorting\n            CreateUpdateBookDto&gt;, //Used to create/update a book\n        IBookAppService //implement the IBookAppService\n    {\n        public BookAppService(IRepository&lt;Book, Guid&gt; repository)\n            : base(repository)\n        {\n\n        }\n    }\n}</code></pre>\n<ul><li><code>BookAppService</code>继承了<code>CrudAppService&lt;...&gt;</code>.它实现了 <code>ICrudAppService</code> 定义的CRUD方法.</li><li><code>BookAppService</code>注入<code>IRepository &lt;Book,Guid&gt;</code>,这是<code>Book</code>实体的默认仓储. ABP自动为每个聚合根(或实体)创建默认仓储. 请参阅仓储文档</li><li><code>BookAppService</code>使用<code>IObjectMapper</code>将<code>Book</code>对象转换为<code>BookDto</code>对象, 将<code>CreateUpdateBookDto</code>对象转换为<code>Book</code>对象. 启动模板使用AutoMapper库作为对象映射提供程序. 我们之前定义了映射, 因此它将按预期工作.</li></ul>\n<h3 id=\"自动生成api-controllers\"><strong><span style=\"color:#511b78;\">8. 自动生成API Controllers</span></strong></h3>\n<p>你通常创建Controller以将应用程序服务公开为HTTP API端点. 因此允许浏览器或第三方客户端通过AJAX调用它们.</p>\n<p>ABP可以自动按照惯例将你的应用程序服务配置为MVC API控制器.</p>\n<h3 id=\"swagger-ui\"><span style=\"color:#511b78;\"><strong>9. Swagger UI</strong></span></h3>\n<p>启动模板配置为使用Swashbuckle.AspNetCore运行swagger UI. 运行应用程序并在浏览器中输入<code>https://localhost:XXXX/swagger/</code>(用你自己的端口替换XXXX)作为URL.</p>\n<p>你会看到一些内置的接口和<code>Book</code>的接口,它们都是REST风格的:</p>\n<p><img alt=\"\" src=\"image\\7319b69153053815861b566a5836755d.png\"/></p>\n<h3><span style=\"color:#511b78;\"><strong>10. 创建页面</strong></span></h3>\n<p>在Acme.BookStore.Web项目的Pages文件夹下，创建Books目录，然后新增Razer Pages，如下所示：</p>\n<p><img alt=\"\" src=\"image\\93ae808a98932d844037561c007d6175.png\"/></p>\n<p></p>\n<p> 添加成功后，如下所示：</p>\n<p><img alt=\"\" src=\"image\\bce7002939f721f6a6fa1700413e6a3f.png\"/></p>\n<p></p>\n<p> Index.cshtml页面代码如下所示：</p>\n<pre><code class=\"language-cs\">@page\n@using Acme.BookStore.Web.Pages.Books\n@model IndexModel\n \n&lt;h2&gt;Books&lt;/h2&gt;</code></pre>\n<h3 id=\"将book页面添加到主菜单\"><span style=\"color:#511b78;\"><strong>11. 将Book页面添加到主菜单</strong></span></h3>\n<p>打开 <code>Menus</code> 文件夹中的 <code>BookStoreMenuContributor</code> 类,在 <code>ConfigureMainMenuAsync</code> 方法的底部添加如下代码:</p>\n<pre><code class=\"language-cs\">namespace Acme.BookStore.Web.Menus\n{\n    public class BookStoreMenuContributor : IMenuContributor\n    {\n        public async Task ConfigureMenuAsync(MenuConfigurationContext context)\n        {\n            if (context.Menu.Name == StandardMenus.Main)\n            {\n                await ConfigureMainMenuAsync(context);\n            }\n        }\n\n        private async Task ConfigureMainMenuAsync(MenuConfigurationContext context)\n        {\n            var administration = context.Menu.GetAdministration();\n            var l = context.GetLocalizer&lt;BookStoreResource&gt;();\n\n            context.Menu.Items.Insert(\n                0,\n                new ApplicationMenuItem(\n                    BookStoreMenus.Home,\n                    l[\"Menu:Home\"],\n                    \"~/\",\n                    icon: \"fas fa-home\",\n                    order: 0\n                )\n            );\n\n            if (MultiTenancyConsts.IsEnabled)\n            {\n                administration.SetSubItemOrder(TenantManagementMenuNames.GroupName, 1);\n            }\n            else\n            {\n                administration.TryRemoveMenuItem(TenantManagementMenuNames.GroupName);\n            }\n\n            administration.SetSubItemOrder(IdentityMenuNames.GroupName, 2);\n            administration.SetSubItemOrder(SettingManagementMenuNames.GroupName, 3);\n            //添加book菜单\n            context.Menu.AddItem(\n                new ApplicationMenuItem(\n                    \"BooksStore\",\n                    l[\"Menu:BookStore\"],\n                    icon: \"fa fa-book\"\n                ).AddItem(\n                    new ApplicationMenuItem(\n                        \"BooksStore.Books\",\n                        l[\"Menu:Books\"],\n                        url: \"/Books\"\n                    )\n                )\n            );\n        }\n    }\n}</code></pre>\n<p>运行Acme.BookStore.Web项目，等录以后，便可以查看菜单，如下所示：</p>\n<p><img alt=\"\" src=\"image\\7e771ad0c788d02e839e8953ac5a8fe0.png\"/></p>\n<p></p>\n<p> 点击菜单后，跳转到默认的Book首页，如下所示：</p>\n<p><img alt=\"\" src=\"image\\40743f1b0168981ce65b8f4b38e3f58a.png\"/></p>\n<p></p>\n<h3><strong><span style=\"color:#511b78;\">12. 修改Book首页</span></strong></h3>\n<p>将 <code>Pages/Book/Index.cshtml</code> 改成下面的样子:</p>\n<pre><code class=\"language-cs\">@page\n@using Acme.BookStore.Localization\n@using Acme.BookStore.Web.Pages.Books\n@using Microsoft.Extensions.Localization\n@model IndexModel\n@inject IStringLocalizer&lt;BookStoreResource&gt; L\n@section scripts\n{\n    &lt;abp-script src=\"/Pages/Books/Index.js\" /&gt;\n}\n&lt;abp-card&gt;\n    &lt;abp-card-header&gt;\n        &lt;h2&gt;@L[\"Books\"]&lt;/h2&gt;\n    &lt;/abp-card-header&gt;\n    &lt;abp-card-body&gt;\n        &lt;abp-table striped-rows=\"true\" id=\"BooksTable\"&gt;&lt;/abp-table&gt;\n    &lt;/abp-card-body&gt;\n&lt;/abp-card&gt;</code></pre>\n<p>其中引用的Index.js位于Pages/Books目录下，如下所示：</p>\n<pre><code class=\"language-javascript\">$(function () {\n    var l = abp.localization.getResource('BookStore');\n\n    var dataTable = $('#BooksTable').DataTable(\n        abp.libs.datatables.normalizeConfiguration({\n            serverSide: true,\n            paging: true,\n            order: [[1, \"asc\"]],\n            searching: false,\n            scrollX: true,\n            ajax: abp.libs.datatables.createAjax(acme.bookStore.books.book.getList),\n            columnDefs: [\n                {\n                    title: l('Name'),\n                    data: \"name\"\n                },\n                {\n                    title: l('Type'),\n                    data: \"type\",\n                    render: function (data) {\n                        return l('Enum:BookType:' + data);\n                    }\n                },\n                {\n                    title: l('PublishDate'),\n                    data: \"publishDate\",\n                    render: function (data) {\n                        return luxon\n                            .DateTime\n                            .fromISO(data, {\n                                locale: abp.localization.currentCulture.name\n                            }).toLocaleString();\n                    }\n                },\n                {\n                    title: l('Price'),\n                    data: \"price\"\n                },\n                {\n                    title: l('CreationTime'), data: \"creationTime\",\n                    render: function (data) {\n                        return luxon\n                            .DateTime\n                            .fromISO(data, {\n                                locale: abp.localization.currentCulture.name\n                            }).toLocaleString(luxon.DateTime.DATETIME_SHORT);\n                    }\n                }\n            ]\n        })\n    );\n});</code></pre>\n<p>然后运行项目，结果如下所示：</p>\n<p><img alt=\"\" src=\"image\\df52ccf2b743cfe797730c534932f024.png\"/></p>\n<p></p>\n<p> 以上就是Abp的简单入门介绍，旨在抛转引玉，一起学习，共同进步。</p>\n<p>可点击<a class=\"link-info\" href=\"https://download.csdn.net/download/fengershishe/73514584\" title=\"示例源码\">示例源码</a>下载</p>\n<h2><strong><span style=\"color:#1c7331;\">备注</span></strong></h2>\n<p> 浣溪沙·一曲新词酒一杯【作者】晏殊 【朝代】北宋</p>\n<p id=\"body_p\">一曲新词酒一杯，去年天气旧亭台。夕阳西下几时回？</p>\n<p id=\"body_p\">无可奈何花落去，似曾相识燕归来。小园香径独徘徊。</p>\n<p><img alt=\"\" src=\"image\\8813e5c690c81f4636966489e9ef6fe9.png\"/></p>\n</div>\n</div>"}