{"blogid": "125205998", "writerAge": "码龄6年", "writerBlogNum": "16", "writerCollect": "100", "writerComment": "6", "writerFan": "503", "writerGrade": "2级", "writerIntegral": "247", "writerName": "Share_Shun", "writerProfileAdress": "writer_image\\profile_125205998.jpg", "writerRankTotal": "63604", "writerRankWeekly": "9920", "writerThumb": "22", "writerVisitNum": "14369", "blog_read_count": "1669", "blog_time": "已于 2022-07-11 15:43:57 修改", "blog_title": "使用VisionMaster SDK联合C#进行二次开发", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E5%89%8D%E8%A8%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n<p id=\"%E4%B8%80%E3%80%81Vision%20Master%20SDK%EF%BC%884.2%E7%89%88%E6%9C%AC%EF%BC%89%E4%BB%8B%E7%BB%8D-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81Vision%20Master%20SDK%EF%BC%884.2%E7%89%88%E6%9C%AC%EF%BC%89%E4%BB%8B%E7%BB%8D\">一、VisionMaster SDK（4.2版本）介绍</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\">二、环境配置</a></p>\n<p id=\"2.1%E6%96%B0%E5%BB%BA%E5%B7%A5%E7%A8%8B%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#2.1%E6%96%B0%E5%BB%BA%E5%B7%A5%E7%A8%8B%EF%BC%9A\">2.1新建工程：</a></p>\n<p id=\"2.2%E6%B7%BB%E5%8A%A0%E7%AE%97%E5%AD%90%E5%B7%A5%E5%85%B7%E5%BC%95%E7%94%A8-toc\" style=\"margin-left:40px;\"><a href=\"#2.2%E6%B7%BB%E5%8A%A0%E7%AE%97%E5%AD%90%E5%B7%A5%E5%85%B7%E5%BC%95%E7%94%A8\">2.2添加算子工具引用</a></p>\n<p id=\"2.3%E6%B7%BB%E5%8A%A0%E6%8E%A7%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#2.3%E6%B7%BB%E5%8A%A0%E6%8E%A7%E4%BB%B6\">2.3添加控件</a></p>\n<p id=\"%C2%A0%E4%BA%8C%E3%80%81%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E4%BA%8C%E3%80%81%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B\">三、开发过程</a></p>\n<p id=\"3.1%E6%96%B9%E6%A1%88%E5%8A%A0%E8%BD%BD-toc\" style=\"margin-left:40px;\"><a href=\"#3.1%E6%96%B9%E6%A1%88%E5%8A%A0%E8%BD%BD\">3.1 方案加载</a></p>\n<p id=\"3.2%E7%AE%97%E6%B3%95%E8%B0%83%E5%8F%82-toc\" style=\"margin-left:40px;\"><a href=\"#3.2%E7%AE%97%E6%B3%95%E8%B0%83%E5%8F%82\">3.2 参数修改</a></p>\n<p id=\"3.3%E7%AE%97%E6%B3%95%E6%89%A7%E8%A1%8C-toc\" style=\"margin-left:40px;\"><a href=\"#3.3%E7%AE%97%E6%B3%95%E6%89%A7%E8%A1%8C\">3.3 流程执行</a></p>\n<p id=\"3.4%E7%BB%93%E6%9E%9C%E8%8E%B7%E5%8F%96-toc\" style=\"margin-left:40px;\"><a href=\"#3.4%E7%BB%93%E6%9E%9C%E8%8E%B7%E5%8F%96\">3.4 结果获取</a></p>\n<p id=\"%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n</blockquote>\n<h1 id=\"%E5%89%8D%E8%A8%80\"><a id=\"_7\"></a>前言</h1>\n<p>VisionMaster（后简称VM）作为一款功能强大的工业图形图像处理软件，可对工业中遇到的各种图像进行处理，同时还有功能强大的算子以及很全面的例程，作为图像处理的主程序是非常不错的。但是，Vision Master软件依旧有缺陷，就是无法做到复杂图形化界面的建立，故需要和其他软件联合编程才行。因此，VM同步推出了进行二次开发的SDK（Software Development Kit），VM SDK开发理念是以极少的代码实现图像算法的二次开发集成，从而降低视觉开发人员对视觉处理逻辑代码的维护成本。本文即介绍如何用VM SDK和C#进行联合开发。</p>\n<h1 id=\"%E4%B8%80%E3%80%81Vision%20Master%20SDK%EF%BC%884.2%E7%89%88%E6%9C%AC%EF%BC%89%E4%BB%8B%E7%BB%8D\"><a id=\"pandas_16\"></a>一、<strong>VisionMaster SDK</strong><strong>介绍</strong></h1>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>VM算法平台和VM SDK的区别</strong></p>\n<p>VM算法平台是海康机器人自主开发的机器视觉软件，致力于为客户提供快速搭建视觉应用、解决视觉检测难题的算法工具，能满足视觉定位、尺寸测量、缺陷检测以及信息识别等机器视觉应用。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"image\\c2a082ea0e8d4ab4933321317387e904.png\"/></p>\n<p></p>\n<p>VM SDK是基于VM算法平台中的方案、流程和模块工具等进行对象级封装的二次开发工具包，用户可通过VM SDK提供的方案、流程和模块工具中各个对象的功能接口进行相应的数据交互与运行控制。同时提供相应的流程配置控件、参数配置控件、渲染控件、全局工具控件以及前端运行界面控件等，方便进行方案编辑、参数配置以及渲染展示，便于灵活进行开发，并扩展机器视觉应用。VM SDK在安装VM软件后会同步安装在安装路径下的Development文件夹下，并提供了开发文档及丰富的二次开发示例。</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"202\" src=\"image\\28e07be0be394502846235944acc83b8.png\" width=\"586\"/></p>\n<h1 id=\"%E4%BA%8C%E3%80%81%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\">二、环境配置</h1>\n<h2 id=\"2.1%E6%96%B0%E5%BB%BA%E5%B7%A5%E7%A8%8B%EF%BC%9A\" style=\"margin-left:.0001pt;text-align:justify;\">2.1新建工程：</h2>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2.1.1推荐VS2017新建工程(要求VS2013及以上)。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2.1.2生成框架选择.NET Framework 4.6.1及以上</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2.1.3项目属性-&gt;生成页面【首选32位】去掉勾选。一般情况下新建工程默认是勾选的，需要把勾选取消掉，因为VM里部分算子模块只支持64位的。</p>\n<h2 id=\"2.2%E6%B7%BB%E5%8A%A0%E7%AE%97%E5%AD%90%E5%B7%A5%E5%85%B7%E5%BC%95%E7%94%A8\" style=\"margin-left:.0001pt;text-align:justify;\">2.2添加算子工具引用</h2>\n<p style=\"margin-left:.0001pt;text-align:justify;\">VM SDK的算子工具没有封装成一个整体的库，而是单独分开封装的，这样虽然引用较为繁琐，但是能更加灵活地控制工具的引用，不失为一种优雅的解决方案。同时VM SDK4.2引入了全局程序集缓存(global assembly cache, GAC机制)，作用是存放一些有很多程序要用到的公共程序集，如System.Data、System.Windows.Forms等，这样，很多程序就可以从GAC里获得程序集，而不需要再把所有要用到的程序集都拷贝到应用程序的执行目录下，减少了冗余，方便了开发使用。可以通过两种方式添加算子工具的引用。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2.2.1方式1：使用VM SDK提供的引用批导入工具，工具路径为VisionMaster4.2.0\\Development\\V4.x\\ComControls\\Tool\\ImportRef.exe。首先需要选择新建工程的二级目录（工程配置文件的路径），然后选择需要导入的工具进行批量导入。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2.2.2方式2：直接右键项目引用去搜索VM对应的程序集进行引用，需要注意的是有两个必要的引用需要引用（VM.Core.dll和VM.PlatformSDKCS.dll），其它算子工具可以按需引用具体名称可以查看VM提供的开发文档。</p>\n<h2 id=\"2.3%E6%B7%BB%E5%8A%A0%E6%8E%A7%E4%BB%B6\" style=\"margin-left:.0001pt;text-align:justify;\">2.3添加控件</h2>\n<p style=\"margin-left:.0001pt;text-align:justify;\">VM SDK提供了丰富的控件供二次开发者使用，开发者可以使用这些控件实现更加灵活的界面布局设计，控件添加方法如下：</p>\n<p style=\"text-align:justify;\">1.打开VS工具箱，【所有Windows窗体】鼠标右击，再点击【选择项】，弹出.NET Framework组件窗口</p>\n<p style=\"text-align:justify;\">2.浏览VM4.2的安装路径文件夹：VisionMaster4.2.0\\Development\\V4.x\\ComControls\\Assembly，选择VMControls.Winform.Release.dll，添加后工具箱出现VM相关控件</p>\n<ul><li style=\"text-align:justify;\">VmFrontendControl 前端运行界面控件</li><li style=\"text-align:justify;\">VmGlobalToolControl 全局模块控件</li><li style=\"text-align:justify;\">VmMainViewConfigControl 主界面控件</li><li style=\"text-align:justify;\">VmParams 参数配置控件</li><li style=\"text-align:justify;\">VmParamsConfigWithRender 参数配置带渲染控件</li><li style=\"text-align:justify;\">VmProcedureConfigControl 流程配置控件</li><li style=\"text-align:justify;\">VmRealTimeAcqControl 实时取流控件(V4.2新增)</li><li style=\"text-align:justify;\">VmRenderControl 渲染控件</li><li style=\"text-align:justify;\">VmSingleModuleSet ConfigControl 独立Group控件(V4.2新增)</li></ul>\n<h1 id=\"%C2%A0%E4%BA%8C%E3%80%81%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B\"><strong>三、开发过程</strong></h1>\n<p style=\"margin-left:.0001pt;text-align:justify;\">VM SDK开发的载体是方案（VmSolution），且同一台电脑同一时刻只支持一个二次开发进程运行，因此其二次开发是都是围绕VmSolution这个单例开发的，大概开发思路如下图（参考VM二次开发文档）所示：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"759\" src=\"image\\eb46d8bb553548dea9b085c04b5fb8e7.png\" width=\"806\"/></p>\n<p style=\"text-align:center;\"></p>\n<h2 id=\"3.1%E6%96%B9%E6%A1%88%E5%8A%A0%E8%BD%BD\" style=\"margin-left:.0001pt;text-align:justify;\">3.1 方案加载</h2>\n<p style=\"margin-left:.0001pt;text-align:justify;\">VM二次开发方案加载：方案后缀为sol（一般建议在VM软件中创建好算法方案，在二次开发中调用），路径为绝对路径。</p>\n<pre><code class=\"language-cs\">VmSolution.Load(“方案路径”);</code></pre>\n<p style=\"text-align:justify;\">加载完成后就可以对方案进行操作了，当然VM SDK也提供了用来显示方案的控件（VmProcedureConfigControl 流程配置控件和VmMainViewCongfigControl 主界面控件），无需绑定，只要界面中有这两个中任意控件，加载完方案后会自动绑定显示，如图所示为实际加载效果。</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"633\" src=\"image\\db1c0b4a76f94b5da4cdf59dc877e036.png\" width=\"604\"/></p>\n<p></p>\n<h2 id=\"3.2%E7%AE%97%E6%B3%95%E8%B0%83%E5%8F%82\" style=\"margin-left:.0001pt;text-align:justify;\">3.2 参数修改</h2>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>VM二次开发为修改算法参数提供了两种方式：</strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>3.2.1 方式1：</strong>用自带的参数配置控件（ VmParamsConfigControl 参数配置控件、VmParamsConfigWithRenderControl 参数配置带渲染控件）调参。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">控件绑定模块代码示例：</p>\n<pre><code class=\"language-cs\">IMVSCircleFindModuCs.IMVSCircleFindModuTool circleFindTool = (IMVSCircleFindModuCs.IMVSCircleFindModuTool)VmSolution.Instance[\"流程1.圆查找1\"];\nvmParamsConfigWithRenderControl1.ModuleSource = circleFindTool;\n</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\">绑定完成后，控件就会自动填充当前模块的参数配置信息，然后进行修改即可（注意这里修改的参数并不会实时保存到方案文件里，需要调用方案保存接口才会保存）。</p>\n<p style=\"margin-left:.0001pt;text-align:center;\"><img alt=\"\" height=\"423\" src=\"image\\0e6a31c9de5b4c74b3be4601a71f8f21.png\" width=\"592\"/></p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>3.2.2 方式2</strong>：调用工具类的模块参数对象(ModuParams)提供的接口或Public属性(可以在开发文档中查阅、也可以在VS中进入相关参数类的定义中进行查阅)来修改。示例代码如下：</p>\n<pre><code class=\"language-cs\">IMVSCircleFindModuCs.IMVSCircleFindModuTool circleFindTool = (IMVSCircleFindModuCs.IMVSCircleFindModuTool)VmSolution.Instance[\"流程1.圆查找1\"];\ncircleFindTool.ModuParams.RadNum = 10;\n</code></pre>\n<h2 id=\"3.3%E7%AE%97%E6%B3%95%E6%89%A7%E8%A1%8C\" style=\"margin-left:.0001pt;text-align:justify;\">3.3 流程执行</h2>\n<p>VM算法执行方式有多种：二次开发仍然支持VM中配置的硬触发和通讯触发，同时提供了Run接口来支持软触发。软触发示例代码如下：</p>\n<pre><code class=\"language-cs\">VmSolution.Instance.Run();</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\">上述的方案Run接口会触发所有流程同时执行一次，当然也提供了单个控制流程/模块执行的方式，需要先实例化需要Run的流程/模块对象，然后调用该对象的Run接口即可触发流程/模块执行，示例代码如下：</p>\n<pre><code class=\"language-cs\">VmProcedure vmProcess1 = (VmProcedure)VmSolution.Instance[\"流程1\"];\nvmProcess1.Run();\nvar circleFind = (IMVSCirrleFindModuTool)VmSolution.Instance[\"流程1.圆查找1\"];\ncircleFind.Run（）；\n</code></pre>\n<h2 id=\"3.4%E7%BB%93%E6%9E%9C%E8%8E%B7%E5%8F%96\" style=\"margin-left:.0001pt;text-align:justify;\">3.4 结果获取</h2>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>3.4.1 渲染结果获取：</strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>方式1：</strong>VM SDK提供了渲染控件（vmRemderControl），可以通过给该控件直接绑定流程/模块对象资源来实现相应对象显示设置配置的渲染。示例代码如下：</p>\n<pre><code class=\"language-cs\">VmProcedure vmProcess1 = (VmProcedure)VmSolution.Instance[\"流程1\"];\nvmRenderControl1.ModuleSource = vmProcess1;\n//绑定模块渲染结果\nVar circleFind = (IMVSCircleFindModuTool) VmSolution.Instance[\"流程1.圆查找1\"];\nvmRenderControl1.ModuleSource = circleFind;\n</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\">需要注意的是：这里的渲染绑定是动态绑定，只需在流程/方案执行前绑定一次即可，后续流程/方案运行时渲染界面会实时更新对应绑定对象的渲染结果（对应的是模块/流程的显示设置信息：图像、形状信息和文字信息）。</p>\n<p style=\"margin-left:.0001pt;text-align:center;\"><img alt=\"\" height=\"440\" src=\"image\\2cbc7becc1b4444794abcaafe33825a6.png\" width=\"618\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>方式2：</strong>自己获取图形或文字数据在VM SDK提供的渲染控件上绘制。示例代码如下：</p>\n<pre><code class=\"language-cs\">//设置图像\nvar imageSource = (ImageSourceModuleCs.ImageSourceModuleTool)VmSolution.Instance[\"流程1.图像源1\"];\nvmRenderControl1.ModuleSource = imageSource;\n//自定义图形\nVMControls.WPF.LineEx line = new VMControls.WPF.LineEx();\nline.StartPointX = 100;\nline.StartPointY = 100;\nline.EndPointX = 300;\nline.EndPointY = 300;\nline.StrokeThickness = 10;\nvmRenderControl1.DrawShape(line);\n//自定义文本\nVMControls.WPF.TextEx text = new VMControls.WPF.TextEx();\ntext.Content = \"欢迎使用VM4.2二次开发！\";\ntext.FontSize = 30;\ntext.Position = new System.Windows.Point(100, 100);\ntext.Height = 100;\ntext.Width = 100;\ntext.Stroke = \"#FF0000\";//设置颜色\ntext.StrokeThickness = 10;\nvmRenderControl1.DrawShape(text);\n</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>3.4.2 数据结果获取：</strong>需要通过对应工具类的结果对象类获取。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>方式1：</strong>可以在搭建流程时将流程内的模块结果都绑定到流程的输出设置里，然后统一使用流程对象提供的结果获取接口进行获取。部分接口示例如下：</p>\n<pre><code class=\"language-cs\">//通过流程获取结果\nVmProcedure vmProcess1 = (VmProcedure)VmSolution.Instance[\"流程1\"];\nstring ocrResult = vmProcess1.ModuResult.GetOutputString(\"out\").astStringVal[0].strValue;\nstring ocrNum = vmProcess1.ModuResult.GetOutputInt(\"out0\").pIntVal[0].ToString();\n</code></pre>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>方式2：</strong>通过每个工具类的模块结果对象（ModuResult）获取，示例代码如下：</p>\n<pre><code class=\"language-cs\">//通过模块获取结果\nIMVSOcrModuCs.IMVSOcrModuTool ocrTool = (IMVSOcrModuCs.IMVSOcrModuTool)VmSolution.Instance[\"流程1.字符识别1\"];\nstring ocrScore1 = ocrTool.ModuResult.CharNum.ToString();\n</code></pre>\n<hr/>\n<h1 id=\"%E6%80%BB%E7%BB%93\"><a id=\"_45\"></a>总结</h1>\n<p>以上就是今天要讲的内容，本文仅仅简单介绍了VM SDK的使用，而VM SDK安装包里提供了大量能使我们快速上手的开发文档及示例Demo，也可以多参考官方提供的开发资源，利用好这些基本能实现大部分的开发需求。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">附开发资源路径：</p>\n<ul><li style=\"text-align:justify;\">开发手册：VisionMaster4.2.0\\Development\\V4.x\\Documentations</li><li style=\"text-align:justify;\">开发案例：VisionMaster4.2.0\\Development\\V4.x\\Samples（..\\C#\\ApplicationDemo为新增的应用案例，包含定位引导、OCR识别和深度学习分类案例）</li><li style=\"text-align:justify;\">V社区(VM开发者技术园地)链接：<u><a href=\"https://www.v-club.com/home\" title=\"https\">https</a><a href=\"https://www.v-club.com/home\" title=\"://www.v-club.com/home\">://www.v-club.com/home</a></u></li><li style=\"text-align:justify;\">资料荟萃链接：https://one.hikvision.com/#/link/XcwZ3QdfwYzO8f6TqlI3 提取密码：kGHn（包含讲义、问答集FAQ和软件Demo等，无需注册，直接下载）</li></ul>\n<hr/>\n<p style=\"margin-left:.0001pt;text-align:justify;\">最后附上一张VM二次开发的应用案例图：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"534\" src=\"image\\a84f397c9e514f2aabff2282f7e4936a.png\" width=\"865\"/></p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n</div>\n</div>"}