{"blogid": "126743173", "writerAge": "码龄24天", "writerBlogNum": "53", "writerCollect": "1", "writerComment": "1", "writerFan": "62", "writerGrade": "3级", "writerIntegral": "530", "writerName": "web13186827958", "writerProfileAdress": "writer_image\\profile_126743173.jpg", "writerRankTotal": "37132", "writerRankWeekly": "9888", "writerThumb": "0", "writerVisitNum": "2439", "blog_read_count": "11", "blog_time": "于 2022-09-07 12:27:16 发布", "blog_title": "JVM - 运行时数据区与线程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_JVM_2\"></a># <code>JVM</code>运行时数据区与线程</h2>\n<blockquote>\n<p><code>JDK</code>版本：<code>1.8</code></p>\n</blockquote>\n<h3><a id=\"_1Runtime_Data_Area_7\"></a># 1、运行时数据区(<code>Runtime Data Area</code>)</h3>\n<p>当<code>Java</code>由类加载子系统加载完成之后，会来到运行时数据区<code>Runtime Data Area</code>。即为下图图中间的部分。</p>\n<p><img alt=\"java类运行过程\" src=\"image\\34ed3203b0b74e00814c130e937fc2b6.png\"/></p>\n<p>当一个类经过：类的加载 <code>--&gt;</code>验证<code>--&gt;</code>准备<code>--&gt;</code>解析<code>--&gt;</code>初始化。这些阶段之后，就会交由执行引擎对类进行使用，同时执行引擎也会使用到运行时数据区：</p>\n<p><img alt=\"类运行流程\" src=\"image\\f7a097aa500b46ea91427c36babe832e.png\"/></p>\n<p>内存是非常重要的系统资源，是硬盘与<code>CPU</code>中间的仓库桥梁，承载着操作系统和应用程序的实时运行。<code>JVM</code>内存结构规定了<code>Java</code>程序在运行过程中内存的申请、分配、管理策略，以此保证了<code>JVM</code>的高效稳定运行。不同类型的<code>JVM</code>对于内存的划分方式和管理机制存在着部分的差异。结合<code>Java</code>虚拟机规范，来分析经典的<code>JVM</code>内存布局架构。</p>\n<p><img alt=\"JVM运行时数据区\" src=\"image\\3c5ebca43262456f907c76aeb1e184fc.png\"/></p>\n<p>运行时数据区好比作是制作一道菜需要的食材、工具、调味料等，而执行引擎可以比作是一个厨师，厨师将准备好的东西制作成一道精品菜肴就好比是成功运行<code>Java</code>引用程序。</p>\n<p>通过磁盘获取网络<code>IO</code>获得的数据，都需要先加载到内存中，然后<code>CPU</code>从内存中获取数据进行读取，也就是说内存充当了<code>CPU</code>和磁盘之间的桥梁。</p>\n<p><img alt=\"运行时数据区结构图\" src=\"image\\e1356156daf94e8f96ef1c5ed677b7c6.png\"/></p>\n<p><code>Java</code>虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中一部分会随着虚拟机的启动而创建，推着虚拟机退出而销毁。另外一些则是与线程相对应的，这些与线程相对应的数据区域会随着线程的开始而创建随着线程的结束而销毁。也就是说虚拟机的生命周期对应的是进程的生命周期。</p>\n<p><img alt=\"运行时数据区线程与方法区堆空间的关系\" src=\"image\\93970a54a60d446089aebe84be453c79.png\"/></p>\n<ul><li><code>PC</code>：<code>Program Counter Register</code>程序计数器。</li><li><code>VMS</code>：<code>Java Virtual Machine Stack</code>虚拟机栈。</li><li><code>NMS</code>：<code>Native Method Stack</code>本地方法栈。</li></ul>\n<p>线程隔离的部分：<code>PC</code>、<code>VMS</code>、<code>NMS</code>为每个线程私有的运行时数据区。</p>\n<p>线程共享部分：<code>Heap</code>、对外内存（永久代或元空间，代码缓存）。</p>\n<p>每个<code>JVM</code>只有一个<code>Runtime</code>实例。相当于一个<code>JVM</code>只有一个运行时数据区。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c6888341d081406ca897c457ecf40a94.png\"/></p>\n<hr/>\n<h3><a id=\"_2Thread_45\"></a># 2、线程(<code>Thread</code>)</h3>\n<ul><li> <p>线程是一个程序里的运行单元。<code>JVM</code>标准允许一个应用有多个线程并行执行。</p> </li><li> <p>在<code>Hotspot JVM</code>中，每个线程都与操作系统的本地线程直接映射。</p>\n<ul><li>当一个<code>Java</code>线程准备好执行以后，此时一个操作系统的本地线程也同时创建。<code>Java</code>线程执行终止后，本地线程也会回收。</li></ul> </li><li> <p>操作系统负责所有线程的安排调度到任何一个可用的<code>CPU</code>上。一旦本地线程初始化成功，它就会调用<code>Java</code>线程中的<code>run()</code>方法。</p> </li></ul>\n<hr/>\n<h3><a id=\"_3JVM_57\"></a># 3、<code>JVM</code>系统线程</h3>\n<p>如果想使用<code>jconsole</code>或者是任何一个调试工具，都能看到在后台还有许多线程在运行。这些后台线程不包括调用<code>mian</code>方法的<code>main</code>线程以及所有这个<code>main</code>线程自己创建的线程。</p>\n<p>这些主要的后台系统线程在<code>Hotsopt JVM</code>里主要是以下几个：</p>\n<ul><li>虚拟机线程：这种线程的操作是需要<code>JVM</code>达到安全点才会出现。这些操作必须在不同的线程中发生的原因是它们都需要<code>JVM</code>达到安全点，这样堆内存才不会变化。这种线程的执行类型包括<code>stop-the-world</code>的垃圾收集，线程栈收集，线程挂起以及偏向锁撤销。</li><li>周期任务线程：这种线程是时间周期事件的体现（比如中断），它们一般用于周期性操作的调度执行。</li><li><code>GC</code>线程：这种线程在对<code>JVM</code>里不同种类的垃圾收集行为提供了支持。</li><li>编译线程：这种线程在运行时会将字节码编译成本地代码。</li><li>信号调度线程：这种线程接收信号并发送给<code>JVM</code>，它在内部通过调用适当的方法进行处理。</li></ul>\n<p><a href=\"https://github.com/kapbc/Java-Kapcb\">GitHub源码地址</a>：<code>https://github.com/kapbc/Java-Kapcb/tree/master/src/main/java/com/kapcb/ccc/jvm</code></p>\n<blockquote>\n<p>备注：此文为笔者学习<code>JVM</code>的笔记，鉴于本人技术有限，文中难免出现一些错误，感谢大家批评指正。</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}