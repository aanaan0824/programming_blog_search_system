{"blogid": "124171851", "writerAge": "码龄7年", "writerBlogNum": "44", "writerCollect": "17876", "writerComment": "2798", "writerFan": "8474", "writerGrade": "7级", "writerIntegral": "9934", "writerName": "思绪无限", "writerProfileAdress": "writer_image\\profile_124171851.jpg", "writerRankTotal": "6818", "writerRankWeekly": "4689", "writerThumb": "3882", "writerVisitNum": "2425583", "blog_read_count": "52718", "blog_time": "已于 2022-04-17 14:08:52 修改", "blog_title": "基于深度学习的人脸识别与管理系统（UI界面增强版，Python代码）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"人脸识别与管理系统演示动图\" src=\"https://img-blog.csdnimg.cn/1e5db04ce1f6463a8ab49d969d4697cd.gif#pic_center\" width=\"700\"/><br/> <font face=\"微软雅黑\">摘要：人脸检测与识别是机器视觉领域最热门的研究方向之一，本文详细介绍博主自主设计的一款基于深度学习的人脸识别与管理系统。博文给出人脸识别实现原理的同时，给出<font color=\"#4285f4\" face=\"Times New Roman\"><em>P</em></font><font color=\"#ea4335\" face=\"Times New Roman\"><em>y</em></font><font color=\"#fbbc05\" face=\"Times New Roman\"><em>t</em></font><font color=\"#4285f4\" face=\"Times New Roman\"><em>h</em></font><font color=\"#34a853\" face=\"Times New Roman\"><em>o</em></font><font color=\"#ea4335\" face=\"Times New Roman\"><em>n</em></font>的人脸识别实现代码以及<font color=\"#4285f4\" face=\"Times New Roman\"><em>P</em></font><font color=\"#ea4335\" face=\"Times New Roman\"><em>y</em></font><font color=\"#fbbc05\" face=\"Times New Roman\"><em>Q</em></font><font color=\"#4285f4\" face=\"Times New Roman\"><em>t</em></font>设计的UI界面。系统实现了集识别人脸、录入人脸、管理人脸在内的多项功能：包括通过选择人脸图片、视频、摄像头进行已录入人脸的实时识别；可通过图片和摄像头检测人脸并录入新的人脸；通过系统管理和更新人脸数据等功能，检测速度快、识别精度较高。博文提供了完整的Python代码和使用教程，适合新入门的朋友参考，完整代码资源文件请转至文末的下载链接。本博文目录如下：</font></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#font_face_size5font_14\"><font face=\"华文行楷\" size=\"5\">前言</font></a></li><li><a href=\"#font_face_size5font_faceTimes_New_Roman1font_font_33\"><font face=\"华文行楷\" size=\"5\"><font face=\"Times New Roman\">1.</font> 效果演示</font></a></li><li><a href=\"#font_face_size5font_faceTimes_New_Roman2font_font_72\"><font face=\"华文行楷\" size=\"5\"><font face=\"Times New Roman\">2.</font> 人脸识别原理</font></a></li><li><a href=\"#font_face_size5font_faceTimes_New_Roman3font_font_95\"><font face=\"华文行楷\" size=\"5\"><font face=\"Times New Roman\">3.</font> 代码实现</font></a></li><li><a href=\"#font_face_size5__colorff4500font_353\"><font color=\"#ff4500\" face=\"华文行楷\" size=\"5\">下载链接</font></a></li><li><a href=\"#font_face_size5font_404\"><font face=\"华文行楷\" size=\"5\">结束语</font></a></li></ul>\n</div>\n<p></p>\n<p><a href=\"#i1\"><font face=\"楷体\" size=\"5\">➷点击跳转至文末所有涉及的<strong>完整代码文件</strong>下载页☇</font></a></p>\n<p></p>\n<div class=\"csdn-video-box\">\n<iframe allowfullscreen=\"true\" data-mediaembed=\"bilibili\" id=\"fiINB8Oj-1650167929761\" src=\"https://player.bilibili.com/player.html?aid=595802169\"></iframe>\n<p></p>\n</div>\n<p></p>\n<p><strong>代码介绍及演示视频链接：</strong><a href=\"https://www.bilibili.com/video/BV1XB4y1U73S\">https://www.bilibili.com/video/BV1XB4y1U73S</a>（正在更新中，欢迎关注博主B站视频）</p>\n<hr/>\n<h1><a id=\"font_face_size5font_14\"></a><font face=\"华文行楷\" size=\"5\">前言</font></h1>\n<p><font face=\"微软雅黑\">        近年来，人脸识别的技术愈发成熟，在大型数据集上的训练测试结果已超过人类，其应用也日益广泛，譬如刷脸支付、安防侦破、出入口控制、互联网服务等。人脸识别（Face Recognition）是一种通过获取人面部的特征信息进行身份确认的技术，类似已用于身份识别的人体的其他生物特征（如虹膜、指纹等），人脸具备唯一性、一致性和高度的不可复制性，为身份识别提供了稳定的条件。人脸识别系统是博主一直想做的一个项目，通过人脸面部信息识别可以进行很多有趣的设计，如面部解锁、考勤打卡等。</font></p>\n<p><font face=\"微软雅黑\">        前面博主撰写了人脸<a href=\"https://wuxian.blog.csdn.net/article/details/124142926\">性别识别系统</a>、<a href=\"https://wuxian.blog.csdn.net/article/details/91347164\">表情识别系统</a>等，其实是人脸属性识别的一种，即根据人脸面部图像中的相关特征判断其性别或表情属性，该任务本身也同样具有较强的现实意义。这篇博文则回到人脸识别的任务本身，采用深度学习的方法对人脸特征进行提取，计算其与已存在的人脸特征的相似度，判读其是否属于库中的某一人脸，达到身份识别的目的。不过我希望在实现的基础上，能多增加一些可操作性，因此尽可能设计一个功能完善的人脸识别系统。</font></p>\n<p><font face=\"微软雅黑\">        查阅网上资料发现，研究和分享人脸识别技术和代码的大有人在，主要是做一些简单易行的小Demo等，大家可自行查阅参考。这里博主分享一个自主设计的人脸识别项目，包括识别人脸、录入人脸、管理人脸在内的多项功能，以下是界面的截图，供大家参考学习了：</font></p>\n<p><img alt=\"人脸识别系统-思绪无限\" src=\"https://img-blog.csdnimg.cn/5a721c6daeb14bd3b5cb94cc2d467e37.gif#pic_center\" width=\"700\"/></p>\n<p><font face=\"微软雅黑\">        检测识别人脸时的界面截图（点击图片可放大）如下图，可识别画面中存在的多个人脸，也可开启摄像头或视频检测，以及人脸录入管理等功能：</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3c84df6ebda742a3991235f56d8609df.png\" width=\"700\"/></p>\n<p><font face=\"微软雅黑\">         详细的功能演示效果参见博主的B站视频或下一节的动图演示，觉得不错的朋友敬请点赞、关注加收藏！系统UI界面的设计工作量较大，界面美化更需仔细雕琢，大家有任何建议或意见和可在下方评论交流。</font></p>\n<hr/>\n<p><span id=\"title1\"></span></p>\n<h1><a id=\"font_face_size5font_faceTimes_New_Roman1font_font_33\"></a><font face=\"华文行楷\" size=\"5\"><font face=\"Times New Roman\">1.</font> 效果演示</font></h1>\n<p><font face=\"微软雅黑\"><strong>（一）选择人脸图片识别</strong></font></p>\n<p><font face=\"微软雅黑\">        在系统的功能选项按钮中选择“<strong>识别人脸</strong>”，点击下方的图片选择按钮图标选择图片后，在主显区域标记所有人脸识别的结果，并被逐条记录在表格中。本功能的界面展示如下图所示：</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/d60b92fd2575461090687c5fd14e1f61.gif#pic_center\" width=\"700\"/></p>\n<p><font face=\"微软雅黑\"><strong>（二）人脸视频识别效果展示</strong></font></p>\n<p><font face=\"微软雅黑\">        很多时候我们需要识别一段视频中的人脸信息，这里设计了视频选择功能。同样的在“<strong>识别人脸</strong>”功能选项下，点击视频按钮可选择待检测的视频，系统会自动解析视频逐帧识别人脸，并将结果记录在右下角表格中，效果如下图所示：</font><br/> <font face=\"微软雅黑\">        </font></p>\n<p><img alt=\"人脸识别系统-视频识别\" src=\"https://img-blog.csdnimg.cn/5c94e1981a884bff8a21d95010d1ff53.gif#pic_center\" width=\"700\"/></p>\n<p><font face=\"微软雅黑\"><strong>（三）摄像头检测效果展示</strong></font></p>\n<p><font face=\"微软雅黑\">        在真实场景中，我们往往利用设备摄像头获取实时画面，同时需要对画面中的人脸进行识别，同样可以在“识别人脸”功能选项下选择此项功能。如下图所示，点击摄像头按钮后系统进入准备状态，系统显示实时画面并开始检测画面中的人脸，识别结果展示如下图：</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/74f4102a343749e19bb210f07aff606b.gif#pic_center\" width=\"700\"/></p>\n<p><font face=\"微软雅黑\"><strong>（四）录入人脸效果展示</strong></font></p>\n<p><font face=\"微软雅黑\">        当出现一个新的人脸需要录入时，点击“录入人脸”功能选项按钮，此时底部功能界面切换至录入功能，首先输入人脸名字点击“新建”后可通过选择人脸图片或开启摄像头进行画面捕捉，系统检测到人脸后可选择“取图”，系统得到捕获的人脸区域图片，最后点击“录入”按钮，则提取所有人脸图片特征并写入系统库中，演示效果如下：</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/f685fcd3c5fc4067b48fa807fc692fa3.gif#pic_center\" width=\"700\"/></p>\n<p><font face=\"微软雅黑\"><strong>（五）管理人脸效果展示</strong></font></p>\n<p><font face=\"微软雅黑\">        对于已经存在的人脸数据可选择“管理人脸”功能选项按钮，切换至管理界面，选择表格中要删除或更新的人脸数据栏，点击确定后系统自动更新人脸数据库，该功能展示如下图：</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/57542d1b05fb49e08d190522e6e525cb.gif#pic_center\" width=\"700\"/></p>\n<p><font face=\"微软雅黑\">         在识别某张特定人脸前，应该先在系统库中录入人脸信息，即送入一张人脸图像供系统提取特征，此过程可选择图片也可开启摄像头实时获取。至此系统的演示完毕，其实除了动图中演示的功能，当然还有许多细节功能无法一一演示，读者可以自行测试。</font></p>\n<hr/>\n<h1><a id=\"font_face_size5font_faceTimes_New_Roman2font_font_72\"></a><font face=\"华文行楷\" size=\"5\"><font face=\"Times New Roman\">2.</font> 人脸识别原理</font></h1>\n<p><font face=\"微软雅黑\">        如今机器学习、神经网络方法广泛应用于人脸识别领域，而后深度学习广泛应用于各种目标检测领域，2015年，Google团队的<a href=\"https://www.cv-foundation.org/openaccess/content_cvpr_2015/html/Schroff_FaceNet_A_Unified_2015_CVPR_paper.html\">FaceNet</a>在LFW数据集上得平均准确率达到了99.63%，基于深度学习的人脸识别的准确率已经高于人类本身，深度学习在人脸识别领域基本占据了统治地位。</font></p>\n<p><font face=\"微软雅黑\">        Dlib是一个包含机器学习算法的C++开源工具包，目前已经被广泛的用在行业和学术领域，包括机器人，嵌入式设备，移动电话和大型高性能计算环境。作为人脸识别工具之一，Dlib在图像处理及人脸面部特征处理、分类、识别等方面具有计算简单、较容易实现的优点。</font></p>\n<blockquote>\n<p><font face=\"微软雅黑\">        Dlib在人脸识别上的应用：（1）接受图像并将其加载到一个像素数组中进行处理；（2）使用局部二进制模式的人脸描述生成新的图像；（3）根据Dlib库中的scan＿image＿boxes等函数写入读取到的图片，进而计算人脸之间的特征向量；（4）与人脸数据库中的特征向量进行对比并利用全局函数threshold＿image计算阈值，完成人脸识别<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">1</a></sup>。</font></p>\n</blockquote>\n<p><font face=\"微软雅黑\">        Dlib可通过Python调用，实现对图像预处理、提取特征向量、与人脸数据库中数据进行校验进而判别人物身份的流程。这里我们的人脸识别的过程有人脸检测(Face Detection)、人脸对齐(Face Alignment)、人脸表示(Face Representation)和人脸匹配(Face Matching)，示意图如下图所示：</font></p>\n<p><img alt=\"人脸识别流程图\" src=\"image\\c0b88bed08ac4f3282c347bf67dcfa8b.png\" width=\"700\"/><br/> <font face=\"微软雅黑\">        （1）人脸检测(Face Detection)：首先利用Dlib的<a href=\"http://dlib.net/python/index.html\">get_frontal_face_detector</a>方法检测人脸区域并输出人脸矩形的四个坐标点。调用get_frontal_face_detector会返回 dlib 库中包含的预训练方向梯度直方图 (HOG)结合线性支持向量机（SVM）的人脸检测器，该检测器快速高效。由于方向梯度直方图 (HOG) 描述符的工作原理，它对图像几何的和光学的形变都能保持很好的不变性。</font></p>\n<p><font face=\"微软雅黑\">        （2）人脸对齐(Face Alignment)：这是人脸识别系统中的一种标准操作，即从人脸区域中检测到人脸特征点，并以特征点为依据对人脸进行归一化操作，使人脸区域的尺度和角度一致，方便特征提取与人脸匹配。一般通过旋转、平移与缩放将目标人脸区域放置在图像特定位置。这样做可以减小需要处理的人脸图像在空间分布上的差异。这里我们使用的是基于回归树的人脸对齐算法<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">2</a></sup>，该算法是Vahid Kazemi 和 Josephine Sullivan在CVPR2014上发表的<a href=\"https://openaccess.thecvf.com/content_cvpr_2014/html/Kazemi_One_Millisecond_Face_2014_CVPR_paper.html\">One Millisecond Face Alignment with an Ensemble of Regression Trees</a>算法（以下简称GBDT），这种方法通过建立一个级联的残差回归树（GBDT）来使人脸形状从当前形状一步一步回归到真实形状。每一个GBDT的每一个叶子节点上都存储着一个残差回归量，当输入落到一个节点上时，就将残差加到改输入上，起到回归的目的，最终将所有残差叠加在一起，就完成了人脸对齐的目的。此处我们使用<a href=\"http://dlib.net/python/index.html\">shape_predictor</a>方法载入shape_predictor_68_face_landmarks.dat模型实现。</font></p>\n<p><font face=\"微软雅黑\">        （3）人脸表示(Face Representation)：这一步我们从归一化的人脸区域中进行面部特征提取，采用深度神经网络方法得到具有128个特征的特征向量。这里利用Dlib中的<a href=\"https://arxiv.org/abs/1512.03385\">残差学习深度神经网络</a>（ResNet）<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">3</a></sup>为待识别人脸创建128维特征向量。人脸的特征表示，最理想的情况是不同人脸的照片提取出的特征向量差异较大，而同一人脸在不同照片中可以提取出相似度高的特征向量。此处我们使用的是dlib库中的<a href=\"http://dlib.net/python/index.html\">face_recognition_model_v1</a>方法，使用预训练的dlib_face_recognition_resnet_model_v1.dat模型。</font></p>\n<p><font face=\"微软雅黑\">        （4）人脸匹配(Face Matching)：将待识别图片中提取的特征向量与比对图中的进行对比，通过评估方法计算两幅照片的相似度。可以根据相似得分，将得分高的判断为同一人，得分低的判断为不同人。这里我们使用欧式距离计算，两个人脸特征向量的欧式距离越小，则两张人脸越相似，若人脸图像与待识别人像之间的欧式距离小于设定的阈值（这里我设置为0.4）时，则判定为同一人。</font></p>\n<p><span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         D\n        \n        \n         i\n        \n        \n         s\n        \n        \n         =\n        \n        \n         \n          \n           \n            \n             (\n            \n            \n             \n              x\n             \n             \n              1\n             \n            \n            \n             −\n            \n            \n             \n              y\n             \n             \n              1\n             \n            \n            \n             )\n            \n           \n           \n            2\n           \n          \n          \n           +\n          \n          \n           \n            \n             (\n            \n            \n             \n              x\n             \n             \n              2\n             \n            \n            \n             −\n            \n            \n             \n              y\n             \n             \n              2\n             \n            \n            \n             )\n            \n           \n           \n            2\n           \n          \n          \n           +\n          \n          \n           …\n          \n          \n           +\n          \n          \n           \n            \n             (\n            \n            \n             \n              x\n             \n             \n              n\n             \n            \n            \n             −\n            \n            \n             \n              y\n             \n             \n              n\n             \n            \n            \n             )\n            \n           \n           \n            2\n           \n          \n         \n        \n       \n       \n        Dis = \\sqrt{\\left(x_{1}-y_{1}\\right)^{2}+\\left(x_{2}-y_{2}\\right)^{2}+\\ldots+\\left(x_{n}-y_{n}\\right)^{2}}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.68333em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">D</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1.84em; vertical-align: -0.454121em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.38588em;\"><span class=\"svg-align\" style=\"top: -3.8em;\"><span class=\"pstrut\" style=\"height: 3.8em;\"></span><span class=\"mord\" style=\"padding-left: 1em;\"><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top: 0em;\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.03588em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top: 0em;\">)</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.954008em;\"><span class=\"\" style=\"top: -3.2029em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top: 0em;\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.03588em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top: 0em;\">)</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.954008em;\"><span class=\"\" style=\"top: -3.2029em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top: 0em;\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.151392em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.151392em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.03588em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top: 0em;\">)</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.954008em;\"><span class=\"\" style=\"top: -3.2029em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"\" style=\"top: -3.34588em;\"><span class=\"pstrut\" style=\"height: 3.8em;\"></span><span class=\"hide-tail\" style=\"min-width: 1.02em; height: 1.88em;\">\n<svg height=\"1.8800000000000001em\" preserveaspectratio=\"xMinYMin slice\" viewbox=\"0 0 400000 1944\" width=\"400em\">\n<path d=\"M1001,80H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,\n572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,\n-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39\nc-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60\ns208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,\n-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10z\nM1001 80H400000v40H1013z\"></path>\n</svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.454121em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span></p>\n<hr/>\n<h1><a id=\"font_face_size5font_faceTimes_New_Roman3font_font_95\"></a><font face=\"华文行楷\" size=\"5\"><font face=\"Times New Roman\">3.</font> 代码实现</font></h1>\n<p><font face=\"微软雅黑\">        原理介绍完毕，我们开始按照以上的步骤实现人脸识别过程。首先是导入几个需要用到的Python依赖包，我们使用的Python版本是3.8，其代码如下：</font></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">dlib</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">csv</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">os</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">cv2</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">numpy</span> as np\n</code></pre>\n<p><font face=\"微软雅黑\">        这里面值得要说的dlib这个依赖，是后面人脸识别算法需要用到的工具库，它的安装其实很简单，并不需要像网上说的安装Visual Studio 2015等软件（网上安装问题主要是dlib没有编译的安装包）。这里我将所有需要用到的依赖包都打包在了mylib文件夹中，并将依赖的版本号写入了requirements.txt文件中，如下图所示：</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\52fb101ddf3c486784bf93859944f613.png\" width=\"450\"/><br/> <font face=\"微软雅黑\">        在安装有Python3.8的情况下，首先切换cmd的目录到mylib所在文件夹（requirements.txt也放在文件夹下），然后输入以下代码就可以完成依赖安装了。这样省去了版本不一致带来的出错或诸多麻烦，dlib也是优雅地安装好了。安装过程也可参考博主的B站视频，完整文件夹中有一键安装的bat文件可以帮助安装。</font></p>\n<pre><code class=\"prism language-powershell\">pip install <span class=\"token operator\">-</span>r requirements<span class=\"token punctuation\">.</span>txt <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>index <span class=\"token operator\">--</span><span class=\"token function\">find-links</span>=<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>mylib<span class=\"token operator\">/</span>\n</code></pre>\n<p><font face=\"微软雅黑\">        配置好环境和导入依赖后，可以正式开始代码的介绍了。首先我们载入dlib中的几个模型方法，其实现代码如下：</font></p>\n<pre><code class=\"prism language-python\">path_face_dir <span class=\"token operator\">=</span> <span class=\"token string\">\"./data/database_faces/\"</span>\nperson_list <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>path_face_dir<span class=\"token punctuation\">)</span>\ndetector <span class=\"token operator\">=</span> dlib<span class=\"token punctuation\">.</span>get_frontal_face_detector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npredictor <span class=\"token operator\">=</span> dlib<span class=\"token punctuation\">.</span>shape_predictor<span class=\"token punctuation\">(</span><span class=\"token string\">'./data/data_dlib/shape_predictor_68_face_landmarks.dat'</span><span class=\"token punctuation\">)</span>\nface_reco_model <span class=\"token operator\">=</span> dlib<span class=\"token punctuation\">.</span>face_recognition_model_v1<span class=\"token punctuation\">(</span><span class=\"token string\">\"./data/data_dlib\"</span>\n                                                 <span class=\"token string\">\"/dlib_face_recognition_resnet_model_v1.dat\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><font face=\"微软雅黑\">        如上一章节介绍的，detector、predictor、face_reco_model分别是人脸检测器、人脸对齐方法、人脸表示（特征提取）模型。接下来我们写一个从图片中提取人脸特征的函数extract_features，该函数读取图片利用人脸检测器获取人脸位置，通过深度卷积神经网络Resnet进行特征提取，最终得到128维的特征向量。其代码如下：</font></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">extract_features</span><span class=\"token punctuation\">(</span>path_img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    img_rd <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imdecode<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>fromfile<span class=\"token punctuation\">(</span>path_img<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    faces <span class=\"token operator\">=</span> detector<span class=\"token punctuation\">(</span>img_rd<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>faces<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        shape <span class=\"token operator\">=</span> predictor<span class=\"token punctuation\">(</span>img_rd<span class=\"token punctuation\">,</span> faces<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        face_descriptor <span class=\"token operator\">=</span> face_reco_model<span class=\"token punctuation\">.</span>compute_face_descriptor<span class=\"token punctuation\">(</span>img_rd<span class=\"token punctuation\">,</span> shape<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        face_descriptor <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">return</span> face_descriptor\n</code></pre>\n<p><font face=\"微软雅黑\">        我们将每个人脸的图像各建一个文件夹保存，将文件夹的名字作为该人脸的命名标识，如下图所示。每个文件夹下可放置一张或多张同类人脸图像，用以后面进行人脸特征提取，可自行收集人脸图像放置在对应文件夹下：</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\1b8ecabdc0e24c97a388705d49a457e9.png\" width=\"450\"/></p>\n<p><font face=\"微软雅黑\">        接下来就可以进行特征提取了，这样遍历上面目录中的每类人脸文件夹下的所有图像并提取特征，然后取均值保存在csv文件中即可完成特征提取并记录，该代码实现如下：</font></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./features_all_test.csv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> newline<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> csvfile<span class=\"token punctuation\">:</span>\n    writer <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>writer<span class=\"token punctuation\">(</span>csvfile<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> person <span class=\"token keyword\">in</span> person_list<span class=\"token punctuation\">:</span>\n        features_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        photos_list <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>path_face_dir <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> photos_list<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> photo <span class=\"token keyword\">in</span> photos_list<span class=\"token punctuation\">:</span>\n                features_128D <span class=\"token operator\">=</span> extract_features<span class=\"token punctuation\">(</span>path_face_dir <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> person <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> photo<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"图片\"</span> <span class=\"token operator\">+</span> photo <span class=\"token operator\">+</span> <span class=\"token string\">\"已录入！\"</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">if</span> features_128D <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">continue</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    features_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>features_128D<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> features_list<span class=\"token punctuation\">:</span>\n            features_mean <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>features_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            features_mean <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> order<span class=\"token operator\">=</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\n        str_face <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>person<span class=\"token punctuation\">]</span>\n        str_face<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>features_mean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        writer<span class=\"token punctuation\">.</span>writerow<span class=\"token punctuation\">(</span>str_face<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已完成人脸录入！\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><font face=\"微软雅黑\">        以上代码运行下来，提取到的人脸特征信息被写入csv文件中，部分信息如下图所示，每行的128个特征表示一个人脸信息，第一列为该人脸的名字：</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\b3825b9dbffe45d4a9ccd4e4fac9118b.png\" width=\"500\"/><br/> <font face=\"微软雅黑\">        接下来利用提取到的特征进行人脸匹配，读取一张新的人脸图片然后判断其属于库中的那张人脸。同样的新建一个py文件，首先导入需要的依赖包，代码如下：</font></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> warnings\n<span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">import</span> dlib\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image<span class=\"token punctuation\">,</span> ImageDraw<span class=\"token punctuation\">,</span> ImageFont\n</code></pre>\n<p><font face=\"微软雅黑\">        由于后面需要在图像中显示中文，所以这里先利用PIL导入中文字体记为fontC，然后还是导入需要用到的三个模型，代码如下：</font></p>\n<pre><code class=\"prism language-python\">fontC <span class=\"token operator\">=</span> ImageFont<span class=\"token punctuation\">.</span>truetype<span class=\"token punctuation\">(</span><span class=\"token string\">\"./FaceRecUI/Font/platech.ttf\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\ndetector <span class=\"token operator\">=</span> dlib<span class=\"token punctuation\">.</span>get_frontal_face_detector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npredictor <span class=\"token operator\">=</span> dlib<span class=\"token punctuation\">.</span>shape_predictor<span class=\"token punctuation\">(</span><span class=\"token string\">'./data/data_dlib/shape_predictor_68_face_landmarks.dat'</span><span class=\"token punctuation\">)</span>\nface_reco_model <span class=\"token operator\">=</span> dlib<span class=\"token punctuation\">.</span>face_recognition_model_v1<span class=\"token punctuation\">(</span><span class=\"token string\">\"./data/data_dlib\"</span>\n                                                 <span class=\"token string\">\"/dlib_face_recognition_resnet_model_v1.dat\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><font face=\"微软雅黑\">        在匹配的过程中需要计算两个人脸特征向量间的距离（相似度），这里先定义一个计算特征向量的欧氏距离函数euclidean_distance，返回两个向量的距离值：</font></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">euclidean_distance</span><span class=\"token punctuation\">(</span>feature_1<span class=\"token punctuation\">,</span> feature_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 计算两个128D向量间的欧式距离</span>\n    feature_1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>feature_1<span class=\"token punctuation\">)</span>\n    feature_2 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>feature_2<span class=\"token punctuation\">)</span>\n    dist <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>square<span class=\"token punctuation\">(</span>feature_1 <span class=\"token operator\">-</span> feature_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> dist\n</code></pre>\n<p><font face=\"微软雅黑\">        另外，检测和识别出的人脸结果需要标记在图像中，所以这里定义一个添加标记的函数drawRectBox，即利用OpenCV和PIL在人脸位置处绘制标记框和文字，其代码如下：</font></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">drawRectBox</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> rect_pos<span class=\"token punctuation\">,</span> addText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cv2<span class=\"token punctuation\">.</span>rectangle<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>rect_pos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>rect_pos<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>rect_pos<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>rect_pos<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>rectangle<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>rect_pos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>rect_pos<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>rect_pos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">75</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>rect_pos<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                  cv2<span class=\"token punctuation\">.</span>LINE_AA<span class=\"token punctuation\">)</span>\n    img <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>fromarray<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    draw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    draw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>rect_pos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>rect_pos<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> addText<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>fontC<span class=\"token punctuation\">)</span>\n    image_x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> image_x\n</code></pre>\n<p><font face=\"微软雅黑\">        函数准备就绪，开始主函数部分，首先读取一张人脸图片：</font></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"./FaceRecUI/test_img/朴信惠-1.jpeg\"</span>\n    img_rd <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imdecode<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>fromfile<span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><font face=\"微软雅黑\">        从csv文件读取所有的人脸特征，将其保存在变量face_feature_exist中，用于后面的特征计算。这里读取时采用逐行遍历csv文件的方式，将每行的特征名和128维特征向量保存出来，空数据的标记为未知人脸。该部分代码如下：</font></p>\n<pre><code class=\"prism language-python\">face_feature_exist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    face_name_exist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token comment\"># 读取已存入的人脸特征信息</span>\n    <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">\"./features_all_test.csv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        path_features_known_csv <span class=\"token operator\">=</span> <span class=\"token string\">\"./features_all_test.csv\"</span>\n        csv_rd <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span>path_features_known_csv<span class=\"token punctuation\">,</span> header<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'gb2312'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>csv_rd<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            features_someone_arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">129</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> csv_rd<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n                    features_someone_arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    features_someone_arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>csv_rd<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            face_feature_exist<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>features_someone_arr<span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> csv_rd<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n                face_name_exist<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"未知人脸\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                face_name_exist<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>csv_rd<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        exist_flag <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        exist_flag <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n</code></pre>\n<p><font face=\"微软雅黑\">        我们使用人脸检测器获取人脸位置，剪切出人脸区域；然后对人脸区域进行特征提取并将其与库中的特征进行比较，逐个计算欧几里得聚类，找出与之距离最小的库人脸；将最小距离与设定的阈值（0.4）进行比较，若小于0.4表示与该库人脸匹配，否则视为未知人脸。此流程的代码如下：</font></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 使用人脸检测器进行人脸检测</span>\n    image <span class=\"token operator\">=</span> img_rd<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    faces <span class=\"token operator\">=</span> detector<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>faces<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 矩形框 / Show the ROI of faces</span>\n        face_feature_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        face_name_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        face_position_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        start_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> d <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>faces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 计算矩形框大小 / Compute the size of rectangle box</span>\n            height <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> d<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            width <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> d<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            hh <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>height <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            ww <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n            y2 <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> ww\n            x2 <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> hh\n            y1 <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> ww\n            x1 <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> hh\n            <span class=\"token comment\"># 判断人脸区域是否超出画面范围</span>\n            <span class=\"token keyword\">if</span> y2 <span class=\"token operator\">&gt;</span> img_rd<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                y2 <span class=\"token operator\">=</span> img_rd<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">elif</span> x2 <span class=\"token operator\">&gt;</span> img_rd<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                x2 <span class=\"token operator\">=</span> img_rd<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">elif</span> y1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                y1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">elif</span> x1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                x1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n            <span class=\"token comment\"># 剪切出人脸</span>\n            crop_face <span class=\"token operator\">=</span> img_rd<span class=\"token punctuation\">[</span>x1<span class=\"token punctuation\">:</span> x2<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">:</span> y2<span class=\"token punctuation\">]</span>\n            <span class=\"token comment\"># 获取人脸特征</span>\n            shape <span class=\"token operator\">=</span> predictor<span class=\"token punctuation\">(</span>img_rd<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n            face_feature_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>face_reco_model<span class=\"token punctuation\">.</span>compute_face_descriptor<span class=\"token punctuation\">(</span>img_rd<span class=\"token punctuation\">,</span> shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            current_face <span class=\"token operator\">=</span> crop_face\n\n        <span class=\"token keyword\">if</span> exist_flag<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 获取已存在人脸的特征</span>\n            <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>faces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 初始化</span>\n                face_name_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"未知人脸\"</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\"># 每个捕获人脸的名字坐标</span>\n                face_position_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token punctuation\">[</span>faces<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>faces<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>faces<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> faces<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\"># 对于某张人脸，遍历所有存储的人脸特征</span>\n                current_distance_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>face_feature_exist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token comment\"># 如果 person_X 数据不为空</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>face_feature_exist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'0.0'</span><span class=\"token punctuation\">:</span>\n                        e_distance_tmp <span class=\"token operator\">=</span> euclidean_distance<span class=\"token punctuation\">(</span>face_feature_list<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                                            face_feature_exist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                        current_distance_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>e_distance_tmp<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token comment\"># 空数据 person_X</span>\n                        current_distance_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">999999999</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\"># 寻找出最小的欧式距离匹配</span>\n                min_dis <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>current_distance_list<span class=\"token punctuation\">)</span>\n                similar_person_num <span class=\"token operator\">=</span> current_distance_list<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>min_dis<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> min_dis <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">:</span>\n                    face_name_list<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> face_name_exist<span class=\"token punctuation\">[</span>similar_person_num<span class=\"token punctuation\">]</span>\n\n        end_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        fps_rec <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>end_time <span class=\"token operator\">-</span> start_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> d <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>faces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 计算矩形框大小 / Compute the size of rectangle box</span>\n            height <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> d<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            width <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> d<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            hh <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>height <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            ww <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            rect <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            image <span class=\"token operator\">=</span> drawRectBox<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">,</span> face_name_list<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'Stream'</span><span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span>\n        c <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span>\n</code></pre>\n<p><font face=\"微软雅黑\">        除了以上介绍的人脸匹配流程，这部分代码中还给出了识别出人脸后的标记过程。如果检测出人脸，则根据人脸的坐标未知绘制矩形框，根据识别结果在矩形框上方添加识别结果的文字，最后显示标记图像在窗口中。其运行结果如下图所示：</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\ed25b9327e5748f7be6e00716156e9dc.png\" width=\"600\"/></p>\n<p><font face=\"微软雅黑\">        有了以上实现的基础，我们可以把这部分功能进行改进，添加进UI界面中方便我们选择图像和管理人脸库。打开QtDesigner软件，拖动以下控件至主窗口中，调整界面样式和控件放置，人脸识别系统的界面设计如下图所示：</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9f6406137dfb4afe94c14890b24fb0dd.png\" width=\"700\"/></p>\n<p><font face=\"微软雅黑\">        控件界面部分设计好，接下来利用PyUIC工具将.ui文件转化为.py代码文件，通过调用界面部分的代码同时加入对应的逻辑处理代码。博主对其中的UI功能进行了详细测试，最终开发出一版流畅得到清新界面，就是博文演示部分的展示，完整的UI界面、测试图片视频、代码文件，以及Python离线依赖包（方便安装运行，也可自行配置环境），均已打包上传，感兴趣的朋友可以通过下载链接获取。</font></p>\n<hr/>\n<h1><a id=\"font_face_size5__colorff4500font_353\"></a><font color=\"#ff4500\" face=\"华文行楷\" size=\"5\">下载链接</font></h1>\n<p><font face=\"Times New Roman\">        若您想获得博文中涉及的实现完整全部程序文件（包括测试图片、视频，<font face=\"Times New Roman\"><em>py, UI</em></font>文件等，如下图），这里已打包上传至博主的面包多平台和<font face=\"Times New Roman\"><em>CSDN</em></font>下载资源。本资源已上传至面包多网站和<font face=\"Times New Roman\" size=\"4\"><em>CSDN</em></font>下载资源频道，可以点击<a href=\"#i1\">以下链接</a>获取，已将所有涉及的文件同时打包到里面，点击即可运行，完整文件截图如下：</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\91a82c4fc464466bad6e454ef4dec4a9.png\" width=\"600\"/></p>\n<p><font face=\"Times New Roman\">    在文件夹下的资源显示如下，其中包含了Python的离线依赖包，读者可在正确安装Anaconda和Pycharm软件后，点击bat文件进行安装，详细演示也可见本人B站视频。</font></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\f30efc037eac4a01800105e37b7da4fe.png\" width=\"600\"/></p>\n<p><span id=\"i1\"></span></p>\n<p><font color=\"green\" face=\"微软雅黑\" size=\"4\"><strong>注意</strong>：本资源已经过调试通过，下载后可通过<font face=\"Times New Roman\" size=\"4\"><em>Pycharm</em></font>运行；运行界面的主程序为<font color=\"red\"><font face=\"Times New Roman\" size=\"4\"><em><strong>runMain</strong>.py</em></font></font>，测试图片脚本可运行<font color=\"red\"><font face=\"Times New Roman\" size=\"4\"><em><strong>testFaceDemo</strong>.py</em></font></font>，测试人脸特征提取可运行<font color=\"red\"><font face=\"Times New Roman\" size=\"4\"><em><strong>testGetFeatures</strong>.py</em></font></font>。为确保程序顺利运行，请配置<font face=\"Times New Roman\"><font color=\"red\"><strong>Python版本：3.8</strong></font>，请勿使用其他版本，详见requirements.txt文件，</font>如下：</font>➷➷➷</p>\n<pre><code class=\"prism language-powershell\">blurhash == 1<span class=\"token punctuation\">.</span>1<span class=\"token punctuation\">.</span>4\nboost == 0<span class=\"token punctuation\">.</span>1\ncertifi == 2021<span class=\"token punctuation\">.</span>10<span class=\"token punctuation\">.</span>8\ncharset<span class=\"token operator\">-</span>normalizer == 2<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>12\ncmake == 3<span class=\"token punctuation\">.</span>22<span class=\"token punctuation\">.</span>2\ndecorator == 5<span class=\"token punctuation\">.</span>1<span class=\"token punctuation\">.</span>1\ndlib == 19<span class=\"token punctuation\">.</span>19<span class=\"token punctuation\">.</span>0\ngreenlet == 1<span class=\"token punctuation\">.</span>1<span class=\"token punctuation\">.</span>2\nidna == 3<span class=\"token punctuation\">.</span>3\njoblib == 1<span class=\"token punctuation\">.</span>1<span class=\"token punctuation\">.</span>0\nMastodon<span class=\"token punctuation\">.</span>py == 1<span class=\"token punctuation\">.</span>5<span class=\"token punctuation\">.</span>1\nnumpy == 1<span class=\"token punctuation\">.</span>19<span class=\"token punctuation\">.</span>5\nopencv<span class=\"token operator\">-</span>python == 4<span class=\"token punctuation\">.</span>1<span class=\"token punctuation\">.</span>2<span class=\"token punctuation\">.</span>30\npandas == 1<span class=\"token punctuation\">.</span>2<span class=\"token punctuation\">.</span>5\nPillow == 8<span class=\"token punctuation\">.</span>3<span class=\"token punctuation\">.</span>0\npyqt5 == 5<span class=\"token punctuation\">.</span>15<span class=\"token punctuation\">.</span>5\npython<span class=\"token operator\">-</span>dateutil == 2<span class=\"token punctuation\">.</span>8<span class=\"token punctuation\">.</span>2\npython<span class=\"token operator\">-</span>magic == 0<span class=\"token punctuation\">.</span>4<span class=\"token punctuation\">.</span>25\npytz == 2021<span class=\"token punctuation\">.</span>3\nrequests == 2<span class=\"token punctuation\">.</span>27<span class=\"token punctuation\">.</span>1\nscikit<span class=\"token operator\">-</span>learn == 1<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>2\nscipy == 1<span class=\"token punctuation\">.</span>8<span class=\"token punctuation\">.</span>0\nsix == 1<span class=\"token punctuation\">.</span>16<span class=\"token punctuation\">.</span>0\nSQLAlchemy == 1<span class=\"token punctuation\">.</span>4<span class=\"token punctuation\">.</span>31\nthreadpoolctl == 3<span class=\"token punctuation\">.</span>1<span class=\"token punctuation\">.</span>0\nurllib3 == 1<span class=\"token punctuation\">.</span>26<span class=\"token punctuation\">.</span>8\nwincertstore == 0<span class=\"token punctuation\">.</span>2\n</code></pre>\n<p><font face=\"微软雅黑\" size=\"4\"><font color=\"red\"><strong>完整资源下载链接1</strong>：</font><a href=\"https://mianbaoduo.com/o/bread/mbd-YpmYlZtw\"><strong>https://mianbaoduo.com/o/bread/mbd-YpmYlZtw</strong></a></font></p>\n<p><font face=\"微软雅黑\" size=\"4\"><font color=\"red\"><strong>完整资源下载链接2</strong>：</font><a href=\"https://mianbaoduo.com/o/bread/mbd-YpmYlZtw\"><strong>博主在CSDN下载频道的完整资源下载页</strong></a></font></p>\n<hr/>\n<h1><a id=\"font_face_size5font_404\"></a><font face=\"华文行楷\" size=\"5\">结束语</font></h1>\n<p><font face=\"Times New Roman\">        由于博主能力有限，博文中提及的方法即使经过试验，也难免会有疏漏之处。希望您能热心指出其中的错误，以便下次修改时能以一个更完美更严谨的样子，呈现在大家面前。同时如果有更好的实现方法也请您不吝赐教。</font></p>\n<hr class=\"footnotes-sep\"/>\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\"><li class=\"footnote-item\" id=\"fn1\"><p>徐怡彤, 王梅霞, 张培培. Dlib人脸识别在教师考勤中的应用[J]. 电脑编程技巧与维护, 2022(2):3. <a class=\"footnote-backref\" href=\"#fnref1\">↩︎</a></p> </li><li class=\"footnote-item\" id=\"fn2\"><p><a href=\"https://openaccess.thecvf.com/content_cvpr_2014/html/Kazemi_One_Millisecond_Face_2014_CVPR_paper.html\">Kazemi V, Sullivan J. One millisecond face alignment with an ensemble of regression trees[C]//Proceedings of the IEEE conference on computer vision and pattern recognition. 2014: 1867-1874.</a> <a class=\"footnote-backref\" href=\"#fnref2\">↩︎</a></p> </li><li class=\"footnote-item\" id=\"fn3\"><p><a href=\"https://openaccess.thecvf.com/content_cvpr_2016/html/He_Deep_Residual_Learning_CVPR_2016_paper.html\">He K, Zhang X, Ren S, et al. Deep residual learning for image recognition[C]//Proceedings of the IEEE conference on computer vision and pattern recognition. 2016: 770-778.</a> <a class=\"footnote-backref\" href=\"#fnref3\">↩︎</a></p> </li></ol>\n</section>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}