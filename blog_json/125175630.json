{"blogid": "125175630", "writerAge": "码龄2年", "writerBlogNum": "7", "writerCollect": "8", "writerComment": "1", "writerFan": "0", "writerGrade": "2级", "writerIntegral": "147", "writerName": "tutu木", "writerProfileAdress": "writer_image\\profile_125175630.jpg", "writerRankTotal": "104734", "writerRankWeekly": "638064", "writerThumb": "10", "writerVisitNum": "3408", "blog_read_count": "1669", "blog_time": "于 2022-06-07 23:55:19 发布", "blog_title": "vscode调试c++配置tasks.json和launch.json文件", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>环境：<br/> minguw<br/> vscode</p>\n<p>在vscode中配置文件，用mingw中的gcc和gdb调试c++程序</p>\n<ol><li>首先在项目根目录下创建.vscode文件夹</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c8883b70694a47718a1f3b61e0dc732b.png\"/><br/> 2. 新建一个task.json文件<br/> 建立一个shell任务，拼接命令完成.cpp文件编译，生成.exe文件</p>\n<pre><code class=\"prism language-json\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token string-property property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"tasks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token string-property property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"debug gdb\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//任务标签，用于标识这个任务</span>\n      <span class=\"token string-property property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//任务类型 process表示作为进程进程，shell表示输入命令进行 </span>\n      <span class=\"token string-property property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"g++\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//要执行的命令，这里是使用g++编译程序</span>\n      <span class=\"token string-property property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token comment\">//命令的一些参数</span>\n        <span class=\"token string\">\"-g\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//</span>\n        <span class=\"token string\">\"${file}\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//当前文件名</span>\n        <span class=\"token string\">\"-o\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//不进行编译优化</span>\n        <span class=\"token string\">\"${fileBasenameNoExtension}.exe\"</span><span class=\"token comment\">//当前不包括扩展名的文件名</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">//最后拼接起来的shell命令举例 g++ -g c:\\Users\\muzit\\Desktop\\lock\\LR1.cpp -o LR1.exe</span>\n      <span class=\"token string-property property\">\"problemMatcher\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"$gcc\"</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>label</code>: 任务标签，用于标识<br/> <code>${fileBasenameNoExtension}</code>: 当前文件的除去拓展名之后的文件名<br/> 这个配置文件的作用就是，拼接出shell命令，然后帮你执行编译任务，模拟的命令如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\32d67c1cab484725822190644379c841.png\"/><br/> tasks.json在一些不需要编译的环境里是必要的，但是对于python不需要编译的语言不需要这个文件也可以调试<br/> 3. 新建一个launch.json文件</p>\n<pre><code class=\"prism language-json\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token string-property property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gdb调试\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 配置名称，将会在启动配置的下拉菜单中显示 </span>\n      <span class=\"token string-property property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cppdbg\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 配置类型，这里只能为cppdbg </span>\n      <span class=\"token string-property property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 请求配置类型，可以为launch（启动）或attach（附加）</span>\n      <span class=\"token string-property property\">\"program\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceRoot}/${fileBasenameNoExtension}.exe\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 将要进行调试的程序的路径</span>\n      <span class=\"token string-property property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 程序调试时传递给程序的命令行参数，一般设为空即可  </span>\n      <span class=\"token string-property property\">\"stopAtEntry\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 设为true时程序将暂停在程序入口处，一般设置为false</span>\n      <span class=\"token string-property property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceRoot}\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 调试程序时的工作目录，一般为${workspaceRoot}即代码所在目录</span>\n      <span class=\"token string-property property\">\"environment\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"externalConsole\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 调试时是否显示控制台窗口，一般设置为true显示控制台</span>\n      <span class=\"token string-property property\">\"MIMode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gdb\"</span><span class=\"token punctuation\">,</span> \n      <span class=\"token string-property property\">\"miDebuggerPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C:\\\\MinGW\\\\bin\\\\gdb.exe\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// miDebugger的路径，注意这里要与自己的MinGw的路径对应 </span>\n      <span class=\"token string-property property\">\"preLaunchTask\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"debug gdb\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 调试会话开始前执行的任务，与tasks.json定义的任务标签相同</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里的重点是：<br/> <code>preLaunchTask</code>与tasks.json里面label相对应，因为每一次修改文件后都要重新编译，这个标签说明是在执行完debug gdb任务（重新编译）后再进行调试工作<br/> <code>program</code>标签指定即将调试的exe程序，<code>${workspaceRoot}/${fileBasenameNoExtension}.exe</code>拼接的文件路径<br/> <code>cwd</code>标签指当前工作目录<br/> <code>MIMode</code>:MIDebugEngine连接到的控制台程序，这里是gdb<br/> <code>miDebuggerPath</code>: 调试程序路径，这里要使用<code>\\\\</code>转义</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}