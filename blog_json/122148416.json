{"blogid": "122148416", "writerAge": "码龄5年", "writerBlogNum": "32", "writerCollect": "933", "writerComment": "34", "writerFan": "329", "writerGrade": "4级", "writerIntegral": "1102", "writerName": "finhaz", "writerProfileAdress": "writer_image\\profile_122148416.jpg", "writerRankTotal": "39779", "writerRankWeekly": "57680", "writerThumb": "142", "writerVisitNum": "92036", "blog_read_count": "5705", "blog_time": "已于 2022-07-21 23:28:58 修改", "blog_title": "基于c#上位机制作（WinForm控件）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>相关代码在github和gitee上放出<br/> gitee的地址：<a href=\"https://gitee.com/finhaz/fruit\">点此</a><br/> GitHub的地址：<a href=\"https://github.com/finhaz/fruit\">点此</a><br/> 起名是fruit，是因为以前入门c#的时候第一个学的例子就是fruit命名的。<br/> 现在程序中fruit工程对应的是winform版本，ocean工程对应的是wpf版本，由于学业紧张，wpf版本的迁移工作完成一拖再拖，目前winform版本基本完成，wpf只是个串口助手，相关说明等后期介绍。<br/> 这是一个串口通讯软件，基础功能是读取数据存入数据库，同时将数据发给下层，修改下层的扩展变量。附加功能是对针对微网控制，传送的数据进行数据处理，采用过粒子群等算法，期间经历多次改版。<br/> 设计它的原因是，在嵌入式开发或是其他学术研究时，有一个自己设计的上位机可以方便自己的研究，比如嵌入想要的算法，或是发送特定格式的通讯数据。由于以前学过c#，加上它和c语言接近，平时开发也以c语言为主，因此选择了c#作为设计语言。</p>\n<h1><a id=\"_7\"></a>上位机界面</h1>\n<h2><a id=\"_8\"></a>开发环境配置</h2>\n<p>用微软的Visual Studio开发而成，该软件可以通过微软的在线安装工具来安装，一般选择VS社区版就可以满足大部分的开发需要，只是需要注册微软账户来激活开发环境。<br/> 前期采用VS2017，后面微软出了新版本的VS我就更换，升级的时候顺带升级.net框架，安装配置过程差不多的。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\7924be327e0d4c5e8e0d761a6e2b4787.png\"/><br/> 开发组件只需要选择.net桌面开发即可,C++那个只要C#没必要选。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5f100199f2d94b0aa12925babd290b19.png\"/></p>\n<h2><a id=\"_14\"></a>控件学习</h2>\n<p>界面设计中，最常用的控件是button和timer<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5e61906eb48b494187513f05496dc3de.png\"/></p>\n<h4><a id=\"button_17\"></a>按钮button控件</h4>\n<p>对于任何一个控件，其控制分为了属性和事件两部分，点击任意一个控件，右下方就会出现属性管理面板。<br/> button是按钮的意思，该控件与上位机的操作使用十分相关。对于button的属性管理面板如下<br/> <img alt=\"在这里插入图片描述\" src=\"image\\84fd74c4b4fb40fa8472532cc576b891.png\"/><br/> 双击控件，可以进入到button的事件函数。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\04e967154843400baad03f15d199aebb.png\"/><br/> 假如在该函数里面写上button1.Text=“hello”，那么双击button1时，button1的Text这个属性就会发生修改。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6cac2ba7770d4487857abe92a69245d9.png\"/><br/> Text里面只是那个框里的显示内容，用来显示在外的函数改好了<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d71216b3c2764b2287eb5e825ce9f8e1.png\"/><br/> 点那个button，其名字就会发生变化。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3bf48a88b8f0467388e114e62aeab79f.png\"/><br/> button1有其他属性的修改是一样的写法，如修改button1的颜色，只需假如如下的语句<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f8fc00ed04bb4cbe96f0ef957fe6ac9c.png\"/><br/> 同理，当修改button1的大小时，只需要对其Width和Height属性进行修改。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\02dfe4364b164efe899b00d0a0b5e634.png\"/></p>\n<h4><a id=\"timer_33\"></a>定时器timer控件</h4>\n<p>这一控件的作用是起到定时作用，点中timer4，可以观测其属性。根据属性面板可以看到timer的计时以毫秒为单位，也就是其最短间隔时间为1ms。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\f5ef6b34cffb4ef7a122771aa45a4e5e.png\"/></p>\n<p>双击timer1，可以进入其对应的事件函数。这一事件函数将在定时到达1ms后发生。算法的编写主要在这个事件中完成。</p>\n<pre><code class=\"prism language-csharp\">  <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">timer1_Tick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_46\"></a>上位机构成</h1>\n<p>上位机主要由界面、功能、数据库三部分构成。<br/> 目前的设计界面是<br/> <img alt=\"在这里插入图片描述\" src=\"image\\72f175fc782643629366b22b7716645a.png\"/></p>\n<h2><a id=\"_51\"></a>界面开发</h2>\n<p>界面部分是采用控件的形式完成的，如想要增加一个按钮，只需要拖拽左侧的button到右侧的窗口上即可。这一部分是上位机设计最简单部分。<br/> 我的上位机主要采用了这几个按钮：<br/> 串口设置，用于配置串口的信息。<br/> 打开串口：用以打开串口。<br/> 数据核验：用以和下位机的参数进行核对校验。<br/> 运行：发送启动命令。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b745e5c5a78a4e279487552a9085f6ab.png\"/></p>\n<p>串口设置的按钮在点击后，产生一个窗口来配置串口。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\eee542ecf76a48e2a51b7c0136b2e025.png\"/></p>\n<p>对应代码可以这么写：</p>\n<pre><code class=\"prism language-csharp\">        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> ports <span class=\"token operator\">=</span> SerialPort<span class=\"token punctuation\">.</span><span class=\"token function\">GetPortNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ports<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">Form2</span> f2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Form2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                f2<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                MessageBox<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请插入串口设备！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>利用产生一个new form的建立新的窗口，这里要考虑的问题是新的窗口如何将数据写入原本的窗口的串口之中。<br/> 曾经考虑的写法是新建一个cs文件，定义一个公共类的串口，然后两个文件都可以调用。但是这样串口的属性事件配置不方便。<br/> 考虑用set函数，但是这是已经有的对象，不适合这么写。<br/> 于是窗口2中，我考虑让它直接寻找到form1</p>\n<pre><code class=\"prism language-csharp\">            <span class=\"token class-name\">Form1</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Parity</span> Ser_Parity<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Form1</span> f <span class=\"token keyword\">in</span> Application<span class=\"token punctuation\">.</span>OpenForms<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">==</span> <span class=\"token string\">\"Form1\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    f1 <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这样，f1就和form1绑定起来，在form2就可以直接操作form1的串口</p>\n<pre><code class=\"prism language-csharp\">            f1<span class=\"token punctuation\">.</span>Serial_Port <span class=\"token operator\">=</span> comboBox1<span class=\"token punctuation\">.</span>SelectedItem<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            f1<span class=\"token punctuation\">.</span>Serial_Baud <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt32</span><span class=\"token punctuation\">(</span>comboBox2<span class=\"token punctuation\">.</span>SelectedItem<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>其余几个按键，如打开串口，只是一个事件</p>\n<pre><code class=\"prism language-csharp\">        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button2_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sopen<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">try</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    serialPort1<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    button2<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"关闭串口\"</span><span class=\"token punctuation\">;</span>\n                    button3<span class=\"token punctuation\">.</span>Enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    button1<span class=\"token punctuation\">.</span>Enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    sopen <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">catch</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    MessageBox<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请插入串口设备！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    sopen <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                \n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                serialPort1<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                button2<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"打开串口\"</span><span class=\"token punctuation\">;</span>\n                button3<span class=\"token punctuation\">.</span>Enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                button1<span class=\"token punctuation\">.</span>Enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                sopen <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>               \n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里设计上用了很多try-catch，这样有助于处理异常，如串口不存在等问题。</p>\n<h2><a id=\"_139\"></a>功能部分</h2>\n<p>上位机的编程方式为<strong>面向事件编程</strong>，类似于dsp、单片机的中断机制，任何状态的改变，都会触发一个事件，比如串口接到数据，就会产生一个数据接收的事件。每个事件都有对应的hook函数，类似中断函数，可以编写相应的程序。当然需要注意的是，<strong>事件信号不等于中断信号</strong>，因为中断发生了以后，只能执行中断函数，而事件触发后，未必会只进行该事件的hook函数，因为CPU是多核的，可以并行执行的，因此，在程序中设置断点看到的结果，会与连续运行的有区别。</p>\n<h3><a id=\"_141\"></a>串口接收</h3>\n<p>由于需要串口通讯，设计上需要拖入串口的控件，这里用的是<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5aaebdb705c4432f818154ed247e3ab6.png\"/></p>\n<p>上位机的串口数据解析函数就是在串口接收事件的函数中编写完成的。<br/> 对应的事件是<br/> <img alt=\"在这里插入图片描述\" src=\"image\\28c1d35aec9a4f18999eeb8da99a043b.png\"/></p>\n<p>根据所制定的通讯协议标准完成。</p>\n<pre><code class=\"prism language-csharp\">        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SerialPort1_DataReceived</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerialDataReceivedEventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//该事件函数在新的线程执行</span>\n            <span class=\"token comment\">//没使用数据绑定前，此代码不可注释</span>\n            Control<span class=\"token punctuation\">.</span>CheckForIllegalCrossThreadCalls <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//throw new NotImplementedException();</span>\n            \n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> n_dsp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> check_result<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                j <span class=\"token operator\">=</span> serialPort1<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                str <span class=\"token operator\">+=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            str <span class=\"token operator\">+=</span> <span class=\"token char\">'\\r'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//richTextBox1.Text += str;</span>\n            model<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">+=</span> str<span class=\"token punctuation\">;</span>\n\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//数据区尚未接收完整</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            check_result<span class=\"token operator\">=</span>NYS_com<span class=\"token punctuation\">.</span><span class=\"token function\">monitor_check</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">function</span><span class=\"token punctuation\">(</span>check_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>其中</p>\n<pre><code class=\"prism language-csharp\">Control<span class=\"token punctuation\">.</span>CheckForIllegalCrossThreadCalls <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>主要是因为这个接收事件开辟了新的线程，要调用原本界面线程上定义的变量，会报错，所以加入这句话。<br/> 后面的语句主要是对于通讯协议的校验，这些函数取决于你设计的或者参照的通讯协议。</p>\n<h3><a id=\"_206\"></a>算法处理</h3>\n<p>对于数据解析完成后，需要考虑进行算法的执行。这里算法的调用，早期采用的是定时器模式实现，后面改为了多线程来实现。</p>\n<h4><a id=\"_208\"></a>定时器模式</h4>\n<p>在设置的软件定时器里面，当计数到一定值后，产生相应的事件，在该事件中编写完成相应的算法程序。<br/> 首先，预计算法程序是执行一次可控制在4ms内。开启了定时器4<br/> <img alt=\"在这里插入图片描述\" src=\"image\\0c19acc57b8447f086e4fe26a83accc9.png\"/><br/> 对应的事件为timer4_Tick事件，如果以后想更换算法，那么只需要修改该事件的程序。</p>\n<pre><code class=\"prism language-csharp\">        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">timer4_Tick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n        \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n        \t<span class=\"token punctuation\">{<!-- --></span>\n        \t\tflag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        \t\t<span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \t<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>整个程序是基于控件实现的，一段程序的触发也是通过对界面上控件的响应来实现的，因此，这里选择了使用定时器4，间隔4ms触发一次算法对应的程序。为防止算法程序在没有接收到两台逆变器的数据时就执行，对逆变器编号进行了判断，只有当接收到2号机的数据后，才会进行算法处理。<br/> 这样的话，假设数据刚好接收完毕，算法程序所在的定时器中断也刚好发生过一次，则算法可以立刻进行。相反，若刚好定时器的计数从零开始，那么算法相隔4ms后就会进行，相当于延迟了4ms。<br/> 当然，这一机制除了存在延时4ms的问题外，还存在的问题是CPU在没有接收到数据时，4ms进一次事件处理函数，所进行的是无意义的判断。<br/> 为此，改进的程序是在接收完两个DSP数据后，使能定时器，从而4ms后开始定时器的处理函数。<br/> 但是这样就造成了每次接收完成数据后，都要有一定延迟后才会进行算法。<br/> 因此，根本上的解决办法是，在数据判断接收完成后，直接触发算法的对应函数。从程序来看，算法本身无需使用定时器等控件的响应事件，因此，考虑的是开辟一个线程，该线程中执行算法程序，最后算法执行完毕后，该线程被回收，同时程序也执行完毕。<br/> 由于执行算法的线程是独立的，这样执行程序的过程中，通讯和界面程序不受影响。<br/> <strong>从这一点引申出来，如果把界面显示和数据库操作、通讯等阻塞型I/O操作程序分离出来，建立相应的独立线程，那么上位机的软件设计能够更好地协调这些工作，并且这样可以将程序模块化，有利于后期程序的维护升级。</strong></p>\n<h4><a id=\"_234\"></a>多线程实现</h4>\n<p>实际上，完全可以开辟一个新的线程来执行，无需利用定时器，以免产生额外的调用消耗。<br/> Thread类可以帮助处理这个问题。</p>\n<pre><code class=\"prism language-csharp\">                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                \tflag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Thread</span> th <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ThreadStart</span><span class=\"token punctuation\">(</span>PSO_v<span class=\"token punctuation\">.</span>cale_pso<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建PSO线程</span>\n                    th<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//启动线程                          </span>\n                    <span class=\"token class-name\">Thread</span> th1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ThreadStart</span><span class=\"token punctuation\">(</span>update_UI_PSO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建UI线程</span>\n                    th1<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//启动线程</span>\n                  \n\n                <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>建立新的线程时，将要执行的算法封装为一个函数function，然后用来初始化线程</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Thread</span> th <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ThreadStart</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建PSO线程</span>\n</code></pre>\n<p>之后只需要start就行了。</p>\n<h3><a id=\"_256\"></a>通讯周期的计算</h3>\n<p>程序向上位机上传的各种信息，波特率为115200.115200/10为1s能传送的字节数，再除以1000为1ms能传送的字节数为11.52.<br/> 提高波特率后的流程如下图所示。通过计算，上位机发送和接收数据的时间都得到了大幅度的提高，考虑裕量和传送需要的时间，设定数据的请求周期为50ms，数据上下发送的顺序等维持之前的状态不变。</p>\n<h3><a id=\"_260\"></a>数据库部分</h3>\n<p>数据库部分则是采用了微软的access数据库开发，学校一般会购买office套件，含有该数据库。其他的数据库不太熟悉，以后有机会改用。<br/> 采用的是SQL语言进行数据的存储、读取。该部分程序在上位机参数中处于初始化的作用。比如上位机起动时的调试参数，是读取自mdb文件，mdb文件为微软的数据库文件类型。同时，每次实验中，修改过调试参数后，该部分参数会被存入到数据库之中，下次重新打开上位机时，会载入最后一次调试的设定参数。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\62c76914837a49d291a6bb66a4081260.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a5714df80a3e47bea30ce5236ee4247c.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\9ffc1b7fc74f444e88794893679d94bf.png\"/><br/> 该部分程序执行的位置是窗口控件Form1的Form1_Load事件,该事件中，可以执行许多初始化的程序。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\af94308a6ef1407aa4e80550e292b6aa.png\"/><br/> 比如，我考虑用mdb的文件数据读取后，存入dataGridView控件。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b3eac334485f46fab94b6e2bb7ea4850.png\"/><br/> 我将数据库相关函数封装于类对象DB_Com之中，然后调用相关函数。</p>\n<pre><code class=\"prism language-csharp\">        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Form1_Load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n\n            <span class=\"token comment\">//基本存储、参数设置初始化</span>\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                DB_Com<span class=\"token punctuation\">.</span><span class=\"token function\">DataBase_PARAMETER_RUN_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> DB_Com<span class=\"token punctuation\">.</span>u<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> DB_Com<span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataGridView1<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataGridView1<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Cells<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>SN<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataGridView1<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Cells<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>NAME<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataGridView1<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Cells<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VALUE<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>FACTOR <span class=\"token operator\">&gt;</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">//dataGridView1.Rows[index].Cells[3].Value = format('%.2f',[datas[j].FACTOR]) + data[j].UNITor;      //名称</span>\n                        dataGridView1<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Cells<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">Round</span><span class=\"token punctuation\">(</span>DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>FACTOR<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>UNITor<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">else</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        dataGridView1<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Cells<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>UNITor<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    DB_Com<span class=\"token punctuation\">.</span>runnum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                DB_Com<span class=\"token punctuation\">.</span><span class=\"token function\">DataBase_PARAMETER_SET_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> DB_Com<span class=\"token punctuation\">.</span>u<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span>DB_Com<span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>SN <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataGridView2<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataGridView2<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Cells<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>SN<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataGridView2<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Cells<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>NAME<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataGridView2<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Cells<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VALUE<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>FACTOR <span class=\"token operator\">&gt;</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{<!-- --></span>\n\n                            <span class=\"token comment\">//dataGridView2.Rows[index].Cells[3].Value = format('%.2f',[datas[j].FACTOR]) + data[j].UNITor;      //名称</span>\n                            dataGridView2<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Cells<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">Round</span><span class=\"token punctuation\">(</span>DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>FACTOR<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>UNITor<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">else</span>\n                        <span class=\"token punctuation\">{<!-- --></span>\n                            dataGridView2<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Cells<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>UNITor<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n\n\n                DB_Com<span class=\"token punctuation\">.</span><span class=\"token function\">DataBase_PARAMETER_FACTOR_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> DB_Com<span class=\"token punctuation\">.</span>u<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> DB_Com<span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataGridView3<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataGridView3<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Cells<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>SN<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataGridView3<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Cells<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>NAME<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataGridView3<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Cells<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> DB_Com<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VALUE<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n\n                DB_Com<span class=\"token punctuation\">.</span><span class=\"token function\">DataBase_ERROR_Table_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                MessageBox<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"缺少mdb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>而数据库部分的连接，具体实现时，采用是SQL语言和Ole组件连接，这种方式后期考虑改进。<br/> 如</p>\n<pre><code class=\"prism language-csharp\">        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DataBase_PARAMETER_RUN_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n\n            <span class=\"token comment\">//OleDbConnection conn = new OleDbConnection(\"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=MOON.mdb\"); //Jet OLEDB:Database Password</span>\n            <span class=\"token comment\">//OleDbCommand cmd = conn.CreateCommand();</span>\n            \n            conn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">OleDbConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=MOON.mdb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Jet OLEDB:Database Password</span>\n            cmd <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">CreateCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            cmd<span class=\"token punctuation\">.</span>CommandText <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from PARAMETER_RUN\"</span><span class=\"token punctuation\">;</span>\n            conn<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            u <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//OleDbDataReader dr = cmd.ExecuteReader();</span>\n            dr <span class=\"token operator\">=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>dr<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                j <span class=\"token operator\">=</span> dr<span class=\"token punctuation\">.</span><span class=\"token function\">GetInt32</span><span class=\"token punctuation\">(</span>dr<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrdinal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>SN <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>NAME <span class=\"token operator\">=</span> dr<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span>dr<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrdinal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NAME\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">catch</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>LENG <span class=\"token operator\">=</span> dr<span class=\"token punctuation\">.</span><span class=\"token function\">GetInt32</span><span class=\"token punctuation\">(</span>dr<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrdinal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"leng\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//data[j].VALUE = dr.GetInt16(dr.GetOrdinal(\"value\"));</span>\n                    data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VALUE <span class=\"token operator\">=</span> dr<span class=\"token punctuation\">.</span><span class=\"token function\">GetFloat</span><span class=\"token punctuation\">(</span>dr<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrdinal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">catch</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VALUE <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>COMMAND <span class=\"token operator\">=</span> dr<span class=\"token punctuation\">.</span><span class=\"token function\">GetInt32</span><span class=\"token punctuation\">(</span>dr<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrdinal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"COMMAND\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>NO <span class=\"token operator\">=</span> dr<span class=\"token punctuation\">.</span><span class=\"token function\">GetInt32</span><span class=\"token punctuation\">(</span>dr<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrdinal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>UNITor <span class=\"token operator\">=</span> dr<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span>dr<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrdinal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">catch</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>UNITor <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">try</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>FACTOR <span class=\"token operator\">=</span> dr<span class=\"token punctuation\">.</span><span class=\"token function\">GetFloat</span><span class=\"token punctuation\">(</span>dr<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrdinal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"factor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">catch</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>FACTOR <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            conn<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>数据库连接方式，可以参照文章《<a href=\"https://www.cnblogs.com/18553325o9o/p/4676617.html\">C#连接Access数据库(详解)</a>》学习。</p>\n<h1><a id=\"_413\"></a>上位机通讯</h1>\n<h2><a id=\"_414\"></a>下位机数据更新策略</h2>\n<p>以DSP28335作为下位机为例。<br/> 通常，更新数据的办法是建立一个数组，然后把相应的变量定时赋值给该数组。<br/> 如下面的程序在频率为5K的中断中执行</p>\n<pre><code class=\"prism language-c\">n_pso<span class=\"token operator\">++</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n_pso<span class=\"token operator\">==</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tn_pso<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>对于1和2两台逆变器来讲，更新数据的频率就是50ms一个周期，那么时序图如下：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\b7355ad91f524211a3c30a4dc8b5860f.png\"/><br/> 这一更新策略，在计算好所有消耗时间的情况下是大致可行的，但是如果一旦采样频率等发生改变，那么相应的时间需要重新计算。<br/> 为此，新的更新策略是直接将数据和数组进行绑定,例如，准备传递变量Idnout,对应数组pso_t[0]。则：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">define</span> Idnout pso_t[0]</span>\n</code></pre>\n<p>这一更新策略下，无需单独赋值给数组，下位机侧的更新速度达到最快，理论上最快的刷新频率等于采样频率。<br/> 且该策略下，可以减少DSP变量的定义数量，对于减少DSP的内存使用具有一定的帮助。<br/> 当然，对于结构体成员，不适合进行这样的操作时，需要单独赋值。</p>\n<h2><a id=\"_439\"></a>上位机对下位机请求数据</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\a8cd8ba993b84905aecc2e2c580118b1.png\"/><br/> 这一控件在以1ms为基准，间隔触发定时器的事件时，由于该控件的事件的处理函数是在程序主线程上执行的，因此时间可能会不准。<br/> 最直接的例子是算法计数为50ms时，期望是50ms的周期读取一次下位机的数据，然而测量显示:<br/> <img alt=\"在这里插入图片描述\" src=\"image\\85cc7e06a13f432faaad691cde22b968.png\"/><br/> 因此，为保证通讯的时序，且暂时无法使用多线程模式的情况下，将定时器的时间间隔调整<br/> <img alt=\"在这里插入图片描述\" src=\"image\\5ce8245904a449b5b16ffc10eca103f7.png\"/><br/> 调整间隔时间后，对计数值也修改为4，目标是60ms发送一次，实际的显示时间也变为了约64ms一次。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\85892bd7a4984b2084246d756c16034d.png\"/><br/> 以下是几个通讯的传输时间测试：<br/> 485的字节传输时间<br/> 传输7个浮点数，115200波特率<br/> <img alt=\"在这里插入图片描述\" src=\"image\\a048cca753084ecea757dd731f3b9986.png\"/><br/> 上位机发送间隔<br/> 定时器采用的计数控件timer3的间隔为1ms，，计数到55重发，发送间隔为800ms<br/> <img alt=\"在这里插入图片描述\" src=\"image\\00321d2ede1e46c29afcdf7f1690ceea.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\7bbdc31c01d84481a0c71a1459d90039.png\"/><br/> 上位机发送间隔<br/> 定时器采用的计数控件timer3的间隔为15ms，，计数到6重发，发送间隔为90ms<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1eee5f02eb51416ca59de5c7790fbcf0.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\e4bcd29e91ae412eadead0e47218dfb5.png\"/><br/> 上位机发送间隔<br/> 定时器采用的计数控件timer3的间隔为15ms，，计数到4重发，发送间隔为40ms<br/> <img alt=\"在这里插入图片描述\" src=\"image\\62206f3468574890a20162b4a0af1785.png\"/><br/> 这边定时器计数最准确的时间是15ms为单位，可相对准确的计时。这里后期考虑改进。</p>\n<h1><a id=\"VS_465\"></a>VS的多行注释</h1>\n<p>注释： 先CTRL+K，然后CTRL+C</p>\n<p>取消注释： 先CTRL+K，然后CTRL+U</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}