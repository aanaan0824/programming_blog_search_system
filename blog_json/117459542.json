{"blogid": "117459542", "writerAge": "码龄8年", "writerBlogNum": "316", "writerCollect": "954", "writerComment": "910", "writerFan": "3345", "writerGrade": "6级", "writerIntegral": "5513", "writerName": "自己的九又四分之三站台", "writerProfileAdress": "writer_image\\profile_117459542.jpg", "writerRankTotal": "3257", "writerRankWeekly": "2234", "writerThumb": "794", "writerVisitNum": "264820", "blog_read_count": "1263", "blog_time": "于 2021-06-02 09:16:13 发布", "blog_title": "CSharp再爱我一次，你真的懂泛型吗？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>最近博客上一直在更新和C#无关的知识点，弄得我自己都以为自己自己要放弃C#了，不我还是那个对C#深爱着的小菜菜。（好恶心，哈哈哈）。</p>\n<p>今天在知识梳理上，梳理一下C#中的泛型，希望一方面为C#语言的生态发展尽一份心力，也是在工作外也不放弃自己C#的功力基础。</p>\n<h1><a id=\"1__4\"></a>1. 什么是泛型，在各种语言中泛型是什么？</h1>\n<p>第一种支持泛型的语言是ADA(一种Pascal语言的后代,差不多是军方的专用语言).而把泛型发扬光大的的是C++(主要是借助泛型实现的模板).</p>\n<ul><li> <p>C#，</p>\n<ul><li>作为本篇博客的主角，我们先说说C#中的泛型，在C#中泛型是C#2.0推出的新语法，不是语法糖，而是2.0由框架升级提供的功能。</li><li>C#通过运行时检查来保证约束.</li></ul> </li><li> <p>C++</p>\n<ul><li> <p>在C++中泛型的叫做“模板”</p> </li><li> <p>C++的模板约束能力比较差.相当于没有.主要是通过代码替换.替换后的代码能便通过就通过了.通不过就报编译错误.不过未来的C++0X标准加入了模板约束.</p> </li></ul> </li><li> <p>Delphi</p>\n<ul><li>在编译角度讲则更像C++,是通过代码替换机制生成参考类来实现泛型的.但Delphi的类型限制更严格.没有指定类型的约束的时候是不允许使用特定的方法或者操作符等的.具体在后面的约束中讲.</li><li>Delphi通过编译器来保证泛型约束.</li></ul> </li><li> <p>Java</p>\n<ul><li>Java中的泛型主要是通过编译器把泛型类全部变成object来实现的.而泛型类的方法是编译通过打包等技术进行类型转换的</li></ul> <pre><code class=\"prism language-java\">例如<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span>实际上永远都是<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>object<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>不会生成新的参考类<span class=\"token punctuation\">.</span>\n</code></pre> </li></ul>\n<h1><a id=\"2_C_31\"></a>2. C#中的泛型是什么？</h1>\n<p>在C#中的泛型是什么？如下代码中就是泛型</p>\n<pre><code class=\"prism language-C#\">\nList&lt;T&gt;;List&lt;String&gt;;List&lt;Double&gt;;List&lt;Date&gt;;List&lt;UserDefaultClass&gt;\n\npublic class UserDefaultClass\n{\n\n}\n</code></pre>\n<p>一般来说在C#语言中使用&lt;&gt;包含起来的就是泛型，也就是List,这个T就是泛型</p>\n<p>泛型是C#2.0推出的新语法，不是语法糖，而是2.0由框架升级提供的功能。</p>\n<ol><li>没有泛型之前我们写代码是这样的</li></ol>\n<pre><code class=\"prism language-C#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace MyGeneric\n{\n    public class CommonMethod\n    {\n        /// &lt;summary&gt;\n        /// 打印个int值\n        /// \n        /// 因为方法声明的时候，写死了参数类型\n        /// 已婚的男人 Eleven San\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"iParameter\"&gt;&lt;/param&gt;\n        public static void ShowInt(int iParameter)\n        {\n            Console.WriteLine(\"This is {0},parameter={1},type={2}\",\n                typeof(CommonMethod).Name, iParameter.GetType().Name, iParameter);\n        }\n\n        /// &lt;summary&gt;\n        /// 打印个string值\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sParameter\"&gt;&lt;/param&gt;\n        public static void ShowString(string sParameter)\n        {\n            Console.WriteLine(\"This is {0},parameter={1},type={2}\",\n                typeof(CommonMethod).Name, sParameter.GetType().Name, sParameter);\n        }\n\n        /// &lt;summary&gt;\n        /// 打印个DateTime值\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"oParameter\"&gt;&lt;/param&gt;\n        public static void ShowDateTime(DateTime dtParameter)\n        {\n            Console.WriteLine(\"This is {0},parameter={1},type={2}\",\n                typeof(CommonMethod).Name, dtParameter.GetType().Name, dtParameter);\n        }\n    }\n}\n</code></pre>\n<p>在上面的代码中我们会发现，我们对于每一种类型都要指定一种方法，所以为了解决这个问题大多数人会这样编写代码</p>\n<ol start=\"2\"><li>Object解决类型定义的问题</li></ol>\n<pre><code class=\"prism language-C#\">public static void ShowObject(object oParameter)\n{\n      Console.WriteLine(\"This is {0},parameter={1},type={2}\",\n         typeof(CommonMethod), oParameter.GetType().Name, oParameter);\n}\n</code></pre>\n<p>但是在使用了上述的代码之后，会导致效率低下（频繁多次调用）的问题，原因是由于在调用是会有一次装箱，而在调用函数ShowObject时会将对象装箱到oParameter中，而在使用类型是会有一次拆箱操作。</p>\n<ul><li> <p>装箱转换是指将一个值类型隐式地转换成一个object 类型，或者把这个值类型转换成一个被该值类型应用的接口类型interface-type。把一个值类型的值装箱，也就是创建一个object 实例并将这个值复制给这个object。</p> </li><li> <p>和装箱转换正好相反，拆箱转换是指将一个对象类型显式地转换成一个值类型，或是将一个接口类型显式地转换成一个执行该接口的值类型。</p> </li></ul>\n<ol start=\"3\"><li>在CLR泛型出现之后可以这样写</li></ol>\n<pre><code class=\"prism language-C#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace MyGeneric\n{\n    public class GenericMethod\n    {\n        /// &lt;summary&gt;\n        /// 泛型方法\n        /// &lt;/summary&gt;\n        /// &lt;typeparam name=\"T\"&gt;&lt;/typeparam&gt;\n        /// &lt;param name=\"tParameter\"&gt;&lt;/param&gt;\n        public static void Show&lt;T&gt;(T tParameter)\n        {\n            Console.WriteLine(\"This is {0},parameter={1},type={2}\",\n                typeof(GenericMethod), tParameter.GetType().Name, tParameter.ToString());\n        }\n    }\n}\n</code></pre>\n<h1><a id=\"3_C_143\"></a>3. C#为什么会出现泛型？以及编译原理是什么？</h1>\n<p>泛型是延迟声明的：即定义的时候没有指定具体的参数类型，把参数类型的声明推迟到了调用的时候才指定参数类型。 延迟思想在程序架构设计的时候很受欢迎。例如：分布式缓存队列、EF的延迟加载等等。</p>\n<h2><a id=\"31__147\"></a>3.1 为什么泛型可以解决上面的问题呢？</h2>\n<p>泛型是延迟声明的：即定义的时候没有指定具体的参数类型，把参数类型的声明推迟到了调用的时候才指定参数类型。 延迟思想在程序架构设计的时候很受欢迎。例如：分布式缓存队列、EF的延迟加载等等。</p>\n<h2><a id=\"32__151\"></a>3.2 泛型究竟是如何工作的呢？</h2>\n<p>控制台程序最终会编译成一个exe程序，exe被点击的时候，会经过JIT(即时编译器)的编译，最终生成二进制代码，才能被计算机执行。泛型加入到语法以后，VS自带的编译器又做了升级，升级之后编译时遇到泛型，会做特殊的处理：生成占位符。再次经过JIT编译的时候，会把上面编译生成的占位符替换成具体的数据类型。请看下面一个例子：</p>\n<pre><code class=\"prism language-C#\">Console.WriteLine(typeof(List&lt;&gt;));\nConsole.WriteLine(typeof(Dictionary&lt;,&gt;));\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210602091332523.jpg\"/></p>\n<p>从上面的截图中可以看出：泛型在编译之后会生成占位符。</p>\n<p>注意：占位符需要在英文输入法状态下才能输入，只需要按一次波浪线(数字1左边的键位)的键位即可，不需要按Shift键。</p>\n<h1><a id=\"4_CC_168\"></a>4. C#中的泛型优秀在哪里？在C#中如何使用泛型。</h1>\n<h2><a id=\"41_C_170\"></a>4.1 C#中的泛型性能</h2>\n<p>请看一下的一个例子，比较普通方法、Object参数类型的方法、泛型方法的性能。</p>\n<p>添加一个Monitor类，让三种方法执行同样的操作，比较用时长短：</p>\n<pre><code class=\"prism language-C#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace MyGeneric\n{\n    public class Monitor\n    {\n        public static void Show()\n        {\n            Console.WriteLine(\"****************Monitor******************\");\n            {\n                int iValue = 12345;\n                long commonSecond = 0;\n                long objectSecond = 0;\n                long genericSecond = 0;\n\n                {\n                    Stopwatch watch = new Stopwatch();\n                    watch.Start();\n                    for (int i = 0; i &lt; 100000000; i++)\n                    {\n                        ShowInt(iValue);\n                    }\n                    watch.Stop();\n                    commonSecond = watch.ElapsedMilliseconds;\n                }\n                {\n                    Stopwatch watch = new Stopwatch();\n                    watch.Start();\n                    for (int i = 0; i &lt; 100000000; i++)\n                    {\n                        ShowObject(iValue);\n                    }\n                    watch.Stop();\n                    objectSecond = watch.ElapsedMilliseconds;\n                }\n                {\n                    Stopwatch watch = new Stopwatch();\n                    watch.Start();\n                    for (int i = 0; i &lt; 100000000; i++)\n                    {\n                        Show&lt;int&gt;(iValue);\n                    }\n                    watch.Stop();\n                    genericSecond = watch.ElapsedMilliseconds;\n                }\n                Console.WriteLine(\"commonSecond={0},objectSecond={1},genericSecond={2}\"\n                    , commonSecond, objectSecond, genericSecond);\n            }\n        }\n\n        #region PrivateMethod\n        private static void ShowInt(int iParameter)\n        {\n            //do nothing\n        }\n        private static void ShowObject(object oParameter)\n        {\n            //do nothing\n        }\n        private static void Show&lt;T&gt;(T tParameter)\n        {\n            //do nothing\n        }\n        #endregion\n\n    }\n}\n</code></pre>\n<p>Main()方法调用：</p>\n<pre><code class=\"prism language-C#\">Monitor.Show();\n</code></pre>\n<p>结果：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210602091349677.jpg\"/></p>\n<h2><a id=\"42__262\"></a>4.2 除了方法可以是泛型以外,其他的也是可以泛型的</h2>\n<ol><li>泛型类</li></ol>\n<pre><code class=\"prism language-C#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace MyGeneric\n{\n    /// &lt;summary&gt;\n    /// 泛型类\n    /// &lt;/summary&gt;\n    /// &lt;typeparam name=\"T\"&gt;&lt;/typeparam&gt;\n    public class GenericClass&lt;T&gt;\n    {\n        public T _T;\n    }\n}\n</code></pre>\n<pre><code class=\"prism language-C#\">// T是int类型\nGenericClass&lt;int&gt; genericInt = new GenericClass&lt;int&gt;();\ngenericInt._T = 123;\n// T是string类型\nGenericClass&lt;string&gt; genericString = new GenericClass&lt;string&gt;();\ngenericString._T = \"123\";\n</code></pre>\n<ol start=\"2\"><li>泛型接口</li></ol>\n<pre><code class=\"prism language-C#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace MyGeneric\n{\n    /// &lt;summary&gt;\n    /// 泛型接口\n    /// &lt;/summary&gt;\n    public interface IGenericInterface&lt;T&gt;\n    {\n        //泛型类型的返回值\n        T GetT(T t);\n    }\n}\n</code></pre>\n<ol start=\"3\"><li>泛型委托</li></ol>\n<pre><code class=\"prism language-C#\">public delegate void SayHi&lt;T&gt;(T t);//泛型委托\n</code></pre>\n<p>TIP注意：</p>\n<ol><li>泛型在声明的时候可以不指定具体的类型，但是在使用的时候必须指定具体类型，例如：</li></ol>\n<pre><code class=\"prism language-C#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace MyGeneric\n{\n    /// &lt;summary&gt;\n    /// 使用泛型的时候必须指定具体类型，\n    /// 这里的具体类型是int\n    /// &lt;/summary&gt;\n    public class CommonClass :GenericClass&lt;int&gt;\n    {\n    }\n}\n</code></pre>\n<ol start=\"2\"><li>如果子类也是泛型的，那么继承的时候可以不指定具体类型，例如：</li></ol>\n<pre><code class=\"prism language-C#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace MyGeneric\n{\n    /// &lt;summary&gt;\n    /// 使用泛型的时候必须指定具体类型，\n    /// 这里的具体类型是int\n    /// &lt;/summary&gt;\n    public class CommonClass :GenericClass&lt;int&gt;\n    {\n    }\n\n    /// &lt;summary&gt;\n    /// 子类也是泛型的，继承的时候可以不指定具体类型\n    /// &lt;/summary&gt;\n    /// &lt;typeparam name=\"T\"&gt;&lt;/typeparam&gt;\n    public class CommonClassChild&lt;T&gt;:GenericClass&lt;T&gt;\n    {\n\n    }\n}\n</code></pre>\n<h1><a id=\"5_5_375\"></a>5 泛型的5大约束</h1>\n<p>所谓的泛型约束，实际上就是约束的类型T。使T必须遵循一定的规则。比如T必须继承自某个类，或者T必须实现某个接口等等。那么怎么给泛型指定约束？其实也很简单，只需要where关键字，加上约束的条件。</p>\n<p>泛型约束总共有五种。</p>\n<table><thead><tr><th>序号</th><th>约束名称</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>T：结构</td><td>类型参数必须是值类型</td></tr><tr><td>2</td><td>T：类</td><td>类型参数必须是引用类型；这一点也适用于任何类、接口、委托或数组类型。</td></tr><tr><td>3</td><td>T：new()</td><td>类型参数必须具有无参数的公共构造函数。 当与其他约束一起使用时，new() 约束必须最后指定。</td></tr><tr><td>4</td><td>T：&lt;基类名&gt;</td><td>类型参数必须是指定的基类或派生自指定的基类。</td></tr><tr><td>5</td><td>T：&lt;接口名称&gt;</td><td>类型参数必须是指定的接口或实现指定的接口。 可以指定多个接口约束。 约束接口也可以是泛型的。</td></tr></tbody></table>\n<ol><li>基类约束</li></ol>\n<p>上面打印的方法约束T类型必须是People类型。</p>\n<pre><code class=\"prism language-C#\">/// &lt;summary&gt;\n/// 基类约束：约束T必须是People类型或者是People的子类\n/// &lt;/summary&gt;\n/// &lt;typeparam name=\"T\"&gt;&lt;/typeparam&gt;\n/// &lt;param name=\"tParameter\"&gt;&lt;/param&gt;\npublic static void Show&lt;T&gt;(T tParameter) where T : People\n{\n      Console.WriteLine($\"{tParameter.Id}_{tParameter.Name}\");\n      tParameter.Hi();\n}\n</code></pre>\n<p>注意：</p>\n<p>基类约束时，基类不能是密封类，即不能是sealed类。sealed类表示该类不能被继承，在这里用作约束就无任何意义，因为sealed类没有子类。</p>\n<ol start=\"2\"><li>接口约束</li></ol>\n<pre><code class=\"prism language-C#\">/// &lt;summary&gt;\n/// 接口约束\n/// &lt;/summary&gt;\n/// &lt;typeparam name=\"T\"&gt;&lt;/typeparam&gt;\n/// &lt;param name=\"t\"&gt;&lt;/param&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\npublic static T Get&lt;T&gt;(T t) where T : ISports\n{\n      t.Pingpang();\n      return t;\n}\n</code></pre>\n<ol start=\"3\"><li>引用类型约束 class</li></ol>\n<p>引用类型约束保证T一定是引用类型的。</p>\n<pre><code class=\"prism language-C#\">/// &lt;summary&gt;\n/// 引用类型约束\n/// &lt;/summary&gt;\n/// &lt;typeparam name=\"T\"&gt;&lt;/typeparam&gt;\n/// &lt;param name=\"t\"&gt;&lt;/param&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\npublic static T Get&lt;T&gt;(T t) where T : class\n{\n      return t;\n}\n</code></pre>\n<ol start=\"4\"><li>值类型约束 struct</li></ol>\n<p>值类型约束保证T一定是值类型的。</p>\n<pre><code class=\"prism language-C#\">/// &lt;summary&gt;\n/// 值类型类型约束\n/// &lt;/summary&gt;\n/// &lt;typeparam name=\"T\"&gt;&lt;/typeparam&gt;\n/// &lt;param name=\"t\"&gt;&lt;/param&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\npublic static T Get&lt;T&gt;(T t) where T : struct\n{\n      return t;\n}\n</code></pre>\n<ol start=\"5\"><li>无参数构造函数约束 new()</li></ol>\n<pre><code class=\"prism language-C#\">/// &lt;summary&gt;\n/// new()约束\n/// &lt;/summary&gt;\n/// &lt;typeparam name=\"T\"&gt;&lt;/typeparam&gt;\n/// &lt;param name=\"t\"&gt;&lt;/param&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\npublic static T Get&lt;T&gt;(T t) where T : new()\n{\n     return t;\n}\n</code></pre>\n<ol start=\"6\"><li>泛型约束也可以同时约束多个，例如：</li></ol>\n<p>注意：有多个泛型约束时，new()约束一定是在最后。</p>\n<pre><code class=\"prism language-C#\">public static void Show&lt;T&gt;(T tParameter)\n            where T : People, ISports, IWork, new()\n{\n      Console.WriteLine($\"{tParameter.Id}_{tParameter.Name}\");\n      tParameter.Hi();\n      tParameter.Pingpang();\n      tParameter.Work();\n}\n</code></pre>\n<h1><a id=\"6__490\"></a>6 泛型的协变与逆变</h1>\n<p>协变和逆变是在.NET 4.0的时候出现的，只能放在接口或者委托的泛型参数前面，out 协变covariant，用来修饰返回值；in：逆变contravariant，用来修饰传入参数。这也是最重要的。Java使用通配符支持协变性/逆变性。C#4受限的泛型可变性在一些程度上改善了一点，但Java的可变性模型仍然在一些时候要更好一些。</p>\n<p>先看下面的一个例子：</p>\n<p>定义一个Animal类：</p>\n<pre><code class=\"prism language-C#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace MyGeneric\n{\n    public class Animal\n    {\n        public int Id { get; set; }\n    }\n}\n</code></pre>\n<p>然后在定义一个Cat类继承自Animal类：</p>\n<pre><code class=\"prism language-C#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace MyGeneric\n{\n    public class Cat :Animal\n    {\n        public string Name { get; set; }\n    }\n}\n</code></pre>\n<p>在Main()方法可以这样调用：</p>\n<pre><code class=\"prism language-C#\">// 直接声明Animal类\nAnimal animal = new Animal();\n// 直接声明Cat类\nCat cat = new Cat();\n// 声明子类对象指向父类\nAnimal animal2 = new Cat();\n// 声明Animal类的集合\nList&lt;Animal&gt; listAnimal = new List&lt;Animal&gt;();\n// 声明Cat类的集合\nList&lt;Cat&gt; listCat = new List&lt;Cat&gt;();\n</code></pre>\n<p>那么问题来了：下面的一句代码是不是正确的呢？</p>\n<pre><code class=\"prism language-C#\">List&lt;Animal&gt; list = new List&lt;Cat&gt;();\n</code></pre>\n<p>可能有人会认为是正确的：因为一只Cat属于Animal，那么一群Cat也应该属于Animal啊。但是实际上这样声明是错误的：因为List和List之间没有父子关系。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210602091413353.png\"/></p>\n<p>这时就可以用到协变和逆变了。</p>\n<pre><code class=\"prism language-C#\">// 协变\nIEnumerable&lt;Animal&gt; List1 = new List&lt;Animal&gt;();\nIEnumerable&lt;Animal&gt; List2 = new List&lt;Cat&gt;();\n\n</code></pre>\n<p>F12查看定义：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210602091421761.jpg\"/></p>\n<p>可以看到，在泛型接口的T前面有一个out关键字修饰，而且T只能是返回值类型，不能作为参数类型，这就是协变。使用了协变以后，左边声明的是基类，右边可以声明基类或者基类的子类。</p>\n<p>协变除了可以用在接口上面，也可以用在委托上面：</p>\n<pre><code class=\"prism language-C#\">Func&lt;Animal&gt; func = new Func&lt;Cat&gt;(() =&gt; null);\n</code></pre>\n<p>除了使用.NET框架定义好的以为，我们还可以自定义协变，例如：</p>\n<pre><code class=\"prism language-C#\">/// &lt;summary&gt;\n/// out 协变 只能是返回结果\n/// &lt;/summary&gt;\n/// &lt;typeparam name=\"T\"&gt;&lt;/typeparam&gt;\npublic interface ICustomerListOut&lt;out T&gt;\n{\n     T Get();\n}\n\npublic class CustomerListOut&lt;T&gt; : ICustomerListOut&lt;T&gt;\n{\n     public T Get()\n     {\n         return default(T);\n     }\n}\n</code></pre>\n<p>使用自定义的协变：</p>\n<pre><code class=\"prism language-C#\">// 使用自定义协变\nICustomerListOut&lt;Animal&gt; customerList1 = new CustomerListOut&lt;Animal&gt;();\nICustomerListOut&lt;Animal&gt; customerList2 = new CustomerListOut&lt;Cat&gt;();\n</code></pre>\n<p>在来看看逆变。</p>\n<p>在泛型接口的T前面有一个In关键字修饰，而且T只能方法参数，不能作为返回值类型，这就是逆变。请看下面的自定义逆变：</p>\n<pre><code class=\"prism language-C#\">/// &lt;summary&gt;\n/// 逆变 只能是方法参数\n/// &lt;/summary&gt;\n/// &lt;typeparam name=\"T\"&gt;&lt;/typeparam&gt;\npublic interface ICustomerListIn&lt;in T&gt;\n{\n     void Show(T t);\n}\n\npublic class CustomerListIn&lt;T&gt; : ICustomerListIn&lt;T&gt;\n{\n     public void Show(T t)\n     {\n     }\n}\n</code></pre>\n<p>使用自定义逆变：</p>\n<pre><code class=\"prism language-C#\">// 使用自定义逆变\nICustomerListIn&lt;Cat&gt; customerListCat1 = new CustomerListIn&lt;Cat&gt;();\nICustomerListIn&lt;Cat&gt; customerListCat2 = new CustomerListIn&lt;Animal&gt;();\n</code></pre>\n<p>协变和逆变也可以同时使用，看看下面的例子：</p>\n<pre><code class=\"prism language-C#\">/// &lt;summary&gt;\n/// inT 逆变\n/// outT 协变\n/// &lt;/summary&gt;\n/// &lt;typeparam name=\"inT\"&gt;&lt;/typeparam&gt;\n/// &lt;typeparam name=\"outT\"&gt;&lt;/typeparam&gt;\npublic interface IMyList&lt;in inT, out outT&gt;\n{\n     void Show(inT t);\n     outT Get();\n     outT Do(inT t);\n}\n\npublic class MyList&lt;T1, T2&gt; : IMyList&lt;T1, T2&gt;\n{\n\n     public void Show(T1 t)\n     {\n          Console.WriteLine(t.GetType().Name);\n     }\n\n     public T2 Get()\n     {\n          Console.WriteLine(typeof(T2).Name);\n          return default(T2);\n      }\n\n      public T2 Do(T1 t)\n      {\n           Console.WriteLine(t.GetType().Name);\n           Console.WriteLine(typeof(T2).Name);\n           return default(T2);\n       }\n }\n</code></pre>\n<pre><code class=\"prism language-C#\">IMyList&lt;Cat, Animal&gt; myList1 = new MyList&lt;Cat, Animal&gt;();\nIMyList&lt;Cat, Animal&gt; myList2 = new MyList&lt;Cat, Cat&gt;();//协变\nIMyList&lt;Cat, Animal&gt; myList3 = new MyList&lt;Animal, Animal&gt;();//逆变\nIMyList&lt;Cat, Animal&gt; myList4 = new MyList&lt;Animal, Cat&gt;();//逆变+协变\n</code></pre>\n<h1><a id=\"7_C_681\"></a>7 C#中使用泛型可以做什么“骚”操作</h1>\n<h2><a id=\"71__683\"></a>7.1 泛型缓存</h2>\n<p>在前面我们学习过，类中的静态类型无论实例化多少次，在内存中只会有一个。静态构造函数只会执行一次。在泛型类中，T类型不同，每个不同的T类型，都会产生一个不同的副本，所以会产生不同的静态属性、不同的静态构造函数，请看下面的例子：</p>\n<pre><code class=\"prism language-C#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace MyGeneric\n{\n    public class GenericCache&lt;T&gt;\n    {\n        static GenericCache()\n        {\n            Console.WriteLine(\"This is GenericCache 静态构造函数\");\n            _TypeTime = string.Format(\"{0}_{1}\", typeof(T).FullName, DateTime.Now.ToString(\"yyyyMMddHHmmss.fff\"));\n        }\n\n        private static string _TypeTime = \"\";\n\n        public static string GetCache()\n        {\n            return _TypeTime;\n        }\n    }\n}\n</code></pre>\n<p>然后新建一个测试类，用来测试GenericCache类的执行顺序：</p>\n<pre><code class=\"prism language-C#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace MyGeneric\n{\n    public class GenericCacheTest\n    {\n        public static void Show()\n        {\n            for (int i = 0; i &lt; 5; i++)\n            {\n                Console.WriteLine(GenericCache&lt;int&gt;.GetCache());\n                Thread.Sleep(10);\n                Console.WriteLine(GenericCache&lt;long&gt;.GetCache());\n                Thread.Sleep(10);\n                Console.WriteLine(GenericCache&lt;DateTime&gt;.GetCache());\n                Thread.Sleep(10);\n                Console.WriteLine(GenericCache&lt;string&gt;.GetCache());\n                Thread.Sleep(10);\n                Console.WriteLine(GenericCache&lt;GenericCacheTest&gt;.GetCache());\n                Thread.Sleep(10);\n            }\n        }\n    }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210602091439214.png\"/></p>\n<h2><a id=\"72__751\"></a>7.2 泛型类实现枚举转换</h2>\n<pre><code class=\"prism language-C#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Xml.Serialization;\n\nnamespace XC.Framework.Framework\n{\n    /// &lt;summary&gt;\n    /// Enum帮助类\n    /// &lt;/summary&gt;\n    /// &lt;typeparam name=\"T\"&gt;&lt;/typeparam&gt;\n    public class EnumOperation&lt;T&gt; \n    {\n        static EnumOperation()\n        {\n            InitEnumInfo();\n        }\n\n        private static void InitEnumInfo()\n        {\n            DicEnumAndDes = new Dictionary&lt;T, string&gt;();\n            DicDesAndEnum = new Dictionary&lt;string, T&gt;();\n            DicValueAndEnum = new Dictionary&lt;int, T&gt;();\n            DicEnumAndValue = new Dictionary&lt;T, int&gt;();\n            string desc = \"\";\n            foreach (T pDataQueryWayType in Enum.GetValues(typeof(T)))\n            {\n                if (pDataQueryWayType.GetType().GetField(pDataQueryWayType.ToString()).IsDefined(typeof(XmlEnumAttribute), true))\n                {\n                    var attrs = pDataQueryWayType.GetType().GetField(pDataQueryWayType.ToString()).GetCustomAttributes(typeof(XmlEnumAttribute), true);\n                    if (attrs != null &amp;&amp; attrs.Length &gt; 0)\n                    {\n                        XmlEnumAttribute descAttr = attrs[0] as XmlEnumAttribute;\n                        desc = descAttr.Name;\n                    }\n                }\n                else\n                {\n                    desc = pDataQueryWayType.ToString();\n                }\n                DicEnumAndDes.Add(pDataQueryWayType, desc);\n                DicDesAndEnum.Add(desc, pDataQueryWayType);\n                DicValueAndEnum.Add(Convert.ToInt32(pDataQueryWayType), pDataQueryWayType);\n                DicEnumAndValue.Add( pDataQueryWayType, Convert.ToInt32(pDataQueryWayType));\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 枚举字典信息--Key:枚举项;Value:枚举描述\n        /// &lt;/summary&gt;\n        public static Dictionary&lt;T, string&gt; DicEnumAndDes = new Dictionary&lt;T, string&gt;();\n\n        /// &lt;summary&gt;\n        /// 枚举字典信息--Key:枚举描述;Value:枚举项\n        /// &lt;/summary&gt;\n        public static Dictionary&lt;string, T&gt; DicDesAndEnum = new Dictionary&lt;string, T&gt;();\n\n        /// &lt;summary&gt;\n        /// 枚举字典信息--Key:枚举值(Int值);Value:枚举项\n        /// &lt;/summary&gt;\n        public static Dictionary&lt;int, T&gt; DicValueAndEnum = new Dictionary&lt;int, T&gt;();\n\n        /// &lt;summary&gt;\n        /// 枚举字典信息--Key:枚举项;Value:枚举值(Int值)\n        /// &lt;/summary&gt;\n        public static Dictionary&lt;T, int&gt; DicEnumAndValue = new Dictionary&lt;T, int&gt;();\n    }\n}\n</code></pre>\n<h2><a id=\"73_Default_825\"></a>7.3 泛型代码中的默认关键字：Default</h2>\n<p>在泛型类和泛型方法中产生的一个问题是，在预先未知以下情况时，如何将默认值分配给参数化类型 T：</p>\n<ul><li> <p>T 是引用类型还是值类型。</p> </li><li> <p>如果 T 为值类型，则它是数值还是结构。</p> </li></ul>\n<p>给定参数化类型 T 的一个变量 t，只有当 T 为引用类型时，语句 t = null 才有效；只有当 T 为数值类型而不是结构时，语句 t = 0 才能正常使用。解决方案是使用 default 关键字，此关键字对于引用类型会返回空，对于数值类型会返回零。对于结构，此关键字将返回初始化为零或空的每个结构成员，具体取决于这些结构是值类型还是引用类型。</p>\n<pre><code class=\"prism language-C#\">namespace MyGeneric\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            object obj1=GenericToDefault&lt;string&gt;();\n            object obj2 = GenericToDefault&lt;int&gt;();\n            object obj3 = GenericToDefault&lt;StructDemo&gt;();\n            Console.ReadKey();\n        }\n        public static T GenericToDefault&lt;T&gt;() \n        {\n            return default(T);\n        }\n    }\n    public struct StructDemo\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n    }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\20210602091524273.jpg\"/></p>\n<h1><a id=\"_864\"></a>借鉴资料</h1>\n<p>https://blog.csdn.net/wr960204/article/details/2902843</p>\n<p>https://www.cnblogs.com/slwx1514/p/10030414.html</p>\n<p>https://www.cnblogs.com/hhzblogs/p/7820005.html</p>\n<p>https://zhuanlan.zhihu.com/p/40183731</p>\n<p>大多数人不愿意烧脑，要的是流行歌曲，而非曲高和寡的咏叹调。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}