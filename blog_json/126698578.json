{"blogid": "126698578", "writerAge": "码龄5年", "writerBlogNum": "85", "writerCollect": "172", "writerComment": "6", "writerFan": "30", "writerGrade": "4级", "writerIntegral": "951", "writerName": "weixin_101", "writerProfileAdress": "writer_image\\profile_126698578.jpg", "writerRankTotal": "22817", "writerRankWeekly": "9307", "writerThumb": "33", "writerVisitNum": "43547", "blog_read_count": "132", "blog_time": "于 2022-09-05 12:07:04 发布", "blog_title": "IM聊天服务器", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>IM聊天服务器</h3>\n<ul><li><a href=\"#1__CentOS7cmake_9\">1. CentOS7安装cmake</a></li><li><a href=\"#2_vs_2019_19\">2. vs 2019添加跨平台主机</a></li><li><a href=\"#3_cmake_26\">3. 创建cmake工程项目</a></li><li><a href=\"#4_CMakeListtxt_44\">4. 修改CMakeList.txt文件</a></li><li><a href=\"#5__93\">5. 添加程序启动配置文件</a></li><li><a href=\"#6_socket_396\">6. 添加服务socket模块</a></li><li><a href=\"#7__621\">7. 添加数据库处理模块</a></li><li><a href=\"#8__767\">8. 用户和信息</a></li><li><a href=\"#9__838\">9. 添加用户链表</a></li><li><a href=\"#10__971\">10. 多线程处理</a></li><li><a href=\"#_1103\">运行测试</a></li></ul>\n</div>\n<p></p>\n<p>IDE visual studio 2019<br/> 运行系统Centos 7<br/> cmake工程<br/> include 目录是头文件<br/> source 目录是源文件</p>\n<h1><a id=\"1__CentOS7cmake_9\"></a>1. CentOS7安装cmake</h1>\n<pre><code class=\"prism language-shell\"><span class=\"token builtin class-name\">cd</span> /opt/\n<span class=\"token function\">wget</span> https://github.com/Kitware/CMake/releases/download/v3.24.1/cmake-3.24.1.tar.gz\n<span class=\"token function\">tar</span> -zaxf cmake-3.24.1.tar.gz\n<span class=\"token builtin class-name\">cd</span> cmake-3.24.1 <span class=\"token operator\">&amp;&amp;</span> ./configure \n<span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span> \n</code></pre>\n<h1><a id=\"2_vs_2019_19\"></a>2. vs 2019添加跨平台主机</h1>\n<ol><li>工具 --&gt; 选择 --&gt;跨平台–&gt;添加主机<br/> <img alt=\"在这里插入图片描述\" src=\"image\\6eef2476bf3047029e3ed94d81775116.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\671e6d0adc2d4d02ab29c2b8f435c2ca.png\"/></li></ol>\n<h1><a id=\"3_cmake_26\"></a>3. 创建cmake工程项目</h1>\n<ol><li> <p><strong>创建项目</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\10ce9abb26c048989f8dc67412f7e0f3.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\e66bab47bd4446498fbffb81288ef0f2.png\"/></p> </li><li> <p><strong>修改远程主机</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\4a423fd00c164930bd6e0f4bbdecae5c.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a64f7f09430a49a39b2f68eac6b7ed85.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\30fbf4e0b68d4eaaa7487f4bd21e69a4.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\a999ff7788c24690b1e449b78c8c3f3e.png\"/></p> </li><li> <p><strong>新建目录include 和 source</strong><br/> <img alt=\"在这里插入图片描述\" src=\"image\\531eef38091d4543a6831ea448d1b51a.png\"/></p> </li></ol>\n<br/>\n<br/>\n<h1><a id=\"4_CMakeListtxt_44\"></a>4. 修改CMakeList.txt文件</h1>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token expression\">CMakeList<span class=\"token punctuation\">.</span>txt<span class=\"token operator\">:</span> chatserver 的 CMake 项目，在此处包括源代码并定义</span></span>\n# 项目特定的逻辑。\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span>\n<span class=\"token directive keyword\">cmake</span><span class=\"token expression\"><span class=\"token function\">_minimum_required</span> <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.8</span><span class=\"token punctuation\">)</span></span></span>\n\n#工程名\n<span class=\"token function\">project</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"chatserver\"</span><span class=\"token punctuation\">)</span>\n\n\n# 添加include路径，也就是头文件路径\n#添加source路径，也就是添加源文件\n#搜索的目录\n<span class=\"token function\">include_directories</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./include\"</span> <span class=\"token string\">\"./source\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token function\">aux_source_directory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./include\"</span> INCLUDE_LIST<span class=\"token punctuation\">)</span>\n<span class=\"token function\">aux_source_directory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./source\"</span> SRC_LIST<span class=\"token punctuation\">)</span>\n\n#创建需要的目录\n<span class=\"token function\">file</span><span class=\"token punctuation\">(</span>MAKE_DIRECTORY <span class=\"token string\">\"logs\"</span> <span class=\"token string\">\"conf\"</span><span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token expression\">TODO<span class=\"token operator\">:</span> 如有需要，请添加测试并安装目标。</span></span>\n#指定生成文件输出路径\n<span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>EXECUTABLE_OUTPUT_PATH $<span class=\"token punctuation\">{<!-- --></span>PROJECT_SOURCE_DIR<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>sbin<span class=\"token punctuation\">)</span>\n\n# 将源代码添加到此项目的可执行文件。\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">add</span><span class=\"token expression\"><span class=\"token function\">_executable</span> <span class=\"token punctuation\">(</span>chatserver   </span><span class=\"token string\">\"main.cpp\"</span> <span class=\"token expression\">$<span class=\"token punctuation\">{<!-- --></span>SRC_LIST<span class=\"token punctuation\">}</span> $<span class=\"token punctuation\">{<!-- --></span>INCLUDE_LIST<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token function\">add_executable</span> <span class=\"token punctuation\">(</span>chatserver  $<span class=\"token punctuation\">{<!-- --></span>SRC_LIST<span class=\"token punctuation\">}</span> $<span class=\"token punctuation\">{<!-- --></span>INCLUDE_LIST<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\n# 指定编译器\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token expression\">CMAKE_C_FLAGS_DEBUG          <span class=\"token operator\">--</span><span class=\"token operator\">--</span>  C 编译器</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token expression\">CMAKE_CXX_FLAGS_DEBUG        <span class=\"token operator\">--</span><span class=\"token operator\">--</span>  C<span class=\"token operator\">++</span> 编译器</span></span>\n# <span class=\"token operator\">-</span>std<span class=\"token operator\">=</span>c<span class=\"token operator\">++</span><span class=\"token number\">11</span>  使用 C<span class=\"token operator\">++</span><span class=\"token number\">11</span>\n# <span class=\"token operator\">-</span>g：只是编译器，在编译的时候，产生调试信息。\n# <span class=\"token operator\">-</span>Wall：生成所有警告信息。一下是具体的选项，可以单独使用\n# <span class=\"token operator\">-</span>L<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>lib64<span class=\"token operator\">/</span>mysql <span class=\"token operator\">-</span>lmysqlclient <span class=\"token operator\">-</span>lpthread <span class=\"token operator\">-</span>lm <span class=\"token operator\">-</span>lrt <span class=\"token operator\">-</span>ldl\"  数据库使用\n# 如果想要生成的可执行文件拥有符号表，可以gdb调试，就直接加上这句\n<span class=\"token function\">add_definitions</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-Wall -g\"</span><span class=\"token punctuation\">)</span>\n\n# 如果代码需要支持C<span class=\"token operator\">++</span><span class=\"token number\">11</span>，就直接加上这句\n<span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>CMAKE_CXX_FLAGS <span class=\"token string\">\"${CMAKE_CXX_FLAGS} -std=c++11 -L/usr/lib64/mysql -lmysqlclient -lpthread -lm -lrt -ldl\"</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h1><a id=\"5__93\"></a>5. 添加程序启动配置文件</h1>\n<ol><li><strong>头文件config.h 添加到include目录</strong></li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__CONFIG_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__CONFIG_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm&gt;</span></span>\n<span class=\"token comment\">//定义配置文件注释符号</span>\nconstexpr <span class=\"token keyword\">auto</span> COMMENT_CHAR <span class=\"token operator\">=</span> <span class=\"token char\">'#'</span><span class=\"token punctuation\">;</span>\n\n\nusing namespace std<span class=\"token punctuation\">;</span>\nclass Config_handle <span class=\"token punctuation\">{<!-- --></span>\npublic<span class=\"token operator\">:</span>\n\t<span class=\"token function\">Config_handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Config_handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nprivate<span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\">//读取配置文件文件</span>\n\tbool <span class=\"token function\">read_config_file</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> filename<span class=\"token punctuation\">,</span> map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//逐行读取处理</span>\n\tbool <span class=\"token function\">analyse_line</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> line<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//去空格</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">trim_str</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//是否空格或者tab键</span>\n\tbool <span class=\"token function\">is_space_or_tab</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\npublic<span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">config_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//获取配置文件键值对</span>\n\tmap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span> <span class=\"token function\">get_config_keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nprivate<span class=\"token operator\">:</span>\n\tmap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span>maps<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//配置文件是否存在</span>\n\tbool file_exist<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//配置文件路径</span>\n\t<span class=\"token keyword\">const</span> string config_file_path <span class=\"token operator\">=</span> <span class=\"token string\">\"../conf/server.conf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//! __CONFIG_H_</span></span>\n\n</code></pre>\n<ol start=\"2\"><li><strong>添加源文件 config.cpp 到source里面</strong></li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"config.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"server.h\"</span></span>\n\nConfig_handle<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Config_handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n\nConfig_handle<span class=\"token operator\">::</span><span class=\"token function\">Config_handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tfile_exist <span class=\"token operator\">=</span> <span class=\"token function\">read_config_file</span><span class=\"token punctuation\">(</span>config_file_path<span class=\"token punctuation\">,</span> maps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> Config_handle<span class=\"token operator\">::</span><span class=\"token function\">config_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token comment\">//读取配置文件内容</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file_exist<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tmap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator iter<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//\tfor (itr = maps.begin(); itr != maps.end(); ++itr) {<!-- --></span>\n\t\t<span class=\"token comment\">//\t\tcout &lt;&lt; itr-&gt;first &lt;&lt;\"=\"&lt;&lt; itr-&gt;second &lt;&lt; endl;;</span>\n\t\t<span class=\"token comment\">//\t}</span>\n\n\t\t<span class=\"token comment\">//socket ip</span>\n\t\tstring server_ip<span class=\"token punctuation\">;</span>\n\t\titer <span class=\"token operator\">=</span> maps<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server_ip\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iter <span class=\"token operator\">!=</span> maps<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tserver_ip <span class=\"token operator\">=</span> iter<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//判断ip是否为合法ipv4</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span>server_ip<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\e[0;31mserver_host error:\\e[0m ipv4 syntax error\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">//socket 端口</span>\n\t\tstring server_port<span class=\"token punctuation\">;</span>\n\t\titer <span class=\"token operator\">=</span> maps<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server_port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iter <span class=\"token operator\">!=</span> maps<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tserver_port <span class=\"token operator\">=</span> iter<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//判断端口是否为数字</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> server_port<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>server_port<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\e[0;31mserver_port error:\\e[0m port not support!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//判断端口是否为合法端口范围</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>server_port<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>server_port<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">65535</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\e[0;31mserver port error:\\e[0m value range 0-65535 \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\e[0;31mserver_host error:\\e[0m missing server_host error\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">//DB数据库配置</span>\n\t\t<span class=\"token comment\">//db_host 数据库主机</span>\n\t\tstring db_host<span class=\"token punctuation\">;</span>\n\t\titer <span class=\"token operator\">=</span> maps<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db_host\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iter <span class=\"token operator\">!=</span> maps<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tdb_host <span class=\"token operator\">=</span> iter<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">size_t</span> point_position <span class=\"token operator\">=</span> db_host<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//判断是域名还是ipv4</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>point_position <span class=\"token operator\">!=</span> string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> point_position<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>db_host<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\ts <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token comment\">//ipv4形式</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token comment\">//判断ip是否为合法ipv4</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span>db_host<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\e[0;31mdb_host error:\\e[0m ipv4 syntax error\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\e[0;31mdb_host error:\\e[0m missing db_host error\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">//db_port 数据库端口</span>\n\t\tstring db_port<span class=\"token punctuation\">;</span>\n\t\titer <span class=\"token operator\">=</span> maps<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db_port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iter <span class=\"token operator\">!=</span> maps<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tdb_port <span class=\"token operator\">=</span> iter<span class=\"token operator\">-&gt;</span>second<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//判断端口是否为数字</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> db_port<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>db_port<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\e[0;31mdb_port error:\\e[0m port not support!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//判断端口是否为合法端口范围</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>db_port<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>db_port<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">65535</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\e[0;31mdb port error:\\e[0m value range 0-65535 \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">//db_username 数据库用户</span>\n\t\t<span class=\"token comment\">//db_password 数据库密码</span>\n\t\t<span class=\"token comment\">//db_name     库名</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maps<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db_username\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> maps<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\e[0;31mdb_username error:\\e[0m missing value db_username \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maps<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db_password\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> maps<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\e[0;31mdb_username error:\\e[0m missing value db_password \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maps<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db_name\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> maps<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\e[0;31mdb_name error:\\e[0m missing value db_name \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\e[0;31m配置文件conf/server.conf: File doesn't exist on disk!\\e[0m\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//是否需要创建默认配置文件</span>\n\t\tstring confirm_c_config_f<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Create config default file?(YES/NO):\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> confirm_c_config_f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//清理空格</span>\n\t\t<span class=\"token keyword\">auto</span> nospace_end <span class=\"token operator\">=</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>confirm_c_config_f<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> confirm_c_config_f<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconfirm_c_config_f<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>nospace_end<span class=\"token punctuation\">,</span> confirm_c_config_f<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>confirm_c_config_f <span class=\"token operator\">==</span> <span class=\"token string\">\"YES\"</span> <span class=\"token operator\">||</span> confirm_c_config_f <span class=\"token operator\">==</span> <span class=\"token string\">\"Yes\"</span> <span class=\"token operator\">||</span> confirm_c_config_f <span class=\"token operator\">==</span> <span class=\"token string\">\"yes\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tofstream <span class=\"token function\">outfile</span><span class=\"token punctuation\">(</span>config_file_path<span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>out <span class=\"token operator\">|</span> ios<span class=\"token operator\">::</span>trunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\toutfile <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"#&lt;&lt;----default generator config file---&gt;&gt;\\n\\n\\n\\n#default server ip 0.0.0.0\\nserver_ip=0.0.0.0\\n\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t\toutfile <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"#default server port 10086\\nserver_port=10086\\n\\n#log path\\nlog_path=../logs/access.log\\n\\n\\n#db configure,default db_port =3306\\ndb_host=127.0.0.1\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t\toutfile <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"#db_port=3306\\ndb_username=root\\ndb_password=123456\\ndb_name=im\\n\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t\toutfile<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"_______create file ok______\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-----Please restart service----\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nbool Config_handle<span class=\"token operator\">::</span><span class=\"token function\">read_config_file</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> filename<span class=\"token punctuation\">,</span> map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tifstream <span class=\"token function\">infile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>infile<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tstring line_str<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>infile<span class=\"token punctuation\">,</span> line_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">analyse_line</span><span class=\"token punctuation\">(</span>line_str<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tm<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//cout &lt;&lt; \"success\" &lt;&lt; endl;</span>\n\t\tinfile<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//cout &lt;&lt; \"open file error: \" &lt;&lt; __FILE__ &lt;&lt; \" \\nerror Function: \" &lt;&lt; __FUNCTION__ &lt;&lt; \"\\nerror row: \" &lt;&lt; __LINE__ &lt;&lt; endl\\e[0;31m ;</span>\n\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\e[0;31mopen conf/server.conf error: file does not exist\\e[0m\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tinfile<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nbool Config_handle<span class=\"token operator\">::</span><span class=\"token function\">analyse_line</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> line_str<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//是否为空</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>line_str<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> start_pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end_pos <span class=\"token operator\">=</span> line_str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//是否存在注释号 '#' </span>\n\tpos <span class=\"token operator\">=</span> line_str<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>COMMENT_CHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">!=</span> string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> pos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//行的第一个字符就是注释字符</span>\n\t\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//end_pos截止到‘#号，后面为注释’</span>\n\t\tend_pos <span class=\"token operator\">=</span> pos <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//预处理，删除注释部分</span>\n\tstring new_line <span class=\"token operator\">=</span> line_str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>start_pos<span class=\"token punctuation\">,</span> start_pos <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> end_pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpos <span class=\"token operator\">=</span> new_line<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token char\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">==</span> string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//没有 = 等号</span>\n\n\n\tkey <span class=\"token operator\">=</span> new_line<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvalue <span class=\"token operator\">=</span> new_line<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end_pos <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">trim_str</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">trim_str</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> Config_handle<span class=\"token operator\">::</span><span class=\"token function\">trim_str</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> start_pos<span class=\"token punctuation\">,</span> end_pos<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_space_or_tab</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 全部是空白字符串</span>\n\t\tstr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstart_pos <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_space_or_tab</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tend_pos <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\tstr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>start_pos<span class=\"token punctuation\">,</span> end_pos <span class=\"token operator\">-</span> start_pos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nbool Config_handle<span class=\"token operator\">::</span><span class=\"token function\">is_space_or_tab</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token char\">' '</span> <span class=\"token operator\">==</span> c <span class=\"token operator\">||</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nmap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span> Config_handle<span class=\"token operator\">::</span><span class=\"token function\">get_config_keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> maps<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<br/>\n<br/>\n<h1><a id=\"6_socket_396\"></a>6. 添加服务socket模块</h1>\n<ol><li><strong>server.h 添加到include 头文件</strong></li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__SERVER_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__SERVER_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"config.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"user.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"userlist.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"dbmysql.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"thread.h\"</span></span>\n\n\nusing namespace std<span class=\"token punctuation\">;</span>\n\nclass Server\n<span class=\"token punctuation\">{<!-- --></span>\npublic<span class=\"token operator\">:</span>\n    <span class=\"token function\">Server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">Server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//接受客户端请求</span>\n    bool <span class=\"token function\">acceptClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//关闭连接</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">closeServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nprivate<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> addr<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">;</span>\n    UserList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">;</span>\n    DBMysql<span class=\"token operator\">*</span> db<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//fail:sockfd is -1 success: sockfd</span>\n\n    <span class=\"token comment\">//读取配置文件</span>\n    Config_handle road_config<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//配置文件键值对</span>\n    map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span>get_map_keys<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// __SERVER_H_</span></span>\n\n</code></pre>\n<ol start=\"2\"><li><strong>server.cpp源文件添加到source目录</strong></li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"server.h\"</span></span>\n\nServer<span class=\"token operator\">::</span><span class=\"token function\">Server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n    road_config<span class=\"token punctuation\">.</span><span class=\"token function\">config_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    get_map_keys <span class=\"token operator\">=</span> road_config<span class=\"token punctuation\">.</span><span class=\"token function\">get_config_keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    list <span class=\"token operator\">=</span> new <span class=\"token function\">UserList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//判断是否配置了数据库端口</span>\n    get_map_keys<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db_port\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> get_map_keys<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span>\n        db <span class=\"token operator\">=</span> new <span class=\"token function\">DBMysql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>get_map_keys<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db_host\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>get_map_keys<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db_username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>get_map_keys<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db_password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">(</span>get_map_keys<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>get_map_keys<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db_port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n        db <span class=\"token operator\">=</span> new <span class=\"token function\">DBMysql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>get_map_keys<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db_host\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>get_map_keys<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db_username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>get_map_keys<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db_password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">(</span>get_map_keys<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> db_con_status <span class=\"token operator\">=</span> db<span class=\"token operator\">-&gt;</span><span class=\"token function\">db_connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> db_con_status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nServer<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    delete db<span class=\"token punctuation\">;</span>\n    delete list<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//初始化服务器到监听状态</span>\n<span class=\"token keyword\">void</span> Server<span class=\"token operator\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n    addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>get_map_keys<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server_port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>get_map_keys<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server_ip\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>get_map_keys<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server_ip\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/*INADDR_ANY*/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY <span class=\"token comment\">/*INADDR_ANY*/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    sockfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span>SOCK_STREAM<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> sockfd<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create sockfd error:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> ret<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind error:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sockfd <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> ret<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen error:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sockfd <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Server Start ...\\n\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\".....\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\e[0;32msuccessful!\\e[0m \"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token constant\">__DATE__</span><span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//接受客户端的请求，如果一个用户的用户名和密码都正确才算是连接上服务器。负责就删除已连接套接字描述符</span>\nbool Server<span class=\"token operator\">::</span><span class=\"token function\">acceptClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> sockfd<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//struct sockaddr_in caddr;</span>\n    <span class=\"token comment\">//socklen_t len = sizeof(caddr);</span>\n    <span class=\"token keyword\">int</span> csockfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> csockfd<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    userInfo lf<span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\">//接收客户端</span>\n    <span class=\"token class-name\">ssize_t</span> size <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>csockfd<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>lf<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>lf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> size <span class=\"token operator\">||</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>csockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> lf<span class=\"token punctuation\">.</span>flag<span class=\"token punctuation\">)</span><span class=\"token comment\">//login</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//判断用户名和密码是否正确，实际应用从数据库查询</span>\n        string <span class=\"token function\">sqlstr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from user where id = '\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sqlstr<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>lf<span class=\"token punctuation\">.</span>id_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> row <span class=\"token operator\">=</span> db<span class=\"token operator\">-&gt;</span><span class=\"token function\">db_select</span><span class=\"token punctuation\">(</span>sqlstr<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> login_flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            login_flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            size <span class=\"token operator\">=</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>csockfd<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>login_flag<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>csockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>lf<span class=\"token punctuation\">.</span>id_name<span class=\"token punctuation\">,</span>row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>lf<span class=\"token punctuation\">.</span>pwd<span class=\"token punctuation\">,</span>row<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//给客户端返回登录状态，正确登录返回1</span>\n                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"confirmation successful\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n                login_flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">//将已经登录的用户保存到online用户列表中</span>\n                User <span class=\"token function\">user</span><span class=\"token punctuation\">(</span>lf<span class=\"token punctuation\">.</span>id_name<span class=\"token punctuation\">,</span>row<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>csockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                list<span class=\"token operator\">-&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                list<span class=\"token operator\">-&gt;</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">//start a thread session for curr user</span>\n                size <span class=\"token operator\">=</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>csockfd<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>login_flag<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Thread<span class=\"token operator\">*</span> thread <span class=\"token operator\">=</span> new <span class=\"token function\">Thread</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                thread<span class=\"token operator\">-&gt;</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"user \"</span> <span class=\"token operator\">&lt;&lt;</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  online....\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                login_flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                size <span class=\"token operator\">=</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>csockfd<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>login_flag<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>csockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token comment\">//register</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"user name:\"</span> <span class=\"token operator\">&lt;&lt;</span> lf<span class=\"token punctuation\">.</span>id_name <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"user pwd:\"</span> <span class=\"token operator\">&lt;&lt;</span> lf<span class=\"token punctuation\">.</span>pwd <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> account<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        ifstream <span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auto_account.dat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> ac <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ac<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        string str<span class=\"token punctuation\">;</span>\n        stringstream ss<span class=\"token punctuation\">;</span>\n        ss <span class=\"token operator\">&lt;&lt;</span> ac<span class=\"token punctuation\">;</span>\n        ss <span class=\"token operator\">&gt;&gt;</span> str<span class=\"token punctuation\">;</span>\n        ofstream <span class=\"token function\">out</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auto_account.dat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>out<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"write fail\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> account <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>csockfd<span class=\"token punctuation\">,</span>account<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        string <span class=\"token function\">sqlstr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into user values('\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sqlstr<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"','\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>lf<span class=\"token punctuation\">.</span>id_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"','\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>lf<span class=\"token punctuation\">.</span>pwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"')\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        db<span class=\"token operator\">-&gt;</span><span class=\"token function\">db_insert</span><span class=\"token punctuation\">(</span>sqlstr<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>csockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> Server<span class=\"token operator\">::</span><span class=\"token function\">closeServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<br/>\n<h1><a id=\"7__621\"></a>7. 添加数据库处理模块</h1>\n<p>数据库执行创建库</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> im <span class=\"token keyword\">default</span> <span class=\"token keyword\">charset</span> utf8<span class=\"token punctuation\">;</span>\n</code></pre>\n<ol><li><strong>dbmydql.h 添加到 include目录</strong></li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__CON_MYSQL_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__CON_MYSQL_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mysql/mysql.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\nclass DBMysql\n<span class=\"token punctuation\">{<!-- --></span>\npublic<span class=\"token operator\">:</span>\n    <span class=\"token function\">DBMysql</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> host<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> user<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> passwd<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> db_name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> db_port<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">DBMysql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//An initialized MYSQL* handler.NULL if there was insufficient memory to allocate a new object.</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">db_connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//Closes a previously opened connection</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">db_close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//insert data</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">db_insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> sqlstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//select data</span>\n    MYSQL_ROW <span class=\"token function\">db_select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> sqlstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nprivate<span class=\"token operator\">:</span>\n    <span class=\"token comment\">//structure mysql one database connection</span>\n    MYSQL mysql<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> host<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> passwd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> db_name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> db_port<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// __CON_MYSQL_H</span></span>\n\n</code></pre>\n<ol start=\"2\"><li><strong>dbmysql.cpp 添加到source目录</strong></li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"dbmysql.h\"</span></span>\n\nDBMysql<span class=\"token operator\">::</span><span class=\"token function\">DBMysql</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> host<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> user<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> passwd<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> db_name<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> db_port<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span><span class=\"token function\">host</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">passwd</span><span class=\"token punctuation\">(</span>passwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">db_name</span><span class=\"token punctuation\">(</span>db_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">db_port</span><span class=\"token punctuation\">(</span>db_port<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n\nDBMysql<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">DBMysql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> DBMysql<span class=\"token operator\">::</span><span class=\"token function\">db_connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//An initialized MYSQL* handler.NULL if there was insufficient memory to allocate a new object.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> <span class=\"token function\">mysql_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>    <span class=\"token comment\">//分配和初始化MYSQL对象</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error mysql_init(): \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mysql<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/*\n    MYSQL*  mysql_real_connect(\n        MYSQL * mysql,     //已有MYSQL结构的地址\n        const char* host,   //主机名或ip地址\n        const char* user,   //登录名\n        const char* passwd,  //密码\n        const char* db,      //数据库名称\n        unsigned int port,   //端口号默认 0\n        const char* unix_socket,  //套接字或命名管道  默认NULL\n        unsigned long client_flag) //一般为0\n    //A MYSQL* connection handler if the connection was successful, NULL if the connection was unsuccessful. \n    //For a successful connection, the return value is the same as the value of the first argument.\n    //尝试与运行在主机上的MySQL数据库引擎建立连接\n    */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> <span class=\"token function\">mysql_real_connect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mysql<span class=\"token punctuation\">,</span>host<span class=\"token punctuation\">,</span>user<span class=\"token punctuation\">,</span>passwd<span class=\"token punctuation\">,</span>db_name<span class=\"token punctuation\">,</span> db_port<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\e[0;31m Error mysql_real_connect():\\e[0m\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mysql<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Connected MySQL...\\n......\\e[0;32msuccessful!\\e[0m \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token constant\">__DATE__</span><span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> DBMysql<span class=\"token operator\">::</span><span class=\"token function\">db_insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> sqlstr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//mysql_real_query() executes the SQL statement pointed to by stmt_str, a string length bytes long.</span>\n    <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token function\">mysql_real_query</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mysql<span class=\"token punctuation\">,</span>sqlstr<span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>sqlstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//if successful return 0</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" mysql_real_query(): \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mysql<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nMYSQL_ROW DBMysql<span class=\"token operator\">::</span><span class=\"token function\">db_select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>sqlstr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token function\">mysql_real_query</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mysql<span class=\"token punctuation\">,</span>sqlstr<span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>sqlstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//if successful return 0</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" mysql_real_query(): \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mysql<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//MYSQL_RES This structure represents the result of a query that returns rows (SELECT, SHOW, DESCRIBE, EXPLAIN)</span>\n    MYSQL_RES<span class=\"token operator\">*</span> res <span class=\"token operator\">=</span> <span class=\"token function\">mysql_store_result</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> res<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql_restore_result(): %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//This is a type-safe representation of one row of data. </span>\n    <span class=\"token comment\">//It is currently implemented as an array of counted byte strings. </span>\n    <span class=\"token comment\">//(You cannot treat these as null-terminated strings if field values may contain binary data, </span>\n    <span class=\"token comment\">//because such values may contain null bytes internally.) Rows are obtained by calling mysql_fetch_row().</span>\n    MYSQL_ROW row <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_row</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> row<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> DBMysql<span class=\"token operator\">::</span><span class=\"token function\">db_close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">mysql_close</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<br/>\n<br/>\n<h1><a id=\"8__767\"></a>8. 用户和信息</h1>\n<ol><li><strong>头文件user.h 添加到include目录</strong></li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">USER</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USER</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">userInfo</span>  <span class=\"token comment\">//loginInfo or registerInfo</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">char</span> id_name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> pwd<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">;</span><span class=\"token comment\">//1 or 2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nclass User\n<span class=\"token punctuation\">{<!-- --></span>\n    public<span class=\"token operator\">:</span>\n        <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n        <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>string id<span class=\"token punctuation\">,</span>string name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> csockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">~</span><span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        string id<span class=\"token punctuation\">;</span>\n        string name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> csockfd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// USER</span></span>\n</code></pre>\n<ol start=\"2\"><li><strong>源文件user.cpp 添加到source目录</strong></li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"user.h\"</span></span>\n\nUser<span class=\"token operator\">::</span><span class=\"token function\">User</span><span class=\"token punctuation\">(</span>string id<span class=\"token punctuation\">,</span> string name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> csockfd<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">csockfd</span><span class=\"token punctuation\">(</span>csockfd<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n\nUser<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"3\"><li><strong>信息 msg.h头文件添加到include 目录</strong></li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__MSG_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__MSG_H_</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Msg</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> to_user_id<span class=\"token punctuation\">;</span><span class=\"token comment\">//if user_id is 0,perform all user</span>\n    <span class=\"token keyword\">int</span> from_user_id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> from_user_name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> msg<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//msg text</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// __MSG_H_</span></span>\n</code></pre>\n<br/>\n<br/>\n<h1><a id=\"9__838\"></a>9. 添加用户链表</h1>\n<ol><li><strong>userlist.h 添加到include目录</strong></li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__USERLIST_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__USERLIST_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"user.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring&gt;</span></span>\n\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    User user<span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nclass UserList\n<span class=\"token punctuation\">{<!-- --></span>\npublic<span class=\"token operator\">:</span>\n    <span class=\"token function\">UserList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">UserList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>User user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> csockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//当前在线用户人数</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">selectSockfd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ceshi</span>\n    Node<span class=\"token operator\">*</span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">get_head_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nprivate<span class=\"token operator\">:</span>\n    Node<span class=\"token operator\">*</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> m_length<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// __USERLIST_H_</span></span>\n\n</code></pre>\n<ol start=\"2\"><li><strong>源文件userlist.cpp 添加到source目录</strong></li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/*\n用户链表，负责维护当前所有在线的用户，有新用户上线则添加到链表中，有用户下线则从该链表中删除\n*/</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"userlist.h\"</span></span>\n\nUserList<span class=\"token operator\">::</span><span class=\"token function\">UserList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">head</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_length</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//头结点</span>\n    Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nUserList<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">UserList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//添加新上线用户</span>\n<span class=\"token keyword\">void</span> UserList<span class=\"token operator\">::</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>User user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-&gt;</span>user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> this<span class=\"token operator\">-&gt;</span>head<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    this<span class=\"token operator\">-&gt;</span>head<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    m_length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//删除下线用户</span>\n<span class=\"token keyword\">void</span> UserList<span class=\"token operator\">::</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> csockfd<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Node<span class=\"token operator\">*</span> cur_node <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur_node<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur_node<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>user<span class=\"token punctuation\">.</span>csockfd <span class=\"token operator\">==</span> csockfd<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Node<span class=\"token operator\">*</span> q <span class=\"token operator\">=</span> cur_node<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            cur_node<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> q<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            delete q<span class=\"token punctuation\">;</span>\n            m_length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n            cur_node <span class=\"token operator\">=</span> cur_node<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//当前有多少用户在线</span>\n<span class=\"token keyword\">int</span> UserList<span class=\"token operator\">::</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">return</span> this<span class=\"token operator\">-&gt;</span>m_length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//根据用户的id来查询用户的套接字描述符，用于一对一通信</span>\n<span class=\"token keyword\">int</span> UserList<span class=\"token operator\">::</span><span class=\"token function\">selectSockfd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Node<span class=\"token operator\">*</span> cur_node <span class=\"token operator\">=</span> head<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur_node<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>cur_node<span class=\"token operator\">-&gt;</span>user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> cur_node<span class=\"token operator\">-&gt;</span>user<span class=\"token punctuation\">.</span>csockfd<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            cur_node <span class=\"token operator\">=</span> cur_node<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nNode<span class=\"token operator\">*</span> <span class=\"token operator\">&amp;</span> UserList<span class=\"token operator\">::</span><span class=\"token function\">get_head_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> this<span class=\"token operator\">-&gt;</span>head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> UserList<span class=\"token operator\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"show function:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> cur_node <span class=\"token operator\">=</span> head<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur_node<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"userID: \"</span> <span class=\"token operator\">&lt;&lt;</span> cur_node<span class=\"token operator\">-&gt;</span>user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  userSockfd: \"</span> <span class=\"token operator\">&lt;&lt;</span> cur_node<span class=\"token operator\">-&gt;</span>user<span class=\"token punctuation\">.</span>csockfd <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        cur_node <span class=\"token operator\">=</span> cur_node<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1><a id=\"10__971\"></a>10. 多线程处理</h1>\n<ol><li>thread.h添加到include 目录</li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__THREAD_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__THREAD_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"user.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"userlist.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"msg.h\"</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">online_userinfo</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">char</span> id<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nclass Thread\n<span class=\"token punctuation\">{<!-- --></span>\npublic<span class=\"token operator\">:</span>\n    <span class=\"token function\">Thread</span><span class=\"token punctuation\">(</span>User user<span class=\"token punctuation\">,</span>UserList<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nprivate<span class=\"token operator\">:</span>\n    <span class=\"token class-name\">pthread_t</span> thread<span class=\"token punctuation\">;</span>\n    User m_user<span class=\"token punctuation\">;</span>\n    UserList<span class=\"token operator\">*</span> m_list<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// __THREAD_H_</span></span>\n\n</code></pre>\n<ol start=\"2\"><li><strong>thread.cpp 源文件添加到thread.cpp</strong></li></ol>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"thread.h\"</span></span>\n\nThread<span class=\"token operator\">::</span><span class=\"token function\">Thread</span><span class=\"token punctuation\">(</span>User user<span class=\"token punctuation\">,</span> UserList <span class=\"token operator\">*</span>list<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">m_user</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_list</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n\nThread<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> Thread<span class=\"token operator\">::</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"starting thread...\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>thread<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>run<span class=\"token punctuation\">,</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">!=</span> ret<span class=\"token punctuation\">)</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"create thread is fail\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> Thread<span class=\"token operator\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"thread is started\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    Thread<span class=\"token operator\">*</span> th <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> th<span class=\"token operator\">-&gt;</span>m_list<span class=\"token operator\">-&gt;</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"length\"</span> <span class=\"token operator\">&lt;&lt;</span> length <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//send online_user length to client_user</span>\n    <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>th<span class=\"token operator\">-&gt;</span>m_user<span class=\"token punctuation\">.</span>csockfd<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>length<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//send the infos to client_user for all online userinfo</span>\n    online_userinfo uf<span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> cur_node <span class=\"token operator\">=</span> th<span class=\"token operator\">-&gt;</span>m_list<span class=\"token operator\">-&gt;</span><span class=\"token function\">get_head_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur_node<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>uf<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>uf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>uf<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>cur_node<span class=\"token operator\">-&gt;</span>user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>uf<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> cur_node<span class=\"token operator\">-&gt;</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>th<span class=\"token operator\">-&gt;</span>m_user<span class=\"token punctuation\">.</span>csockfd<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>uf<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>uf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cur_node <span class=\"token operator\">=</span> cur_node<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"send finish\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    Msg msg<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>th<span class=\"token operator\">-&gt;</span>m_user<span class=\"token punctuation\">.</span>csockfd<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> ret <span class=\"token operator\">||</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> ret<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            th<span class=\"token operator\">-&gt;</span>m_list<span class=\"token operator\">-&gt;</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>th<span class=\"token operator\">-&gt;</span>m_user<span class=\"token punctuation\">.</span>csockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"user \"</span> <span class=\"token operator\">&lt;&lt;</span> th<span class=\"token operator\">-&gt;</span>m_user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> th<span class=\"token operator\">-&gt;</span>m_user<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" offline\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>th<span class=\"token operator\">-&gt;</span>m_user<span class=\"token punctuation\">.</span>csockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>from_user_name<span class=\"token punctuation\">,</span>th<span class=\"token operator\">-&gt;</span>m_user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//is all or is one ?</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> msg<span class=\"token punctuation\">.</span>to_user_id<span class=\"token punctuation\">)</span><span class=\"token comment\">// to everyone</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"recv a message from \"</span> <span class=\"token operator\">&lt;&lt;</span>msg<span class=\"token punctuation\">.</span>from_user_id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> msg<span class=\"token punctuation\">.</span>msg <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//send to everyone</span>\n            Node<span class=\"token operator\">*</span> cur_node <span class=\"token operator\">=</span> th<span class=\"token operator\">-&gt;</span>m_list<span class=\"token operator\">-&gt;</span><span class=\"token function\">get_head_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur_node<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>cur_node<span class=\"token operator\">-&gt;</span>user<span class=\"token punctuation\">.</span>csockfd<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"send to \"</span><span class=\"token operator\">&lt;&lt;</span> cur_node<span class=\"token operator\">-&gt;</span>user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" finish\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n                cur_node <span class=\"token operator\">=</span> cur_node<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token comment\">//to someone</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            string str<span class=\"token punctuation\">;</span>\n            stringstream ss<span class=\"token punctuation\">;</span>\n            ss <span class=\"token operator\">&lt;&lt;</span> msg<span class=\"token punctuation\">.</span>to_user_id<span class=\"token punctuation\">;</span>\n            ss <span class=\"token operator\">&gt;&gt;</span> str<span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> msg<span class=\"token punctuation\">.</span>to_user_id <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> csockfd <span class=\"token operator\">=</span> th<span class=\"token operator\">-&gt;</span>m_list<span class=\"token operator\">-&gt;</span><span class=\"token function\">selectSockfd</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>csockfd<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> csockfd <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> ret <span class=\"token operator\">||</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> ret<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"send msg to someone fail\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"thread is die\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_1103\"></a>运行测试</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\9f9a1b80fc734f6c9d234a1d84da6780.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\e26531ae51694b11ae5734741d4da553.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\0cd79a094a5d4116a50ba36aa50cbdb6.png\"/><br/> 配置文件生成在conf目录的server.conf<br/> <img alt=\"在这里插入图片描述\" src=\"image\\131c8c5b27d841a18569e0f081601dd2.png\"/></p>\n<p>可执行文件生成到<br/> <img alt=\"在这里插入图片描述\" src=\"image\\abc73ac6ae214029ac3e4a27bdb1d51f.png\"/></p>\n<p>运行并放到后台<br/> <img alt=\"在这里插入图片描述\" src=\"image\\337faee8e61c4451b43a3200cda5c373.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}