{"blogid": "125115139", "writerAge": "码龄2年", "writerBlogNum": "159", "writerCollect": "4822", "writerComment": "3320", "writerFan": "21972", "writerGrade": "6级", "writerIntegral": "8753", "writerName": "不断前进的皮卡丘", "writerProfileAdress": "writer_image\\profile_125115139.jpg", "writerRankTotal": "1576", "writerRankWeekly": "76", "writerThumb": "2710", "writerVisitNum": "203774", "blog_read_count": "14349", "blog_time": "已于 2022-07-14 18:33:47 修改", "blog_title": "数据库的三大范式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3> </h3>\n<ul><li><a href=\"#1_2\">1.为什么需要数据库设计</a></li><li><a href=\"#2Normal_Formal_22\">2.范式(Normal Formal）</a></li><li><ul><li><a href=\"#21_23\">2.1范式概述</a></li><li><a href=\"#22_28\">2.2键和相关属性的概念</a></li><li><a href=\"#231NF_35\">2.3第一范式(1NF)</a></li><li><a href=\"#242NF_41\">2.4第二范式(2NF）</a></li><li><a href=\"#253NF_72\">2.5第三范式(3NF）</a></li><li><a href=\"#26_82\">2.6范式的优缺点</a></li></ul>\n</li><li><a href=\"#3_92\">3.反范式化</a></li><li><ul><li><a href=\"#31_93\">3.1概述</a></li><li><a href=\"#32__99\">3.2 反范式的新问题</a></li><li><a href=\"#33_106\">3.3反范式的适用场景</a></li></ul>\n</li><li><a href=\"#4BCNF_113\">4.BCNF(巴斯范式)</a></li></ul>\n</div>\n<br/> 文章是看尚硅谷的MySQL所写的笔记\n<p></p>\n<h1><a id=\"1_2\"></a>1.为什么需要数据库设计</h1>\n<p>设计数据表的时候，要考虑很多的问题:</p>\n<ul><li>用户需要哪些数据，我们在数据表中要保存哪一些数据</li><li>怎么保证数据表中的数据的正确性</li><li>如何降低数据表的冗余度</li><li>开发人员怎么才能更方便的使用数据库</li></ul>\n<p>如果数据库设计得不合理的话，可能导致下面的几种问题:</p>\n<ul><li>设计容易，信息重复，存储空间浪费</li><li>数据更新，插入，删除的异常</li><li>不能正确表示信息</li><li>丢失有效信息</li><li>程序性能差</li></ul>\n<p>我们可以看出设计良好的数据库是很重要的，它有下面的优点:</p>\n<ul><li>节省数据的存储空间</li><li>能够保证数据的完整性</li><li>方便进行数据库应用系统的开发</li></ul>\n<p>设计数据库，我们得重视数据表的设计，为了建立冗余度小，结构合理的数据库，设计数据库必须遵循一定的规则。</p>\n<h1><a id=\"2Normal_Formal_22\"></a>2.范式(Normal Formal）</h1>\n<h2><a id=\"21_23\"></a>2.1范式概述</h2>\n<p><font color=\"red\">关系型数据库中，关于数据表设计的基本原则，规则就称为范式，范式是我们在设计数据库结构过程中需要遵循的规则和指导方法。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\2b91fa254c4742d89116fee1decb9a03.png\"/><br/> <font color=\"red\">不过，有的时候为了提高某一些查询性能，我们还需要破坏范式规则，也就是反规范化。</font></font></p>\n<h2><a id=\"22_28\"></a>2.2键和相关属性的概念</h2>\n<p>范式的定义会用到主键和候选键，我们先来看看相关的概念，数据库中的键是由一个或多个属性组成的，我们来看一下数据表中常用的几种键和属性的定义。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\d315a16023244870b548fb4d0dcd4d74.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c3c08c0f081f4f708d72246d13443509.png\"/></p>\n<h2><a id=\"231NF_35\"></a>2.3第一范式(1NF)</h2>\n<ul><li>第一范式主要是保证数据表中的每一个字段的值必须具有<font color=\"red\">原子性，</font>也就是数据表中的每个字段的值是<font color=\"red\">不可再拆分</font>的最小数据单元</li><li><img alt=\"在这里插入图片描述\" src=\"image\\4d7443a566d040f0a2a0b36b7701d228.png\"/></li><li><img alt=\"在这里插入图片描述\" src=\"image\\f23aa34a244b4684a70a93d6ba0e4168.png\"/></li><li><font color=\"red\">属性的原子性是主观的，我们要根据实际项目的需求来设计，比如说地址，如果项目没有说要细分为省，市，县，镇这么具体的话，我们一般就可以不拆分。</font></li></ul>\n<h2><a id=\"242NF_41\"></a>2.4第二范式(2NF）</h2>\n<ul><li>第二范式要求在满足第一范式的基础上，还要满足<font color=\"red\">数据表里的每一条数据记录，都是可唯一标识的，而且所有的非主键字段，都必须完全依赖主键，不能只依赖主键的一部分。</font></li><li>如果知道主键的所有属性的值，我们就可以检索任何元组(行)的任何属性的任何值(要求中的主键可以拓展替换为候选键)</li><li><img alt=\"在这里插入图片描述\" src=\"image\\cc1d33acedfb4810ae9bee751f5a2171.png\"/></li></ul>\n<blockquote>\n<p><font color=\"blue\" size=\"4\">比如说，在成绩表(学号，课程号，成绩)关系中，(学号，课程号)可以决定成绩，因为一个学生可以选多门课，一门课也可以被多个学生选择，所以学号或课程号都不能单独决定成绩。<br/> 所以(学号，课程号)——&gt;成绩就是<font color=\"red\">完全依赖关系。</font></font></p>\n</blockquote>\n<blockquote>\n<p><font color=\"blue\" size=\"4\">比赛表里面包含球员编号，姓名，年龄，比赛编号，比赛实际和比赛场地等属性，候选键和主键都是(球员编号，比赛编号),我们可以通过候选键(主键)来决定下面的关系。<br/> (球员编号，比赛编号)——&gt;(姓名，年龄，比赛时间，比赛场地，得分)<br/> <font color=\"red\">但是这个数据表不满足第二范式，因为数据表中的字段之间还存在下面的对应关系:<br/> <font color=\"blue\"><br/> (球员编号)——&gt;(姓名，年龄)<br/> (比赛编号)——&gt;(比赛时间，比赛场地)<br/> 非主属性并非完全依赖候选键，这样会产生下面的问题。</font></font></font></p>\n</blockquote>\n<ul><li>数据冗余:如果一个球员参加m场比赛，那么球员的姓名和年龄就重复了m-1次，一个比赛可能有n个球员参加，比赛时间和地点就重复了n-1次</li><li>插入异常:如果我们要添加一场新的比赛，但是这时还没有确定参加的球员都有谁2，那么就没发插入</li><li>删除异常:我们想删除某个球员编号，但是如果没有单独保存比赛表的话，就会同时把比赛信息删除掉</li><li>更新异常:如果我们调整了某个比赛时间，那么数据表所有的这个比赛的时间都得进行调整，不然就会出现同一场比赛但是时间不同的情况。</li></ul>\n<p>为了避免上述情况，我们可以把球员比赛表设计成下面的三张表。</p>\n<table><thead><tr><th>\n<center>\n     表名\n    </center></th><th>\n<center>\n     属性(字段)\n    </center></th></tr></thead><tbody><tr><td>球员player表</td><td>\n<center>\n     球员编号，姓名，年龄等属性\n    </center></td></tr><tr><td>比赛game表</td><td>\n<center>\n     比赛编号，比赛时间，比赛场地等属性\n    </center></td></tr><tr><td>球员比赛关系player_game表</td><td>\n<center>\n     球员编号，比赛编号，得分等属性\n    </center></td></tr></tbody></table>\n<p>这样的话，每张数据表都符合第二范式，就避免了异常情况的发生<br/> <font color=\"red\">第二范式要求实体的属性完全依赖主关键字，如果存在不完全依赖，那么这个属性和主关键字的这一部分就应该分离处理形成一个新的实体，新实体和原来实体之间是一对多的关系</font></p>\n<h2><a id=\"253NF_72\"></a>2.5第三范式(3NF）</h2>\n<ul><li>第三范式建立在已经满足第二范式的基础上</li><li>数据表中的每一个非主键字段都和主键字段直接相关</li><li><font color=\"red\">也就是说数据表中的所有非主键字段不能依赖于其他非主键字段</font></li><li><font color=\"red\">这个规则的意思是所有非主属性之间不能有依赖关系，它们是互相独立的</font></li><li>这里的主键可以拓展成为候选键</li><li><img alt=\"在这里插入图片描述\" src=\"image\\f91b6489df3045038c1a1d6b35736dd4.png\"/></li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\4be34bf3e7a74a4aaaacedf78f4609f9.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\995a9319acfd4e39acd412591c94bb1e.png\"/></p>\n<h2><a id=\"26_82\"></a>2.6范式的优缺点</h2>\n<ul><li> <p>优点:</p>\n<ul><li>数据的标准化有助于消除数据库中的数据冗余</li></ul> </li><li> <p>第三范式通常被认为在性能，扩展性和数据完整性方面达到了最好的平衡</p> </li><li> <p>缺点:</p>\n<ul><li> <p>降低了查询效率，因为范式等级越高，设计出来的表就越多，进行数据查询的时候就可能需要关联多张表，不仅代价昂贵，而且可能会使得一些索引失效</p> </li><li> <p>范式只是提出设计的标标准，实际设计的时候，我们可能为了性能和读取效率违反范式的原则，通过增加少量的冗余或重复的数据来提高数据库的读取性能，减少关联查询，实现空间换时间的目的</p> </li></ul> </li></ul>\n<h1><a id=\"3_92\"></a>3.反范式化</h1>\n<h2><a id=\"31_93\"></a>3.1概述</h2>\n<ul><li>遵循业务优先的原则</li><li>首先满足业务需求，再进来减少冗余</li><li>有时候我们想要对查询效率进行优化，反范式化也是一种优化思路，我们可以通过在数据表中增加冗余字段来提高数据库的读性能。</li><li><img alt=\"在这里插入图片描述\" src=\"image\\ae4c89882f544099a2e7ab0cab3763e1.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\281cbc9f63474b709c6bd34aac40935b.png\"/></li></ul>\n<h2><a id=\"32__99\"></a>3.2 反范式的新问题</h2>\n<p>反范式虽然可以通过空间换实际，提升查询的效率，但是反范式也会带来一些新问题</p>\n<ul><li>存储空间变大了</li><li>一个表中字段做了修改，另外一个表中冗余字段也要同步进行修改，不然会导致数据不一致</li><li>如果用存储过程了支持数据的更新，删除等操作，如果操作频繁，就会消耗系统资源</li><li>在数据量小的情况下，反范式不能体现性能的优势，可能还会让数据库的设计更加复杂。</li></ul>\n<h2><a id=\"33_106\"></a>3.3反范式的适用场景</h2>\n<p>当冗余信息能<font color=\"red\">大幅度提高查询效率</font>的时候，我们才会采取反范式的优化。</p>\n<blockquote>\n<p><font color=\"red\" size=\"4\">增加冗余字段的建议<br/> 增加冗余冗余字段一定要符合下面的两个条件，满足下面的两个条件才可以考虑增加冗余字段<br/> <font color=\"blue\">①这个冗余字段不需要经常进行修改<br/> ②这个冗余字段查询的时候不可或缺<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1a36f3991c26477ca98337de2634801d.png\"/></font></font></p>\n</blockquote>\n<h1><a id=\"4BCNF_113\"></a>4.BCNF(巴斯范式)</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d889afeb87804a0ebfb8b0cbaad01c6f.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\6dd644c9b3924030948edef458c5d99b.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\d7c3d333f955495bb237113d4de07e8b.png\"/><br/> 这个表符合第三范式<br/> <img alt=\"在这里插入图片描述\" src=\"image\\572856cc96d14e35a2eec616e5b36815.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\80a338928f96469089152d0236b7d5bc.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}