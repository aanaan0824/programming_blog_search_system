{"blogid": "126743202", "writerAge": "码龄2年", "writerBlogNum": "86", "writerCollect": "194", "writerComment": "416", "writerFan": "811", "writerGrade": "5级", "writerIntegral": "1983", "writerName": "白龙码~", "writerProfileAdress": "writer_image\\profile_126743202.jpg", "writerRankTotal": "9840", "writerRankWeekly": "3759", "writerThumb": "456", "writerVisitNum": "40228", "blog_read_count": "13", "blog_time": "已于 2022-09-07 12:35:28 修改", "blog_title": "redo日志、undo日志与事务隔离性", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_2\">事务</a></li><li><ul><li><a href=\"#_4\">一、事务及其特性</a></li><li><ul><li><a href=\"#1_6\">1、事务概念</a></li><li><a href=\"#2ACID_12\">2、事务的四大特性：ACID</a></li></ul>\n</li><li><a href=\"#_32\">二、事务操作</a></li><li><ul><li><a href=\"#1_34\">1、开启事务</a></li><li><a href=\"#2_56\">2、提交事务</a></li><li><ul><li><a href=\"#I__62\">I. 自动提交</a></li><li><a href=\"#II__72\">II. 隐式提交</a></li></ul>\n</li><li><a href=\"#3_98\">3、终止事务(回滚)</a></li><li><ul><li><a href=\"#_108\">自动回滚</a></li></ul>\n</li><li><a href=\"#4_112\">4、保存点</a></li></ul>\n</li><li><a href=\"#redo_122\">三、redo日志</a></li><li><ul><li><a href=\"#1_124\">1、问题引入</a></li><li><a href=\"#2redo_140\">2、redo日志的通用结构</a></li><li><a href=\"#3redo_163\">3、redo日志的基本工作流程</a></li><li><a href=\"#4redo_172\">4、redo日志的优势</a></li></ul>\n</li><li><a href=\"#undo_180\">四、undo日志</a></li><li><ul><li><a href=\"#1InnoDB_188\">1、InnoDB行记录的隐藏列</a></li><li><a href=\"#2undo_198\">2、增删改对应的undo日志</a></li><li><ul><li><a href=\"#I_insertundo_200\">I. insert操作的undo日志</a></li><li><a href=\"#II_deleteundo_208\">II. delete操作的undo日志</a></li><li><a href=\"#III_updateundo_220\">III. update操作的undo日志</a></li></ul>\n</li><li><a href=\"#3undo_226\">3、undo页面</a></li></ul>\n</li><li><a href=\"#_238\">五、事务隔离性</a></li><li><ul><li><a href=\"#1_240\">1、事务并发带来的问题</a></li><li><a href=\"#2_264\">2、隔离级别</a></li><li><a href=\"#3_293\">3、设置隔离级别</a></li><li><a href=\"#4_306\">4、查看隔离级别</a></li></ul>\n</li><li><a href=\"#MVCC_318\">六、MVCC原理</a></li><li><ul><li><a href=\"#1_322\">1、版本链</a></li><li><a href=\"#2ReadView_330\">2、ReadView</a></li><li><ul><li><a href=\"#I__332\">I. 一致性视图与一致性读</a></li><li><a href=\"#II__344\">II. 一致性视图的内容</a></li><li><a href=\"#III__371\">III. 一致性视图的生成时机</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>事务</h1>\n<h2><a id=\"_4\"></a>一、事务及其特性</h2>\n<h3><a id=\"1_6\"></a>1、事务概念</h3>\n<blockquote>\n<p>满足<strong>ACID四大特性</strong>的一条或多条SQL语句称为事务(Transaction)。</p>\n</blockquote>\n<p>在MySQL中，只有<em>InnoDB</em>和<em>NDB</em>两种存储引擎支持事务的功能。</p>\n<h3><a id=\"2ACID_12\"></a>2、事务的四大特性：ACID</h3>\n<ul><li><strong>原子性(Atomicity)</strong></li></ul>\n<p>一件事情，要么没有做，要么做了且已经做完，<strong>不存在做了一半的中间状态</strong>，这种特性称为原子性。</p>\n<ul><li><strong>隔离性(Isolation)</strong></li></ul>\n<p>事务A和事务B可能由多个执行步骤组成，但是<strong>即使这些步骤交错执行，事务之间也不会相互影响</strong>，这种特性称为隔离性。</p>\n<ul><li><strong>一致性(Consistency)</strong></li></ul>\n<p>满足现实世界中的<strong>各种约束</strong>的特性称为一致性，这种约束可能是一种<strong>常识</strong>，比如：身份证号有18位。也可能是一种<strong>业务需求</strong>，比如让数据库中的x和y永远保持相等。</p>\n<ul><li><strong>持久性(Durability)</strong></li></ul>\n<p>一件事情做完以后，它产生的<strong>结果将被永久保留下来</strong>，这种特性称为持久性。</p>\n<h2><a id=\"_32\"></a>二、事务操作</h2>\n<h3><a id=\"1_34\"></a>1、开启事务</h3>\n<p><code>BEGIN [WORK]</code></p>\n<p>或</p>\n<p><code>START TRANSACTION</code></p>\n<p>二者唯一的不同在于<code>start transaction</code>可以在后面跟一些修饰符：</p>\n<ol><li> <p><code>READ ONLY</code>：只读事务。该事务包含的SQL语句只能读取数据，不能修改数据。(但是在本次事务中<code>CREATE TEMPORARY TABLE</code>创建的临时表是可以进行增删查改的)</p> </li><li> <p><code>READ WRITE</code>：读写事务。该事务包含的SQL语句可以进行增删查改(默认修饰符)。</p> </li><li> <p><code>WITH CONSISTENT SNAPSHOT</code>：启动一致性读(快照读)。</p> </li></ol>\n<p>修饰符可以搭配使用，比如：</p>\n<p><code>START TRANSACTION READ ONLY, WITH CONSISTENT SNAPSHOT</code></p>\n<p>但是<code>READ ONLY</code>和<code>READ WRITE</code>不得同时使用。</p>\n<h3><a id=\"2_56\"></a>2、提交事务</h3>\n<p><code>COMMIT [WORK]</code></p>\n<p>当前事务的所有SQL语句写完了，则可以使用<code>commit</code>提交该事务。</p>\n<h4><a id=\"I__62\"></a>I. 自动提交</h4>\n<p>MySQL系统变量<code>autocommit</code>默认值为1(ON)，表示自动提交事务，即：除非显式的使用<code>begin/start transaction</code>开启事务，否则<strong>每一个SQL语句都会被视作一个独立的事务</strong>。</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-TcWzKRPF-1662525293573)(https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d23afaedae84a31b497dc7cda6ae1b9~tplv-k3u1fbpfcp-zoom-1.image)]</p>\n<p>可以使用SET <code>autocommit</code> = 0或OFF将自动提交关闭。</p>\n<p>此时如果不手动开启一个事务，那么直到第一个<code>commit</code>或者<code>rollback</code>之前的所有SQL语句都属于同一个事务。</p>\n<h4><a id=\"II__72\"></a>II. 隐式提交</h4>\n<p>当<code>autocommit</code>为OFF或者使用<code>begin/start transaction</code>手动开启一个事务时，事务不会自动提交。</p>\n<p>但是，如果事务包含以下SQL，则在这些SQL之前的所有SQL都会自动提交：</p>\n<ul><li>使用数据定义语言(<em>DDL</em>)。</li></ul>\n<p>包括<code>CREATE、ALTER、DROP</code>等修改数据库、表等数据库对象的SQL语句。</p>\n<ul><li>隐式地使用或修改mysql数据库中的表。</li></ul>\n<p>包括<code>ALTER USER、DROP USER、SET PASSWORD、GRANT</code>等。</p>\n<blockquote>\n<p>注：名为mysql的数据库是MySQL用来保存用户信息等数据的。</p>\n</blockquote>\n<ul><li> <p>上一个事务还没提交或回滚，就又开启了新的事务时，此时自动提交上一事务。</p> </li><li> <p>使用关于锁定的语句。</p> </li></ul>\n<p>包括<code>LOCK TABLES、UNLOCK TABLES</code>等</p>\n<h3><a id=\"3_98\"></a>3、终止事务(回滚)</h3>\n<p><code>ROLLBACK [WORK]</code></p>\n<p>如果发现事务的前几条SQL语句写错了，则可以通过<code>rollback</code>将数据库<strong>回滚到开启事务前的状态</strong>。</p>\n<p>但是，如果SQL语句包含对非InnoDB和非NDB表(即不支持事务的存储引擎)的操作，则对这些表的操作不会进行回滚。</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-dil7rXjs-1662525293573)(https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c287d2af9ca41f2af7b629f8d90e6aa~tplv-k3u1fbpfcp-zoom-1.image)]</p>\n<h4><a id=\"_108\"></a>自动回滚</h4>\n<p>如果一个事务还没有提交时<strong>客户端退出或崩溃</strong>，则数据库会自动回滚到事务开启之前的状态。</p>\n<h3><a id=\"4_112\"></a>4、保存点</h3>\n<p><code>SAVEPOINT point_name</code></p>\n<p>在事务中添加一个或多个保存点。如果发现之前的SQL有错误，则可以通过<code>ROLLBACK TO point_name</code>让数据库回滚到该保存点之前的状态。</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-3WD6B8yg-1662525293574)(https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a053b5c715f5486abd6b706bc70e5cfe~tplv-k3u1fbpfcp-zoom-1.image)]</p>\n<h2><a id=\"redo_122\"></a>三、redo日志</h2>\n<h3><a id=\"1_124\"></a>1、问题引入</h3>\n<blockquote>\n<p>InnoDB是以页为单位管理表数据的，那么一个事务中对表的增删查改本质就是访问并修改数据页的内容。由于数据页原先是存储在磁盘中的，因此访问之前需要将所需页载入内存，然后再适时将脏页面刷新到磁盘。</p>\n<p>但是，如果在页面刷新到磁盘之前，MySQL<strong>发生故障崩溃</strong>，或是<strong>系统掉电关机</strong>，那么必然就会导致刚刚的所有操作全部失效。</p>\n</blockquote>\n<p>对此问题的<strong>一个解决办法</strong>是：在事务提交前，先将该事务产生的所有脏页面全部刷新到磁盘。</p>\n<p>但是<strong>相应的问题</strong>在于：</p>\n<ol><li> <p>一个事务访问的数据如果是非连续的，那么可能会导致随机I/O，使得<strong>脏页面的数量较多</strong>，而同时将这么多脏页面刷新到磁盘，<strong><font color=\"red\">效率太低</font></strong>。</p> </li><li> <p>事务中的一个SQL可能只会修改一张16KB页面中的几字节的内容，如果为此将整张页面刷新到磁盘，显然<font color=\"red\">太浪费</font>了。</p> </li></ol>\n<p>为此，redo日志诞生了，简单来说，它的功能就是<font color=\"red\">在事务提交前，将本次事务对哪些页面进行修改记录下来，然后将redo日志刷新到磁盘。</font></p>\n<h3><a id=\"2redo_140\"></a>2、redo日志的通用结构</h3>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ksq1fjP1-1662525293574)(https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21b8af4037f543708e38a87892d72973~tplv-k3u1fbpfcp-zoom-1.image)]</p>\n<ul><li><strong>space ID + page number</strong></li></ul>\n<p>记录本次操作修改了哪个表空间的哪个页面。</p>\n<p>注：表空间，简单来说就是一张表对应的所有页面的集合，在文件系统中对应InnoDB表的.ibd文件。</p>\n<ul><li><strong>data</strong></li></ul>\n<p>该条redo日志的具体内容，根据redo日志的类型，内容也可能不一样。</p>\n<ul><li><strong>type</strong></li></ul>\n<p>该条redo日志的类型，包括但不仅有：</p>\n<ol><li><em>MLOG_WTIRE_STRING</em>：记录了在页面的某个偏移量处写入了一个字节序列；</li><li><em>MLOG_COMP_REC_INSERT</em>：插入了一条使用紧凑行格式的行记录(紧凑行即5.0版本后使用的一类行格式)；</li><li><em>MLOG_COMP_REC_DELETE</em>：删除了一条使用紧凑行格式的行记录；</li><li><em>MLOG_COMP_LIST_START_DELETE</em>：从某条记录开始删除了一系列行记录；</li></ol>\n<h3><a id=\"3redo_163\"></a>3、redo日志的基本工作流程</h3>\n<ol><li> <p>服务器在启动时会申请一块内存空间作为<em>redo log buffer</em>，这段空间被分成若干连续的512字节的<em>redo log block</em>。</p> </li><li> <p>在事务进行时，对页的操作会产生各种类型的redo日志，它们被顺序写入到<em>block</em>中。</p> </li><li> <p>在遇到<em>redo log buffer</em>空间不足，或者事务提交等情况时，redo日志会被刷新到磁盘上的日志文件中。</p> </li><li> <p>如果数据库崩溃，则通过redo日志将没来得及刷盘的页面恢复。</p> </li></ol>\n<h3><a id=\"4redo_172\"></a>4、redo日志的优势</h3>\n<ol><li> <p>相比于事务提交时刷新16kb的脏页面，redo日志**<font color=\"red\">占用的空间更小</font>**。</p> </li><li> <p>redo日志是连续存储的，因此刷新时<font color=\"red\"><strong>I/O效率较高</strong></font>。</p> </li></ol>\n<h2><a id=\"undo_180\"></a>四、undo日志</h2>\n<blockquote>\n<p>redo日志是为了在事务提交后避免因为页面没有及时刷新到磁盘而导致数据丢失，而undo日志是为了方便在事务执行过程中回滚至出错之前的状态。</p>\n<p>redo：避免丢失</p>\n<p>undo：方便回滚</p>\n</blockquote>\n<h3><a id=\"1InnoDB_188\"></a>1、InnoDB行记录的隐藏列</h3>\n<ul><li><em><strong>trx_id</strong></em></li></ul>\n<p>如果某个事务进行了增删改的操作，那么InnoDB就会为他分配一个唯一的<strong>事务id</strong>。</p>\n<ul><li><em><strong>roll_pointer</strong></em></li></ul>\n<p><strong>回滚指针</strong>，指向本条记录对应的<strong>undo日志的地址</strong>。</p>\n<h3><a id=\"2undo_198\"></a>2、增删改对应的undo日志</h3>\n<h4><a id=\"I_insertundo_200\"></a>I. insert操作的undo日志</h4>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ZIsZ2AeP-1662525293574)(https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/725b1c04263e41169fb829a172653ae7~tplv-k3u1fbpfcp-zoom-1.image)]</p>\n<blockquote>\n<p>注：<strong>每个事务生成的undo日志编号都从0开始递增，直至提交</strong>；</p>\n</blockquote>\n<hr/>\n<h4><a id=\"II_deleteundo_208\"></a>II. delete操作的undo日志</h4>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-NPGOeIzo-1662525293575)(https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f585b8ed610c47588126356d7464377d~tplv-k3u1fbpfcp-zoom-1.image)]</p>\n<p>在事务内对行记录进行删除时，分为两个步骤：</p>\n<ol><li>将行记录的deleted_flag标志位设置成1，表示该列已被删除。</li><li>将该行记录的trx_id和roll_pointer存储到undo日志中，然后将行记录的trx_id和roll_pointer分别修改成当前事务的id和本次undo日志的地址。</li><li>如果本次事务提交，则将该行记录从正常的记录链表中移除，然后添加至垃圾链表。</li></ol>\n<hr/>\n<h4><a id=\"III_updateundo_220\"></a>III. update操作的undo日志</h4>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-6oEvtMtK-1662525293575)(https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a175456fac7744c880e24d06be91fda5~tplv-k3u1fbpfcp-zoom-1.image)]</p>\n<h3><a id=\"3undo_226\"></a>3、undo页面</h3>\n<p>undo日志被存放在<em>FIL_PAGE_UNDO</em>类型的页面中，该页面又被分为两个大类：</p>\n<p>1、<em>TRX_UNDO_INSERT</em>：由insert语句产生的undo日志，在事务提交后可以直接删除；</p>\n<p>2、<em>TRX_UNDO_UPDATE</em>：除<em>TRX_UNDO_INSERT</em>以外，其它undo日志都属于该类型，在事务提交后还要为MVCC服务，所以不能立即删除。</p>\n<p>每个事务都会维护INSERT和UPDATE两种类型的undo页面链表。</p>\n<h2><a id=\"_238\"></a>五、事务隔离性</h2>\n<h3><a id=\"1_240\"></a>1、事务并发带来的问题</h3>\n<p>一个事务可能包含一个或多个SQL语句，当有多个事务到来时，服务器执行SQL的线程将会并发地执行，但是这样的并发往往会相互干渉，从而引发一致性、持久性和原子性的相关问题，包括：</p>\n<ul><li>脏写(dirty write)</li></ul>\n<p>一个事务<strong>修改</strong>了另一个还未提交的事务修改过的数据。</p>\n<ul><li>脏读(dirty read)</li></ul>\n<p>一个事务<strong>读取</strong>了另一个还未提交的事务修改过的数据。</p>\n<ul><li>幻读(phantom)</li></ul>\n<p>事务A读取了符合条件P的记录，在A未提交时事务B又插入了符合条件P的记录，那么此时事务A再读取符合条件P的数据时就会发现记录条数增加了。</p>\n<ul><li>不可重复读(non-repeatable read)</li></ul>\n<p>事务T1读取了一些记录，在未提交时事务T2修改了这些记录中的一部分，那么此时事务T1再读取这些记录时就会发现<strong>和上次的记录不一样</strong>。</p>\n<h3><a id=\"2_264\"></a>2、隔离级别</h3>\n<p>为了解决事务并发带来的问题，MySQL引入了4种隔离级别，分别是：</p>\n<ol><li>读未提交(Read Uncommitted)</li></ol>\n<p>最低等级的隔离级别，能够读取其它事务还未提交的数据，<strong>几乎不加锁</strong>，因此上述几种问题都可能出现。</p>\n<ol start=\"2\"><li>读提交(Read Committed)</li></ol>\n<p><strong>只能够读取其它事务已提交的数据</strong>，但是如果事务B在事务A前提交了，那么B提交的数据可能会被A看到，从而导致幻读和不可重复读的问题。</p>\n<ol start=\"3\"><li>可重复读(Repeatable Read)</li></ol>\n<p>在读提交的基础上更上一层的隔离级别，A、B事务同时执行时，B事务对表中数据的<strong>删改操作</strong>即使在提交后也不会被A事务看见，从而避免了不可重复读的问题。但是B事务<strong>insert</strong>的新记录依然会被A看到，因此无法避免幻读问题。</p>\n<ol start=\"4\"><li>可串行化(Serializable)</li></ol>\n<p>最高等级的隔离级别，<strong>对所有操作都会加锁</strong>，因此避免了上述问题，但是效率过低。</p>\n<table><thead><tr><th align=\"center\">隔离级别</th><th align=\"center\">脏读</th><th align=\"center\">不可重复读</th><th align=\"center\">幻读</th></tr></thead><tbody><tr><td align=\"center\">READ UNCOMMITTED</td><td align=\"center\">可能</td><td align=\"center\">可能</td><td align=\"center\">可能</td></tr><tr><td align=\"center\">READ COMMITTED</td><td align=\"center\">不可能</td><td align=\"center\">可能</td><td align=\"center\">可能</td></tr><tr><td align=\"center\">REPEATABLE READ</td><td align=\"center\">不可能</td><td align=\"center\">不可能</td><td align=\"center\">可能</td></tr><tr><td align=\"center\">SERIALIZABLE</td><td align=\"center\">不可能</td><td align=\"center\">不可能</td><td align=\"center\">不可能</td></tr></tbody></table>\n<p>注：脏写是最严重的问题，无论哪种隔离级别都不允许脏写的情况发生。在一个事务修改某条记录前，会给该记录加锁，只有在事务提交后锁才会释放，此时其它事务才能继续修改该记录。</p>\n<h3><a id=\"3_293\"></a>3、设置隔离级别</h3>\n<p><code>SET [GLOBAL|SESSION] TRANSACTION ISOLATION LEVEL level</code></p>\n<p>其中level的四个可选值为<code>REPEATABLE READ(默认)、READ COMMITTED、READ UNCOMMITTED、SERIALIZABLE</code>。</p>\n<ul><li> <p>如果使用<em>GLOBAL</em>关键字，则该隔离级别<strong>在当前会话和后续所有新会话中生效</strong>。</p> </li><li> <p>如果使用<em>SESSION</em>关键字，则该隔离级别<strong>仅在当前会话生效</strong>。</p> </li><li> <p>如果两个关键字都不设置，则该隔离级别<strong>仅在下一个事务中生效</strong>。</p> </li></ul>\n<h3><a id=\"4_306\"></a>4、查看隔离级别</h3>\n<p><code>SHOW VARIABLES LIKE 'tx_isolation'</code></p>\n<p>或</p>\n<p><code>SELECT @@tx_isolation</code></p>\n<blockquote>\n<p>注：5.7.20版本后可以将tx替换成transaction</p>\n</blockquote>\n<h2><a id=\"MVCC_318\"></a>六、MVCC原理</h2>\n<blockquote>\n<p>MVCC，即多版本并发控制(Multi-Version Concurrency Control)，是访问记录版本链的过程。</p>\n</blockquote>\n<h3><a id=\"1_322\"></a>1、版本链</h3>\n<p>除了INSERT类型的undo日志没有roll_pointer指针(因为新插入的数据不存在历史版本)，其它日志都存在一个roll_pointer指针指向上一个操作该行记录的undo日志的起始地址。</p>\n<p>随着行记录更新的次数增多，这些undo日志最终会形成一个链表，该链表被称为<strong>版本链</strong>，其中靠近头结点的是最近的undo日志。</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-aX3iCJ9b-1662525293575)(https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7052880c763e401599d0a9d5f62e4926~tplv-k3u1fbpfcp-zoom-1.image)]</p>\n<h3><a id=\"2ReadView_330\"></a>2、ReadView</h3>\n<h4><a id=\"I__332\"></a>I. 一致性视图与一致性读</h4>\n<p>对于不同隔离级别的事务，它们读取行记录的方式和读到的版本是不同的，比如：</p>\n<ul><li><code>READ UNCOMMITTED</code>级别的事务读取的记录必然是<strong>版本链中最新的那一条</strong>，即头结点。</li><li><code>SERIALIZABLE</code>级别的事务<strong>使用加锁的方式访问记录</strong>。</li><li><code>READ COMMITTED和REPEATABLE READ</code>级别的事务需要保证自己读到的是版本链中<strong>已经提交的最新版本</strong>。</li></ul>\n<p>针对<code>READ COMMITTED和REPEATABLE READ</code>，判断版本的可见性尤为重要。因此，MySQL提出了“一致性视图(ReadView)”的概念。利用一致性视图进行读取的操作称为<font color=\"red\">“一致性读”</font>。</p>\n<blockquote>\n<p>注：版本可见性指的是当前事务能否读取该版本的内容。</p>\n</blockquote>\n<h4><a id=\"II__344\"></a>II. 一致性视图的内容</h4>\n<p>ReadView有4个重要内容：</p>\n<ul><li> <p><code>m_ids</code>：在生成ReadView时，系统中活跃的事务id列表。</p> </li><li> <p><code>min_trx_id</code>：m_ids中的最小值。</p> </li><li> <p><code>max_trx_id</code>：在生成ReadView时，系统应该分配给下一个新事务的id。</p> </li><li> <p><code>creator_trx_id</code>：生成该ReadView的事务id。</p> </li></ul>\n<p>有了ReadView以后，事务应当读取哪一版本的记录就可以通过以下步骤判断：</p>\n<ol><li> <p>如果对应版本的trx_id等于ReadView的creator_trx_id，则说明事务正在访问自己修改过的记录，因此可见。</p> </li><li> <p>如果对应版本的trx_id小于ReadView的min_trx_id，则说明在事务的ReadView生成时，该版本已经提交了，因此可见。</p> </li><li> <p>如果对应版本的trx_id大于等于ReadView的max_trx_id，则说明在事务的ReadView生成后，该版本才产生，因此不可见(与前人看不到后人做了哪些事一个道理)。</p> </li><li> <p>如果对应版本的trx_id在ReadView的min_trx_id和max_trx_id之间，则需要判断它是否在m_ids列表中：如果在，则说明在创建ReadView时，生成该版本的事务还是<strong>活跃的，因此不可见</strong>；如果不在，则说明在创建ReadView时，生成该版本的事务<strong>已经提交了，因此可见</strong>。</p> </li></ol>\n<blockquote>\n<p>总之：只有在ReadView生成之前提交的事务所做的修改和事务自身所做的修改是可见的。</p>\n<ul><li>如果某个版本对当前事务不可见，就顺着版本链判断下一个版本的可见性。</li><li>如果所有版本都不可见，则最终的查询结果就不包含该条记录。</li></ul>\n</blockquote>\n<h4><a id=\"III__371\"></a>III. 一致性视图的生成时机</h4>\n<p><font color=\"red\"><strong>ReadView生成时机的不同是READ COMMITTED和REPEATABLE READ最本质的区别。</strong></font></p>\n<ul><li><em>READ COMMITTED</em><font color=\"red\"><strong>在每次读取数据前都会生成一个ReadView</strong></font>，在事务执行期间，别的事务提交的数据对于本事务是可见的，因此会有不可重复读和幻读的问题。</li><li><em>REPEATABLE READ</em><font color=\"red\"><strong>只在第一次读取数据时生成ReadView</strong></font>，在事务执行期间，别的事务提交的数据对于本事务是不可见的，因此也就不会有不可重复读的问题，同时也很大程度上解决了幻读问题，但是无法根治，比如：</li></ul>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-aCsWNRDk-1662525293576)(https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d065bc2c8a44d848da55d8f4992d332~tplv-k3u1fbpfcp-zoom-1.image)]</p>\n<p>数字为语句执行的顺序。</p>\n<p>事务A插入数据并提交后，事务B看不到A插入的数据。但是，在事务B进行update操作后，<strong>如果A插入的数据<font color=\"red\">满足update的条件</font>，那么B此时再查看就会看到被修改后的A插入的数据</strong>。</p>\n<blockquote>\n<p>注：之所以执行update之后就能看到，是因为更新后数据的trx_id会变成当前事务的id，满足MVCC中可见性的判断。</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}