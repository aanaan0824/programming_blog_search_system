{"blogid": "126743739", "writerAge": "码龄4年", "writerBlogNum": "48", "writerCollect": "0", "writerComment": "2", "writerFan": "1", "writerGrade": "3级", "writerIntegral": "511", "writerName": "Leo Ma", "writerProfileAdress": "writer_image\\profile_126743739.jpg", "writerRankTotal": "41006", "writerRankWeekly": "4693", "writerThumb": "19", "writerVisitNum": "3043", "blog_read_count": "8", "blog_time": "于 2022-09-07 13:27:29 发布", "blog_title": "【leetcode】面试题 02.01. 移除重复节点（简单）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>【leetcode】面试题 02.01. 移除重复节点</p>\n<p>编写代码，移除未排序链表中的重复节点。保留最开始出现的节点。</p>\n<p>示例1:</p>\n<p>输入：[1, 2, 3, 3, 2, 1]<br/> 输出：[1, 2, 3]</p>\n<p>示例2:</p>\n<p>输入：[1, 1, 1, 1, 2]<br/> 输出：[1, 2]</p>\n<p>提示：</p>\n<pre><code>链表长度在[0, 20000]范围内。\n链表元素在[0, 20000]范围内。\n</code></pre>\n<p>进阶：</p>\n<p>如果不得使用临时缓冲区，该怎么解决？</p>\n<h2><a id=\"_24\"></a>解题思路：</h2>\n<p>若链表为空，直接返回空链表。<br/> 若链表不为空，则先定义occured数组，用来标记元素是否出现过，0表示未出现过，1表示出现过。然后遍历链表，若当前元素未出现过，标记为1，并移动指针位置，向后移动一位。若当前元素出现过，则跳过当前重复节点，指针直接指向下一个节点。</p>\n<h2><a id=\"_27\"></a>代码：</h2>\n<p>C：</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */</span>\n\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">removeDuplicateNodes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// &amp;&amp; head -&gt; next == NULL</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> occured <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">20001</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//calloc是stdlib.h库里的函数，分配内存，并全部初始化为0。申请20001个int类型的空间</span>\n                                                          <span class=\"token comment\">//定义occured数组，用来标记元素是否出现过，0表示未出现过，1表示出现过</span>\n    occured<span class=\"token punctuation\">[</span>head <span class=\"token operator\">-&gt;</span> val<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//head-val表示第一个元素的值</span>\n                               <span class=\"token comment\">//head -&gt; next -&gt; val表示第二个元素的值</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">-&gt;</span> next<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> pos <span class=\"token operator\">-&gt;</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>occured<span class=\"token punctuation\">[</span>cur <span class=\"token operator\">-&gt;</span> val<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">//若当前元素未出现过</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            occured<span class=\"token punctuation\">[</span>cur <span class=\"token operator\">-&gt;</span> val<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">//标记为1</span>\n            pos <span class=\"token operator\">=</span> pos <span class=\"token operator\">-&gt;</span> next<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">//移动指针位置，向后移动一位</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            pos <span class=\"token operator\">-&gt;</span> next <span class=\"token operator\">=</span> pos <span class=\"token operator\">-&gt;</span> next <span class=\"token operator\">-&gt;</span> next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//跳过重复节点，指针直接指向下一个节点</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_64\"></a>备注：</h2>\n<p>calloc和malloc的区别<br/> calloc分配内存后，会将所有元素全部初始化为0，而malloc分配内存后，不会进行初始化操作。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}