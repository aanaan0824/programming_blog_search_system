{"blogid": "126706560", "writerAge": "码龄9年", "writerBlogNum": "35", "writerCollect": "153", "writerComment": "51", "writerFan": "4325", "writerGrade": "3级", "writerIntegral": "487", "writerName": "随遇而安的dandelion", "writerProfileAdress": "writer_image\\profile_126706560.jpg", "writerRankTotal": "30715", "writerRankWeekly": "1005", "writerThumb": "91", "writerVisitNum": "37272", "blog_read_count": "201", "blog_time": "已于 2022-09-05 15:59:06 修改", "blog_title": "鸿蒙应用开发之Hello World-1", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>引言</h1>\n<p>本文首先通过一个简单HAP（HarmonyOS Ability Package）包的开发，展示了采用JS扩展的类Web开发范式（简称“类Web开发范式”）进行鸿蒙应用前端开发的基本流程；然后将开发出来的HAP安装到小熊派BearPi-HM_Micro_small开发板上，对应用进行了测试。</p>\n<hr/>\n<p><strong>小贴士：</strong></p>\n<p>带图形界面的OpenHarmony应用程序包括 <strong>前端</strong> 和 <strong>后端</strong> 两个部分：</p>\n<p>（1）应用程序前端</p>\n<p>应用程序前端主要负责图形界面的构建和展示，向上通过图形界面与用户进行交互，向下通过ArkUI框架的JS（JavaScript）接口或eTS（Extend TypeScript）接口与应用程序的后端进行交互。</p>\n<p>OpenHarmony应用程序前端支持两种开发范式：基于JS扩展的类Web开发范式（简称“类Web开发范式”）；基于TS扩展的声明式开发范式（简称“声明式开发范式”）。</p>\n<p>（2）应用程序后端</p>\n<p>应用程序后端负责实现应用程序的实际功能，向上通过ArkUI框架的C++接口与应用程序的前端进行交互，向下可以通过HDF驱动框架提供的接口与设备驱动进行交互。</p>\n<hr/>\n<p><strong>参考文档：</strong></p>\n<pre><code>DevEco Studio官方文档\nhttps://developer.harmonyos.com/cn/docs/documentation/doc-guides/versions_overview-0000001233344736\n小熊派\nhttps://gitee.com/bearpi/bearpi-hm_micro_app/blob/master/docs/hello_word.md\n</code></pre>\n<p>​</p>\n<h1><a id=\"_33\"></a>一、准备开发环境</h1>\n<p>1、开发板：小熊派BearPi-HM_Micro_small开发板，OpenHarmony 3.0。</p>\n<p>2、设备开发IDE：DevEco Device Tool (Release) v3.0.0</p>\n<p>参考：<a href=\"https://blog.csdn.net/u013819452/article/details/125402229\">《搭建小熊派BearPi-HM_Micro_Small的纯Ubuntu开发环境》</a></p>\n<p>3、应用开发IDE：DevEco Studio 3.0 Beta2</p>\n<p>参考：<a href=\"https://blog.csdn.net/u013819452/article/details/126519040\">《安装DevEco Studio 3.0 Beta2》</a></p>\n<p>​</p>\n<h1><a id=\"_47\"></a>二、创建项目</h1>\n<p><strong>1、启动<code>DevEco Studio</code>，在首页左侧的导航栏里选择<code>Create Project</code>，选择<code>[lite]Empty Ability</code>模板，单击<code>Next</code>，进入下一步。</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\3d82691f55874187b14ec15a15dfd8cf.png\"/></p>\n<p><strong>2、 按照下图输入项目名称（Project name）、选择项目类型（Project type）、输入包名（Bundle name）、选择项目存放路径（Save location）、选择开发语言（Language、选择兼容的API版本（Compatible API version）、选择设备类型（Device type）；然后，单击<code>Finish</code>，开始创建项目。</strong></p>\n<p><strong>包名的格式一般为：<code>com.公司名称.项目名称</code></strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8ed4a9b6f11b4c7ba69a20705c2b20e7.png\"/></p>\n<p><strong>3、 耐心等待项目创建完毕。项目创建完毕后，如下图所示：</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\7a353014428845b1a5115e6d3d2efae8.png\"/></p>\n<p>在这一步，我们需要对鸿蒙应用包的结构、鸿蒙应用工程的目录结构，以及鸿蒙应用工程中的文件有一个基本的了解，建议去看看我写的另外一篇文章<a href=\"https://blog.csdn.net/u013819452/article/details/126627424?spm=1001.2014.3001.5501\">《OpenHarmony APP开发基础》</a>。</p>\n<p><strong>还有一点需要注意：</strong> DevEco Studio在创建项目的时候，默认指定在编译项目时使用最新的SDK版本，这就需要你的硬件设备中也使用这个最新的SDK版本才能运行应用程序，否则你需要到鸿蒙应用工程中找到两个名为<code>build.gradle</code>的文件，将文件中的<code>compileSdkVersion</code>的值改成你的设备中使用的SDK的版本号，比如：在本例中改成了<code>6</code>。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\32b2439967ef494194632b267464167d.png\"/></p>\n<p>​</p>\n<h1><a id=\"_74\"></a>三、编写代码</h1>\n<p>在本例中，应用程序前端开发采用的是基于JS扩展的类Web开发范式（简称“类Web开发范式”），也就是经典的HML（类HTML）、CSS、JavaScript三段式开发方式。在这种开发方式中，使用HML标签文件进行图形界面的布局搭建；使用CSS文件对图形界面的样式进行描述；使用JavaScript文件实现图形界面的业务逻辑，即：与用户和后端程序进行交互。</p>\n<p>页面（Page）和组件（Component） 是OpenHarmony应用开发中的两个基本概念：</p>\n<p>（1）应用程序的图形界面可以由一个或多个页面组成。页面是ArkUI框架最小的分割和调度单位；每个页面可进行单独的文件管理。</p>\n<p>（2）<a href=\"https://docs.openharmony.cn/pages/v3.1/zh-cn/application-dev/ui/ui-js-building-ui-component.md/\">组件</a>是构成页面的基本元素。开发者通过多种组件的组合，构建出满足自身应用诉求的完整界面。</p>\n<p>在本文第二部分创建项目时使用的<code>[lite]Empty Ability</code>模板中已经自带了一个用户页面，这个用户页面的功能非常简单，就是显示一个文本：Hello World，页面的代码如下图红框中所示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\06ffe47e8a9d48ff86b6e9c7ab9d9688.png\"/></p>\n<p>双击打开三个文件：<code>index.hml</code>、<code>index.css</code>、<code>index.js</code>中的任何一个，然后单击DevEco Studio最右侧工具栏中的 <strong>Preview</strong> ，可以预览页面的效果；每次对页面进行修改之后，单击 <strong>刷新</strong> 即可。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\cf161b3800b445549dfeda2bcd3d42ba.png\"/></p>\n<p>也可以按照下图所示步骤，打开仿真面板 ，仿真页面显示效果。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\df6c474b6bd3465682365a82eff24206.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\327fa0db3e13449d9a887c9313c3b145.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\8e1a567264d048499411c1448548bfe3.png\"/></p>\n<p><strong>注：单击上方的小方块，关闭仿真面板；单击右侧的Simulator可以刷新仿真结果。</strong></p>\n<h2><a id=\"31_indexhml_107\"></a>3.1 index.hml</h2>\n<p>HML（OpenHarmony Markup Language）是一套类HTML的标记语言，用于描述页面中有哪些<a href=\"https://docs.openharmony.cn/pages/v3.1/zh-cn/application-dev/ui/ui-js-building-ui-component.md/\">组件</a>、组件在整个页面中的布局结构，以及组件所具备的数据绑定、事件绑定、列表渲染、条件渲染和逻辑控制等高级能力。比如：UI组件与数据之间通过单向数据绑定的方式建立关联，当数据发生变化时，UI界面自动触发更新。</p>\n<p><strong>HML语法参考：</strong></p>\n<pre><code>https://docs.openharmony.cn/pages/v3.1/zh-cn/application-dev/ui/js-framework-syntax-hml.md/\n\nhttps://developer.harmonyos.com/cn/docs/documentation/doc-guides/js-framework-syntax-hml-0000001281480758\n</code></pre>\n<p>如果在上述链接中找不到相关内容，也可以参考一下HTML的教程：</p>\n<pre><code>https://www.runoob.com/html/html-tutorial.html\n</code></pre>\n<p><strong>原代码：</strong></p>\n<pre><code>&lt;div class=\"container\"&gt;\n    &lt;text class=\"title\"&gt;\n        Hello {<!-- -->{ title }}\n    &lt;/text&gt;\n&lt;/div&gt;\n</code></pre>\n<p><strong>原代码解析：</strong></p>\n<p>（1）在<code>hml</code>文件中，每一对标签用于声明一个组件，组件之间可以相互包含（嵌套）。</p>\n<p>（2）标签<code>div</code>通常被作为<code>hml</code>文件中的根标签，其所声明的组件<code>div</code>对应页面中的一个区域。<code>class</code>是组件的一种通用属性（即：任何一个组件都可以拥有的属性），用于声明组件的样式类型，例如：<code>container</code>就是由开发者自定义的一个样式类型的名称，具体的定义在css文件中。</p>\n<pre><code>组件div\nhttps://docs.openharmony.cn/pages/v3.1/zh-cn/application-dev/reference/arkui-js/js-components-container-div.md/\n</code></pre>\n<p>（3）标签<code>text</code>所声明的组件<code>text</code>用于在页面中展示一段文本，起始标签<code>&lt;text&gt;</code>和结束标签<code>&lt;/text&gt;</code>之间的内容就是要展示的文本：<code>Hello {<!-- -->{ title }}</code>，双重花括号表示对变量的引用（数据绑定），花括号中的<code>title</code>是在文件<code>index.js</code>中定义的一个变量。</p>\n<pre><code>组件text\nhttps://docs.openharmony.cn/pages/v3.1/zh-cn/application-dev/ui/ui-js-components-text.md/\nhttps://docs.openharmony.cn/pages/v3.1/zh-cn/application-dev/reference/arkui-js/js-components-basic-text.md/\n</code></pre>\n<p><strong>修改原代码：</strong></p>\n<p>接下来，我们在<code>div</code>组件中再添加一个<code>input</code>组件：</p>\n<pre><code>&lt;div class=\"container\"&gt;\n    &lt;text class=\"title\"&gt;\n        Hello {<!-- -->{ title }}\n    &lt;/text&gt;\n    \n    &lt;input class=\"btn\" type=\"button\" value=\"Exit\" onclick=\"exit\"&gt;\n\t&lt;/input&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Input是交互式组件，用于接收用户数据。其类型可设置为日期、多选框和按钮等。</p>\n<p>（1）<code>class</code>是所有组件的通用属性，用于指明组件的样式类型。组件<code>input</code>的样式类型是<code>btn</code>（将在css文件中添加它的定义）。</p>\n<pre><code>通用属性\nhttps://docs.openharmony.cn/pages/v3.1/zh-cn/application-dev/reference/arkui-js/js-components-common-attributes.md/\n</code></pre>\n<p>（2）<code>type</code>和<code>value</code>是组件<code>input</code>可以支持的属性。</p>\n<pre><code>组件input\nhttps://docs.openharmony.cn/pages/v3.1/zh-cn/application-dev/reference/arkui-js/js-components-basic-input.md/\nhttps://docs.openharmony.cn/pages/v3.1/zh-cn/application-dev/ui/ui-js-components-input.md/\n</code></pre>\n<p>（3）click是组件的一种通用事件</p>\n<pre><code>通用事件\nhttps://docs.openharmony.cn/pages/v3.1/zh-cn/application-dev/reference/arkui-js/js-components-common-events.md/\n</code></pre>\n<p>事件通过<code>on</code>或者<code>@</code>绑定在组件上，当组件触发事件时会执行JS文件中对应的事件处理函数，比如：本例中的exit函数（将在js文件中定义）。</p>\n<p><a href=\"https://blog.csdn.net/u013819452/article/details/126706923?spm=1001.2014.3001.5502\">未完，待续 …</a></p>\n<p>​</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}