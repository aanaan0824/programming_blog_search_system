{"blogid": "126211115", "writerAge": "码龄100天", "writerBlogNum": "124", "writerCollect": "1175", "writerComment": "1770", "writerFan": "1158", "writerGrade": "6级", "writerIntegral": "5052", "writerName": "林有酒", "writerProfileAdress": "writer_image\\profile_126211115.jpg", "writerRankTotal": "3492", "writerRankWeekly": "55", "writerThumb": "1202", "writerVisitNum": "21343", "blog_read_count": "320", "blog_time": "于 2022-08-10 09:00:00 发布", "blog_title": "深度剖析Vue2、Vue3响应式原理 | 逐步推敲手写响应式原理全过程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_1\">响应式原理</a></li><li><ul><li><a href=\"#_3\">🍤认识响应式逻辑</a></li><li><a href=\"#_89\">🍤响应式依赖收集</a></li><li><a href=\"#_133\">🍤响应式依赖管理</a></li><li><a href=\"#_207\">🍤监听属性的变化</a></li><li><a href=\"#_252\">🍤自动的收集依赖(核心难点)</a></li><li><a href=\"#Depend_454\">🍤对Depend重构</a></li><li><a href=\"#_547\">🍤创建响应式对象</a></li><li><a href=\"#Vue3_605\">🍤Vue3响应式原理</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_1\"></a>响应式原理</h2>\n<h3><a id=\"_3\"></a>🍤认识响应式逻辑</h3>\n<p><strong>我们先来看一下响应式意味着什么？我们来看一段代码</strong>：</p>\n<blockquote>\n<p>num有一个初始化的值，有一段代码使用了这个值；</p>\n<p>那么在num有一个新的值时，我们希望这段代码可以自动重新执行；</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">*</span> num<span class=\"token punctuation\">)</span>\n\nnum <span class=\"token operator\">=</span> <span class=\"token number\">150</span>\n</code></pre>\n<p><strong>上面的这样一种可以自动响应数据变量的代码机制，我们就称之为是响应式的</strong>。</p>\n<blockquote>\n<p>那么我们再来看一下对象的响应式</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 对象的响应式</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chenyq\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 当name属性变化时, 需要重新执行下面这段代码</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 当age变化时才需要执行这段代码, name变化不需要重新执行</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 修改obj的name属性</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"kaisa\"</span>\n</code></pre>\n<p><strong>首先，执行的代码中可能不止一行代码，所以我们可以将这些代码放到一个函数中</strong>：</p>\n<blockquote>\n<p>那么我们的问题就变成了，当数据发生变化时，<font color=\"red\">自动去执行某一个函数</font>；</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 对象的响应式</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chenyq\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 将两段代码分别封装成两个函数, 当数据变化需要重新执行时, 只需重新调用函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 修改obj的name属性</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"kaisa\"</span>\n</code></pre>\n<p><strong>但是有一个问题：在开发中我们是有很多的函数的，我们如何区分一个函数需要响应式，还是不需要响应式呢？</strong></p>\n<blockquote>\n<p>很明显，下面的函数中 foo 需要在obj的name发生变化时，重新执行，做出相应；</p>\n<p>bar函数是一个完全独立于obj的函数，它不需要执行任何响应式的操作；</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">let</span> newName <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>name\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token operator\">+</span> <span class=\"token number\">30</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h3><a id=\"_89\"></a>🍤响应式依赖收集</h3>\n<p><strong>我们如何区分一个函数是否需要响应式呢?</strong></p>\n<blockquote>\n<p>这个时候我们封装一个新的函数watchFn用来收集name属性变化时, 需要响应式的函数；</p>\n<p>凡是传入到watchFn的函数，就是需要响应式的, 再由watchFn函数将他们存放在一个数组中；</p>\n<p>其他默认定义的函数都是不需要响应式的；</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chenyq\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 将依赖对象的函数, 统一收集到一个数组中</span>\n<span class=\"token keyword\">const</span> reactiveFns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 设计一个专门收集响应式函数的函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">watchFn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  reactiveFns<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 函数传进来时, 会自动执行一次</span>\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 调用函数, 将函数收集到数组中</span>\n<span class=\"token function\">watchFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo:\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo:\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">watchFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar:\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello \"</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar:\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 修改obj属性</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"kaisa\"</span>\n<span class=\"token comment\">// 修改obj属性, 将收集响应式函数的数组遍历并且全部调用</span>\nreactiveFns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">fn</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<hr/>\n<h3><a id=\"_133\"></a>🍤响应式依赖管理</h3>\n<p><strong>目前我们收集的依赖是放到一个数组中来保存的，但是这里会存在数据管理的问题</strong>：</p>\n<blockquote>\n<p>我们在实际开发中需要监听很多对象的响应式；</p>\n<p>这些对象需要监听的<font color=\"red\">不只是一个属性</font>，它们很多属性的变化，都会有对应的响应式函数；</p>\n<p>我们不可能在全局维护一大堆的数组来保存这些响应函数；</p>\n</blockquote>\n<p><strong>所以我们要设计一个类，这个类<font color=\"red\">用于管理某一个对象的某一个属性</font>的所有响应式函数</strong>：</p>\n<blockquote>\n<p>相当于替代了原来的简单 reactiveFns 的数组；</p>\n</blockquote>\n<ul><li><strong>定义的类如下</strong>:</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 使用一个类代替数组来进行依赖管理</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Depend</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 定义存放响应式函数的数组</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactiveFns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 定义实例方法, 用于收集需要响应式的函数</span>\n  <span class=\"token function\">addDepend</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactiveFns<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 定义方法, 用于数据改变时, 执行数组中的响应式的函数</span>\n  <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactiveFns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li><strong>使用类管理依赖</strong></li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chenyq\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 创建一个实例</span>\n<span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">watchFn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 使用实例方法, 将响应式的函数添加到类中</span>\n  dep<span class=\"token punctuation\">.</span><span class=\"token function\">addDepend</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 函数传进来时, 会自动执行一次</span>\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 调用函数, 将函数收集到数类中</span>\n<span class=\"token function\">watchFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo:\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo:\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">watchFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar:\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello \"</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar:\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 修改obj属性</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"kaisa\"</span>\n<span class=\"token comment\">// 当name数据改变时, 仅需调用类中的notify方法即可</span>\ndep<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<hr/>\n<h3><a id=\"_207\"></a>🍤监听属性的变化</h3>\n<blockquote>\n<p>目前存在的一个问题就是: 我们当某个属性发生变化, 我们想要它响应式, 就需要手动的调用notify方法, 如果没有调用, 那么数据就不会更新.</p>\n<p>这样操作是非常繁琐的, 我们希望实现自动监听刷新数据的效果</p>\n</blockquote>\n<p><strong>那么我们接下来就可以通过之前学习的方式来监听对象的变量</strong>：</p>\n<blockquote>\n<p>方式一：通过 Object.defineProperty的方式（vue2采用的方式）；</p>\n<p>方式二：通过new Proxy的方式（vue3采用的方式）；</p>\n</blockquote>\n<p><strong>我们这里先以Object.defineProperty的方式来监听</strong>:</p>\n<pre><code class=\"prism language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      value <span class=\"token operator\">=</span> newValue\n      dep<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> value\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>监听后就不需要再手动调用, 当属性发生变化时, 会自动调用notify方法, 实现数据更新</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 修改obj属性</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------name属性发生改变------------\"</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"kaisa\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------age属性发生改变------------\"</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">38</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\22b742b97a734bc884f4be3b36e6f646.png\"/></p>\n<hr/>\n<h3><a id=\"_252\"></a>🍤自动的收集依赖(核心难点)</h3>\n<blockquote>\n<p>目前我们是通过watchFn不管三七二十一的, 将函数添加到类中, 当属性改变时重新执行添加到类中的函数</p>\n<p>如果向类中添加两个函数, 但是如果其中一个依赖name, 另一个没有依赖name属性, 这样的添加方法是有问题的, 没有依赖name属性的函数, 我们应该不去向类中添加</p>\n</blockquote>\n<p><strong>我们目前是创建了一个Depend对象，用来<font color=\"red\">管理对于name变化需要</font>监听的响应函数</strong>：</p>\n<blockquote>\n<p>但是实际开发中我们会<font color=\"red\">有不同的对象</font>，另外会<font color=\"red\">有不同的属性</font>需要管理；</p>\n<p>我们如何可以使用一种数据结构来管理不同对象的不同依赖关系呢？</p>\n</blockquote>\n<p><strong>在前面ES6新特性中我讲解过WeakMap，并且在讲WeakMap的时候我讲到了后面通过WeakMap如何管理这种响应式的数据依赖(我们会按照如下数据结构对响应式输入依赖进行管理)</strong>：</p>\n<blockquote>\n<p>dep对象数据结构的管理(最难理解)</p>\n<ul><li> <p><font color=\"red\">每一个对象的每一个属性</font>都会对应一个dep对象</p> </li><li> <p>同一个对象的多个属性的dep对象是存放一个map对象中</p> </li><li> <p>多个对象分别对应的map对象, 又会被存放到一个objMap的对象中</p> </li></ul>\n<p>依赖收集: 当执行get函数, 自动的添加fn函数; 当执行set函数, 自动执行Depend对象的notify方法</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\6f57f872e5974ce68a1c7bebfda21902.png\"/></p>\n<p><strong>我们可以写一个getDepend函数专门来管理这种依赖关系</strong>：</p>\n<blockquote>\n<p>这样我们调用getDepend函数, 一定会返回一个depend对象, 并且在get和set方法中, 可以根据obj和key拿到正确的depend对象</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 封装一个函数: 负责通过obj的key获取对应的Depend对象</span>\n<span class=\"token keyword\">const</span> objMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getDepend</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 1.根据obj对象, 找到obj对应的map对象</span>\n  <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> objMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 当map对象不存在时, 创建一个map对象, 再将obj[map]放到objMap中</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    objMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 2.根据key, 找到map对应的depend对象</span>\n  <span class=\"token keyword\">let</span> dep <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// dep没有值时, 创建一个depend对象, 存入对应的map对象中</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dep<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    dep <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> dep<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> dep\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>接下来我们就需要正确的将依赖收集起来, 我们之前收集依赖的地方是在 watchFn 中</strong>：</p>\n<blockquote>\n<p>但是之前这种收集依赖的方式我们根本不知道是哪一个key的哪一个depend需要收集依赖, 只能针对一个单独的depend对象来添加你的依赖对象；</p>\n<p>那么正确的应该是在哪里收集呢？应该在我们调用了get捕获器时, 因为如果一个函数中使用了某个对象的key，那么它应该被收集依赖, 而又当一个函数中使用了某个对象的key, 那么就会执行该对象的get方法, 我们可以在get捕获器中, 将正确的依赖收集进来；</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 封装函数: 用于收集依赖</span>\n<span class=\"token comment\">// 定义一个变量, 临时保存传入的fn函数, 方便在get中添加到depend对象</span>\n<span class=\"token keyword\">let</span> reactiveFn <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">watchFn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  reactiveFn <span class=\"token operator\">=</span> fn\n  <span class=\"token comment\">// 函数传进来时,会 自动执行一次</span>\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  reactiveFn <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// 获取正确的dep, 将函数添加进去</span>\n      <span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> <span class=\"token function\">getDepend</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n      dep<span class=\"token punctuation\">.</span><span class=\"token function\">addDepend</span><span class=\"token punctuation\">(</span>reactiveFn<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> value\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>当属性改变时, 会执行set方法, 我们在set方法中可以拿到当前dep对象, 并执行当前dep对象的notify方法</strong></p>\n<pre><code class=\"prism language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      value <span class=\"token operator\">=</span> newValue\n      <span class=\"token comment\">// 获取obj.key对应的depend对象</span>\n      <span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> <span class=\"token function\">getDepend</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n      dep<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// 找到正确的dep, 将函数添加进去</span>\n      <span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> <span class=\"token function\">getDepend</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n      dep<span class=\"token punctuation\">.</span><span class=\"token function\">addDepend</span><span class=\"token punctuation\">(</span>reactiveFn<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> value\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>按照上诉步骤, 就完成了自动收集依赖的实现, 完整代码如下</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 使用一个类代替数组来进行依赖管理</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Depend</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 定义存放响应式函数的数组</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactiveFns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 定义实例方法, 用于收集需要响应式的函数</span>\n  <span class=\"token function\">addDepend</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactiveFns<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 定义方法, 用于数据改变时, 执行数组中的响应式的函数</span>\n  <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactiveFns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chenyq\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 封装函数: 用于收集依赖</span>\n<span class=\"token comment\">// 定义一个变量, 临时保存传入的fn函数, 方便在get中添加到depend对象</span>\n<span class=\"token keyword\">let</span> reactiveFn <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">watchFn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  reactiveFn <span class=\"token operator\">=</span> fn\n  <span class=\"token comment\">// 函数传进来时,会 自动执行一次</span>\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  reactiveFn <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 封装一个函数: 负责通过obj的key获取对应的Depend对象</span>\n<span class=\"token keyword\">const</span> objMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getDepend</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 1.根据obj对象, 找到obj对应的map对象</span>\n  <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> objMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 当map对象不存在时, 创建一个map对象, 再将obj[map]放到objMap中</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    objMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 2.根据key, 找到map对应的depend对象</span>\n  <span class=\"token keyword\">let</span> dep <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// dep没有值时, 创建一个depend对象, 存入对应的map对象中</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dep<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    dep <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> dep<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> dep\n<span class=\"token punctuation\">}</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      value <span class=\"token operator\">=</span> newValue\n      <span class=\"token comment\">// 获取obj.key对应的depend对象</span>\n      <span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> <span class=\"token function\">getDepend</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n      dep<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// 获取正确的dep, 将函数添加进去</span>\n      <span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> <span class=\"token function\">getDepend</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n      dep<span class=\"token punctuation\">.</span><span class=\"token function\">addDepend</span><span class=\"token punctuation\">(</span>reactiveFn<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> value\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 调用函数, 将函数收集到数类中</span>\n<span class=\"token function\">watchFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo:\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo:\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">watchFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar:\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 测试: </span>\n<span class=\"token comment\">// 修改obj属性</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------name属性发生改变------------\"</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"kaisa\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------age属性发生改变------------\"</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">38</span>\n</code></pre>\n<h3><a id=\"Depend_454\"></a>🍤对Depend重构</h3>\n<p><strong>自动收集依赖已经实现, 但是这里有两个小问题</strong>:</p>\n<blockquote>\n<p>问题一：如果函数中有用到两次key，比如name，那么这个函数会被收集两次；</p>\n<p>问题二：我们并不希望将添加reactiveFn放到get中，以为它是属于Dep的行为；</p>\n</blockquote>\n<p><strong>所以我们需要对Depend类进行重构</strong>：</p>\n<blockquote>\n<p>解决问题一的方法：不使用数组，而是使用Set；</p>\n</blockquote>\n<p><strong>如下代码, 例如当函数中有使用两次或多次name属性时, name属性也会被多次添加到dep.reactiveFns数组中, 导致函数被多次执行</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 调用函数, 将函数收集到数类中</span>\n<span class=\"token function\">watchFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo:\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo:\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo:\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo:\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">watchFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar:\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 测试: </span>\n<span class=\"token comment\">// 修改obj属性</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------name属性发生改变------------\"</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"kaisa\"</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\75ee06b95cb94e6e81006e09b72971d1.png\"/></p>\n<p><strong>解决方式: 使用Set结构</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Depend</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 定义存放响应式函数换成Set</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactiveFns <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">addDepend</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactiveFns<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactiveFns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>解决问题二的方法：添加一个新的方法，用于收集依赖；</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Depend</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactiveFns <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">addDepend</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactiveFns<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 添加一个新的方法，用于收集依赖</span>\n  <span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reactiveFn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactiveFns<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>reactiveFn<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactiveFns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-js\"><span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> <span class=\"token function\">getDepend</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\t <span class=\"token comment\">// 调用depend方法  </span>\n  dep<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> value\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_547\"></a>🍤创建响应式对象</h3>\n<p><strong>我们目前的响应式是针对于obj一个对象的，我们可以创建出来一个函数，针对所有的对象都可以变成响应式对象</strong>：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        value <span class=\"token operator\">=</span> newValue\n        <span class=\"token comment\">// 获取obj.key对应的depend对象</span>\n        <span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> <span class=\"token function\">getDepend</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n        dep<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 获取正确的dep, 将函数添加进去</span>\n        <span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> <span class=\"token function\">getDepend</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// dep.addDepend(reactiveFn)</span>\n        dep<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> value\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> obj\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>当我们想要响应式时, 包裹一层reactive即可</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chenyq\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">\"成都市\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">watchFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo:\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo:\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">userName</span><span class=\"token operator\">:</span> <span class=\"token string\">'aaabbbccc'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">passWorld</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abc123\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">watchFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar:\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>userName<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar:\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passWorld<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 测试: </span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"kaisa\"</span>\n\nuser<span class=\"token punctuation\">.</span>passWorld <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span>\n</code></pre>\n<h3><a id=\"Vue3_605\"></a>🍤Vue3响应式原理</h3>\n<p><strong>我们前面所实现的响应式的代码，其实就是Vue2中的响应式原理</strong>：</p>\n<blockquote>\n<p>Vue3主要是通过Proxy来监听数据的变化以及收集相关 的依赖的；</p>\n<p>Vue2中通过Object.defineProerty 的方式来实现对象属性的监听；</p>\n</blockquote>\n<p><strong>Vue2和Vue3的原理思路是一样的, 我们只需要将reactive函数中的Object.defineProerty重构成Proxy来监听数据, 就是Vue3的响应式原理</strong></p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> objProxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// 设置新值</span>\n      Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> <span class=\"token function\">getDepend</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n      dep<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> <span class=\"token function\">getDepend</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n      dep<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> objProxy\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}