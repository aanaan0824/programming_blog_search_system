{"blogid": "125919785", "writerAge": "码龄1年", "writerBlogNum": "137", "writerCollect": "10854", "writerComment": "4382", "writerFan": "41376", "writerGrade": "7级", "writerIntegral": "11238", "writerName": "安然无虞", "writerProfileAdress": "writer_image\\profile_125919785.jpg", "writerRankTotal": "987", "writerRankWeekly": "914", "writerThumb": "5633", "writerVisitNum": "428998", "blog_read_count": "1044", "blog_time": "于 2022-07-30 08:12:38 发布", "blog_title": "为什么C++中的继承比Java设计的要复杂，原因竟出在这儿？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-kimbie-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/16e83580fb40448fa1aabec6ef84c840.gif#pic_center\"/></p>\n<table><tbody><tr><td align=\"left\" bgcolor=\"#E8E8FF\">\n<center>\n<font size=\"3\"><strong>你好，我是安然无虞。 </strong></font>\n</center></td></tr></tbody></table>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_12\">继承的概念及定义</a></li><li><ul><li><a href=\"#_15\">继承的概念</a></li><li><a href=\"#_118\">继承的定义</a></li><li><ul><li><a href=\"#_119\">定义格式</a></li><li><a href=\"#_122\">继承关系和访问限定符</a></li><li><a href=\"#_135\">继承基类成员访问方式的变化</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_152\">基类和派生类对象赋值转换</a></li><li><a href=\"#_195\">继承中的作用域</a></li><li><a href=\"#_266\">派生类的默认成员函数</a></li><li><a href=\"#_383\">继承与友元</a></li><li><a href=\"#_407\">继承与静态成员</a></li><li><a href=\"#_453\">复杂的菱形继承和菱形虚拟继承</a></li><li><ul><li><a href=\"#_532\">虚拟继承解决数据冗余和二义性的原理</a></li></ul>\n</li><li><a href=\"#_622\">继承的总结和反思</a></li><li><ul><li><a href=\"#_626\">继承和组合</a></li></ul>\n</li><li><a href=\"#_662\">笔试面试题</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_12\"></a>继承的概念及定义</h1>\n<p>我们知道面向对象的三大特性有：封装、继承和多态。可能有铁子会误以为面向对象只有这三大特性，其实不然，还有其他的特性，比如反射、抽象等。<br/> 那今天我们就好好来说说C++是如何设计继承的，为什么说比Java的继承要复杂呢？请看下文：</p>\n<h2><a id=\"_15\"></a>继承的概念</h2>\n<p>首先谈谈继承的概念：</p>\n<blockquote>\n<p>继承机制是面向对象程序设计<strong>使代码可以复用的</strong>最重要的手段，它允许程序员在保持原有类特性的基础上进行扩展，增加功能，由此产生新的类，称为派生类。<br/> 继承呈现了面向对象程序设计的层次结构，体现了由简单到复杂的认知过程，以前我们接触的复用都是函数复用，<strong>而继承属于是类设计层次的复用</strong>。</p>\n</blockquote>\n<p>概念听起来有点生硬，那就举个栗子吧：<br/> 我们在学校的一些大作业中可能听过这样一个“系统”：图书管理系统，它的角色类分为：学生、老师、保安、保洁、后勤……<br/> 比如学生类是这样设计的：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring _name<span class=\"token punctuation\">;</span><span class=\"token comment\">//姓名</span>\n\tstring _tel<span class=\"token punctuation\">;</span><span class=\"token comment\">//电话</span>\n\tstring _address<span class=\"token punctuation\">;</span><span class=\"token comment\">//地址</span>\n\t<span class=\"token keyword\">int</span> _age<span class=\"token punctuation\">;</span><span class=\"token comment\">//年龄</span>\n\t<span class=\"token comment\">//……</span>\n\tstring _stuID<span class=\"token punctuation\">;</span><span class=\"token comment\">//学号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>老师类是这样设计的：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring _name<span class=\"token punctuation\">;</span>\n\tstring _tel<span class=\"token punctuation\">;</span>\n\tstring _address<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _age<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//……</span>\n\tstring _workID<span class=\"token punctuation\">;</span><span class=\"token comment\">//工号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>很明显，有些数据和方法是每个角色都有的，比如姓名、电话、地址和年龄，这样也就设计重复了，而有些数据和方法是每个类独有的，比如学号和工号。</p>\n<p>所以这个时候继承就起到作用了，我们把重复的数据和方法设计到Person类中：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring _name<span class=\"token punctuation\">;</span>\n\tstring _tel<span class=\"token punctuation\">;</span>\n\tstring _address<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这样时候设计Student类和Teacher类可以通过继承Person类：<br/> Student类：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Studet</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring _stuID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Teacher类：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring _workID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这样就实现继承了，继承的本质是类设计角度的复用。上面的Person类是父类，也叫基类；Student类和Teacher类是子类，也叫派生类。</p>\n<p>铁子可能对上面讲的不是很明白，没事，下面带着大家一起调试一段代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"name:\"</span> <span class=\"token operator\">&lt;&lt;</span> _name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"age:\"</span> <span class=\"token operator\">&lt;&lt;</span> _age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring _name <span class=\"token operator\">=</span> <span class=\"token string\">\"SL\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这是C++11的新玩法</span>\n\t<span class=\"token keyword\">int</span> _age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//不是初始化，给的是缺省值</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//继承后父类的Person成员的成员变量和成员函数都会变成子类的一部分</span>\n<span class=\"token comment\">//这里体现出了Student类和Teacher复用了Person类的成员</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _stuID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _workID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStudent s<span class=\"token punctuation\">;</span>\n\tTeacher t<span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>调试上段代码，通过监视窗口查看Student类对象s和Teacher类对象t，可以看到变量_name和_age的复用。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8efbcf4bb37441c7915d1b6459225c33.png\"/><br/> 调用Print函数时可以看到成员函数的复用，这里我就不演示了，大家可以下去自行调试哦。</p>\n<h2><a id=\"_118\"></a>继承的定义</h2>\n<h3><a id=\"_119\"></a>定义格式</h3>\n<p>下面我们看到Person类是父类，也叫基类；Student类是子类，也叫派生类。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\1a7d0e5bf86f479e84de2a1eb21dff1e.png\"/></p>\n<h3><a id=\"_122\"></a>继承关系和访问限定符</h3>\n<p>继承方式分为：</p>\n<ul><li>public继承</li><li>protected继承</li><li>private继承</li></ul>\n<p>访问限定符分为：</p>\n<ul><li>public访问</li><li>protected访问</li><li>private访问</li></ul>\n<h3><a id=\"_135\"></a>继承基类成员访问方式的变化</h3>\n<p>请仔细看看下面表格：</p>\n<table><thead><tr><th>类成员/继承方式</th><th>public继承</th><th>protected继承</th><th>private继承</th></tr></thead><tbody><tr><td>基类的public成员</td><td>派生类的public成员</td><td>派生类的protected成员</td><td>派生类的private成员</td></tr><tr><td>基类的protected成员</td><td>派生类的protected成员</td><td>派生类的protected成员</td><td>派生类的private成员</td></tr><tr><td>基类的private成员</td><td>在派生类中不可见</td><td>在派生类中不可见</td><td>在派生类中不可见</td></tr></tbody></table>\n<p>注意：对于最后一行基类的private成员，它虽然在派生类中不可见，但是它继承到派生类当中了。</p>\n<p>总结：</p>\n<ol><li>基类private成员在派生类中无论以什么继承方式都是不可见的，这里不可见指的是语法上限制了派生类对象不管在类里面还是在类外面都不能访问它，但是<strong>基类的私有成员还是继承到了派生类当中</strong>；</li><li>基类的private成员在派生类中是不能被访问的，如果基类成员不想在类外直接被访问，但是<strong>需要在派生类当中能被访问，就需要定义为protected成员</strong>。这个时候就能发现，原来protecte访问限定符是为了继承而设置的；</li><li>对上面的表格进一步总结就会发现，基类的私有成员在子类当中都是不可见的，<strong>基类的其他成员在子类当中的访问方式 == 成员在基类当中的访问限定符和继承方式，二者取小的那一个</strong>，注意哦，这个是继承原则；</li><li>使用关键字class时默认继承方式是private，使用struct时默认继承方式是public，不过最好显示的写出继承方式；</li><li><strong>在实际运用当中一般都是public继承，几乎很少使用protected/private继承</strong>，现实中也不提倡使用，因为protected/private继承下来的成员都只能在派生类里面使用，实际中的扩展维护性不强，<strong>大佬早期设计的时候想复杂了，实际当中的基类成员都是保护或者公有，继承方式都是公有继承</strong>；</li></ol>\n<h1><a id=\"_152\"></a>基类和派生类对象赋值转换</h1>\n<p>这部分只需要注意三点内容：</p>\n<p>1.<strong>派生类对象可以赋值给基类的对象/基类的指针/基类的引用</strong>。这里有个很形象的说法叫切片或切割，寓意是把派生类中基类那部分切来赋值过去。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3bc8013dd8344bf3a902f4861a62de5d.png\"/></p>\n<p>2.<strong>基类对象不能赋值给派生类对象</strong>。</p>\n<p>3.基类对象的指针或引用可以通过强制类型转换赋值给派生类对象的指针或引用，但是必须是基类对象的指针必须指向派生类对象时才是安全的。（具体放到后面讲解，这里大家知道有这点即可）</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring _name<span class=\"token punctuation\">;</span>\n\tstring _sex<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _No<span class=\"token punctuation\">;</span><span class=\"token comment\">//学号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStudent s<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//1、派生类对象可以赋值给基类对象/指针/引用</span>\n\tPerson p <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n\tPerson<span class=\"token operator\">*</span> pp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">;</span>\n\tPerson<span class=\"token operator\">&amp;</span> rp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//2、基类对象不能赋值给派生类对象，注意哦，强制类型转换也不可以</span>\n\t<span class=\"token comment\">//s = p;</span>\n\n\t<span class=\"token comment\">//3、基类指针可以通过强制类型转换赋值给派生类指针，但有些情况会导致越界，后面会详细说明</span>\n\tpp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">;</span>\n\tStudent<span class=\"token operator\">*</span> ps1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Student<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_195\"></a>继承中的作用域</h1>\n<p>1.在继承体系中基类和派生类都有<strong>独立的作用域</strong>；</p>\n<p>2.基类和派生类中有同名成员，派生类成员将屏蔽基类对同名成员的直接访问，这种情况叫隐藏，也叫重定义（在派生类成员函数中，可以使用 基类::基类成员 显示访问）；</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//Student的_num和Person的_num构成隐藏关系，很容易混淆</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring _name <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _num <span class=\"token operator\">=</span> <span class=\"token number\">168</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//身份证号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span> <span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> _name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"身份证号：\"</span> <span class=\"token operator\">&lt;&lt;</span> Person<span class=\"token double-colon punctuation\">::</span>_num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//指定作用域</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"学号：\"</span> <span class=\"token operator\">&lt;&lt;</span> _num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _num <span class=\"token operator\">=</span> <span class=\"token number\">999</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//学号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>3.需要注意如果是成员函数的隐藏，只需要函数名相同就构成隐藏；</p>\n<p>4.注意实际当中的继承体系里不要定义同名的成员（包括成员变量和成员函数）。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//B中的fun()和A中的fun()不是构成重载，因为不是在同一作用域</span>\n<span class=\"token comment\">//基类和派生类都有各自独立的作用域</span>\n\n<span class=\"token comment\">//B中fun()和A中fun()构成隐藏，成员函数满足函数名相同构成隐藏关系</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span> <span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"fun()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span> <span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">A</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"fun(int i)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tB b<span class=\"token punctuation\">;</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\3de611b1d88444dd8a7f6557525add96.png\"/><br/> 对Test()函数变形：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tB b<span class=\"token punctuation\">;</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//编译报错，A中的fun()函数被隐藏了，默认调用的是派生类的成员函数，改成b.A::fun()才正确</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_266\"></a>派生类的默认成员函数</h1>\n<p>6个默认成员函数，“默认”的意思就是我们不写，编译器也会自动生成一个，那么在派生类中，这几个成员函数是如何生成的呢？</p>\n<p>1、派生类的构造函数必须调用基类的构造函数初始化基类的那一部分成员。如果基类没有默认的构造函数，则必须在派生类构造函数的初始化列表阶段显示调用；</p>\n<p>2、派生类的拷贝构造函数必须调用基类的拷贝构造函数完成基类的拷贝初始化；</p>\n<p>3、派生类的operator=必须要调用基类的operator=完成基类的复制；</p>\n<p>4、派生类的析构函数会在被调用完成后自动调用基类的析构函数清理基类成员。因为这样才能保证派生类对象先清理派生类成员再清理基类成员的顺序。</p>\n<p>5、派生类对象初始化先调用基类构造再调用派生类构造；</p>\n<p>6、派生类对象析构清理先调用派生类析构再调用基类析构；</p>\n<p>7、因为后续一些场景析构函数需要构成重写，重写的条件之一是函数名相同，那么编译器会对析构函数名进行特殊处理，处理成destrutor()，所以基类析构函数在不加virtual的情况下，派生类析构函数和基类析构函数构成隐藏关系。（这点在后面多态部分详细讲解）</p>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\d31f913cff9541e0b0556107401ec545.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Person<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">_name</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>_name<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person(const Person&amp; p)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tPerson<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Person<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person operator=(const Person&amp; p)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span>\n\t\t\t_name <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>_name<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring _name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//初始化列表初始化顺序是按照声明的顺序，一般我们认为父类是在前声明的</span>\n\t<span class=\"token comment\">//所以即使改成:_num(num) ,Person(name)也是先初始化父类的对象</span>\n\t<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token comment\">//注意这里不是_name(name)，父类一定要调用父类的默认构造初始化</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">_num</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Student()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//子类构造函数原则:（析构、拷贝、赋值也类似）</span>\n<span class=\"token comment\">//a.调用父类构造函数初始化继承自父类成员；</span>\n<span class=\"token comment\">//b.自己再初始化自己成员</span>\n\t<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token comment\">//调用父类的默认构造初始化父类的那一部分</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">_num</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>_num<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Student(const Student&amp; s)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tStudent<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Student&amp; operator=(const Student&amp; s)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tPerson<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_num <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>_num<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">~</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//~Person();//报错——父子类析构函数构成隐藏关系（多态部分讲解原因）</span>\n\t\t<span class=\"token comment\">//试想：显示调用Person::~Person()，这样也是错误的，原因是没必要</span>\n\t\t<span class=\"token comment\">//为了保证析构顺序，先子后父，子类析构函数完成后会自动调用父类的析构函数，所以不需要我们显示调用</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~Student()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _num<span class=\"token punctuation\">;</span><span class=\"token comment\">//学号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStudent <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20510</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tStudent <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts1 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>有这样一道题目：<br/> <strong>如何设计一个不能够被继承的类？</strong><br/> 答案是：将父类构造函数私有化（这样在定义对象的时候就会报错）</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//父类的构造函数私有化后，子类就无法构造对象</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_383\"></a>继承与友元</h1>\n<p><strong>友元关系不能继承</strong>，也就是说基类友元不能访问子类私有和保护成员。是父类的友元，但不是子类的友元。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Display</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Person<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Student<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring _name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _stuNum<span class=\"token punctuation\">;</span><span class=\"token comment\">//学号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Display</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Person<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Student<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>_name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>_stuNum <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//报错</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_407\"></a>继承与静态成员</h1>\n<p><strong>基类定义了static静态成员，则整个继承体系里面只有一个这样的成员</strong>。无论派生出多少个子类，都只有一个static成员实例。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token operator\">++</span>_count<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring _name<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> _count<span class=\"token punctuation\">;</span><span class=\"token comment\">//统计人的个数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> Person<span class=\"token double-colon punctuation\">::</span>_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _stuNum<span class=\"token punctuation\">;</span><span class=\"token comment\">//学号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Graduate</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring _course<span class=\"token punctuation\">;</span><span class=\"token comment\">//学科</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStudent s1<span class=\"token punctuation\">;</span>\n\tStudent s2<span class=\"token punctuation\">;</span>\n\tStudent s3<span class=\"token punctuation\">;</span>\n\tGraduate s4<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"人数：\"</span> <span class=\"token operator\">&lt;&lt;</span> Person<span class=\"token double-colon punctuation\">::</span>_count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tStudent<span class=\"token double-colon punctuation\">::</span>_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"人数：\"</span> <span class=\"token operator\">&lt;&lt;</span> s4<span class=\"token punctuation\">.</span>_count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"s1._count地址：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">.</span>_count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"s4._count地址：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>s4<span class=\"token punctuation\">.</span>_count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\56d4f9ffcfd7450fbe9c5e48c263c5b2.png\"/><br/> 用的是同一个static成员，地址也一样。</p>\n<h1><a id=\"_453\"></a>复杂的菱形继承和菱形虚拟继承</h1>\n<p>1、单继承：一个子类只有一个<strong>直接父类</strong>时，称这个继承关系为单继承。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\de853c91b6f94b9ca06c34f7966d2686.png\"/><br/> 2、多继承：一个子类有两个或两个以上的<strong>直接父类</strong>时，称这个继承关系为多继承。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\dd59eb8b757842e9a2a816fda0edf63c.png\"/><br/> 3、菱形继承：菱形继承是多继承的一种特殊情况。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\8fb6e2650af74ae88e33e619edec7028.png\"/><br/> 菱形继承存在的问题：<br/> 从下面的对象成员模型可以看出，<strong>菱形继承有数据冗余和二义性的问题</strong>。<br/> 在Assistant对象中Person成员会有两份。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\fc5c437b69c14dcb8a442412cb2c35f1.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\tstring _name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _num<span class=\"token punctuation\">;</span><span class=\"token comment\">//学号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _id<span class=\"token punctuation\">;</span><span class=\"token comment\">//职工编号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Assistant</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Teacher</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring _majorCourse<span class=\"token punctuation\">;</span><span class=\"token comment\">//主修课程</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//存在二义性，不知道访问哪一个</span>\n\tAssistant a<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//a._name = \"诸葛大力\";</span>\n\n\t<span class=\"token comment\">//需要显示指定访问哪个父类的成员可以解决二义性问题，但是数据冗余问题依旧不能解决</span>\n\ta<span class=\"token punctuation\">.</span>Student<span class=\"token double-colon punctuation\">::</span>_name <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span>\n\ta<span class=\"token punctuation\">.</span>Teacher<span class=\"token double-colon punctuation\">::</span>_name <span class=\"token operator\">=</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>虚拟继承</strong>可以解决菱形继承的二义性和数据冗余的问题。如上面的继承关系，在Student和Teacher的继承Person时使用虚拟继承，即可解决问题。不过需要注意的是，虚拟机称不要在其他地方使用。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\tstring _name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _num<span class=\"token punctuation\">;</span><span class=\"token comment\">//学号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _id<span class=\"token punctuation\">;</span><span class=\"token comment\">//职工编号</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Assistant</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Teacher</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstring _majorCourse<span class=\"token punctuation\">;</span><span class=\"token comment\">//主修课程</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tAssistant a<span class=\"token punctuation\">;</span>\n\ta<span class=\"token punctuation\">.</span>_name <span class=\"token operator\">=</span> <span class=\"token string\">\"诸葛大力\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_532\"></a>虚拟继承解决数据冗余和二义性的原理</h2>\n<p>为了研究虚拟继承原理，接下来给出一个简化的菱形继承体系，再借助调试状态下的<strong>内存窗口</strong>观察对象成员的模型。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span> <span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">C</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _d<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tD d<span class=\"token punctuation\">;</span>\n\td<span class=\"token punctuation\">.</span>B<span class=\"token double-colon punctuation\">::</span>_a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\td<span class=\"token punctuation\">.</span>C<span class=\"token double-colon punctuation\">::</span>_a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\td<span class=\"token punctuation\">.</span>_b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\td<span class=\"token punctuation\">.</span>_c <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\td<span class=\"token punctuation\">.</span>_d <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\976a83582d3d45199609c65bf0881d6f.png\"/><br/> 将代码改成菱形虚拟继承，如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span> <span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">C</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> _d<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tD d<span class=\"token punctuation\">;</span>\n\td<span class=\"token punctuation\">.</span>B<span class=\"token double-colon punctuation\">::</span>_a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\td<span class=\"token punctuation\">.</span>C<span class=\"token double-colon punctuation\">::</span>_a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\td<span class=\"token punctuation\">.</span>_b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\td<span class=\"token punctuation\">.</span>_c <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\td<span class=\"token punctuation\">.</span>_d <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>下图是菱形虚拟继承的内存对象成员模型：这里我们可以分析出D对象中将A放到了对象组成的最下面，A被放到一个单独的空间中，这个A同时属于B和C。<br/> 但是这样的话会有一个问题：<strong>B和C如何去找到这个公共的A呢？其实在VS下是通过B和C的两个指针，分别指向各自的一张表。这两个指针叫虚基表指针，这两个表叫虚基表。虚基表中存的是偏移量(本题是距离A存储位置的偏移量)。通过偏移量可以找到下面的A</strong>。<br/> <img alt=\"在这里插入图片描述\" src=\"image\\38bd7463f3a74f1e8303037a0d3437c2.png\"/><br/> 下图是对于上面Person关系菱形虚拟继承的原理解释：<br/> <img alt=\"在这里插入图片描述\" src=\"image\\471d479652504481b5e78f0f4a82501e.png\"/><br/> 可能我们会疑问，为什么D中B和C部分要去找属于自己的A？那么大家看看当发生下面的赋值时，d是不是要去找B和C成员中的A才能赋值过去？</p>\n<pre><code class=\"prism language-cpp\">D d<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//会切片，通过偏移量来找各自的A</span>\nB b <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\nC c <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"_622\"></a>继承的总结和反思</h1>\n<p>1、我们都说C++语法复杂，其实多继承就是一个体现。有了多继承，就会存在菱形继承，有了菱形继承就会有菱形虚拟继承，它们的底层实现相当复杂。所以一般不建议使用多继承，更不要使用菱形继承，因为在复杂度和性能上都会存在问题。<br/> 2、多继承可以认为是C++的设计缺陷之一，后来很多OOP都没有多继承，比如Java。</p>\n<h2><a id=\"_626\"></a>继承和组合</h2>\n<p>对于继承和和组合的理解：</p>\n<p>public 继承是一种 is-a 的关系，也就是说每一个派生类对象都是一个基类对象。比如：学生-&gt;人，狗-&gt;动物</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//继承</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>组合是一种 has-a 的关系，假设B组合了A，每个B对象中都有一个A对象。比如：车-&gt;轮胎，头-&gt;眼睛</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//组合</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tC _c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>注意：适合 is-a 关系建议继承，适合 has-a 关系建议组合，都适合的话建议组合。也就是说，优先使用对象组合，而不是类继承。</p>\n</blockquote>\n<p>继承允许你根据基类的实现来定义派生类的实现。这种通过生成派生类的复用通常被称为白箱复用。专业术语“白箱”是相对可视性而言：在继承方式中，<strong>基类的内部细节对派生类可见</strong>。所以，继承在一定程度上破坏了对于基类的封装，基类的改变，对派生类会有很大的影响，也就是说，<strong>基类和派生类间的依赖性很强，耦合度高</strong>。</p>\n<blockquote>\n<p>补充部分：<br/> 我们知道，模块间的关系是低耦合，高内聚。<br/> 什么是耦合呢？<br/> 打个比方吧，比如我们去旅游，选择团体出行的话，人和人之间的关系太紧密，这就叫耦合度高；选择自由出行的话，人和人之间的关系松散，没有很多具体要求，这就叫耦合度低。</p>\n</blockquote>\n<p>对象组合是类继承之外的另一种复用选择。新的而且更复杂的功能可以通过组装或组合对象来获得。对象组合要求被组合的对象具有良好定义的接口。这种复用风格被称为黑箱复用，因为对象的<strong>内部细节是不可见的</strong>。对象只以“黑箱”的形式出现。<strong>组合类之间没有很强的依赖关系，耦合度低</strong>。优先使用对象组合有助于你保持每个类被封装。</p>\n<blockquote>\n<p>注意比较白箱复用和黑箱复用：<br/> 白箱复用：A对象的保护成员B能直接用，公有成员也是直接用；<br/> 黑箱复用：C对象的保护成员D不能直接用，公有成员可以直接用。</p>\n</blockquote>\n<p><strong>实际尽量多去用组合。组合的耦合度低，代码维护性好</strong>。不过继承也有用武之地的，有些关系就适合继承那就用继承，另外要实现多态，也必须要继承。类之间的关系可以用继承，可以用组合，就用组合。</p>\n<h1><a id=\"_662\"></a>笔试面试题</h1>\n<p>看完了这篇文章，这几道笔试面试题一定难不到你了，快来检测自己一下吧！</p>\n<ul><li>什么是菱形继承？菱形继承的问题是什么？</li><li>什么是菱形虚拟继承？如何解决数据冗余和二义性的？</li><li>继承和组合的区别？什么时候用继承？什么时候用组合？</li></ul>\n<p><strong>种一棵树最好的时间是十年前，其次是现在。</strong><br/> 还等什么呢，快上牛客来检验自己的学习成果吧：<a href=\"https://www.nowcoder.com/exam/oj?fromPut=pc_zh_n_anranwy_sf\">牛客网</a><br/> ​​<img alt=\"\" src=\"image\\9379474b2848404bbbba67a1626417bd.jpeg\"/></p>\n<p>​</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}