{"blogid": "126719711", "writerAge": "码龄1年", "writerBlogNum": "175", "writerCollect": "413", "writerComment": "299", "writerFan": "3370", "writerGrade": "5级", "writerIntegral": "2618", "writerName": "gh-xiaohe", "writerProfileAdress": "writer_image\\profile_126719711.jpg", "writerRankTotal": "7103", "writerRankWeekly": "3775", "writerThumb": "442", "writerVisitNum": "80454", "blog_read_count": "15", "blog_time": "于 2022-09-07 12:00:55 发布", "blog_title": "瑞吉外卖代码优化", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-kimbie-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#x1F492__6\">💒 优化</a></li><li><ul><li><a href=\"#x1F68F_1_8\">🚏 1、缓存优化</a></li><li><ul><li><a href=\"#x1F680_1_13\">🚀 1、环境搭建</a></li><li><ul><li><a href=\"#x1F6AC_maven_15\">🚬 maven坐标</a></li><li><a href=\"#x1F6AC__27\">🚬 配置文件</a></li><li><a href=\"#x1F6AC__41\">🚬 配置类</a></li></ul>\n</li><li><a href=\"#x1F684_2_67\">🚄 2、缓存短信验证码</a></li><li><ul><li><a href=\"#x1F6AC_Redis_74\">🚬 将验证码缓存在Redis中</a></li><li><a href=\"#x1F6AC__85\">🚬 代码实现</a></li></ul>\n</li><li><a href=\"#x1F692_3_181\">🚒 3、缓存菜品数据</a></li><li><ul><li><a href=\"#x1F6AC__183\">🚬 缓存优化详解</a></li><li><a href=\"#x1F6AC__200\">🚬 代码实现</a></li><li><ul><li><a href=\"#_DishControllerRedisTemplateRedis_202\">🚭 在DishController中注入RedisTemplate对象，用于操作Redis</a></li><li><a href=\"#_DishControllerlist_209\">🚭 改造DishController的list方法</a></li><li><a href=\"#_DishControllersave_282\">🚭 改造DishController的save方法</a></li><li><a href=\"#_DishControllerupdate_313\">🚭 改造DishController的update方法</a></li></ul>\n</li></ul>\n</li><li><a href=\"#x1F6A4_4Spring_Cache_343\">🚤 4、Spring Cache（新技术重要）</a></li><li><ul><li><a href=\"#x1F6AC_Spring_Cache__348\">🚬 Spring Cache 介绍</a></li><li><a href=\"#x1F6AC_CacheManager_361\">🚬 针对不同的缓存技术需要实现不同的CacheManager：</a></li><li><a href=\"#x1F6AC_Spring_Cache__366\">🚬 Spring Cache 常用注解</a></li><li><a href=\"#x1F6AC_Spring_Cache__375\">🚬 Spring Cache 使用方式</a></li><li><ul><li><a href=\"#_1maven_380\">🚭 1、导入maven坐标</a></li><li><a href=\"#_2applicationyml_394\">🚭 2、配置application.yml</a></li><li><a href=\"#_3EnableCaching_403\">🚭 3、在启动类上加入@EnableCaching注解，开启缓存注解功能</a></li><li><a href=\"#_4ControllerCacheableCacheEvict_419\">🚭 4、在Controller的方法上加入@Cacheable、@CacheEvict等注解，进行缓存操作</a></li></ul>\n</li><li><a href=\"#x1F6AC_Spring_Cache__465\">🚬 Spring Cache 上下文数据</a></li></ul>\n</li><li><a href=\"#x1F697_5_Spring_Cache__468\">🚗 5、缓存套餐数据 使用Spring Cache 注解实现</a></li><li><ul><li><a href=\"#x1F6AC__481\">🚬 代码实现</a></li><li><ul><li><a href=\"#_1maven_511\">🚭 1、导入maven坐标</a></li><li><a href=\"#_2applicationyml_525\">🚭 2、配置application.yml</a></li><li><a href=\"#_3EnableCaching_534\">🚭 3、在启动类上加入@EnableCaching注解，开启缓存注解功能</a></li><li><a href=\"#_4SetmealControllerlistCacheable_550\">🚭 4、在SetmealController的list方法上加入@Cacheable注解：</a></li><li><a href=\"#_5SetmealControllersavedeleteCacheEvict_572\">🚭 5、在SetmealController的save和delete方法上加入@CacheEvict注解</a></li><li><a href=\"#_6R_606\">🚭 6、返回结果类R需要实现序列化接口：</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<blockquote>\n<p>😹 <font color=\"#d71345\" size=\"3\"> 作者: gh-xiaohe<br/> 😻 <font color=\"##102b6a\" size=\"3\"> <a href=\"https://blog.csdn.net/gh_xiaohe\">gh-xiaohe的博客</a><br/> 😽 <font color=\"#f26522\" size=\"3\"> 觉得博主文章写的不错的话，希望大家三连（✌关注，✌点赞，✌评论），多多支持一下！！！</font></font></font></p>\n</blockquote>\n<h1><a id=\"x1F492__6\"></a>💒 优化</h1>\n<h2><a id=\"x1F68F_1_8\"></a>🚏 1、缓存优化</h2>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-kduZr3p2-1662430900182)(%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96.assets/image-20220906091031971.png)]\" src=\"image\\198ca71fae0040efb75f88f1f33b6c39.png\"/></p>\n<h3><a id=\"x1F680_1_13\"></a>🚀 1、环境搭建</h3>\n<h4><a id=\"x1F6AC_maven_15\"></a>🚬 maven坐标</h4>\n<p>    <font color=\"#f47920\" size=\"4\"><strong>在项目的pom.xml文件中导入spring data redis的maven坐标：</strong><br/> </font></p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h4><a id=\"x1F6AC__27\"></a>🚬 配置文件</h4>\n<p>    <font color=\"#f47920\" size=\"4\"><strong>在项目的application.yml中加入redis相关配置：</strong><br/> </font></p>\n<pre><code class=\"prism language-yaml\">spring\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 192.168.28.129\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span>\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span>\n    <span class=\"token key atrule\">database</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n</code></pre>\n<h4><a id=\"x1F6AC__41\"></a>🚬 配置类</h4>\n<p>    <font color=\"#f47920\" size=\"4\"><strong>在项目中加入配置类RedisConfig：</strong><br/> </font></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CachingConfigurerSupport</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RedisConnectionFactory</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RedisTemplate</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>serializer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CachingConfigurerSupport</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> connectionFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> redisTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//默认的Key序列化器为：JdkSerializationRedisSerializer</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"x1F684_2_67\"></a>🚄 2、缓存短信验证码</h3>\n<p>    <font color=\"#f47920\" size=\"4\"><strong>前面我们已经实现了移动端手机验证码登录，随机生成的验证码我们是保存在HttpSession中的。</strong><br/> </font></p>\n<h4><a id=\"x1F6AC_Redis_74\"></a>🚬 将验证码缓存在Redis中</h4>\n<p>    <font color=\"#f47920\" size=\"4\"><strong>具体的实现思路如下：</strong><br/> </font></p>\n<ul><li>1、在服务端UserController中注入<strong>RedisTemplate</strong>对象，用于操作<strong>Redis</strong></li><li>2、在服务端UserController的<strong>sendMsg</strong>方法中，将随机生成的验证码缓存到<strong>Redis</strong>中，并设置有效期为<strong>5</strong>分钟</li><li>3、在服务端UserController的<strong>login</strong>方法中，从Redis中获取缓存的验证码，如果登录成功则<strong>删除Redis</strong>中的验证码</li></ul>\n<h4><a id=\"x1F6AC__85\"></a>🚬 代码实现</h4>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 发送手机短信验证码 -- 改造加入到redis中\n     * @param user\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sendMsg\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">sendMsg</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//获取手机号</span>\n        <span class=\"token class-name\">String</span> phone <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//生成随机的4位验证码</span>\n            <span class=\"token class-name\">String</span> code <span class=\"token operator\">=</span> <span class=\"token class-name\">ValidateCodeUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">generateValidateCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code={}\"</span><span class=\"token punctuation\">,</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//调用阿里云提供的短信服务API完成发送短信</span>\n            <span class=\"token comment\">//SMSUtils.sendMessage(\"瑞吉外卖\",\"\",phone,code);</span>\n\n            <span class=\"token comment\">//需要将生成的验证码保存到Session</span>\n            <span class=\"token comment\">//session.setAttribute(phone,code);</span>\n\n            <span class=\"token comment\">//将生成的验证码缓存到Redis中，并且设置有效期为5分钟</span>\n            redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">,</span>code<span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MINUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有效期五分钟</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手机验证码短信发送成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"短信发送失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 移动端用户登录 -- 改造加入到redis中\n     * @param map\n     * @param session\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Map</span> map<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//获取手机号</span>\n        <span class=\"token class-name\">String</span> phone <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//获取验证码</span>\n        <span class=\"token class-name\">String</span> code <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//从Session中获取保存的验证码</span>\n        <span class=\"token comment\">//Object codeInSession = session.getAttribute(phone);</span>\n\n        <span class=\"token comment\">//从Redis中获取缓存的验证码</span>\n        <span class=\"token class-name\">Object</span> codeInSession <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//进行验证码的比对（页面提交的验证码和Session中保存的验证码比对）</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>codeInSession <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> codeInSession<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//如果能够比对成功，说明登录成功</span>\n\n            <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getPhone</span><span class=\"token punctuation\">,</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">getOne</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//判断当前手机号对应的用户是否为新用户，如果是新用户就自动完成注册</span>\n                user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                user<span class=\"token punctuation\">.</span><span class=\"token function\">setPhone</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                user<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                userService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            session<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//如果用户登录成功，删除Redis中缓存的验证码</span>\n            redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\864dff6df6234c14b937dfcbc7ea6033.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"image\\403e354d7b684ee19f038793d39c5e4f.png\"/></p>\n<h3><a id=\"x1F692_3_181\"></a>🚒 3、缓存菜品数据</h3>\n<h4><a id=\"x1F6AC__183\"></a>🚬 缓存优化详解</h4>\n<blockquote>\n<p>    前面我们已经实现了<strong>移动端菜品查看功能</strong>，对应的服务端方法为<strong>DishController</strong>的<strong>list</strong>方法，此方法会根据前端<strong>提交的查询条件</strong>进行数据库<strong>查询操作</strong>。在<mark>高并发</mark>的情况下，<strong>频繁查询数据库</strong>会导致系统性能下降，服务端响应时间增长。现在需要对此方法进行缓存优化，提高系统的性能。</p>\n</blockquote>\n<p><font color=\"#f47920\" size=\"4\"><strong>具体的实现思路如下：</strong><br/> </font></p>\n<ul><li>1、改造<strong>DishController</strong>的<strong>list</strong>方法，先从<strong>Redis</strong>中<strong>获取菜品数据</strong>，如果<strong>有</strong>则直接<strong>返回</strong>，无需查询数据库;如果<strong>没有</strong>则<strong>查询数据库</strong>，<strong>并</strong>将查询到的菜品数据<strong>放入Redis</strong>。</li><li>2、改造<strong>DishController</strong>的<strong>save</strong>和<strong>update</strong>方法，加入<strong>清理缓存</strong>的逻辑 \n  <ul><li>如果不进行清理，就会造成<strong>数据库</strong>的文件和<strong>缓存</strong>中文件<strong>不一致</strong>，称之为<strong>脏数据</strong></li></ul> </li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\875d8d40398049a593259db293b110ed.png\"/></p>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-55i3tWnz-1662433687594)(%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96.assets/image-20220906105014480.png)]\" src=\"image\\8909e54c59944b73a7290350c27d42eb.png\"/></p>\n<h4><a id=\"x1F6AC__200\"></a>🚬 代码实现</h4>\n<h5><a id=\"_DishControllerRedisTemplateRedis_202\"></a>🚭 在DishController中注入RedisTemplate对象，用于操作Redis</h5>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span>\n</code></pre>\n<h5><a id=\"_DishControllerlist_209\"></a>🚭 改造DishController的list方法</h5>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * 根据条件查询对应的菜品数据 -- 改造加入到redis中\n *\n * @param dish\n * @return\n */</span>\n<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/list\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DishDto</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dish</span> dish<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DishDto</span><span class=\"token punctuation\">&gt;</span></span> dishDtoList <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//动态构造key 根据分类的id去区分 http://localhost:8080/dish/list?categoryId=1397844263642378242&amp;status=1</span>\n    <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"dish_\"</span> <span class=\"token operator\">+</span> dish<span class=\"token punctuation\">.</span><span class=\"token function\">getCategoryId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span> <span class=\"token operator\">+</span> dish<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//dish_1397844391040167938_1</span>\n\n    <span class=\"token comment\">//先从redis中获取缓存数据</span>\n    dishDtoList <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DishDto</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dishDtoList <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//如果存在，直接返回，无需查询数据库</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>dishDtoList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//构造查询条件</span>\n    <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dish</span><span class=\"token punctuation\">&gt;</span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>dish<span class=\"token punctuation\">.</span><span class=\"token function\">getCategoryId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Dish</span><span class=\"token operator\">::</span><span class=\"token function\">getCategoryId</span><span class=\"token punctuation\">,</span> dish<span class=\"token punctuation\">.</span><span class=\"token function\">getCategoryId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//添加条件，查询状态为1（起售状态）的菜品</span>\n    queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dish</span><span class=\"token operator\">::</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//添加排序条件</span>\n    queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">orderByAsc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dish</span><span class=\"token operator\">::</span><span class=\"token function\">getSort</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orderByDesc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dish</span><span class=\"token operator\">::</span><span class=\"token function\">getUpdateTime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dish</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> dishService<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    dishDtoList <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">DishDto</span> dishDto <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DishDto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">BeanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyProperties</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> dishDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Long</span> categoryId <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getCategoryId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//分类id</span>\n        <span class=\"token comment\">//根据id查询分类对象</span>\n        <span class=\"token class-name\">Category</span> category <span class=\"token operator\">=</span> categoryService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>categoryId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>category <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">String</span> categoryName <span class=\"token operator\">=</span> category<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            dishDto<span class=\"token punctuation\">.</span><span class=\"token function\">setCategoryName</span><span class=\"token punctuation\">(</span>categoryName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//当前菜品的id</span>\n        <span class=\"token class-name\">Long</span> dishId <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DishFlavor</span><span class=\"token punctuation\">&gt;</span></span> lambdaQueryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lambdaQueryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DishFlavor</span><span class=\"token operator\">::</span><span class=\"token function\">getDishId</span><span class=\"token punctuation\">,</span> dishId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//SQL:select * from dish_flavor where dish_id = ?</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DishFlavor</span><span class=\"token punctuation\">&gt;</span></span> dishFlavorList <span class=\"token operator\">=</span> dishFlavorService<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span>lambdaQueryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dishDto<span class=\"token punctuation\">.</span><span class=\"token function\">setFlavors</span><span class=\"token punctuation\">(</span>dishFlavorList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> dishDto<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//如果不存在，需要查询数据库，将查询到的菜品数据缓存到Redis</span>\n    redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> dishDtoList<span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MINUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>dishDtoList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\c869352176bf4399a8fafaaf5f671ec3.png\"/><br/>  <br/> <font color=\"#f47920\" size=\"4\"><strong>测试</strong> </font><br/>  <br/> <img alt=\"在这里插入图片描述\" src=\"image\\c456f4f455ca4f5c8325bded6f0fabbb.png\"/></p>\n<h5><a id=\"_DishControllersave_282\"></a>🚭 改造DishController的save方法</h5>\n<ul><li><strong>全部清理key</strong></li><li><strong>只清理修改分类下面的key的缓存数据</strong></li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * 新增菜品 -- 改造加入到redis中\n *\n * @param dishDto\n * @return\n */</span>\n<span class=\"token annotation punctuation\">@PostMapping</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">DishDto</span> dishDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>dishDto<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    dishService<span class=\"token punctuation\">.</span><span class=\"token function\">saveWithFlavor</span><span class=\"token punctuation\">(</span>dishDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//清理所有菜品的缓存数据</span>\n    <span class=\"token comment\">//Set keys = redisTemplate.keys(\"dish_*\");// 获得所有以dish_开头的key</span>\n    <span class=\"token comment\">//redisTemplate.delete(keys);</span>\n\n    <span class=\"token comment\">//清理某个分类下面的菜品缓存数据</span>\n    <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"dish_\"</span> <span class=\"token operator\">+</span> dishDto<span class=\"token punctuation\">.</span><span class=\"token function\">getCategoryId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"_1\"</span><span class=\"token punctuation\">;</span>\n    redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新增菜品成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"_DishControllerupdate_313\"></a>🚭 改造DishController的update方法</h5>\n<ul><li><strong>全部清理key</strong></li><li><strong>只清理修改分类下面的key的缓存数据</strong></li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * 修改菜品 -- 改造加入到redis中\n *\n * @param dishDto\n * @return\n */</span>\n<span class=\"token annotation punctuation\">@PutMapping</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">DishDto</span> dishDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>dishDto<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    dishService<span class=\"token punctuation\">.</span><span class=\"token function\">updateWithFlavor</span><span class=\"token punctuation\">(</span>dishDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//清理所有菜品的缓存数据</span>\n    <span class=\"token comment\">//Set keys = redisTemplate.keys(\"dish_*\");// 获得所有以dish_开头的key</span>\n    <span class=\"token comment\">//redisTemplate.delete(keys);</span>\n\n    <span class=\"token comment\">//清理某个分类下面的菜品缓存数据</span>\n    <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"dish_\"</span> <span class=\"token operator\">+</span> dishDto<span class=\"token punctuation\">.</span><span class=\"token function\">getCategoryId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"_1\"</span><span class=\"token punctuation\">;</span>\n    redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改菜品成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"x1F6A4_4Spring_Cache_343\"></a>🚤 4、Spring Cache（新技术重要）</h3>\n<blockquote>\n<p>    <font color=\"#f47920\" size=\"4\"><strong>整合缓存的框架 注解实现</strong><br/> </font></p>\n</blockquote>\n<h4><a id=\"x1F6AC_Spring_Cache__348\"></a>🚬 Spring Cache 介绍</h4>\n<p>    <font color=\"#f47920\" size=\"4\"><font color=\"red\" size=\"4\"><strong>Spring Cache</strong></font>是一个<font color=\"red\" size=\"4\"><strong>框架</strong></font>，实现了<font color=\"red\" size=\"4\"><strong>基于注解的缓存功能</strong></font>，只需要<font color=\"red\" size=\"4\"><strong>简单地加一个注解</strong></font>，就能<font color=\"red\" size=\"4\"><strong>实现缓存功能</strong></font>。<br/> </font></p>\n<p>    <font color=\"#f47920\" size=\"4\"><font color=\"red\" size=\"4\"><strong>Spring Cache</strong></font>提供了一层抽象，底层可以切换不同的<font color=\"red\" size=\"4\"><strong>cache实现</strong></font>。具体就是通过<font color=\"red\" size=\"4\"><strong>CacheManager接口</strong></font>来<font color=\"red\" size=\"4\"><strong>统一不同的缓存技术</strong></font>。</font></p>\n<p>    <font color=\"#f47920\" size=\"4\"><font color=\"red\" size=\"4\"><strong>CacheManager</strong></font>是Spring提供的各种<font color=\"red\" size=\"4\"><strong>缓存技术抽象接口</strong></font>。</font></p>\n<h4><a id=\"x1F6AC_CacheManager_361\"></a>🚬 针对不同的缓存技术需要实现不同的CacheManager：</h4>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-4BeR140u-1662446011901)(%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96.assets/image-20220905213003600.png)]\" src=\"image\\65a8aae351034608a7cc120ba3ff7fb7.png\"/></p>\n<h4><a id=\"x1F6AC_Spring_Cache__366\"></a>🚬 Spring Cache 常用注解</h4>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-7G7CXVv8-1662446011902)(%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96.assets/image-20220905213049570.png)]\" src=\"image\\27abe3bbfa864fe2be46060fb128b04a.png\"/></p>\n<p>    <font color=\"#f47920\" size=\"4\"><strong>在spring boot项目中，使用缓存技术只需在项目中导入相关缓存技术的依赖包，并在<font color=\"red\" size=\"4\">启动类上使用@EnableCaching开启缓存 </font>支持即可。</strong></font><br/>     <br/> <font color=\"red\" size=\"4\"><strong>例如：</strong></font>使用Redis作为缓存技术，只需要导入<strong>Spring data Redis</strong>的<strong>maven</strong>坐标即可。</p>\n<h4><a id=\"x1F6AC_Spring_Cache__375\"></a>🚬 Spring Cache 使用方式</h4>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-78iy0588-1662446011902)(%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96.assets/image-20220905213238973.png)]\" src=\"image\\add6750b1822410298ccb9cb4935cead.png\"/></p>\n<h5><a id=\"_1maven_380\"></a>🚭 1、导入maven坐标</h5>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-cache<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h5><a id=\"_2applicationyml_394\"></a>🚭 2、配置application.yml</h5>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">time-to-live</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1800000</span> <span class=\"token comment\">#设置缓存数据的过期时间</span>\n</code></pre>\n<h5><a id=\"_3EnableCaching_403\"></a>🚭 3、在启动类上加入@EnableCaching注解，开启缓存注解功能</h5>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@ServletComponentScan</span>\n<span class=\"token annotation punctuation\">@EnableTransactionManagement</span>\n<span class=\"token annotation punctuation\">@EnableCaching</span> <span class=\"token comment\">//开启Spring Cache注解方式是缓存功能</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReggieApplication</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReggieApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"项目启动成功...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"_4ControllerCacheableCacheEvict_419\"></a>🚭 4、在Controller的方法上加入@Cacheable、@CacheEvict等注解，进行缓存操作</h5>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * 套餐管理\n */</span>\n\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/setmeal\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SetmealController</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\n    <span class=\"token comment\">/**\n     * 新增套餐\n     * @param setmealDto\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@PostMapping</span>\n    <span class=\"token annotation punctuation\">@CacheEvict</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"setmealCache\"</span><span class=\"token punctuation\">,</span>allEntries <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">SetmealDto</span> setmealDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"套餐信息：{}\"</span><span class=\"token punctuation\">,</span>setmealDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        setmealService<span class=\"token punctuation\">.</span><span class=\"token function\">saveWithDish</span><span class=\"token punctuation\">(</span>setmealDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新增套餐成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 删除套餐\n     * @param ids\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@DeleteMapping</span>\n    <span class=\"token annotation punctuation\">@CacheEvict</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"setmealCache\"</span><span class=\"token punctuation\">,</span>allEntries <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">&gt;</span></span> ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ids:{}\"</span><span class=\"token punctuation\">,</span>ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        setmealService<span class=\"token punctuation\">.</span><span class=\"token function\">removeWithDish</span><span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"套餐数据删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"x1F6AC_Spring_Cache__465\"></a>🚬 Spring Cache 上下文数据</h4>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-c1hQg8zM-1662446011903)(%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96.assets/image-20220905213301988.png)]\" src=\"image\\828d813556154652a891d477618d5c45.png\"/></p>\n<h3><a id=\"x1F697_5_Spring_Cache__468\"></a>🚗 5、缓存套餐数据 使用Spring Cache 注解实现</h3>\n<blockquote>\n<p>    前面我们已经实现了移动端套餐查看功能，对应的服务端方法为SetmealController的list方法，此方法会根据前端提交的查询条件进行数据库查询操作。在高并发的情况下，频繁查询数据库会导致系统性能下降，服务端响应时间增长。现在需要对此方法进行缓存优化，提高系统的性能。</p>\n</blockquote>\n<p><font color=\"#f47920\" size=\"4\"><strong>具体的实现思路如下：</strong><br/> </font></p>\n<ul><li><strong>1、导入Spring Cache和Redis相关maven坐标</strong></li><li><strong>2、在application.yml中配置缓存数据的过期时间</strong></li><li><strong>3、在启动类上加入@EnableCaching注解，开启缓存注解功能</strong></li><li><strong>4、在SetmealController的list方法上加入@Cacheable注解</strong></li><li><strong>5、在SetmealController的save和delete方法上加入CacheEvict注解</strong></li></ul>\n<h4><a id=\"x1F6AC__481\"></a>🚬 代码实现</h4>\n<blockquote>\n<p><font color=\"#f47920\" size=\"4\"><strong>@CachePut(value = “userCache”,key = “#user.id”)</strong><br/> </font></p>\n<ul><li><strong>CachePut：将方法返回值放入缓存</strong></li><li><strong>value：缓存的名称，每个缓存名称下面可以有多个key</strong></li><li><strong>key：缓存的key</strong></li></ul>\n<p><font color=\"#f47920\" size=\"4\"><strong>@CacheEvict(value = “userCache”,key = “#p0”)</strong><br/> </font><br/> <font color=\"#f47920\" size=\"4\"><strong>@CacheEvict(value = “userCache”,key = “#root.args[0]”)</strong><br/> </font><br/> <font color=\"#f47920\" size=\"4\"><strong>@CacheEvict(value = “userCache”,key = “#id”)</strong><br/> </font></p>\n<ul><li><strong>CacheEvict：清理指定缓存</strong></li><li><strong>value：缓存的名称，每个缓存名称下面可以有多个key</strong></li><li><strong>key：缓存的key</strong></li><li><strong>allEntries = true 删除这个分类下的所有数据</strong></li></ul>\n<p><font color=\"#f47920\" size=\"4\"><strong>@Cacheable(value = “userCache”,key = “#id”,unless = “#result == null”)</strong><br/> </font></p>\n<ul><li><strong>Cacheable：在方法执行前spring先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</strong></li><li><strong>value：缓存的名称，每个缓存名称下面可以有多个key</strong></li><li><strong>key：缓存的key</strong></li><li><strong>condition：条件，满足条件时才缓存数据</strong></li><li><strong>unless：满足条件则不缓存</strong></li></ul>\n</blockquote>\n<h5><a id=\"_1maven_511\"></a>🚭 1、导入maven坐标</h5>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-cache<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h5><a id=\"_2applicationyml_525\"></a>🚭 2、配置application.yml</h5>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">time-to-live</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1800000</span> <span class=\"token comment\">#设置缓存数据的过期时间 30分钟 毫秒</span>\n</code></pre>\n<h5><a id=\"_3EnableCaching_534\"></a>🚭 3、在启动类上加入@EnableCaching注解，开启缓存注解功能</h5>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@ServletComponentScan</span>\n<span class=\"token annotation punctuation\">@EnableTransactionManagement</span>\n<span class=\"token annotation punctuation\">@EnableCaching</span> <span class=\"token comment\">//开启Spring Cache注解方式是缓存功能</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReggieApplication</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReggieApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"项目启动成功...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"_4SetmealControllerlistCacheable_550\"></a>🚭 4、在SetmealController的list方法上加入@Cacheable注解：</h5>\n<pre><code class=\"prism language-java\">    <span class=\"token comment\">/**\n     * 根据条件查询套餐数据\n     * @param setmeal\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/list\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Cacheable</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"setmealCache\"</span><span class=\"token punctuation\">,</span>key <span class=\"token operator\">=</span> <span class=\"token string\">\"#setmeal.categoryId + '_' + #setmeal.status\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Setmeal</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Setmeal</span> setmeal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Setmeal</span><span class=\"token punctuation\">&gt;</span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>setmeal<span class=\"token punctuation\">.</span><span class=\"token function\">getCategoryId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Setmeal</span><span class=\"token operator\">::</span><span class=\"token function\">getCategoryId</span><span class=\"token punctuation\">,</span>setmeal<span class=\"token punctuation\">.</span><span class=\"token function\">getCategoryId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>setmeal<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Setmeal</span><span class=\"token operator\">::</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">,</span>setmeal<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">orderByDesc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Setmeal</span><span class=\"token operator\">::</span><span class=\"token function\">getUpdateTime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Setmeal</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> setmealService<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"_5SetmealControllersavedeleteCacheEvict_572\"></a>🚭 5、在SetmealController的save和delete方法上加入@CacheEvict注解</h5>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * 新增套餐\n * @param setmealDto\n * @return\n */</span>\n<span class=\"token annotation punctuation\">@PostMapping</span>\n<span class=\"token annotation punctuation\">@CacheEvict</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"setmealCache\"</span><span class=\"token punctuation\">,</span>allEntries <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">SetmealDto</span> setmealDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"套餐信息：{}\"</span><span class=\"token punctuation\">,</span>setmealDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    setmealService<span class=\"token punctuation\">.</span><span class=\"token function\">saveWithDish</span><span class=\"token punctuation\">(</span>setmealDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新增套餐成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 删除套餐\n * @param ids\n * @return\n */</span>\n<span class=\"token annotation punctuation\">@DeleteMapping</span>\n<span class=\"token annotation punctuation\">@CacheEvict</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"setmealCache\"</span><span class=\"token punctuation\">,</span>allEntries <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">&gt;</span></span> ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ids:{}\"</span><span class=\"token punctuation\">,</span>ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    setmealService<span class=\"token punctuation\">.</span><span class=\"token function\">removeWithDish</span><span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"套餐数据删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"_6R_606\"></a>🚭 6、返回结果类R需要实现序列化接口：</h5>\n<blockquote>\n<p>DefaultSerializer requires a Serializable payload but received an object of type [com.itheima.reggie.common.R]<br/>  <br/> 结果需要实现序列化接口 implements Serializable</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * 通用返回结果，服务端响应的数据最终都会封装成此对象\n * @param &lt;T&gt;\n */</span>\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">{<!-- --></span>\n\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"image\\40ddad37b44d4c0d82fdb0d8327dca26.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}