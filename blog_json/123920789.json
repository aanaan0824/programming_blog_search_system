{"blogid": "123920789", "writerAge": "码龄4年", "writerBlogNum": "77", "writerCollect": "636", "writerComment": "95", "writerFan": "1254", "writerGrade": "5级", "writerIntegral": "2343", "writerName": "王会举", "writerProfileAdress": "writer_image\\profile_123920789.jpg", "writerRankTotal": "10434", "writerRankWeekly": "22813", "writerThumb": "217", "writerVisitNum": "261155", "blog_read_count": "4646", "blog_time": "于 2022-04-02 16:20:02 发布", "blog_title": "MySQL进阶:sql性能分析", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>1:<strong>sql的执行次数分析: </strong></h1>\n<p><span style=\"color:#fe2c24;\"><strong>sql: show global status like 'com_______'</strong></span></p>\n<p>解释:通过该命令可以查看当前数据库下的增删改查的使用次数,来采取对应的优化处理. value值就是执行的次数.</p>\n<p><img alt=\"\" height=\"339\" src=\"image\\e9f15e643b1844469ee4e44fa51a569d.png\" width=\"233\"/></p>\n<h1>2:慢查询日志</h1>\n<p><span style=\"color:#fe2c24;\"><strong><code>sql: show variables like </code><code>'%slow_query_log%'</code><code>; </code></strong></span></p>\n<p>      慢查询日志会记录超出自己设置的时间还没有执行完毕的sql.   默认情况下，Mysql数据库并不启动慢查询日志，需要我们手动来设置这个参数，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件，也支持将日志记录写入数据库表。</p>\n<p><img alt=\"\" height=\"90\" src=\"image\\a8a9d79cf05d418c8bfe4da9d0a77bd2.png\" width=\"273\"/></p>\n<p></p>\n<p><strong>可以看到, 默认情况下slow_query_log的值为OFF，表示慢查询日志是禁用的，可以通过设置slow_query_log的值来开启</strong></p>\n<p><strong>开启慢查询日志sql: <span style=\"color:#fe2c24;\"><code>set global slow_query_log=1;</code></span></strong></p>\n<p><strong>设置慢查询的超时时间:<span style=\"color:#fe2c24;\"> set global long_query_time=2;</span></strong><code><span style=\"color:#fe2c24;\"> </span>以秒为单位</code></p>\n<p><strong> 注意:</strong> 使用set global slow_query_log=1开启了慢查询日志只对当前数据库生效，MySQL重启后则会失效。如果要永久生效，就必须修改配置文件my.cnf</p>\n<p><img alt=\"\" height=\"582\" src=\"image\\1e335c8cb11b42589fe8e4c3b6e4816d.png\" width=\"996\"/></p>\n<p>找到日志文件打开,就会看到如上图所示,记录了超时的sql信息.</p>\n<h1>3:profile分析</h1>\n<p>1.查看profile是否可用 </p>\n<p><strong><span style=\"color:#fe2c24;\">SELECT @@profiling;</span></strong></p>\n<p><img alt=\"\" height=\"135\" src=\"image\\b17f7b397cc844809dfa7135a8a62fc6.png\" width=\"261\"/><br/><br/><span style=\"color:#0d0016;\"><strong>2: 开启profile</strong></span><strong><span style=\"color:#0d0016;\">:</span><span style=\"color:#fe2c24;\">   </span></strong></p>\n<p><strong><span style=\"color:#fe2c24;\">SET profiling = 1;</span></strong></p>\n<p></p>\n<p><strong>3: 查看当前会话下的所有sql执行时间:</strong></p>\n<p><strong><span style=\"color:#fe2c24;\"> show profiles;</span></strong></p>\n<p><img alt=\"\" height=\"382\" src=\"image\\89e07b2454994450b0628453240524be.png\" width=\"458\"/></p>\n<p><strong> 4:查看具体sql的每个步骤消耗时间</strong></p>\n<p><strong><span style=\"color:#fe2c24;\"> show profiles for query  xx;   这个xx是上图的query_id</span></strong></p>\n<p><strong><span style=\"color:#0d0016;\"> 可以看到sql每个步骤执行消耗了多长时间  注意:</span></strong><span style=\"color:#fe2c24;\">profile是用户级变量,每次都得重新启用</span></p>\n<p><img alt=\"\" height=\"385\" src=\"image\\ef9f99e31b9b4ba3afef7c5db3a85205.png\" width=\"396\"/></p>\n<p> </p>\n<p><strong> 5:查看具体sql的cpu消耗时间</strong></p>\n<p><strong><span style=\"color:#fe2c24;\"> show profiles cpu  for query  xx;    比上个步骤多了一个cpu字段</span></strong></p>\n<p><strong><span style=\"color:#0d0016;\"> </span></strong><img alt=\"\" height=\"360\" src=\"image\\526d44cb51f54481a33f70b87e6be128.png\" width=\"580\"/></p>\n<p> </p>\n<p>sql的性能分析到此就可以了,剩下的sql优化还需要结合<strong> explain 或者 索引</strong>的相关知识进行进一步优化.</p>\n<p>可以参考一下我的另外两篇文章:</p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/wang5701071/article/details/117782061\" title=\"sql优化之explain关键字分析\">sql优化之explain关键字分析</a></p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/wang5701071/article/details/108797859\" title=\"sql优化的N种方法\">sql优化的N种方法</a></p>\n<p></p>\n</div>\n</div>"}