{"blogid": "126708788", "writerAge": "码龄4年", "writerBlogNum": "68", "writerCollect": "93", "writerComment": "16", "writerFan": "10", "writerGrade": "4级", "writerIntegral": "1187", "writerName": "流浪打工人", "writerProfileAdress": "writer_image\\profile_126708788.jpg", "writerRankTotal": "17947", "writerRankWeekly": "161770", "writerThumb": "25", "writerVisitNum": "91055", "blog_read_count": "91", "blog_time": "已于 2022-09-06 19:15:33 修改", "blog_title": "C# 的静态构造函数和BeforeFieldInit含义", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"style.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"1_1\"></a>1、静态初始化函数：</h2>\n<p>静态初始化函数，C#语法可以保证在一个程序中只调用一次，但是会去掉默认的beforefieldinit 标记<br/> （C#默认会加）<br/> <br/></p>\n<h2><a id=\"2BeforeFieldInit__7\"></a>2、BeforeFieldInit 的意义</h2>\n<p>C#在访问静态函数的时候，可能会初始化该类，具体的时机不确定，有可能是程序刚开始就初始化，也可能<br/> 最后访问具体属性的时候才初始化；具体加载时机由CLR决定。</p>\n<p><a href=\"https://csharpindepth.com/Articles/BeforeFieldInit\">这篇文章讲的非常不错，可以看看</a><br/> <br/></p>\n<h2><a id=\"3c_14\"></a>3、实现更好的c#懒汉模式加载</h2>\n<br/>\n<p>内部类+静态构造函数，CLR保证静态构造函数只会加载一次，<br/> <br/></p>\n<h4><a id=\"C_20\"></a>C#调试代码如下所示，添加和不添加静态构造函数，类的实例化时间会不同</h4>\n<br/>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ConsoleApp1</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">FirstType</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> x <span class=\"token operator\">=</span> <span class=\"token function\">EchoAndReturn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"In type initializer FirstType\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FirstType F\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">FirstType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FirstType is inited!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token function\">FirstType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 加了这个函数之后，就会在编译的时候放弃默认的beforeFieldInit字段，当调用静态函数F时，就会初始化静态成员</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">EchoAndReturn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecondType</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> x <span class=\"token operator\">=</span> <span class=\"token function\">EchoAndReturn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"In type initializer SecondType\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token function\">SecondType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SecondType F\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">SecondType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SecondType is inited!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">EchoAndReturn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DoSomething</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> which<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>which<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                FirstType<span class=\"token punctuation\">.</span><span class=\"token function\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                SecondType<span class=\"token punctuation\">.</span><span class=\"token function\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">DoSomething</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<br/>\n<h3><a id=\"_83\"></a>总结</h3>\n<ul><li><strong>静态构造函数</strong>：静态构造函数的添加需要慎重，要知道添加的具体含义，因为添加了之后会去掉该类的BeforeFieldInit标志，这个标志是CLR优化效率用的，主要作用就是尽量延迟加载（lazy loading）,也就是到真正使用的时候才加载。</li><li><strong>BeforeFieldInit</strong>：C#会给类默认加的标志（除非类显示添加了静态构造函数），会进行相应的优化。</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>"}